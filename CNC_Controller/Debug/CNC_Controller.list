
CNC_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010274  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000960  08010404  08010404  00011404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010d64  08010d64  0001207c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08010d64  08010d64  00011d64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010d6c  08010d6c  0001207c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010d6c  08010d6c  00011d6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08010d70  08010d70  00011d70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08010d74  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000120c  20000080  08010df0  00012080  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000128c  08010df0  0001228c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001207c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000225b8  00000000  00000000  000120ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005ea6  00000000  00000000  00034664  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001fb8  00000000  00000000  0003a510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000180f  00000000  00000000  0003c4c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ae11  00000000  00000000  0003dcd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002aa31  00000000  00000000  00068ae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fae54  00000000  00000000  00093519  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018e36d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008a60  00000000  00000000  0018e3b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  00196e10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080103ec 	.word	0x080103ec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	080103ec 	.word	0x080103ec

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_ldivmod>:
 8000270:	b97b      	cbnz	r3, 8000292 <__aeabi_ldivmod+0x22>
 8000272:	b972      	cbnz	r2, 8000292 <__aeabi_ldivmod+0x22>
 8000274:	2900      	cmp	r1, #0
 8000276:	bfbe      	ittt	lt
 8000278:	2000      	movlt	r0, #0
 800027a:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 800027e:	e006      	blt.n	800028e <__aeabi_ldivmod+0x1e>
 8000280:	bf08      	it	eq
 8000282:	2800      	cmpeq	r0, #0
 8000284:	bf1c      	itt	ne
 8000286:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 800028a:	f04f 30ff 	movne.w	r0, #4294967295
 800028e:	f000 b9d3 	b.w	8000638 <__aeabi_idiv0>
 8000292:	f1ad 0c08 	sub.w	ip, sp, #8
 8000296:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800029a:	2900      	cmp	r1, #0
 800029c:	db09      	blt.n	80002b2 <__aeabi_ldivmod+0x42>
 800029e:	2b00      	cmp	r3, #0
 80002a0:	db1a      	blt.n	80002d8 <__aeabi_ldivmod+0x68>
 80002a2:	f000 f84d 	bl	8000340 <__udivmoddi4>
 80002a6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ae:	b004      	add	sp, #16
 80002b0:	4770      	bx	lr
 80002b2:	4240      	negs	r0, r0
 80002b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	db1b      	blt.n	80002f4 <__aeabi_ldivmod+0x84>
 80002bc:	f000 f840 	bl	8000340 <__udivmoddi4>
 80002c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002c8:	b004      	add	sp, #16
 80002ca:	4240      	negs	r0, r0
 80002cc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002d0:	4252      	negs	r2, r2
 80002d2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002d6:	4770      	bx	lr
 80002d8:	4252      	negs	r2, r2
 80002da:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002de:	f000 f82f 	bl	8000340 <__udivmoddi4>
 80002e2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ea:	b004      	add	sp, #16
 80002ec:	4240      	negs	r0, r0
 80002ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002f2:	4770      	bx	lr
 80002f4:	4252      	negs	r2, r2
 80002f6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002fa:	f000 f821 	bl	8000340 <__udivmoddi4>
 80002fe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000302:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000306:	b004      	add	sp, #16
 8000308:	4252      	negs	r2, r2
 800030a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800030e:	4770      	bx	lr

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b988 	b.w	8000638 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	468e      	mov	lr, r1
 8000348:	4604      	mov	r4, r0
 800034a:	4688      	mov	r8, r1
 800034c:	2b00      	cmp	r3, #0
 800034e:	d14a      	bne.n	80003e6 <__udivmoddi4+0xa6>
 8000350:	428a      	cmp	r2, r1
 8000352:	4617      	mov	r7, r2
 8000354:	d962      	bls.n	800041c <__udivmoddi4+0xdc>
 8000356:	fab2 f682 	clz	r6, r2
 800035a:	b14e      	cbz	r6, 8000370 <__udivmoddi4+0x30>
 800035c:	f1c6 0320 	rsb	r3, r6, #32
 8000360:	fa01 f806 	lsl.w	r8, r1, r6
 8000364:	fa20 f303 	lsr.w	r3, r0, r3
 8000368:	40b7      	lsls	r7, r6
 800036a:	ea43 0808 	orr.w	r8, r3, r8
 800036e:	40b4      	lsls	r4, r6
 8000370:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000374:	fa1f fc87 	uxth.w	ip, r7
 8000378:	fbb8 f1fe 	udiv	r1, r8, lr
 800037c:	0c23      	lsrs	r3, r4, #16
 800037e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000382:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000386:	fb01 f20c 	mul.w	r2, r1, ip
 800038a:	429a      	cmp	r2, r3
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0x62>
 800038e:	18fb      	adds	r3, r7, r3
 8000390:	f101 30ff 	add.w	r0, r1, #4294967295
 8000394:	f080 80ea 	bcs.w	800056c <__udivmoddi4+0x22c>
 8000398:	429a      	cmp	r2, r3
 800039a:	f240 80e7 	bls.w	800056c <__udivmoddi4+0x22c>
 800039e:	3902      	subs	r1, #2
 80003a0:	443b      	add	r3, r7
 80003a2:	1a9a      	subs	r2, r3, r2
 80003a4:	b2a3      	uxth	r3, r4
 80003a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80003aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80003ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b2:	fb00 fc0c 	mul.w	ip, r0, ip
 80003b6:	459c      	cmp	ip, r3
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x8e>
 80003ba:	18fb      	adds	r3, r7, r3
 80003bc:	f100 32ff 	add.w	r2, r0, #4294967295
 80003c0:	f080 80d6 	bcs.w	8000570 <__udivmoddi4+0x230>
 80003c4:	459c      	cmp	ip, r3
 80003c6:	f240 80d3 	bls.w	8000570 <__udivmoddi4+0x230>
 80003ca:	443b      	add	r3, r7
 80003cc:	3802      	subs	r0, #2
 80003ce:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003d2:	eba3 030c 	sub.w	r3, r3, ip
 80003d6:	2100      	movs	r1, #0
 80003d8:	b11d      	cbz	r5, 80003e2 <__udivmoddi4+0xa2>
 80003da:	40f3      	lsrs	r3, r6
 80003dc:	2200      	movs	r2, #0
 80003de:	e9c5 3200 	strd	r3, r2, [r5]
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d905      	bls.n	80003f6 <__udivmoddi4+0xb6>
 80003ea:	b10d      	cbz	r5, 80003f0 <__udivmoddi4+0xb0>
 80003ec:	e9c5 0100 	strd	r0, r1, [r5]
 80003f0:	2100      	movs	r1, #0
 80003f2:	4608      	mov	r0, r1
 80003f4:	e7f5      	b.n	80003e2 <__udivmoddi4+0xa2>
 80003f6:	fab3 f183 	clz	r1, r3
 80003fa:	2900      	cmp	r1, #0
 80003fc:	d146      	bne.n	800048c <__udivmoddi4+0x14c>
 80003fe:	4573      	cmp	r3, lr
 8000400:	d302      	bcc.n	8000408 <__udivmoddi4+0xc8>
 8000402:	4282      	cmp	r2, r0
 8000404:	f200 8105 	bhi.w	8000612 <__udivmoddi4+0x2d2>
 8000408:	1a84      	subs	r4, r0, r2
 800040a:	eb6e 0203 	sbc.w	r2, lr, r3
 800040e:	2001      	movs	r0, #1
 8000410:	4690      	mov	r8, r2
 8000412:	2d00      	cmp	r5, #0
 8000414:	d0e5      	beq.n	80003e2 <__udivmoddi4+0xa2>
 8000416:	e9c5 4800 	strd	r4, r8, [r5]
 800041a:	e7e2      	b.n	80003e2 <__udivmoddi4+0xa2>
 800041c:	2a00      	cmp	r2, #0
 800041e:	f000 8090 	beq.w	8000542 <__udivmoddi4+0x202>
 8000422:	fab2 f682 	clz	r6, r2
 8000426:	2e00      	cmp	r6, #0
 8000428:	f040 80a4 	bne.w	8000574 <__udivmoddi4+0x234>
 800042c:	1a8a      	subs	r2, r1, r2
 800042e:	0c03      	lsrs	r3, r0, #16
 8000430:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000434:	b280      	uxth	r0, r0
 8000436:	b2bc      	uxth	r4, r7
 8000438:	2101      	movs	r1, #1
 800043a:	fbb2 fcfe 	udiv	ip, r2, lr
 800043e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000442:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000446:	fb04 f20c 	mul.w	r2, r4, ip
 800044a:	429a      	cmp	r2, r3
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x11e>
 800044e:	18fb      	adds	r3, r7, r3
 8000450:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x11c>
 8000456:	429a      	cmp	r2, r3
 8000458:	f200 80e0 	bhi.w	800061c <__udivmoddi4+0x2dc>
 800045c:	46c4      	mov	ip, r8
 800045e:	1a9b      	subs	r3, r3, r2
 8000460:	fbb3 f2fe 	udiv	r2, r3, lr
 8000464:	fb0e 3312 	mls	r3, lr, r2, r3
 8000468:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800046c:	fb02 f404 	mul.w	r4, r2, r4
 8000470:	429c      	cmp	r4, r3
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x144>
 8000474:	18fb      	adds	r3, r7, r3
 8000476:	f102 30ff 	add.w	r0, r2, #4294967295
 800047a:	d202      	bcs.n	8000482 <__udivmoddi4+0x142>
 800047c:	429c      	cmp	r4, r3
 800047e:	f200 80ca 	bhi.w	8000616 <__udivmoddi4+0x2d6>
 8000482:	4602      	mov	r2, r0
 8000484:	1b1b      	subs	r3, r3, r4
 8000486:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800048a:	e7a5      	b.n	80003d8 <__udivmoddi4+0x98>
 800048c:	f1c1 0620 	rsb	r6, r1, #32
 8000490:	408b      	lsls	r3, r1
 8000492:	fa22 f706 	lsr.w	r7, r2, r6
 8000496:	431f      	orrs	r7, r3
 8000498:	fa0e f401 	lsl.w	r4, lr, r1
 800049c:	fa20 f306 	lsr.w	r3, r0, r6
 80004a0:	fa2e fe06 	lsr.w	lr, lr, r6
 80004a4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80004a8:	4323      	orrs	r3, r4
 80004aa:	fa00 f801 	lsl.w	r8, r0, r1
 80004ae:	fa1f fc87 	uxth.w	ip, r7
 80004b2:	fbbe f0f9 	udiv	r0, lr, r9
 80004b6:	0c1c      	lsrs	r4, r3, #16
 80004b8:	fb09 ee10 	mls	lr, r9, r0, lr
 80004bc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80004c0:	fb00 fe0c 	mul.w	lr, r0, ip
 80004c4:	45a6      	cmp	lr, r4
 80004c6:	fa02 f201 	lsl.w	r2, r2, r1
 80004ca:	d909      	bls.n	80004e0 <__udivmoddi4+0x1a0>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f100 3aff 	add.w	sl, r0, #4294967295
 80004d2:	f080 809c 	bcs.w	800060e <__udivmoddi4+0x2ce>
 80004d6:	45a6      	cmp	lr, r4
 80004d8:	f240 8099 	bls.w	800060e <__udivmoddi4+0x2ce>
 80004dc:	3802      	subs	r0, #2
 80004de:	443c      	add	r4, r7
 80004e0:	eba4 040e 	sub.w	r4, r4, lr
 80004e4:	fa1f fe83 	uxth.w	lr, r3
 80004e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004ec:	fb09 4413 	mls	r4, r9, r3, r4
 80004f0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004f4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004f8:	45a4      	cmp	ip, r4
 80004fa:	d908      	bls.n	800050e <__udivmoddi4+0x1ce>
 80004fc:	193c      	adds	r4, r7, r4
 80004fe:	f103 3eff 	add.w	lr, r3, #4294967295
 8000502:	f080 8082 	bcs.w	800060a <__udivmoddi4+0x2ca>
 8000506:	45a4      	cmp	ip, r4
 8000508:	d97f      	bls.n	800060a <__udivmoddi4+0x2ca>
 800050a:	3b02      	subs	r3, #2
 800050c:	443c      	add	r4, r7
 800050e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000512:	eba4 040c 	sub.w	r4, r4, ip
 8000516:	fba0 ec02 	umull	lr, ip, r0, r2
 800051a:	4564      	cmp	r4, ip
 800051c:	4673      	mov	r3, lr
 800051e:	46e1      	mov	r9, ip
 8000520:	d362      	bcc.n	80005e8 <__udivmoddi4+0x2a8>
 8000522:	d05f      	beq.n	80005e4 <__udivmoddi4+0x2a4>
 8000524:	b15d      	cbz	r5, 800053e <__udivmoddi4+0x1fe>
 8000526:	ebb8 0203 	subs.w	r2, r8, r3
 800052a:	eb64 0409 	sbc.w	r4, r4, r9
 800052e:	fa04 f606 	lsl.w	r6, r4, r6
 8000532:	fa22 f301 	lsr.w	r3, r2, r1
 8000536:	431e      	orrs	r6, r3
 8000538:	40cc      	lsrs	r4, r1
 800053a:	e9c5 6400 	strd	r6, r4, [r5]
 800053e:	2100      	movs	r1, #0
 8000540:	e74f      	b.n	80003e2 <__udivmoddi4+0xa2>
 8000542:	fbb1 fcf2 	udiv	ip, r1, r2
 8000546:	0c01      	lsrs	r1, r0, #16
 8000548:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800054c:	b280      	uxth	r0, r0
 800054e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000552:	463b      	mov	r3, r7
 8000554:	4638      	mov	r0, r7
 8000556:	463c      	mov	r4, r7
 8000558:	46b8      	mov	r8, r7
 800055a:	46be      	mov	lr, r7
 800055c:	2620      	movs	r6, #32
 800055e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000562:	eba2 0208 	sub.w	r2, r2, r8
 8000566:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800056a:	e766      	b.n	800043a <__udivmoddi4+0xfa>
 800056c:	4601      	mov	r1, r0
 800056e:	e718      	b.n	80003a2 <__udivmoddi4+0x62>
 8000570:	4610      	mov	r0, r2
 8000572:	e72c      	b.n	80003ce <__udivmoddi4+0x8e>
 8000574:	f1c6 0220 	rsb	r2, r6, #32
 8000578:	fa2e f302 	lsr.w	r3, lr, r2
 800057c:	40b7      	lsls	r7, r6
 800057e:	40b1      	lsls	r1, r6
 8000580:	fa20 f202 	lsr.w	r2, r0, r2
 8000584:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000588:	430a      	orrs	r2, r1
 800058a:	fbb3 f8fe 	udiv	r8, r3, lr
 800058e:	b2bc      	uxth	r4, r7
 8000590:	fb0e 3318 	mls	r3, lr, r8, r3
 8000594:	0c11      	lsrs	r1, r2, #16
 8000596:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800059a:	fb08 f904 	mul.w	r9, r8, r4
 800059e:	40b0      	lsls	r0, r6
 80005a0:	4589      	cmp	r9, r1
 80005a2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80005a6:	b280      	uxth	r0, r0
 80005a8:	d93e      	bls.n	8000628 <__udivmoddi4+0x2e8>
 80005aa:	1879      	adds	r1, r7, r1
 80005ac:	f108 3cff 	add.w	ip, r8, #4294967295
 80005b0:	d201      	bcs.n	80005b6 <__udivmoddi4+0x276>
 80005b2:	4589      	cmp	r9, r1
 80005b4:	d81f      	bhi.n	80005f6 <__udivmoddi4+0x2b6>
 80005b6:	eba1 0109 	sub.w	r1, r1, r9
 80005ba:	fbb1 f9fe 	udiv	r9, r1, lr
 80005be:	fb09 f804 	mul.w	r8, r9, r4
 80005c2:	fb0e 1119 	mls	r1, lr, r9, r1
 80005c6:	b292      	uxth	r2, r2
 80005c8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005cc:	4542      	cmp	r2, r8
 80005ce:	d229      	bcs.n	8000624 <__udivmoddi4+0x2e4>
 80005d0:	18ba      	adds	r2, r7, r2
 80005d2:	f109 31ff 	add.w	r1, r9, #4294967295
 80005d6:	d2c4      	bcs.n	8000562 <__udivmoddi4+0x222>
 80005d8:	4542      	cmp	r2, r8
 80005da:	d2c2      	bcs.n	8000562 <__udivmoddi4+0x222>
 80005dc:	f1a9 0102 	sub.w	r1, r9, #2
 80005e0:	443a      	add	r2, r7
 80005e2:	e7be      	b.n	8000562 <__udivmoddi4+0x222>
 80005e4:	45f0      	cmp	r8, lr
 80005e6:	d29d      	bcs.n	8000524 <__udivmoddi4+0x1e4>
 80005e8:	ebbe 0302 	subs.w	r3, lr, r2
 80005ec:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005f0:	3801      	subs	r0, #1
 80005f2:	46e1      	mov	r9, ip
 80005f4:	e796      	b.n	8000524 <__udivmoddi4+0x1e4>
 80005f6:	eba7 0909 	sub.w	r9, r7, r9
 80005fa:	4449      	add	r1, r9
 80005fc:	f1a8 0c02 	sub.w	ip, r8, #2
 8000600:	fbb1 f9fe 	udiv	r9, r1, lr
 8000604:	fb09 f804 	mul.w	r8, r9, r4
 8000608:	e7db      	b.n	80005c2 <__udivmoddi4+0x282>
 800060a:	4673      	mov	r3, lr
 800060c:	e77f      	b.n	800050e <__udivmoddi4+0x1ce>
 800060e:	4650      	mov	r0, sl
 8000610:	e766      	b.n	80004e0 <__udivmoddi4+0x1a0>
 8000612:	4608      	mov	r0, r1
 8000614:	e6fd      	b.n	8000412 <__udivmoddi4+0xd2>
 8000616:	443b      	add	r3, r7
 8000618:	3a02      	subs	r2, #2
 800061a:	e733      	b.n	8000484 <__udivmoddi4+0x144>
 800061c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000620:	443b      	add	r3, r7
 8000622:	e71c      	b.n	800045e <__udivmoddi4+0x11e>
 8000624:	4649      	mov	r1, r9
 8000626:	e79c      	b.n	8000562 <__udivmoddi4+0x222>
 8000628:	eba1 0109 	sub.w	r1, r1, r9
 800062c:	46c4      	mov	ip, r8
 800062e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000632:	fb09 f804 	mul.w	r8, r9, r4
 8000636:	e7c4      	b.n	80005c2 <__udivmoddi4+0x282>

08000638 <__aeabi_idiv0>:
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop

0800063c <has_header_tail>:
	return 0;
}

// Validação genérica de header/tail
static inline int has_header_tail(const uint8_t *raw, uint32_t len,
		uint8_t header, uint8_t tail) {
 800063c:	b480      	push	{r7}
 800063e:	b085      	sub	sp, #20
 8000640:	af00      	add	r7, sp, #0
 8000642:	60f8      	str	r0, [r7, #12]
 8000644:	60b9      	str	r1, [r7, #8]
 8000646:	4611      	mov	r1, r2
 8000648:	461a      	mov	r2, r3
 800064a:	460b      	mov	r3, r1
 800064c:	71fb      	strb	r3, [r7, #7]
 800064e:	4613      	mov	r3, r2
 8000650:	71bb      	strb	r3, [r7, #6]
	return raw && len >= 2 && raw[0] == header && raw[len - 1] == tail;
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d011      	beq.n	800067c <has_header_tail+0x40>
 8000658:	68bb      	ldr	r3, [r7, #8]
 800065a:	2b01      	cmp	r3, #1
 800065c:	d90e      	bls.n	800067c <has_header_tail+0x40>
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	79fa      	ldrb	r2, [r7, #7]
 8000664:	429a      	cmp	r2, r3
 8000666:	d109      	bne.n	800067c <has_header_tail+0x40>
 8000668:	68bb      	ldr	r3, [r7, #8]
 800066a:	3b01      	subs	r3, #1
 800066c:	68fa      	ldr	r2, [r7, #12]
 800066e:	4413      	add	r3, r2
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	79ba      	ldrb	r2, [r7, #6]
 8000674:	429a      	cmp	r2, r3
 8000676:	d101      	bne.n	800067c <has_header_tail+0x40>
 8000678:	2301      	movs	r3, #1
 800067a:	e000      	b.n	800067e <has_header_tail+0x42>
 800067c:	2300      	movs	r3, #0
}
 800067e:	4618      	mov	r0, r3
 8000680:	3714      	adds	r7, #20
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr

0800068a <frame_expect_req>:
// =====================
// Validadores de frame
// =====================
// Garante comprimento mínimo, header/tail corretos e tipo esperado
static inline int frame_expect_req(const uint8_t *raw, uint32_t len,
		req_msg_type_t type, uint32_t min_len) {
 800068a:	b580      	push	{r7, lr}
 800068c:	b084      	sub	sp, #16
 800068e:	af00      	add	r7, sp, #0
 8000690:	60f8      	str	r0, [r7, #12]
 8000692:	60b9      	str	r1, [r7, #8]
 8000694:	603b      	str	r3, [r7, #0]
 8000696:	4613      	mov	r3, r2
 8000698:	71fb      	strb	r3, [r7, #7]
	if (!raw || len < min_len)
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	2b00      	cmp	r3, #0
 800069e:	d003      	beq.n	80006a8 <frame_expect_req+0x1e>
 80006a0:	68ba      	ldr	r2, [r7, #8]
 80006a2:	683b      	ldr	r3, [r7, #0]
 80006a4:	429a      	cmp	r2, r3
 80006a6:	d202      	bcs.n	80006ae <frame_expect_req+0x24>
		return PROTO_ERR_ARG;
 80006a8:	f04f 33ff 	mov.w	r3, #4294967295
 80006ac:	e012      	b.n	80006d4 <frame_expect_req+0x4a>
	if (!has_header_tail(raw, len, REQ_HEADER, REQ_TAIL)
 80006ae:	2355      	movs	r3, #85	@ 0x55
 80006b0:	22aa      	movs	r2, #170	@ 0xaa
 80006b2:	68b9      	ldr	r1, [r7, #8]
 80006b4:	68f8      	ldr	r0, [r7, #12]
 80006b6:	f7ff ffc1 	bl	800063c <has_header_tail>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d005      	beq.n	80006cc <frame_expect_req+0x42>
			|| raw[1] != (uint8_t) type)
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	3301      	adds	r3, #1
 80006c4:	781b      	ldrb	r3, [r3, #0]
 80006c6:	79fa      	ldrb	r2, [r7, #7]
 80006c8:	429a      	cmp	r2, r3
 80006ca:	d002      	beq.n	80006d2 <frame_expect_req+0x48>
		return PROTO_ERR_FRAME;
 80006cc:	f06f 0301 	mvn.w	r3, #1
 80006d0:	e000      	b.n	80006d4 <frame_expect_req+0x4a>
	return PROTO_OK;
 80006d2:	2300      	movs	r3, #0
}
 80006d4:	4618      	mov	r0, r3
 80006d6:	3710      	adds	r7, #16
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}

080006dc <encoder_status_req_decoder>:
#include "Protocol/Requests/encoder_status_request.h"

int encoder_status_req_decoder(const uint8_t *raw, uint32_t len, encoder_status_req_t *out) {
 80006dc:	b580      	push	{r7, lr}
 80006de:	b086      	sub	sp, #24
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	60f8      	str	r0, [r7, #12]
 80006e4:	60b9      	str	r1, [r7, #8]
 80006e6:	607a      	str	r2, [r7, #4]
    if (!raw || !out) return PROTO_ERR_ARG;
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d002      	beq.n	80006f4 <encoder_status_req_decoder+0x18>
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d102      	bne.n	80006fa <encoder_status_req_decoder+0x1e>
 80006f4:	f04f 33ff 	mov.w	r3, #4294967295
 80006f8:	e011      	b.n	800071e <encoder_status_req_decoder+0x42>
    int st = frame_expect_req(raw, len, REQ_ENCODER_STATUS, 4);
 80006fa:	2304      	movs	r3, #4
 80006fc:	2225      	movs	r2, #37	@ 0x25
 80006fe:	68b9      	ldr	r1, [r7, #8]
 8000700:	68f8      	ldr	r0, [r7, #12]
 8000702:	f7ff ffc2 	bl	800068a <frame_expect_req>
 8000706:	6178      	str	r0, [r7, #20]
    if (st != PROTO_OK) return st;
 8000708:	697b      	ldr	r3, [r7, #20]
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <encoder_status_req_decoder+0x36>
 800070e:	697b      	ldr	r3, [r7, #20]
 8000710:	e005      	b.n	800071e <encoder_status_req_decoder+0x42>
    out->frameId = raw[2];
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	3302      	adds	r3, #2
 8000716:	781a      	ldrb	r2, [r3, #0]
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	701a      	strb	r2, [r3, #0]
    return PROTO_OK;
 800071c:	2300      	movs	r3, #0
}
 800071e:	4618      	mov	r0, r3
 8000720:	3718      	adds	r7, #24
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}

08000726 <has_header_tail>:
		uint8_t header, uint8_t tail) {
 8000726:	b480      	push	{r7}
 8000728:	b085      	sub	sp, #20
 800072a:	af00      	add	r7, sp, #0
 800072c:	60f8      	str	r0, [r7, #12]
 800072e:	60b9      	str	r1, [r7, #8]
 8000730:	4611      	mov	r1, r2
 8000732:	461a      	mov	r2, r3
 8000734:	460b      	mov	r3, r1
 8000736:	71fb      	strb	r3, [r7, #7]
 8000738:	4613      	mov	r3, r2
 800073a:	71bb      	strb	r3, [r7, #6]
	return raw && len >= 2 && raw[0] == header && raw[len - 1] == tail;
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	2b00      	cmp	r3, #0
 8000740:	d011      	beq.n	8000766 <has_header_tail+0x40>
 8000742:	68bb      	ldr	r3, [r7, #8]
 8000744:	2b01      	cmp	r3, #1
 8000746:	d90e      	bls.n	8000766 <has_header_tail+0x40>
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	79fa      	ldrb	r2, [r7, #7]
 800074e:	429a      	cmp	r2, r3
 8000750:	d109      	bne.n	8000766 <has_header_tail+0x40>
 8000752:	68bb      	ldr	r3, [r7, #8]
 8000754:	3b01      	subs	r3, #1
 8000756:	68fa      	ldr	r2, [r7, #12]
 8000758:	4413      	add	r3, r2
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	79ba      	ldrb	r2, [r7, #6]
 800075e:	429a      	cmp	r2, r3
 8000760:	d101      	bne.n	8000766 <has_header_tail+0x40>
 8000762:	2301      	movs	r3, #1
 8000764:	e000      	b.n	8000768 <has_header_tail+0x42>
 8000766:	2300      	movs	r3, #0
}
 8000768:	4618      	mov	r0, r3
 800076a:	3714      	adds	r7, #20
 800076c:	46bd      	mov	sp, r7
 800076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000772:	4770      	bx	lr

08000774 <be16_read>:
static inline uint16_t be16_read(const uint8_t *p) {
 8000774:	b480      	push	{r7}
 8000776:	b083      	sub	sp, #12
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
	return (uint16_t) ((((uint16_t) p[0]) << 8) | p[1]);
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	b21b      	sxth	r3, r3
 8000782:	021b      	lsls	r3, r3, #8
 8000784:	b21a      	sxth	r2, r3
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	3301      	adds	r3, #1
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	b21b      	sxth	r3, r3
 800078e:	4313      	orrs	r3, r2
 8000790:	b21b      	sxth	r3, r3
 8000792:	b29b      	uxth	r3, r3
}
 8000794:	4618      	mov	r0, r3
 8000796:	370c      	adds	r7, #12
 8000798:	46bd      	mov	sp, r7
 800079a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079e:	4770      	bx	lr

080007a0 <frame_expect_req>:
		req_msg_type_t type, uint32_t min_len) {
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b084      	sub	sp, #16
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	60f8      	str	r0, [r7, #12]
 80007a8:	60b9      	str	r1, [r7, #8]
 80007aa:	603b      	str	r3, [r7, #0]
 80007ac:	4613      	mov	r3, r2
 80007ae:	71fb      	strb	r3, [r7, #7]
	if (!raw || len < min_len)
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d003      	beq.n	80007be <frame_expect_req+0x1e>
 80007b6:	68ba      	ldr	r2, [r7, #8]
 80007b8:	683b      	ldr	r3, [r7, #0]
 80007ba:	429a      	cmp	r2, r3
 80007bc:	d202      	bcs.n	80007c4 <frame_expect_req+0x24>
		return PROTO_ERR_ARG;
 80007be:	f04f 33ff 	mov.w	r3, #4294967295
 80007c2:	e012      	b.n	80007ea <frame_expect_req+0x4a>
	if (!has_header_tail(raw, len, REQ_HEADER, REQ_TAIL)
 80007c4:	2355      	movs	r3, #85	@ 0x55
 80007c6:	22aa      	movs	r2, #170	@ 0xaa
 80007c8:	68b9      	ldr	r1, [r7, #8]
 80007ca:	68f8      	ldr	r0, [r7, #12]
 80007cc:	f7ff ffab 	bl	8000726 <has_header_tail>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d005      	beq.n	80007e2 <frame_expect_req+0x42>
			|| raw[1] != (uint8_t) type)
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	3301      	adds	r3, #1
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	79fa      	ldrb	r2, [r7, #7]
 80007de:	429a      	cmp	r2, r3
 80007e0:	d002      	beq.n	80007e8 <frame_expect_req+0x48>
		return PROTO_ERR_FRAME;
 80007e2:	f06f 0301 	mvn.w	r3, #1
 80007e6:	e000      	b.n	80007ea <frame_expect_req+0x4a>
	return PROTO_OK;
 80007e8:	2300      	movs	r3, #0
}
 80007ea:	4618      	mov	r0, r3
 80007ec:	3710      	adds	r7, #16
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}

080007f2 <led_ctrl_req_decoder>:
// [7]=paridade (XOR dos bytes 1..6), [8]=0x55

#define LED_CTRL_PARITY_LAST_INDEX 6u
#define LED_CTRL_PARITY_INDEX 7u

int led_ctrl_req_decoder(const uint8_t *raw, uint32_t len, led_ctrl_req_t *out) {
 80007f2:	b580      	push	{r7, lr}
 80007f4:	b086      	sub	sp, #24
 80007f6:	af00      	add	r7, sp, #0
 80007f8:	60f8      	str	r0, [r7, #12]
 80007fa:	60b9      	str	r1, [r7, #8]
 80007fc:	607a      	str	r2, [r7, #4]
    if (!raw || !out)
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d002      	beq.n	800080a <led_ctrl_req_decoder+0x18>
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	2b00      	cmp	r3, #0
 8000808:	d102      	bne.n	8000810 <led_ctrl_req_decoder+0x1e>
        return PROTO_ERR_ARG;
 800080a:	f04f 33ff 	mov.w	r3, #4294967295
 800080e:	e02a      	b.n	8000866 <led_ctrl_req_decoder+0x74>
    if (len > LED_CTRL_REQ_PADDED_TOTAL_LEN)
 8000810:	68bb      	ldr	r3, [r7, #8]
 8000812:	2b2a      	cmp	r3, #42	@ 0x2a
 8000814:	d902      	bls.n	800081c <led_ctrl_req_decoder+0x2a>
        return PROTO_ERR_RANGE;
 8000816:	f06f 0303 	mvn.w	r3, #3
 800081a:	e024      	b.n	8000866 <led_ctrl_req_decoder+0x74>
    int st = frame_expect_req(raw, len, REQ_LED_CTRL, LED_CTRL_REQ_TOTAL_LEN);
 800081c:	2309      	movs	r3, #9
 800081e:	2207      	movs	r2, #7
 8000820:	68b9      	ldr	r1, [r7, #8]
 8000822:	68f8      	ldr	r0, [r7, #12]
 8000824:	f7ff ffbc 	bl	80007a0 <frame_expect_req>
 8000828:	6178      	str	r0, [r7, #20]
    if (st != PROTO_OK)
 800082a:	697b      	ldr	r3, [r7, #20]
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <led_ctrl_req_decoder+0x42>
        return st;
 8000830:	697b      	ldr	r3, [r7, #20]
 8000832:	e018      	b.n	8000866 <led_ctrl_req_decoder+0x74>
    out->frameId = raw[2];
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	3302      	adds	r3, #2
 8000838:	781a      	ldrb	r2, [r3, #0]
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	701a      	strb	r2, [r3, #0]
    out->ledMask = raw[3];
 800083e:	68fb      	ldr	r3, [r7, #12]
 8000840:	3303      	adds	r3, #3
 8000842:	781a      	ldrb	r2, [r3, #0]
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	705a      	strb	r2, [r3, #1]
    out->channel[0].mode = raw[4];
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	3304      	adds	r3, #4
 800084c:	781a      	ldrb	r2, [r3, #0]
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	709a      	strb	r2, [r3, #2]
    out->channel[0].frequency = be16_read(raw + 5);
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	3305      	adds	r3, #5
 8000856:	4618      	mov	r0, r3
 8000858:	f7ff ff8c 	bl	8000774 <be16_read>
 800085c:	4603      	mov	r3, r0
 800085e:	461a      	mov	r2, r3
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	809a      	strh	r2, [r3, #4]
    return PROTO_OK;
 8000864:	2300      	movs	r3, #0
}
 8000866:	4618      	mov	r0, r3
 8000868:	3718      	adds	r7, #24
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}

0800086e <has_header_tail>:
		uint8_t header, uint8_t tail) {
 800086e:	b480      	push	{r7}
 8000870:	b085      	sub	sp, #20
 8000872:	af00      	add	r7, sp, #0
 8000874:	60f8      	str	r0, [r7, #12]
 8000876:	60b9      	str	r1, [r7, #8]
 8000878:	4611      	mov	r1, r2
 800087a:	461a      	mov	r2, r3
 800087c:	460b      	mov	r3, r1
 800087e:	71fb      	strb	r3, [r7, #7]
 8000880:	4613      	mov	r3, r2
 8000882:	71bb      	strb	r3, [r7, #6]
	return raw && len >= 2 && raw[0] == header && raw[len - 1] == tail;
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	2b00      	cmp	r3, #0
 8000888:	d011      	beq.n	80008ae <has_header_tail+0x40>
 800088a:	68bb      	ldr	r3, [r7, #8]
 800088c:	2b01      	cmp	r3, #1
 800088e:	d90e      	bls.n	80008ae <has_header_tail+0x40>
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	79fa      	ldrb	r2, [r7, #7]
 8000896:	429a      	cmp	r2, r3
 8000898:	d109      	bne.n	80008ae <has_header_tail+0x40>
 800089a:	68bb      	ldr	r3, [r7, #8]
 800089c:	3b01      	subs	r3, #1
 800089e:	68fa      	ldr	r2, [r7, #12]
 80008a0:	4413      	add	r3, r2
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	79ba      	ldrb	r2, [r7, #6]
 80008a6:	429a      	cmp	r2, r3
 80008a8:	d101      	bne.n	80008ae <has_header_tail+0x40>
 80008aa:	2301      	movs	r3, #1
 80008ac:	e000      	b.n	80008b0 <has_header_tail+0x42>
 80008ae:	2300      	movs	r3, #0
}
 80008b0:	4618      	mov	r0, r3
 80008b2:	3714      	adds	r7, #20
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr

080008bc <frame_expect_req>:
		req_msg_type_t type, uint32_t min_len) {
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	60f8      	str	r0, [r7, #12]
 80008c4:	60b9      	str	r1, [r7, #8]
 80008c6:	603b      	str	r3, [r7, #0]
 80008c8:	4613      	mov	r3, r2
 80008ca:	71fb      	strb	r3, [r7, #7]
	if (!raw || len < min_len)
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d003      	beq.n	80008da <frame_expect_req+0x1e>
 80008d2:	68ba      	ldr	r2, [r7, #8]
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	429a      	cmp	r2, r3
 80008d8:	d202      	bcs.n	80008e0 <frame_expect_req+0x24>
		return PROTO_ERR_ARG;
 80008da:	f04f 33ff 	mov.w	r3, #4294967295
 80008de:	e012      	b.n	8000906 <frame_expect_req+0x4a>
	if (!has_header_tail(raw, len, REQ_HEADER, REQ_TAIL)
 80008e0:	2355      	movs	r3, #85	@ 0x55
 80008e2:	22aa      	movs	r2, #170	@ 0xaa
 80008e4:	68b9      	ldr	r1, [r7, #8]
 80008e6:	68f8      	ldr	r0, [r7, #12]
 80008e8:	f7ff ffc1 	bl	800086e <has_header_tail>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d005      	beq.n	80008fe <frame_expect_req+0x42>
			|| raw[1] != (uint8_t) type)
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	3301      	adds	r3, #1
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	79fa      	ldrb	r2, [r7, #7]
 80008fa:	429a      	cmp	r2, r3
 80008fc:	d002      	beq.n	8000904 <frame_expect_req+0x48>
		return PROTO_ERR_FRAME;
 80008fe:	f06f 0301 	mvn.w	r3, #1
 8000902:	e000      	b.n	8000906 <frame_expect_req+0x4a>
	return PROTO_OK;
 8000904:	2300      	movs	r3, #0
}
 8000906:	4618      	mov	r0, r3
 8000908:	3710      	adds	r7, #16
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}

0800090e <move_end_req_decoder>:
#include "Protocol/Requests/move_end_request.h"

int move_end_req_decoder(const uint8_t *raw, uint32_t len, move_end_req_t *out) {
 800090e:	b580      	push	{r7, lr}
 8000910:	b086      	sub	sp, #24
 8000912:	af00      	add	r7, sp, #0
 8000914:	60f8      	str	r0, [r7, #12]
 8000916:	60b9      	str	r1, [r7, #8]
 8000918:	607a      	str	r2, [r7, #4]
	if (!raw || !out)
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	2b00      	cmp	r3, #0
 800091e:	d002      	beq.n	8000926 <move_end_req_decoder+0x18>
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	2b00      	cmp	r3, #0
 8000924:	d102      	bne.n	800092c <move_end_req_decoder+0x1e>
		return PROTO_ERR_ARG;
 8000926:	f04f 33ff 	mov.w	r3, #4294967295
 800092a:	e011      	b.n	8000950 <move_end_req_decoder+0x42>
	int st = frame_expect_req(raw, len, REQ_MOVE_END, 4);
 800092c:	2304      	movs	r3, #4
 800092e:	2206      	movs	r2, #6
 8000930:	68b9      	ldr	r1, [r7, #8]
 8000932:	68f8      	ldr	r0, [r7, #12]
 8000934:	f7ff ffc2 	bl	80008bc <frame_expect_req>
 8000938:	6178      	str	r0, [r7, #20]
	if (st != PROTO_OK)
 800093a:	697b      	ldr	r3, [r7, #20]
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <move_end_req_decoder+0x36>
		return st;
 8000940:	697b      	ldr	r3, [r7, #20]
 8000942:	e005      	b.n	8000950 <move_end_req_decoder+0x42>
	out->frameId = raw[2];
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	3302      	adds	r3, #2
 8000948:	781a      	ldrb	r2, [r3, #0]
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	701a      	strb	r2, [r3, #0]
	return PROTO_OK;
 800094e:	2300      	movs	r3, #0
}
 8000950:	4618      	mov	r0, r3
 8000952:	3718      	adds	r7, #24
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}

08000958 <has_header_tail>:
		uint8_t header, uint8_t tail) {
 8000958:	b480      	push	{r7}
 800095a:	b085      	sub	sp, #20
 800095c:	af00      	add	r7, sp, #0
 800095e:	60f8      	str	r0, [r7, #12]
 8000960:	60b9      	str	r1, [r7, #8]
 8000962:	4611      	mov	r1, r2
 8000964:	461a      	mov	r2, r3
 8000966:	460b      	mov	r3, r1
 8000968:	71fb      	strb	r3, [r7, #7]
 800096a:	4613      	mov	r3, r2
 800096c:	71bb      	strb	r3, [r7, #6]
	return raw && len >= 2 && raw[0] == header && raw[len - 1] == tail;
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	2b00      	cmp	r3, #0
 8000972:	d011      	beq.n	8000998 <has_header_tail+0x40>
 8000974:	68bb      	ldr	r3, [r7, #8]
 8000976:	2b01      	cmp	r3, #1
 8000978:	d90e      	bls.n	8000998 <has_header_tail+0x40>
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	79fa      	ldrb	r2, [r7, #7]
 8000980:	429a      	cmp	r2, r3
 8000982:	d109      	bne.n	8000998 <has_header_tail+0x40>
 8000984:	68bb      	ldr	r3, [r7, #8]
 8000986:	3b01      	subs	r3, #1
 8000988:	68fa      	ldr	r2, [r7, #12]
 800098a:	4413      	add	r3, r2
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	79ba      	ldrb	r2, [r7, #6]
 8000990:	429a      	cmp	r2, r3
 8000992:	d101      	bne.n	8000998 <has_header_tail+0x40>
 8000994:	2301      	movs	r3, #1
 8000996:	e000      	b.n	800099a <has_header_tail+0x42>
 8000998:	2300      	movs	r3, #0
}
 800099a:	4618      	mov	r0, r3
 800099c:	3714      	adds	r7, #20
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr

080009a6 <be16_read>:
static inline uint16_t be16_read(const uint8_t *p) {
 80009a6:	b480      	push	{r7}
 80009a8:	b083      	sub	sp, #12
 80009aa:	af00      	add	r7, sp, #0
 80009ac:	6078      	str	r0, [r7, #4]
	return (uint16_t) ((((uint16_t) p[0]) << 8) | p[1]);
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	b21b      	sxth	r3, r3
 80009b4:	021b      	lsls	r3, r3, #8
 80009b6:	b21a      	sxth	r2, r3
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	3301      	adds	r3, #1
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	b21b      	sxth	r3, r3
 80009c0:	4313      	orrs	r3, r2
 80009c2:	b21b      	sxth	r3, r3
 80009c4:	b29b      	uxth	r3, r3
}
 80009c6:	4618      	mov	r0, r3
 80009c8:	370c      	adds	r7, #12
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr

080009d2 <be32_read>:
static inline uint32_t be32_read(const uint8_t *p) {
 80009d2:	b480      	push	{r7}
 80009d4:	b083      	sub	sp, #12
 80009d6:	af00      	add	r7, sp, #0
 80009d8:	6078      	str	r0, [r7, #4]
	return (((uint32_t) p[0] << 24) | ((uint32_t) p[1] << 16)
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	061a      	lsls	r2, r3, #24
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	3301      	adds	r3, #1
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	041b      	lsls	r3, r3, #16
 80009e8:	431a      	orrs	r2, r3
			| ((uint32_t) p[2] << 8) | (uint32_t) p[3]);
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	3302      	adds	r3, #2
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	021b      	lsls	r3, r3, #8
 80009f2:	4313      	orrs	r3, r2
 80009f4:	687a      	ldr	r2, [r7, #4]
 80009f6:	3203      	adds	r2, #3
 80009f8:	7812      	ldrb	r2, [r2, #0]
 80009fa:	4313      	orrs	r3, r2
}
 80009fc:	4618      	mov	r0, r3
 80009fe:	370c      	adds	r7, #12
 8000a00:	46bd      	mov	sp, r7
 8000a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a06:	4770      	bx	lr

08000a08 <frame_expect_req>:
		req_msg_type_t type, uint32_t min_len) {
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b084      	sub	sp, #16
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	60f8      	str	r0, [r7, #12]
 8000a10:	60b9      	str	r1, [r7, #8]
 8000a12:	603b      	str	r3, [r7, #0]
 8000a14:	4613      	mov	r3, r2
 8000a16:	71fb      	strb	r3, [r7, #7]
	if (!raw || len < min_len)
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d003      	beq.n	8000a26 <frame_expect_req+0x1e>
 8000a1e:	68ba      	ldr	r2, [r7, #8]
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	429a      	cmp	r2, r3
 8000a24:	d202      	bcs.n	8000a2c <frame_expect_req+0x24>
		return PROTO_ERR_ARG;
 8000a26:	f04f 33ff 	mov.w	r3, #4294967295
 8000a2a:	e012      	b.n	8000a52 <frame_expect_req+0x4a>
	if (!has_header_tail(raw, len, REQ_HEADER, REQ_TAIL)
 8000a2c:	2355      	movs	r3, #85	@ 0x55
 8000a2e:	22aa      	movs	r2, #170	@ 0xaa
 8000a30:	68b9      	ldr	r1, [r7, #8]
 8000a32:	68f8      	ldr	r0, [r7, #12]
 8000a34:	f7ff ff90 	bl	8000958 <has_header_tail>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d005      	beq.n	8000a4a <frame_expect_req+0x42>
			|| raw[1] != (uint8_t) type)
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	3301      	adds	r3, #1
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	79fa      	ldrb	r2, [r7, #7]
 8000a46:	429a      	cmp	r2, r3
 8000a48:	d002      	beq.n	8000a50 <frame_expect_req+0x48>
		return PROTO_ERR_FRAME;
 8000a4a:	f06f 0301 	mvn.w	r3, #1
 8000a4e:	e000      	b.n	8000a52 <frame_expect_req+0x4a>
	return PROTO_OK;
 8000a50:	2300      	movs	r3, #0
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	3710      	adds	r7, #16
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}

08000a5a <move_queue_add_req_decoder>:
#include "Protocol/Requests/move_queue_add_request.h"

int move_queue_add_req_decoder(const uint8_t *raw, uint32_t len,
		move_queue_add_req_t *out) {
 8000a5a:	b580      	push	{r7, lr}
 8000a5c:	b086      	sub	sp, #24
 8000a5e:	af00      	add	r7, sp, #0
 8000a60:	60f8      	str	r0, [r7, #12]
 8000a62:	60b9      	str	r1, [r7, #8]
 8000a64:	607a      	str	r2, [r7, #4]
	if (!raw || !out)
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d002      	beq.n	8000a72 <move_queue_add_req_decoder+0x18>
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d102      	bne.n	8000a78 <move_queue_add_req_decoder+0x1e>
		return PROTO_ERR_ARG;
 8000a72:	f04f 33ff 	mov.w	r3, #4294967295
 8000a76:	e09a      	b.n	8000bae <move_queue_add_req_decoder+0x154>
	int st = frame_expect_req(raw, len, REQ_MOVE_QUEUE_ADD, 42);
 8000a78:	232a      	movs	r3, #42	@ 0x2a
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	68b9      	ldr	r1, [r7, #8]
 8000a7e:	68f8      	ldr	r0, [r7, #12]
 8000a80:	f7ff ffc2 	bl	8000a08 <frame_expect_req>
 8000a84:	6178      	str	r0, [r7, #20]
	if (st != PROTO_OK)
 8000a86:	697b      	ldr	r3, [r7, #20]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <move_queue_add_req_decoder+0x36>
		return st;
 8000a8c:	697b      	ldr	r3, [r7, #20]
 8000a8e:	e08e      	b.n	8000bae <move_queue_add_req_decoder+0x154>
	out->frameId = raw[2];
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	3302      	adds	r3, #2
 8000a94:	781a      	ldrb	r2, [r3, #0]
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	701a      	strb	r2, [r3, #0]
	out->dirMask = raw[3];
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	3303      	adds	r3, #3
 8000a9e:	781a      	ldrb	r2, [r3, #0]
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	705a      	strb	r2, [r3, #1]
	out->vx = be16_read(&raw[4]);
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	3304      	adds	r3, #4
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f7ff ff7c 	bl	80009a6 <be16_read>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	461a      	mov	r2, r3
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	805a      	strh	r2, [r3, #2]
	out->sx = be32_read(&raw[6]);
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	3306      	adds	r3, #6
 8000aba:	4618      	mov	r0, r3
 8000abc:	f7ff ff89 	bl	80009d2 <be32_read>
 8000ac0:	4602      	mov	r2, r0
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	605a      	str	r2, [r3, #4]
	out->vy = be16_read(&raw[10]);
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	330a      	adds	r3, #10
 8000aca:	4618      	mov	r0, r3
 8000acc:	f7ff ff6b 	bl	80009a6 <be16_read>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	461a      	mov	r2, r3
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	811a      	strh	r2, [r3, #8]
	out->sy = be32_read(&raw[12]);
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	330c      	adds	r3, #12
 8000adc:	4618      	mov	r0, r3
 8000ade:	f7ff ff78 	bl	80009d2 <be32_read>
 8000ae2:	4602      	mov	r2, r0
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	60da      	str	r2, [r3, #12]
	out->vz = be16_read(&raw[16]);
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	3310      	adds	r3, #16
 8000aec:	4618      	mov	r0, r3
 8000aee:	f7ff ff5a 	bl	80009a6 <be16_read>
 8000af2:	4603      	mov	r3, r0
 8000af4:	461a      	mov	r2, r3
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	821a      	strh	r2, [r3, #16]
	out->sz = be32_read(&raw[18]);
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	3312      	adds	r3, #18
 8000afe:	4618      	mov	r0, r3
 8000b00:	f7ff ff67 	bl	80009d2 <be32_read>
 8000b04:	4602      	mov	r2, r0
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	615a      	str	r2, [r3, #20]
	out->kp_x = be16_read(&raw[22]);
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	3316      	adds	r3, #22
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f7ff ff49 	bl	80009a6 <be16_read>
 8000b14:	4603      	mov	r3, r0
 8000b16:	461a      	mov	r2, r3
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	831a      	strh	r2, [r3, #24]
	out->ki_x = be16_read(&raw[24]);
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	3318      	adds	r3, #24
 8000b20:	4618      	mov	r0, r3
 8000b22:	f7ff ff40 	bl	80009a6 <be16_read>
 8000b26:	4603      	mov	r3, r0
 8000b28:	461a      	mov	r2, r3
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	835a      	strh	r2, [r3, #26]
	out->kd_x = be16_read(&raw[26]);
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	331a      	adds	r3, #26
 8000b32:	4618      	mov	r0, r3
 8000b34:	f7ff ff37 	bl	80009a6 <be16_read>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	461a      	mov	r2, r3
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	839a      	strh	r2, [r3, #28]
	out->kp_y = be16_read(&raw[28]);
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	331c      	adds	r3, #28
 8000b44:	4618      	mov	r0, r3
 8000b46:	f7ff ff2e 	bl	80009a6 <be16_read>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	461a      	mov	r2, r3
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	83da      	strh	r2, [r3, #30]
	out->ki_y = be16_read(&raw[30]);
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	331e      	adds	r3, #30
 8000b56:	4618      	mov	r0, r3
 8000b58:	f7ff ff25 	bl	80009a6 <be16_read>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	461a      	mov	r2, r3
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	841a      	strh	r2, [r3, #32]
	out->kd_y = be16_read(&raw[32]);
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	3320      	adds	r3, #32
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f7ff ff1c 	bl	80009a6 <be16_read>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	461a      	mov	r2, r3
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	845a      	strh	r2, [r3, #34]	@ 0x22
	out->kp_z = be16_read(&raw[34]);
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	3322      	adds	r3, #34	@ 0x22
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f7ff ff13 	bl	80009a6 <be16_read>
 8000b80:	4603      	mov	r3, r0
 8000b82:	461a      	mov	r2, r3
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	849a      	strh	r2, [r3, #36]	@ 0x24
	out->ki_z = be16_read(&raw[36]);
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	3324      	adds	r3, #36	@ 0x24
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f7ff ff0a 	bl	80009a6 <be16_read>
 8000b92:	4603      	mov	r3, r0
 8000b94:	461a      	mov	r2, r3
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	84da      	strh	r2, [r3, #38]	@ 0x26
	out->kd_z = be16_read(&raw[38]);
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	3326      	adds	r3, #38	@ 0x26
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f7ff ff01 	bl	80009a6 <be16_read>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	461a      	mov	r2, r3
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	851a      	strh	r2, [r3, #40]	@ 0x28
	return PROTO_OK;
 8000bac:	2300      	movs	r3, #0
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3718      	adds	r7, #24
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}

08000bb6 <has_header_tail>:
		uint8_t header, uint8_t tail) {
 8000bb6:	b480      	push	{r7}
 8000bb8:	b085      	sub	sp, #20
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	60f8      	str	r0, [r7, #12]
 8000bbe:	60b9      	str	r1, [r7, #8]
 8000bc0:	4611      	mov	r1, r2
 8000bc2:	461a      	mov	r2, r3
 8000bc4:	460b      	mov	r3, r1
 8000bc6:	71fb      	strb	r3, [r7, #7]
 8000bc8:	4613      	mov	r3, r2
 8000bca:	71bb      	strb	r3, [r7, #6]
	return raw && len >= 2 && raw[0] == header && raw[len - 1] == tail;
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d011      	beq.n	8000bf6 <has_header_tail+0x40>
 8000bd2:	68bb      	ldr	r3, [r7, #8]
 8000bd4:	2b01      	cmp	r3, #1
 8000bd6:	d90e      	bls.n	8000bf6 <has_header_tail+0x40>
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	79fa      	ldrb	r2, [r7, #7]
 8000bde:	429a      	cmp	r2, r3
 8000be0:	d109      	bne.n	8000bf6 <has_header_tail+0x40>
 8000be2:	68bb      	ldr	r3, [r7, #8]
 8000be4:	3b01      	subs	r3, #1
 8000be6:	68fa      	ldr	r2, [r7, #12]
 8000be8:	4413      	add	r3, r2
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	79ba      	ldrb	r2, [r7, #6]
 8000bee:	429a      	cmp	r2, r3
 8000bf0:	d101      	bne.n	8000bf6 <has_header_tail+0x40>
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	e000      	b.n	8000bf8 <has_header_tail+0x42>
 8000bf6:	2300      	movs	r3, #0
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	3714      	adds	r7, #20
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr

08000c04 <frame_expect_req>:
		req_msg_type_t type, uint32_t min_len) {
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b084      	sub	sp, #16
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	60f8      	str	r0, [r7, #12]
 8000c0c:	60b9      	str	r1, [r7, #8]
 8000c0e:	603b      	str	r3, [r7, #0]
 8000c10:	4613      	mov	r3, r2
 8000c12:	71fb      	strb	r3, [r7, #7]
	if (!raw || len < min_len)
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d003      	beq.n	8000c22 <frame_expect_req+0x1e>
 8000c1a:	68ba      	ldr	r2, [r7, #8]
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	429a      	cmp	r2, r3
 8000c20:	d202      	bcs.n	8000c28 <frame_expect_req+0x24>
		return PROTO_ERR_ARG;
 8000c22:	f04f 33ff 	mov.w	r3, #4294967295
 8000c26:	e012      	b.n	8000c4e <frame_expect_req+0x4a>
	if (!has_header_tail(raw, len, REQ_HEADER, REQ_TAIL)
 8000c28:	2355      	movs	r3, #85	@ 0x55
 8000c2a:	22aa      	movs	r2, #170	@ 0xaa
 8000c2c:	68b9      	ldr	r1, [r7, #8]
 8000c2e:	68f8      	ldr	r0, [r7, #12]
 8000c30:	f7ff ffc1 	bl	8000bb6 <has_header_tail>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d005      	beq.n	8000c46 <frame_expect_req+0x42>
			|| raw[1] != (uint8_t) type)
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	3301      	adds	r3, #1
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	79fa      	ldrb	r2, [r7, #7]
 8000c42:	429a      	cmp	r2, r3
 8000c44:	d002      	beq.n	8000c4c <frame_expect_req+0x48>
		return PROTO_ERR_FRAME;
 8000c46:	f06f 0301 	mvn.w	r3, #1
 8000c4a:	e000      	b.n	8000c4e <frame_expect_req+0x4a>
	return PROTO_OK;
 8000c4c:	2300      	movs	r3, #0
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	3710      	adds	r7, #16
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}

08000c56 <move_queue_status_req_decoder>:
#include "Protocol/Requests/move_queue_status_request.h"

int move_queue_status_req_decoder(const uint8_t *raw, uint32_t len,
		move_queue_status_req_t *out) {
 8000c56:	b580      	push	{r7, lr}
 8000c58:	b086      	sub	sp, #24
 8000c5a:	af00      	add	r7, sp, #0
 8000c5c:	60f8      	str	r0, [r7, #12]
 8000c5e:	60b9      	str	r1, [r7, #8]
 8000c60:	607a      	str	r2, [r7, #4]
	if (!raw || !out)
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d002      	beq.n	8000c6e <move_queue_status_req_decoder+0x18>
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d102      	bne.n	8000c74 <move_queue_status_req_decoder+0x1e>
		return PROTO_ERR_ARG;
 8000c6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c72:	e011      	b.n	8000c98 <move_queue_status_req_decoder+0x42>
	int st = frame_expect_req(raw, len, REQ_MOVE_QUEUE_STATUS, 4);
 8000c74:	2304      	movs	r3, #4
 8000c76:	2202      	movs	r2, #2
 8000c78:	68b9      	ldr	r1, [r7, #8]
 8000c7a:	68f8      	ldr	r0, [r7, #12]
 8000c7c:	f7ff ffc2 	bl	8000c04 <frame_expect_req>
 8000c80:	6178      	str	r0, [r7, #20]
	if (st != PROTO_OK)
 8000c82:	697b      	ldr	r3, [r7, #20]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <move_queue_status_req_decoder+0x36>
		return st;
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	e005      	b.n	8000c98 <move_queue_status_req_decoder+0x42>
	out->frameId = raw[2];
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	3302      	adds	r3, #2
 8000c90:	781a      	ldrb	r2, [r3, #0]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	701a      	strb	r2, [r3, #0]
	return PROTO_OK;
 8000c96:	2300      	movs	r3, #0
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	3718      	adds	r7, #24
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}

08000ca0 <has_header_tail>:
		uint8_t header, uint8_t tail) {
 8000ca0:	b480      	push	{r7}
 8000ca2:	b085      	sub	sp, #20
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	60f8      	str	r0, [r7, #12]
 8000ca8:	60b9      	str	r1, [r7, #8]
 8000caa:	4611      	mov	r1, r2
 8000cac:	461a      	mov	r2, r3
 8000cae:	460b      	mov	r3, r1
 8000cb0:	71fb      	strb	r3, [r7, #7]
 8000cb2:	4613      	mov	r3, r2
 8000cb4:	71bb      	strb	r3, [r7, #6]
	return raw && len >= 2 && raw[0] == header && raw[len - 1] == tail;
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d011      	beq.n	8000ce0 <has_header_tail+0x40>
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	2b01      	cmp	r3, #1
 8000cc0:	d90e      	bls.n	8000ce0 <has_header_tail+0x40>
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	79fa      	ldrb	r2, [r7, #7]
 8000cc8:	429a      	cmp	r2, r3
 8000cca:	d109      	bne.n	8000ce0 <has_header_tail+0x40>
 8000ccc:	68bb      	ldr	r3, [r7, #8]
 8000cce:	3b01      	subs	r3, #1
 8000cd0:	68fa      	ldr	r2, [r7, #12]
 8000cd2:	4413      	add	r3, r2
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	79ba      	ldrb	r2, [r7, #6]
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	d101      	bne.n	8000ce0 <has_header_tail+0x40>
 8000cdc:	2301      	movs	r3, #1
 8000cde:	e000      	b.n	8000ce2 <has_header_tail+0x42>
 8000ce0:	2300      	movs	r3, #0
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3714      	adds	r7, #20
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr

08000cee <frame_expect_req>:
		req_msg_type_t type, uint32_t min_len) {
 8000cee:	b580      	push	{r7, lr}
 8000cf0:	b084      	sub	sp, #16
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	60f8      	str	r0, [r7, #12]
 8000cf6:	60b9      	str	r1, [r7, #8]
 8000cf8:	603b      	str	r3, [r7, #0]
 8000cfa:	4613      	mov	r3, r2
 8000cfc:	71fb      	strb	r3, [r7, #7]
	if (!raw || len < min_len)
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d003      	beq.n	8000d0c <frame_expect_req+0x1e>
 8000d04:	68ba      	ldr	r2, [r7, #8]
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	429a      	cmp	r2, r3
 8000d0a:	d202      	bcs.n	8000d12 <frame_expect_req+0x24>
		return PROTO_ERR_ARG;
 8000d0c:	f04f 33ff 	mov.w	r3, #4294967295
 8000d10:	e012      	b.n	8000d38 <frame_expect_req+0x4a>
	if (!has_header_tail(raw, len, REQ_HEADER, REQ_TAIL)
 8000d12:	2355      	movs	r3, #85	@ 0x55
 8000d14:	22aa      	movs	r2, #170	@ 0xaa
 8000d16:	68b9      	ldr	r1, [r7, #8]
 8000d18:	68f8      	ldr	r0, [r7, #12]
 8000d1a:	f7ff ffc1 	bl	8000ca0 <has_header_tail>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d005      	beq.n	8000d30 <frame_expect_req+0x42>
			|| raw[1] != (uint8_t) type)
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	3301      	adds	r3, #1
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	79fa      	ldrb	r2, [r7, #7]
 8000d2c:	429a      	cmp	r2, r3
 8000d2e:	d002      	beq.n	8000d36 <frame_expect_req+0x48>
		return PROTO_ERR_FRAME;
 8000d30:	f06f 0301 	mvn.w	r3, #1
 8000d34:	e000      	b.n	8000d38 <frame_expect_req+0x4a>
	return PROTO_OK;
 8000d36:	2300      	movs	r3, #0
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	3710      	adds	r7, #16
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}

08000d40 <set_microsteps_req_decoder>:
#include "Protocol/Requests/set_microsteps_request.h"

int set_microsteps_req_decoder(const uint8_t *raw, uint32_t len, set_microsteps_req_t *out) {
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b086      	sub	sp, #24
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	60f8      	str	r0, [r7, #12]
 8000d48:	60b9      	str	r1, [r7, #8]
 8000d4a:	607a      	str	r2, [r7, #4]
    if (!raw || !out) return PROTO_ERR_ARG;
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d002      	beq.n	8000d58 <set_microsteps_req_decoder+0x18>
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d102      	bne.n	8000d5e <set_microsteps_req_decoder+0x1e>
 8000d58:	f04f 33ff 	mov.w	r3, #4294967295
 8000d5c:	e017      	b.n	8000d8e <set_microsteps_req_decoder+0x4e>
    int st = frame_expect_req(raw, len, REQ_SET_MICROSTEPS, 5);
 8000d5e:	2305      	movs	r3, #5
 8000d60:	2226      	movs	r2, #38	@ 0x26
 8000d62:	68b9      	ldr	r1, [r7, #8]
 8000d64:	68f8      	ldr	r0, [r7, #12]
 8000d66:	f7ff ffc2 	bl	8000cee <frame_expect_req>
 8000d6a:	6178      	str	r0, [r7, #20]
    if (st != PROTO_OK) return st;
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <set_microsteps_req_decoder+0x36>
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	e00b      	b.n	8000d8e <set_microsteps_req_decoder+0x4e>
    out->frameId = raw[2];
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	3302      	adds	r3, #2
 8000d7a:	781a      	ldrb	r2, [r3, #0]
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	701a      	strb	r2, [r3, #0]
    out->microsteps = (uint16_t)raw[3];
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	3303      	adds	r3, #3
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	461a      	mov	r2, r3
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	805a      	strh	r2, [r3, #2]
    return PROTO_OK;
 8000d8c:	2300      	movs	r3, #0
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3718      	adds	r7, #24
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}

08000d96 <has_header_tail>:
		uint8_t header, uint8_t tail) {
 8000d96:	b480      	push	{r7}
 8000d98:	b085      	sub	sp, #20
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	60f8      	str	r0, [r7, #12]
 8000d9e:	60b9      	str	r1, [r7, #8]
 8000da0:	4611      	mov	r1, r2
 8000da2:	461a      	mov	r2, r3
 8000da4:	460b      	mov	r3, r1
 8000da6:	71fb      	strb	r3, [r7, #7]
 8000da8:	4613      	mov	r3, r2
 8000daa:	71bb      	strb	r3, [r7, #6]
	return raw && len >= 2 && raw[0] == header && raw[len - 1] == tail;
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d011      	beq.n	8000dd6 <has_header_tail+0x40>
 8000db2:	68bb      	ldr	r3, [r7, #8]
 8000db4:	2b01      	cmp	r3, #1
 8000db6:	d90e      	bls.n	8000dd6 <has_header_tail+0x40>
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	79fa      	ldrb	r2, [r7, #7]
 8000dbe:	429a      	cmp	r2, r3
 8000dc0:	d109      	bne.n	8000dd6 <has_header_tail+0x40>
 8000dc2:	68bb      	ldr	r3, [r7, #8]
 8000dc4:	3b01      	subs	r3, #1
 8000dc6:	68fa      	ldr	r2, [r7, #12]
 8000dc8:	4413      	add	r3, r2
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	79ba      	ldrb	r2, [r7, #6]
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	d101      	bne.n	8000dd6 <has_header_tail+0x40>
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	e000      	b.n	8000dd8 <has_header_tail+0x42>
 8000dd6:	2300      	movs	r3, #0
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	3714      	adds	r7, #20
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr

08000de4 <frame_expect_req>:
		req_msg_type_t type, uint32_t min_len) {
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b084      	sub	sp, #16
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	60f8      	str	r0, [r7, #12]
 8000dec:	60b9      	str	r1, [r7, #8]
 8000dee:	603b      	str	r3, [r7, #0]
 8000df0:	4613      	mov	r3, r2
 8000df2:	71fb      	strb	r3, [r7, #7]
	if (!raw || len < min_len)
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d003      	beq.n	8000e02 <frame_expect_req+0x1e>
 8000dfa:	68ba      	ldr	r2, [r7, #8]
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	429a      	cmp	r2, r3
 8000e00:	d202      	bcs.n	8000e08 <frame_expect_req+0x24>
		return PROTO_ERR_ARG;
 8000e02:	f04f 33ff 	mov.w	r3, #4294967295
 8000e06:	e012      	b.n	8000e2e <frame_expect_req+0x4a>
	if (!has_header_tail(raw, len, REQ_HEADER, REQ_TAIL)
 8000e08:	2355      	movs	r3, #85	@ 0x55
 8000e0a:	22aa      	movs	r2, #170	@ 0xaa
 8000e0c:	68b9      	ldr	r1, [r7, #8]
 8000e0e:	68f8      	ldr	r0, [r7, #12]
 8000e10:	f7ff ffc1 	bl	8000d96 <has_header_tail>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d005      	beq.n	8000e26 <frame_expect_req+0x42>
			|| raw[1] != (uint8_t) type)
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	3301      	adds	r3, #1
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	79fa      	ldrb	r2, [r7, #7]
 8000e22:	429a      	cmp	r2, r3
 8000e24:	d002      	beq.n	8000e2c <frame_expect_req+0x48>
		return PROTO_ERR_FRAME;
 8000e26:	f06f 0301 	mvn.w	r3, #1
 8000e2a:	e000      	b.n	8000e2e <frame_expect_req+0x4a>
	return PROTO_OK;
 8000e2c:	2300      	movs	r3, #0
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3710      	adds	r7, #16
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}

08000e36 <set_origin_req_decoder>:
#include "Protocol/Requests/set_origin_request.h"

int set_origin_req_decoder(const uint8_t *raw, uint32_t len, set_origin_req_t *out) {
 8000e36:	b580      	push	{r7, lr}
 8000e38:	b086      	sub	sp, #24
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	60f8      	str	r0, [r7, #12]
 8000e3e:	60b9      	str	r1, [r7, #8]
 8000e40:	607a      	str	r2, [r7, #4]
    if (!raw || !out) return PROTO_ERR_ARG;
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d002      	beq.n	8000e4e <set_origin_req_decoder+0x18>
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d102      	bne.n	8000e54 <set_origin_req_decoder+0x1e>
 8000e4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e52:	e01e      	b.n	8000e92 <set_origin_req_decoder+0x5c>
    int st = frame_expect_req(raw, len, REQ_SET_ORIGIN, 6);
 8000e54:	2306      	movs	r3, #6
 8000e56:	2224      	movs	r2, #36	@ 0x24
 8000e58:	68b9      	ldr	r1, [r7, #8]
 8000e5a:	68f8      	ldr	r0, [r7, #12]
 8000e5c:	f7ff ffc2 	bl	8000de4 <frame_expect_req>
 8000e60:	6178      	str	r0, [r7, #20]
    if (st != PROTO_OK) return st;
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <set_origin_req_decoder+0x36>
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	e012      	b.n	8000e92 <set_origin_req_decoder+0x5c>
    out->frameId = raw[2];
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	3302      	adds	r3, #2
 8000e70:	781a      	ldrb	r2, [r3, #0]
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	701a      	strb	r2, [r3, #0]
    out->mask = raw[3] & 0x07u;
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	3303      	adds	r3, #3
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	f003 0307 	and.w	r3, r3, #7
 8000e80:	b2da      	uxtb	r2, r3
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	705a      	strb	r2, [r3, #1]
    out->mode = raw[4];
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	3304      	adds	r3, #4
 8000e8a:	781a      	ldrb	r2, [r3, #0]
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	709a      	strb	r2, [r3, #2]
    return PROTO_OK;
 8000e90:	2300      	movs	r3, #0
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3718      	adds	r7, #24
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}

08000e9a <has_header_tail>:
		uint8_t header, uint8_t tail) {
 8000e9a:	b480      	push	{r7}
 8000e9c:	b085      	sub	sp, #20
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	60f8      	str	r0, [r7, #12]
 8000ea2:	60b9      	str	r1, [r7, #8]
 8000ea4:	4611      	mov	r1, r2
 8000ea6:	461a      	mov	r2, r3
 8000ea8:	460b      	mov	r3, r1
 8000eaa:	71fb      	strb	r3, [r7, #7]
 8000eac:	4613      	mov	r3, r2
 8000eae:	71bb      	strb	r3, [r7, #6]
	return raw && len >= 2 && raw[0] == header && raw[len - 1] == tail;
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d011      	beq.n	8000eda <has_header_tail+0x40>
 8000eb6:	68bb      	ldr	r3, [r7, #8]
 8000eb8:	2b01      	cmp	r3, #1
 8000eba:	d90e      	bls.n	8000eda <has_header_tail+0x40>
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	79fa      	ldrb	r2, [r7, #7]
 8000ec2:	429a      	cmp	r2, r3
 8000ec4:	d109      	bne.n	8000eda <has_header_tail+0x40>
 8000ec6:	68bb      	ldr	r3, [r7, #8]
 8000ec8:	3b01      	subs	r3, #1
 8000eca:	68fa      	ldr	r2, [r7, #12]
 8000ecc:	4413      	add	r3, r2
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	79ba      	ldrb	r2, [r7, #6]
 8000ed2:	429a      	cmp	r2, r3
 8000ed4:	d101      	bne.n	8000eda <has_header_tail+0x40>
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	e000      	b.n	8000edc <has_header_tail+0x42>
 8000eda:	2300      	movs	r3, #0
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	3714      	adds	r7, #20
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr

08000ee8 <frame_expect_req>:
		req_msg_type_t type, uint32_t min_len) {
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	60f8      	str	r0, [r7, #12]
 8000ef0:	60b9      	str	r1, [r7, #8]
 8000ef2:	603b      	str	r3, [r7, #0]
 8000ef4:	4613      	mov	r3, r2
 8000ef6:	71fb      	strb	r3, [r7, #7]
	if (!raw || len < min_len)
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d003      	beq.n	8000f06 <frame_expect_req+0x1e>
 8000efe:	68ba      	ldr	r2, [r7, #8]
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	429a      	cmp	r2, r3
 8000f04:	d202      	bcs.n	8000f0c <frame_expect_req+0x24>
		return PROTO_ERR_ARG;
 8000f06:	f04f 33ff 	mov.w	r3, #4294967295
 8000f0a:	e012      	b.n	8000f32 <frame_expect_req+0x4a>
	if (!has_header_tail(raw, len, REQ_HEADER, REQ_TAIL)
 8000f0c:	2355      	movs	r3, #85	@ 0x55
 8000f0e:	22aa      	movs	r2, #170	@ 0xaa
 8000f10:	68b9      	ldr	r1, [r7, #8]
 8000f12:	68f8      	ldr	r0, [r7, #12]
 8000f14:	f7ff ffc1 	bl	8000e9a <has_header_tail>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d005      	beq.n	8000f2a <frame_expect_req+0x42>
			|| raw[1] != (uint8_t) type)
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	3301      	adds	r3, #1
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	79fa      	ldrb	r2, [r7, #7]
 8000f26:	429a      	cmp	r2, r3
 8000f28:	d002      	beq.n	8000f30 <frame_expect_req+0x48>
		return PROTO_ERR_FRAME;
 8000f2a:	f06f 0301 	mvn.w	r3, #1
 8000f2e:	e000      	b.n	8000f32 <frame_expect_req+0x4a>
	return PROTO_OK;
 8000f30:	2300      	movs	r3, #0
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3710      	adds	r7, #16
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}

08000f3a <start_move_req_decoder>:
#include "Protocol/Requests/start_move_request.h"

int start_move_req_decoder(const uint8_t *raw, uint32_t len,
		start_move_req_t *out) {
 8000f3a:	b580      	push	{r7, lr}
 8000f3c:	b086      	sub	sp, #24
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	60f8      	str	r0, [r7, #12]
 8000f42:	60b9      	str	r1, [r7, #8]
 8000f44:	607a      	str	r2, [r7, #4]
	if (!raw || !out)
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d002      	beq.n	8000f52 <start_move_req_decoder+0x18>
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d102      	bne.n	8000f58 <start_move_req_decoder+0x1e>
		return PROTO_ERR_ARG;
 8000f52:	f04f 33ff 	mov.w	r3, #4294967295
 8000f56:	e011      	b.n	8000f7c <start_move_req_decoder+0x42>
	int st = frame_expect_req(raw, len, REQ_START_MOVE, 4);
 8000f58:	2304      	movs	r3, #4
 8000f5a:	2203      	movs	r2, #3
 8000f5c:	68b9      	ldr	r1, [r7, #8]
 8000f5e:	68f8      	ldr	r0, [r7, #12]
 8000f60:	f7ff ffc2 	bl	8000ee8 <frame_expect_req>
 8000f64:	6178      	str	r0, [r7, #20]
	if (st != PROTO_OK)
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <start_move_req_decoder+0x36>
		return st;
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	e005      	b.n	8000f7c <start_move_req_decoder+0x42>
	out->frameId = raw[2];
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	3302      	adds	r3, #2
 8000f74:	781a      	ldrb	r2, [r3, #0]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	701a      	strb	r2, [r3, #0]
	return PROTO_OK;
 8000f7a:	2300      	movs	r3, #0
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	3718      	adds	r7, #24
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}

08000f84 <be32_write>:
}
static inline void be16_write(uint8_t *p, uint16_t v) {
	p[0] = (uint8_t) (v >> 8);
	p[1] = (uint8_t) v;
}
static inline void be32_write(uint8_t *p, uint32_t v) {
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	6039      	str	r1, [r7, #0]
	p[0] = (uint8_t) (v >> 24);
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	0e1b      	lsrs	r3, r3, #24
 8000f92:	b2da      	uxtb	r2, r3
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	701a      	strb	r2, [r3, #0]
	p[1] = (uint8_t) (v >> 16);
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	0c1a      	lsrs	r2, r3, #16
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	b2d2      	uxtb	r2, r2
 8000fa2:	701a      	strb	r2, [r3, #0]
	p[2] = (uint8_t) (v >> 8);
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	0a1a      	lsrs	r2, r3, #8
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	3302      	adds	r3, #2
 8000fac:	b2d2      	uxtb	r2, r2
 8000fae:	701a      	strb	r2, [r3, #0]
	p[3] = (uint8_t) v;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	3303      	adds	r3, #3
 8000fb4:	683a      	ldr	r2, [r7, #0]
 8000fb6:	b2d2      	uxtb	r2, r2
 8000fb8:	701a      	strb	r2, [r3, #0]
}
 8000fba:	bf00      	nop
 8000fbc:	370c      	adds	r7, #12
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr

08000fc6 <resp_init>:
// =====================
static inline void req_init(uint8_t *raw, req_msg_type_t type) {
	raw[0] = REQ_HEADER;
	raw[1] = (uint8_t) type;
}
static inline void resp_init(uint8_t *raw, resp_msg_type_t type) {
 8000fc6:	b480      	push	{r7}
 8000fc8:	b083      	sub	sp, #12
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	6078      	str	r0, [r7, #4]
 8000fce:	460b      	mov	r3, r1
 8000fd0:	70fb      	strb	r3, [r7, #3]
	raw[0] = RESP_HEADER;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	22ab      	movs	r2, #171	@ 0xab
 8000fd6:	701a      	strb	r2, [r3, #0]
	raw[1] = (uint8_t) type;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	3301      	adds	r3, #1
 8000fdc:	78fa      	ldrb	r2, [r7, #3]
 8000fde:	701a      	strb	r2, [r3, #0]
}
 8000fe0:	bf00      	nop
 8000fe2:	370c      	adds	r7, #12
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr

08000fec <resp_set_tail>:
static inline void req_set_tail(uint8_t *raw, uint32_t tail_index) {
	raw[tail_index] = REQ_TAIL;
}
static inline void resp_set_tail(uint8_t *raw, uint32_t tail_index) {
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	6039      	str	r1, [r7, #0]
	raw[tail_index] = RESP_TAIL;
 8000ff6:	687a      	ldr	r2, [r7, #4]
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	4413      	add	r3, r2
 8000ffc:	2254      	movs	r2, #84	@ 0x54
 8000ffe:	701a      	strb	r2, [r3, #0]
}
 8001000:	bf00      	nop
 8001002:	370c      	adds	r7, #12
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr

0800100c <encoder_status_resp_encoder>:
#include "Protocol/Responses/encoder_status_response.h"

int encoder_status_resp_encoder(const encoder_status_resp_t *in, uint8_t *raw, uint32_t len) {
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	60f8      	str	r0, [r7, #12]
 8001014:	60b9      	str	r1, [r7, #8]
 8001016:	607a      	str	r2, [r7, #4]
    if (!raw || !in || len < 20) return PROTO_ERR_ARG;
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d005      	beq.n	800102a <encoder_status_resp_encoder+0x1e>
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d002      	beq.n	800102a <encoder_status_resp_encoder+0x1e>
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2b13      	cmp	r3, #19
 8001028:	d802      	bhi.n	8001030 <encoder_status_resp_encoder+0x24>
 800102a:	f04f 33ff 	mov.w	r3, #4294967295
 800102e:	e03b      	b.n	80010a8 <encoder_status_resp_encoder+0x9c>
    resp_init(raw, RESP_ENCODER_STATUS);
 8001030:	2125      	movs	r1, #37	@ 0x25
 8001032:	68b8      	ldr	r0, [r7, #8]
 8001034:	f7ff ffc7 	bl	8000fc6 <resp_init>
    raw[2] = in->frameId;
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	3302      	adds	r3, #2
 800103c:	68fa      	ldr	r2, [r7, #12]
 800103e:	7812      	ldrb	r2, [r2, #0]
 8001040:	701a      	strb	r2, [r3, #0]
    raw[3] = in->pidErrX;
 8001042:	68bb      	ldr	r3, [r7, #8]
 8001044:	3303      	adds	r3, #3
 8001046:	68fa      	ldr	r2, [r7, #12]
 8001048:	7852      	ldrb	r2, [r2, #1]
 800104a:	701a      	strb	r2, [r3, #0]
    raw[4] = in->pidErrY;
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	3304      	adds	r3, #4
 8001050:	68fa      	ldr	r2, [r7, #12]
 8001052:	7892      	ldrb	r2, [r2, #2]
 8001054:	701a      	strb	r2, [r3, #0]
    raw[5] = in->pidErrZ;
 8001056:	68bb      	ldr	r3, [r7, #8]
 8001058:	3305      	adds	r3, #5
 800105a:	68fa      	ldr	r2, [r7, #12]
 800105c:	78d2      	ldrb	r2, [r2, #3]
 800105e:	701a      	strb	r2, [r3, #0]
    raw[6] = in->delta;
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	3306      	adds	r3, #6
 8001064:	68fa      	ldr	r2, [r7, #12]
 8001066:	7912      	ldrb	r2, [r2, #4]
 8001068:	701a      	strb	r2, [r3, #0]
    be32_write(&raw[7],  (uint32_t)in->absX);
 800106a:	68bb      	ldr	r3, [r7, #8]
 800106c:	1dda      	adds	r2, r3, #7
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	689b      	ldr	r3, [r3, #8]
 8001072:	4619      	mov	r1, r3
 8001074:	4610      	mov	r0, r2
 8001076:	f7ff ff85 	bl	8000f84 <be32_write>
    be32_write(&raw[11], (uint32_t)in->absY);
 800107a:	68bb      	ldr	r3, [r7, #8]
 800107c:	f103 020b 	add.w	r2, r3, #11
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	4619      	mov	r1, r3
 8001086:	4610      	mov	r0, r2
 8001088:	f7ff ff7c 	bl	8000f84 <be32_write>
    be32_write(&raw[15], (uint32_t)in->absZ);
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	f103 020f 	add.w	r2, r3, #15
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	691b      	ldr	r3, [r3, #16]
 8001096:	4619      	mov	r1, r3
 8001098:	4610      	mov	r0, r2
 800109a:	f7ff ff73 	bl	8000f84 <be32_write>
    resp_set_tail(raw, 19);
 800109e:	2113      	movs	r1, #19
 80010a0:	68b8      	ldr	r0, [r7, #8]
 80010a2:	f7ff ffa3 	bl	8000fec <resp_set_tail>
    return PROTO_OK;
 80010a6:	2300      	movs	r3, #0
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3710      	adds	r7, #16
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}

080010b0 <xor_reduce_bytes>:
static inline uint8_t xor_reduce_bytes(const uint8_t *p, uint32_t n) {
 80010b0:	b480      	push	{r7}
 80010b2:	b085      	sub	sp, #20
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	6039      	str	r1, [r7, #0]
	uint8_t x = 0;
 80010ba:	2300      	movs	r3, #0
 80010bc:	73fb      	strb	r3, [r7, #15]
	for (uint32_t i = 0; i < n; ++i)
 80010be:	2300      	movs	r3, #0
 80010c0:	60bb      	str	r3, [r7, #8]
 80010c2:	e009      	b.n	80010d8 <xor_reduce_bytes+0x28>
		x ^= p[i];
 80010c4:	687a      	ldr	r2, [r7, #4]
 80010c6:	68bb      	ldr	r3, [r7, #8]
 80010c8:	4413      	add	r3, r2
 80010ca:	781a      	ldrb	r2, [r3, #0]
 80010cc:	7bfb      	ldrb	r3, [r7, #15]
 80010ce:	4053      	eors	r3, r2
 80010d0:	73fb      	strb	r3, [r7, #15]
	for (uint32_t i = 0; i < n; ++i)
 80010d2:	68bb      	ldr	r3, [r7, #8]
 80010d4:	3301      	adds	r3, #1
 80010d6:	60bb      	str	r3, [r7, #8]
 80010d8:	68ba      	ldr	r2, [r7, #8]
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	429a      	cmp	r2, r3
 80010de:	d3f1      	bcc.n	80010c4 <xor_reduce_bytes+0x14>
	return x;
 80010e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3714      	adds	r7, #20
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr

080010ee <set_parity_byte>:
		uint32_t parity_index) {
 80010ee:	b590      	push	{r4, r7, lr}
 80010f0:	b085      	sub	sp, #20
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	60f8      	str	r0, [r7, #12]
 80010f6:	60b9      	str	r1, [r7, #8]
 80010f8:	607a      	str	r2, [r7, #4]
 80010fa:	603b      	str	r3, [r7, #0]
	if (!raw)
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d102      	bne.n	8001108 <set_parity_byte+0x1a>
		return -1;
 8001102:	f04f 33ff 	mov.w	r3, #4294967295
 8001106:	e00b      	b.n	8001120 <set_parity_byte+0x32>
	raw[parity_index] = xor_reduce_bytes(raw + start, count);
 8001108:	68fa      	ldr	r2, [r7, #12]
 800110a:	68bb      	ldr	r3, [r7, #8]
 800110c:	18d0      	adds	r0, r2, r3
 800110e:	68fa      	ldr	r2, [r7, #12]
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	18d4      	adds	r4, r2, r3
 8001114:	6879      	ldr	r1, [r7, #4]
 8001116:	f7ff ffcb 	bl	80010b0 <xor_reduce_bytes>
 800111a:	4603      	mov	r3, r0
 800111c:	7023      	strb	r3, [r4, #0]
	return 0;
 800111e:	2300      	movs	r3, #0
}
 8001120:	4618      	mov	r0, r3
 8001122:	3714      	adds	r7, #20
 8001124:	46bd      	mov	sp, r7
 8001126:	bd90      	pop	{r4, r7, pc}

08001128 <resp_init>:
static inline void resp_init(uint8_t *raw, resp_msg_type_t type) {
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
 8001130:	460b      	mov	r3, r1
 8001132:	70fb      	strb	r3, [r7, #3]
	raw[0] = RESP_HEADER;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	22ab      	movs	r2, #171	@ 0xab
 8001138:	701a      	strb	r2, [r3, #0]
	raw[1] = (uint8_t) type;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	3301      	adds	r3, #1
 800113e:	78fa      	ldrb	r2, [r7, #3]
 8001140:	701a      	strb	r2, [r3, #0]
}
 8001142:	bf00      	nop
 8001144:	370c      	adds	r7, #12
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr

0800114e <resp_set_tail>:
static inline void resp_set_tail(uint8_t *raw, uint32_t tail_index) {
 800114e:	b480      	push	{r7}
 8001150:	b083      	sub	sp, #12
 8001152:	af00      	add	r7, sp, #0
 8001154:	6078      	str	r0, [r7, #4]
 8001156:	6039      	str	r1, [r7, #0]
	raw[tail_index] = RESP_TAIL;
 8001158:	687a      	ldr	r2, [r7, #4]
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	4413      	add	r3, r2
 800115e:	2254      	movs	r2, #84	@ 0x54
 8001160:	701a      	strb	r2, [r3, #0]
}
 8001162:	bf00      	nop
 8001164:	370c      	adds	r7, #12
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr

0800116e <parity_set_byte_1N>:
// =====================
// Wrappers de paridade (intervalo 1..N)
// =====================
// Assume que a paridade cobre os bytes do índice 1 (tipo) até last_index inclusive
static inline int parity_set_byte_1N(uint8_t *raw, uint32_t last_index,
		uint32_t parity_index) {
 800116e:	b580      	push	{r7, lr}
 8001170:	b084      	sub	sp, #16
 8001172:	af00      	add	r7, sp, #0
 8001174:	60f8      	str	r0, [r7, #12]
 8001176:	60b9      	str	r1, [r7, #8]
 8001178:	607a      	str	r2, [r7, #4]
	return set_parity_byte(raw, 1, last_index, parity_index);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	68ba      	ldr	r2, [r7, #8]
 800117e:	2101      	movs	r1, #1
 8001180:	68f8      	ldr	r0, [r7, #12]
 8001182:	f7ff ffb4 	bl	80010ee <set_parity_byte>
 8001186:	4603      	mov	r3, r0
}
 8001188:	4618      	mov	r0, r3
 800118a:	3710      	adds	r7, #16
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <led_ctrl_resp_encoder>:
uint8_t led_ctrl_resp_calc_parity(const led_ctrl_resp_t *in) {
	uint8_t b[4] = { RESP_LED_CTRL, in ? in->frameId : 0, in ? in->ledMask : 0,
			in ? in->status : 0 };
	return xor_reduce_bytes(b, 4);
}
int led_ctrl_resp_encoder(const led_ctrl_resp_t *in, uint8_t *raw, uint32_t len) {
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0
 8001196:	60f8      	str	r0, [r7, #12]
 8001198:	60b9      	str	r1, [r7, #8]
 800119a:	607a      	str	r2, [r7, #4]
	if (!raw || !in || len < 7)
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d005      	beq.n	80011ae <led_ctrl_resp_encoder+0x1e>
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d002      	beq.n	80011ae <led_ctrl_resp_encoder+0x1e>
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2b06      	cmp	r3, #6
 80011ac:	d802      	bhi.n	80011b4 <led_ctrl_resp_encoder+0x24>
		return PROTO_ERR_ARG;
 80011ae:	f04f 33ff 	mov.w	r3, #4294967295
 80011b2:	e01c      	b.n	80011ee <led_ctrl_resp_encoder+0x5e>
	resp_init(raw, RESP_LED_CTRL);
 80011b4:	2107      	movs	r1, #7
 80011b6:	68b8      	ldr	r0, [r7, #8]
 80011b8:	f7ff ffb6 	bl	8001128 <resp_init>
	raw[2] = in->frameId;
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	3302      	adds	r3, #2
 80011c0:	68fa      	ldr	r2, [r7, #12]
 80011c2:	7812      	ldrb	r2, [r2, #0]
 80011c4:	701a      	strb	r2, [r3, #0]
	raw[3] = in->ledMask;
 80011c6:	68bb      	ldr	r3, [r7, #8]
 80011c8:	3303      	adds	r3, #3
 80011ca:	68fa      	ldr	r2, [r7, #12]
 80011cc:	7852      	ldrb	r2, [r2, #1]
 80011ce:	701a      	strb	r2, [r3, #0]
	raw[4] = in->status;
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	3304      	adds	r3, #4
 80011d4:	68fa      	ldr	r2, [r7, #12]
 80011d6:	7892      	ldrb	r2, [r2, #2]
 80011d8:	701a      	strb	r2, [r3, #0]
	parity_set_byte_1N(raw, 4, 5);
 80011da:	2205      	movs	r2, #5
 80011dc:	2104      	movs	r1, #4
 80011de:	68b8      	ldr	r0, [r7, #8]
 80011e0:	f7ff ffc5 	bl	800116e <parity_set_byte_1N>
	resp_set_tail(raw, 6);
 80011e4:	2106      	movs	r1, #6
 80011e6:	68b8      	ldr	r0, [r7, #8]
 80011e8:	f7ff ffb1 	bl	800114e <resp_set_tail>
	return PROTO_OK;
 80011ec:	2300      	movs	r3, #0
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3710      	adds	r7, #16
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}

080011f6 <resp_init>:
static inline void resp_init(uint8_t *raw, resp_msg_type_t type) {
 80011f6:	b480      	push	{r7}
 80011f8:	b083      	sub	sp, #12
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	6078      	str	r0, [r7, #4]
 80011fe:	460b      	mov	r3, r1
 8001200:	70fb      	strb	r3, [r7, #3]
	raw[0] = RESP_HEADER;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	22ab      	movs	r2, #171	@ 0xab
 8001206:	701a      	strb	r2, [r3, #0]
	raw[1] = (uint8_t) type;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	3301      	adds	r3, #1
 800120c:	78fa      	ldrb	r2, [r7, #3]
 800120e:	701a      	strb	r2, [r3, #0]
}
 8001210:	bf00      	nop
 8001212:	370c      	adds	r7, #12
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr

0800121c <resp_set_tail>:
static inline void resp_set_tail(uint8_t *raw, uint32_t tail_index) {
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	6039      	str	r1, [r7, #0]
	raw[tail_index] = RESP_TAIL;
 8001226:	687a      	ldr	r2, [r7, #4]
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	4413      	add	r3, r2
 800122c:	2254      	movs	r2, #84	@ 0x54
 800122e:	701a      	strb	r2, [r3, #0]
}
 8001230:	bf00      	nop
 8001232:	370c      	adds	r7, #12
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr

0800123c <move_end_resp_encoder>:
	if (st != PROTO_OK)
		return st;
	out->frameId = raw[2];
	return PROTO_OK;
}
int move_end_resp_encoder(const move_end_resp_t *in, uint8_t *raw, uint32_t len) {
 800123c:	b580      	push	{r7, lr}
 800123e:	b084      	sub	sp, #16
 8001240:	af00      	add	r7, sp, #0
 8001242:	60f8      	str	r0, [r7, #12]
 8001244:	60b9      	str	r1, [r7, #8]
 8001246:	607a      	str	r2, [r7, #4]
	if (!raw || !in || len < 4)
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d005      	beq.n	800125a <move_end_resp_encoder+0x1e>
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d002      	beq.n	800125a <move_end_resp_encoder+0x1e>
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2b03      	cmp	r3, #3
 8001258:	d802      	bhi.n	8001260 <move_end_resp_encoder+0x24>
		return PROTO_ERR_ARG;
 800125a:	f04f 33ff 	mov.w	r3, #4294967295
 800125e:	e00d      	b.n	800127c <move_end_resp_encoder+0x40>
	resp_init(raw, RESP_MOVE_END);
 8001260:	2106      	movs	r1, #6
 8001262:	68b8      	ldr	r0, [r7, #8]
 8001264:	f7ff ffc7 	bl	80011f6 <resp_init>
	raw[2] = in->frameId;
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	3302      	adds	r3, #2
 800126c:	68fa      	ldr	r2, [r7, #12]
 800126e:	7812      	ldrb	r2, [r2, #0]
 8001270:	701a      	strb	r2, [r3, #0]
	resp_set_tail(raw, 3);
 8001272:	2103      	movs	r1, #3
 8001274:	68b8      	ldr	r0, [r7, #8]
 8001276:	f7ff ffd1 	bl	800121c <resp_set_tail>
	return PROTO_OK;
 800127a:	2300      	movs	r3, #0
}
 800127c:	4618      	mov	r0, r3
 800127e:	3710      	adds	r7, #16
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}

08001284 <xor_bit_reduce_bytes>:
static inline uint8_t xor_bit_reduce_bytes(const uint8_t *p, uint32_t n) {
 8001284:	b480      	push	{r7}
 8001286:	b085      	sub	sp, #20
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	6039      	str	r1, [r7, #0]
	uint8_t x = 0;
 800128e:	2300      	movs	r3, #0
 8001290:	73fb      	strb	r3, [r7, #15]
	for (uint32_t i = 0; i < n; ++i)
 8001292:	2300      	movs	r3, #0
 8001294:	60bb      	str	r3, [r7, #8]
 8001296:	e009      	b.n	80012ac <xor_bit_reduce_bytes+0x28>
		x ^= p[i];
 8001298:	687a      	ldr	r2, [r7, #4]
 800129a:	68bb      	ldr	r3, [r7, #8]
 800129c:	4413      	add	r3, r2
 800129e:	781a      	ldrb	r2, [r3, #0]
 80012a0:	7bfb      	ldrb	r3, [r7, #15]
 80012a2:	4053      	eors	r3, r2
 80012a4:	73fb      	strb	r3, [r7, #15]
	for (uint32_t i = 0; i < n; ++i)
 80012a6:	68bb      	ldr	r3, [r7, #8]
 80012a8:	3301      	adds	r3, #1
 80012aa:	60bb      	str	r3, [r7, #8]
 80012ac:	68ba      	ldr	r2, [r7, #8]
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	429a      	cmp	r2, r3
 80012b2:	d3f1      	bcc.n	8001298 <xor_bit_reduce_bytes+0x14>
	x ^= (uint8_t) (x >> 4);
 80012b4:	7bfb      	ldrb	r3, [r7, #15]
 80012b6:	091b      	lsrs	r3, r3, #4
 80012b8:	b2da      	uxtb	r2, r3
 80012ba:	7bfb      	ldrb	r3, [r7, #15]
 80012bc:	4053      	eors	r3, r2
 80012be:	73fb      	strb	r3, [r7, #15]
	x ^= (uint8_t) (x >> 2);
 80012c0:	7bfb      	ldrb	r3, [r7, #15]
 80012c2:	089b      	lsrs	r3, r3, #2
 80012c4:	b2da      	uxtb	r2, r3
 80012c6:	7bfb      	ldrb	r3, [r7, #15]
 80012c8:	4053      	eors	r3, r2
 80012ca:	73fb      	strb	r3, [r7, #15]
	x ^= (uint8_t) (x >> 1);
 80012cc:	7bfb      	ldrb	r3, [r7, #15]
 80012ce:	085b      	lsrs	r3, r3, #1
 80012d0:	b2da      	uxtb	r2, r3
 80012d2:	7bfb      	ldrb	r3, [r7, #15]
 80012d4:	4053      	eors	r3, r2
 80012d6:	73fb      	strb	r3, [r7, #15]
	return (uint8_t) (x & 0x1);
 80012d8:	7bfb      	ldrb	r3, [r7, #15]
 80012da:	f003 0301 	and.w	r3, r3, #1
 80012de:	b2db      	uxtb	r3, r3
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	3714      	adds	r7, #20
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr

080012ec <set_parity_bit>:
		uint32_t parity_index) {
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	60f8      	str	r0, [r7, #12]
 80012f4:	60b9      	str	r1, [r7, #8]
 80012f6:	607a      	str	r2, [r7, #4]
 80012f8:	603b      	str	r3, [r7, #0]
	if (!raw)
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d102      	bne.n	8001306 <set_parity_bit+0x1a>
		return -1;
 8001300:	f04f 33ff 	mov.w	r3, #4294967295
 8001304:	e010      	b.n	8001328 <set_parity_bit+0x3c>
	raw[parity_index] = (uint8_t) (xor_bit_reduce_bytes(raw + start, count)
 8001306:	68fa      	ldr	r2, [r7, #12]
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	4413      	add	r3, r2
 800130c:	6879      	ldr	r1, [r7, #4]
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff ffb8 	bl	8001284 <xor_bit_reduce_bytes>
 8001314:	4603      	mov	r3, r0
 8001316:	4619      	mov	r1, r3
 8001318:	68fa      	ldr	r2, [r7, #12]
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	4413      	add	r3, r2
 800131e:	f001 0201 	and.w	r2, r1, #1
 8001322:	b2d2      	uxtb	r2, r2
 8001324:	701a      	strb	r2, [r3, #0]
	return 0;
 8001326:	2300      	movs	r3, #0
}
 8001328:	4618      	mov	r0, r3
 800132a:	3710      	adds	r7, #16
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}

08001330 <resp_init>:
static inline void resp_init(uint8_t *raw, resp_msg_type_t type) {
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	460b      	mov	r3, r1
 800133a:	70fb      	strb	r3, [r7, #3]
	raw[0] = RESP_HEADER;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	22ab      	movs	r2, #171	@ 0xab
 8001340:	701a      	strb	r2, [r3, #0]
	raw[1] = (uint8_t) type;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	3301      	adds	r3, #1
 8001346:	78fa      	ldrb	r2, [r7, #3]
 8001348:	701a      	strb	r2, [r3, #0]
}
 800134a:	bf00      	nop
 800134c:	370c      	adds	r7, #12
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr

08001356 <resp_set_tail>:
static inline void resp_set_tail(uint8_t *raw, uint32_t tail_index) {
 8001356:	b480      	push	{r7}
 8001358:	b083      	sub	sp, #12
 800135a:	af00      	add	r7, sp, #0
 800135c:	6078      	str	r0, [r7, #4]
 800135e:	6039      	str	r1, [r7, #0]
	raw[tail_index] = RESP_TAIL;
 8001360:	687a      	ldr	r2, [r7, #4]
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	4413      	add	r3, r2
 8001366:	2254      	movs	r2, #84	@ 0x54
 8001368:	701a      	strb	r2, [r3, #0]
}
 800136a:	bf00      	nop
 800136c:	370c      	adds	r7, #12
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr

08001376 <parity_set_bit_1N>:
static inline int parity_check_byte_1N(const uint8_t *raw, uint32_t last_index,
		uint32_t parity_index) {
	return check_parity_byte(raw, 1, last_index, parity_index);
}
static inline int parity_set_bit_1N(uint8_t *raw, uint32_t last_index,
		uint32_t parity_index) {
 8001376:	b580      	push	{r7, lr}
 8001378:	b084      	sub	sp, #16
 800137a:	af00      	add	r7, sp, #0
 800137c:	60f8      	str	r0, [r7, #12]
 800137e:	60b9      	str	r1, [r7, #8]
 8001380:	607a      	str	r2, [r7, #4]
	return set_parity_bit(raw, 1, last_index, parity_index);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	68ba      	ldr	r2, [r7, #8]
 8001386:	2101      	movs	r1, #1
 8001388:	68f8      	ldr	r0, [r7, #12]
 800138a:	f7ff ffaf 	bl	80012ec <set_parity_bit>
 800138e:	4603      	mov	r3, r0
}
 8001390:	4618      	mov	r0, r3
 8001392:	3710      	adds	r7, #16
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}

08001398 <move_queue_add_ack_resp_encoder>:
	uint8_t b[3] = { RESP_MOVE_QUEUE_ADD_ACK, in ? in->frameId : 0,
			in ? in->status : 0 };
	return xor_bit_reduce_bytes(b, 3);
}
int move_queue_add_ack_resp_encoder(const move_queue_add_ack_resp_t *in,
		uint8_t *raw, uint32_t len) {
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af00      	add	r7, sp, #0
 800139e:	60f8      	str	r0, [r7, #12]
 80013a0:	60b9      	str	r1, [r7, #8]
 80013a2:	607a      	str	r2, [r7, #4]
	if (!raw || !in || len < 6)
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d005      	beq.n	80013b6 <move_queue_add_ack_resp_encoder+0x1e>
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d002      	beq.n	80013b6 <move_queue_add_ack_resp_encoder+0x1e>
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2b05      	cmp	r3, #5
 80013b4:	d802      	bhi.n	80013bc <move_queue_add_ack_resp_encoder+0x24>
		return PROTO_ERR_ARG;
 80013b6:	f04f 33ff 	mov.w	r3, #4294967295
 80013ba:	e017      	b.n	80013ec <move_queue_add_ack_resp_encoder+0x54>
	resp_init(raw, RESP_MOVE_QUEUE_ADD_ACK);
 80013bc:	2101      	movs	r1, #1
 80013be:	68b8      	ldr	r0, [r7, #8]
 80013c0:	f7ff ffb6 	bl	8001330 <resp_init>
	raw[2] = in->frameId;
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	3302      	adds	r3, #2
 80013c8:	68fa      	ldr	r2, [r7, #12]
 80013ca:	7812      	ldrb	r2, [r2, #0]
 80013cc:	701a      	strb	r2, [r3, #0]
	raw[3] = in->status;
 80013ce:	68bb      	ldr	r3, [r7, #8]
 80013d0:	3303      	adds	r3, #3
 80013d2:	68fa      	ldr	r2, [r7, #12]
 80013d4:	7852      	ldrb	r2, [r2, #1]
 80013d6:	701a      	strb	r2, [r3, #0]
	parity_set_bit_1N(raw, 3, 4);
 80013d8:	2204      	movs	r2, #4
 80013da:	2103      	movs	r1, #3
 80013dc:	68b8      	ldr	r0, [r7, #8]
 80013de:	f7ff ffca 	bl	8001376 <parity_set_bit_1N>
	resp_set_tail(raw, 5);
 80013e2:	2105      	movs	r1, #5
 80013e4:	68b8      	ldr	r0, [r7, #8]
 80013e6:	f7ff ffb6 	bl	8001356 <resp_set_tail>
	return PROTO_OK;
 80013ea:	2300      	movs	r3, #0
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	3710      	adds	r7, #16
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}

080013f4 <xor_bit_reduce_bytes>:
static inline uint8_t xor_bit_reduce_bytes(const uint8_t *p, uint32_t n) {
 80013f4:	b480      	push	{r7}
 80013f6:	b085      	sub	sp, #20
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
 80013fc:	6039      	str	r1, [r7, #0]
	uint8_t x = 0;
 80013fe:	2300      	movs	r3, #0
 8001400:	73fb      	strb	r3, [r7, #15]
	for (uint32_t i = 0; i < n; ++i)
 8001402:	2300      	movs	r3, #0
 8001404:	60bb      	str	r3, [r7, #8]
 8001406:	e009      	b.n	800141c <xor_bit_reduce_bytes+0x28>
		x ^= p[i];
 8001408:	687a      	ldr	r2, [r7, #4]
 800140a:	68bb      	ldr	r3, [r7, #8]
 800140c:	4413      	add	r3, r2
 800140e:	781a      	ldrb	r2, [r3, #0]
 8001410:	7bfb      	ldrb	r3, [r7, #15]
 8001412:	4053      	eors	r3, r2
 8001414:	73fb      	strb	r3, [r7, #15]
	for (uint32_t i = 0; i < n; ++i)
 8001416:	68bb      	ldr	r3, [r7, #8]
 8001418:	3301      	adds	r3, #1
 800141a:	60bb      	str	r3, [r7, #8]
 800141c:	68ba      	ldr	r2, [r7, #8]
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	429a      	cmp	r2, r3
 8001422:	d3f1      	bcc.n	8001408 <xor_bit_reduce_bytes+0x14>
	x ^= (uint8_t) (x >> 4);
 8001424:	7bfb      	ldrb	r3, [r7, #15]
 8001426:	091b      	lsrs	r3, r3, #4
 8001428:	b2da      	uxtb	r2, r3
 800142a:	7bfb      	ldrb	r3, [r7, #15]
 800142c:	4053      	eors	r3, r2
 800142e:	73fb      	strb	r3, [r7, #15]
	x ^= (uint8_t) (x >> 2);
 8001430:	7bfb      	ldrb	r3, [r7, #15]
 8001432:	089b      	lsrs	r3, r3, #2
 8001434:	b2da      	uxtb	r2, r3
 8001436:	7bfb      	ldrb	r3, [r7, #15]
 8001438:	4053      	eors	r3, r2
 800143a:	73fb      	strb	r3, [r7, #15]
	x ^= (uint8_t) (x >> 1);
 800143c:	7bfb      	ldrb	r3, [r7, #15]
 800143e:	085b      	lsrs	r3, r3, #1
 8001440:	b2da      	uxtb	r2, r3
 8001442:	7bfb      	ldrb	r3, [r7, #15]
 8001444:	4053      	eors	r3, r2
 8001446:	73fb      	strb	r3, [r7, #15]
	return (uint8_t) (x & 0x1);
 8001448:	7bfb      	ldrb	r3, [r7, #15]
 800144a:	f003 0301 	and.w	r3, r3, #1
 800144e:	b2db      	uxtb	r3, r3
}
 8001450:	4618      	mov	r0, r3
 8001452:	3714      	adds	r7, #20
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr

0800145c <set_parity_bit>:
		uint32_t parity_index) {
 800145c:	b580      	push	{r7, lr}
 800145e:	b084      	sub	sp, #16
 8001460:	af00      	add	r7, sp, #0
 8001462:	60f8      	str	r0, [r7, #12]
 8001464:	60b9      	str	r1, [r7, #8]
 8001466:	607a      	str	r2, [r7, #4]
 8001468:	603b      	str	r3, [r7, #0]
	if (!raw)
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d102      	bne.n	8001476 <set_parity_bit+0x1a>
		return -1;
 8001470:	f04f 33ff 	mov.w	r3, #4294967295
 8001474:	e010      	b.n	8001498 <set_parity_bit+0x3c>
	raw[parity_index] = (uint8_t) (xor_bit_reduce_bytes(raw + start, count)
 8001476:	68fa      	ldr	r2, [r7, #12]
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	4413      	add	r3, r2
 800147c:	6879      	ldr	r1, [r7, #4]
 800147e:	4618      	mov	r0, r3
 8001480:	f7ff ffb8 	bl	80013f4 <xor_bit_reduce_bytes>
 8001484:	4603      	mov	r3, r0
 8001486:	4619      	mov	r1, r3
 8001488:	68fa      	ldr	r2, [r7, #12]
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	4413      	add	r3, r2
 800148e:	f001 0201 	and.w	r2, r1, #1
 8001492:	b2d2      	uxtb	r2, r2
 8001494:	701a      	strb	r2, [r3, #0]
	return 0;
 8001496:	2300      	movs	r3, #0
}
 8001498:	4618      	mov	r0, r3
 800149a:	3710      	adds	r7, #16
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}

080014a0 <resp_init>:
static inline void resp_init(uint8_t *raw, resp_msg_type_t type) {
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	460b      	mov	r3, r1
 80014aa:	70fb      	strb	r3, [r7, #3]
	raw[0] = RESP_HEADER;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	22ab      	movs	r2, #171	@ 0xab
 80014b0:	701a      	strb	r2, [r3, #0]
	raw[1] = (uint8_t) type;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	3301      	adds	r3, #1
 80014b6:	78fa      	ldrb	r2, [r7, #3]
 80014b8:	701a      	strb	r2, [r3, #0]
}
 80014ba:	bf00      	nop
 80014bc:	370c      	adds	r7, #12
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr

080014c6 <resp_set_tail>:
static inline void resp_set_tail(uint8_t *raw, uint32_t tail_index) {
 80014c6:	b480      	push	{r7}
 80014c8:	b083      	sub	sp, #12
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	6078      	str	r0, [r7, #4]
 80014ce:	6039      	str	r1, [r7, #0]
	raw[tail_index] = RESP_TAIL;
 80014d0:	687a      	ldr	r2, [r7, #4]
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	4413      	add	r3, r2
 80014d6:	2254      	movs	r2, #84	@ 0x54
 80014d8:	701a      	strb	r2, [r3, #0]
}
 80014da:	bf00      	nop
 80014dc:	370c      	adds	r7, #12
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr

080014e6 <parity_set_bit_1N>:
		uint32_t parity_index) {
 80014e6:	b580      	push	{r7, lr}
 80014e8:	b084      	sub	sp, #16
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	60f8      	str	r0, [r7, #12]
 80014ee:	60b9      	str	r1, [r7, #8]
 80014f0:	607a      	str	r2, [r7, #4]
	return set_parity_bit(raw, 1, last_index, parity_index);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	68ba      	ldr	r2, [r7, #8]
 80014f6:	2101      	movs	r1, #1
 80014f8:	68f8      	ldr	r0, [r7, #12]
 80014fa:	f7ff ffaf 	bl	800145c <set_parity_bit>
 80014fe:	4603      	mov	r3, r0
}
 8001500:	4618      	mov	r0, r3
 8001502:	3710      	adds	r7, #16
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}

08001508 <move_queue_status_resp_encoder>:
			in ? in->pidErrZ : 0, in ? in->pctX : 0, in ? in->pctY : 0,
			in ? in->pctZ : 0 };
	return xor_bit_reduce_bytes(b, 9);
}
int move_queue_status_resp_encoder(const move_queue_status_resp_t *in,
		uint8_t *raw, uint32_t len) {
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	60f8      	str	r0, [r7, #12]
 8001510:	60b9      	str	r1, [r7, #8]
 8001512:	607a      	str	r2, [r7, #4]
	if (!raw || !in || len < 12)
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d005      	beq.n	8001526 <move_queue_status_resp_encoder+0x1e>
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d002      	beq.n	8001526 <move_queue_status_resp_encoder+0x1e>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2b0b      	cmp	r3, #11
 8001524:	d802      	bhi.n	800152c <move_queue_status_resp_encoder+0x24>
		return PROTO_ERR_ARG;
 8001526:	f04f 33ff 	mov.w	r3, #4294967295
 800152a:	e035      	b.n	8001598 <move_queue_status_resp_encoder+0x90>
	resp_init(raw, RESP_MOVE_QUEUE_STATUS);
 800152c:	2102      	movs	r1, #2
 800152e:	68b8      	ldr	r0, [r7, #8]
 8001530:	f7ff ffb6 	bl	80014a0 <resp_init>
	raw[2] = in->frameId;
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	3302      	adds	r3, #2
 8001538:	68fa      	ldr	r2, [r7, #12]
 800153a:	7812      	ldrb	r2, [r2, #0]
 800153c:	701a      	strb	r2, [r3, #0]
	raw[3] = in->status;
 800153e:	68bb      	ldr	r3, [r7, #8]
 8001540:	3303      	adds	r3, #3
 8001542:	68fa      	ldr	r2, [r7, #12]
 8001544:	7852      	ldrb	r2, [r2, #1]
 8001546:	701a      	strb	r2, [r3, #0]
	raw[4] = in->pidErrX;
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	3304      	adds	r3, #4
 800154c:	68fa      	ldr	r2, [r7, #12]
 800154e:	7892      	ldrb	r2, [r2, #2]
 8001550:	701a      	strb	r2, [r3, #0]
	raw[5] = in->pidErrY;
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	3305      	adds	r3, #5
 8001556:	68fa      	ldr	r2, [r7, #12]
 8001558:	78d2      	ldrb	r2, [r2, #3]
 800155a:	701a      	strb	r2, [r3, #0]
	raw[6] = in->pidErrZ;
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	3306      	adds	r3, #6
 8001560:	68fa      	ldr	r2, [r7, #12]
 8001562:	7912      	ldrb	r2, [r2, #4]
 8001564:	701a      	strb	r2, [r3, #0]
	raw[7] = in->pctX;
 8001566:	68bb      	ldr	r3, [r7, #8]
 8001568:	3307      	adds	r3, #7
 800156a:	68fa      	ldr	r2, [r7, #12]
 800156c:	7952      	ldrb	r2, [r2, #5]
 800156e:	701a      	strb	r2, [r3, #0]
	raw[8] = in->pctY;
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	3308      	adds	r3, #8
 8001574:	68fa      	ldr	r2, [r7, #12]
 8001576:	7992      	ldrb	r2, [r2, #6]
 8001578:	701a      	strb	r2, [r3, #0]
	raw[9] = in->pctZ;
 800157a:	68bb      	ldr	r3, [r7, #8]
 800157c:	3309      	adds	r3, #9
 800157e:	68fa      	ldr	r2, [r7, #12]
 8001580:	79d2      	ldrb	r2, [r2, #7]
 8001582:	701a      	strb	r2, [r3, #0]
	parity_set_bit_1N(raw, 9, 10);
 8001584:	220a      	movs	r2, #10
 8001586:	2109      	movs	r1, #9
 8001588:	68b8      	ldr	r0, [r7, #8]
 800158a:	f7ff ffac 	bl	80014e6 <parity_set_bit_1N>
	resp_set_tail(raw, 11);
 800158e:	210b      	movs	r1, #11
 8001590:	68b8      	ldr	r0, [r7, #8]
 8001592:	f7ff ff98 	bl	80014c6 <resp_set_tail>
	return PROTO_OK;
 8001596:	2300      	movs	r3, #0
}
 8001598:	4618      	mov	r0, r3
 800159a:	3710      	adds	r7, #16
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}

080015a0 <be32_write>:
static inline void be32_write(uint8_t *p, uint32_t v) {
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	6039      	str	r1, [r7, #0]
	p[0] = (uint8_t) (v >> 24);
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	0e1b      	lsrs	r3, r3, #24
 80015ae:	b2da      	uxtb	r2, r3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	701a      	strb	r2, [r3, #0]
	p[1] = (uint8_t) (v >> 16);
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	0c1a      	lsrs	r2, r3, #16
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	3301      	adds	r3, #1
 80015bc:	b2d2      	uxtb	r2, r2
 80015be:	701a      	strb	r2, [r3, #0]
	p[2] = (uint8_t) (v >> 8);
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	0a1a      	lsrs	r2, r3, #8
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	3302      	adds	r3, #2
 80015c8:	b2d2      	uxtb	r2, r2
 80015ca:	701a      	strb	r2, [r3, #0]
	p[3] = (uint8_t) v;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	3303      	adds	r3, #3
 80015d0:	683a      	ldr	r2, [r7, #0]
 80015d2:	b2d2      	uxtb	r2, r2
 80015d4:	701a      	strb	r2, [r3, #0]
}
 80015d6:	bf00      	nop
 80015d8:	370c      	adds	r7, #12
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr

080015e2 <resp_init>:
static inline void resp_init(uint8_t *raw, resp_msg_type_t type) {
 80015e2:	b480      	push	{r7}
 80015e4:	b083      	sub	sp, #12
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	6078      	str	r0, [r7, #4]
 80015ea:	460b      	mov	r3, r1
 80015ec:	70fb      	strb	r3, [r7, #3]
	raw[0] = RESP_HEADER;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	22ab      	movs	r2, #171	@ 0xab
 80015f2:	701a      	strb	r2, [r3, #0]
	raw[1] = (uint8_t) type;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	3301      	adds	r3, #1
 80015f8:	78fa      	ldrb	r2, [r7, #3]
 80015fa:	701a      	strb	r2, [r3, #0]
}
 80015fc:	bf00      	nop
 80015fe:	370c      	adds	r7, #12
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr

08001608 <resp_set_tail>:
static inline void resp_set_tail(uint8_t *raw, uint32_t tail_index) {
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	6039      	str	r1, [r7, #0]
	raw[tail_index] = RESP_TAIL;
 8001612:	687a      	ldr	r2, [r7, #4]
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	4413      	add	r3, r2
 8001618:	2254      	movs	r2, #84	@ 0x54
 800161a:	701a      	strb	r2, [r3, #0]
}
 800161c:	bf00      	nop
 800161e:	370c      	adds	r7, #12
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr

08001628 <set_origin_resp_encoder>:
#include "Protocol/Responses/set_origin_response.h"

int set_origin_resp_encoder(const set_origin_resp_t *in, uint8_t *raw, uint32_t len) {
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
 800162e:	60f8      	str	r0, [r7, #12]
 8001630:	60b9      	str	r1, [r7, #8]
 8001632:	607a      	str	r2, [r7, #4]
    if (!raw || !in || len < 16) return PROTO_ERR_ARG;
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d005      	beq.n	8001646 <set_origin_resp_encoder+0x1e>
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d002      	beq.n	8001646 <set_origin_resp_encoder+0x1e>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2b0f      	cmp	r3, #15
 8001644:	d802      	bhi.n	800164c <set_origin_resp_encoder+0x24>
 8001646:	f04f 33ff 	mov.w	r3, #4294967295
 800164a:	e026      	b.n	800169a <set_origin_resp_encoder+0x72>
    resp_init(raw, RESP_SET_ORIGIN);
 800164c:	2124      	movs	r1, #36	@ 0x24
 800164e:	68b8      	ldr	r0, [r7, #8]
 8001650:	f7ff ffc7 	bl	80015e2 <resp_init>
    raw[2] = in->frameId;
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	3302      	adds	r3, #2
 8001658:	68fa      	ldr	r2, [r7, #12]
 800165a:	7812      	ldrb	r2, [r2, #0]
 800165c:	701a      	strb	r2, [r3, #0]
    be32_write(&raw[3], (uint32_t)in->x0);
 800165e:	68bb      	ldr	r3, [r7, #8]
 8001660:	1cda      	adds	r2, r3, #3
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	4619      	mov	r1, r3
 8001668:	4610      	mov	r0, r2
 800166a:	f7ff ff99 	bl	80015a0 <be32_write>
    be32_write(&raw[7], (uint32_t)in->y0);
 800166e:	68bb      	ldr	r3, [r7, #8]
 8001670:	1dda      	adds	r2, r3, #7
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	4619      	mov	r1, r3
 8001678:	4610      	mov	r0, r2
 800167a:	f7ff ff91 	bl	80015a0 <be32_write>
    be32_write(&raw[11], (uint32_t)in->z0);
 800167e:	68bb      	ldr	r3, [r7, #8]
 8001680:	f103 020b 	add.w	r2, r3, #11
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	4619      	mov	r1, r3
 800168a:	4610      	mov	r0, r2
 800168c:	f7ff ff88 	bl	80015a0 <be32_write>
    resp_set_tail(raw, 15);
 8001690:	210f      	movs	r1, #15
 8001692:	68b8      	ldr	r0, [r7, #8]
 8001694:	f7ff ffb8 	bl	8001608 <resp_set_tail>
    return PROTO_OK;
 8001698:	2300      	movs	r3, #0
}
 800169a:	4618      	mov	r0, r3
 800169c:	3710      	adds	r7, #16
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}

080016a2 <resp_init>:
static inline void resp_init(uint8_t *raw, resp_msg_type_t type) {
 80016a2:	b480      	push	{r7}
 80016a4:	b083      	sub	sp, #12
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	6078      	str	r0, [r7, #4]
 80016aa:	460b      	mov	r3, r1
 80016ac:	70fb      	strb	r3, [r7, #3]
	raw[0] = RESP_HEADER;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	22ab      	movs	r2, #171	@ 0xab
 80016b2:	701a      	strb	r2, [r3, #0]
	raw[1] = (uint8_t) type;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	3301      	adds	r3, #1
 80016b8:	78fa      	ldrb	r2, [r7, #3]
 80016ba:	701a      	strb	r2, [r3, #0]
}
 80016bc:	bf00      	nop
 80016be:	370c      	adds	r7, #12
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr

080016c8 <resp_set_tail>:
static inline void resp_set_tail(uint8_t *raw, uint32_t tail_index) {
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	6039      	str	r1, [r7, #0]
	raw[tail_index] = RESP_TAIL;
 80016d2:	687a      	ldr	r2, [r7, #4]
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	4413      	add	r3, r2
 80016d8:	2254      	movs	r2, #84	@ 0x54
 80016da:	701a      	strb	r2, [r3, #0]
}
 80016dc:	bf00      	nop
 80016de:	370c      	adds	r7, #12
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr

080016e8 <start_move_resp_encoder>:
		return st;
	out->frameId = raw[2];
	return PROTO_OK;
}
int start_move_resp_encoder(const start_move_resp_t *in, uint8_t *raw,
		uint32_t len) {
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	60f8      	str	r0, [r7, #12]
 80016f0:	60b9      	str	r1, [r7, #8]
 80016f2:	607a      	str	r2, [r7, #4]
	if (!raw || !in || len < 4)
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d005      	beq.n	8001706 <start_move_resp_encoder+0x1e>
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d002      	beq.n	8001706 <start_move_resp_encoder+0x1e>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2b03      	cmp	r3, #3
 8001704:	d802      	bhi.n	800170c <start_move_resp_encoder+0x24>
		return PROTO_ERR_ARG;
 8001706:	f04f 33ff 	mov.w	r3, #4294967295
 800170a:	e00d      	b.n	8001728 <start_move_resp_encoder+0x40>
	resp_init(raw, RESP_START_MOVE);
 800170c:	2103      	movs	r1, #3
 800170e:	68b8      	ldr	r0, [r7, #8]
 8001710:	f7ff ffc7 	bl	80016a2 <resp_init>
	raw[2] = in->frameId;
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	3302      	adds	r3, #2
 8001718:	68fa      	ldr	r2, [r7, #12]
 800171a:	7812      	ldrb	r2, [r2, #0]
 800171c:	701a      	strb	r2, [r3, #0]
	resp_set_tail(raw, 3);
 800171e:	2103      	movs	r1, #3
 8001720:	68b8      	ldr	r0, [r7, #8]
 8001722:	f7ff ffd1 	bl	80016c8 <resp_set_tail>
	return PROTO_OK;
 8001726:	2300      	movs	r3, #0
}
 8001728:	4618      	mov	r0, r3
 800172a:	3710      	adds	r7, #16
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}

08001730 <resp_fifo_create>:
struct response_fifo_s {
    node_t *head, *tail;
    int count;
};

response_fifo_t* resp_fifo_create(void) {
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
    return (response_fifo_t*)calloc(1, sizeof(response_fifo_t));
 8001734:	210c      	movs	r1, #12
 8001736:	2001      	movs	r0, #1
 8001738:	f00d fbfa 	bl	800ef30 <calloc>
 800173c:	4603      	mov	r3, r0
}
 800173e:	4618      	mov	r0, r3
 8001740:	bd80      	pop	{r7, pc}

08001742 <resp_fifo_push>:
        free(n);
    }
    free(q);
}

int resp_fifo_push(response_fifo_t *q, const uint8_t *frame, uint32_t len) {
 8001742:	b580      	push	{r7, lr}
 8001744:	b086      	sub	sp, #24
 8001746:	af00      	add	r7, sp, #0
 8001748:	60f8      	str	r0, [r7, #12]
 800174a:	60b9      	str	r1, [r7, #8]
 800174c:	607a      	str	r2, [r7, #4]
    if (!q || !frame || len == 0) return PROTO_ERR_ARG;
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d005      	beq.n	8001760 <resp_fifo_push+0x1e>
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d002      	beq.n	8001760 <resp_fifo_push+0x1e>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d102      	bne.n	8001766 <resp_fifo_push+0x24>
 8001760:	f04f 33ff 	mov.w	r3, #4294967295
 8001764:	e03d      	b.n	80017e2 <resp_fifo_push+0xa0>
    node_t *n = (node_t*)malloc(sizeof(*n));
 8001766:	200c      	movs	r0, #12
 8001768:	f00d fbfe 	bl	800ef68 <malloc>
 800176c:	4603      	mov	r3, r0
 800176e:	617b      	str	r3, [r7, #20]
    if (!n) return PROTO_ERR_ALLOC;
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d102      	bne.n	800177c <resp_fifo_push+0x3a>
 8001776:	f06f 0302 	mvn.w	r3, #2
 800177a:	e032      	b.n	80017e2 <resp_fifo_push+0xa0>
    n->buf = (uint8_t*)malloc(len);
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f00d fbf3 	bl	800ef68 <malloc>
 8001782:	4603      	mov	r3, r0
 8001784:	461a      	mov	r2, r3
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	601a      	str	r2, [r3, #0]
    if (!n->buf) { free(n); return PROTO_ERR_ALLOC; }
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d105      	bne.n	800179e <resp_fifo_push+0x5c>
 8001792:	6978      	ldr	r0, [r7, #20]
 8001794:	f00d fbf0 	bl	800ef78 <free>
 8001798:	f06f 0302 	mvn.w	r3, #2
 800179c:	e021      	b.n	80017e2 <resp_fifo_push+0xa0>
    memcpy(n->buf, frame, len);
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	687a      	ldr	r2, [r7, #4]
 80017a4:	68b9      	ldr	r1, [r7, #8]
 80017a6:	4618      	mov	r0, r3
 80017a8:	f00e f821 	bl	800f7ee <memcpy>
    n->len = len;
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	687a      	ldr	r2, [r7, #4]
 80017b0:	605a      	str	r2, [r3, #4]
    n->next = NULL;
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	2200      	movs	r2, #0
 80017b6:	609a      	str	r2, [r3, #8]
    if (q->tail) q->tail->next = n; else q->head = n;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d004      	beq.n	80017ca <resp_fifo_push+0x88>
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	697a      	ldr	r2, [r7, #20]
 80017c6:	609a      	str	r2, [r3, #8]
 80017c8:	e002      	b.n	80017d0 <resp_fifo_push+0x8e>
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	697a      	ldr	r2, [r7, #20]
 80017ce:	601a      	str	r2, [r3, #0]
    q->tail = n;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	697a      	ldr	r2, [r7, #20]
 80017d4:	605a      	str	r2, [r3, #4]
    q->count++;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	1c5a      	adds	r2, r3, #1
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	609a      	str	r2, [r3, #8]
    return PROTO_OK;
 80017e0:	2300      	movs	r3, #0
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3718      	adds	r7, #24
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}

080017ea <resp_fifo_pop>:

int resp_fifo_pop(response_fifo_t *q, uint8_t *out, uint32_t max_len) {
 80017ea:	b580      	push	{r7, lr}
 80017ec:	b086      	sub	sp, #24
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	60f8      	str	r0, [r7, #12]
 80017f2:	60b9      	str	r1, [r7, #8]
 80017f4:	607a      	str	r2, [r7, #4]
    if (!q || !q->head || !out) return 0;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d006      	beq.n	800180a <resp_fifo_pop+0x20>
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d002      	beq.n	800180a <resp_fifo_pop+0x20>
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d101      	bne.n	800180e <resp_fifo_pop+0x24>
 800180a:	2300      	movs	r3, #0
 800180c:	e02e      	b.n	800186c <resp_fifo_pop+0x82>
    node_t *n = q->head;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	617b      	str	r3, [r7, #20]
    if (n->len > max_len) return PROTO_ERR_RANGE;
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	687a      	ldr	r2, [r7, #4]
 800181a:	429a      	cmp	r2, r3
 800181c:	d202      	bcs.n	8001824 <resp_fifo_pop+0x3a>
 800181e:	f06f 0303 	mvn.w	r3, #3
 8001822:	e023      	b.n	800186c <resp_fifo_pop+0x82>
    memcpy(out, n->buf, n->len);
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	6819      	ldr	r1, [r3, #0]
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	461a      	mov	r2, r3
 800182e:	68b8      	ldr	r0, [r7, #8]
 8001830:	f00d ffdd 	bl	800f7ee <memcpy>
    int ret = (int)n->len;
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	613b      	str	r3, [r7, #16]
    q->head = n->next;
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	689a      	ldr	r2, [r3, #8]
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	601a      	str	r2, [r3, #0]
    if (!q->head) q->tail = NULL;
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d102      	bne.n	8001850 <resp_fifo_pop+0x66>
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	2200      	movs	r2, #0
 800184e:	605a      	str	r2, [r3, #4]
    q->count--;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	1e5a      	subs	r2, r3, #1
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	609a      	str	r2, [r3, #8]
    free(n->buf);
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4618      	mov	r0, r3
 8001860:	f00d fb8a 	bl	800ef78 <free>
    free(n);
 8001864:	6978      	ldr	r0, [r7, #20]
 8001866:	f00d fb87 	bl	800ef78 <free>
    return ret;
 800186a:	693b      	ldr	r3, [r7, #16]
}
 800186c:	4618      	mov	r0, r3
 800186e:	3718      	adds	r7, #24
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}

08001874 <router_init>:
int resp_fifo_count(const response_fifo_t *q) { return q ? q->count : 0; }

// ---------- Router mínimo ----------
static router_handlers_t g_handlers;  // cópia local dos handlers

void router_init(router_t *r, response_fifo_t *resp_fifo, const router_handlers_t *h) {
 8001874:	b5b0      	push	{r4, r5, r7, lr}
 8001876:	b084      	sub	sp, #16
 8001878:	af00      	add	r7, sp, #0
 800187a:	60f8      	str	r0, [r7, #12]
 800187c:	60b9      	str	r1, [r7, #8]
 800187e:	607a      	str	r2, [r7, #4]
    if (!r) return;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d01c      	beq.n	80018c0 <router_init+0x4c>
    memset(r, 0, sizeof(*r));
 8001886:	2248      	movs	r2, #72	@ 0x48
 8001888:	2100      	movs	r1, #0
 800188a:	68f8      	ldr	r0, [r7, #12]
 800188c:	f00d ff24 	bl	800f6d8 <memset>
    r->resp = resp_fifo;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	68ba      	ldr	r2, [r7, #8]
 8001894:	645a      	str	r2, [r3, #68]	@ 0x44
    memset(&g_handlers, 0, sizeof g_handlers);
 8001896:	2230      	movs	r2, #48	@ 0x30
 8001898:	2100      	movs	r1, #0
 800189a:	480b      	ldr	r0, [pc, #44]	@ (80018c8 <router_init+0x54>)
 800189c:	f00d ff1c 	bl	800f6d8 <memset>
    if (h) g_handlers = *h;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d00d      	beq.n	80018c2 <router_init+0x4e>
 80018a6:	4a08      	ldr	r2, [pc, #32]	@ (80018c8 <router_init+0x54>)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	4614      	mov	r4, r2
 80018ac:	461d      	mov	r5, r3
 80018ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018b6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80018ba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80018be:	e000      	b.n	80018c2 <router_init+0x4e>
    if (!r) return;
 80018c0:	bf00      	nop
}
 80018c2:	3710      	adds	r7, #16
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bdb0      	pop	{r4, r5, r7, pc}
 80018c8:	2000009c 	.word	0x2000009c

080018cc <dispatch>:

static void dispatch(router_t *r, const uint8_t *f, uint32_t len) {
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b086      	sub	sp, #24
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	60f8      	str	r0, [r7, #12]
 80018d4:	60b9      	str	r1, [r7, #8]
 80018d6:	607a      	str	r2, [r7, #4]
    if (!r || !f || len < 4) return;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	f000 80ee 	beq.w	8001abc <dispatch+0x1f0>
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	f000 80ea 	beq.w	8001abc <dispatch+0x1f0>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2b03      	cmp	r3, #3
 80018ec:	f240 80e6 	bls.w	8001abc <dispatch+0x1f0>
    uint8_t type = f[1];
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	3301      	adds	r3, #1
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	75fb      	strb	r3, [r7, #23]

    // Helper pra reduzir ruído
    #define CALL(h) do{ if (g_handlers.h) g_handlers.h(r, f, len); }while(0)

    switch (type) {
 80018f8:	7dfb      	ldrb	r3, [r7, #23]
 80018fa:	2b26      	cmp	r3, #38	@ 0x26
 80018fc:	dc56      	bgt.n	80019ac <dispatch+0xe0>
 80018fe:	2b00      	cmp	r3, #0
 8001900:	f340 80de 	ble.w	8001ac0 <dispatch+0x1f4>
 8001904:	3b01      	subs	r3, #1
 8001906:	2b25      	cmp	r3, #37	@ 0x25
 8001908:	f200 80da 	bhi.w	8001ac0 <dispatch+0x1f4>
 800190c:	a201      	add	r2, pc, #4	@ (adr r2, 8001914 <dispatch+0x48>)
 800190e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001912:	bf00      	nop
 8001914:	080019b3 	.word	0x080019b3
 8001918:	080019cb 	.word	0x080019cb
 800191c:	080019e1 	.word	0x080019e1
 8001920:	080019f7 	.word	0x080019f7
 8001924:	08001a0d 	.word	0x08001a0d
 8001928:	08001a23 	.word	0x08001a23
 800192c:	08001a39 	.word	0x08001a39
 8001930:	08001ac1 	.word	0x08001ac1
 8001934:	08001ac1 	.word	0x08001ac1
 8001938:	08001ac1 	.word	0x08001ac1
 800193c:	08001ac1 	.word	0x08001ac1
 8001940:	08001ac1 	.word	0x08001ac1
 8001944:	08001ac1 	.word	0x08001ac1
 8001948:	08001ac1 	.word	0x08001ac1
 800194c:	08001ac1 	.word	0x08001ac1
 8001950:	08001ac1 	.word	0x08001ac1
 8001954:	08001ac1 	.word	0x08001ac1
 8001958:	08001ac1 	.word	0x08001ac1
 800195c:	08001ac1 	.word	0x08001ac1
 8001960:	08001ac1 	.word	0x08001ac1
 8001964:	08001ac1 	.word	0x08001ac1
 8001968:	08001ac1 	.word	0x08001ac1
 800196c:	08001ac1 	.word	0x08001ac1
 8001970:	08001ac1 	.word	0x08001ac1
 8001974:	08001ac1 	.word	0x08001ac1
 8001978:	08001ac1 	.word	0x08001ac1
 800197c:	08001ac1 	.word	0x08001ac1
 8001980:	08001ac1 	.word	0x08001ac1
 8001984:	08001ac1 	.word	0x08001ac1
 8001988:	08001ac1 	.word	0x08001ac1
 800198c:	08001ac1 	.word	0x08001ac1
 8001990:	08001a4f 	.word	0x08001a4f
 8001994:	08001ac1 	.word	0x08001ac1
 8001998:	08001ac1 	.word	0x08001ac1
 800199c:	08001ac1 	.word	0x08001ac1
 80019a0:	08001a65 	.word	0x08001a65
 80019a4:	08001a7b 	.word	0x08001a7b
 80019a8:	08001a91 	.word	0x08001a91
 80019ac:	2b68      	cmp	r3, #104	@ 0x68
 80019ae:	d07a      	beq.n	8001aa6 <dispatch+0x1da>
        case REQ_STM32_STATUS:       CALL(on_fpga_status);        break;
        case REQ_SET_ORIGIN:         CALL(on_set_origin);         break;
        case REQ_ENCODER_STATUS:     CALL(on_encoder_status);     break;
        case REQ_SET_MICROSTEPS:     CALL(on_set_microsteps);     break;
        case REQ_TEST_HELLO:         CALL(on_test_hello);         break;
        default: /* desconhecido */  break;
 80019b0:	e086      	b.n	8001ac0 <dispatch+0x1f4>
        case REQ_MOVE_QUEUE_ADD:     CALL(on_move_queue_add);     break;
 80019b2:	4b51      	ldr	r3, [pc, #324]	@ (8001af8 <dispatch+0x22c>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	f000 8084 	beq.w	8001ac4 <dispatch+0x1f8>
 80019bc:	4b4e      	ldr	r3, [pc, #312]	@ (8001af8 <dispatch+0x22c>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	687a      	ldr	r2, [r7, #4]
 80019c2:	68b9      	ldr	r1, [r7, #8]
 80019c4:	68f8      	ldr	r0, [r7, #12]
 80019c6:	4798      	blx	r3
 80019c8:	e07c      	b.n	8001ac4 <dispatch+0x1f8>
        case REQ_MOVE_QUEUE_STATUS:  CALL(on_move_queue_status);  break;
 80019ca:	4b4b      	ldr	r3, [pc, #300]	@ (8001af8 <dispatch+0x22c>)
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d07a      	beq.n	8001ac8 <dispatch+0x1fc>
 80019d2:	4b49      	ldr	r3, [pc, #292]	@ (8001af8 <dispatch+0x22c>)
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	68b9      	ldr	r1, [r7, #8]
 80019da:	68f8      	ldr	r0, [r7, #12]
 80019dc:	4798      	blx	r3
 80019de:	e073      	b.n	8001ac8 <dispatch+0x1fc>
        case REQ_START_MOVE:         CALL(on_start_move);         break;
 80019e0:	4b45      	ldr	r3, [pc, #276]	@ (8001af8 <dispatch+0x22c>)
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d071      	beq.n	8001acc <dispatch+0x200>
 80019e8:	4b43      	ldr	r3, [pc, #268]	@ (8001af8 <dispatch+0x22c>)
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	687a      	ldr	r2, [r7, #4]
 80019ee:	68b9      	ldr	r1, [r7, #8]
 80019f0:	68f8      	ldr	r0, [r7, #12]
 80019f2:	4798      	blx	r3
 80019f4:	e06a      	b.n	8001acc <dispatch+0x200>
        case REQ_MOVE_HOME:          CALL(on_move_home);          break;
 80019f6:	4b40      	ldr	r3, [pc, #256]	@ (8001af8 <dispatch+0x22c>)
 80019f8:	68db      	ldr	r3, [r3, #12]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d068      	beq.n	8001ad0 <dispatch+0x204>
 80019fe:	4b3e      	ldr	r3, [pc, #248]	@ (8001af8 <dispatch+0x22c>)
 8001a00:	68db      	ldr	r3, [r3, #12]
 8001a02:	687a      	ldr	r2, [r7, #4]
 8001a04:	68b9      	ldr	r1, [r7, #8]
 8001a06:	68f8      	ldr	r0, [r7, #12]
 8001a08:	4798      	blx	r3
 8001a0a:	e061      	b.n	8001ad0 <dispatch+0x204>
        case REQ_MOVE_PROBE_LEVEL:   CALL(on_move_probe_level);   break;
 8001a0c:	4b3a      	ldr	r3, [pc, #232]	@ (8001af8 <dispatch+0x22c>)
 8001a0e:	691b      	ldr	r3, [r3, #16]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d05f      	beq.n	8001ad4 <dispatch+0x208>
 8001a14:	4b38      	ldr	r3, [pc, #224]	@ (8001af8 <dispatch+0x22c>)
 8001a16:	691b      	ldr	r3, [r3, #16]
 8001a18:	687a      	ldr	r2, [r7, #4]
 8001a1a:	68b9      	ldr	r1, [r7, #8]
 8001a1c:	68f8      	ldr	r0, [r7, #12]
 8001a1e:	4798      	blx	r3
 8001a20:	e058      	b.n	8001ad4 <dispatch+0x208>
        case REQ_MOVE_END:           CALL(on_move_end);           break;
 8001a22:	4b35      	ldr	r3, [pc, #212]	@ (8001af8 <dispatch+0x22c>)
 8001a24:	695b      	ldr	r3, [r3, #20]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d056      	beq.n	8001ad8 <dispatch+0x20c>
 8001a2a:	4b33      	ldr	r3, [pc, #204]	@ (8001af8 <dispatch+0x22c>)
 8001a2c:	695b      	ldr	r3, [r3, #20]
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	68b9      	ldr	r1, [r7, #8]
 8001a32:	68f8      	ldr	r0, [r7, #12]
 8001a34:	4798      	blx	r3
 8001a36:	e04f      	b.n	8001ad8 <dispatch+0x20c>
        case REQ_LED_CTRL:           CALL(on_led_ctrl);           break;
 8001a38:	4b2f      	ldr	r3, [pc, #188]	@ (8001af8 <dispatch+0x22c>)
 8001a3a:	699b      	ldr	r3, [r3, #24]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d04d      	beq.n	8001adc <dispatch+0x210>
 8001a40:	4b2d      	ldr	r3, [pc, #180]	@ (8001af8 <dispatch+0x22c>)
 8001a42:	699b      	ldr	r3, [r3, #24]
 8001a44:	687a      	ldr	r2, [r7, #4]
 8001a46:	68b9      	ldr	r1, [r7, #8]
 8001a48:	68f8      	ldr	r0, [r7, #12]
 8001a4a:	4798      	blx	r3
 8001a4c:	e046      	b.n	8001adc <dispatch+0x210>
        case REQ_STM32_STATUS:       CALL(on_fpga_status);        break;
 8001a4e:	4b2a      	ldr	r3, [pc, #168]	@ (8001af8 <dispatch+0x22c>)
 8001a50:	69db      	ldr	r3, [r3, #28]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d044      	beq.n	8001ae0 <dispatch+0x214>
 8001a56:	4b28      	ldr	r3, [pc, #160]	@ (8001af8 <dispatch+0x22c>)
 8001a58:	69db      	ldr	r3, [r3, #28]
 8001a5a:	687a      	ldr	r2, [r7, #4]
 8001a5c:	68b9      	ldr	r1, [r7, #8]
 8001a5e:	68f8      	ldr	r0, [r7, #12]
 8001a60:	4798      	blx	r3
 8001a62:	e03d      	b.n	8001ae0 <dispatch+0x214>
        case REQ_SET_ORIGIN:         CALL(on_set_origin);         break;
 8001a64:	4b24      	ldr	r3, [pc, #144]	@ (8001af8 <dispatch+0x22c>)
 8001a66:	6a1b      	ldr	r3, [r3, #32]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d03b      	beq.n	8001ae4 <dispatch+0x218>
 8001a6c:	4b22      	ldr	r3, [pc, #136]	@ (8001af8 <dispatch+0x22c>)
 8001a6e:	6a1b      	ldr	r3, [r3, #32]
 8001a70:	687a      	ldr	r2, [r7, #4]
 8001a72:	68b9      	ldr	r1, [r7, #8]
 8001a74:	68f8      	ldr	r0, [r7, #12]
 8001a76:	4798      	blx	r3
 8001a78:	e034      	b.n	8001ae4 <dispatch+0x218>
        case REQ_ENCODER_STATUS:     CALL(on_encoder_status);     break;
 8001a7a:	4b1f      	ldr	r3, [pc, #124]	@ (8001af8 <dispatch+0x22c>)
 8001a7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d032      	beq.n	8001ae8 <dispatch+0x21c>
 8001a82:	4b1d      	ldr	r3, [pc, #116]	@ (8001af8 <dispatch+0x22c>)
 8001a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a86:	687a      	ldr	r2, [r7, #4]
 8001a88:	68b9      	ldr	r1, [r7, #8]
 8001a8a:	68f8      	ldr	r0, [r7, #12]
 8001a8c:	4798      	blx	r3
 8001a8e:	e02b      	b.n	8001ae8 <dispatch+0x21c>
        case REQ_SET_MICROSTEPS:     CALL(on_set_microsteps);     break;
 8001a90:	4b19      	ldr	r3, [pc, #100]	@ (8001af8 <dispatch+0x22c>)
 8001a92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d029      	beq.n	8001aec <dispatch+0x220>
 8001a98:	4b17      	ldr	r3, [pc, #92]	@ (8001af8 <dispatch+0x22c>)
 8001a9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a9c:	687a      	ldr	r2, [r7, #4]
 8001a9e:	68b9      	ldr	r1, [r7, #8]
 8001aa0:	68f8      	ldr	r0, [r7, #12]
 8001aa2:	4798      	blx	r3
 8001aa4:	e022      	b.n	8001aec <dispatch+0x220>
        case REQ_TEST_HELLO:         CALL(on_test_hello);         break;
 8001aa6:	4b14      	ldr	r3, [pc, #80]	@ (8001af8 <dispatch+0x22c>)
 8001aa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d020      	beq.n	8001af0 <dispatch+0x224>
 8001aae:	4b12      	ldr	r3, [pc, #72]	@ (8001af8 <dispatch+0x22c>)
 8001ab0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ab2:	687a      	ldr	r2, [r7, #4]
 8001ab4:	68b9      	ldr	r1, [r7, #8]
 8001ab6:	68f8      	ldr	r0, [r7, #12]
 8001ab8:	4798      	blx	r3
 8001aba:	e019      	b.n	8001af0 <dispatch+0x224>
    if (!r || !f || len < 4) return;
 8001abc:	bf00      	nop
 8001abe:	e018      	b.n	8001af2 <dispatch+0x226>
        default: /* desconhecido */  break;
 8001ac0:	bf00      	nop
 8001ac2:	e016      	b.n	8001af2 <dispatch+0x226>
        case REQ_MOVE_QUEUE_ADD:     CALL(on_move_queue_add);     break;
 8001ac4:	bf00      	nop
 8001ac6:	e014      	b.n	8001af2 <dispatch+0x226>
        case REQ_MOVE_QUEUE_STATUS:  CALL(on_move_queue_status);  break;
 8001ac8:	bf00      	nop
 8001aca:	e012      	b.n	8001af2 <dispatch+0x226>
        case REQ_START_MOVE:         CALL(on_start_move);         break;
 8001acc:	bf00      	nop
 8001ace:	e010      	b.n	8001af2 <dispatch+0x226>
        case REQ_MOVE_HOME:          CALL(on_move_home);          break;
 8001ad0:	bf00      	nop
 8001ad2:	e00e      	b.n	8001af2 <dispatch+0x226>
        case REQ_MOVE_PROBE_LEVEL:   CALL(on_move_probe_level);   break;
 8001ad4:	bf00      	nop
 8001ad6:	e00c      	b.n	8001af2 <dispatch+0x226>
        case REQ_MOVE_END:           CALL(on_move_end);           break;
 8001ad8:	bf00      	nop
 8001ada:	e00a      	b.n	8001af2 <dispatch+0x226>
        case REQ_LED_CTRL:           CALL(on_led_ctrl);           break;
 8001adc:	bf00      	nop
 8001ade:	e008      	b.n	8001af2 <dispatch+0x226>
        case REQ_STM32_STATUS:       CALL(on_fpga_status);        break;
 8001ae0:	bf00      	nop
 8001ae2:	e006      	b.n	8001af2 <dispatch+0x226>
        case REQ_SET_ORIGIN:         CALL(on_set_origin);         break;
 8001ae4:	bf00      	nop
 8001ae6:	e004      	b.n	8001af2 <dispatch+0x226>
        case REQ_ENCODER_STATUS:     CALL(on_encoder_status);     break;
 8001ae8:	bf00      	nop
 8001aea:	e002      	b.n	8001af2 <dispatch+0x226>
        case REQ_SET_MICROSTEPS:     CALL(on_set_microsteps);     break;
 8001aec:	bf00      	nop
 8001aee:	e000      	b.n	8001af2 <dispatch+0x226>
        case REQ_TEST_HELLO:         CALL(on_test_hello);         break;
 8001af0:	bf00      	nop
    }
    #undef CALL
}
 8001af2:	3718      	adds	r7, #24
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	2000009c 	.word	0x2000009c

08001afc <router_feed_bytes>:

// Como o app já entrega um frame completo, basta validar header/tail e despachar.
void router_feed_bytes(router_t *r, const uint8_t *data, uint32_t len) {
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	60f8      	str	r0, [r7, #12]
 8001b04:	60b9      	str	r1, [r7, #8]
 8001b06:	607a      	str	r2, [r7, #4]
    if (!r || !data || len < 4) return;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d016      	beq.n	8001b3c <router_feed_bytes+0x40>
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d013      	beq.n	8001b3c <router_feed_bytes+0x40>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2b03      	cmp	r3, #3
 8001b18:	d910      	bls.n	8001b3c <router_feed_bytes+0x40>
    if (data[0] != REQ_HEADER) return;
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	2baa      	cmp	r3, #170	@ 0xaa
 8001b20:	d10e      	bne.n	8001b40 <router_feed_bytes+0x44>
    if (data[len - 1] != REQ_TAIL) return;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	3b01      	subs	r3, #1
 8001b26:	68ba      	ldr	r2, [r7, #8]
 8001b28:	4413      	add	r3, r2
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	2b55      	cmp	r3, #85	@ 0x55
 8001b2e:	d109      	bne.n	8001b44 <router_feed_bytes+0x48>
    dispatch(r, data, len);
 8001b30:	687a      	ldr	r2, [r7, #4]
 8001b32:	68b9      	ldr	r1, [r7, #8]
 8001b34:	68f8      	ldr	r0, [r7, #12]
 8001b36:	f7ff fec9 	bl	80018cc <dispatch>
 8001b3a:	e004      	b.n	8001b46 <router_feed_bytes+0x4a>
    if (!r || !data || len < 4) return;
 8001b3c:	bf00      	nop
 8001b3e:	e002      	b.n	8001b46 <router_feed_bytes+0x4a>
    if (data[0] != REQ_HEADER) return;
 8001b40:	bf00      	nop
 8001b42:	e000      	b.n	8001b46 <router_feed_bytes+0x4a>
    if (data[len - 1] != REQ_TAIL) return;
 8001b44:	bf00      	nop
}
 8001b46:	3710      	adds	r7, #16
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}

08001b4c <home_service_init>:

LOG_SVC_DEFINE(LOG_SVC_HOME, "home");

static home_status_t g_home;

void home_service_init(void) {
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b084      	sub	sp, #16
 8001b50:	af04      	add	r7, sp, #16
	g_home.axis_done_mask = 0;
 8001b52:	4b0b      	ldr	r3, [pc, #44]	@ (8001b80 <home_service_init+0x34>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	701a      	strb	r2, [r3, #0]
	g_home.error_flags = 0;
 8001b58:	4b09      	ldr	r3, [pc, #36]	@ (8001b80 <home_service_init+0x34>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	705a      	strb	r2, [r3, #1]

	LOGT_THIS(LOG_STATE_START, PROTO_OK, "init", "ok");
 8001b5e:	4a09      	ldr	r2, [pc, #36]	@ (8001b84 <home_service_init+0x38>)
 8001b60:	4b09      	ldr	r3, [pc, #36]	@ (8001b88 <home_service_init+0x3c>)
 8001b62:	9302      	str	r3, [sp, #8]
 8001b64:	4b09      	ldr	r3, [pc, #36]	@ (8001b8c <home_service_init+0x40>)
 8001b66:	9301      	str	r3, [sp, #4]
 8001b68:	4b09      	ldr	r3, [pc, #36]	@ (8001b90 <home_service_init+0x44>)
 8001b6a:	9300      	str	r3, [sp, #0]
 8001b6c:	4613      	mov	r3, r2
 8001b6e:	2200      	movs	r2, #0
 8001b70:	2100      	movs	r1, #0
 8001b72:	2003      	movs	r0, #3
 8001b74:	f000 fd3a 	bl	80025ec <log_event_auto>
}
 8001b78:	bf00      	nop
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	200000cc 	.word	0x200000cc
 8001b84:	08010404 	.word	0x08010404
 8001b88:	0801040c 	.word	0x0801040c
 8001b8c:	08010410 	.word	0x08010410
 8001b90:	08010414 	.word	0x08010414

08001b94 <home_on_move_home>:
const home_status_t* home_status_get(void) {
	return &g_home;
}

void home_on_move_home(const uint8_t *frame, uint32_t len) {
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b086      	sub	sp, #24
 8001b98:	af04      	add	r7, sp, #16
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	6039      	str	r1, [r7, #0]
	(void) frame;
	(void) len; /* implementar FSM de homing */

	LOGT_THIS(LOG_STATE_RECEIVED, PROTO_OK, "move_home", "not_implemented");
 8001b9e:	4a08      	ldr	r2, [pc, #32]	@ (8001bc0 <home_on_move_home+0x2c>)
 8001ba0:	4b08      	ldr	r3, [pc, #32]	@ (8001bc4 <home_on_move_home+0x30>)
 8001ba2:	9302      	str	r3, [sp, #8]
 8001ba4:	4b08      	ldr	r3, [pc, #32]	@ (8001bc8 <home_on_move_home+0x34>)
 8001ba6:	9301      	str	r3, [sp, #4]
 8001ba8:	4b08      	ldr	r3, [pc, #32]	@ (8001bcc <home_on_move_home+0x38>)
 8001baa:	9300      	str	r3, [sp, #0]
 8001bac:	4613      	mov	r3, r2
 8001bae:	2200      	movs	r2, #0
 8001bb0:	2101      	movs	r1, #1
 8001bb2:	2003      	movs	r0, #3
 8001bb4:	f000 fd1a 	bl	80025ec <log_event_auto>
}
 8001bb8:	bf00      	nop
 8001bba:	3708      	adds	r7, #8
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	08010404 	.word	0x08010404
 8001bc4:	0801041c 	.word	0x0801041c
 8001bc8:	08010410 	.word	0x08010410
 8001bcc:	0801042c 	.word	0x0801042c

08001bd0 <led_gpio_config_output>:
#else
#define LED_GPIO_ON_LEVEL  GPIO_PIN_RESET
#define LED_GPIO_OFF_LEVEL GPIO_PIN_SET
#endif

static void led_gpio_config_output(const led_channel_state_t *led) {
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b088      	sub	sp, #32
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
    if (!led)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d019      	beq.n	8001c12 <led_gpio_config_output+0x42>
        return;
    GPIO_InitTypeDef gi = {0};
 8001bde:	f107 030c 	add.w	r3, r7, #12
 8001be2:	2200      	movs	r2, #0
 8001be4:	601a      	str	r2, [r3, #0]
 8001be6:	605a      	str	r2, [r3, #4]
 8001be8:	609a      	str	r2, [r3, #8]
 8001bea:	60da      	str	r2, [r3, #12]
 8001bec:	611a      	str	r2, [r3, #16]
    gi.Pin = led->pin;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	889b      	ldrh	r3, [r3, #4]
 8001bf2:	60fb      	str	r3, [r7, #12]
    gi.Mode = GPIO_MODE_OUTPUT_PP;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	613b      	str	r3, [r7, #16]
    gi.Pull = GPIO_NOPULL;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	617b      	str	r3, [r7, #20]
    gi.Speed = GPIO_SPEED_FREQ_LOW;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(led->port, &gi);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f107 020c 	add.w	r2, r7, #12
 8001c08:	4611      	mov	r1, r2
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f005 fb42 	bl	8007294 <HAL_GPIO_Init>
 8001c10:	e000      	b.n	8001c14 <led_gpio_config_output+0x44>
        return;
 8001c12:	bf00      	nop
}
 8001c14:	3720      	adds	r7, #32
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}

08001c1a <led_gpio_config_pwm>:

static void led_gpio_config_pwm(const led_channel_state_t *led) {
 8001c1a:	b580      	push	{r7, lr}
 8001c1c:	b088      	sub	sp, #32
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	6078      	str	r0, [r7, #4]
    if (!led)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d01c      	beq.n	8001c62 <led_gpio_config_pwm+0x48>
        return;
    GPIO_InitTypeDef gi = {0};
 8001c28:	f107 030c 	add.w	r3, r7, #12
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	601a      	str	r2, [r3, #0]
 8001c30:	605a      	str	r2, [r3, #4]
 8001c32:	609a      	str	r2, [r3, #8]
 8001c34:	60da      	str	r2, [r3, #12]
 8001c36:	611a      	str	r2, [r3, #16]
    gi.Pin = led->pin;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	889b      	ldrh	r3, [r3, #4]
 8001c3c:	60fb      	str	r3, [r7, #12]
    gi.Mode = GPIO_MODE_AF_PP;
 8001c3e:	2302      	movs	r3, #2
 8001c40:	613b      	str	r3, [r7, #16]
    gi.Pull = GPIO_NOPULL;
 8001c42:	2300      	movs	r3, #0
 8001c44:	617b      	str	r3, [r7, #20]
    gi.Speed = GPIO_SPEED_FREQ_LOW;
 8001c46:	2300      	movs	r3, #0
 8001c48:	61bb      	str	r3, [r7, #24]
    gi.Alternate = led->alternate;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(led->port, &gi);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f107 020c 	add.w	r2, r7, #12
 8001c58:	4611      	mov	r1, r2
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f005 fb1a 	bl	8007294 <HAL_GPIO_Init>
 8001c60:	e000      	b.n	8001c64 <led_gpio_config_pwm+0x4a>
        return;
 8001c62:	bf00      	nop
}
 8001c64:	3720      	adds	r7, #32
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
	...

08001c6c <led_push_response>:
 *    resposta; em caso negativo, registra o erro e abandona o envio para evitar
 *    inserir dados inválidos na fila.
 *  - Após a codificação, confere o resultado de app_resp_push para sinalizar e
 *    logar falhas na fila de saída (por exemplo, quando estiver cheia).
 */
static void led_push_response(uint8_t frame_id, uint8_t mask, uint8_t status) {
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b088      	sub	sp, #32
 8001c70:	af02      	add	r7, sp, #8
 8001c72:	4603      	mov	r3, r0
 8001c74:	71fb      	strb	r3, [r7, #7]
 8001c76:	460b      	mov	r3, r1
 8001c78:	71bb      	strb	r3, [r7, #6]
 8001c7a:	4613      	mov	r3, r2
 8001c7c:	717b      	strb	r3, [r7, #5]
    uint8_t raw[7];
    led_ctrl_resp_t resp = { frame_id, mask, status };
 8001c7e:	79fb      	ldrb	r3, [r7, #7]
 8001c80:	733b      	strb	r3, [r7, #12]
 8001c82:	79bb      	ldrb	r3, [r7, #6]
 8001c84:	737b      	strb	r3, [r7, #13]
 8001c86:	797b      	ldrb	r3, [r7, #5]
 8001c88:	73bb      	strb	r3, [r7, #14]
    if (led_ctrl_resp_encoder(&resp, raw, sizeof raw) != PROTO_OK) {
 8001c8a:	f107 0110 	add.w	r1, r7, #16
 8001c8e:	f107 030c 	add.w	r3, r7, #12
 8001c92:	2207      	movs	r2, #7
 8001c94:	4618      	mov	r0, r3
 8001c96:	f7ff fa7b 	bl	8001190 <led_ctrl_resp_encoder>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d00c      	beq.n	8001cba <led_push_response+0x4e>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_FRAME, "resp", "failed to encode led ack");
 8001ca0:	4a12      	ldr	r2, [pc, #72]	@ (8001cec <led_push_response+0x80>)
 8001ca2:	4b13      	ldr	r3, [pc, #76]	@ (8001cf0 <led_push_response+0x84>)
 8001ca4:	9301      	str	r3, [sp, #4]
 8001ca6:	4b13      	ldr	r3, [pc, #76]	@ (8001cf4 <led_push_response+0x88>)
 8001ca8:	9300      	str	r3, [sp, #0]
 8001caa:	4613      	mov	r3, r2
 8001cac:	f06f 0201 	mvn.w	r2, #1
 8001cb0:	2164      	movs	r1, #100	@ 0x64
 8001cb2:	2001      	movs	r0, #1
 8001cb4:	f000 fc9a 	bl	80025ec <log_event_auto>
 8001cb8:	e014      	b.n	8001ce4 <led_push_response+0x78>
        return;
    }
    if (app_resp_push(raw, (uint32_t)sizeof raw) != PROTO_OK) {
 8001cba:	f107 0310 	add.w	r3, r7, #16
 8001cbe:	2107      	movs	r1, #7
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f003 fc47 	bl	8005554 <app_resp_push>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d00b      	beq.n	8001ce4 <led_push_response+0x78>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_RANGE, "resp", "failed to queue led ack");
 8001ccc:	4a07      	ldr	r2, [pc, #28]	@ (8001cec <led_push_response+0x80>)
 8001cce:	4b0a      	ldr	r3, [pc, #40]	@ (8001cf8 <led_push_response+0x8c>)
 8001cd0:	9301      	str	r3, [sp, #4]
 8001cd2:	4b08      	ldr	r3, [pc, #32]	@ (8001cf4 <led_push_response+0x88>)
 8001cd4:	9300      	str	r3, [sp, #0]
 8001cd6:	4613      	mov	r3, r2
 8001cd8:	f06f 0203 	mvn.w	r2, #3
 8001cdc:	2164      	movs	r1, #100	@ 0x64
 8001cde:	2001      	movs	r0, #1
 8001ce0:	f000 fc84 	bl	80025ec <log_event_auto>
    }
}
 8001ce4:	3718      	adds	r7, #24
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	08010438 	.word	0x08010438
 8001cf0:	0801043c 	.word	0x0801043c
 8001cf4:	08010458 	.word	0x08010458
 8001cf8:	08010460 	.word	0x08010460

08001cfc <led_timer_get_clock>:

static uint32_t led_timer_get_clock(void) {
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
    uint32_t clk = HAL_RCC_GetPCLK2Freq();
 8001d02:	f007 fa7f 	bl	8009204 <HAL_RCC_GetPCLK2Freq>
 8001d06:	6078      	str	r0, [r7, #4]
#if defined(RCC_CFGR_PPRE2) && defined(RCC_CFGR_PPRE2_DIV1)
    uint32_t presc = (RCC->CFGR & RCC_CFGR_PPRE2);
 8001d08:	4b09      	ldr	r3, [pc, #36]	@ (8001d30 <led_timer_get_clock+0x34>)
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8001d10:	603b      	str	r3, [r7, #0]
    if (presc != RCC_CFGR_PPRE2_DIV1 && presc != 0u) {
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d005      	beq.n	8001d24 <led_timer_get_clock+0x28>
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d002      	beq.n	8001d24 <led_timer_get_clock+0x28>
        clk *= 2u;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	005b      	lsls	r3, r3, #1
 8001d22:	607b      	str	r3, [r7, #4]
    }
#endif
    return clk;
 8001d24:	687b      	ldr	r3, [r7, #4]
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3708      	adds	r7, #8
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	40021000 	.word	0x40021000

08001d34 <led_compute_period_ticks>:
 * ~1,22 kHz (80 MHz / 65 536). Para atingir frequências como 1 Hz ou 0,2 Hz
 * é necessário reduzir o clock efetivo do TIM15 via prescaler (por exemplo,
 * PSC = 7999 → divisor efetivo 8 000 → f_min ≈ 0,15 Hz).
 */

static uint32_t led_compute_period_ticks(uint16_t freq_centi_hz) {
 8001d34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d38:	b094      	sub	sp, #80	@ 0x50
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    if (freq_centi_hz == 0u)
 8001d40:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d101      	bne.n	8001d4a <led_compute_period_ticks+0x16>
        return 0u;
 8001d46:	2300      	movs	r3, #0
 8001d48:	e066      	b.n	8001e18 <led_compute_period_ticks+0xe4>

    uint32_t timer_clk = led_timer_get_clock();
 8001d4a:	f7ff ffd7 	bl	8001cfc <led_timer_get_clock>
 8001d4e:	6478      	str	r0, [r7, #68]	@ 0x44
    uint32_t prescaler = (uint32_t)htim15.Init.Prescaler + 1u;
 8001d50:	4b34      	ldr	r3, [pc, #208]	@ (8001e24 <led_compute_period_ticks+0xf0>)
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	3301      	adds	r3, #1
 8001d56:	643b      	str	r3, [r7, #64]	@ 0x40
    if (prescaler == 0u)
 8001d58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d101      	bne.n	8001d62 <led_compute_period_ticks+0x2e>
        return 0u;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	e05a      	b.n	8001e18 <led_compute_period_ticks+0xe4>

    uint32_t clk_per_second = timer_clk / prescaler;
 8001d62:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001d64:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d66:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (clk_per_second == 0u)
 8001d6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d101      	bne.n	8001d76 <led_compute_period_ticks+0x42>
        return 0u;
 8001d72:	2300      	movs	r3, #0
 8001d74:	e050      	b.n	8001e18 <led_compute_period_ticks+0xe4>

    uint64_t scaled_clock = (uint64_t)clk_per_second * 100u;
 8001d76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d78:	2200      	movs	r2, #0
 8001d7a:	4698      	mov	r8, r3
 8001d7c:	4691      	mov	r9, r2
 8001d7e:	4642      	mov	r2, r8
 8001d80:	464b      	mov	r3, r9
 8001d82:	1891      	adds	r1, r2, r2
 8001d84:	60b9      	str	r1, [r7, #8]
 8001d86:	415b      	adcs	r3, r3
 8001d88:	60fb      	str	r3, [r7, #12]
 8001d8a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001d8e:	eb12 0408 	adds.w	r4, r2, r8
 8001d92:	eb43 0509 	adc.w	r5, r3, r9
 8001d96:	f04f 0200 	mov.w	r2, #0
 8001d9a:	f04f 0300 	mov.w	r3, #0
 8001d9e:	016b      	lsls	r3, r5, #5
 8001da0:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8001da4:	0162      	lsls	r2, r4, #5
 8001da6:	eb14 0a02 	adds.w	sl, r4, r2
 8001daa:	eb45 0b03 	adc.w	fp, r5, r3
 8001dae:	eb1a 0308 	adds.w	r3, sl, r8
 8001db2:	603b      	str	r3, [r7, #0]
 8001db4:	eb4b 0309 	adc.w	r3, fp, r9
 8001db8:	607b      	str	r3, [r7, #4]
 8001dba:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001dbe:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30
    uint64_t ticks = (scaled_clock + ((uint64_t)freq_centi_hz / 2u)) / (uint64_t)freq_centi_hz;
 8001dc2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001dc4:	085b      	lsrs	r3, r3, #1
 8001dc6:	b29b      	uxth	r3, r3
 8001dc8:	b29b      	uxth	r3, r3
 8001dca:	2200      	movs	r2, #0
 8001dcc:	623b      	str	r3, [r7, #32]
 8001dce:	627a      	str	r2, [r7, #36]	@ 0x24
 8001dd0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001dd4:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001dd8:	4621      	mov	r1, r4
 8001dda:	1889      	adds	r1, r1, r2
 8001ddc:	61b9      	str	r1, [r7, #24]
 8001dde:	4629      	mov	r1, r5
 8001de0:	eb43 0101 	adc.w	r1, r3, r1
 8001de4:	61f9      	str	r1, [r7, #28]
 8001de6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001de8:	2200      	movs	r2, #0
 8001dea:	613b      	str	r3, [r7, #16]
 8001dec:	617a      	str	r2, [r7, #20]
 8001dee:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001df2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001df6:	f7fe fa8b 	bl	8000310 <__aeabi_uldivmod>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	460b      	mov	r3, r1
 8001dfe:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    if (ticks > 0xFFFFFFFFu)
 8001e02:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d305      	bcc.n	8001e16 <led_compute_period_ticks+0xe2>
        ticks = 0xFFFFFFFFu;
 8001e0a:	f04f 32ff 	mov.w	r2, #4294967295
 8001e0e:	f04f 0300 	mov.w	r3, #0
 8001e12:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    return (uint32_t)ticks;
 8001e16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3750      	adds	r7, #80	@ 0x50
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e22:	bf00      	nop
 8001e24:	20001068 	.word	0x20001068

08001e28 <led_apply_pwm>:

static void led_apply_pwm(uint32_t period_ticks, uint32_t pulse_ticks) {
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b084      	sub	sp, #16
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	6039      	str	r1, [r7, #0]
    if (period_ticks == 0u)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d101      	bne.n	8001e3c <led_apply_pwm+0x14>
        period_ticks = 1u;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	607b      	str	r3, [r7, #4]
    if (pulse_ticks > period_ticks)
 8001e3c:	683a      	ldr	r2, [r7, #0]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d901      	bls.n	8001e48 <led_apply_pwm+0x20>
        pulse_ticks = period_ticks;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	603b      	str	r3, [r7, #0]

    uint32_t arr = (period_ticks > 0u) ? (period_ticks - 1u) : 0u;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d002      	beq.n	8001e54 <led_apply_pwm+0x2c>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	3b01      	subs	r3, #1
 8001e52:	e000      	b.n	8001e56 <led_apply_pwm+0x2e>
 8001e54:	2300      	movs	r3, #0
 8001e56:	60fb      	str	r3, [r7, #12]
    __HAL_TIM_SET_AUTORELOAD(&htim15, arr);
 8001e58:	4b0a      	ldr	r3, [pc, #40]	@ (8001e84 <led_apply_pwm+0x5c>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	68fa      	ldr	r2, [r7, #12]
 8001e5e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001e60:	4a08      	ldr	r2, [pc, #32]	@ (8001e84 <led_apply_pwm+0x5c>)
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	60d3      	str	r3, [r2, #12]
    __HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, pulse_ticks);
 8001e66:	4b07      	ldr	r3, [pc, #28]	@ (8001e84 <led_apply_pwm+0x5c>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	683a      	ldr	r2, [r7, #0]
 8001e6c:	635a      	str	r2, [r3, #52]	@ 0x34
    HAL_TIM_GenerateEvent(&htim15, TIM_EVENTSOURCE_UPDATE);
 8001e6e:	2101      	movs	r1, #1
 8001e70:	4804      	ldr	r0, [pc, #16]	@ (8001e84 <led_apply_pwm+0x5c>)
 8001e72:	f00a fd39 	bl	800c8e8 <HAL_TIM_GenerateEvent>
    htim15.Init.Period = arr;
 8001e76:	4a03      	ldr	r2, [pc, #12]	@ (8001e84 <led_apply_pwm+0x5c>)
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	60d3      	str	r3, [r2, #12]
}
 8001e7c:	bf00      	nop
 8001e7e:	3710      	adds	r7, #16
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	20001068 	.word	0x20001068

08001e88 <led_force_off>:

static void led_force_off(led_channel_state_t *led) {
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b088      	sub	sp, #32
 8001e8c:	af04      	add	r7, sp, #16
 8001e8e:	6078      	str	r0, [r7, #4]
    if (!led)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d029      	beq.n	8001eea <led_force_off+0x62>
        return;
    HAL_StatusTypeDef st = led_pwm_stop();
 8001e96:	f000 f913 	bl	80020c0 <led_pwm_stop>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	73fb      	strb	r3, [r7, #15]
    if (st != HAL_OK) {
 8001e9e:	7bfb      	ldrb	r3, [r7, #15]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d00d      	beq.n	8001ec0 <led_force_off+0x38>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_RANGE, "timer", "falha ao parar PWM do TIM15 (%d)", (int)st);
 8001ea4:	4a13      	ldr	r2, [pc, #76]	@ (8001ef4 <led_force_off+0x6c>)
 8001ea6:	7bfb      	ldrb	r3, [r7, #15]
 8001ea8:	9302      	str	r3, [sp, #8]
 8001eaa:	4b13      	ldr	r3, [pc, #76]	@ (8001ef8 <led_force_off+0x70>)
 8001eac:	9301      	str	r3, [sp, #4]
 8001eae:	4b13      	ldr	r3, [pc, #76]	@ (8001efc <led_force_off+0x74>)
 8001eb0:	9300      	str	r3, [sp, #0]
 8001eb2:	4613      	mov	r3, r2
 8001eb4:	f06f 0203 	mvn.w	r2, #3
 8001eb8:	2164      	movs	r1, #100	@ 0x64
 8001eba:	2001      	movs	r0, #1
 8001ebc:	f000 fb96 	bl	80025ec <log_event_auto>
    }
    led_gpio_config_output(led);
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	f7ff fe85 	bl	8001bd0 <led_gpio_config_output>
    HAL_GPIO_WritePin(led->port, led->pin, LED_GPIO_OFF_LEVEL);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6818      	ldr	r0, [r3, #0]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	889b      	ldrh	r3, [r3, #4]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	f005 fc8b 	bl	80077ec <HAL_GPIO_WritePin>
    led->mode = LED_MODE_OFF;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	731a      	strb	r2, [r3, #12]
    led->frequency_centi_hz = 0u;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	81da      	strh	r2, [r3, #14]
    led->is_on = 0u;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	735a      	strb	r2, [r3, #13]
 8001ee8:	e000      	b.n	8001eec <led_force_off+0x64>
        return;
 8001eea:	bf00      	nop
}
 8001eec:	3710      	adds	r7, #16
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	08010438 	.word	0x08010438
 8001ef8:	08010478 	.word	0x08010478
 8001efc:	0801049c 	.word	0x0801049c

08001f00 <led_force_on>:

static void led_force_on(led_channel_state_t *led) {
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b088      	sub	sp, #32
 8001f04:	af04      	add	r7, sp, #16
 8001f06:	6078      	str	r0, [r7, #4]
    if (!led)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d029      	beq.n	8001f62 <led_force_on+0x62>
        return;
    HAL_StatusTypeDef st = led_pwm_stop();
 8001f0e:	f000 f8d7 	bl	80020c0 <led_pwm_stop>
 8001f12:	4603      	mov	r3, r0
 8001f14:	73fb      	strb	r3, [r7, #15]
    if (st != HAL_OK) {
 8001f16:	7bfb      	ldrb	r3, [r7, #15]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d00d      	beq.n	8001f38 <led_force_on+0x38>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_RANGE, "timer", "falha ao parar PWM do TIM15 (%d)", (int)st);
 8001f1c:	4a13      	ldr	r2, [pc, #76]	@ (8001f6c <led_force_on+0x6c>)
 8001f1e:	7bfb      	ldrb	r3, [r7, #15]
 8001f20:	9302      	str	r3, [sp, #8]
 8001f22:	4b13      	ldr	r3, [pc, #76]	@ (8001f70 <led_force_on+0x70>)
 8001f24:	9301      	str	r3, [sp, #4]
 8001f26:	4b13      	ldr	r3, [pc, #76]	@ (8001f74 <led_force_on+0x74>)
 8001f28:	9300      	str	r3, [sp, #0]
 8001f2a:	4613      	mov	r3, r2
 8001f2c:	f06f 0203 	mvn.w	r2, #3
 8001f30:	2164      	movs	r1, #100	@ 0x64
 8001f32:	2001      	movs	r0, #1
 8001f34:	f000 fb5a 	bl	80025ec <log_event_auto>
    }
    led_gpio_config_output(led);
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f7ff fe49 	bl	8001bd0 <led_gpio_config_output>
    HAL_GPIO_WritePin(led->port, led->pin, LED_GPIO_ON_LEVEL);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6818      	ldr	r0, [r3, #0]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	889b      	ldrh	r3, [r3, #4]
 8001f46:	2201      	movs	r2, #1
 8001f48:	4619      	mov	r1, r3
 8001f4a:	f005 fc4f 	bl	80077ec <HAL_GPIO_WritePin>
    led->mode = LED_MODE_ON;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2201      	movs	r2, #1
 8001f52:	731a      	strb	r2, [r3, #12]
    led->frequency_centi_hz = 0u;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2200      	movs	r2, #0
 8001f58:	81da      	strh	r2, [r3, #14]
    led->is_on = 1u;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	735a      	strb	r2, [r3, #13]
 8001f60:	e000      	b.n	8001f64 <led_force_on+0x64>
        return;
 8001f62:	bf00      	nop
}
 8001f64:	3710      	adds	r7, #16
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	08010438 	.word	0x08010438
 8001f70:	08010478 	.word	0x08010478
 8001f74:	0801049c 	.word	0x0801049c

08001f78 <led_force_blink>:

static void led_force_blink(led_channel_state_t *led, uint16_t freq_centi_hz) {
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b086      	sub	sp, #24
 8001f7c:	af02      	add	r7, sp, #8
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	460b      	mov	r3, r1
 8001f82:	807b      	strh	r3, [r7, #2]
    if (!led || freq_centi_hz == 0u)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d03c      	beq.n	8002004 <led_force_blink+0x8c>
 8001f8a:	887b      	ldrh	r3, [r7, #2]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d039      	beq.n	8002004 <led_force_blink+0x8c>
        return;
    uint32_t period_ticks = led_compute_period_ticks(freq_centi_hz);
 8001f90:	887b      	ldrh	r3, [r7, #2]
 8001f92:	4618      	mov	r0, r3
 8001f94:	f7ff fece 	bl	8001d34 <led_compute_period_ticks>
 8001f98:	60f8      	str	r0, [r7, #12]
    if (period_ticks < 2u)
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d801      	bhi.n	8001fa4 <led_force_blink+0x2c>
        period_ticks = 2u;
 8001fa0:	2302      	movs	r3, #2
 8001fa2:	60fb      	str	r3, [r7, #12]
    if (period_ticks > (uint32_t)0x10000u)
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001faa:	d902      	bls.n	8001fb2 <led_force_blink+0x3a>
        period_ticks = 0x10000u;
 8001fac:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001fb0:	60fb      	str	r3, [r7, #12]

    uint32_t pulse_ticks = period_ticks / 2u;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	085b      	lsrs	r3, r3, #1
 8001fb6:	60bb      	str	r3, [r7, #8]
    led_gpio_config_pwm(led);
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f7ff fe2e 	bl	8001c1a <led_gpio_config_pwm>
    led_apply_pwm(period_ticks, pulse_ticks);
 8001fbe:	68b9      	ldr	r1, [r7, #8]
 8001fc0:	68f8      	ldr	r0, [r7, #12]
 8001fc2:	f7ff ff31 	bl	8001e28 <led_apply_pwm>
    if (led_pwm_start() != HAL_OK) {
 8001fc6:	f000 f85d 	bl	8002084 <led_pwm_start>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d00f      	beq.n	8001ff0 <led_force_blink+0x78>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_RANGE, "timer", "falha ao iniciar PWM do TIM15");
 8001fd0:	4a0e      	ldr	r2, [pc, #56]	@ (800200c <led_force_blink+0x94>)
 8001fd2:	4b0f      	ldr	r3, [pc, #60]	@ (8002010 <led_force_blink+0x98>)
 8001fd4:	9301      	str	r3, [sp, #4]
 8001fd6:	4b0f      	ldr	r3, [pc, #60]	@ (8002014 <led_force_blink+0x9c>)
 8001fd8:	9300      	str	r3, [sp, #0]
 8001fda:	4613      	mov	r3, r2
 8001fdc:	f06f 0203 	mvn.w	r2, #3
 8001fe0:	2164      	movs	r1, #100	@ 0x64
 8001fe2:	2001      	movs	r0, #1
 8001fe4:	f000 fb02 	bl	80025ec <log_event_auto>
        led_force_off(led);
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	f7ff ff4d 	bl	8001e88 <led_force_off>
        return;
 8001fee:	e00a      	b.n	8002006 <led_force_blink+0x8e>
    }
    led->mode = LED_MODE_BLINK;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2202      	movs	r2, #2
 8001ff4:	731a      	strb	r2, [r3, #12]
    led->frequency_centi_hz = freq_centi_hz;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	887a      	ldrh	r2, [r7, #2]
 8001ffa:	81da      	strh	r2, [r3, #14]
    led->is_on = 0u;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2200      	movs	r2, #0
 8002000:	735a      	strb	r2, [r3, #13]
 8002002:	e000      	b.n	8002006 <led_force_blink+0x8e>
        return;
 8002004:	bf00      	nop
}
 8002006:	3710      	adds	r7, #16
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	08010438 	.word	0x08010438
 8002010:	080104a4 	.word	0x080104a4
 8002014:	0801049c 	.word	0x0801049c

08002018 <led_apply_config>:

static void led_apply_config(led_channel_state_t *led, uint8_t mode, uint16_t freq_centi_hz) {
 8002018:	b580      	push	{r7, lr}
 800201a:	b084      	sub	sp, #16
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	460b      	mov	r3, r1
 8002022:	70fb      	strb	r3, [r7, #3]
 8002024:	4613      	mov	r3, r2
 8002026:	803b      	strh	r3, [r7, #0]
    if (!led)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d026      	beq.n	800207c <led_apply_config+0x64>
        return;

    if (mode > LED_MODE_BLINK)
 800202e:	78fb      	ldrb	r3, [r7, #3]
 8002030:	2b02      	cmp	r3, #2
 8002032:	d901      	bls.n	8002038 <led_apply_config+0x20>
        mode = LED_MODE_OFF;
 8002034:	2300      	movs	r3, #0
 8002036:	70fb      	strb	r3, [r7, #3]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002038:	f3ef 8310 	mrs	r3, PRIMASK
 800203c:	60bb      	str	r3, [r7, #8]
  return(result);
 800203e:	68bb      	ldr	r3, [r7, #8]

    uint32_t primask = __get_PRIMASK();
 8002040:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8002042:	b672      	cpsid	i
}
 8002044:	bf00      	nop
    __disable_irq();

    if (mode == LED_MODE_ON) {
 8002046:	78fb      	ldrb	r3, [r7, #3]
 8002048:	2b01      	cmp	r3, #1
 800204a:	d103      	bne.n	8002054 <led_apply_config+0x3c>
        led_force_on(led);
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	f7ff ff57 	bl	8001f00 <led_force_on>
 8002052:	e00e      	b.n	8002072 <led_apply_config+0x5a>
    } else if (mode == LED_MODE_BLINK && freq_centi_hz > 0u) {
 8002054:	78fb      	ldrb	r3, [r7, #3]
 8002056:	2b02      	cmp	r3, #2
 8002058:	d108      	bne.n	800206c <led_apply_config+0x54>
 800205a:	883b      	ldrh	r3, [r7, #0]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d005      	beq.n	800206c <led_apply_config+0x54>
        led_force_blink(led, freq_centi_hz);
 8002060:	883b      	ldrh	r3, [r7, #0]
 8002062:	4619      	mov	r1, r3
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f7ff ff87 	bl	8001f78 <led_force_blink>
 800206a:	e002      	b.n	8002072 <led_apply_config+0x5a>
    } else {
        led_force_off(led);
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	f7ff ff0b 	bl	8001e88 <led_force_off>
    }

    if (primask == 0u) {
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d102      	bne.n	800207e <led_apply_config+0x66>
  __ASM volatile ("cpsie i" : : : "memory");
 8002078:	b662      	cpsie	i
}
 800207a:	e000      	b.n	800207e <led_apply_config+0x66>
        return;
 800207c:	bf00      	nop
        __enable_irq();
    }
}
 800207e:	3710      	adds	r7, #16
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}

08002084 <led_pwm_start>:

static HAL_StatusTypeDef led_pwm_start(void) {
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
    if (g_pwm_running)
 800208a:	4b0b      	ldr	r3, [pc, #44]	@ (80020b8 <led_pwm_start+0x34>)
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d001      	beq.n	8002096 <led_pwm_start+0x12>
        return HAL_OK;
 8002092:	2300      	movs	r3, #0
 8002094:	e00c      	b.n	80020b0 <led_pwm_start+0x2c>

    HAL_StatusTypeDef st = HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 8002096:	2100      	movs	r1, #0
 8002098:	4808      	ldr	r0, [pc, #32]	@ (80020bc <led_pwm_start+0x38>)
 800209a:	f009 fb6b 	bl	800b774 <HAL_TIM_PWM_Start>
 800209e:	4603      	mov	r3, r0
 80020a0:	71fb      	strb	r3, [r7, #7]
#if defined(TIM_CHANNEL_1N)
    if (st == HAL_OK) {
        st = HAL_TIMEx_PWMN_Start(&htim15, TIM_CHANNEL_1);
    }
#endif
    if (st == HAL_OK) {
 80020a2:	79fb      	ldrb	r3, [r7, #7]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d102      	bne.n	80020ae <led_pwm_start+0x2a>
        g_pwm_running = 1u;
 80020a8:	4b03      	ldr	r3, [pc, #12]	@ (80020b8 <led_pwm_start+0x34>)
 80020aa:	2201      	movs	r2, #1
 80020ac:	701a      	strb	r2, [r3, #0]
    }
    return st;
 80020ae:	79fb      	ldrb	r3, [r7, #7]
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3708      	adds	r7, #8
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	200000ce 	.word	0x200000ce
 80020bc:	20001068 	.word	0x20001068

080020c0 <led_pwm_stop>:

static HAL_StatusTypeDef led_pwm_stop(void) {
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
    if (!g_pwm_running)
 80020c6:	4b17      	ldr	r3, [pc, #92]	@ (8002124 <led_pwm_stop+0x64>)
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d101      	bne.n	80020d2 <led_pwm_stop+0x12>
        return HAL_OK;
 80020ce:	2300      	movs	r3, #0
 80020d0:	e024      	b.n	800211c <led_pwm_stop+0x5c>

    HAL_StatusTypeDef st = HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_1);
 80020d2:	2100      	movs	r1, #0
 80020d4:	4814      	ldr	r0, [pc, #80]	@ (8002128 <led_pwm_stop+0x68>)
 80020d6:	f009 fcfd 	bl	800bad4 <HAL_TIM_PWM_Stop>
 80020da:	4603      	mov	r3, r0
 80020dc:	71fb      	strb	r3, [r7, #7]
#if defined(TIM_CHANNEL_1N)
    if (st == HAL_OK) {
        st = HAL_TIMEx_PWMN_Stop(&htim15, TIM_CHANNEL_1);
    }
#endif
    if (st == HAL_OK) {
 80020de:	79fb      	ldrb	r3, [r7, #7]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d11a      	bne.n	800211a <led_pwm_stop+0x5a>
        __HAL_TIM_DISABLE(&htim15);
 80020e4:	4b10      	ldr	r3, [pc, #64]	@ (8002128 <led_pwm_stop+0x68>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	6a1a      	ldr	r2, [r3, #32]
 80020ea:	f241 1311 	movw	r3, #4369	@ 0x1111
 80020ee:	4013      	ands	r3, r2
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d10f      	bne.n	8002114 <led_pwm_stop+0x54>
 80020f4:	4b0c      	ldr	r3, [pc, #48]	@ (8002128 <led_pwm_stop+0x68>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	6a1a      	ldr	r2, [r3, #32]
 80020fa:	f240 4344 	movw	r3, #1092	@ 0x444
 80020fe:	4013      	ands	r3, r2
 8002100:	2b00      	cmp	r3, #0
 8002102:	d107      	bne.n	8002114 <led_pwm_stop+0x54>
 8002104:	4b08      	ldr	r3, [pc, #32]	@ (8002128 <led_pwm_stop+0x68>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	4b07      	ldr	r3, [pc, #28]	@ (8002128 <led_pwm_stop+0x68>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f022 0201 	bic.w	r2, r2, #1
 8002112:	601a      	str	r2, [r3, #0]
        g_pwm_running = 0u;
 8002114:	4b03      	ldr	r3, [pc, #12]	@ (8002124 <led_pwm_stop+0x64>)
 8002116:	2200      	movs	r2, #0
 8002118:	701a      	strb	r2, [r3, #0]
    }
    return st;
 800211a:	79fb      	ldrb	r3, [r7, #7]
}
 800211c:	4618      	mov	r0, r3
 800211e:	3708      	adds	r7, #8
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}
 8002124:	200000ce 	.word	0x200000ce
 8002128:	20001068 	.word	0x20001068

0800212c <led_service_init>:

void led_service_init(void) {
 800212c:	b580      	push	{r7, lr}
 800212e:	b08a      	sub	sp, #40	@ 0x28
 8002130:	af02      	add	r7, sp, #8
    g_pwm_running = 0u;
 8002132:	4b42      	ldr	r3, [pc, #264]	@ (800223c <led_service_init+0x110>)
 8002134:	2200      	movs	r2, #0
 8002136:	701a      	strb	r2, [r3, #0]

    for (uint32_t i = 0; i < LED_CTRL_CHANNEL_COUNT; ++i) {
 8002138:	2300      	movs	r3, #0
 800213a:	61fb      	str	r3, [r7, #28]
 800213c:	e02d      	b.n	800219a <led_service_init+0x6e>
        led_gpio_config_output(&g_leds[i]);
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	011b      	lsls	r3, r3, #4
 8002142:	4a3f      	ldr	r2, [pc, #252]	@ (8002240 <led_service_init+0x114>)
 8002144:	4413      	add	r3, r2
 8002146:	4618      	mov	r0, r3
 8002148:	f7ff fd42 	bl	8001bd0 <led_gpio_config_output>
        HAL_GPIO_WritePin(g_leds[i].port, g_leds[i].pin, LED_GPIO_OFF_LEVEL);
 800214c:	4a3c      	ldr	r2, [pc, #240]	@ (8002240 <led_service_init+0x114>)
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	011b      	lsls	r3, r3, #4
 8002152:	4413      	add	r3, r2
 8002154:	6818      	ldr	r0, [r3, #0]
 8002156:	4a3a      	ldr	r2, [pc, #232]	@ (8002240 <led_service_init+0x114>)
 8002158:	69fb      	ldr	r3, [r7, #28]
 800215a:	011b      	lsls	r3, r3, #4
 800215c:	4413      	add	r3, r2
 800215e:	3304      	adds	r3, #4
 8002160:	881b      	ldrh	r3, [r3, #0]
 8002162:	2200      	movs	r2, #0
 8002164:	4619      	mov	r1, r3
 8002166:	f005 fb41 	bl	80077ec <HAL_GPIO_WritePin>
        g_leds[i].mode = LED_MODE_OFF;
 800216a:	4a35      	ldr	r2, [pc, #212]	@ (8002240 <led_service_init+0x114>)
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	011b      	lsls	r3, r3, #4
 8002170:	4413      	add	r3, r2
 8002172:	330c      	adds	r3, #12
 8002174:	2200      	movs	r2, #0
 8002176:	701a      	strb	r2, [r3, #0]
        g_leds[i].frequency_centi_hz = 0u;
 8002178:	4a31      	ldr	r2, [pc, #196]	@ (8002240 <led_service_init+0x114>)
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	011b      	lsls	r3, r3, #4
 800217e:	4413      	add	r3, r2
 8002180:	330e      	adds	r3, #14
 8002182:	2200      	movs	r2, #0
 8002184:	801a      	strh	r2, [r3, #0]
        g_leds[i].is_on = 0u;
 8002186:	4a2e      	ldr	r2, [pc, #184]	@ (8002240 <led_service_init+0x114>)
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	011b      	lsls	r3, r3, #4
 800218c:	4413      	add	r3, r2
 800218e:	330d      	adds	r3, #13
 8002190:	2200      	movs	r2, #0
 8002192:	701a      	strb	r2, [r3, #0]
    for (uint32_t i = 0; i < LED_CTRL_CHANNEL_COUNT; ++i) {
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	3301      	adds	r3, #1
 8002198:	61fb      	str	r3, [r7, #28]
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d0ce      	beq.n	800213e <led_service_init+0x12>
    }

    if (htim15.Instance != TIM15) {
 80021a0:	4b28      	ldr	r3, [pc, #160]	@ (8002244 <led_service_init+0x118>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a28      	ldr	r2, [pc, #160]	@ (8002248 <led_service_init+0x11c>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d001      	beq.n	80021ae <led_service_init+0x82>
        MX_TIM15_Init();
 80021aa:	f004 f8ff 	bl	80063ac <MX_TIM15_Init>
    }

    if (HAL_TIM_PWM_Init(&htim15) != HAL_OK) {
 80021ae:	4825      	ldr	r0, [pc, #148]	@ (8002244 <led_service_init+0x118>)
 80021b0:	f009 f9cc 	bl	800b54c <HAL_TIM_PWM_Init>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d00c      	beq.n	80021d4 <led_service_init+0xa8>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_RANGE, "timer", "falha ao inicializar PWM do TIM15");
 80021ba:	4a24      	ldr	r2, [pc, #144]	@ (800224c <led_service_init+0x120>)
 80021bc:	4b24      	ldr	r3, [pc, #144]	@ (8002250 <led_service_init+0x124>)
 80021be:	9301      	str	r3, [sp, #4]
 80021c0:	4b24      	ldr	r3, [pc, #144]	@ (8002254 <led_service_init+0x128>)
 80021c2:	9300      	str	r3, [sp, #0]
 80021c4:	4613      	mov	r3, r2
 80021c6:	f06f 0203 	mvn.w	r2, #3
 80021ca:	2164      	movs	r1, #100	@ 0x64
 80021cc:	2001      	movs	r0, #1
 80021ce:	f000 fa0d 	bl	80025ec <log_event_auto>
        return;
 80021d2:	e02f      	b.n	8002234 <led_service_init+0x108>
    }

    TIM_OC_InitTypeDef oc = {0};
 80021d4:	463b      	mov	r3, r7
 80021d6:	2200      	movs	r2, #0
 80021d8:	601a      	str	r2, [r3, #0]
 80021da:	605a      	str	r2, [r3, #4]
 80021dc:	609a      	str	r2, [r3, #8]
 80021de:	60da      	str	r2, [r3, #12]
 80021e0:	611a      	str	r2, [r3, #16]
 80021e2:	615a      	str	r2, [r3, #20]
 80021e4:	619a      	str	r2, [r3, #24]
    oc.OCMode = TIM_OCMODE_PWM1;
 80021e6:	2360      	movs	r3, #96	@ 0x60
 80021e8:	603b      	str	r3, [r7, #0]
#if LED_ACTIVE_HIGH
    oc.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021ea:	2300      	movs	r3, #0
 80021ec:	60bb      	str	r3, [r7, #8]
    oc.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80021ee:	2300      	movs	r3, #0
 80021f0:	60fb      	str	r3, [r7, #12]
#else
    oc.OCPolarity = TIM_OCPOLARITY_LOW;
    oc.OCNPolarity = TIM_OCNPOLARITY_LOW;
#endif
    oc.OCFastMode = TIM_OCFAST_DISABLE;
 80021f2:	2300      	movs	r3, #0
 80021f4:	613b      	str	r3, [r7, #16]
    oc.OCIdleState = TIM_OCIDLESTATE_RESET;
 80021f6:	2300      	movs	r3, #0
 80021f8:	617b      	str	r3, [r7, #20]
    oc.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80021fa:	2300      	movs	r3, #0
 80021fc:	61bb      	str	r3, [r7, #24]
    oc.Pulse = 0u;
 80021fe:	2300      	movs	r3, #0
 8002200:	607b      	str	r3, [r7, #4]

    if (HAL_TIM_PWM_ConfigChannel(&htim15, &oc, TIM_CHANNEL_1) != HAL_OK) {
 8002202:	463b      	mov	r3, r7
 8002204:	2200      	movs	r2, #0
 8002206:	4619      	mov	r1, r3
 8002208:	480e      	ldr	r0, [pc, #56]	@ (8002244 <led_service_init+0x118>)
 800220a:	f00a f91f 	bl	800c44c <HAL_TIM_PWM_ConfigChannel>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d00c      	beq.n	800222e <led_service_init+0x102>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_RANGE, "timer", "falha ao configurar canal PWM do TIM15");
 8002214:	4a0d      	ldr	r2, [pc, #52]	@ (800224c <led_service_init+0x120>)
 8002216:	4b10      	ldr	r3, [pc, #64]	@ (8002258 <led_service_init+0x12c>)
 8002218:	9301      	str	r3, [sp, #4]
 800221a:	4b0e      	ldr	r3, [pc, #56]	@ (8002254 <led_service_init+0x128>)
 800221c:	9300      	str	r3, [sp, #0]
 800221e:	4613      	mov	r3, r2
 8002220:	f06f 0203 	mvn.w	r2, #3
 8002224:	2164      	movs	r1, #100	@ 0x64
 8002226:	2001      	movs	r0, #1
 8002228:	f000 f9e0 	bl	80025ec <log_event_auto>
        return;
 800222c:	e002      	b.n	8002234 <led_service_init+0x108>
    }

    led_force_off(&g_leds[0]);
 800222e:	4804      	ldr	r0, [pc, #16]	@ (8002240 <led_service_init+0x114>)
 8002230:	f7ff fe2a 	bl	8001e88 <led_force_off>
}
 8002234:	3720      	adds	r7, #32
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	200000ce 	.word	0x200000ce
 8002240:	20000000 	.word	0x20000000
 8002244:	20001068 	.word	0x20001068
 8002248:	40014000 	.word	0x40014000
 800224c:	08010438 	.word	0x08010438
 8002250:	080104c4 	.word	0x080104c4
 8002254:	0801049c 	.word	0x0801049c
 8002258:	080104e8 	.word	0x080104e8

0800225c <led_on_led_ctrl>:

void led_on_led_ctrl(const uint8_t *frame, uint32_t len) {
 800225c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800225e:	b097      	sub	sp, #92	@ 0x5c
 8002260:	af0a      	add	r7, sp, #40	@ 0x28
 8002262:	6178      	str	r0, [r7, #20]
 8002264:	6139      	str	r1, [r7, #16]
    led_ctrl_req_t req;
    if (!frame)
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	2b00      	cmp	r3, #0
 800226a:	f000 80d2 	beq.w	8002412 <led_on_led_ctrl+0x1b6>
        return;
    if (len < LED_CTRL_REQ_TOTAL_LEN || len > LED_CTRL_REQ_PADDED_TOTAL_LEN) {
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	2b08      	cmp	r3, #8
 8002272:	d902      	bls.n	800227a <led_on_led_ctrl+0x1e>
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	2b2a      	cmp	r3, #42	@ 0x2a
 8002278:	d90e      	bls.n	8002298 <led_on_led_ctrl+0x3c>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_RANGE, "len", "invalid led frame len=%lu", (unsigned long)len);
 800227a:	4a68      	ldr	r2, [pc, #416]	@ (800241c <led_on_led_ctrl+0x1c0>)
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	9302      	str	r3, [sp, #8]
 8002280:	4b67      	ldr	r3, [pc, #412]	@ (8002420 <led_on_led_ctrl+0x1c4>)
 8002282:	9301      	str	r3, [sp, #4]
 8002284:	4b67      	ldr	r3, [pc, #412]	@ (8002424 <led_on_led_ctrl+0x1c8>)
 8002286:	9300      	str	r3, [sp, #0]
 8002288:	4613      	mov	r3, r2
 800228a:	f06f 0203 	mvn.w	r2, #3
 800228e:	2164      	movs	r1, #100	@ 0x64
 8002290:	2001      	movs	r0, #1
 8002292:	f000 f9ab 	bl	80025ec <log_event_auto>
        return;
 8002296:	e0bd      	b.n	8002414 <led_on_led_ctrl+0x1b8>
    }
    proto_result_t decode_status = led_ctrl_req_decoder(frame, len, &req);
 8002298:	f107 031c 	add.w	r3, r7, #28
 800229c:	461a      	mov	r2, r3
 800229e:	6939      	ldr	r1, [r7, #16]
 80022a0:	6978      	ldr	r0, [r7, #20]
 80022a2:	f7fe faa6 	bl	80007f2 <led_ctrl_req_decoder>
 80022a6:	4603      	mov	r3, r0
 80022a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (decode_status != PROTO_OK) {
 80022ac:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d00f      	beq.n	80022d4 <led_on_led_ctrl+0x78>
        LOGA_THIS(LOG_STATE_ERROR, decode_status, "decode", "failed to decode led request (%d)", (int)decode_status);
 80022b4:	f997 2027 	ldrsb.w	r2, [r7, #39]	@ 0x27
 80022b8:	4958      	ldr	r1, [pc, #352]	@ (800241c <led_on_led_ctrl+0x1c0>)
 80022ba:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80022be:	9302      	str	r3, [sp, #8]
 80022c0:	4b59      	ldr	r3, [pc, #356]	@ (8002428 <led_on_led_ctrl+0x1cc>)
 80022c2:	9301      	str	r3, [sp, #4]
 80022c4:	4b59      	ldr	r3, [pc, #356]	@ (800242c <led_on_led_ctrl+0x1d0>)
 80022c6:	9300      	str	r3, [sp, #0]
 80022c8:	460b      	mov	r3, r1
 80022ca:	2164      	movs	r1, #100	@ 0x64
 80022cc:	2001      	movs	r0, #1
 80022ce:	f000 f98d 	bl	80025ec <log_event_auto>
        return;
 80022d2:	e09f      	b.n	8002414 <led_on_led_ctrl+0x1b8>
    }

    const uint8_t requested_mask = req.ledMask;
 80022d4:	7f7b      	ldrb	r3, [r7, #29]
 80022d6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    const uint8_t valid_mask = LED_MASK_LED1;
 80022da:	2301      	movs	r3, #1
 80022dc:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    uint8_t ack_mask = 0u;
 80022e0:	2300      	movs	r3, #0
 80022e2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    uint8_t status = PROTO_OK;
 80022e6:	2300      	movs	r3, #0
 80022e8:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

    for (uint32_t i = 0; i < LED_CTRL_CHANNEL_COUNT; ++i) {
 80022ec:	2300      	movs	r3, #0
 80022ee:	62bb      	str	r3, [r7, #40]	@ 0x28
 80022f0:	e02d      	b.n	800234e <led_on_led_ctrl+0xf2>
        uint8_t mask_bit = LED_MASK_LED1;
 80022f2:	2301      	movs	r3, #1
 80022f4:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        if ((requested_mask & mask_bit) == 0u) {
 80022f8:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80022fc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002300:	4013      	ands	r3, r2
 8002302:	b2db      	uxtb	r3, r3
 8002304:	2b00      	cmp	r3, #0
 8002306:	d01e      	beq.n	8002346 <led_on_led_ctrl+0xea>
            continue;
        }
        ack_mask |= mask_bit;
 8002308:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800230c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002310:	4313      	orrs	r3, r2
 8002312:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        led_apply_config(&g_leds[i], req.channel[i].mode, req.channel[i].frequency);
 8002316:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002318:	011b      	lsls	r3, r3, #4
 800231a:	4a45      	ldr	r2, [pc, #276]	@ (8002430 <led_on_led_ctrl+0x1d4>)
 800231c:	1898      	adds	r0, r3, r2
 800231e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	3320      	adds	r3, #32
 8002324:	f107 0210 	add.w	r2, r7, #16
 8002328:	4413      	add	r3, r2
 800232a:	f813 1c12 	ldrb.w	r1, [r3, #-18]
 800232e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	3320      	adds	r3, #32
 8002334:	f107 0210 	add.w	r2, r7, #16
 8002338:	4413      	add	r3, r2
 800233a:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 800233e:	461a      	mov	r2, r3
 8002340:	f7ff fe6a 	bl	8002018 <led_apply_config>
 8002344:	e000      	b.n	8002348 <led_on_led_ctrl+0xec>
            continue;
 8002346:	bf00      	nop
    for (uint32_t i = 0; i < LED_CTRL_CHANNEL_COUNT; ++i) {
 8002348:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800234a:	3301      	adds	r3, #1
 800234c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800234e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002350:	2b00      	cmp	r3, #0
 8002352:	d0ce      	beq.n	80022f2 <led_on_led_ctrl+0x96>
    }

    if ((requested_mask & (uint8_t)~valid_mask) != 0u) {
 8002354:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002358:	43db      	mvns	r3, r3
 800235a:	b2da      	uxtb	r2, r3
 800235c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002360:	4013      	ands	r3, r2
 8002362:	b2db      	uxtb	r3, r3
 8002364:	2b00      	cmp	r3, #0
 8002366:	d003      	beq.n	8002370 <led_on_led_ctrl+0x114>
        status = PROTO_WARN;
 8002368:	2301      	movs	r3, #1
 800236a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800236e:	e00a      	b.n	8002386 <led_on_led_ctrl+0x12a>
    } else if (ack_mask == 0u && requested_mask != 0u) {
 8002370:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002374:	2b00      	cmp	r3, #0
 8002376:	d106      	bne.n	8002386 <led_on_led_ctrl+0x12a>
 8002378:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800237c:	2b00      	cmp	r3, #0
 800237e:	d002      	beq.n	8002386 <led_on_led_ctrl+0x12a>
        status = PROTO_WARN;
 8002380:	2301      	movs	r3, #1
 8002382:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    }

    led_push_response(req.frameId, ack_mask, status);
 8002386:	7f3b      	ldrb	r3, [r7, #28]
 8002388:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 800238c:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8002390:	4618      	mov	r0, r3
 8002392:	f7ff fc6b 	bl	8001c6c <led_push_response>

    LOGA_THIS(LOG_STATE_APPLIED, status, "applied",
 8002396:	f897 402e 	ldrb.w	r4, [r7, #46]	@ 0x2e
 800239a:	4e20      	ldr	r6, [pc, #128]	@ (800241c <led_on_led_ctrl+0x1c0>)
 800239c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80023a0:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 80023a4:	4b22      	ldr	r3, [pc, #136]	@ (8002430 <led_on_led_ctrl+0x1d4>)
 80023a6:	7b1b      	ldrb	r3, [r3, #12]
 80023a8:	60fb      	str	r3, [r7, #12]
 80023aa:	4b21      	ldr	r3, [pc, #132]	@ (8002430 <led_on_led_ctrl+0x1d4>)
 80023ac:	89db      	ldrh	r3, [r3, #14]
 80023ae:	4821      	ldr	r0, [pc, #132]	@ (8002434 <led_on_led_ctrl+0x1d8>)
 80023b0:	fba0 0303 	umull	r0, r3, r0, r3
 80023b4:	095b      	lsrs	r3, r3, #5
 80023b6:	b29b      	uxth	r3, r3
 80023b8:	60bb      	str	r3, [r7, #8]
 80023ba:	4b1d      	ldr	r3, [pc, #116]	@ (8002430 <led_on_led_ctrl+0x1d4>)
 80023bc:	89db      	ldrh	r3, [r3, #14]
 80023be:	481d      	ldr	r0, [pc, #116]	@ (8002434 <led_on_led_ctrl+0x1d8>)
 80023c0:	fba0 5003 	umull	r5, r0, r0, r3
 80023c4:	0940      	lsrs	r0, r0, #5
 80023c6:	2564      	movs	r5, #100	@ 0x64
 80023c8:	fb05 f000 	mul.w	r0, r5, r0
 80023cc:	1a1b      	subs	r3, r3, r0
 80023ce:	b29b      	uxth	r3, r3
 80023d0:	461d      	mov	r5, r3
 80023d2:	4b17      	ldr	r3, [pc, #92]	@ (8002430 <led_on_led_ctrl+0x1d4>)
 80023d4:	7b5b      	ldrb	r3, [r3, #13]
 80023d6:	607b      	str	r3, [r7, #4]
 80023d8:	4b17      	ldr	r3, [pc, #92]	@ (8002438 <led_on_led_ctrl+0x1dc>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023de:	3301      	adds	r3, #1
 80023e0:	4815      	ldr	r0, [pc, #84]	@ (8002438 <led_on_led_ctrl+0x1dc>)
 80023e2:	6800      	ldr	r0, [r0, #0]
 80023e4:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 80023e6:	9009      	str	r0, [sp, #36]	@ 0x24
 80023e8:	9308      	str	r3, [sp, #32]
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	9007      	str	r0, [sp, #28]
 80023ee:	9506      	str	r5, [sp, #24]
 80023f0:	68b8      	ldr	r0, [r7, #8]
 80023f2:	9005      	str	r0, [sp, #20]
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	9304      	str	r3, [sp, #16]
 80023f8:	9103      	str	r1, [sp, #12]
 80023fa:	9202      	str	r2, [sp, #8]
 80023fc:	4b0f      	ldr	r3, [pc, #60]	@ (800243c <led_on_led_ctrl+0x1e0>)
 80023fe:	9301      	str	r3, [sp, #4]
 8002400:	4b0f      	ldr	r3, [pc, #60]	@ (8002440 <led_on_led_ctrl+0x1e4>)
 8002402:	9300      	str	r3, [sp, #0]
 8002404:	4633      	mov	r3, r6
 8002406:	4622      	mov	r2, r4
 8002408:	2102      	movs	r1, #2
 800240a:	2001      	movs	r0, #1
 800240c:	f000 f8ee 	bl	80025ec <log_event_auto>
 8002410:	e000      	b.n	8002414 <led_on_led_ctrl+0x1b8>
        return;
 8002412:	bf00      	nop
              (unsigned long)(g_leds[0].frequency_centi_hz / 100u),
              (unsigned long)(g_leds[0].frequency_centi_hz % 100u),
              g_leds[0].is_on,
              (unsigned long)(__HAL_TIM_GET_AUTORELOAD(&htim15) + 1u),
              (unsigned long)__HAL_TIM_GET_COMPARE(&htim15, TIM_CHANNEL_1));
 8002414:	3734      	adds	r7, #52	@ 0x34
 8002416:	46bd      	mov	sp, r7
 8002418:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800241a:	bf00      	nop
 800241c:	08010438 	.word	0x08010438
 8002420:	08010510 	.word	0x08010510
 8002424:	0801052c 	.word	0x0801052c
 8002428:	08010530 	.word	0x08010530
 800242c:	08010554 	.word	0x08010554
 8002430:	20000000 	.word	0x20000000
 8002434:	51eb851f 	.word	0x51eb851f
 8002438:	20001068 	.word	0x20001068
 800243c:	0801055c 	.word	0x0801055c
 8002440:	080105ac 	.word	0x080105ac

08002444 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800244c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8002450:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8002454:	f003 0301 	and.w	r3, r3, #1
 8002458:	2b00      	cmp	r3, #0
 800245a:	d013      	beq.n	8002484 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800245c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8002460:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8002464:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002468:	2b00      	cmp	r3, #0
 800246a:	d00b      	beq.n	8002484 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800246c:	e000      	b.n	8002470 <ITM_SendChar+0x2c>
    {
      __NOP();
 800246e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8002470:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d0f9      	beq.n	800246e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800247a:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	b2d2      	uxtb	r2, r2
 8002482:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8002484:	687b      	ldr	r3, [r7, #4]
}
 8002486:	4618      	mov	r0, r3
 8002488:	370c      	adds	r7, #12
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
	...

08002494 <log_service_init>:
#include <stdarg.h>
#include <string.h>
#include "usart.h"
#include "stm32l4xx.h"  // ITM_SendChar/CoreDebug/DBGMCU/TPI

void log_service_init(void){
 8002494:	b580      	push	{r7, lr}
 8002496:	af00      	add	r7, sp, #0
    // Garante stdout sem buffer para que o printf descarregue imediatamente na UART.
    setvbuf(stdout, NULL, _IONBF, 0);
 8002498:	4b04      	ldr	r3, [pc, #16]	@ (80024ac <log_service_init+0x18>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	6898      	ldr	r0, [r3, #8]
 800249e:	2300      	movs	r3, #0
 80024a0:	2202      	movs	r2, #2
 80024a2:	2100      	movs	r1, #0
 80024a4:	f00c ff50 	bl	800f348 <setvbuf>
}
 80024a8:	bf00      	nop
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	2000002c 	.word	0x2000002c

080024b0 <log_event_ids>:

void log_poll(void){
    // No-op: a transmissão é síncrona via _write/HAL_UART_Transmit.
}

void log_event_ids(uint8_t service_id, uint8_t state_id, int32_t status){
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b082      	sub	sp, #8
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	4603      	mov	r3, r0
 80024b8:	603a      	str	r2, [r7, #0]
 80024ba:	71fb      	strb	r3, [r7, #7]
 80024bc:	460b      	mov	r3, r1
 80024be:	71bb      	strb	r3, [r7, #6]
    printf("L:svc=%u,state=%u,status=%ld\r\n", (unsigned)service_id, (unsigned)state_id, (long)status);
 80024c0:	79f9      	ldrb	r1, [r7, #7]
 80024c2:	79ba      	ldrb	r2, [r7, #6]
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	4803      	ldr	r0, [pc, #12]	@ (80024d4 <log_event_ids+0x24>)
 80024c8:	f00c fece 	bl	800f268 <iprintf>
}
 80024cc:	bf00      	nop
 80024ce:	3708      	adds	r7, #8
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	080105b4 	.word	0x080105b4

080024d8 <log_event_names>:

void log_event_names(const char* service_name, const char* state_name, const char* status_text){
 80024d8:	b580      	push	{r7, lr}
 80024da:	b084      	sub	sp, #16
 80024dc:	af00      	add	r7, sp, #0
 80024de:	60f8      	str	r0, [r7, #12]
 80024e0:	60b9      	str	r1, [r7, #8]
 80024e2:	607a      	str	r2, [r7, #4]
    if(!service_name) service_name = "?";
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d101      	bne.n	80024ee <log_event_names+0x16>
 80024ea:	4b0b      	ldr	r3, [pc, #44]	@ (8002518 <log_event_names+0x40>)
 80024ec:	60fb      	str	r3, [r7, #12]
    if(!state_name) state_name = "?";
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d101      	bne.n	80024f8 <log_event_names+0x20>
 80024f4:	4b08      	ldr	r3, [pc, #32]	@ (8002518 <log_event_names+0x40>)
 80024f6:	60bb      	str	r3, [r7, #8]
    if(!status_text) status_text = "?";
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d101      	bne.n	8002502 <log_event_names+0x2a>
 80024fe:	4b06      	ldr	r3, [pc, #24]	@ (8002518 <log_event_names+0x40>)
 8002500:	607b      	str	r3, [r7, #4]
    printf("LOG:service=%s,state=%s,status=%s\r\n", service_name, state_name, status_text);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	68ba      	ldr	r2, [r7, #8]
 8002506:	68f9      	ldr	r1, [r7, #12]
 8002508:	4804      	ldr	r0, [pc, #16]	@ (800251c <log_event_names+0x44>)
 800250a:	f00c fead 	bl	800f268 <iprintf>
}
 800250e:	bf00      	nop
 8002510:	3710      	adds	r7, #16
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	080105d4 	.word	0x080105d4
 800251c:	080105d8 	.word	0x080105d8

08002520 <log_swo_enabled>:

// Verifica em tempo de execução se o SWO/ITM está habilitado (porta 0).
static inline int log_swo_enabled(void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
    return ((CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk) &&
 8002524:	4b11      	ldr	r3, [pc, #68]	@ (800256c <log_swo_enabled+0x4c>)
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
            (DBGMCU->CR & DBGMCU_CR_TRACE_IOEN) &&
            (ITM->TCR & ITM_TCR_ITMENA_Msk) &&
 800252c:	2b00      	cmp	r3, #0
 800252e:	d017      	beq.n	8002560 <log_swo_enabled+0x40>
            (DBGMCU->CR & DBGMCU_CR_TRACE_IOEN) &&
 8002530:	4b0f      	ldr	r3, [pc, #60]	@ (8002570 <log_swo_enabled+0x50>)
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f003 0320 	and.w	r3, r3, #32
    return ((CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk) &&
 8002538:	2b00      	cmp	r3, #0
 800253a:	d011      	beq.n	8002560 <log_swo_enabled+0x40>
            (ITM->TCR & ITM_TCR_ITMENA_Msk) &&
 800253c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8002540:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8002544:	f003 0301 	and.w	r3, r3, #1
            (DBGMCU->CR & DBGMCU_CR_TRACE_IOEN) &&
 8002548:	2b00      	cmp	r3, #0
 800254a:	d009      	beq.n	8002560 <log_swo_enabled+0x40>
            (ITM->TER & (1UL << 0)));
 800254c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8002550:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8002554:	f003 0301 	and.w	r3, r3, #1
            (ITM->TCR & ITM_TCR_ITMENA_Msk) &&
 8002558:	2b00      	cmp	r3, #0
 800255a:	d001      	beq.n	8002560 <log_swo_enabled+0x40>
 800255c:	2301      	movs	r3, #1
 800255e:	e000      	b.n	8002562 <log_swo_enabled+0x42>
 8002560:	2300      	movs	r3, #0
}
 8002562:	4618      	mov	r0, r3
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr
 800256c:	e000edf0 	.word	0xe000edf0
 8002570:	e0042000 	.word	0xe0042000

08002574 <_write>:

// Retarget de printf: usa SWO quando disponível; senão, USART1.
int _write(int fd, char *ptr, int len)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b086      	sub	sp, #24
 8002578:	af00      	add	r7, sp, #0
 800257a:	60f8      	str	r0, [r7, #12]
 800257c:	60b9      	str	r1, [r7, #8]
 800257e:	607a      	str	r2, [r7, #4]
    if (fd != 1 && fd != 2)
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2b01      	cmp	r3, #1
 8002584:	d005      	beq.n	8002592 <_write+0x1e>
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2b02      	cmp	r3, #2
 800258a:	d002      	beq.n	8002592 <_write+0x1e>
        return -1;
 800258c:	f04f 33ff 	mov.w	r3, #4294967295
 8002590:	e026      	b.n	80025e0 <_write+0x6c>

    if (log_swo_enabled()) {
 8002592:	f7ff ffc5 	bl	8002520 <log_swo_enabled>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d012      	beq.n	80025c2 <_write+0x4e>
        for (int i = 0; i < len; ++i) {
 800259c:	2300      	movs	r3, #0
 800259e:	617b      	str	r3, [r7, #20]
 80025a0:	e009      	b.n	80025b6 <_write+0x42>
            ITM_SendChar((uint32_t)ptr[i]);
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	68ba      	ldr	r2, [r7, #8]
 80025a6:	4413      	add	r3, r2
 80025a8:	781b      	ldrb	r3, [r3, #0]
 80025aa:	4618      	mov	r0, r3
 80025ac:	f7ff ff4a 	bl	8002444 <ITM_SendChar>
        for (int i = 0; i < len; ++i) {
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	3301      	adds	r3, #1
 80025b4:	617b      	str	r3, [r7, #20]
 80025b6:	697a      	ldr	r2, [r7, #20]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	429a      	cmp	r2, r3
 80025bc:	dbf1      	blt.n	80025a2 <_write+0x2e>
        }
        return len;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	e00e      	b.n	80025e0 <_write+0x6c>
    }

    // Fallback: UART1 síncrona
    if (HAL_UART_Transmit(&huart1, (uint8_t *)ptr, (uint16_t)len, HAL_MAX_DELAY) == HAL_OK)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	b29a      	uxth	r2, r3
 80025c6:	f04f 33ff 	mov.w	r3, #4294967295
 80025ca:	68b9      	ldr	r1, [r7, #8]
 80025cc:	4806      	ldr	r0, [pc, #24]	@ (80025e8 <_write+0x74>)
 80025ce:	f00b fded 	bl	800e1ac <HAL_UART_Transmit>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d101      	bne.n	80025dc <_write+0x68>
        return len;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	e001      	b.n	80025e0 <_write+0x6c>
    return -1;
 80025dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3718      	adds	r7, #24
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	200010b4 	.word	0x200010b4

080025ec <log_event_auto>:

void log_event_auto(log_service_id_t service_id, log_state_id_t state_id, int32_t status,
                    const char* service_name, const char* state_name,
                    const char* fmt, ...){
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b0a8      	sub	sp, #160	@ 0xa0
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	60ba      	str	r2, [r7, #8]
 80025f4:	607b      	str	r3, [r7, #4]
 80025f6:	4603      	mov	r3, r0
 80025f8:	73fb      	strb	r3, [r7, #15]
 80025fa:	460b      	mov	r3, r1
 80025fc:	73bb      	strb	r3, [r7, #14]
    (void)service_id;
    (void)state_id;
    (void)status;

    char text[128];
    if(fmt && fmt[0]){
 80025fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002602:	2b00      	cmp	r3, #0
 8002604:	d010      	beq.n	8002628 <log_event_auto+0x3c>
 8002606:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d00b      	beq.n	8002628 <log_event_auto+0x3c>
        va_list ap;
        va_start(ap, fmt);
 8002610:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8002614:	617b      	str	r3, [r7, #20]
        (void)vsnprintf(text, sizeof text, fmt, ap);
 8002616:	f107 0018 	add.w	r0, r7, #24
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002620:	2180      	movs	r1, #128	@ 0x80
 8002622:	f00c ffb7 	bl	800f594 <vsniprintf>
    if(fmt && fmt[0]){
 8002626:	e003      	b.n	8002630 <log_event_auto+0x44>
        va_end(ap);
    }else{
        text[0] = '?';
 8002628:	233f      	movs	r3, #63	@ 0x3f
 800262a:	763b      	strb	r3, [r7, #24]
        text[1] = '\0';
 800262c:	2300      	movs	r3, #0
 800262e:	767b      	strb	r3, [r7, #25]
    }
    const char* svc = service_name ? service_name : "?";
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d001      	beq.n	800263a <log_event_auto+0x4e>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	e000      	b.n	800263c <log_event_auto+0x50>
 800263a:	4b0d      	ldr	r3, [pc, #52]	@ (8002670 <log_event_auto+0x84>)
 800263c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    const char* stn = state_name ? state_name : "?";
 8002640:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002644:	2b00      	cmp	r3, #0
 8002646:	d002      	beq.n	800264e <log_event_auto+0x62>
 8002648:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800264c:	e000      	b.n	8002650 <log_event_auto+0x64>
 800264e:	4b08      	ldr	r3, [pc, #32]	@ (8002670 <log_event_auto+0x84>)
 8002650:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    printf("LOG:service=%s,state=%s,status=%s\r\n", svc, stn, text);
 8002654:	f107 0318 	add.w	r3, r7, #24
 8002658:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800265c:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 8002660:	4804      	ldr	r0, [pc, #16]	@ (8002674 <log_event_auto+0x88>)
 8002662:	f00c fe01 	bl	800f268 <iprintf>
}
 8002666:	bf00      	nop
 8002668:	37a0      	adds	r7, #160	@ 0xa0
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	080105d4 	.word	0x080105d4
 8002674:	080105d8 	.word	0x080105d8

08002678 <gpio_bsrr_set>:
    { GPIOB, GPIO_PIN_1, GPIOA, GPIO_PIN_2, GPIOD, GPIO_PIN_14,
      MOTION_ENCODER_TYPE_TIM, &htim5, NULL, 32u },
};

static inline void gpio_bsrr_set(GPIO_TypeDef *port, uint16_t pin)
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	460b      	mov	r3, r1
 8002682:	807b      	strh	r3, [r7, #2]
    if (!port) return;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d003      	beq.n	8002692 <gpio_bsrr_set+0x1a>
    port->BSRR = pin;
 800268a:	887a      	ldrh	r2, [r7, #2]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	619a      	str	r2, [r3, #24]
 8002690:	e000      	b.n	8002694 <gpio_bsrr_set+0x1c>
    if (!port) return;
 8002692:	bf00      	nop
}
 8002694:	370c      	adds	r7, #12
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr

0800269e <gpio_bsrr_reset>:
static inline void gpio_bsrr_reset(GPIO_TypeDef *port, uint16_t pin)
{
 800269e:	b480      	push	{r7}
 80026a0:	b083      	sub	sp, #12
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	6078      	str	r0, [r7, #4]
 80026a6:	460b      	mov	r3, r1
 80026a8:	807b      	strh	r3, [r7, #2]
    if (!port) return;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d004      	beq.n	80026ba <gpio_bsrr_reset+0x1c>
    port->BSRR = ((uint32_t)pin) << 16u;
 80026b0:	887b      	ldrh	r3, [r7, #2]
 80026b2:	041a      	lsls	r2, r3, #16
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	619a      	str	r2, [r3, #24]
 80026b8:	e000      	b.n	80026bc <gpio_bsrr_reset+0x1e>
    if (!port) return;
 80026ba:	bf00      	nop
}
 80026bc:	370c      	adds	r7, #12
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr
	...

080026c8 <motion_hw_init>:

void motion_hw_init(void)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
    // Garante STEP baixo e drivers desabilitados
    for (uint8_t i = 0; i < MOTION_AXIS_COUNT; ++i) {
 80026ce:	2300      	movs	r3, #0
 80026d0:	71fb      	strb	r3, [r7, #7]
 80026d2:	e02b      	b.n	800272c <motion_hw_init+0x64>
        gpio_bsrr_reset(g_axis[i].step_port, g_axis[i].step_pin);
 80026d4:	79fa      	ldrb	r2, [r7, #7]
 80026d6:	493d      	ldr	r1, [pc, #244]	@ (80027cc <motion_hw_init+0x104>)
 80026d8:	4613      	mov	r3, r2
 80026da:	00db      	lsls	r3, r3, #3
 80026dc:	4413      	add	r3, r2
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	440b      	add	r3, r1
 80026e2:	6818      	ldr	r0, [r3, #0]
 80026e4:	79fa      	ldrb	r2, [r7, #7]
 80026e6:	4939      	ldr	r1, [pc, #228]	@ (80027cc <motion_hw_init+0x104>)
 80026e8:	4613      	mov	r3, r2
 80026ea:	00db      	lsls	r3, r3, #3
 80026ec:	4413      	add	r3, r2
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	440b      	add	r3, r1
 80026f2:	3304      	adds	r3, #4
 80026f4:	881b      	ldrh	r3, [r3, #0]
 80026f6:	4619      	mov	r1, r3
 80026f8:	f7ff ffd1 	bl	800269e <gpio_bsrr_reset>
        // Enable ativo em baixo: mantém alto (desabilitado)
        gpio_bsrr_set(g_axis[i].ena_port, g_axis[i].ena_pin);
 80026fc:	79fa      	ldrb	r2, [r7, #7]
 80026fe:	4933      	ldr	r1, [pc, #204]	@ (80027cc <motion_hw_init+0x104>)
 8002700:	4613      	mov	r3, r2
 8002702:	00db      	lsls	r3, r3, #3
 8002704:	4413      	add	r3, r2
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	440b      	add	r3, r1
 800270a:	3310      	adds	r3, #16
 800270c:	6818      	ldr	r0, [r3, #0]
 800270e:	79fa      	ldrb	r2, [r7, #7]
 8002710:	492e      	ldr	r1, [pc, #184]	@ (80027cc <motion_hw_init+0x104>)
 8002712:	4613      	mov	r3, r2
 8002714:	00db      	lsls	r3, r3, #3
 8002716:	4413      	add	r3, r2
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	440b      	add	r3, r1
 800271c:	3314      	adds	r3, #20
 800271e:	881b      	ldrh	r3, [r3, #0]
 8002720:	4619      	mov	r1, r3
 8002722:	f7ff ffa9 	bl	8002678 <gpio_bsrr_set>
    for (uint8_t i = 0; i < MOTION_AXIS_COUNT; ++i) {
 8002726:	79fb      	ldrb	r3, [r7, #7]
 8002728:	3301      	adds	r3, #1
 800272a:	71fb      	strb	r3, [r7, #7]
 800272c:	79fb      	ldrb	r3, [r7, #7]
 800272e:	2b02      	cmp	r3, #2
 8002730:	d9d0      	bls.n	80026d4 <motion_hw_init+0xc>
    }

    // Zera contadores e inicia encoders conforme o tipo de periférico
    for (uint8_t i = 0; i < MOTION_AXIS_COUNT; ++i) {
 8002732:	2300      	movs	r3, #0
 8002734:	71bb      	strb	r3, [r7, #6]
 8002736:	e034      	b.n	80027a2 <motion_hw_init+0xda>
        const motion_axis_hw_t *axis = &g_axis[i];
 8002738:	79ba      	ldrb	r2, [r7, #6]
 800273a:	4613      	mov	r3, r2
 800273c:	00db      	lsls	r3, r3, #3
 800273e:	4413      	add	r3, r2
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	4a22      	ldr	r2, [pc, #136]	@ (80027cc <motion_hw_init+0x104>)
 8002744:	4413      	add	r3, r2
 8002746:	603b      	str	r3, [r7, #0]
        if (axis->encoder_type == MOTION_ENCODER_TYPE_TIM) {
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	7d9b      	ldrb	r3, [r3, #22]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d110      	bne.n	8002772 <motion_hw_init+0xaa>
            __HAL_TIM_SET_COUNTER(axis->tim, 0u);
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	699b      	ldr	r3, [r3, #24]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	2200      	movs	r2, #0
 8002758:	625a      	str	r2, [r3, #36]	@ 0x24
            if (HAL_TIM_Encoder_Start(axis->tim, TIM_CHANNEL_ALL) != HAL_OK) {
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	699b      	ldr	r3, [r3, #24]
 800275e:	213c      	movs	r1, #60	@ 0x3c
 8002760:	4618      	mov	r0, r3
 8002762:	f009 fcad 	bl	800c0c0 <HAL_TIM_Encoder_Start>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d017      	beq.n	800279c <motion_hw_init+0xd4>
                Error_Handler();
 800276c:	f003 fabe 	bl	8005cec <Error_Handler>
 8002770:	e014      	b.n	800279c <motion_hw_init+0xd4>
            }
        } else if (axis->encoder_type == MOTION_ENCODER_TYPE_LPTIM) {
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	7d9b      	ldrb	r3, [r3, #22]
 8002776:	2b01      	cmp	r3, #1
 8002778:	d110      	bne.n	800279c <motion_hw_init+0xd4>
            (void)HAL_LPTIM_Encoder_Stop(axis->lptim);
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	69db      	ldr	r3, [r3, #28]
 800277e:	4618      	mov	r0, r3
 8002780:	f005 fb2e 	bl	8007de0 <HAL_LPTIM_Encoder_Stop>
            if (HAL_LPTIM_Encoder_Start(axis->lptim, LPTIM_ENCODER_PERIOD) != HAL_OK) {
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	69db      	ldr	r3, [r3, #28]
 8002788:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800278c:	4618      	mov	r0, r3
 800278e:	f005 fa9d 	bl	8007ccc <HAL_LPTIM_Encoder_Start>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d001      	beq.n	800279c <motion_hw_init+0xd4>
                Error_Handler();
 8002798:	f003 faa8 	bl	8005cec <Error_Handler>
    for (uint8_t i = 0; i < MOTION_AXIS_COUNT; ++i) {
 800279c:	79bb      	ldrb	r3, [r7, #6]
 800279e:	3301      	adds	r3, #1
 80027a0:	71bb      	strb	r3, [r7, #6]
 80027a2:	79bb      	ldrb	r3, [r7, #6]
 80027a4:	2b02      	cmp	r3, #2
 80027a6:	d9c7      	bls.n	8002738 <motion_hw_init+0x70>
#endif
        }
    }

    // Mantém os EN dos eixos Y (1) e Z (2) ativados (nível baixo) conforme solicitado
    gpio_bsrr_reset(g_axis[1].ena_port, g_axis[1].ena_pin);
 80027a8:	4b09      	ldr	r3, [pc, #36]	@ (80027d0 <motion_hw_init+0x108>)
 80027aa:	2220      	movs	r2, #32
 80027ac:	4611      	mov	r1, r2
 80027ae:	4618      	mov	r0, r3
 80027b0:	f7ff ff75 	bl	800269e <gpio_bsrr_reset>
    gpio_bsrr_reset(g_axis[2].ena_port, g_axis[2].ena_pin);
 80027b4:	4b07      	ldr	r3, [pc, #28]	@ (80027d4 <motion_hw_init+0x10c>)
 80027b6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80027ba:	4611      	mov	r1, r2
 80027bc:	4618      	mov	r0, r3
 80027be:	f7ff ff6e 	bl	800269e <gpio_bsrr_reset>
}
 80027c2:	bf00      	nop
 80027c4:	3708      	adds	r7, #8
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	08010c68 	.word	0x08010c68
 80027d0:	48000800 	.word	0x48000800
 80027d4:	48000c00 	.word	0x48000c00

080027d8 <motion_hw_set_dir>:

void motion_hw_set_dir(uint8_t axis, uint8_t dir)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
 80027de:	4603      	mov	r3, r0
 80027e0:	460a      	mov	r2, r1
 80027e2:	71fb      	strb	r3, [r7, #7]
 80027e4:	4613      	mov	r3, r2
 80027e6:	71bb      	strb	r3, [r7, #6]
    if (axis >= MOTION_AXIS_COUNT) return;
 80027e8:	79fb      	ldrb	r3, [r7, #7]
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d82e      	bhi.n	800284c <motion_hw_set_dir+0x74>
    if (dir) gpio_bsrr_set(g_axis[axis].dir_port, g_axis[axis].dir_pin);
 80027ee:	79bb      	ldrb	r3, [r7, #6]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d015      	beq.n	8002820 <motion_hw_set_dir+0x48>
 80027f4:	79fa      	ldrb	r2, [r7, #7]
 80027f6:	4917      	ldr	r1, [pc, #92]	@ (8002854 <motion_hw_set_dir+0x7c>)
 80027f8:	4613      	mov	r3, r2
 80027fa:	00db      	lsls	r3, r3, #3
 80027fc:	4413      	add	r3, r2
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	440b      	add	r3, r1
 8002802:	3308      	adds	r3, #8
 8002804:	6818      	ldr	r0, [r3, #0]
 8002806:	79fa      	ldrb	r2, [r7, #7]
 8002808:	4912      	ldr	r1, [pc, #72]	@ (8002854 <motion_hw_set_dir+0x7c>)
 800280a:	4613      	mov	r3, r2
 800280c:	00db      	lsls	r3, r3, #3
 800280e:	4413      	add	r3, r2
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	440b      	add	r3, r1
 8002814:	330c      	adds	r3, #12
 8002816:	881b      	ldrh	r3, [r3, #0]
 8002818:	4619      	mov	r1, r3
 800281a:	f7ff ff2d 	bl	8002678 <gpio_bsrr_set>
 800281e:	e016      	b.n	800284e <motion_hw_set_dir+0x76>
    else     gpio_bsrr_reset(g_axis[axis].dir_port, g_axis[axis].dir_pin);
 8002820:	79fa      	ldrb	r2, [r7, #7]
 8002822:	490c      	ldr	r1, [pc, #48]	@ (8002854 <motion_hw_set_dir+0x7c>)
 8002824:	4613      	mov	r3, r2
 8002826:	00db      	lsls	r3, r3, #3
 8002828:	4413      	add	r3, r2
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	440b      	add	r3, r1
 800282e:	3308      	adds	r3, #8
 8002830:	6818      	ldr	r0, [r3, #0]
 8002832:	79fa      	ldrb	r2, [r7, #7]
 8002834:	4907      	ldr	r1, [pc, #28]	@ (8002854 <motion_hw_set_dir+0x7c>)
 8002836:	4613      	mov	r3, r2
 8002838:	00db      	lsls	r3, r3, #3
 800283a:	4413      	add	r3, r2
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	440b      	add	r3, r1
 8002840:	330c      	adds	r3, #12
 8002842:	881b      	ldrh	r3, [r3, #0]
 8002844:	4619      	mov	r1, r3
 8002846:	f7ff ff2a 	bl	800269e <gpio_bsrr_reset>
 800284a:	e000      	b.n	800284e <motion_hw_set_dir+0x76>
    if (axis >= MOTION_AXIS_COUNT) return;
 800284c:	bf00      	nop
}
 800284e:	3708      	adds	r7, #8
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}
 8002854:	08010c68 	.word	0x08010c68

08002858 <motion_hw_enable>:

void motion_hw_enable(uint8_t axis, uint8_t enable)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
 800285e:	4603      	mov	r3, r0
 8002860:	460a      	mov	r2, r1
 8002862:	71fb      	strb	r3, [r7, #7]
 8002864:	4613      	mov	r3, r2
 8002866:	71bb      	strb	r3, [r7, #6]
    if (axis >= MOTION_AXIS_COUNT) return;
 8002868:	79fb      	ldrb	r3, [r7, #7]
 800286a:	2b02      	cmp	r3, #2
 800286c:	d82e      	bhi.n	80028cc <motion_hw_enable+0x74>
    // Enable ativo em baixo: enable=1 -> força baixo
    if (enable) gpio_bsrr_reset(g_axis[axis].ena_port, g_axis[axis].ena_pin);
 800286e:	79bb      	ldrb	r3, [r7, #6]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d015      	beq.n	80028a0 <motion_hw_enable+0x48>
 8002874:	79fa      	ldrb	r2, [r7, #7]
 8002876:	4917      	ldr	r1, [pc, #92]	@ (80028d4 <motion_hw_enable+0x7c>)
 8002878:	4613      	mov	r3, r2
 800287a:	00db      	lsls	r3, r3, #3
 800287c:	4413      	add	r3, r2
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	440b      	add	r3, r1
 8002882:	3310      	adds	r3, #16
 8002884:	6818      	ldr	r0, [r3, #0]
 8002886:	79fa      	ldrb	r2, [r7, #7]
 8002888:	4912      	ldr	r1, [pc, #72]	@ (80028d4 <motion_hw_enable+0x7c>)
 800288a:	4613      	mov	r3, r2
 800288c:	00db      	lsls	r3, r3, #3
 800288e:	4413      	add	r3, r2
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	440b      	add	r3, r1
 8002894:	3314      	adds	r3, #20
 8002896:	881b      	ldrh	r3, [r3, #0]
 8002898:	4619      	mov	r1, r3
 800289a:	f7ff ff00 	bl	800269e <gpio_bsrr_reset>
 800289e:	e016      	b.n	80028ce <motion_hw_enable+0x76>
    else        gpio_bsrr_set(g_axis[axis].ena_port, g_axis[axis].ena_pin);
 80028a0:	79fa      	ldrb	r2, [r7, #7]
 80028a2:	490c      	ldr	r1, [pc, #48]	@ (80028d4 <motion_hw_enable+0x7c>)
 80028a4:	4613      	mov	r3, r2
 80028a6:	00db      	lsls	r3, r3, #3
 80028a8:	4413      	add	r3, r2
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	440b      	add	r3, r1
 80028ae:	3310      	adds	r3, #16
 80028b0:	6818      	ldr	r0, [r3, #0]
 80028b2:	79fa      	ldrb	r2, [r7, #7]
 80028b4:	4907      	ldr	r1, [pc, #28]	@ (80028d4 <motion_hw_enable+0x7c>)
 80028b6:	4613      	mov	r3, r2
 80028b8:	00db      	lsls	r3, r3, #3
 80028ba:	4413      	add	r3, r2
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	440b      	add	r3, r1
 80028c0:	3314      	adds	r3, #20
 80028c2:	881b      	ldrh	r3, [r3, #0]
 80028c4:	4619      	mov	r1, r3
 80028c6:	f7ff fed7 	bl	8002678 <gpio_bsrr_set>
 80028ca:	e000      	b.n	80028ce <motion_hw_enable+0x76>
    if (axis >= MOTION_AXIS_COUNT) return;
 80028cc:	bf00      	nop
}
 80028ce:	3708      	adds	r7, #8
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	08010c68 	.word	0x08010c68

080028d8 <motion_hw_step_high>:

void motion_hw_step_high(uint8_t axis)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
 80028de:	4603      	mov	r3, r0
 80028e0:	71fb      	strb	r3, [r7, #7]
    if (axis >= MOTION_AXIS_COUNT) return;
 80028e2:	79fb      	ldrb	r3, [r7, #7]
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	d814      	bhi.n	8002912 <motion_hw_step_high+0x3a>
    gpio_bsrr_set(g_axis[axis].step_port, g_axis[axis].step_pin);
 80028e8:	79fa      	ldrb	r2, [r7, #7]
 80028ea:	490c      	ldr	r1, [pc, #48]	@ (800291c <motion_hw_step_high+0x44>)
 80028ec:	4613      	mov	r3, r2
 80028ee:	00db      	lsls	r3, r3, #3
 80028f0:	4413      	add	r3, r2
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	440b      	add	r3, r1
 80028f6:	6818      	ldr	r0, [r3, #0]
 80028f8:	79fa      	ldrb	r2, [r7, #7]
 80028fa:	4908      	ldr	r1, [pc, #32]	@ (800291c <motion_hw_step_high+0x44>)
 80028fc:	4613      	mov	r3, r2
 80028fe:	00db      	lsls	r3, r3, #3
 8002900:	4413      	add	r3, r2
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	440b      	add	r3, r1
 8002906:	3304      	adds	r3, #4
 8002908:	881b      	ldrh	r3, [r3, #0]
 800290a:	4619      	mov	r1, r3
 800290c:	f7ff feb4 	bl	8002678 <gpio_bsrr_set>
 8002910:	e000      	b.n	8002914 <motion_hw_step_high+0x3c>
    if (axis >= MOTION_AXIS_COUNT) return;
 8002912:	bf00      	nop
}
 8002914:	3708      	adds	r7, #8
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	08010c68 	.word	0x08010c68

08002920 <motion_hw_step_low>:
void motion_hw_step_low(uint8_t axis)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b082      	sub	sp, #8
 8002924:	af00      	add	r7, sp, #0
 8002926:	4603      	mov	r3, r0
 8002928:	71fb      	strb	r3, [r7, #7]
    if (axis >= MOTION_AXIS_COUNT) return;
 800292a:	79fb      	ldrb	r3, [r7, #7]
 800292c:	2b02      	cmp	r3, #2
 800292e:	d814      	bhi.n	800295a <motion_hw_step_low+0x3a>
    gpio_bsrr_reset(g_axis[axis].step_port, g_axis[axis].step_pin);
 8002930:	79fa      	ldrb	r2, [r7, #7]
 8002932:	490c      	ldr	r1, [pc, #48]	@ (8002964 <motion_hw_step_low+0x44>)
 8002934:	4613      	mov	r3, r2
 8002936:	00db      	lsls	r3, r3, #3
 8002938:	4413      	add	r3, r2
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	440b      	add	r3, r1
 800293e:	6818      	ldr	r0, [r3, #0]
 8002940:	79fa      	ldrb	r2, [r7, #7]
 8002942:	4908      	ldr	r1, [pc, #32]	@ (8002964 <motion_hw_step_low+0x44>)
 8002944:	4613      	mov	r3, r2
 8002946:	00db      	lsls	r3, r3, #3
 8002948:	4413      	add	r3, r2
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	440b      	add	r3, r1
 800294e:	3304      	adds	r3, #4
 8002950:	881b      	ldrh	r3, [r3, #0]
 8002952:	4619      	mov	r1, r3
 8002954:	f7ff fea3 	bl	800269e <gpio_bsrr_reset>
 8002958:	e000      	b.n	800295c <motion_hw_step_low+0x3c>
    if (axis >= MOTION_AXIS_COUNT) return;
 800295a:	bf00      	nop
}
 800295c:	3708      	adds	r7, #8
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	08010c68 	.word	0x08010c68

08002968 <motion_hw_encoder_read_raw>:

uint32_t motion_hw_encoder_read_raw(uint8_t axis)
{
 8002968:	b480      	push	{r7}
 800296a:	b085      	sub	sp, #20
 800296c:	af00      	add	r7, sp, #0
 800296e:	4603      	mov	r3, r0
 8002970:	71fb      	strb	r3, [r7, #7]
    if (axis >= MOTION_AXIS_COUNT) return 0;
 8002972:	79fb      	ldrb	r3, [r7, #7]
 8002974:	2b02      	cmp	r3, #2
 8002976:	d901      	bls.n	800297c <motion_hw_encoder_read_raw+0x14>
 8002978:	2300      	movs	r3, #0
 800297a:	e015      	b.n	80029a8 <motion_hw_encoder_read_raw+0x40>
    const motion_axis_hw_t *hw = &g_axis[axis];
 800297c:	79fa      	ldrb	r2, [r7, #7]
 800297e:	4613      	mov	r3, r2
 8002980:	00db      	lsls	r3, r3, #3
 8002982:	4413      	add	r3, r2
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	4a0b      	ldr	r2, [pc, #44]	@ (80029b4 <motion_hw_encoder_read_raw+0x4c>)
 8002988:	4413      	add	r3, r2
 800298a:	60fb      	str	r3, [r7, #12]
    if (hw->encoder_type == MOTION_ENCODER_TYPE_TIM) {
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	7d9b      	ldrb	r3, [r3, #22]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d104      	bne.n	800299e <motion_hw_encoder_read_raw+0x36>
        return (uint32_t)__HAL_TIM_GET_COUNTER(hw->tim);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	699b      	ldr	r3, [r3, #24]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800299c:	e004      	b.n	80029a8 <motion_hw_encoder_read_raw+0x40>
    } else {
        return (uint32_t)(hw->lptim->Instance->CNT & 0xFFFFu);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	69db      	ldr	r3, [r3, #28]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	69db      	ldr	r3, [r3, #28]
 80029a6:	b29b      	uxth	r3, r3
    }
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3714      	adds	r7, #20
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr
 80029b4:	08010c68 	.word	0x08010c68

080029b8 <motion_hw_encoder_bits>:

uint8_t motion_hw_encoder_bits(uint8_t axis)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	4603      	mov	r3, r0
 80029c0:	71fb      	strb	r3, [r7, #7]
    if (axis >= MOTION_AXIS_COUNT) return 0u;
 80029c2:	79fb      	ldrb	r3, [r7, #7]
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d901      	bls.n	80029cc <motion_hw_encoder_bits+0x14>
 80029c8:	2300      	movs	r3, #0
 80029ca:	e008      	b.n	80029de <motion_hw_encoder_bits+0x26>
    return g_axis[axis].counter_bits;
 80029cc:	79fa      	ldrb	r2, [r7, #7]
 80029ce:	4907      	ldr	r1, [pc, #28]	@ (80029ec <motion_hw_encoder_bits+0x34>)
 80029d0:	4613      	mov	r3, r2
 80029d2:	00db      	lsls	r3, r3, #3
 80029d4:	4413      	add	r3, r2
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	440b      	add	r3, r1
 80029da:	3320      	adds	r3, #32
 80029dc:	781b      	ldrb	r3, [r3, #0]
}
 80029de:	4618      	mov	r0, r3
 80029e0:	370c      	adds	r7, #12
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr
 80029ea:	bf00      	nop
 80029ec:	08010c68 	.word	0x08010c68

080029f0 <dda_steps_per_rev>:
#define STEPS_PER_REV_BASE   400u
#define DDA_STEPS_PER_REV    (STEPS_PER_REV_BASE * MICROSTEP_FACTOR)
/* Encoders por rotação (fornecido): X/Z = 40000, Y = 2500 */
static const uint32_t ENC_COUNTS_PER_REV[3] = { 40000u, 2500u, 40000u };
static volatile uint16_t g_microstep_factor = MICROSTEP_FACTOR;
static inline uint32_t dda_steps_per_rev(void) { return STEPS_PER_REV_BASE * (uint32_t)g_microstep_factor; }
 80029f0:	b480      	push	{r7}
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	4b06      	ldr	r3, [pc, #24]	@ (8002a10 <dda_steps_per_rev+0x20>)
 80029f6:	881b      	ldrh	r3, [r3, #0]
 80029f8:	b29b      	uxth	r3, r3
 80029fa:	461a      	mov	r2, r3
 80029fc:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8002a00:	fb02 f303 	mul.w	r3, r2, r3
 8002a04:	4618      	mov	r0, r3
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr
 8002a0e:	bf00      	nop
 8002a10:	20000010 	.word	0x20000010

08002a14 <motion_lock>:
static volatile uint8_t g_demo_speed_idx = 1u;

/* =======================
 *  Helpers de lock
 * ======================= */
static inline uint32_t motion_lock(void) {
 8002a14:	b480      	push	{r7}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a1a:	f3ef 8310 	mrs	r3, PRIMASK
 8002a1e:	603b      	str	r3, [r7, #0]
  return(result);
 8002a20:	683b      	ldr	r3, [r7, #0]
    uint32_t primask = __get_PRIMASK();
 8002a22:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8002a24:	b672      	cpsid	i
}
 8002a26:	bf00      	nop
    __disable_irq();
    return primask;
 8002a28:	687b      	ldr	r3, [r7, #4]
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	370c      	adds	r7, #12
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr

08002a36 <motion_unlock>:
static inline void motion_unlock(uint32_t primask) {
 8002a36:	b480      	push	{r7}
 8002a38:	b085      	sub	sp, #20
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	6078      	str	r0, [r7, #4]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	f383 8810 	msr	PRIMASK, r3
}
 8002a48:	bf00      	nop
    __set_PRIMASK(primask);
}
 8002a4a:	bf00      	nop
 8002a4c:	3714      	adds	r7, #20
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr

08002a56 <motion_total_for_axis>:

/* =======================
 *  Helpers de acesso por eixo
 * ======================= */
static inline uint32_t motion_total_for_axis(const move_queue_add_req_t *req, uint8_t axis) {
 8002a56:	b480      	push	{r7}
 8002a58:	b083      	sub	sp, #12
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	6078      	str	r0, [r7, #4]
 8002a5e:	460b      	mov	r3, r1
 8002a60:	70fb      	strb	r3, [r7, #3]
    switch (axis) {
 8002a62:	78fb      	ldrb	r3, [r7, #3]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d002      	beq.n	8002a6e <motion_total_for_axis+0x18>
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d003      	beq.n	8002a74 <motion_total_for_axis+0x1e>
 8002a6c:	e005      	b.n	8002a7a <motion_total_for_axis+0x24>
        case AXIS_X: return req->sx;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	e004      	b.n	8002a7e <motion_total_for_axis+0x28>
        case AXIS_Y: return req->sy;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	e001      	b.n	8002a7e <motion_total_for_axis+0x28>
        case AXIS_Z:
        default:     return req->sz;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	695b      	ldr	r3, [r3, #20]
    }
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	370c      	adds	r7, #12
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr

08002a8a <motion_velocity_for_axis>:

static inline uint16_t motion_velocity_for_axis(const move_queue_add_req_t *req, uint8_t axis) {
 8002a8a:	b480      	push	{r7}
 8002a8c:	b083      	sub	sp, #12
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	6078      	str	r0, [r7, #4]
 8002a92:	460b      	mov	r3, r1
 8002a94:	70fb      	strb	r3, [r7, #3]
    switch (axis) {
 8002a96:	78fb      	ldrb	r3, [r7, #3]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d002      	beq.n	8002aa2 <motion_velocity_for_axis+0x18>
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d003      	beq.n	8002aa8 <motion_velocity_for_axis+0x1e>
 8002aa0:	e005      	b.n	8002aae <motion_velocity_for_axis+0x24>
        case AXIS_X: return req->vx;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	885b      	ldrh	r3, [r3, #2]
 8002aa6:	e004      	b.n	8002ab2 <motion_velocity_for_axis+0x28>
        case AXIS_Y: return req->vy;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	891b      	ldrh	r3, [r3, #8]
 8002aac:	e001      	b.n	8002ab2 <motion_velocity_for_axis+0x28>
        case AXIS_Z:
        default:     return req->vz;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	8a1b      	ldrh	r3, [r3, #16]
    }
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	370c      	adds	r7, #12
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr

08002abe <motion_kp_for_axis>:

static inline uint16_t motion_kp_for_axis(const move_queue_add_req_t *req, uint8_t axis) {
 8002abe:	b480      	push	{r7}
 8002ac0:	b083      	sub	sp, #12
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	6078      	str	r0, [r7, #4]
 8002ac6:	460b      	mov	r3, r1
 8002ac8:	70fb      	strb	r3, [r7, #3]
    switch (axis) {
 8002aca:	78fb      	ldrb	r3, [r7, #3]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d002      	beq.n	8002ad6 <motion_kp_for_axis+0x18>
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d003      	beq.n	8002adc <motion_kp_for_axis+0x1e>
 8002ad4:	e005      	b.n	8002ae2 <motion_kp_for_axis+0x24>
        case AXIS_X: return req->kp_x;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	8b1b      	ldrh	r3, [r3, #24]
 8002ada:	e004      	b.n	8002ae6 <motion_kp_for_axis+0x28>
        case AXIS_Y: return req->kp_y;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	8bdb      	ldrh	r3, [r3, #30]
 8002ae0:	e001      	b.n	8002ae6 <motion_kp_for_axis+0x28>
        case AXIS_Z:
        default:     return req->kp_z;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
    }
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	370c      	adds	r7, #12
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr

08002af2 <motion_ki_for_axis>:

static inline uint16_t motion_ki_for_axis(const move_queue_add_req_t *req, uint8_t axis) {
 8002af2:	b480      	push	{r7}
 8002af4:	b083      	sub	sp, #12
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	6078      	str	r0, [r7, #4]
 8002afa:	460b      	mov	r3, r1
 8002afc:	70fb      	strb	r3, [r7, #3]
    switch (axis) {
 8002afe:	78fb      	ldrb	r3, [r7, #3]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d002      	beq.n	8002b0a <motion_ki_for_axis+0x18>
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d003      	beq.n	8002b10 <motion_ki_for_axis+0x1e>
 8002b08:	e005      	b.n	8002b16 <motion_ki_for_axis+0x24>
        case AXIS_X: return req->ki_x;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	8b5b      	ldrh	r3, [r3, #26]
 8002b0e:	e004      	b.n	8002b1a <motion_ki_for_axis+0x28>
        case AXIS_Y: return req->ki_y;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	8c1b      	ldrh	r3, [r3, #32]
 8002b14:	e001      	b.n	8002b1a <motion_ki_for_axis+0x28>
        case AXIS_Z:
        default:     return req->ki_z;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
    }
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	370c      	adds	r7, #12
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr

08002b26 <motion_kd_for_axis>:

static inline uint16_t motion_kd_for_axis(const move_queue_add_req_t *req, uint8_t axis) {
 8002b26:	b480      	push	{r7}
 8002b28:	b083      	sub	sp, #12
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	6078      	str	r0, [r7, #4]
 8002b2e:	460b      	mov	r3, r1
 8002b30:	70fb      	strb	r3, [r7, #3]
    switch (axis) {
 8002b32:	78fb      	ldrb	r3, [r7, #3]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d002      	beq.n	8002b3e <motion_kd_for_axis+0x18>
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d003      	beq.n	8002b44 <motion_kd_for_axis+0x1e>
 8002b3c:	e005      	b.n	8002b4a <motion_kd_for_axis+0x24>
        case AXIS_X: return req->kd_x;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	8b9b      	ldrh	r3, [r3, #28]
 8002b42:	e004      	b.n	8002b4e <motion_kd_for_axis+0x28>
        case AXIS_Y: return req->kd_y;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8002b48:	e001      	b.n	8002b4e <motion_kd_for_axis+0x28>
        case AXIS_Z:
        default:     return req->kd_z;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    }
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	370c      	adds	r7, #12
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr

08002b5a <motion_clamp_error>:

static inline int8_t motion_clamp_error(int32_t value) {
 8002b5a:	b480      	push	{r7}
 8002b5c:	b083      	sub	sp, #12
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	6078      	str	r0, [r7, #4]
    if (value > 127)  return 127;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2b7f      	cmp	r3, #127	@ 0x7f
 8002b66:	dd01      	ble.n	8002b6c <motion_clamp_error+0x12>
 8002b68:	237f      	movs	r3, #127	@ 0x7f
 8002b6a:	e008      	b.n	8002b7e <motion_clamp_error+0x24>
    if (value < -128) return -128;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	f113 0f80 	cmn.w	r3, #128	@ 0x80
 8002b72:	da02      	bge.n	8002b7a <motion_clamp_error+0x20>
 8002b74:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 8002b78:	e001      	b.n	8002b7e <motion_clamp_error+0x24>
    return (int8_t)value;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	b25b      	sxtb	r3, r3
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	370c      	adds	r7, #12
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr
	...

08002b8c <motion_remaining_steps_total_for_axis>:

/* Soma restante (em passos) no eixo, incluindo segmento ativo + fila
 * Usado para decidir desaceleração suave no final da lista de movimentos. */
static uint32_t motion_remaining_steps_total_for_axis(uint8_t axis)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b088      	sub	sp, #32
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	4603      	mov	r3, r0
 8002b94:	71fb      	strb	r3, [r7, #7]
    uint32_t rem = 0u;
 8002b96:	2300      	movs	r3, #0
 8002b98:	61fb      	str	r3, [r7, #28]
    if (axis < MOTION_AXIS_COUNT) {
 8002b9a:	79fb      	ldrb	r3, [r7, #7]
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	d815      	bhi.n	8002bcc <motion_remaining_steps_total_for_axis+0x40>
        const motion_axis_state_t *ax = &g_axis_state[axis];
 8002ba0:	79fa      	ldrb	r2, [r7, #7]
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	005b      	lsls	r3, r3, #1
 8002ba6:	4413      	add	r3, r2
 8002ba8:	011b      	lsls	r3, r3, #4
 8002baa:	4a1c      	ldr	r2, [pc, #112]	@ (8002c1c <motion_remaining_steps_total_for_axis+0x90>)
 8002bac:	4413      	add	r3, r2
 8002bae:	617b      	str	r3, [r7, #20]
        if (ax->total_steps > ax->emitted_steps)
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d907      	bls.n	8002bcc <motion_remaining_steps_total_for_axis+0x40>
            rem += (ax->total_steps - ax->emitted_steps);
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	69fa      	ldr	r2, [r7, #28]
 8002bc8:	4413      	add	r3, r2
 8002bca:	61fb      	str	r3, [r7, #28]
    }
    for (uint8_t i = 0; i < g_queue_count; ++i) {
 8002bcc:	2300      	movs	r3, #0
 8002bce:	76fb      	strb	r3, [r7, #27]
 8002bd0:	e01a      	b.n	8002c08 <motion_remaining_steps_total_for_axis+0x7c>
        uint8_t idxq = (uint8_t)((g_queue_head + i) % MOTION_QUEUE_CAPACITY);
 8002bd2:	4b13      	ldr	r3, [pc, #76]	@ (8002c20 <motion_remaining_steps_total_for_axis+0x94>)
 8002bd4:	781a      	ldrb	r2, [r3, #0]
 8002bd6:	7efb      	ldrb	r3, [r7, #27]
 8002bd8:	4413      	add	r3, r2
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002be0:	74fb      	strb	r3, [r7, #19]
        const move_queue_add_req_t *q = &g_queue[idxq].req;
 8002be2:	7cfb      	ldrb	r3, [r7, #19]
 8002be4:	222c      	movs	r2, #44	@ 0x2c
 8002be6:	fb02 f303 	mul.w	r3, r2, r3
 8002bea:	4a0e      	ldr	r2, [pc, #56]	@ (8002c24 <motion_remaining_steps_total_for_axis+0x98>)
 8002bec:	4413      	add	r3, r2
 8002bee:	60fb      	str	r3, [r7, #12]
        rem += motion_total_for_axis(q, axis);
 8002bf0:	79fb      	ldrb	r3, [r7, #7]
 8002bf2:	4619      	mov	r1, r3
 8002bf4:	68f8      	ldr	r0, [r7, #12]
 8002bf6:	f7ff ff2e 	bl	8002a56 <motion_total_for_axis>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	4413      	add	r3, r2
 8002c00:	61fb      	str	r3, [r7, #28]
    for (uint8_t i = 0; i < g_queue_count; ++i) {
 8002c02:	7efb      	ldrb	r3, [r7, #27]
 8002c04:	3301      	adds	r3, #1
 8002c06:	76fb      	strb	r3, [r7, #27]
 8002c08:	4b07      	ldr	r3, [pc, #28]	@ (8002c28 <motion_remaining_steps_total_for_axis+0x9c>)
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	7efa      	ldrb	r2, [r7, #27]
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d3df      	bcc.n	8002bd2 <motion_remaining_steps_total_for_axis+0x46>
    }
    return rem;
 8002c12:	69fb      	ldr	r3, [r7, #28]
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	3720      	adds	r7, #32
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	200000d8 	.word	0x200000d8
 8002c20:	20000c6c 	.word	0x20000c6c
 8002c24:	2000016c 	.word	0x2000016c
 8002c28:	20000c6e 	.word	0x20000c6e

08002c2c <motion_refresh_status_locked>:

/* =======================
 *  Status e fila
 * ======================= */
static void motion_refresh_status_locked(void) {
 8002c2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c30:	b0ab      	sub	sp, #172	@ 0xac
 8002c32:	af00      	add	r7, sp, #0
    g_status.queue_depth = (uint8_t)(g_queue_count + (g_has_active_segment ? 1u : 0u));
 8002c34:	4bc2      	ldr	r3, [pc, #776]	@ (8002f40 <motion_refresh_status_locked+0x314>)
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d001      	beq.n	8002c42 <motion_refresh_status_locked+0x16>
 8002c3e:	2201      	movs	r2, #1
 8002c40:	e000      	b.n	8002c44 <motion_refresh_status_locked+0x18>
 8002c42:	2200      	movs	r2, #0
 8002c44:	4bbf      	ldr	r3, [pc, #764]	@ (8002f44 <motion_refresh_status_locked+0x318>)
 8002c46:	781b      	ldrb	r3, [r3, #0]
 8002c48:	4413      	add	r3, r2
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	4abe      	ldr	r2, [pc, #760]	@ (8002f48 <motion_refresh_status_locked+0x31c>)
 8002c4e:	7053      	strb	r3, [r2, #1]

    for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8002c50:	2300      	movs	r3, #0
 8002c52:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
 8002c56:	e167      	b.n	8002f28 <motion_refresh_status_locked+0x2fc>
        const motion_axis_state_t *ax = &g_axis_state[axis];
 8002c58:	f897 20a7 	ldrb.w	r2, [r7, #167]	@ 0xa7
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	005b      	lsls	r3, r3, #1
 8002c60:	4413      	add	r3, r2
 8002c62:	011b      	lsls	r3, r3, #4
 8002c64:	4ab9      	ldr	r2, [pc, #740]	@ (8002f4c <motion_refresh_status_locked+0x320>)
 8002c66:	4413      	add	r3, r2
 8002c68:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
        uint32_t total = ax->total_steps;
 8002c6c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
        uint32_t emitted = ax->emitted_steps;
 8002c76:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
        uint8_t pct = 0u;
 8002c80:	2300      	movs	r3, #0
 8002c82:	f887 30a6 	strb.w	r3, [r7, #166]	@ 0xa6

        if (g_has_active_segment && total > 0u) {
 8002c86:	4bae      	ldr	r3, [pc, #696]	@ (8002f40 <motion_refresh_status_locked+0x314>)
 8002c88:	781b      	ldrb	r3, [r3, #0]
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d04c      	beq.n	8002d2a <motion_refresh_status_locked+0xfe>
 8002c90:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d048      	beq.n	8002d2a <motion_refresh_status_locked+0xfe>
            uint64_t scaled = (uint64_t)emitted * 100u;
 8002c98:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	663b      	str	r3, [r7, #96]	@ 0x60
 8002ca0:	667a      	str	r2, [r7, #100]	@ 0x64
 8002ca2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8002ca6:	1891      	adds	r1, r2, r2
 8002ca8:	6239      	str	r1, [r7, #32]
 8002caa:	415b      	adcs	r3, r3
 8002cac:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002cb2:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8002cb4:	eb12 0801 	adds.w	r8, r2, r1
 8002cb8:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8002cba:	eb43 0901 	adc.w	r9, r3, r1
 8002cbe:	f04f 0200 	mov.w	r2, #0
 8002cc2:	f04f 0300 	mov.w	r3, #0
 8002cc6:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8002cca:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8002cce:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8002cd2:	eb18 0102 	adds.w	r1, r8, r2
 8002cd6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002cd8:	eb49 0303 	adc.w	r3, r9, r3
 8002cdc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002cde:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002ce0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	189b      	adds	r3, r3, r2
 8002ce8:	61bb      	str	r3, [r7, #24]
 8002cea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002cec:	460a      	mov	r2, r1
 8002cee:	4153      	adcs	r3, r2
 8002cf0:	61fb      	str	r3, [r7, #28]
 8002cf2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002cf6:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
            pct = (uint8_t)(scaled / total);
 8002cfa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002cfe:	2200      	movs	r2, #0
 8002d00:	643b      	str	r3, [r7, #64]	@ 0x40
 8002d02:	647a      	str	r2, [r7, #68]	@ 0x44
 8002d04:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002d08:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002d0c:	f7fd fb00 	bl	8000310 <__aeabi_uldivmod>
 8002d10:	4602      	mov	r2, r0
 8002d12:	460b      	mov	r3, r1
 8002d14:	4613      	mov	r3, r2
 8002d16:	f887 30a6 	strb.w	r3, [r7, #166]	@ 0xa6
            if (pct > 100u) pct = 100u;
 8002d1a:	f897 30a6 	ldrb.w	r3, [r7, #166]	@ 0xa6
 8002d1e:	2b64      	cmp	r3, #100	@ 0x64
 8002d20:	d95a      	bls.n	8002dd8 <motion_refresh_status_locked+0x1ac>
 8002d22:	2364      	movs	r3, #100	@ 0x64
 8002d24:	f887 30a6 	strb.w	r3, [r7, #166]	@ 0xa6
        if (g_has_active_segment && total > 0u) {
 8002d28:	e056      	b.n	8002dd8 <motion_refresh_status_locked+0x1ac>
        } else if (total == 0u && g_has_active_segment) {
 8002d2a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d108      	bne.n	8002d44 <motion_refresh_status_locked+0x118>
 8002d32:	4b83      	ldr	r3, [pc, #524]	@ (8002f40 <motion_refresh_status_locked+0x314>)
 8002d34:	781b      	ldrb	r3, [r3, #0]
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d003      	beq.n	8002d44 <motion_refresh_status_locked+0x118>
            pct = 100u;
 8002d3c:	2364      	movs	r3, #100	@ 0x64
 8002d3e:	f887 30a6 	strb.w	r3, [r7, #166]	@ 0xa6
 8002d42:	e04a      	b.n	8002dda <motion_refresh_status_locked+0x1ae>
        } else if (!g_has_active_segment && total > 0u) {
 8002d44:	4b7e      	ldr	r3, [pc, #504]	@ (8002f40 <motion_refresh_status_locked+0x314>)
 8002d46:	781b      	ldrb	r3, [r3, #0]
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d145      	bne.n	8002dda <motion_refresh_status_locked+0x1ae>
 8002d4e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d041      	beq.n	8002dda <motion_refresh_status_locked+0x1ae>
            pct = (emitted >= total) ? 100u : (uint8_t)(((uint64_t)emitted * 100u) / total);
 8002d56:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8002d5a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d236      	bcs.n	8002dd0 <motion_refresh_status_locked+0x1a4>
 8002d62:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002d66:	2200      	movs	r2, #0
 8002d68:	469a      	mov	sl, r3
 8002d6a:	4693      	mov	fp, r2
 8002d6c:	4652      	mov	r2, sl
 8002d6e:	465b      	mov	r3, fp
 8002d70:	1891      	adds	r1, r2, r2
 8002d72:	6139      	str	r1, [r7, #16]
 8002d74:	415b      	adcs	r3, r3
 8002d76:	617b      	str	r3, [r7, #20]
 8002d78:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002d7c:	eb12 040a 	adds.w	r4, r2, sl
 8002d80:	eb43 050b 	adc.w	r5, r3, fp
 8002d84:	f04f 0200 	mov.w	r2, #0
 8002d88:	f04f 0300 	mov.w	r3, #0
 8002d8c:	016b      	lsls	r3, r5, #5
 8002d8e:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8002d92:	0162      	lsls	r2, r4, #5
 8002d94:	18a1      	adds	r1, r4, r2
 8002d96:	60b9      	str	r1, [r7, #8]
 8002d98:	eb45 0303 	adc.w	r3, r5, r3
 8002d9c:	60fb      	str	r3, [r7, #12]
 8002d9e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8002da2:	460b      	mov	r3, r1
 8002da4:	eb13 030a 	adds.w	r3, r3, sl
 8002da8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002daa:	4613      	mov	r3, r2
 8002dac:	eb43 030b 	adc.w	r3, r3, fp
 8002db0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002db2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002db6:	2200      	movs	r2, #0
 8002db8:	633b      	str	r3, [r7, #48]	@ 0x30
 8002dba:	637a      	str	r2, [r7, #52]	@ 0x34
 8002dbc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002dc0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8002dc4:	f7fd faa4 	bl	8000310 <__aeabi_uldivmod>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	460b      	mov	r3, r1
 8002dcc:	b2d3      	uxtb	r3, r2
 8002dce:	e000      	b.n	8002dd2 <motion_refresh_status_locked+0x1a6>
 8002dd0:	2364      	movs	r3, #100	@ 0x64
 8002dd2:	f887 30a6 	strb.w	r3, [r7, #166]	@ 0xa6
 8002dd6:	e000      	b.n	8002dda <motion_refresh_status_locked+0x1ae>
        if (g_has_active_segment && total > 0u) {
 8002dd8:	bf00      	nop

        /* Erro em UNIDADES DE PASSOS (alinhado ao PI de posição)
         * desired_steps = passos emitidos no segmento (target_steps)
         * actual_steps  = encoder_rel convertido para passos DDA
         */
        int64_t enc_rel = g_encoder_position[axis] - g_encoder_origin[axis];
 8002dda:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8002dde:	4a5c      	ldr	r2, [pc, #368]	@ (8002f50 <motion_refresh_status_locked+0x324>)
 8002de0:	00db      	lsls	r3, r3, #3
 8002de2:	4413      	add	r3, r2
 8002de4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002de8:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8002dec:	4a59      	ldr	r2, [pc, #356]	@ (8002f54 <motion_refresh_status_locked+0x328>)
 8002dee:	00db      	lsls	r3, r3, #3
 8002df0:	4413      	add	r3, r2
 8002df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002df6:	1a86      	subs	r6, r0, r2
 8002df8:	603e      	str	r6, [r7, #0]
 8002dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8002dfe:	607b      	str	r3, [r7, #4]
 8002e00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002e04:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
        if (enc_rel > (int64_t)INT32_MAX) enc_rel = INT32_MAX;
 8002e08:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 8002e0c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8002e10:	f173 0300 	sbcs.w	r3, r3, #0
 8002e14:	db06      	blt.n	8002e24 <motion_refresh_status_locked+0x1f8>
 8002e16:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8002e1a:	f04f 0300 	mov.w	r3, #0
 8002e1e:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
 8002e22:	e00c      	b.n	8002e3e <motion_refresh_status_locked+0x212>
        else if (enc_rel < (int64_t)INT32_MIN) enc_rel = INT32_MIN;
 8002e24:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 8002e28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8002e2c:	f173 33ff 	sbcs.w	r3, r3, #4294967295
 8002e30:	da05      	bge.n	8002e3e <motion_refresh_status_locked+0x212>
 8002e32:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002e36:	f04f 33ff 	mov.w	r3, #4294967295
 8002e3a:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
        int64_t num = enc_rel * (int64_t)dda_steps_per_rev();
 8002e3e:	f7ff fdd7 	bl	80029f0 <dda_steps_per_rev>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2200      	movs	r2, #0
 8002e46:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002e48:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002e4a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002e4e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8002e52:	4602      	mov	r2, r0
 8002e54:	fb02 f203 	mul.w	r2, r2, r3
 8002e58:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002e5c:	e9c7 0116 	strd	r0, r1, [r7, #88]	@ 0x58
 8002e60:	fb01 f303 	mul.w	r3, r1, r3
 8002e64:	441a      	add	r2, r3
 8002e66:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002e6a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8002e6c:	fba3 1301 	umull	r1, r3, r3, r1
 8002e70:	657b      	str	r3, [r7, #84]	@ 0x54
 8002e72:	460b      	mov	r3, r1
 8002e74:	653b      	str	r3, [r7, #80]	@ 0x50
 8002e76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e78:	18d3      	adds	r3, r2, r3
 8002e7a:	657b      	str	r3, [r7, #84]	@ 0x54
 8002e7c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002e80:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
 8002e84:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
        int32_t actual_steps = (ENC_COUNTS_PER_REV[axis]
 8002e88:	f897 20a7 	ldrb.w	r2, [r7, #167]	@ 0xa7
 8002e8c:	4b32      	ldr	r3, [pc, #200]	@ (8002f58 <motion_refresh_status_locked+0x32c>)
 8002e8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
                                ? (int32_t)(num / (int64_t)ENC_COUNTS_PER_REV[axis])
                                : 0);
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d011      	beq.n	8002eba <motion_refresh_status_locked+0x28e>
                                ? (int32_t)(num / (int64_t)ENC_COUNTS_PER_REV[axis])
 8002e96:	f897 20a7 	ldrb.w	r2, [r7, #167]	@ 0xa7
 8002e9a:	4b2f      	ldr	r3, [pc, #188]	@ (8002f58 <motion_refresh_status_locked+0x32c>)
 8002e9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002ea4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002ea6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002eaa:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8002eae:	f7fd f9df 	bl	8000270 <__aeabi_ldivmod>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	460b      	mov	r3, r1
                                : 0);
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	e000      	b.n	8002ebc <motion_refresh_status_locked+0x290>
 8002eba:	2300      	movs	r3, #0
        int32_t actual_steps = (ENC_COUNTS_PER_REV[axis]
 8002ebc:	677b      	str	r3, [r7, #116]	@ 0x74
        int32_t desired_steps = (int32_t)ax->target_steps;
 8002ebe:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	673b      	str	r3, [r7, #112]	@ 0x70
        int32_t err = desired_steps - actual_steps;
 8002ec6:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8002ec8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002eca:	1ad3      	subs	r3, r2, r3
 8002ecc:	66fb      	str	r3, [r7, #108]	@ 0x6c
        int8_t  err8 = motion_clamp_error(err);
 8002ece:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8002ed0:	f7ff fe43 	bl	8002b5a <motion_clamp_error>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

        switch (axis) {
 8002eda:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d002      	beq.n	8002ee8 <motion_refresh_status_locked+0x2bc>
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d009      	beq.n	8002efa <motion_refresh_status_locked+0x2ce>
 8002ee6:	e011      	b.n	8002f0c <motion_refresh_status_locked+0x2e0>
            case AXIS_X: g_status.pctX = pct; g_status.pidErrX = err8; break;
 8002ee8:	4a17      	ldr	r2, [pc, #92]	@ (8002f48 <motion_refresh_status_locked+0x31c>)
 8002eea:	f897 30a6 	ldrb.w	r3, [r7, #166]	@ 0xa6
 8002eee:	7093      	strb	r3, [r2, #2]
 8002ef0:	4a15      	ldr	r2, [pc, #84]	@ (8002f48 <motion_refresh_status_locked+0x31c>)
 8002ef2:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8002ef6:	7153      	strb	r3, [r2, #5]
 8002ef8:	e011      	b.n	8002f1e <motion_refresh_status_locked+0x2f2>
            case AXIS_Y: g_status.pctY = pct; g_status.pidErrY = err8; break;
 8002efa:	4a13      	ldr	r2, [pc, #76]	@ (8002f48 <motion_refresh_status_locked+0x31c>)
 8002efc:	f897 30a6 	ldrb.w	r3, [r7, #166]	@ 0xa6
 8002f00:	70d3      	strb	r3, [r2, #3]
 8002f02:	4a11      	ldr	r2, [pc, #68]	@ (8002f48 <motion_refresh_status_locked+0x31c>)
 8002f04:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8002f08:	7193      	strb	r3, [r2, #6]
 8002f0a:	e008      	b.n	8002f1e <motion_refresh_status_locked+0x2f2>
            case AXIS_Z:
            default:     g_status.pctZ = pct; g_status.pidErrZ = err8; break;
 8002f0c:	4a0e      	ldr	r2, [pc, #56]	@ (8002f48 <motion_refresh_status_locked+0x31c>)
 8002f0e:	f897 30a6 	ldrb.w	r3, [r7, #166]	@ 0xa6
 8002f12:	7113      	strb	r3, [r2, #4]
 8002f14:	4a0c      	ldr	r2, [pc, #48]	@ (8002f48 <motion_refresh_status_locked+0x31c>)
 8002f16:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8002f1a:	71d3      	strb	r3, [r2, #7]
 8002f1c:	bf00      	nop
    for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8002f1e:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8002f22:	3301      	adds	r3, #1
 8002f24:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
 8002f28:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8002f2c:	2b02      	cmp	r3, #2
 8002f2e:	f67f ae93 	bls.w	8002c58 <motion_refresh_status_locked+0x2c>
        }
    }
}
 8002f32:	bf00      	nop
 8002f34:	bf00      	nop
 8002f36:	37ac      	adds	r7, #172	@ 0xac
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f3e:	bf00      	nop
 8002f40:	20000168 	.word	0x20000168
 8002f44:	20000c6e 	.word	0x20000c6e
 8002f48:	200000d0 	.word	0x200000d0
 8002f4c:	200000d8 	.word	0x200000d8
 8002f50:	20000c70 	.word	0x20000c70
 8002f54:	20000c98 	.word	0x20000c98
 8002f58:	08010cd4 	.word	0x08010cd4

08002f5c <motion_stop_all_axes_locked>:


static void motion_stop_all_axes_locked(void) {
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b082      	sub	sp, #8
 8002f60:	af00      	add	r7, sp, #0
    for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8002f62:	2300      	movs	r3, #0
 8002f64:	71fb      	strb	r3, [r7, #7]
 8002f66:	e045      	b.n	8002ff4 <motion_stop_all_axes_locked+0x98>
        motion_hw_step_low(axis);
 8002f68:	79fb      	ldrb	r3, [r7, #7]
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f7ff fcd8 	bl	8002920 <motion_hw_step_low>
        motion_hw_enable(axis, 0u);
 8002f70:	79fb      	ldrb	r3, [r7, #7]
 8002f72:	2100      	movs	r1, #0
 8002f74:	4618      	mov	r0, r3
 8002f76:	f7ff fc6f 	bl	8002858 <motion_hw_enable>

        motion_axis_state_t *ax = &g_axis_state[axis];
 8002f7a:	79fa      	ldrb	r2, [r7, #7]
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	005b      	lsls	r3, r3, #1
 8002f80:	4413      	add	r3, r2
 8002f82:	011b      	lsls	r3, r3, #4
 8002f84:	4a1f      	ldr	r2, [pc, #124]	@ (8003004 <motion_stop_all_axes_locked+0xa8>)
 8002f86:	4413      	add	r3, r2
 8002f88:	603b      	str	r3, [r7, #0]
        ax->total_steps       = 0u;
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	601a      	str	r2, [r3, #0]
        ax->target_steps      = 0u;
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	2200      	movs	r2, #0
 8002f94:	605a      	str	r2, [r3, #4]
        ax->emitted_steps     = 0u;
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	609a      	str	r2, [r3, #8]

        ax->velocity_per_tick = 0u;
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	819a      	strh	r2, [r3, #12]
        ax->kp = 0u; ax->ki = 0u; ax->kd = 0u;
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	81da      	strh	r2, [r3, #14]
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	2200      	movs	r2, #0
 8002fac:	821a      	strh	r2, [r3, #16]
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	825a      	strh	r2, [r3, #18]

        /* limpa controle de pulso/guardas */
        ax->step_high         = 0u;
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	751a      	strb	r2, [r3, #20]
        ax->step_low          = 0u;
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	755a      	strb	r2, [r3, #21]
        ax->en_settle_ticks   = 0u;
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
        ax->dir_settle_ticks  = 0u;
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

        /* limpa DDA/rampa */
        ax->dda_accum_q16     = 0u;
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	619a      	str	r2, [r3, #24]
        ax->dda_inc_q16       = 0u;
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	61da      	str	r2, [r3, #28]
        ax->v_target_sps      = 0u;
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	621a      	str	r2, [r3, #32]
        ax->v_actual_sps      = 0u;
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	625a      	str	r2, [r3, #36]	@ 0x24
        ax->accel_sps2        = 0u;
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	2200      	movs	r2, #0
 8002fec:	629a      	str	r2, [r3, #40]	@ 0x28
    for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8002fee:	79fb      	ldrb	r3, [r7, #7]
 8002ff0:	3301      	adds	r3, #1
 8002ff2:	71fb      	strb	r3, [r7, #7]
 8002ff4:	79fb      	ldrb	r3, [r7, #7]
 8002ff6:	2b02      	cmp	r3, #2
 8002ff8:	d9b6      	bls.n	8002f68 <motion_stop_all_axes_locked+0xc>
    }
}
 8002ffa:	bf00      	nop
 8002ffc:	bf00      	nop
 8002ffe:	3708      	adds	r7, #8
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}
 8003004:	200000d8 	.word	0x200000d8

08003008 <motion_queue_clear_locked>:


static void motion_queue_clear_locked(void) {
 8003008:	b480      	push	{r7}
 800300a:	af00      	add	r7, sp, #0
    g_queue_head = 0u;
 800300c:	4b06      	ldr	r3, [pc, #24]	@ (8003028 <motion_queue_clear_locked+0x20>)
 800300e:	2200      	movs	r2, #0
 8003010:	701a      	strb	r2, [r3, #0]
    g_queue_tail = 0u;
 8003012:	4b06      	ldr	r3, [pc, #24]	@ (800302c <motion_queue_clear_locked+0x24>)
 8003014:	2200      	movs	r2, #0
 8003016:	701a      	strb	r2, [r3, #0]
    g_queue_count = 0u;
 8003018:	4b05      	ldr	r3, [pc, #20]	@ (8003030 <motion_queue_clear_locked+0x28>)
 800301a:	2200      	movs	r2, #0
 800301c:	701a      	strb	r2, [r3, #0]
}
 800301e:	bf00      	nop
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr
 8003028:	20000c6c 	.word	0x20000c6c
 800302c:	20000c6d 	.word	0x20000c6d
 8003030:	20000c6e 	.word	0x20000c6e

08003034 <motion_queue_push_locked>:

static proto_result_t motion_queue_push_locked(const move_queue_add_req_t *req) {
 8003034:	b5b0      	push	{r4, r5, r7, lr}
 8003036:	b082      	sub	sp, #8
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
    if (g_queue_count >= MOTION_QUEUE_CAPACITY)
 800303c:	4b17      	ldr	r3, [pc, #92]	@ (800309c <motion_queue_push_locked+0x68>)
 800303e:	781b      	ldrb	r3, [r3, #0]
 8003040:	2b3f      	cmp	r3, #63	@ 0x3f
 8003042:	d902      	bls.n	800304a <motion_queue_push_locked+0x16>
        return PROTO_ERR_RANGE;
 8003044:	f06f 0303 	mvn.w	r3, #3
 8003048:	e024      	b.n	8003094 <motion_queue_push_locked+0x60>
    g_queue[g_queue_tail].req = *req;
 800304a:	4b15      	ldr	r3, [pc, #84]	@ (80030a0 <motion_queue_push_locked+0x6c>)
 800304c:	781b      	ldrb	r3, [r3, #0]
 800304e:	4619      	mov	r1, r3
 8003050:	4a14      	ldr	r2, [pc, #80]	@ (80030a4 <motion_queue_push_locked+0x70>)
 8003052:	232c      	movs	r3, #44	@ 0x2c
 8003054:	fb01 f303 	mul.w	r3, r1, r3
 8003058:	441a      	add	r2, r3
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4614      	mov	r4, r2
 800305e:	461d      	mov	r5, r3
 8003060:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003062:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003064:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003066:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003068:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800306c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    g_queue_tail = (uint8_t)((g_queue_tail + 1u) % MOTION_QUEUE_CAPACITY);
 8003070:	4b0b      	ldr	r3, [pc, #44]	@ (80030a0 <motion_queue_push_locked+0x6c>)
 8003072:	781b      	ldrb	r3, [r3, #0]
 8003074:	3301      	adds	r3, #1
 8003076:	b2db      	uxtb	r3, r3
 8003078:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800307c:	b2da      	uxtb	r2, r3
 800307e:	4b08      	ldr	r3, [pc, #32]	@ (80030a0 <motion_queue_push_locked+0x6c>)
 8003080:	701a      	strb	r2, [r3, #0]
    ++g_queue_count;
 8003082:	4b06      	ldr	r3, [pc, #24]	@ (800309c <motion_queue_push_locked+0x68>)
 8003084:	781b      	ldrb	r3, [r3, #0]
 8003086:	3301      	adds	r3, #1
 8003088:	b2da      	uxtb	r2, r3
 800308a:	4b04      	ldr	r3, [pc, #16]	@ (800309c <motion_queue_push_locked+0x68>)
 800308c:	701a      	strb	r2, [r3, #0]
    motion_refresh_status_locked();
 800308e:	f7ff fdcd 	bl	8002c2c <motion_refresh_status_locked>
    return PROTO_OK;
 8003092:	2300      	movs	r3, #0
}
 8003094:	4618      	mov	r0, r3
 8003096:	3708      	adds	r7, #8
 8003098:	46bd      	mov	sp, r7
 800309a:	bdb0      	pop	{r4, r5, r7, pc}
 800309c:	20000c6e 	.word	0x20000c6e
 80030a0:	20000c6d 	.word	0x20000c6d
 80030a4:	2000016c 	.word	0x2000016c

080030a8 <motion_queue_pop_locked>:

static int motion_queue_pop_locked(move_queue_add_req_t *out) {
 80030a8:	b4b0      	push	{r4, r5, r7}
 80030aa:	b083      	sub	sp, #12
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
    if (g_queue_count == 0u) return 0;
 80030b0:	4b18      	ldr	r3, [pc, #96]	@ (8003114 <motion_queue_pop_locked+0x6c>)
 80030b2:	781b      	ldrb	r3, [r3, #0]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d101      	bne.n	80030bc <motion_queue_pop_locked+0x14>
 80030b8:	2300      	movs	r3, #0
 80030ba:	e025      	b.n	8003108 <motion_queue_pop_locked+0x60>
    if (out) *out = g_queue[g_queue_head].req;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d012      	beq.n	80030e8 <motion_queue_pop_locked+0x40>
 80030c2:	4b15      	ldr	r3, [pc, #84]	@ (8003118 <motion_queue_pop_locked+0x70>)
 80030c4:	781b      	ldrb	r3, [r3, #0]
 80030c6:	4618      	mov	r0, r3
 80030c8:	6879      	ldr	r1, [r7, #4]
 80030ca:	4a14      	ldr	r2, [pc, #80]	@ (800311c <motion_queue_pop_locked+0x74>)
 80030cc:	232c      	movs	r3, #44	@ 0x2c
 80030ce:	fb00 f303 	mul.w	r3, r0, r3
 80030d2:	4413      	add	r3, r2
 80030d4:	460c      	mov	r4, r1
 80030d6:	461d      	mov	r5, r3
 80030d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80030da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80030dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80030de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80030e0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80030e4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    g_queue_head = (uint8_t)((g_queue_head + 1u) % MOTION_QUEUE_CAPACITY);
 80030e8:	4b0b      	ldr	r3, [pc, #44]	@ (8003118 <motion_queue_pop_locked+0x70>)
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	3301      	adds	r3, #1
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80030f4:	b2da      	uxtb	r2, r3
 80030f6:	4b08      	ldr	r3, [pc, #32]	@ (8003118 <motion_queue_pop_locked+0x70>)
 80030f8:	701a      	strb	r2, [r3, #0]
    --g_queue_count;
 80030fa:	4b06      	ldr	r3, [pc, #24]	@ (8003114 <motion_queue_pop_locked+0x6c>)
 80030fc:	781b      	ldrb	r3, [r3, #0]
 80030fe:	3b01      	subs	r3, #1
 8003100:	b2da      	uxtb	r2, r3
 8003102:	4b04      	ldr	r3, [pc, #16]	@ (8003114 <motion_queue_pop_locked+0x6c>)
 8003104:	701a      	strb	r2, [r3, #0]
    return 1;
 8003106:	2301      	movs	r3, #1
}
 8003108:	4618      	mov	r0, r3
 800310a:	370c      	adds	r7, #12
 800310c:	46bd      	mov	sp, r7
 800310e:	bcb0      	pop	{r4, r5, r7}
 8003110:	4770      	bx	lr
 8003112:	bf00      	nop
 8003114:	20000c6e 	.word	0x20000c6e
 8003118:	20000c6c 	.word	0x20000c6c
 800311c:	2000016c 	.word	0x2000016c

08003120 <motion_begin_segment_locked>:

static void motion_begin_segment_locked(const move_queue_add_req_t *seg) {
 8003120:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003124:	b08c      	sub	sp, #48	@ 0x30
 8003126:	af06      	add	r7, sp, #24
 8003128:	6078      	str	r0, [r7, #4]
    if (!seg) return;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2b00      	cmp	r3, #0
 800312e:	f000 80d9 	beq.w	80032e4 <motion_begin_segment_locked+0x1c4>

    g_has_active_segment = 1u;
 8003132:	4b6f      	ldr	r3, [pc, #444]	@ (80032f0 <motion_begin_segment_locked+0x1d0>)
 8003134:	2201      	movs	r2, #1
 8003136:	701a      	strb	r2, [r3, #0]
    for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8003138:	2300      	movs	r3, #0
 800313a:	75fb      	strb	r3, [r7, #23]
 800313c:	e0a3      	b.n	8003286 <motion_begin_segment_locked+0x166>
        motion_axis_state_t *ax = &g_axis_state[axis];
 800313e:	7dfa      	ldrb	r2, [r7, #23]
 8003140:	4613      	mov	r3, r2
 8003142:	005b      	lsls	r3, r3, #1
 8003144:	4413      	add	r3, r2
 8003146:	011b      	lsls	r3, r3, #4
 8003148:	4a6a      	ldr	r2, [pc, #424]	@ (80032f4 <motion_begin_segment_locked+0x1d4>)
 800314a:	4413      	add	r3, r2
 800314c:	613b      	str	r3, [r7, #16]
        uint32_t total   = motion_total_for_axis(seg, axis);
 800314e:	7dfb      	ldrb	r3, [r7, #23]
 8003150:	4619      	mov	r1, r3
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f7ff fc7f 	bl	8002a56 <motion_total_for_axis>
 8003158:	60f8      	str	r0, [r7, #12]
        uint16_t velTick = motion_velocity_for_axis(seg, axis);
 800315a:	7dfb      	ldrb	r3, [r7, #23]
 800315c:	4619      	mov	r1, r3
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f7ff fc93 	bl	8002a8a <motion_velocity_for_axis>
 8003164:	4603      	mov	r3, r0
 8003166:	817b      	strh	r3, [r7, #10]

        ax->total_steps       = total;
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	68fa      	ldr	r2, [r7, #12]
 800316c:	601a      	str	r2, [r3, #0]
        ax->target_steps      = 0u;
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	2200      	movs	r2, #0
 8003172:	605a      	str	r2, [r3, #4]
        ax->emitted_steps     = 0u;
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	2200      	movs	r2, #0
 8003178:	609a      	str	r2, [r3, #8]

        ax->velocity_per_tick = velTick;
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	897a      	ldrh	r2, [r7, #10]
 800317e:	819a      	strh	r2, [r3, #12]
        ax->kp = motion_kp_for_axis(seg, axis);
 8003180:	7dfb      	ldrb	r3, [r7, #23]
 8003182:	4619      	mov	r1, r3
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	f7ff fc9a 	bl	8002abe <motion_kp_for_axis>
 800318a:	4603      	mov	r3, r0
 800318c:	461a      	mov	r2, r3
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	81da      	strh	r2, [r3, #14]
        ax->ki = motion_ki_for_axis(seg, axis);
 8003192:	7dfb      	ldrb	r3, [r7, #23]
 8003194:	4619      	mov	r1, r3
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f7ff fcab 	bl	8002af2 <motion_ki_for_axis>
 800319c:	4603      	mov	r3, r0
 800319e:	461a      	mov	r2, r3
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	821a      	strh	r2, [r3, #16]
        ax->kd = motion_kd_for_axis(seg, axis);
 80031a4:	7dfb      	ldrb	r3, [r7, #23]
 80031a6:	4619      	mov	r1, r3
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f7ff fcbc 	bl	8002b26 <motion_kd_for_axis>
 80031ae:	4603      	mov	r3, r0
 80031b0:	461a      	mov	r2, r3
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	825a      	strh	r2, [r3, #18]

        /* guardas para atender DIR/ENABLE timings do TMC5160 */
        ax->step_high         = 0u;
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	2200      	movs	r2, #0
 80031ba:	751a      	strb	r2, [r3, #20]
        ax->step_low          = 0u; 
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	2200      	movs	r2, #0
 80031c0:	755a      	strb	r2, [r3, #21]
        ax->en_settle_ticks   = (total > 0u) ? MOTION_ENABLE_SETTLE_TICKS : 0u;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d001      	beq.n	80031cc <motion_begin_segment_locked+0xac>
 80031c8:	2202      	movs	r2, #2
 80031ca:	e000      	b.n	80031ce <motion_begin_segment_locked+0xae>
 80031cc:	2200      	movs	r2, #0
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
        ax->dir_settle_ticks  = MOTION_DIR_SETUP_TICKS;
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	2201      	movs	r2, #1
 80031d8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

        ax->dda_accum_q16     = 0u;
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	2200      	movs	r2, #0
 80031e0:	619a      	str	r2, [r3, #24]
        ax->dda_inc_q16       = 0u;
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	2200      	movs	r2, #0
 80031e6:	61da      	str	r2, [r3, #28]
        ax->v_target_sps      = ((uint32_t)velTick) * 1000u;  /* steps/s alvo (derivado do seu campo) */
 80031e8:	897b      	ldrh	r3, [r7, #10]
 80031ea:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80031ee:	fb03 f202 	mul.w	r2, r3, r2
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	621a      	str	r2, [r3, #32]
        if (ax->v_target_sps > MOTION_MAX_SPS) ax->v_target_sps = MOTION_MAX_SPS;
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	6a1b      	ldr	r3, [r3, #32]
 80031fa:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 80031fe:	4293      	cmp	r3, r2
 8003200:	d903      	bls.n	800320a <motion_begin_segment_locked+0xea>
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 8003208:	621a      	str	r2, [r3, #32]
        /* Preserva v_actual_sps ao encadear segmentos (rampa só no início da lista) */
        if (g_status.state != MOTION_RUNNING) {
 800320a:	4b3b      	ldr	r3, [pc, #236]	@ (80032f8 <motion_begin_segment_locked+0x1d8>)
 800320c:	781b      	ldrb	r3, [r3, #0]
 800320e:	b2db      	uxtb	r3, r3
 8003210:	2b02      	cmp	r3, #2
 8003212:	d002      	beq.n	800321a <motion_begin_segment_locked+0xfa>
            ax->v_actual_sps  = 0u;
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	2200      	movs	r2, #0
 8003218:	625a      	str	r2, [r3, #36]	@ 0x24
        }
        ax->accel_sps2        = DEMO_ACCEL_SPS2;
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	4a37      	ldr	r2, [pc, #220]	@ (80032fc <motion_begin_segment_locked+0x1dc>)
 800321e:	629a      	str	r2, [r3, #40]	@ 0x28

        motion_hw_step_low(axis);
 8003220:	7dfb      	ldrb	r3, [r7, #23]
 8003222:	4618      	mov	r0, r3
 8003224:	f7ff fb7c 	bl	8002920 <motion_hw_step_low>
        motion_hw_set_dir(axis, (uint8_t)((seg->dirMask >> axis) & 0x1u));
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	785b      	ldrb	r3, [r3, #1]
 800322c:	461a      	mov	r2, r3
 800322e:	7dfb      	ldrb	r3, [r7, #23]
 8003230:	fa42 f303 	asr.w	r3, r2, r3
 8003234:	b2db      	uxtb	r3, r3
 8003236:	f003 0301 	and.w	r3, r3, #1
 800323a:	b2da      	uxtb	r2, r3
 800323c:	7dfb      	ldrb	r3, [r7, #23]
 800323e:	4611      	mov	r1, r2
 8003240:	4618      	mov	r0, r3
 8003242:	f7ff fac9 	bl	80027d8 <motion_hw_set_dir>

        if (total > 0u) motion_hw_enable(axis, 1u);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d005      	beq.n	8003258 <motion_begin_segment_locked+0x138>
 800324c:	7dfb      	ldrb	r3, [r7, #23]
 800324e:	2101      	movs	r1, #1
 8003250:	4618      	mov	r0, r3
 8003252:	f7ff fb01 	bl	8002858 <motion_hw_enable>
 8003256:	e004      	b.n	8003262 <motion_begin_segment_locked+0x142>
        else            motion_hw_enable(axis, 0u);
 8003258:	7dfb      	ldrb	r3, [r7, #23]
 800325a:	2100      	movs	r1, #0
 800325c:	4618      	mov	r0, r3
 800325e:	f7ff fafb 	bl	8002858 <motion_hw_enable>

        /* Não zera origem automaticamente; mantém a referência definida via set_origin */
        g_encoder_delta_tick[axis] = 0;
 8003262:	7dfb      	ldrb	r3, [r7, #23]
 8003264:	4a26      	ldr	r2, [pc, #152]	@ (8003300 <motion_begin_segment_locked+0x1e0>)
 8003266:	2100      	movs	r1, #0
 8003268:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        g_pi_i_accum[axis] = 0;
 800326c:	7dfb      	ldrb	r3, [r7, #23]
 800326e:	4a25      	ldr	r2, [pc, #148]	@ (8003304 <motion_begin_segment_locked+0x1e4>)
 8003270:	2100      	movs	r1, #0
 8003272:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        g_pi_prev_err[axis] = 0;
 8003276:	7dfb      	ldrb	r3, [r7, #23]
 8003278:	4a23      	ldr	r2, [pc, #140]	@ (8003308 <motion_begin_segment_locked+0x1e8>)
 800327a:	2100      	movs	r1, #0
 800327c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8003280:	7dfb      	ldrb	r3, [r7, #23]
 8003282:	3301      	adds	r3, #1
 8003284:	75fb      	strb	r3, [r7, #23]
 8003286:	7dfb      	ldrb	r3, [r7, #23]
 8003288:	2b02      	cmp	r3, #2
 800328a:	f67f af58 	bls.w	800313e <motion_begin_segment_locked+0x1e>
    }
#if MOTION_DEBUG_FLOW
    printf("[FLOW begin_segment id=%u dirMask=0x%02X V(x,y,z)=(%u,%u,%u) S(x,y,z)=(%lu,%lu,%lu) ]\r\n",
           (unsigned)seg->frameId,
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	781b      	ldrb	r3, [r3, #0]
    printf("[FLOW begin_segment id=%u dirMask=0x%02X V(x,y,z)=(%u,%u,%u) S(x,y,z)=(%lu,%lu,%lu) ]\r\n",
 8003292:	4698      	mov	r8, r3
           (unsigned)seg->dirMask,
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	785b      	ldrb	r3, [r3, #1]
    printf("[FLOW begin_segment id=%u dirMask=0x%02X V(x,y,z)=(%u,%u,%u) S(x,y,z)=(%lu,%lu,%lu) ]\r\n",
 8003298:	4699      	mov	r9, r3
           (unsigned)seg->vx, (unsigned)seg->vy, (unsigned)seg->vz,
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	885b      	ldrh	r3, [r3, #2]
    printf("[FLOW begin_segment id=%u dirMask=0x%02X V(x,y,z)=(%u,%u,%u) S(x,y,z)=(%lu,%lu,%lu) ]\r\n",
 800329e:	469a      	mov	sl, r3
           (unsigned)seg->vx, (unsigned)seg->vy, (unsigned)seg->vz,
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	891b      	ldrh	r3, [r3, #8]
    printf("[FLOW begin_segment id=%u dirMask=0x%02X V(x,y,z)=(%u,%u,%u) S(x,y,z)=(%lu,%lu,%lu) ]\r\n",
 80032a4:	461e      	mov	r6, r3
           (unsigned)seg->vx, (unsigned)seg->vy, (unsigned)seg->vz,
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	8a1b      	ldrh	r3, [r3, #16]
    printf("[FLOW begin_segment id=%u dirMask=0x%02X V(x,y,z)=(%u,%u,%u) S(x,y,z)=(%lu,%lu,%lu) ]\r\n",
 80032aa:	603b      	str	r3, [r7, #0]
           (unsigned long)motion_total_for_axis(seg, AXIS_X),
 80032ac:	2100      	movs	r1, #0
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f7ff fbd1 	bl	8002a56 <motion_total_for_axis>
 80032b4:	4604      	mov	r4, r0
           (unsigned long)motion_total_for_axis(seg, AXIS_Y),
 80032b6:	2101      	movs	r1, #1
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f7ff fbcc 	bl	8002a56 <motion_total_for_axis>
 80032be:	4605      	mov	r5, r0
           (unsigned long)motion_total_for_axis(seg, AXIS_Z));
 80032c0:	2102      	movs	r1, #2
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f7ff fbc7 	bl	8002a56 <motion_total_for_axis>
 80032c8:	4603      	mov	r3, r0
    printf("[FLOW begin_segment id=%u dirMask=0x%02X V(x,y,z)=(%u,%u,%u) S(x,y,z)=(%lu,%lu,%lu) ]\r\n",
 80032ca:	9304      	str	r3, [sp, #16]
 80032cc:	9503      	str	r5, [sp, #12]
 80032ce:	9402      	str	r4, [sp, #8]
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	9301      	str	r3, [sp, #4]
 80032d4:	9600      	str	r6, [sp, #0]
 80032d6:	4653      	mov	r3, sl
 80032d8:	464a      	mov	r2, r9
 80032da:	4641      	mov	r1, r8
 80032dc:	480b      	ldr	r0, [pc, #44]	@ (800330c <motion_begin_segment_locked+0x1ec>)
 80032de:	f00b ffc3 	bl	800f268 <iprintf>
 80032e2:	e000      	b.n	80032e6 <motion_begin_segment_locked+0x1c6>
    if (!seg) return;
 80032e4:	bf00      	nop
#endif
}
 80032e6:	3718      	adds	r7, #24
 80032e8:	46bd      	mov	sp, r7
 80032ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032ee:	bf00      	nop
 80032f0:	20000168 	.word	0x20000168
 80032f4:	200000d8 	.word	0x200000d8
 80032f8:	200000d0 	.word	0x200000d0
 80032fc:	00030d40 	.word	0x00030d40
 8003300:	20000cb0 	.word	0x20000cb0
 8003304:	20000ce0 	.word	0x20000ce0
 8003308:	20000cec 	.word	0x20000cec
 800330c:	08010604 	.word	0x08010604

08003310 <motion_try_start_next_locked>:

static uint8_t motion_try_start_next_locked(void) {
 8003310:	b580      	push	{r7, lr}
 8003312:	b08c      	sub	sp, #48	@ 0x30
 8003314:	af00      	add	r7, sp, #0
    move_queue_add_req_t next;
    if (!motion_queue_pop_locked(&next))
 8003316:	1d3b      	adds	r3, r7, #4
 8003318:	4618      	mov	r0, r3
 800331a:	f7ff fec5 	bl	80030a8 <motion_queue_pop_locked>
 800331e:	4603      	mov	r3, r0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d101      	bne.n	8003328 <motion_try_start_next_locked+0x18>
        return 0u;
 8003324:	2300      	movs	r3, #0
 8003326:	e010      	b.n	800334a <motion_try_start_next_locked+0x3a>
    motion_begin_segment_locked(&next);
 8003328:	1d3b      	adds	r3, r7, #4
 800332a:	4618      	mov	r0, r3
 800332c:	f7ff fef8 	bl	8003120 <motion_begin_segment_locked>
    g_active_frame_id = next.frameId;
 8003330:	793a      	ldrb	r2, [r7, #4]
 8003332:	4b08      	ldr	r3, [pc, #32]	@ (8003354 <motion_try_start_next_locked+0x44>)
 8003334:	701a      	strb	r2, [r3, #0]
#if MOTION_DEBUG_FLOW
    printf("[FLOW pop_next id=%u remaining=%u]\\r\\n", (unsigned)g_active_frame_id, (unsigned)g_queue_count);
 8003336:	4b07      	ldr	r3, [pc, #28]	@ (8003354 <motion_try_start_next_locked+0x44>)
 8003338:	781b      	ldrb	r3, [r3, #0]
 800333a:	4619      	mov	r1, r3
 800333c:	4b06      	ldr	r3, [pc, #24]	@ (8003358 <motion_try_start_next_locked+0x48>)
 800333e:	781b      	ldrb	r3, [r3, #0]
 8003340:	461a      	mov	r2, r3
 8003342:	4806      	ldr	r0, [pc, #24]	@ (800335c <motion_try_start_next_locked+0x4c>)
 8003344:	f00b ff90 	bl	800f268 <iprintf>
#endif
    return 1u;
 8003348:	2301      	movs	r3, #1
}
 800334a:	4618      	mov	r0, r3
 800334c:	3730      	adds	r7, #48	@ 0x30
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	20000c6f 	.word	0x20000c6f
 8003358:	20000c6e 	.word	0x20000c6e
 800335c:	0801065c 	.word	0x0801065c

08003360 <motion_update_encoders>:

/* =======================
 *  Encoders
 * ======================= */
static void motion_update_encoders(void) {
 8003360:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003364:	b08e      	sub	sp, #56	@ 0x38
 8003366:	af02      	add	r7, sp, #8
    for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8003368:	2300      	movs	r3, #0
 800336a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800336e:	e0cc      	b.n	800350a <motion_update_encoders+0x1aa>
        uint32_t now = motion_hw_encoder_read_raw(axis);
 8003370:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003374:	4618      	mov	r0, r3
 8003376:	f7ff faf7 	bl	8002968 <motion_hw_encoder_read_raw>
 800337a:	62b8      	str	r0, [r7, #40]	@ 0x28
        uint8_t bits = motion_hw_encoder_bits(axis);
 800337c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003380:	4618      	mov	r0, r3
 8003382:	f7ff fb19 	bl	80029b8 <motion_hw_encoder_bits>
 8003386:	4603      	mov	r3, r0
 8003388:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (bits == 16u) {
 800338c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003390:	2b10      	cmp	r3, #16
 8003392:	d15e      	bne.n	8003452 <motion_update_encoders+0xf2>
            uint16_t prev = (uint16_t)g_encoder_last_raw[axis];
 8003394:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003398:	4a61      	ldr	r2, [pc, #388]	@ (8003520 <motion_update_encoders+0x1c0>)
 800339a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800339e:	82fb      	strh	r3, [r7, #22]
            int16_t delta = (int16_t)((uint16_t)now - prev);
 80033a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033a2:	b29a      	uxth	r2, r3
 80033a4:	8afb      	ldrh	r3, [r7, #22]
 80033a6:	1ad3      	subs	r3, r2, r3
 80033a8:	b29b      	uxth	r3, r3
 80033aa:	82bb      	strh	r3, [r7, #20]
            g_encoder_last_raw[axis] = (uint16_t)now;
 80033ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033ae:	b29a      	uxth	r2, r3
 80033b0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80033b4:	4611      	mov	r1, r2
 80033b6:	4a5a      	ldr	r2, [pc, #360]	@ (8003520 <motion_update_encoders+0x1c0>)
 80033b8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            g_encoder_position[axis] += delta;
 80033bc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80033c0:	4a58      	ldr	r2, [pc, #352]	@ (8003524 <motion_update_encoders+0x1c4>)
 80033c2:	00db      	lsls	r3, r3, #3
 80033c4:	4413      	add	r3, r2
 80033c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ca:	f9b7 1014 	ldrsh.w	r1, [r7, #20]
 80033ce:	17c8      	asrs	r0, r1, #31
 80033d0:	460c      	mov	r4, r1
 80033d2:	4605      	mov	r5, r0
 80033d4:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 80033d8:	eb12 0a04 	adds.w	sl, r2, r4
 80033dc:	eb43 0b05 	adc.w	fp, r3, r5
 80033e0:	4a50      	ldr	r2, [pc, #320]	@ (8003524 <motion_update_encoders+0x1c4>)
 80033e2:	00cb      	lsls	r3, r1, #3
 80033e4:	4413      	add	r3, r2
 80033e6:	e9c3 ab00 	strd	sl, fp, [r3]
            g_encoder_delta_tick[axis] = (int32_t)delta;
 80033ea:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80033ee:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80033f2:	494d      	ldr	r1, [pc, #308]	@ (8003528 <motion_update_encoders+0x1c8>)
 80033f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#if MOTION_DEBUG_ENCODERS
            if (delta != 0) {
 80033f8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d07f      	beq.n	8003500 <motion_update_encoders+0x1a0>
                long abs = (long)g_encoder_position[axis];
 8003400:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003404:	4a47      	ldr	r2, [pc, #284]	@ (8003524 <motion_update_encoders+0x1c4>)
 8003406:	00db      	lsls	r3, r3, #3
 8003408:	4413      	add	r3, r2
 800340a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800340e:	4613      	mov	r3, r2
 8003410:	613b      	str	r3, [r7, #16]
                long rel = (long)(g_encoder_position[axis] - g_encoder_origin[axis]);
 8003412:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003416:	4a43      	ldr	r2, [pc, #268]	@ (8003524 <motion_update_encoders+0x1c4>)
 8003418:	00db      	lsls	r3, r3, #3
 800341a:	4413      	add	r3, r2
 800341c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003420:	4611      	mov	r1, r2
 8003422:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003426:	4a41      	ldr	r2, [pc, #260]	@ (800352c <motion_update_encoders+0x1cc>)
 8003428:	00db      	lsls	r3, r3, #3
 800342a:	4413      	add	r3, r2
 800342c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003430:	4613      	mov	r3, r2
 8003432:	1acb      	subs	r3, r1, r3
 8003434:	60fb      	str	r3, [r7, #12]
                printf("[ENC axis=%u raw=%u delta=%d abs=%ld rel=%ld]\r\n",
 8003436:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 800343a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	9301      	str	r3, [sp, #4]
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	9300      	str	r3, [sp, #0]
 8003446:	4613      	mov	r3, r2
 8003448:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800344a:	4839      	ldr	r0, [pc, #228]	@ (8003530 <motion_update_encoders+0x1d0>)
 800344c:	f00b ff0c 	bl	800f268 <iprintf>
 8003450:	e056      	b.n	8003500 <motion_update_encoders+0x1a0>
                       abs,
                       rel);
            }
#endif
        } else {
            int32_t delta = (int32_t)(now - g_encoder_last_raw[axis]);
 8003452:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003456:	4a32      	ldr	r2, [pc, #200]	@ (8003520 <motion_update_encoders+0x1c0>)
 8003458:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800345c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800345e:	1ad3      	subs	r3, r2, r3
 8003460:	623b      	str	r3, [r7, #32]
            g_encoder_last_raw[axis] = now;
 8003462:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003466:	492e      	ldr	r1, [pc, #184]	@ (8003520 <motion_update_encoders+0x1c0>)
 8003468:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800346a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            g_encoder_position[axis] += delta;
 800346e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003472:	4a2c      	ldr	r2, [pc, #176]	@ (8003524 <motion_update_encoders+0x1c4>)
 8003474:	00db      	lsls	r3, r3, #3
 8003476:	4413      	add	r3, r2
 8003478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800347c:	6a39      	ldr	r1, [r7, #32]
 800347e:	17c8      	asrs	r0, r1, #31
 8003480:	4688      	mov	r8, r1
 8003482:	4681      	mov	r9, r0
 8003484:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8003488:	eb12 0008 	adds.w	r0, r2, r8
 800348c:	6038      	str	r0, [r7, #0]
 800348e:	eb43 0309 	adc.w	r3, r3, r9
 8003492:	607b      	str	r3, [r7, #4]
 8003494:	4a23      	ldr	r2, [pc, #140]	@ (8003524 <motion_update_encoders+0x1c4>)
 8003496:	00cb      	lsls	r3, r1, #3
 8003498:	4413      	add	r3, r2
 800349a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800349e:	e9c3 1200 	strd	r1, r2, [r3]
            g_encoder_delta_tick[axis] = delta;
 80034a2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80034a6:	4920      	ldr	r1, [pc, #128]	@ (8003528 <motion_update_encoders+0x1c8>)
 80034a8:	6a3a      	ldr	r2, [r7, #32]
 80034aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#if MOTION_DEBUG_ENCODERS
            if (delta != 0) {
 80034ae:	6a3b      	ldr	r3, [r7, #32]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d025      	beq.n	8003500 <motion_update_encoders+0x1a0>
                long abs = (long)g_encoder_position[axis];
 80034b4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80034b8:	4a1a      	ldr	r2, [pc, #104]	@ (8003524 <motion_update_encoders+0x1c4>)
 80034ba:	00db      	lsls	r3, r3, #3
 80034bc:	4413      	add	r3, r2
 80034be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034c2:	4613      	mov	r3, r2
 80034c4:	61fb      	str	r3, [r7, #28]
                long rel = (long)(g_encoder_position[axis] - g_encoder_origin[axis]);
 80034c6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80034ca:	4a16      	ldr	r2, [pc, #88]	@ (8003524 <motion_update_encoders+0x1c4>)
 80034cc:	00db      	lsls	r3, r3, #3
 80034ce:	4413      	add	r3, r2
 80034d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034d4:	4611      	mov	r1, r2
 80034d6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80034da:	4a14      	ldr	r2, [pc, #80]	@ (800352c <motion_update_encoders+0x1cc>)
 80034dc:	00db      	lsls	r3, r3, #3
 80034de:	4413      	add	r3, r2
 80034e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034e4:	4613      	mov	r3, r2
 80034e6:	1acb      	subs	r3, r1, r3
 80034e8:	61bb      	str	r3, [r7, #24]
                printf("[ENC axis=%u raw=%lu delta=%ld abs=%ld rel=%ld]\r\n",
 80034ea:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 80034ee:	69bb      	ldr	r3, [r7, #24]
 80034f0:	9301      	str	r3, [sp, #4]
 80034f2:	69fb      	ldr	r3, [r7, #28]
 80034f4:	9300      	str	r3, [sp, #0]
 80034f6:	6a3b      	ldr	r3, [r7, #32]
 80034f8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80034fa:	480e      	ldr	r0, [pc, #56]	@ (8003534 <motion_update_encoders+0x1d4>)
 80034fc:	f00b feb4 	bl	800f268 <iprintf>
    for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8003500:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003504:	3301      	adds	r3, #1
 8003506:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800350a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800350e:	2b02      	cmp	r3, #2
 8003510:	f67f af2e 	bls.w	8003370 <motion_update_encoders+0x10>
                       rel);
            }
#endif
        }
    }
}
 8003514:	bf00      	nop
 8003516:	bf00      	nop
 8003518:	3730      	adds	r7, #48	@ 0x30
 800351a:	46bd      	mov	sp, r7
 800351c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003520:	20000c88 	.word	0x20000c88
 8003524:	20000c70 	.word	0x20000c70
 8003528:	20000cb0 	.word	0x20000cb0
 800352c:	20000c98 	.word	0x20000c98
 8003530:	08010684 	.word	0x08010684
 8003534:	080106b4 	.word	0x080106b4

08003538 <motion_send_queue_add_ack>:

/* =======================
 *  Envio de respostas
 * ======================= */
static void motion_send_queue_add_ack(uint8_t frame_id, uint8_t status) {
 8003538:	b580      	push	{r7, lr}
 800353a:	b088      	sub	sp, #32
 800353c:	af02      	add	r7, sp, #8
 800353e:	4603      	mov	r3, r0
 8003540:	460a      	mov	r2, r1
 8003542:	71fb      	strb	r3, [r7, #7]
 8003544:	4613      	mov	r3, r2
 8003546:	71bb      	strb	r3, [r7, #6]
    uint8_t raw[6];
    move_queue_add_ack_resp_t resp = { frame_id, status };
 8003548:	79fb      	ldrb	r3, [r7, #7]
 800354a:	733b      	strb	r3, [r7, #12]
 800354c:	79bb      	ldrb	r3, [r7, #6]
 800354e:	737b      	strb	r3, [r7, #13]
    if (move_queue_add_ack_resp_encoder(&resp, raw, sizeof raw) != PROTO_OK) {
 8003550:	f107 0110 	add.w	r1, r7, #16
 8003554:	f107 030c 	add.w	r3, r7, #12
 8003558:	2206      	movs	r2, #6
 800355a:	4618      	mov	r0, r3
 800355c:	f7fd ff1c 	bl	8001398 <move_queue_add_ack_resp_encoder>
 8003560:	4603      	mov	r3, r0
 8003562:	2b00      	cmp	r3, #0
 8003564:	d00c      	beq.n	8003580 <motion_send_queue_add_ack+0x48>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_FRAME, "ack", "encode_fail");
 8003566:	4a12      	ldr	r2, [pc, #72]	@ (80035b0 <motion_send_queue_add_ack+0x78>)
 8003568:	4b12      	ldr	r3, [pc, #72]	@ (80035b4 <motion_send_queue_add_ack+0x7c>)
 800356a:	9301      	str	r3, [sp, #4]
 800356c:	4b12      	ldr	r3, [pc, #72]	@ (80035b8 <motion_send_queue_add_ack+0x80>)
 800356e:	9300      	str	r3, [sp, #0]
 8003570:	4613      	mov	r3, r2
 8003572:	f06f 0201 	mvn.w	r2, #1
 8003576:	2164      	movs	r1, #100	@ 0x64
 8003578:	2002      	movs	r0, #2
 800357a:	f7ff f837 	bl	80025ec <log_event_auto>
 800357e:	e014      	b.n	80035aa <motion_send_queue_add_ack+0x72>
        return;
    }
    if (app_resp_push(raw, (uint32_t)sizeof raw) != PROTO_OK) {
 8003580:	f107 0310 	add.w	r3, r7, #16
 8003584:	2106      	movs	r1, #6
 8003586:	4618      	mov	r0, r3
 8003588:	f001 ffe4 	bl	8005554 <app_resp_push>
 800358c:	4603      	mov	r3, r0
 800358e:	2b00      	cmp	r3, #0
 8003590:	d00b      	beq.n	80035aa <motion_send_queue_add_ack+0x72>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_RANGE, "ack", "queue_full");
 8003592:	4a07      	ldr	r2, [pc, #28]	@ (80035b0 <motion_send_queue_add_ack+0x78>)
 8003594:	4b09      	ldr	r3, [pc, #36]	@ (80035bc <motion_send_queue_add_ack+0x84>)
 8003596:	9301      	str	r3, [sp, #4]
 8003598:	4b07      	ldr	r3, [pc, #28]	@ (80035b8 <motion_send_queue_add_ack+0x80>)
 800359a:	9300      	str	r3, [sp, #0]
 800359c:	4613      	mov	r3, r2
 800359e:	f06f 0203 	mvn.w	r2, #3
 80035a2:	2164      	movs	r1, #100	@ 0x64
 80035a4:	2002      	movs	r0, #2
 80035a6:	f7ff f821 	bl	80025ec <log_event_auto>
    }
}
 80035aa:	3718      	adds	r7, #24
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}
 80035b0:	080105fc 	.word	0x080105fc
 80035b4:	080106e8 	.word	0x080106e8
 80035b8:	080106f4 	.word	0x080106f4
 80035bc:	080106f8 	.word	0x080106f8

080035c0 <motion_send_queue_status_response>:

static void motion_send_queue_status_response(uint8_t frame_id) {
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b08a      	sub	sp, #40	@ 0x28
 80035c4:	af02      	add	r7, sp, #8
 80035c6:	4603      	mov	r3, r0
 80035c8:	71fb      	strb	r3, [r7, #7]
    uint8_t raw[12];
    move_queue_status_resp_t resp = {
 80035ca:	79fb      	ldrb	r3, [r7, #7]
 80035cc:	733b      	strb	r3, [r7, #12]
        .frameId = frame_id,
        .status  = (uint8_t)g_status.state,
 80035ce:	4b27      	ldr	r3, [pc, #156]	@ (800366c <motion_send_queue_status_response+0xac>)
 80035d0:	781b      	ldrb	r3, [r3, #0]
 80035d2:	b2db      	uxtb	r3, r3
    move_queue_status_resp_t resp = {
 80035d4:	737b      	strb	r3, [r7, #13]
        .pidErrX = (uint8_t)g_status.pidErrX,
 80035d6:	4b25      	ldr	r3, [pc, #148]	@ (800366c <motion_send_queue_status_response+0xac>)
 80035d8:	795b      	ldrb	r3, [r3, #5]
 80035da:	b25b      	sxtb	r3, r3
 80035dc:	b2db      	uxtb	r3, r3
    move_queue_status_resp_t resp = {
 80035de:	73bb      	strb	r3, [r7, #14]
        .pidErrY = (uint8_t)g_status.pidErrY,
 80035e0:	4b22      	ldr	r3, [pc, #136]	@ (800366c <motion_send_queue_status_response+0xac>)
 80035e2:	799b      	ldrb	r3, [r3, #6]
 80035e4:	b25b      	sxtb	r3, r3
 80035e6:	b2db      	uxtb	r3, r3
    move_queue_status_resp_t resp = {
 80035e8:	73fb      	strb	r3, [r7, #15]
        .pidErrZ = (uint8_t)g_status.pidErrZ,
 80035ea:	4b20      	ldr	r3, [pc, #128]	@ (800366c <motion_send_queue_status_response+0xac>)
 80035ec:	79db      	ldrb	r3, [r3, #7]
 80035ee:	b25b      	sxtb	r3, r3
 80035f0:	b2db      	uxtb	r3, r3
    move_queue_status_resp_t resp = {
 80035f2:	743b      	strb	r3, [r7, #16]
        .pctX    = g_status.pctX,
 80035f4:	4b1d      	ldr	r3, [pc, #116]	@ (800366c <motion_send_queue_status_response+0xac>)
 80035f6:	789b      	ldrb	r3, [r3, #2]
 80035f8:	b2db      	uxtb	r3, r3
    move_queue_status_resp_t resp = {
 80035fa:	747b      	strb	r3, [r7, #17]
        .pctY    = g_status.pctY,
 80035fc:	4b1b      	ldr	r3, [pc, #108]	@ (800366c <motion_send_queue_status_response+0xac>)
 80035fe:	78db      	ldrb	r3, [r3, #3]
 8003600:	b2db      	uxtb	r3, r3
    move_queue_status_resp_t resp = {
 8003602:	74bb      	strb	r3, [r7, #18]
        .pctZ    = g_status.pctZ,
 8003604:	4b19      	ldr	r3, [pc, #100]	@ (800366c <motion_send_queue_status_response+0xac>)
 8003606:	791b      	ldrb	r3, [r3, #4]
 8003608:	b2db      	uxtb	r3, r3
    move_queue_status_resp_t resp = {
 800360a:	74fb      	strb	r3, [r7, #19]
    };
    if (move_queue_status_resp_encoder(&resp, raw, sizeof raw) != PROTO_OK) {
 800360c:	f107 0114 	add.w	r1, r7, #20
 8003610:	f107 030c 	add.w	r3, r7, #12
 8003614:	220c      	movs	r2, #12
 8003616:	4618      	mov	r0, r3
 8003618:	f7fd ff76 	bl	8001508 <move_queue_status_resp_encoder>
 800361c:	4603      	mov	r3, r0
 800361e:	2b00      	cmp	r3, #0
 8003620:	d00c      	beq.n	800363c <motion_send_queue_status_response+0x7c>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_FRAME, "status", "encode_fail");
 8003622:	4a13      	ldr	r2, [pc, #76]	@ (8003670 <motion_send_queue_status_response+0xb0>)
 8003624:	4b13      	ldr	r3, [pc, #76]	@ (8003674 <motion_send_queue_status_response+0xb4>)
 8003626:	9301      	str	r3, [sp, #4]
 8003628:	4b13      	ldr	r3, [pc, #76]	@ (8003678 <motion_send_queue_status_response+0xb8>)
 800362a:	9300      	str	r3, [sp, #0]
 800362c:	4613      	mov	r3, r2
 800362e:	f06f 0201 	mvn.w	r2, #1
 8003632:	2164      	movs	r1, #100	@ 0x64
 8003634:	2002      	movs	r0, #2
 8003636:	f7fe ffd9 	bl	80025ec <log_event_auto>
 800363a:	e014      	b.n	8003666 <motion_send_queue_status_response+0xa6>
        return;
    }
    if (app_resp_push(raw, (uint32_t)sizeof raw) != PROTO_OK) {
 800363c:	f107 0314 	add.w	r3, r7, #20
 8003640:	210c      	movs	r1, #12
 8003642:	4618      	mov	r0, r3
 8003644:	f001 ff86 	bl	8005554 <app_resp_push>
 8003648:	4603      	mov	r3, r0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d00b      	beq.n	8003666 <motion_send_queue_status_response+0xa6>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_RANGE, "status", "queue_full");
 800364e:	4a08      	ldr	r2, [pc, #32]	@ (8003670 <motion_send_queue_status_response+0xb0>)
 8003650:	4b0a      	ldr	r3, [pc, #40]	@ (800367c <motion_send_queue_status_response+0xbc>)
 8003652:	9301      	str	r3, [sp, #4]
 8003654:	4b08      	ldr	r3, [pc, #32]	@ (8003678 <motion_send_queue_status_response+0xb8>)
 8003656:	9300      	str	r3, [sp, #0]
 8003658:	4613      	mov	r3, r2
 800365a:	f06f 0203 	mvn.w	r2, #3
 800365e:	2164      	movs	r1, #100	@ 0x64
 8003660:	2002      	movs	r0, #2
 8003662:	f7fe ffc3 	bl	80025ec <log_event_auto>
    }
}
 8003666:	3720      	adds	r7, #32
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}
 800366c:	200000d0 	.word	0x200000d0
 8003670:	080105fc 	.word	0x080105fc
 8003674:	080106e8 	.word	0x080106e8
 8003678:	08010704 	.word	0x08010704
 800367c:	080106f8 	.word	0x080106f8

08003680 <motion_send_start_response>:

static void motion_send_start_response(uint8_t frame_id) {
 8003680:	b580      	push	{r7, lr}
 8003682:	b086      	sub	sp, #24
 8003684:	af02      	add	r7, sp, #8
 8003686:	4603      	mov	r3, r0
 8003688:	71fb      	strb	r3, [r7, #7]
    uint8_t raw[4];
    start_move_resp_t resp = { frame_id };
 800368a:	79fb      	ldrb	r3, [r7, #7]
 800368c:	723b      	strb	r3, [r7, #8]
    if (start_move_resp_encoder(&resp, raw, sizeof raw) != PROTO_OK) return;
 800368e:	f107 010c 	add.w	r1, r7, #12
 8003692:	f107 0308 	add.w	r3, r7, #8
 8003696:	2204      	movs	r2, #4
 8003698:	4618      	mov	r0, r3
 800369a:	f7fe f825 	bl	80016e8 <start_move_resp_encoder>
 800369e:	4603      	mov	r3, r0
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d115      	bne.n	80036d0 <motion_send_start_response+0x50>
    if (app_resp_push(raw, (uint32_t)sizeof raw) != PROTO_OK) {
 80036a4:	f107 030c 	add.w	r3, r7, #12
 80036a8:	2104      	movs	r1, #4
 80036aa:	4618      	mov	r0, r3
 80036ac:	f001 ff52 	bl	8005554 <app_resp_push>
 80036b0:	4603      	mov	r3, r0
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d00d      	beq.n	80036d2 <motion_send_start_response+0x52>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_RANGE, "start", "resp_queue_full");
 80036b6:	4a08      	ldr	r2, [pc, #32]	@ (80036d8 <motion_send_start_response+0x58>)
 80036b8:	4b08      	ldr	r3, [pc, #32]	@ (80036dc <motion_send_start_response+0x5c>)
 80036ba:	9301      	str	r3, [sp, #4]
 80036bc:	4b08      	ldr	r3, [pc, #32]	@ (80036e0 <motion_send_start_response+0x60>)
 80036be:	9300      	str	r3, [sp, #0]
 80036c0:	4613      	mov	r3, r2
 80036c2:	f06f 0203 	mvn.w	r2, #3
 80036c6:	2164      	movs	r1, #100	@ 0x64
 80036c8:	2002      	movs	r0, #2
 80036ca:	f7fe ff8f 	bl	80025ec <log_event_auto>
 80036ce:	e000      	b.n	80036d2 <motion_send_start_response+0x52>
    if (start_move_resp_encoder(&resp, raw, sizeof raw) != PROTO_OK) return;
 80036d0:	bf00      	nop
    }
}
 80036d2:	3710      	adds	r7, #16
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}
 80036d8:	080105fc 	.word	0x080105fc
 80036dc:	0801070c 	.word	0x0801070c
 80036e0:	0801071c 	.word	0x0801071c

080036e4 <motion_send_move_end_response>:

static void motion_send_move_end_response(uint8_t frame_id) {
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b086      	sub	sp, #24
 80036e8:	af02      	add	r7, sp, #8
 80036ea:	4603      	mov	r3, r0
 80036ec:	71fb      	strb	r3, [r7, #7]
    uint8_t raw[4];
    move_end_resp_t resp = { frame_id };
 80036ee:	79fb      	ldrb	r3, [r7, #7]
 80036f0:	723b      	strb	r3, [r7, #8]
    if (move_end_resp_encoder(&resp, raw, sizeof raw) != PROTO_OK) return;
 80036f2:	f107 010c 	add.w	r1, r7, #12
 80036f6:	f107 0308 	add.w	r3, r7, #8
 80036fa:	2204      	movs	r2, #4
 80036fc:	4618      	mov	r0, r3
 80036fe:	f7fd fd9d 	bl	800123c <move_end_resp_encoder>
 8003702:	4603      	mov	r3, r0
 8003704:	2b00      	cmp	r3, #0
 8003706:	d115      	bne.n	8003734 <motion_send_move_end_response+0x50>
    if (app_resp_push(raw, (uint32_t)sizeof raw) != PROTO_OK) {
 8003708:	f107 030c 	add.w	r3, r7, #12
 800370c:	2104      	movs	r1, #4
 800370e:	4618      	mov	r0, r3
 8003710:	f001 ff20 	bl	8005554 <app_resp_push>
 8003714:	4603      	mov	r3, r0
 8003716:	2b00      	cmp	r3, #0
 8003718:	d00d      	beq.n	8003736 <motion_send_move_end_response+0x52>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_RANGE, "move_end", "resp_queue_full");
 800371a:	4a08      	ldr	r2, [pc, #32]	@ (800373c <motion_send_move_end_response+0x58>)
 800371c:	4b08      	ldr	r3, [pc, #32]	@ (8003740 <motion_send_move_end_response+0x5c>)
 800371e:	9301      	str	r3, [sp, #4]
 8003720:	4b08      	ldr	r3, [pc, #32]	@ (8003744 <motion_send_move_end_response+0x60>)
 8003722:	9300      	str	r3, [sp, #0]
 8003724:	4613      	mov	r3, r2
 8003726:	f06f 0203 	mvn.w	r2, #3
 800372a:	2164      	movs	r1, #100	@ 0x64
 800372c:	2002      	movs	r0, #2
 800372e:	f7fe ff5d 	bl	80025ec <log_event_auto>
 8003732:	e000      	b.n	8003736 <motion_send_move_end_response+0x52>
    if (move_end_resp_encoder(&resp, raw, sizeof raw) != PROTO_OK) return;
 8003734:	bf00      	nop
    }
}
 8003736:	3710      	adds	r7, #16
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}
 800373c:	080105fc 	.word	0x080105fc
 8003740:	0801070c 	.word	0x0801070c
 8003744:	08010724 	.word	0x08010724

08003748 <motion_service_init>:


/* =======================
 *  Init
 * ======================= */
void motion_service_init(void) {
 8003748:	b580      	push	{r7, lr}
 800374a:	b088      	sub	sp, #32
 800374c:	af04      	add	r7, sp, #16
    uint32_t primask = motion_lock();
 800374e:	f7ff f961 	bl	8002a14 <motion_lock>
 8003752:	60b8      	str	r0, [r7, #8]

    memset(&g_status, 0, sizeof g_status);
 8003754:	2208      	movs	r2, #8
 8003756:	2100      	movs	r1, #0
 8003758:	484b      	ldr	r0, [pc, #300]	@ (8003888 <motion_service_init+0x140>)
 800375a:	f00b ffbd 	bl	800f6d8 <memset>
    memset(g_axis_state, 0, sizeof g_axis_state);
 800375e:	2290      	movs	r2, #144	@ 0x90
 8003760:	2100      	movs	r1, #0
 8003762:	484a      	ldr	r0, [pc, #296]	@ (800388c <motion_service_init+0x144>)
 8003764:	f00b ffb8 	bl	800f6d8 <memset>
    memset(g_queue, 0, sizeof g_queue);
 8003768:	f44f 6230 	mov.w	r2, #2816	@ 0xb00
 800376c:	2100      	movs	r1, #0
 800376e:	4848      	ldr	r0, [pc, #288]	@ (8003890 <motion_service_init+0x148>)
 8003770:	f00b ffb2 	bl	800f6d8 <memset>
    memset(g_encoder_position, 0, sizeof g_encoder_position);
 8003774:	2218      	movs	r2, #24
 8003776:	2100      	movs	r1, #0
 8003778:	4846      	ldr	r0, [pc, #280]	@ (8003894 <motion_service_init+0x14c>)
 800377a:	f00b ffad 	bl	800f6d8 <memset>
    memset(g_encoder_last_raw, 0, sizeof g_encoder_last_raw);
 800377e:	220c      	movs	r2, #12
 8003780:	2100      	movs	r1, #0
 8003782:	4845      	ldr	r0, [pc, #276]	@ (8003898 <motion_service_init+0x150>)
 8003784:	f00b ffa8 	bl	800f6d8 <memset>
    memset(g_encoder_origin, 0, sizeof g_encoder_origin);
 8003788:	2218      	movs	r2, #24
 800378a:	2100      	movs	r1, #0
 800378c:	4843      	ldr	r0, [pc, #268]	@ (800389c <motion_service_init+0x154>)
 800378e:	f00b ffa3 	bl	800f6d8 <memset>
    memset(g_encoder_delta_tick, 0, sizeof g_encoder_delta_tick);
 8003792:	220c      	movs	r2, #12
 8003794:	2100      	movs	r1, #0
 8003796:	4842      	ldr	r0, [pc, #264]	@ (80038a0 <motion_service_init+0x158>)
 8003798:	f00b ff9e 	bl	800f6d8 <memset>
    memset(g_pi_i_accum, 0, sizeof g_pi_i_accum);
 800379c:	220c      	movs	r2, #12
 800379e:	2100      	movs	r1, #0
 80037a0:	4840      	ldr	r0, [pc, #256]	@ (80038a4 <motion_service_init+0x15c>)
 80037a2:	f00b ff99 	bl	800f6d8 <memset>
    memset(g_pi_prev_err, 0, sizeof g_pi_prev_err);
 80037a6:	220c      	movs	r2, #12
 80037a8:	2100      	movs	r1, #0
 80037aa:	483f      	ldr	r0, [pc, #252]	@ (80038a8 <motion_service_init+0x160>)
 80037ac:	f00b ff94 	bl	800f6d8 <memset>
    memset(g_origin_base32, 0, sizeof g_origin_base32);
 80037b0:	220c      	movs	r2, #12
 80037b2:	2100      	movs	r1, #0
 80037b4:	483d      	ldr	r0, [pc, #244]	@ (80038ac <motion_service_init+0x164>)
 80037b6:	f00b ff8f 	bl	800f6d8 <memset>
    memset(g_pi_d_filt, 0, sizeof g_pi_d_filt);
 80037ba:	220c      	movs	r2, #12
 80037bc:	2100      	movs	r1, #0
 80037be:	483c      	ldr	r0, [pc, #240]	@ (80038b0 <motion_service_init+0x168>)
 80037c0:	f00b ff8a 	bl	800f6d8 <memset>
    memset(g_v_accum, 0, sizeof g_v_accum);
 80037c4:	220c      	movs	r2, #12
 80037c6:	2100      	movs	r1, #0
 80037c8:	483a      	ldr	r0, [pc, #232]	@ (80038b4 <motion_service_init+0x16c>)
 80037ca:	f00b ff85 	bl	800f6d8 <memset>

    g_status.state = MOTION_IDLE;
 80037ce:	4b2e      	ldr	r3, [pc, #184]	@ (8003888 <motion_service_init+0x140>)
 80037d0:	2200      	movs	r2, #0
 80037d2:	701a      	strb	r2, [r3, #0]
    g_queue_head = g_queue_tail = g_queue_count = 0u;
 80037d4:	4b38      	ldr	r3, [pc, #224]	@ (80038b8 <motion_service_init+0x170>)
 80037d6:	2200      	movs	r2, #0
 80037d8:	701a      	strb	r2, [r3, #0]
 80037da:	4b37      	ldr	r3, [pc, #220]	@ (80038b8 <motion_service_init+0x170>)
 80037dc:	781a      	ldrb	r2, [r3, #0]
 80037de:	4b37      	ldr	r3, [pc, #220]	@ (80038bc <motion_service_init+0x174>)
 80037e0:	701a      	strb	r2, [r3, #0]
 80037e2:	4b36      	ldr	r3, [pc, #216]	@ (80038bc <motion_service_init+0x174>)
 80037e4:	781a      	ldrb	r2, [r3, #0]
 80037e6:	4b36      	ldr	r3, [pc, #216]	@ (80038c0 <motion_service_init+0x178>)
 80037e8:	701a      	strb	r2, [r3, #0]
    g_has_active_segment = 0u;
 80037ea:	4b36      	ldr	r3, [pc, #216]	@ (80038c4 <motion_service_init+0x17c>)
 80037ec:	2200      	movs	r2, #0
 80037ee:	701a      	strb	r2, [r3, #0]

    motion_stop_all_axes_locked();
 80037f0:	f7ff fbb4 	bl	8002f5c <motion_stop_all_axes_locked>
    motion_refresh_status_locked();
 80037f4:	f7ff fa1a 	bl	8002c2c <motion_refresh_status_locked>
    motion_unlock(primask);
 80037f8:	68b8      	ldr	r0, [r7, #8]
 80037fa:	f7ff f91c 	bl	8002a36 <motion_unlock>

    motion_hw_init();
 80037fe:	f7fe ff63 	bl	80026c8 <motion_hw_init>

    for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8003802:	2300      	movs	r3, #0
 8003804:	73fb      	strb	r3, [r7, #15]
 8003806:	e01a      	b.n	800383e <motion_service_init+0xf6>
        uint32_t raw = motion_hw_encoder_read_raw(axis);
 8003808:	7bfb      	ldrb	r3, [r7, #15]
 800380a:	4618      	mov	r0, r3
 800380c:	f7ff f8ac 	bl	8002968 <motion_hw_encoder_read_raw>
 8003810:	6078      	str	r0, [r7, #4]
        if (motion_hw_encoder_bits(axis) == 16u) {
 8003812:	7bfb      	ldrb	r3, [r7, #15]
 8003814:	4618      	mov	r0, r3
 8003816:	f7ff f8cf 	bl	80029b8 <motion_hw_encoder_bits>
 800381a:	4603      	mov	r3, r0
 800381c:	2b10      	cmp	r3, #16
 800381e:	d106      	bne.n	800382e <motion_service_init+0xe6>
            g_encoder_last_raw[axis] = raw & 0xFFFFu;
 8003820:	7bfb      	ldrb	r3, [r7, #15]
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	b292      	uxth	r2, r2
 8003826:	491c      	ldr	r1, [pc, #112]	@ (8003898 <motion_service_init+0x150>)
 8003828:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800382c:	e004      	b.n	8003838 <motion_service_init+0xf0>
        } else {
            g_encoder_last_raw[axis] = raw;
 800382e:	7bfb      	ldrb	r3, [r7, #15]
 8003830:	4919      	ldr	r1, [pc, #100]	@ (8003898 <motion_service_init+0x150>)
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8003838:	7bfb      	ldrb	r3, [r7, #15]
 800383a:	3301      	adds	r3, #1
 800383c:	73fb      	strb	r3, [r7, #15]
 800383e:	7bfb      	ldrb	r3, [r7, #15]
 8003840:	2b02      	cmp	r3, #2
 8003842:	d9e1      	bls.n	8003808 <motion_service_init+0xc0>
        }
    }

    if (HAL_TIM_Base_Start_IT(&htim6) != HAL_OK) Error_Handler();
 8003844:	4820      	ldr	r0, [pc, #128]	@ (80038c8 <motion_service_init+0x180>)
 8003846:	f007 fd4d 	bl	800b2e4 <HAL_TIM_Base_Start_IT>
 800384a:	4603      	mov	r3, r0
 800384c:	2b00      	cmp	r3, #0
 800384e:	d001      	beq.n	8003854 <motion_service_init+0x10c>
 8003850:	f002 fa4c 	bl	8005cec <Error_Handler>
    if (HAL_TIM_Base_Start_IT(&htim7) != HAL_OK) Error_Handler();
 8003854:	481d      	ldr	r0, [pc, #116]	@ (80038cc <motion_service_init+0x184>)
 8003856:	f007 fd45 	bl	800b2e4 <HAL_TIM_Base_Start_IT>
 800385a:	4603      	mov	r3, r0
 800385c:	2b00      	cmp	r3, #0
 800385e:	d001      	beq.n	8003864 <motion_service_init+0x11c>
 8003860:	f002 fa44 	bl	8005cec <Error_Handler>

    LOGT_THIS(LOG_STATE_START, PROTO_OK, "init", "timers_ready");
 8003864:	4a1a      	ldr	r2, [pc, #104]	@ (80038d0 <motion_service_init+0x188>)
 8003866:	4b1b      	ldr	r3, [pc, #108]	@ (80038d4 <motion_service_init+0x18c>)
 8003868:	9302      	str	r3, [sp, #8]
 800386a:	4b1b      	ldr	r3, [pc, #108]	@ (80038d8 <motion_service_init+0x190>)
 800386c:	9301      	str	r3, [sp, #4]
 800386e:	4b1b      	ldr	r3, [pc, #108]	@ (80038dc <motion_service_init+0x194>)
 8003870:	9300      	str	r3, [sp, #0]
 8003872:	4613      	mov	r3, r2
 8003874:	2200      	movs	r2, #0
 8003876:	2100      	movs	r1, #0
 8003878:	2002      	movs	r0, #2
 800387a:	f7fe feb7 	bl	80025ec <log_event_auto>
}
 800387e:	bf00      	nop
 8003880:	3710      	adds	r7, #16
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
 8003886:	bf00      	nop
 8003888:	200000d0 	.word	0x200000d0
 800388c:	200000d8 	.word	0x200000d8
 8003890:	2000016c 	.word	0x2000016c
 8003894:	20000c70 	.word	0x20000c70
 8003898:	20000c88 	.word	0x20000c88
 800389c:	20000c98 	.word	0x20000c98
 80038a0:	20000cb0 	.word	0x20000cb0
 80038a4:	20000ce0 	.word	0x20000ce0
 80038a8:	20000cec 	.word	0x20000cec
 80038ac:	20000cbc 	.word	0x20000cbc
 80038b0:	20000cc8 	.word	0x20000cc8
 80038b4:	20000cd4 	.word	0x20000cd4
 80038b8:	20000c6e 	.word	0x20000c6e
 80038bc:	20000c6d 	.word	0x20000c6d
 80038c0:	20000c6c 	.word	0x20000c6c
 80038c4:	20000168 	.word	0x20000168
 80038c8:	20000fd0 	.word	0x20000fd0
 80038cc:	2000101c 	.word	0x2000101c
 80038d0:	080105fc 	.word	0x080105fc
 80038d4:	08010730 	.word	0x08010730
 80038d8:	08010740 	.word	0x08010740
 80038dc:	08010744 	.word	0x08010744

080038e0 <motion_on_tim6_tick>:
 *  - fecha largura de pulso
 *  - DEMO: DDA suave
 *  - Fila: caminho original
 * ======================= */
void motion_on_tim6_tick(void)
{
 80038e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038e2:	b091      	sub	sp, #68	@ 0x44
 80038e4:	af06      	add	r7, sp, #24
    if (g_status.state != MOTION_RUNNING || !g_has_active_segment)
 80038e6:	4ba1      	ldr	r3, [pc, #644]	@ (8003b6c <motion_on_tim6_tick+0x28c>)
 80038e8:	781b      	ldrb	r3, [r3, #0]
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	2b02      	cmp	r3, #2
 80038ee:	f040 8191 	bne.w	8003c14 <motion_on_tim6_tick+0x334>
 80038f2:	4b9f      	ldr	r3, [pc, #636]	@ (8003b70 <motion_on_tim6_tick+0x290>)
 80038f4:	781b      	ldrb	r3, [r3, #0]
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	f000 818b 	beq.w	8003c14 <motion_on_tim6_tick+0x334>
        return;

    /* 1) Fecha pulsos altos pendentes (garante largura do STEP) */
    for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 80038fe:	2300      	movs	r3, #0
 8003900:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003904:	e02e      	b.n	8003964 <motion_on_tim6_tick+0x84>
        motion_axis_state_t *ax = &g_axis_state[axis];
 8003906:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800390a:	4613      	mov	r3, r2
 800390c:	005b      	lsls	r3, r3, #1
 800390e:	4413      	add	r3, r2
 8003910:	011b      	lsls	r3, r3, #4
 8003912:	4a98      	ldr	r2, [pc, #608]	@ (8003b74 <motion_on_tim6_tick+0x294>)
 8003914:	4413      	add	r3, r2
 8003916:	60fb      	str	r3, [r7, #12]
        if (ax->step_high) {
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	7d1b      	ldrb	r3, [r3, #20]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d012      	beq.n	8003946 <motion_on_tim6_tick+0x66>
            if (--ax->step_high == 0u) {
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	7d1b      	ldrb	r3, [r3, #20]
 8003924:	3b01      	subs	r3, #1
 8003926:	b2da      	uxtb	r2, r3
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	751a      	strb	r2, [r3, #20]
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	7d1b      	ldrb	r3, [r3, #20]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d112      	bne.n	800395a <motion_on_tim6_tick+0x7a>
                motion_hw_step_low(axis);
 8003934:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003938:	4618      	mov	r0, r3
 800393a:	f7fe fff1 	bl	8002920 <motion_hw_step_low>
                ax->step_low = MOTION_STEP_LOW_TICKS; /* Para voltar ao comportamento anterior, defina MOTION_STEP_LOW_TICKS=0u */
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2201      	movs	r2, #1
 8003942:	755a      	strb	r2, [r3, #21]
 8003944:	e009      	b.n	800395a <motion_on_tim6_tick+0x7a>
            }
        } else if (ax->step_low) {
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	7d5b      	ldrb	r3, [r3, #21]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d005      	beq.n	800395a <motion_on_tim6_tick+0x7a>
            --ax->step_low;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	7d5b      	ldrb	r3, [r3, #21]
 8003952:	3b01      	subs	r3, #1
 8003954:	b2da      	uxtb	r2, r3
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	755a      	strb	r2, [r3, #21]
    for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 800395a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800395e:	3301      	adds	r3, #1
 8003960:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003964:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003968:	2b02      	cmp	r3, #2
 800396a:	d9cc      	bls.n	8003906 <motion_on_tim6_tick+0x26>
        }
    }

    if (g_demo_continuous) {
 800396c:	4b82      	ldr	r3, [pc, #520]	@ (8003b78 <motion_on_tim6_tick+0x298>)
 800396e:	781b      	ldrb	r3, [r3, #0]
 8003970:	b2db      	uxtb	r3, r3
 8003972:	2b00      	cmp	r3, #0
 8003974:	d065      	beq.n	8003a42 <motion_on_tim6_tick+0x162>
        for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8003976:	2300      	movs	r3, #0
 8003978:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800397c:	e05c      	b.n	8003a38 <motion_on_tim6_tick+0x158>
            motion_axis_state_t *ax = &g_axis_state[axis];
 800397e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8003982:	4613      	mov	r3, r2
 8003984:	005b      	lsls	r3, r3, #1
 8003986:	4413      	add	r3, r2
 8003988:	011b      	lsls	r3, r3, #4
 800398a:	4a7a      	ldr	r2, [pc, #488]	@ (8003b74 <motion_on_tim6_tick+0x294>)
 800398c:	4413      	add	r3, r2
 800398e:	61bb      	str	r3, [r7, #24]

            if (ax->emitted_steps >= ax->total_steps) continue;
 8003990:	69bb      	ldr	r3, [r7, #24]
 8003992:	689a      	ldr	r2, [r3, #8]
 8003994:	69bb      	ldr	r3, [r7, #24]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	429a      	cmp	r2, r3
 800399a:	d243      	bcs.n	8003a24 <motion_on_tim6_tick+0x144>

            /* guardas de ENABLE e DIR (atendem setup/hold do TMC5160) */
            if (ax->en_settle_ticks)  { ax->en_settle_ticks--;  continue; }
 800399c:	69bb      	ldr	r3, [r7, #24]
 800399e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d008      	beq.n	80039b8 <motion_on_tim6_tick+0xd8>
 80039a6:	69bb      	ldr	r3, [r7, #24]
 80039a8:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80039ac:	3b01      	subs	r3, #1
 80039ae:	b2da      	uxtb	r2, r3
 80039b0:	69bb      	ldr	r3, [r7, #24]
 80039b2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
 80039b6:	e03a      	b.n	8003a2e <motion_on_tim6_tick+0x14e>
            if (ax->dir_settle_ticks) { ax->dir_settle_ticks--; continue; }
 80039b8:	69bb      	ldr	r3, [r7, #24]
 80039ba:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d008      	beq.n	80039d4 <motion_on_tim6_tick+0xf4>
 80039c2:	69bb      	ldr	r3, [r7, #24]
 80039c4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80039c8:	3b01      	subs	r3, #1
 80039ca:	b2da      	uxtb	r2, r3
 80039cc:	69bb      	ldr	r3, [r7, #24]
 80039ce:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
 80039d2:	e02c      	b.n	8003a2e <motion_on_tim6_tick+0x14e>

            if (ax->step_high) continue; /* ainda segurando pulso ALTO */
 80039d4:	69bb      	ldr	r3, [r7, #24]
 80039d6:	7d1b      	ldrb	r3, [r3, #20]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d125      	bne.n	8003a28 <motion_on_tim6_tick+0x148>
            if (ax->step_low)  continue; 
 80039dc:	69bb      	ldr	r3, [r7, #24]
 80039de:	7d5b      	ldrb	r3, [r3, #21]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d123      	bne.n	8003a2c <motion_on_tim6_tick+0x14c>

            /* DDA: acumula fase e emite STEP ao cruzar 1.0 */
            ax->dda_accum_q16 += ax->dda_inc_q16;
 80039e4:	69bb      	ldr	r3, [r7, #24]
 80039e6:	699a      	ldr	r2, [r3, #24]
 80039e8:	69bb      	ldr	r3, [r7, #24]
 80039ea:	69db      	ldr	r3, [r3, #28]
 80039ec:	441a      	add	r2, r3
 80039ee:	69bb      	ldr	r3, [r7, #24]
 80039f0:	619a      	str	r2, [r3, #24]
            if (ax->dda_accum_q16 >= Q16_1) {
 80039f2:	69bb      	ldr	r3, [r7, #24]
 80039f4:	699b      	ldr	r3, [r3, #24]
 80039f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039fa:	d318      	bcc.n	8003a2e <motion_on_tim6_tick+0x14e>
                ax->dda_accum_q16 -= Q16_1;
 80039fc:	69bb      	ldr	r3, [r7, #24]
 80039fe:	699b      	ldr	r3, [r3, #24]
 8003a00:	f5a3 3280 	sub.w	r2, r3, #65536	@ 0x10000
 8003a04:	69bb      	ldr	r3, [r7, #24]
 8003a06:	619a      	str	r2, [r3, #24]

                motion_hw_step_high(axis);
 8003a08:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f7fe ff63 	bl	80028d8 <motion_hw_step_high>
                ax->step_high = MOTION_STEP_HIGH_TICKS;
 8003a12:	69bb      	ldr	r3, [r7, #24]
 8003a14:	2201      	movs	r2, #1
 8003a16:	751a      	strb	r2, [r3, #20]
                ++ax->emitted_steps;
 8003a18:	69bb      	ldr	r3, [r7, #24]
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	1c5a      	adds	r2, r3, #1
 8003a1e:	69bb      	ldr	r3, [r7, #24]
 8003a20:	609a      	str	r2, [r3, #8]
 8003a22:	e004      	b.n	8003a2e <motion_on_tim6_tick+0x14e>
            if (ax->emitted_steps >= ax->total_steps) continue;
 8003a24:	bf00      	nop
 8003a26:	e002      	b.n	8003a2e <motion_on_tim6_tick+0x14e>
            if (ax->step_high) continue; /* ainda segurando pulso ALTO */
 8003a28:	bf00      	nop
 8003a2a:	e000      	b.n	8003a2e <motion_on_tim6_tick+0x14e>
            if (ax->step_low)  continue; 
 8003a2c:	bf00      	nop
        for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8003a2e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003a32:	3301      	adds	r3, #1
 8003a34:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8003a38:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003a3c:	2b02      	cmp	r3, #2
 8003a3e:	d99e      	bls.n	800397e <motion_on_tim6_tick+0x9e>
 8003a40:	e06e      	b.n	8003b20 <motion_on_tim6_tick+0x240>
            }
        }
    }
    else {
        /* 3) Caminho original (fila): preservado */
        for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8003a42:	2300      	movs	r3, #0
 8003a44:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8003a48:	e066      	b.n	8003b18 <motion_on_tim6_tick+0x238>
            motion_axis_state_t *ax = &g_axis_state[axis];
 8003a4a:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8003a4e:	4613      	mov	r3, r2
 8003a50:	005b      	lsls	r3, r3, #1
 8003a52:	4413      	add	r3, r2
 8003a54:	011b      	lsls	r3, r3, #4
 8003a56:	4a47      	ldr	r2, [pc, #284]	@ (8003b74 <motion_on_tim6_tick+0x294>)
 8003a58:	4413      	add	r3, r2
 8003a5a:	61fb      	str	r3, [r7, #28]

            if (ax->step_high) continue;
 8003a5c:	69fb      	ldr	r3, [r7, #28]
 8003a5e:	7d1b      	ldrb	r3, [r3, #20]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d14f      	bne.n	8003b04 <motion_on_tim6_tick+0x224>
            if (ax->step_low)  continue; 
 8003a64:	69fb      	ldr	r3, [r7, #28]
 8003a66:	7d5b      	ldrb	r3, [r3, #21]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d14d      	bne.n	8003b08 <motion_on_tim6_tick+0x228>
            if (ax->emitted_steps >= ax->total_steps) continue;
 8003a6c:	69fb      	ldr	r3, [r7, #28]
 8003a6e:	689a      	ldr	r2, [r3, #8]
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d249      	bcs.n	8003b0c <motion_on_tim6_tick+0x22c>

            if (ax->en_settle_ticks)  { ax->en_settle_ticks--;  continue; }
 8003a78:	69fb      	ldr	r3, [r7, #28]
 8003a7a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d008      	beq.n	8003a94 <motion_on_tim6_tick+0x1b4>
 8003a82:	69fb      	ldr	r3, [r7, #28]
 8003a84:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8003a88:	3b01      	subs	r3, #1
 8003a8a:	b2da      	uxtb	r2, r3
 8003a8c:	69fb      	ldr	r3, [r7, #28]
 8003a8e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
 8003a92:	e03c      	b.n	8003b0e <motion_on_tim6_tick+0x22e>
            if (ax->dir_settle_ticks) { ax->dir_settle_ticks--; continue; }
 8003a94:	69fb      	ldr	r3, [r7, #28]
 8003a96:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d008      	beq.n	8003ab0 <motion_on_tim6_tick+0x1d0>
 8003a9e:	69fb      	ldr	r3, [r7, #28]
 8003aa0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8003aa4:	3b01      	subs	r3, #1
 8003aa6:	b2da      	uxtb	r2, r3
 8003aa8:	69fb      	ldr	r3, [r7, #28]
 8003aaa:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
 8003aae:	e02e      	b.n	8003b0e <motion_on_tim6_tick+0x22e>

            /* DDA (fila): acumula fase e emite STEP no cruzamento de 1.0 */
            ax->dda_accum_q16 += ax->dda_inc_q16;
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	699a      	ldr	r2, [r3, #24]
 8003ab4:	69fb      	ldr	r3, [r7, #28]
 8003ab6:	69db      	ldr	r3, [r3, #28]
 8003ab8:	441a      	add	r2, r3
 8003aba:	69fb      	ldr	r3, [r7, #28]
 8003abc:	619a      	str	r2, [r3, #24]
            if (ax->dda_accum_q16 >= Q16_1) {
 8003abe:	69fb      	ldr	r3, [r7, #28]
 8003ac0:	699b      	ldr	r3, [r3, #24]
 8003ac2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ac6:	d322      	bcc.n	8003b0e <motion_on_tim6_tick+0x22e>
                ax->dda_accum_q16 -= Q16_1;
 8003ac8:	69fb      	ldr	r3, [r7, #28]
 8003aca:	699b      	ldr	r3, [r3, #24]
 8003acc:	f5a3 3280 	sub.w	r2, r3, #65536	@ 0x10000
 8003ad0:	69fb      	ldr	r3, [r7, #28]
 8003ad2:	619a      	str	r2, [r3, #24]
                if (ax->emitted_steps < ax->total_steps) {
 8003ad4:	69fb      	ldr	r3, [r7, #28]
 8003ad6:	689a      	ldr	r2, [r3, #8]
 8003ad8:	69fb      	ldr	r3, [r7, #28]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d216      	bcs.n	8003b0e <motion_on_tim6_tick+0x22e>
                    motion_hw_step_high(axis);
 8003ae0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f7fe fef7 	bl	80028d8 <motion_hw_step_high>
                    ax->step_high = MOTION_STEP_HIGH_TICKS;
 8003aea:	69fb      	ldr	r3, [r7, #28]
 8003aec:	2201      	movs	r2, #1
 8003aee:	751a      	strb	r2, [r3, #20]
                    ++ax->emitted_steps;
 8003af0:	69fb      	ldr	r3, [r7, #28]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	1c5a      	adds	r2, r3, #1
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	609a      	str	r2, [r3, #8]
                    ax->target_steps = ax->emitted_steps;
 8003afa:	69fb      	ldr	r3, [r7, #28]
 8003afc:	689a      	ldr	r2, [r3, #8]
 8003afe:	69fb      	ldr	r3, [r7, #28]
 8003b00:	605a      	str	r2, [r3, #4]
 8003b02:	e004      	b.n	8003b0e <motion_on_tim6_tick+0x22e>
            if (ax->step_high) continue;
 8003b04:	bf00      	nop
 8003b06:	e002      	b.n	8003b0e <motion_on_tim6_tick+0x22e>
            if (ax->step_low)  continue; 
 8003b08:	bf00      	nop
 8003b0a:	e000      	b.n	8003b0e <motion_on_tim6_tick+0x22e>
            if (ax->emitted_steps >= ax->total_steps) continue;
 8003b0c:	bf00      	nop
        for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8003b0e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003b12:	3301      	adds	r3, #1
 8003b14:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8003b18:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003b1c:	2b02      	cmp	r3, #2
 8003b1e:	d994      	bls.n	8003a4a <motion_on_tim6_tick+0x16a>
#endif
                }
            }
        }
    }
    uint32_t primask = motion_lock();
 8003b20:	f7fe ff78 	bl	8002a14 <motion_lock>
 8003b24:	6178      	str	r0, [r7, #20]
    if (g_has_active_segment) {
 8003b26:	4b12      	ldr	r3, [pc, #72]	@ (8003b70 <motion_on_tim6_tick+0x290>)
 8003b28:	781b      	ldrb	r3, [r3, #0]
 8003b2a:	b2db      	uxtb	r3, r3
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d06d      	beq.n	8003c0c <motion_on_tim6_tick+0x32c>
        uint8_t confirm = 1u;
 8003b30:	2301      	movs	r3, #1
 8003b32:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8003b36:	2300      	movs	r3, #0
 8003b38:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b3c:	e023      	b.n	8003b86 <motion_on_tim6_tick+0x2a6>
            const motion_axis_state_t *ax = &g_axis_state[axis];
 8003b3e:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8003b42:	4613      	mov	r3, r2
 8003b44:	005b      	lsls	r3, r3, #1
 8003b46:	4413      	add	r3, r2
 8003b48:	011b      	lsls	r3, r3, #4
 8003b4a:	4a0a      	ldr	r2, [pc, #40]	@ (8003b74 <motion_on_tim6_tick+0x294>)
 8003b4c:	4413      	add	r3, r2
 8003b4e:	613b      	str	r3, [r7, #16]
            if (ax->emitted_steps < ax->total_steps || ax->step_high) {
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	689a      	ldr	r2, [r3, #8]
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d303      	bcc.n	8003b64 <motion_on_tim6_tick+0x284>
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	7d1b      	ldrb	r3, [r3, #20]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d00b      	beq.n	8003b7c <motion_on_tim6_tick+0x29c>
                confirm = 0u; break;
 8003b64:	2300      	movs	r3, #0
 8003b66:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 8003b6a:	e010      	b.n	8003b8e <motion_on_tim6_tick+0x2ae>
 8003b6c:	200000d0 	.word	0x200000d0
 8003b70:	20000168 	.word	0x20000168
 8003b74:	200000d8 	.word	0x200000d8
 8003b78:	20000d10 	.word	0x20000d10
        for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8003b7c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003b80:	3301      	adds	r3, #1
 8003b82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b86:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003b8a:	2b02      	cmp	r3, #2
 8003b8c:	d9d7      	bls.n	8003b3e <motion_on_tim6_tick+0x25e>
            }
        }
        if (confirm) {
 8003b8e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d03a      	beq.n	8003c0c <motion_on_tim6_tick+0x32c>
            if (motion_try_start_next_locked()) {
 8003b96:	f7ff fbbb 	bl	8003310 <motion_try_start_next_locked>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d006      	beq.n	8003bae <motion_on_tim6_tick+0x2ce>
                g_status.state = MOTION_RUNNING;
 8003ba0:	4b1e      	ldr	r3, [pc, #120]	@ (8003c1c <motion_on_tim6_tick+0x33c>)
 8003ba2:	2202      	movs	r2, #2
 8003ba4:	701a      	strb	r2, [r3, #0]
#if MOTION_DEBUG_FLOW
                printf("[FLOW next_segment started]\r\n");
 8003ba6:	481e      	ldr	r0, [pc, #120]	@ (8003c20 <motion_on_tim6_tick+0x340>)
 8003ba8:	f00b fbc6 	bl	800f338 <puts>
 8003bac:	e02c      	b.n	8003c08 <motion_on_tim6_tick+0x328>
#endif
            } else {
                g_has_active_segment = 0u;
 8003bae:	4b1d      	ldr	r3, [pc, #116]	@ (8003c24 <motion_on_tim6_tick+0x344>)
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	701a      	strb	r2, [r3, #0]
                motion_stop_all_axes_locked();
 8003bb4:	f7ff f9d2 	bl	8002f5c <motion_stop_all_axes_locked>
                g_status.state = MOTION_DONE;
 8003bb8:	4b18      	ldr	r3, [pc, #96]	@ (8003c1c <motion_on_tim6_tick+0x33c>)
 8003bba:	2205      	movs	r2, #5
 8003bbc:	701a      	strb	r2, [r3, #0]
                motion_send_move_end_response(g_active_frame_id);
 8003bbe:	4b1a      	ldr	r3, [pc, #104]	@ (8003c28 <motion_on_tim6_tick+0x348>)
 8003bc0:	781b      	ldrb	r3, [r3, #0]
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f7ff fd8e 	bl	80036e4 <motion_send_move_end_response>
#if MOTION_DEBUG_ENCODERS
                printf("[ENC DONE abs=(%ld,%ld,%ld) rel=(%ld,%ld,%ld) target=(%lu,%lu,%lu)]\r\n",
                       (long)g_enc_abs32[AXIS_X],
 8003bc8:	4b18      	ldr	r3, [pc, #96]	@ (8003c2c <motion_on_tim6_tick+0x34c>)
 8003bca:	681e      	ldr	r6, [r3, #0]
                       (long)g_enc_abs32[AXIS_Y],
 8003bcc:	4b17      	ldr	r3, [pc, #92]	@ (8003c2c <motion_on_tim6_tick+0x34c>)
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	607b      	str	r3, [r7, #4]
                       (long)g_enc_abs32[AXIS_Z],
 8003bd2:	4b16      	ldr	r3, [pc, #88]	@ (8003c2c <motion_on_tim6_tick+0x34c>)
 8003bd4:	6899      	ldr	r1, [r3, #8]
 8003bd6:	6039      	str	r1, [r7, #0]
                       (long)g_enc_rel32[AXIS_X],
 8003bd8:	4b15      	ldr	r3, [pc, #84]	@ (8003c30 <motion_on_tim6_tick+0x350>)
 8003bda:	681b      	ldr	r3, [r3, #0]
                       (long)g_enc_rel32[AXIS_Y],
 8003bdc:	4a14      	ldr	r2, [pc, #80]	@ (8003c30 <motion_on_tim6_tick+0x350>)
 8003bde:	6852      	ldr	r2, [r2, #4]
                       (long)g_enc_rel32[AXIS_Z],
 8003be0:	4913      	ldr	r1, [pc, #76]	@ (8003c30 <motion_on_tim6_tick+0x350>)
 8003be2:	6889      	ldr	r1, [r1, #8]
                       (unsigned long)g_axis_state[AXIS_X].total_steps,
 8003be4:	4813      	ldr	r0, [pc, #76]	@ (8003c34 <motion_on_tim6_tick+0x354>)
 8003be6:	6800      	ldr	r0, [r0, #0]
                       (unsigned long)g_axis_state[AXIS_Y].total_steps,
 8003be8:	4c12      	ldr	r4, [pc, #72]	@ (8003c34 <motion_on_tim6_tick+0x354>)
 8003bea:	6b24      	ldr	r4, [r4, #48]	@ 0x30
                       (unsigned long)g_axis_state[AXIS_Z].total_steps);
 8003bec:	4d11      	ldr	r5, [pc, #68]	@ (8003c34 <motion_on_tim6_tick+0x354>)
 8003bee:	6e2d      	ldr	r5, [r5, #96]	@ 0x60
                printf("[ENC DONE abs=(%ld,%ld,%ld) rel=(%ld,%ld,%ld) target=(%lu,%lu,%lu)]\r\n",
 8003bf0:	9505      	str	r5, [sp, #20]
 8003bf2:	9404      	str	r4, [sp, #16]
 8003bf4:	9003      	str	r0, [sp, #12]
 8003bf6:	9102      	str	r1, [sp, #8]
 8003bf8:	9201      	str	r2, [sp, #4]
 8003bfa:	9300      	str	r3, [sp, #0]
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	687a      	ldr	r2, [r7, #4]
 8003c00:	4631      	mov	r1, r6
 8003c02:	480d      	ldr	r0, [pc, #52]	@ (8003c38 <motion_on_tim6_tick+0x358>)
 8003c04:	f00b fb30 	bl	800f268 <iprintf>
#endif
            }
            motion_refresh_status_locked();
 8003c08:	f7ff f810 	bl	8002c2c <motion_refresh_status_locked>
        }
    }
    motion_unlock(primask);
 8003c0c:	6978      	ldr	r0, [r7, #20]
 8003c0e:	f7fe ff12 	bl	8002a36 <motion_unlock>
 8003c12:	e000      	b.n	8003c16 <motion_on_tim6_tick+0x336>
        return;
 8003c14:	bf00      	nop
}
 8003c16:	372c      	adds	r7, #44	@ 0x2c
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c1c:	200000d0 	.word	0x200000d0
 8003c20:	0801074c 	.word	0x0801074c
 8003c24:	20000168 	.word	0x20000168
 8003c28:	20000c6f 	.word	0x20000c6f
 8003c2c:	20000cf8 	.word	0x20000cf8
 8003c30:	20000d04 	.word	0x20000d04
 8003c34:	200000d8 	.word	0x200000d8
 8003c38:	0801076c 	.word	0x0801076c

08003c3c <motion_on_tim7_tick>:
 *  - Atualiza encoders
 *  - DEMO: rampa e dda_inc
 *  - Fila: sua original de target_steps
 * ======================= */
void motion_on_tim7_tick(void)
{
 8003c3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c40:	b0b4      	sub	sp, #208	@ 0xd0
 8003c42:	af00      	add	r7, sp, #0
    motion_update_encoders();
 8003c44:	f7ff fb8c 	bl	8003360 <motion_update_encoders>

    // Atualiza sombras 32-bit para SWV/Data Trace (4 bytes por amostra)
    for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8003c48:	2300      	movs	r3, #0
 8003c4a:	f887 30cf 	strb.w	r3, [r7, #207]	@ 0xcf
 8003c4e:	e027      	b.n	8003ca0 <motion_on_tim7_tick+0x64>
        g_enc_abs32[axis] = (int32_t)g_encoder_position[axis];
 8003c50:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 8003c54:	4ac9      	ldr	r2, [pc, #804]	@ (8003f7c <motion_on_tim7_tick+0x340>)
 8003c56:	00db      	lsls	r3, r3, #3
 8003c58:	4413      	add	r3, r2
 8003c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c5e:	f897 10cf 	ldrb.w	r1, [r7, #207]	@ 0xcf
 8003c62:	4bc7      	ldr	r3, [pc, #796]	@ (8003f80 <motion_on_tim7_tick+0x344>)
 8003c64:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
        g_enc_rel32[axis] = (int32_t)(g_encoder_position[axis] - g_encoder_origin[axis]);
 8003c68:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 8003c6c:	4ac3      	ldr	r2, [pc, #780]	@ (8003f7c <motion_on_tim7_tick+0x340>)
 8003c6e:	00db      	lsls	r3, r3, #3
 8003c70:	4413      	add	r3, r2
 8003c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c76:	4611      	mov	r1, r2
 8003c78:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 8003c7c:	4ac1      	ldr	r2, [pc, #772]	@ (8003f84 <motion_on_tim7_tick+0x348>)
 8003c7e:	00db      	lsls	r3, r3, #3
 8003c80:	4413      	add	r3, r2
 8003c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c86:	4613      	mov	r3, r2
 8003c88:	1acb      	subs	r3, r1, r3
 8003c8a:	f897 20cf 	ldrb.w	r2, [r7, #207]	@ 0xcf
 8003c8e:	4619      	mov	r1, r3
 8003c90:	4bbd      	ldr	r3, [pc, #756]	@ (8003f88 <motion_on_tim7_tick+0x34c>)
 8003c92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8003c96:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 8003c9a:	3301      	adds	r3, #1
 8003c9c:	f887 30cf 	strb.w	r3, [r7, #207]	@ 0xcf
 8003ca0:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 8003ca4:	2b02      	cmp	r3, #2
 8003ca6:	d9d3      	bls.n	8003c50 <motion_on_tim7_tick+0x14>
    }

    /* DEMO: aplica rampa e calcula incremento do DDA */
    if (g_status.state == MOTION_RUNNING && g_has_active_segment && g_demo_continuous) {
 8003ca8:	4bb8      	ldr	r3, [pc, #736]	@ (8003f8c <motion_on_tim7_tick+0x350>)
 8003caa:	781b      	ldrb	r3, [r3, #0]
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	2b02      	cmp	r3, #2
 8003cb0:	f040 80c5 	bne.w	8003e3e <motion_on_tim7_tick+0x202>
 8003cb4:	4bb6      	ldr	r3, [pc, #728]	@ (8003f90 <motion_on_tim7_tick+0x354>)
 8003cb6:	781b      	ldrb	r3, [r3, #0]
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	f000 80bf 	beq.w	8003e3e <motion_on_tim7_tick+0x202>
 8003cc0:	4bb4      	ldr	r3, [pc, #720]	@ (8003f94 <motion_on_tim7_tick+0x358>)
 8003cc2:	781b      	ldrb	r3, [r3, #0]
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	f000 80b9 	beq.w	8003e3e <motion_on_tim7_tick+0x202>
        for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8003ccc:	2300      	movs	r3, #0
 8003cce:	f887 30ce 	strb.w	r3, [r7, #206]	@ 0xce
 8003cd2:	e0af      	b.n	8003e34 <motion_on_tim7_tick+0x1f8>
            motion_axis_state_t *ax = &g_axis_state[axis];
 8003cd4:	f897 20ce 	ldrb.w	r2, [r7, #206]	@ 0xce
 8003cd8:	4613      	mov	r3, r2
 8003cda:	005b      	lsls	r3, r3, #1
 8003cdc:	4413      	add	r3, r2
 8003cde:	011b      	lsls	r3, r3, #4
 8003ce0:	4aad      	ldr	r2, [pc, #692]	@ (8003f98 <motion_on_tim7_tick+0x35c>)
 8003ce2:	4413      	add	r3, r2
 8003ce4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
            if (ax->emitted_steps >= ax->total_steps) continue;
 8003ce8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003cec:	689a      	ldr	r2, [r3, #8]
 8003cee:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	f080 8097 	bcs.w	8003e28 <motion_on_tim7_tick+0x1ec>

            /* Aceleração integrada: acumula a/1000 e aplica passos discretos em v */
            g_v_accum[axis] += ax->accel_sps2; /* steps/s^2 * 1ms */
 8003cfa:	f897 20ce 	ldrb.w	r2, [r7, #206]	@ 0xce
 8003cfe:	4ba7      	ldr	r3, [pc, #668]	@ (8003f9c <motion_on_tim7_tick+0x360>)
 8003d00:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003d04:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003d08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d0a:	f897 10ce 	ldrb.w	r1, [r7, #206]	@ 0xce
 8003d0e:	441a      	add	r2, r3
 8003d10:	4ba2      	ldr	r3, [pc, #648]	@ (8003f9c <motion_on_tim7_tick+0x360>)
 8003d12:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
            uint32_t steps_avail = 0u;
 8003d16:	2300      	movs	r3, #0
 8003d18:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
            while (g_v_accum[axis] >= 1000u) { g_v_accum[axis] -= 1000u; steps_avail++; }
 8003d1c:	e010      	b.n	8003d40 <motion_on_tim7_tick+0x104>
 8003d1e:	f897 20ce 	ldrb.w	r2, [r7, #206]	@ 0xce
 8003d22:	4b9e      	ldr	r3, [pc, #632]	@ (8003f9c <motion_on_tim7_tick+0x360>)
 8003d24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d28:	f897 10ce 	ldrb.w	r1, [r7, #206]	@ 0xce
 8003d2c:	f5a3 727a 	sub.w	r2, r3, #1000	@ 0x3e8
 8003d30:	4b9a      	ldr	r3, [pc, #616]	@ (8003f9c <motion_on_tim7_tick+0x360>)
 8003d32:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8003d36:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003d3a:	3301      	adds	r3, #1
 8003d3c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003d40:	f897 20ce 	ldrb.w	r2, [r7, #206]	@ 0xce
 8003d44:	4b95      	ldr	r3, [pc, #596]	@ (8003f9c <motion_on_tim7_tick+0x360>)
 8003d46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d4a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003d4e:	d2e6      	bcs.n	8003d1e <motion_on_tim7_tick+0xe2>
            while (steps_avail--) {
 8003d50:	e03f      	b.n	8003dd2 <motion_on_tim7_tick+0x196>
                if (ax->v_actual_sps < ax->v_target_sps) {
 8003d52:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003d56:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003d58:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003d5c:	6a1b      	ldr	r3, [r3, #32]
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d215      	bcs.n	8003d8e <motion_on_tim7_tick+0x152>
                    ax->v_actual_sps++;
 8003d62:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003d66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d68:	1c5a      	adds	r2, r3, #1
 8003d6a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003d6e:	625a      	str	r2, [r3, #36]	@ 0x24
                    if (ax->v_actual_sps > ax->v_target_sps) ax->v_actual_sps = ax->v_target_sps;
 8003d70:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003d74:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003d76:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003d7a:	6a1b      	ldr	r3, [r3, #32]
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d928      	bls.n	8003dd2 <motion_on_tim7_tick+0x196>
 8003d80:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003d84:	6a1a      	ldr	r2, [r3, #32]
 8003d86:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003d8a:	625a      	str	r2, [r3, #36]	@ 0x24
 8003d8c:	e021      	b.n	8003dd2 <motion_on_tim7_tick+0x196>
                } else if (ax->v_actual_sps > ax->v_target_sps) {
 8003d8e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003d92:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003d94:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003d98:	6a1b      	ldr	r3, [r3, #32]
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	d919      	bls.n	8003dd2 <motion_on_tim7_tick+0x196>
                    if (ax->v_actual_sps > 0u) ax->v_actual_sps--;
 8003d9e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003da2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d006      	beq.n	8003db6 <motion_on_tim7_tick+0x17a>
 8003da8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003dac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dae:	1e5a      	subs	r2, r3, #1
 8003db0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003db4:	625a      	str	r2, [r3, #36]	@ 0x24
                    if (ax->v_actual_sps < ax->v_target_sps) ax->v_actual_sps = ax->v_target_sps;
 8003db6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003dba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003dbc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003dc0:	6a1b      	ldr	r3, [r3, #32]
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d205      	bcs.n	8003dd2 <motion_on_tim7_tick+0x196>
 8003dc6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003dca:	6a1a      	ldr	r2, [r3, #32]
 8003dcc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003dd0:	625a      	str	r2, [r3, #36]	@ 0x24
            while (steps_avail--) {
 8003dd2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003dd6:	1e53      	subs	r3, r2, #1
 8003dd8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003ddc:	2a00      	cmp	r2, #0
 8003dde:	d1b8      	bne.n	8003d52 <motion_on_tim7_tick+0x116>
                }
            }
            if (ax->v_actual_sps > MOTION_MAX_SPS) ax->v_actual_sps = MOTION_MAX_SPS;
 8003de0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003de4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003de6:	f246 13a8 	movw	r3, #25000	@ 0x61a8
 8003dea:	429a      	cmp	r2, r3
 8003dec:	d904      	bls.n	8003df8 <motion_on_tim7_tick+0x1bc>
 8003dee:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003df2:	f246 13a8 	movw	r3, #25000	@ 0x61a8
 8003df6:	6253      	str	r3, [r2, #36]	@ 0x24
            ax->dda_inc_q16 = Q16_DIV_UINT(ax->v_actual_sps, MOTION_TIM6_HZ);
 8003df8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003dfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dfe:	2200      	movs	r2, #0
 8003e00:	461c      	mov	r4, r3
 8003e02:	4615      	mov	r5, r2
 8003e04:	ea4f 4914 	mov.w	r9, r4, lsr #16
 8003e08:	ea4f 4804 	mov.w	r8, r4, lsl #16
 8003e0c:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8003e10:	f04f 0300 	mov.w	r3, #0
 8003e14:	4640      	mov	r0, r8
 8003e16:	4649      	mov	r1, r9
 8003e18:	f7fc fa7a 	bl	8000310 <__aeabi_uldivmod>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	460b      	mov	r3, r1
 8003e20:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003e24:	61da      	str	r2, [r3, #28]
 8003e26:	e000      	b.n	8003e2a <motion_on_tim7_tick+0x1ee>
            if (ax->emitted_steps >= ax->total_steps) continue;
 8003e28:	bf00      	nop
        for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8003e2a:	f897 30ce 	ldrb.w	r3, [r7, #206]	@ 0xce
 8003e2e:	3301      	adds	r3, #1
 8003e30:	f887 30ce 	strb.w	r3, [r7, #206]	@ 0xce
 8003e34:	f897 30ce 	ldrb.w	r3, [r7, #206]	@ 0xce
 8003e38:	2b02      	cmp	r3, #2
 8003e3a:	f67f af4b 	bls.w	8003cd4 <motion_on_tim7_tick+0x98>
        }
    }
    /* Caminho da fila: rampa trapezoidal (acelera/cruza/desacelera) e define incremento DDA */
    if (g_status.state == MOTION_RUNNING && g_has_active_segment && !g_demo_continuous) {
 8003e3e:	4b53      	ldr	r3, [pc, #332]	@ (8003f8c <motion_on_tim7_tick+0x350>)
 8003e40:	781b      	ldrb	r3, [r3, #0]
 8003e42:	b2db      	uxtb	r3, r3
 8003e44:	2b02      	cmp	r3, #2
 8003e46:	f040 82a5 	bne.w	8004394 <motion_on_tim7_tick+0x758>
 8003e4a:	4b51      	ldr	r3, [pc, #324]	@ (8003f90 <motion_on_tim7_tick+0x354>)
 8003e4c:	781b      	ldrb	r3, [r3, #0]
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	f000 829f 	beq.w	8004394 <motion_on_tim7_tick+0x758>
 8003e56:	4b4f      	ldr	r3, [pc, #316]	@ (8003f94 <motion_on_tim7_tick+0x358>)
 8003e58:	781b      	ldrb	r3, [r3, #0]
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	f040 8299 	bne.w	8004394 <motion_on_tim7_tick+0x758>
        for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8003e62:	2300      	movs	r3, #0
 8003e64:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7
 8003e68:	e28f      	b.n	800438a <motion_on_tim7_tick+0x74e>
            motion_axis_state_t *ax = &g_axis_state[axis];
 8003e6a:	f897 20c7 	ldrb.w	r2, [r7, #199]	@ 0xc7
 8003e6e:	4613      	mov	r3, r2
 8003e70:	005b      	lsls	r3, r3, #1
 8003e72:	4413      	add	r3, r2
 8003e74:	011b      	lsls	r3, r3, #4
 8003e76:	4a48      	ldr	r2, [pc, #288]	@ (8003f98 <motion_on_tim7_tick+0x35c>)
 8003e78:	4413      	add	r3, r2
 8003e7a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
            /* Mesmo que o segmento ativo para este eixo tenha zerado, podemos ter
               passos remanescentes na fila — mantemos a rampa global da lista. */

            uint32_t v_cmd_sps = ((uint32_t)ax->velocity_per_tick) * 1000u; /* alvo/cruzeiro */
 8003e7e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003e82:	899b      	ldrh	r3, [r3, #12]
 8003e84:	461a      	mov	r2, r3
 8003e86:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003e8a:	fb02 f303 	mul.w	r3, r2, r3
 8003e8e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
            /* PI de posição: ajusta v_cmd_sps com base no erro posicional */
#if MOTION_PI_ENABLE
            if ((ax->kp | ax->ki | ax->kd) != 0u) {
 8003e92:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003e96:	89da      	ldrh	r2, [r3, #14]
 8003e98:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003e9c:	8a1b      	ldrh	r3, [r3, #16]
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	b29a      	uxth	r2, r3
 8003ea2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003ea6:	8a5b      	ldrh	r3, [r3, #18]
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	f000 814d 	beq.w	800414c <motion_on_tim7_tick+0x510>
                /* desired (em passos DDA) vs actual convertido de contagens do encoder para passos DDA */
                int32_t desired = (int32_t)ax->target_steps;
 8003eb2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
                int64_t enc_rel = g_encoder_position[axis] - g_encoder_origin[axis];
 8003ebc:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
 8003ec0:	4a2e      	ldr	r2, [pc, #184]	@ (8003f7c <motion_on_tim7_tick+0x340>)
 8003ec2:	00db      	lsls	r3, r3, #3
 8003ec4:	4413      	add	r3, r2
 8003ec6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003eca:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
 8003ece:	4a2d      	ldr	r2, [pc, #180]	@ (8003f84 <motion_on_tim7_tick+0x348>)
 8003ed0:	00db      	lsls	r3, r3, #3
 8003ed2:	4413      	add	r3, r2
 8003ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ed8:	1a84      	subs	r4, r0, r2
 8003eda:	60bc      	str	r4, [r7, #8]
 8003edc:	eb61 0303 	sbc.w	r3, r1, r3
 8003ee0:	60fb      	str	r3, [r7, #12]
 8003ee2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003ee6:	e9c7 3420 	strd	r3, r4, [r7, #128]	@ 0x80
                /* actual_steps ≈ enc_rel * (DDA_STEPS_PER_REV / ENC_COUNTS_PER_REV) */
                int64_t num = enc_rel * (int64_t)dda_steps_per_rev();
 8003eea:	f7fe fd81 	bl	80029f0 <dda_steps_per_rev>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003ef4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003ef6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003efa:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8003efe:	4622      	mov	r2, r4
 8003f00:	fb02 f203 	mul.w	r2, r2, r3
 8003f04:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003f08:	4629      	mov	r1, r5
 8003f0a:	fb01 f303 	mul.w	r3, r1, r3
 8003f0e:	441a      	add	r2, r3
 8003f10:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003f14:	4621      	mov	r1, r4
 8003f16:	fba3 ab01 	umull	sl, fp, r3, r1
 8003f1a:	eb02 030b 	add.w	r3, r2, fp
 8003f1e:	469b      	mov	fp, r3
 8003f20:	e9c7 ab1e 	strd	sl, fp, [r7, #120]	@ 0x78
 8003f24:	e9c7 ab1e 	strd	sl, fp, [r7, #120]	@ 0x78
                int32_t actual = 0;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
                if (ENC_COUNTS_PER_REV[axis] > 0u) {
 8003f2e:	f897 20c7 	ldrb.w	r2, [r7, #199]	@ 0xc7
 8003f32:	4b1b      	ldr	r3, [pc, #108]	@ (8003fa0 <motion_on_tim7_tick+0x364>)
 8003f34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d044      	beq.n	8003fc6 <motion_on_tim7_tick+0x38a>
                    int64_t q = num / (int64_t)ENC_COUNTS_PER_REV[axis];
 8003f3c:	f897 20c7 	ldrb.w	r2, [r7, #199]	@ 0xc7
 8003f40:	4b17      	ldr	r3, [pc, #92]	@ (8003fa0 <motion_on_tim7_tick+0x364>)
 8003f42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f46:	2200      	movs	r2, #0
 8003f48:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f4a:	637a      	str	r2, [r7, #52]	@ 0x34
 8003f4c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8003f50:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8003f54:	f7fc f98c 	bl	8000270 <__aeabi_ldivmod>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	460b      	mov	r3, r1
 8003f5c:	e9c7 232c 	strd	r2, r3, [r7, #176]	@ 0xb0
                    if (q > INT32_MAX) q = INT32_MAX; else if (q < INT32_MIN) q = INT32_MIN;
 8003f60:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	@ 0xb0
 8003f64:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8003f68:	f173 0300 	sbcs.w	r3, r3, #0
 8003f6c:	db1a      	blt.n	8003fa4 <motion_on_tim7_tick+0x368>
 8003f6e:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8003f72:	f04f 0300 	mov.w	r3, #0
 8003f76:	e9c7 232c 	strd	r2, r3, [r7, #176]	@ 0xb0
 8003f7a:	e020      	b.n	8003fbe <motion_on_tim7_tick+0x382>
 8003f7c:	20000c70 	.word	0x20000c70
 8003f80:	20000cf8 	.word	0x20000cf8
 8003f84:	20000c98 	.word	0x20000c98
 8003f88:	20000d04 	.word	0x20000d04
 8003f8c:	200000d0 	.word	0x200000d0
 8003f90:	20000168 	.word	0x20000168
 8003f94:	20000d10 	.word	0x20000d10
 8003f98:	200000d8 	.word	0x200000d8
 8003f9c:	20000cd4 	.word	0x20000cd4
 8003fa0:	08010cd4 	.word	0x08010cd4
 8003fa4:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	@ 0xb0
 8003fa8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8003fac:	f173 33ff 	sbcs.w	r3, r3, #4294967295
 8003fb0:	da05      	bge.n	8003fbe <motion_on_tim7_tick+0x382>
 8003fb2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003fb6:	f04f 33ff 	mov.w	r3, #4294967295
 8003fba:	e9c7 232c 	strd	r2, r3, [r7, #176]	@ 0xb0
                    actual = (int32_t)q;
 8003fbe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003fc2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
                }
                int32_t err = desired - actual;
 8003fc6:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8003fca:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003fce:	1ad3      	subs	r3, r2, r3
 8003fd0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
                /* Deadband simples */
                if (err > -((int32_t)MOTION_PI_DEADBAND_STEPS) && err < (int32_t)MOTION_PI_DEADBAND_STEPS) {
 8003fd4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	db06      	blt.n	8003fea <motion_on_tim7_tick+0x3ae>
 8003fdc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	dc02      	bgt.n	8003fea <motion_on_tim7_tick+0x3ae>
                    err = 0;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
                }
                /* Integral com anti-windup (em unidades de passos) */
                int32_t iacc = g_pi_i_accum[axis] + err;
 8003fea:	f897 20c7 	ldrb.w	r2, [r7, #199]	@ 0xc7
 8003fee:	4bae      	ldr	r3, [pc, #696]	@ (80042a8 <motion_on_tim7_tick+0x66c>)
 8003ff0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003ff4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003ff8:	4413      	add	r3, r2
 8003ffa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
                if (iacc > MOTION_PI_I_CLAMP) iacc = MOTION_PI_I_CLAMP;
 8003ffe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004002:	4baa      	ldr	r3, [pc, #680]	@ (80042ac <motion_on_tim7_tick+0x670>)
 8004004:	429a      	cmp	r2, r3
 8004006:	dd03      	ble.n	8004010 <motion_on_tim7_tick+0x3d4>
 8004008:	4ba8      	ldr	r3, [pc, #672]	@ (80042ac <motion_on_tim7_tick+0x670>)
 800400a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800400e:	e007      	b.n	8004020 <motion_on_tim7_tick+0x3e4>
                else if (iacc < -MOTION_PI_I_CLAMP) iacc = -MOTION_PI_I_CLAMP;
 8004010:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004014:	4ba6      	ldr	r3, [pc, #664]	@ (80042b0 <motion_on_tim7_tick+0x674>)
 8004016:	429a      	cmp	r2, r3
 8004018:	da02      	bge.n	8004020 <motion_on_tim7_tick+0x3e4>
 800401a:	4ba5      	ldr	r3, [pc, #660]	@ (80042b0 <motion_on_tim7_tick+0x674>)
 800401c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
                int32_t draw = err - g_pi_prev_err[axis];
 8004020:	f897 20c7 	ldrb.w	r2, [r7, #199]	@ 0xc7
 8004024:	4ba3      	ldr	r3, [pc, #652]	@ (80042b4 <motion_on_tim7_tick+0x678>)
 8004026:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800402a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800402e:	1a9b      	subs	r3, r3, r2
 8004030:	677b      	str	r3, [r7, #116]	@ 0x74
                g_pi_prev_err[axis] = err;
 8004032:	f897 10c7 	ldrb.w	r1, [r7, #199]	@ 0xc7
 8004036:	4a9f      	ldr	r2, [pc, #636]	@ (80042b4 <motion_on_tim7_tick+0x678>)
 8004038:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800403c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
                /* Derivada filtrada: g_pi_d_filt += (draw - g_pi_d_filt) >> alpha */
                const int32_t alpha = 8; /* filtro leve (1..16) */
 8004040:	2308      	movs	r3, #8
 8004042:	673b      	str	r3, [r7, #112]	@ 0x70
                g_pi_d_filt[axis] = g_pi_d_filt[axis] + ((draw - g_pi_d_filt[axis]) >> alpha);
 8004044:	f897 20c7 	ldrb.w	r2, [r7, #199]	@ 0xc7
 8004048:	4b9b      	ldr	r3, [pc, #620]	@ (80042b8 <motion_on_tim7_tick+0x67c>)
 800404a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800404e:	f897 20c7 	ldrb.w	r2, [r7, #199]	@ 0xc7
 8004052:	4b99      	ldr	r3, [pc, #612]	@ (80042b8 <motion_on_tim7_tick+0x67c>)
 8004054:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004058:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800405a:	1a9a      	subs	r2, r3, r2
 800405c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800405e:	fa42 f303 	asr.w	r3, r2, r3
 8004062:	f897 10c7 	ldrb.w	r1, [r7, #199]	@ 0xc7
 8004066:	18c2      	adds	r2, r0, r3
 8004068:	4b93      	ldr	r3, [pc, #588]	@ (80042b8 <motion_on_tim7_tick+0x67c>)
 800406a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
                int32_t pterm = ((int32_t)ax->kp * err) >> MOTION_PI_SHIFT;      /* steps/s */
 800406e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004072:	89db      	ldrh	r3, [r3, #14]
 8004074:	461a      	mov	r2, r3
 8004076:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800407a:	fb02 f303 	mul.w	r3, r2, r3
 800407e:	121b      	asrs	r3, r3, #8
 8004080:	66fb      	str	r3, [r7, #108]	@ 0x6c
                int32_t iterm = ((int32_t)ax->ki * iacc) >> MOTION_PI_SHIFT;     /* steps/s */
 8004082:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004086:	8a1b      	ldrh	r3, [r3, #16]
 8004088:	461a      	mov	r2, r3
 800408a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800408e:	fb02 f303 	mul.w	r3, r2, r3
 8004092:	121b      	asrs	r3, r3, #8
 8004094:	66bb      	str	r3, [r7, #104]	@ 0x68
                int32_t dterm = (ax->kd != 0u) ? (((int32_t)ax->kd * g_pi_d_filt[axis]) >> MOTION_PI_SHIFT) : 0; /* steps/s */
 8004096:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800409a:	8a5b      	ldrh	r3, [r3, #18]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d00c      	beq.n	80040ba <motion_on_tim7_tick+0x47e>
 80040a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80040a4:	8a5b      	ldrh	r3, [r3, #18]
 80040a6:	4619      	mov	r1, r3
 80040a8:	f897 20c7 	ldrb.w	r2, [r7, #199]	@ 0xc7
 80040ac:	4b82      	ldr	r3, [pc, #520]	@ (80042b8 <motion_on_tim7_tick+0x67c>)
 80040ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040b2:	fb01 f303 	mul.w	r3, r1, r3
 80040b6:	121b      	asrs	r3, r3, #8
 80040b8:	e000      	b.n	80040bc <motion_on_tim7_tick+0x480>
 80040ba:	2300      	movs	r3, #0
 80040bc:	667b      	str	r3, [r7, #100]	@ 0x64
                int32_t corr = pterm + iterm + dterm; /* correção em steps/s */
 80040be:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80040c0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80040c2:	441a      	add	r2, r3
 80040c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80040c6:	4413      	add	r3, r2
 80040c8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
                if (corr > (int32_t)MOTION_PI_CORR_MAX_SPS) corr = (int32_t)MOTION_PI_CORR_MAX_SPS;
 80040cc:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 80040d0:	f246 13a8 	movw	r3, #25000	@ 0x61a8
 80040d4:	429a      	cmp	r2, r3
 80040d6:	dd04      	ble.n	80040e2 <motion_on_tim7_tick+0x4a6>
 80040d8:	f246 13a8 	movw	r3, #25000	@ 0x61a8
 80040dc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80040e0:	e007      	b.n	80040f2 <motion_on_tim7_tick+0x4b6>
                else if (corr < -(int32_t)MOTION_PI_CORR_MAX_SPS) corr = -(int32_t)MOTION_PI_CORR_MAX_SPS;
 80040e2:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 80040e6:	4b75      	ldr	r3, [pc, #468]	@ (80042bc <motion_on_tim7_tick+0x680>)
 80040e8:	429a      	cmp	r2, r3
 80040ea:	da02      	bge.n	80040f2 <motion_on_tim7_tick+0x4b6>
 80040ec:	4b73      	ldr	r3, [pc, #460]	@ (80042bc <motion_on_tim7_tick+0x680>)
 80040ee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
                int32_t v_adj = (int32_t)v_cmd_sps + corr;
 80040f2:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80040f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80040fa:	4413      	add	r3, r2
 80040fc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
                if (v_adj < 0) v_adj = 0;
 8004100:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004104:	2b00      	cmp	r3, #0
 8004106:	da02      	bge.n	800410e <motion_on_tim7_tick+0x4d2>
 8004108:	2300      	movs	r3, #0
 800410a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
                if (v_adj > (int32_t)MOTION_MAX_SPS) v_adj = (int32_t)MOTION_MAX_SPS; /* limite físico */
 800410e:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8004112:	f246 13a8 	movw	r3, #25000	@ 0x61a8
 8004116:	429a      	cmp	r2, r3
 8004118:	dd03      	ble.n	8004122 <motion_on_tim7_tick+0x4e6>
 800411a:	f246 13a8 	movw	r3, #25000	@ 0x61a8
 800411e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
                v_cmd_sps = (uint32_t)v_adj;
 8004122:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004126:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
                /* Anti-windup por saturação: só aceita a integral quando não saturou */
                if (!(v_adj == 0 || v_adj == (int32_t)MOTION_MAX_SPS)) {
 800412a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800412e:	2b00      	cmp	r3, #0
 8004130:	d00c      	beq.n	800414c <motion_on_tim7_tick+0x510>
 8004132:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8004136:	f246 13a8 	movw	r3, #25000	@ 0x61a8
 800413a:	429a      	cmp	r2, r3
 800413c:	d006      	beq.n	800414c <motion_on_tim7_tick+0x510>
                    g_pi_i_accum[axis] = iacc;
 800413e:	f897 10c7 	ldrb.w	r1, [r7, #199]	@ 0xc7
 8004142:	4a59      	ldr	r2, [pc, #356]	@ (80042a8 <motion_on_tim7_tick+0x66c>)
 8004144:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004148:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
                }
            }
#endif
            uint32_t a_sps2    = (ax->accel_sps2 > 0u) ? ax->accel_sps2 : DEMO_ACCEL_SPS2;
 800414c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004150:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004152:	2b00      	cmp	r3, #0
 8004154:	d003      	beq.n	800415e <motion_on_tim7_tick+0x522>
 8004156:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800415a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800415c:	e000      	b.n	8004160 <motion_on_tim7_tick+0x524>
 800415e:	4b53      	ldr	r3, [pc, #332]	@ (80042ac <motion_on_tim7_tick+0x670>)
 8004160:	663b      	str	r3, [r7, #96]	@ 0x60

            /* Distância restante total (ativo + fila) em passos */
            uint32_t rem_steps = motion_remaining_steps_total_for_axis(axis);
 8004162:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
 8004166:	4618      	mov	r0, r3
 8004168:	f7fe fd10 	bl	8002b8c <motion_remaining_steps_total_for_axis>
 800416c:	65f8      	str	r0, [r7, #92]	@ 0x5c

            /* Distância necessária para frear de v para 0: s = v^2 / (2a) */
            uint32_t v_now = ax->v_actual_sps;
 800416e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004174:	65bb      	str	r3, [r7, #88]	@ 0x58
            uint32_t s_brake = 0u;
 8004176:	2300      	movs	r3, #0
 8004178:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
            if (a_sps2 > 0u && v_now > 0u) {
 800417c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800417e:	2b00      	cmp	r3, #0
 8004180:	d03b      	beq.n	80041fa <motion_on_tim7_tick+0x5be>
 8004182:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004184:	2b00      	cmp	r3, #0
 8004186:	d038      	beq.n	80041fa <motion_on_tim7_tick+0x5be>
                uint64_t vv = (uint64_t)v_now * (uint64_t)v_now;
 8004188:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800418a:	2200      	movs	r2, #0
 800418c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800418e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004190:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004192:	2200      	movs	r2, #0
 8004194:	623b      	str	r3, [r7, #32]
 8004196:	627a      	str	r2, [r7, #36]	@ 0x24
 8004198:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 800419c:	462b      	mov	r3, r5
 800419e:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80041a2:	4642      	mov	r2, r8
 80041a4:	fb02 f203 	mul.w	r2, r2, r3
 80041a8:	464b      	mov	r3, r9
 80041aa:	4621      	mov	r1, r4
 80041ac:	fb01 f303 	mul.w	r3, r1, r3
 80041b0:	4413      	add	r3, r2
 80041b2:	4622      	mov	r2, r4
 80041b4:	4641      	mov	r1, r8
 80041b6:	fba2 1201 	umull	r1, r2, r2, r1
 80041ba:	647a      	str	r2, [r7, #68]	@ 0x44
 80041bc:	460a      	mov	r2, r1
 80041be:	643a      	str	r2, [r7, #64]	@ 0x40
 80041c0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80041c2:	4413      	add	r3, r2
 80041c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80041c6:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 80041ca:	e9c7 3414 	strd	r3, r4, [r7, #80]	@ 0x50
 80041ce:	e9c7 3414 	strd	r3, r4, [r7, #80]	@ 0x50
                uint64_t denom = (uint64_t)(2u * a_sps2);
 80041d2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80041d4:	005b      	lsls	r3, r3, #1
 80041d6:	2200      	movs	r2, #0
 80041d8:	603b      	str	r3, [r7, #0]
 80041da:	607a      	str	r2, [r7, #4]
 80041dc:	e9d7 3400 	ldrd	r3, r4, [r7]
 80041e0:	e9c7 3412 	strd	r3, r4, [r7, #72]	@ 0x48
                s_brake = (uint32_t)(vv / denom);
 80041e4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80041e8:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 80041ec:	f7fc f890 	bl	8000310 <__aeabi_uldivmod>
 80041f0:	4602      	mov	r2, r0
 80041f2:	460b      	mov	r3, r1
 80041f4:	4613      	mov	r3, r2
 80041f6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

            /* Política de rampa:
             * - Se já estamos perto do final (rem_steps <= s_brake): desacelera.
             * - Caso contrário, acelera até v_cmd_sps; se passou, reduz até v_cmd_sps. */
            /* Aceleração integrada: usa g_v_accum para passos discretos de v */
            g_v_accum[axis] += a_sps2; /* steps/s^2 * 1ms */
 80041fa:	f897 20c7 	ldrb.w	r2, [r7, #199]	@ 0xc7
 80041fe:	4b30      	ldr	r3, [pc, #192]	@ (80042c0 <motion_on_tim7_tick+0x684>)
 8004200:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004204:	f897 10c7 	ldrb.w	r1, [r7, #199]	@ 0xc7
 8004208:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800420a:	441a      	add	r2, r3
 800420c:	4b2c      	ldr	r3, [pc, #176]	@ (80042c0 <motion_on_tim7_tick+0x684>)
 800420e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
            uint32_t steps_avail = 0u;
 8004212:	2300      	movs	r3, #0
 8004214:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
            while (g_v_accum[axis] >= 1000u) { g_v_accum[axis] -= 1000u; steps_avail++; }
 8004218:	e010      	b.n	800423c <motion_on_tim7_tick+0x600>
 800421a:	f897 20c7 	ldrb.w	r2, [r7, #199]	@ 0xc7
 800421e:	4b28      	ldr	r3, [pc, #160]	@ (80042c0 <motion_on_tim7_tick+0x684>)
 8004220:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004224:	f897 10c7 	ldrb.w	r1, [r7, #199]	@ 0xc7
 8004228:	f5a3 727a 	sub.w	r2, r3, #1000	@ 0x3e8
 800422c:	4b24      	ldr	r3, [pc, #144]	@ (80042c0 <motion_on_tim7_tick+0x684>)
 800422e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8004232:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004236:	3301      	adds	r3, #1
 8004238:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800423c:	f897 20c7 	ldrb.w	r2, [r7, #199]	@ 0xc7
 8004240:	4b1f      	ldr	r3, [pc, #124]	@ (80042c0 <motion_on_tim7_tick+0x684>)
 8004242:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004246:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800424a:	d2e6      	bcs.n	800421a <motion_on_tim7_tick+0x5de>
            while (steps_avail--) {
 800424c:	e059      	b.n	8004302 <motion_on_tim7_tick+0x6c6>
                if (rem_steps <= s_brake) {
 800424e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004250:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004254:	429a      	cmp	r2, r3
 8004256:	d80c      	bhi.n	8004272 <motion_on_tim7_tick+0x636>
                    /* Desacelera */
                    if (ax->v_actual_sps > 0u) ax->v_actual_sps--;
 8004258:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800425c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800425e:	2b00      	cmp	r3, #0
 8004260:	d04f      	beq.n	8004302 <motion_on_tim7_tick+0x6c6>
 8004262:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004268:	1e5a      	subs	r2, r3, #1
 800426a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800426e:	625a      	str	r2, [r3, #36]	@ 0x24
 8004270:	e047      	b.n	8004302 <motion_on_tim7_tick+0x6c6>
                } else if (ax->v_actual_sps < v_cmd_sps) {
 8004272:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004276:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004278:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800427c:	4293      	cmp	r3, r2
 800427e:	d921      	bls.n	80042c4 <motion_on_tim7_tick+0x688>
                    ax->v_actual_sps++;
 8004280:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004284:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004286:	1c5a      	adds	r2, r3, #1
 8004288:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800428c:	625a      	str	r2, [r3, #36]	@ 0x24
                    if (ax->v_actual_sps > v_cmd_sps) ax->v_actual_sps = v_cmd_sps;
 800428e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004292:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004294:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004298:	4293      	cmp	r3, r2
 800429a:	d232      	bcs.n	8004302 <motion_on_tim7_tick+0x6c6>
 800429c:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80042a0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80042a4:	6253      	str	r3, [r2, #36]	@ 0x24
 80042a6:	e02c      	b.n	8004302 <motion_on_tim7_tick+0x6c6>
 80042a8:	20000ce0 	.word	0x20000ce0
 80042ac:	00030d40 	.word	0x00030d40
 80042b0:	fffcf2c0 	.word	0xfffcf2c0
 80042b4:	20000cec 	.word	0x20000cec
 80042b8:	20000cc8 	.word	0x20000cc8
 80042bc:	ffff9e58 	.word	0xffff9e58
 80042c0:	20000cd4 	.word	0x20000cd4
                } else if (ax->v_actual_sps > v_cmd_sps) {
 80042c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80042c8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80042ca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d217      	bcs.n	8004302 <motion_on_tim7_tick+0x6c6>
                    if (ax->v_actual_sps > 0u) ax->v_actual_sps--;
 80042d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80042d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d006      	beq.n	80042ea <motion_on_tim7_tick+0x6ae>
 80042dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80042e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042e2:	1e5a      	subs	r2, r3, #1
 80042e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80042e8:	625a      	str	r2, [r3, #36]	@ 0x24
                    if (ax->v_actual_sps < v_cmd_sps) ax->v_actual_sps = v_cmd_sps;
 80042ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80042ee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80042f0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d904      	bls.n	8004302 <motion_on_tim7_tick+0x6c6>
 80042f8:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80042fc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004300:	6253      	str	r3, [r2, #36]	@ 0x24
            while (steps_avail--) {
 8004302:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8004306:	1e53      	subs	r3, r2, #1
 8004308:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800430c:	2a00      	cmp	r2, #0
 800430e:	d19e      	bne.n	800424e <motion_on_tim7_tick+0x612>
                }
            }

            /* Se não há mais nada a emitir neste eixo, força zero */
            if (rem_steps == 0u) ax->v_actual_sps = 0u;
 8004310:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004312:	2b00      	cmp	r3, #0
 8004314:	d103      	bne.n	800431e <motion_on_tim7_tick+0x6e2>
 8004316:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800431a:	2300      	movs	r3, #0
 800431c:	6253      	str	r3, [r2, #36]	@ 0x24
            if (v_cmd_sps > MOTION_MAX_SPS) v_cmd_sps = MOTION_MAX_SPS;
 800431e:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004322:	f246 13a8 	movw	r3, #25000	@ 0x61a8
 8004326:	429a      	cmp	r2, r3
 8004328:	d903      	bls.n	8004332 <motion_on_tim7_tick+0x6f6>
 800432a:	f246 13a8 	movw	r3, #25000	@ 0x61a8
 800432e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
            if (ax->v_actual_sps > MOTION_MAX_SPS) ax->v_actual_sps = MOTION_MAX_SPS;
 8004332:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004336:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004338:	f246 13a8 	movw	r3, #25000	@ 0x61a8
 800433c:	429a      	cmp	r2, r3
 800433e:	d904      	bls.n	800434a <motion_on_tim7_tick+0x70e>
 8004340:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8004344:	f246 13a8 	movw	r3, #25000	@ 0x61a8
 8004348:	6253      	str	r3, [r2, #36]	@ 0x24

            /* Incremento do DDA a 50 kHz */
            ax->dda_inc_q16 = Q16_DIV_UINT(ax->v_actual_sps, MOTION_TIM6_HZ);
 800434a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800434e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004350:	2200      	movs	r2, #0
 8004352:	61bb      	str	r3, [r7, #24]
 8004354:	61fa      	str	r2, [r7, #28]
 8004356:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800435a:	460b      	mov	r3, r1
 800435c:	0c1b      	lsrs	r3, r3, #16
 800435e:	617b      	str	r3, [r7, #20]
 8004360:	460b      	mov	r3, r1
 8004362:	041b      	lsls	r3, r3, #16
 8004364:	613b      	str	r3, [r7, #16]
 8004366:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800436a:	f04f 0300 	mov.w	r3, #0
 800436e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004372:	f7fb ffcd 	bl	8000310 <__aeabi_uldivmod>
 8004376:	4602      	mov	r2, r0
 8004378:	460b      	mov	r3, r1
 800437a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800437e:	61da      	str	r2, [r3, #28]
        for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8004380:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
 8004384:	3301      	adds	r3, #1
 8004386:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7
 800438a:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
 800438e:	2b02      	cmp	r3, #2
 8004390:	f67f ad6b 	bls.w	8003e6a <motion_on_tim7_tick+0x22e>
        }
    }

}
 8004394:	bf00      	nop
 8004396:	37d0      	adds	r7, #208	@ 0xd0
 8004398:	46bd      	mov	sp, r7
 800439a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800439e:	bf00      	nop

080043a0 <motion_on_move_queue_add>:

/* =======================
 *  Handlers de protocolo
 * ======================= */
void motion_on_move_queue_add(const uint8_t *frame, uint32_t len) {
 80043a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043a2:	b097      	sub	sp, #92	@ 0x5c
 80043a4:	af06      	add	r7, sp, #24
 80043a6:	6078      	str	r0, [r7, #4]
 80043a8:	6039      	str	r1, [r7, #0]

    move_queue_add_req_t req;
    uint8_t ack_status = MOTION_ACK_INVALID;
 80043aa:	2301      	movs	r3, #1
 80043ac:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    uint8_t frame_id = 0u;
 80043b0:	2300      	movs	r3, #0
 80043b2:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e

    if (!frame) return;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	f000 80a3 	beq.w	8004504 <motion_on_move_queue_add+0x164>
    proto_result_t decode_status = move_queue_add_req_decoder(frame, len, &req);
 80043be:	f107 0308 	add.w	r3, r7, #8
 80043c2:	461a      	mov	r2, r3
 80043c4:	6839      	ldr	r1, [r7, #0]
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f7fc fb47 	bl	8000a5a <move_queue_add_req_decoder>
 80043cc:	4603      	mov	r3, r0
 80043ce:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
    if (decode_status != PROTO_OK) {
 80043d2:	f997 303d 	ldrsb.w	r3, [r7, #61]	@ 0x3d
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d014      	beq.n	8004404 <motion_on_move_queue_add+0x64>
        motion_send_queue_add_ack(frame_id, ack_status);
 80043da:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 80043de:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80043e2:	4611      	mov	r1, r2
 80043e4:	4618      	mov	r0, r3
 80043e6:	f7ff f8a7 	bl	8003538 <motion_send_queue_add_ack>
        LOGA_THIS(LOG_STATE_ERROR, decode_status, "queue_add", "decode_fail");
 80043ea:	f997 203d 	ldrsb.w	r2, [r7, #61]	@ 0x3d
 80043ee:	4947      	ldr	r1, [pc, #284]	@ (800450c <motion_on_move_queue_add+0x16c>)
 80043f0:	4b47      	ldr	r3, [pc, #284]	@ (8004510 <motion_on_move_queue_add+0x170>)
 80043f2:	9301      	str	r3, [sp, #4]
 80043f4:	4b47      	ldr	r3, [pc, #284]	@ (8004514 <motion_on_move_queue_add+0x174>)
 80043f6:	9300      	str	r3, [sp, #0]
 80043f8:	460b      	mov	r3, r1
 80043fa:	2164      	movs	r1, #100	@ 0x64
 80043fc:	2002      	movs	r0, #2
 80043fe:	f7fe f8f5 	bl	80025ec <log_event_auto>
        return;
 8004402:	e080      	b.n	8004506 <motion_on_move_queue_add+0x166>
    }
    frame_id = req.frameId;
 8004404:	7a3b      	ldrb	r3, [r7, #8]
 8004406:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e

    if (!safety_is_safe()) {
 800440a:	f000 fe2b 	bl	8005064 <safety_is_safe>
 800440e:	4603      	mov	r3, r0
 8004410:	2b00      	cmp	r3, #0
 8004412:	d114      	bne.n	800443e <motion_on_move_queue_add+0x9e>
        motion_send_queue_add_ack(frame_id, ack_status);
 8004414:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8004418:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800441c:	4611      	mov	r1, r2
 800441e:	4618      	mov	r0, r3
 8004420:	f7ff f88a 	bl	8003538 <motion_send_queue_add_ack>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_RANGE, "queue_add", "blocked_safety");
 8004424:	4a39      	ldr	r2, [pc, #228]	@ (800450c <motion_on_move_queue_add+0x16c>)
 8004426:	4b3c      	ldr	r3, [pc, #240]	@ (8004518 <motion_on_move_queue_add+0x178>)
 8004428:	9301      	str	r3, [sp, #4]
 800442a:	4b3a      	ldr	r3, [pc, #232]	@ (8004514 <motion_on_move_queue_add+0x174>)
 800442c:	9300      	str	r3, [sp, #0]
 800442e:	4613      	mov	r3, r2
 8004430:	f06f 0203 	mvn.w	r2, #3
 8004434:	2164      	movs	r1, #100	@ 0x64
 8004436:	2002      	movs	r0, #2
 8004438:	f7fe f8d8 	bl	80025ec <log_event_auto>
        return;
 800443c:	e063      	b.n	8004506 <motion_on_move_queue_add+0x166>
    }

    uint32_t primask = motion_lock();
 800443e:	f7fe fae9 	bl	8002a14 <motion_lock>
 8004442:	63b8      	str	r0, [r7, #56]	@ 0x38
    proto_result_t push_status = motion_queue_push_locked(&req);
 8004444:	f107 0308 	add.w	r3, r7, #8
 8004448:	4618      	mov	r0, r3
 800444a:	f7fe fdf3 	bl	8003034 <motion_queue_push_locked>
 800444e:	4603      	mov	r3, r0
 8004450:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if (push_status == PROTO_OK) {
 8004454:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8004458:	2b00      	cmp	r3, #0
 800445a:	d12e      	bne.n	80044ba <motion_on_move_queue_add+0x11a>
        ack_status = MOTION_ACK_OK;
 800445c:	2300      	movs	r3, #0
 800445e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        if (g_status.state == MOTION_IDLE || g_status.state == MOTION_DONE)
 8004462:	4b2e      	ldr	r3, [pc, #184]	@ (800451c <motion_on_move_queue_add+0x17c>)
 8004464:	781b      	ldrb	r3, [r3, #0]
 8004466:	b2db      	uxtb	r3, r3
 8004468:	2b00      	cmp	r3, #0
 800446a:	d004      	beq.n	8004476 <motion_on_move_queue_add+0xd6>
 800446c:	4b2b      	ldr	r3, [pc, #172]	@ (800451c <motion_on_move_queue_add+0x17c>)
 800446e:	781b      	ldrb	r3, [r3, #0]
 8004470:	b2db      	uxtb	r3, r3
 8004472:	2b05      	cmp	r3, #5
 8004474:	d102      	bne.n	800447c <motion_on_move_queue_add+0xdc>
            g_status.state = MOTION_QUEUED;
 8004476:	4b29      	ldr	r3, [pc, #164]	@ (800451c <motion_on_move_queue_add+0x17c>)
 8004478:	2201      	movs	r2, #1
 800447a:	701a      	strb	r2, [r3, #0]
        motion_refresh_status_locked();
 800447c:	f7fe fbd6 	bl	8002c2c <motion_refresh_status_locked>
#if MOTION_DEBUG_FLOW
        printf("[FLOW queue_add ok id=%u dir=0x%02X V=(%u,%u,%u) S=(%lu,%lu,%lu) depth=%u]\r\n",
 8004480:	f897 003e 	ldrb.w	r0, [r7, #62]	@ 0x3e
               (unsigned)frame_id,
               (unsigned)req.dirMask,
 8004484:	7a7b      	ldrb	r3, [r7, #9]
        printf("[FLOW queue_add ok id=%u dir=0x%02X V=(%u,%u,%u) S=(%lu,%lu,%lu) depth=%u]\r\n",
 8004486:	469c      	mov	ip, r3
               (unsigned)req.vx, (unsigned)req.vy, (unsigned)req.vz,
 8004488:	897b      	ldrh	r3, [r7, #10]
        printf("[FLOW queue_add ok id=%u dir=0x%02X V=(%u,%u,%u) S=(%lu,%lu,%lu) depth=%u]\r\n",
 800448a:	469e      	mov	lr, r3
               (unsigned)req.vx, (unsigned)req.vy, (unsigned)req.vz,
 800448c:	8a3b      	ldrh	r3, [r7, #16]
        printf("[FLOW queue_add ok id=%u dir=0x%02X V=(%u,%u,%u) S=(%lu,%lu,%lu) depth=%u]\r\n",
 800448e:	461d      	mov	r5, r3
               (unsigned)req.vx, (unsigned)req.vy, (unsigned)req.vz,
 8004490:	8b3b      	ldrh	r3, [r7, #24]
        printf("[FLOW queue_add ok id=%u dir=0x%02X V=(%u,%u,%u) S=(%lu,%lu,%lu) depth=%u]\r\n",
 8004492:	461e      	mov	r6, r3
               (unsigned long)req.sx, (unsigned long)req.sy, (unsigned long)req.sz,
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	697a      	ldr	r2, [r7, #20]
 8004498:	69f9      	ldr	r1, [r7, #28]
               (unsigned)g_status.queue_depth);
 800449a:	4c20      	ldr	r4, [pc, #128]	@ (800451c <motion_on_move_queue_add+0x17c>)
 800449c:	7864      	ldrb	r4, [r4, #1]
 800449e:	b2e4      	uxtb	r4, r4
        printf("[FLOW queue_add ok id=%u dir=0x%02X V=(%u,%u,%u) S=(%lu,%lu,%lu) depth=%u]\r\n",
 80044a0:	9405      	str	r4, [sp, #20]
 80044a2:	9104      	str	r1, [sp, #16]
 80044a4:	9203      	str	r2, [sp, #12]
 80044a6:	9302      	str	r3, [sp, #8]
 80044a8:	9601      	str	r6, [sp, #4]
 80044aa:	9500      	str	r5, [sp, #0]
 80044ac:	4673      	mov	r3, lr
 80044ae:	4662      	mov	r2, ip
 80044b0:	4601      	mov	r1, r0
 80044b2:	481b      	ldr	r0, [pc, #108]	@ (8004520 <motion_on_move_queue_add+0x180>)
 80044b4:	f00a fed8 	bl	800f268 <iprintf>
 80044b8:	e002      	b.n	80044c0 <motion_on_move_queue_add+0x120>
#endif
    } else {
        ack_status = MOTION_ACK_QUEUE_FULL;
 80044ba:	2302      	movs	r3, #2
 80044bc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    }
    motion_unlock(primask);
 80044c0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80044c2:	f7fe fab8 	bl	8002a36 <motion_unlock>

    motion_send_queue_add_ack(frame_id, ack_status);
 80044c6:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 80044ca:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80044ce:	4611      	mov	r1, r2
 80044d0:	4618      	mov	r0, r3
 80044d2:	f7ff f831 	bl	8003538 <motion_send_queue_add_ack>
    LOGA_THIS(LOG_STATE_RECEIVED, ack_status, "queue_add",
 80044d6:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 80044da:	480c      	ldr	r0, [pc, #48]	@ (800450c <motion_on_move_queue_add+0x16c>)
 80044dc:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80044e0:	7a79      	ldrb	r1, [r7, #9]
 80044e2:	460c      	mov	r4, r1
 80044e4:	490d      	ldr	r1, [pc, #52]	@ (800451c <motion_on_move_queue_add+0x17c>)
 80044e6:	7849      	ldrb	r1, [r1, #1]
 80044e8:	b2c9      	uxtb	r1, r1
 80044ea:	9104      	str	r1, [sp, #16]
 80044ec:	9403      	str	r4, [sp, #12]
 80044ee:	9302      	str	r3, [sp, #8]
 80044f0:	4b0c      	ldr	r3, [pc, #48]	@ (8004524 <motion_on_move_queue_add+0x184>)
 80044f2:	9301      	str	r3, [sp, #4]
 80044f4:	4b07      	ldr	r3, [pc, #28]	@ (8004514 <motion_on_move_queue_add+0x174>)
 80044f6:	9300      	str	r3, [sp, #0]
 80044f8:	4603      	mov	r3, r0
 80044fa:	2101      	movs	r1, #1
 80044fc:	2002      	movs	r0, #2
 80044fe:	f7fe f875 	bl	80025ec <log_event_auto>
 8004502:	e000      	b.n	8004506 <motion_on_move_queue_add+0x166>
    if (!frame) return;
 8004504:	bf00      	nop
              "frame=%u dirMask=0x%02X queue=%u",
              (unsigned)frame_id, (unsigned)req.dirMask, (unsigned)g_status.queue_depth);
}
 8004506:	3744      	adds	r7, #68	@ 0x44
 8004508:	46bd      	mov	sp, r7
 800450a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800450c:	080105fc 	.word	0x080105fc
 8004510:	080107b4 	.word	0x080107b4
 8004514:	080107c0 	.word	0x080107c0
 8004518:	080107cc 	.word	0x080107cc
 800451c:	200000d0 	.word	0x200000d0
 8004520:	080107dc 	.word	0x080107dc
 8004524:	0801082c 	.word	0x0801082c

08004528 <motion_on_move_queue_status>:

void motion_on_move_queue_status(const uint8_t *frame, uint32_t len) {
 8004528:	b5b0      	push	{r4, r5, r7, lr}
 800452a:	b08c      	sub	sp, #48	@ 0x30
 800452c:	af08      	add	r7, sp, #32
 800452e:	6078      	str	r0, [r7, #4]
 8004530:	6039      	str	r1, [r7, #0]
    move_queue_status_req_t req;
    if (move_queue_status_req_decoder(frame, len, &req) != PROTO_OK) {
 8004532:	f107 0308 	add.w	r3, r7, #8
 8004536:	461a      	mov	r2, r3
 8004538:	6839      	ldr	r1, [r7, #0]
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f7fc fb8b 	bl	8000c56 <move_queue_status_req_decoder>
 8004540:	4603      	mov	r3, r0
 8004542:	2b00      	cmp	r3, #0
 8004544:	d00c      	beq.n	8004560 <motion_on_move_queue_status+0x38>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_FRAME, "queue_status", "decode_fail");
 8004546:	4a1f      	ldr	r2, [pc, #124]	@ (80045c4 <motion_on_move_queue_status+0x9c>)
 8004548:	4b1f      	ldr	r3, [pc, #124]	@ (80045c8 <motion_on_move_queue_status+0xa0>)
 800454a:	9301      	str	r3, [sp, #4]
 800454c:	4b1f      	ldr	r3, [pc, #124]	@ (80045cc <motion_on_move_queue_status+0xa4>)
 800454e:	9300      	str	r3, [sp, #0]
 8004550:	4613      	mov	r3, r2
 8004552:	f06f 0201 	mvn.w	r2, #1
 8004556:	2164      	movs	r1, #100	@ 0x64
 8004558:	2002      	movs	r0, #2
 800455a:	f7fe f847 	bl	80025ec <log_event_auto>
 800455e:	e02e      	b.n	80045be <motion_on_move_queue_status+0x96>
        return;
    }
    uint32_t primask = motion_lock();
 8004560:	f7fe fa58 	bl	8002a14 <motion_lock>
 8004564:	60f8      	str	r0, [r7, #12]
    motion_refresh_status_locked();
 8004566:	f7fe fb61 	bl	8002c2c <motion_refresh_status_locked>
    motion_unlock(primask);
 800456a:	68f8      	ldr	r0, [r7, #12]
 800456c:	f7fe fa63 	bl	8002a36 <motion_unlock>

    motion_send_queue_status_response(req.frameId);
 8004570:	7a3b      	ldrb	r3, [r7, #8]
 8004572:	4618      	mov	r0, r3
 8004574:	f7ff f824 	bl	80035c0 <motion_send_queue_status_response>
    LOGA_THIS(LOG_STATE_RECEIVED, PROTO_OK, "queue_status",
 8004578:	4a12      	ldr	r2, [pc, #72]	@ (80045c4 <motion_on_move_queue_status+0x9c>)
 800457a:	4b15      	ldr	r3, [pc, #84]	@ (80045d0 <motion_on_move_queue_status+0xa8>)
 800457c:	781b      	ldrb	r3, [r3, #0]
 800457e:	b2db      	uxtb	r3, r3
 8004580:	4619      	mov	r1, r3
 8004582:	4b13      	ldr	r3, [pc, #76]	@ (80045d0 <motion_on_move_queue_status+0xa8>)
 8004584:	785b      	ldrb	r3, [r3, #1]
 8004586:	b2db      	uxtb	r3, r3
 8004588:	4618      	mov	r0, r3
 800458a:	4b11      	ldr	r3, [pc, #68]	@ (80045d0 <motion_on_move_queue_status+0xa8>)
 800458c:	789b      	ldrb	r3, [r3, #2]
 800458e:	b2db      	uxtb	r3, r3
 8004590:	461c      	mov	r4, r3
 8004592:	4b0f      	ldr	r3, [pc, #60]	@ (80045d0 <motion_on_move_queue_status+0xa8>)
 8004594:	78db      	ldrb	r3, [r3, #3]
 8004596:	b2db      	uxtb	r3, r3
 8004598:	461d      	mov	r5, r3
 800459a:	4b0d      	ldr	r3, [pc, #52]	@ (80045d0 <motion_on_move_queue_status+0xa8>)
 800459c:	791b      	ldrb	r3, [r3, #4]
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	9306      	str	r3, [sp, #24]
 80045a2:	9505      	str	r5, [sp, #20]
 80045a4:	9404      	str	r4, [sp, #16]
 80045a6:	9003      	str	r0, [sp, #12]
 80045a8:	9102      	str	r1, [sp, #8]
 80045aa:	4b0a      	ldr	r3, [pc, #40]	@ (80045d4 <motion_on_move_queue_status+0xac>)
 80045ac:	9301      	str	r3, [sp, #4]
 80045ae:	4b07      	ldr	r3, [pc, #28]	@ (80045cc <motion_on_move_queue_status+0xa4>)
 80045b0:	9300      	str	r3, [sp, #0]
 80045b2:	4613      	mov	r3, r2
 80045b4:	2200      	movs	r2, #0
 80045b6:	2101      	movs	r1, #1
 80045b8:	2002      	movs	r0, #2
 80045ba:	f7fe f817 	bl	80025ec <log_event_auto>
              "state=%u depth=%u pct=(%u,%u,%u)",
              (unsigned)g_status.state, (unsigned)g_status.queue_depth,
              (unsigned)g_status.pctX, (unsigned)g_status.pctY, (unsigned)g_status.pctZ);
}
 80045be:	3710      	adds	r7, #16
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bdb0      	pop	{r4, r5, r7, pc}
 80045c4:	080105fc 	.word	0x080105fc
 80045c8:	080107b4 	.word	0x080107b4
 80045cc:	08010850 	.word	0x08010850
 80045d0:	200000d0 	.word	0x200000d0
 80045d4:	08010860 	.word	0x08010860

080045d8 <motion_on_start_move>:

void motion_on_start_move(const uint8_t *frame, uint32_t len) {
 80045d8:	b580      	push	{r7, lr}
 80045da:	b08a      	sub	sp, #40	@ 0x28
 80045dc:	af02      	add	r7, sp, #8
 80045de:	6078      	str	r0, [r7, #4]
 80045e0:	6039      	str	r1, [r7, #0]
    start_move_req_t req;
    if (start_move_req_decoder(frame, len, &req) != PROTO_OK) {
 80045e2:	f107 030c 	add.w	r3, r7, #12
 80045e6:	461a      	mov	r2, r3
 80045e8:	6839      	ldr	r1, [r7, #0]
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f7fc fca5 	bl	8000f3a <start_move_req_decoder>
 80045f0:	4603      	mov	r3, r0
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d00c      	beq.n	8004610 <motion_on_start_move+0x38>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_FRAME, "start_move", "decode_fail");
 80045f6:	4a4b      	ldr	r2, [pc, #300]	@ (8004724 <motion_on_start_move+0x14c>)
 80045f8:	4b4b      	ldr	r3, [pc, #300]	@ (8004728 <motion_on_start_move+0x150>)
 80045fa:	9301      	str	r3, [sp, #4]
 80045fc:	4b4b      	ldr	r3, [pc, #300]	@ (800472c <motion_on_start_move+0x154>)
 80045fe:	9300      	str	r3, [sp, #0]
 8004600:	4613      	mov	r3, r2
 8004602:	f06f 0201 	mvn.w	r2, #1
 8004606:	2164      	movs	r1, #100	@ 0x64
 8004608:	2002      	movs	r0, #2
 800460a:	f7fd ffef 	bl	80025ec <log_event_auto>
 800460e:	e085      	b.n	800471c <motion_on_start_move+0x144>
        return;
    }
    uint8_t started = 0u;
 8004610:	2300      	movs	r3, #0
 8004612:	77fb      	strb	r3, [r7, #31]
    uint32_t primask = motion_lock();
 8004614:	f7fe f9fe 	bl	8002a14 <motion_lock>
 8004618:	61b8      	str	r0, [r7, #24]

#if MOTION_DEBUG_FLOW
    {
        uint8_t depth = (uint8_t)(g_queue_count + (g_has_active_segment ? 1u : 0u));
 800461a:	4b45      	ldr	r3, [pc, #276]	@ (8004730 <motion_on_start_move+0x158>)
 800461c:	781b      	ldrb	r3, [r3, #0]
 800461e:	b2db      	uxtb	r3, r3
 8004620:	2b00      	cmp	r3, #0
 8004622:	d001      	beq.n	8004628 <motion_on_start_move+0x50>
 8004624:	2201      	movs	r2, #1
 8004626:	e000      	b.n	800462a <motion_on_start_move+0x52>
 8004628:	2200      	movs	r2, #0
 800462a:	4b42      	ldr	r3, [pc, #264]	@ (8004734 <motion_on_start_move+0x15c>)
 800462c:	781b      	ldrb	r3, [r3, #0]
 800462e:	4413      	add	r3, r2
 8004630:	75fb      	strb	r3, [r7, #23]
        printf("[FLOW start_move request depth=%u active=%u ids=(",
 8004632:	7dfb      	ldrb	r3, [r7, #23]
 8004634:	4a40      	ldr	r2, [pc, #256]	@ (8004738 <motion_on_start_move+0x160>)
 8004636:	7812      	ldrb	r2, [r2, #0]
 8004638:	4619      	mov	r1, r3
 800463a:	4840      	ldr	r0, [pc, #256]	@ (800473c <motion_on_start_move+0x164>)
 800463c:	f00a fe14 	bl	800f268 <iprintf>
               (unsigned)depth, (unsigned)g_active_frame_id);
        for (uint8_t i = 0; i < g_queue_count; ++i) {
 8004640:	2300      	movs	r3, #0
 8004642:	77bb      	strb	r3, [r7, #30]
 8004644:	e01c      	b.n	8004680 <motion_on_start_move+0xa8>
            uint8_t idxq = (uint8_t)((g_queue_head + i) % MOTION_QUEUE_CAPACITY);
 8004646:	4b3e      	ldr	r3, [pc, #248]	@ (8004740 <motion_on_start_move+0x168>)
 8004648:	781a      	ldrb	r2, [r3, #0]
 800464a:	7fbb      	ldrb	r3, [r7, #30]
 800464c:	4413      	add	r3, r2
 800464e:	b2db      	uxtb	r3, r3
 8004650:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004654:	75bb      	strb	r3, [r7, #22]
            unsigned id = (unsigned)g_queue[idxq].req.frameId;
 8004656:	7dbb      	ldrb	r3, [r7, #22]
 8004658:	4a3a      	ldr	r2, [pc, #232]	@ (8004744 <motion_on_start_move+0x16c>)
 800465a:	212c      	movs	r1, #44	@ 0x2c
 800465c:	fb01 f303 	mul.w	r3, r1, r3
 8004660:	4413      	add	r3, r2
 8004662:	781b      	ldrb	r3, [r3, #0]
 8004664:	613b      	str	r3, [r7, #16]
            printf(i ? ",%u" : "%u", id);
 8004666:	7fbb      	ldrb	r3, [r7, #30]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d001      	beq.n	8004670 <motion_on_start_move+0x98>
 800466c:	4b36      	ldr	r3, [pc, #216]	@ (8004748 <motion_on_start_move+0x170>)
 800466e:	e000      	b.n	8004672 <motion_on_start_move+0x9a>
 8004670:	4b36      	ldr	r3, [pc, #216]	@ (800474c <motion_on_start_move+0x174>)
 8004672:	6939      	ldr	r1, [r7, #16]
 8004674:	4618      	mov	r0, r3
 8004676:	f00a fdf7 	bl	800f268 <iprintf>
        for (uint8_t i = 0; i < g_queue_count; ++i) {
 800467a:	7fbb      	ldrb	r3, [r7, #30]
 800467c:	3301      	adds	r3, #1
 800467e:	77bb      	strb	r3, [r7, #30]
 8004680:	4b2c      	ldr	r3, [pc, #176]	@ (8004734 <motion_on_start_move+0x15c>)
 8004682:	781b      	ldrb	r3, [r3, #0]
 8004684:	7fba      	ldrb	r2, [r7, #30]
 8004686:	429a      	cmp	r2, r3
 8004688:	d3dd      	bcc.n	8004646 <motion_on_start_move+0x6e>
        }
        printf(") ]\r\n");
 800468a:	4831      	ldr	r0, [pc, #196]	@ (8004750 <motion_on_start_move+0x178>)
 800468c:	f00a fe54 	bl	800f338 <puts>
    }
#endif

    if (!safety_is_safe()) {
 8004690:	f000 fce8 	bl	8005064 <safety_is_safe>
 8004694:	4603      	mov	r3, r0
 8004696:	2b00      	cmp	r3, #0
 8004698:	d102      	bne.n	80046a0 <motion_on_start_move+0xc8>
        started = 0u;
 800469a:	2300      	movs	r3, #0
 800469c:	77fb      	strb	r3, [r7, #31]
 800469e:	e014      	b.n	80046ca <motion_on_start_move+0xf2>
    } else if (!g_has_active_segment) {
 80046a0:	4b23      	ldr	r3, [pc, #140]	@ (8004730 <motion_on_start_move+0x158>)
 80046a2:	781b      	ldrb	r3, [r3, #0]
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d10a      	bne.n	80046c0 <motion_on_start_move+0xe8>
        if (motion_try_start_next_locked()) {
 80046aa:	f7fe fe31 	bl	8003310 <motion_try_start_next_locked>
 80046ae:	4603      	mov	r3, r0
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d00a      	beq.n	80046ca <motion_on_start_move+0xf2>
            g_status.state = MOTION_RUNNING;
 80046b4:	4b27      	ldr	r3, [pc, #156]	@ (8004754 <motion_on_start_move+0x17c>)
 80046b6:	2202      	movs	r2, #2
 80046b8:	701a      	strb	r2, [r3, #0]
            started = 1u;
 80046ba:	2301      	movs	r3, #1
 80046bc:	77fb      	strb	r3, [r7, #31]
 80046be:	e004      	b.n	80046ca <motion_on_start_move+0xf2>
        }
    } else {
        g_status.state = MOTION_RUNNING;
 80046c0:	4b24      	ldr	r3, [pc, #144]	@ (8004754 <motion_on_start_move+0x17c>)
 80046c2:	2202      	movs	r2, #2
 80046c4:	701a      	strb	r2, [r3, #0]
        started = 1u;
 80046c6:	2301      	movs	r3, #1
 80046c8:	77fb      	strb	r3, [r7, #31]
    }

    motion_refresh_status_locked();
 80046ca:	f7fe faaf 	bl	8002c2c <motion_refresh_status_locked>
    motion_unlock(primask);
 80046ce:	69b8      	ldr	r0, [r7, #24]
 80046d0:	f7fe f9b1 	bl	8002a36 <motion_unlock>

    (void)HAL_TIM_Base_Start_IT(&htim6);
 80046d4:	4820      	ldr	r0, [pc, #128]	@ (8004758 <motion_on_start_move+0x180>)
 80046d6:	f006 fe05 	bl	800b2e4 <HAL_TIM_Base_Start_IT>
    (void)HAL_TIM_Base_Start_IT(&htim7);
 80046da:	4820      	ldr	r0, [pc, #128]	@ (800475c <motion_on_start_move+0x184>)
 80046dc:	f006 fe02 	bl	800b2e4 <HAL_TIM_Base_Start_IT>

    motion_send_start_response(req.frameId);
 80046e0:	7b3b      	ldrb	r3, [r7, #12]
 80046e2:	4618      	mov	r0, r3
 80046e4:	f7fe ffcc 	bl	8003680 <motion_send_start_response>
    LOGA_THIS(LOG_STATE_APPLIED, PROTO_OK, "start_move", started ? "running" : "ignored");
 80046e8:	4a0e      	ldr	r2, [pc, #56]	@ (8004724 <motion_on_start_move+0x14c>)
 80046ea:	7ffb      	ldrb	r3, [r7, #31]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d001      	beq.n	80046f4 <motion_on_start_move+0x11c>
 80046f0:	4b1b      	ldr	r3, [pc, #108]	@ (8004760 <motion_on_start_move+0x188>)
 80046f2:	e000      	b.n	80046f6 <motion_on_start_move+0x11e>
 80046f4:	4b1b      	ldr	r3, [pc, #108]	@ (8004764 <motion_on_start_move+0x18c>)
 80046f6:	9301      	str	r3, [sp, #4]
 80046f8:	4b0c      	ldr	r3, [pc, #48]	@ (800472c <motion_on_start_move+0x154>)
 80046fa:	9300      	str	r3, [sp, #0]
 80046fc:	4613      	mov	r3, r2
 80046fe:	2200      	movs	r2, #0
 8004700:	2102      	movs	r1, #2
 8004702:	2002      	movs	r0, #2
 8004704:	f7fd ff72 	bl	80025ec <log_event_auto>
#if MOTION_DEBUG_FLOW
    printf("[FLOW start_move %s]\r\n", started ? "running" : "ignored");
 8004708:	7ffb      	ldrb	r3, [r7, #31]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d001      	beq.n	8004712 <motion_on_start_move+0x13a>
 800470e:	4b14      	ldr	r3, [pc, #80]	@ (8004760 <motion_on_start_move+0x188>)
 8004710:	e000      	b.n	8004714 <motion_on_start_move+0x13c>
 8004712:	4b14      	ldr	r3, [pc, #80]	@ (8004764 <motion_on_start_move+0x18c>)
 8004714:	4619      	mov	r1, r3
 8004716:	4814      	ldr	r0, [pc, #80]	@ (8004768 <motion_on_start_move+0x190>)
 8004718:	f00a fda6 	bl	800f268 <iprintf>
#endif
}
 800471c:	3720      	adds	r7, #32
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}
 8004722:	bf00      	nop
 8004724:	080105fc 	.word	0x080105fc
 8004728:	080107b4 	.word	0x080107b4
 800472c:	08010884 	.word	0x08010884
 8004730:	20000168 	.word	0x20000168
 8004734:	20000c6e 	.word	0x20000c6e
 8004738:	20000c6f 	.word	0x20000c6f
 800473c:	08010890 	.word	0x08010890
 8004740:	20000c6c 	.word	0x20000c6c
 8004744:	2000016c 	.word	0x2000016c
 8004748:	080108c4 	.word	0x080108c4
 800474c:	080108c8 	.word	0x080108c8
 8004750:	080108cc 	.word	0x080108cc
 8004754:	200000d0 	.word	0x200000d0
 8004758:	20000fd0 	.word	0x20000fd0
 800475c:	2000101c 	.word	0x2000101c
 8004760:	080108d4 	.word	0x080108d4
 8004764:	080108dc 	.word	0x080108dc
 8004768:	080108e4 	.word	0x080108e4

0800476c <motion_on_move_end>:

void motion_on_move_end(const uint8_t *frame, uint32_t len) {
 800476c:	b580      	push	{r7, lr}
 800476e:	b088      	sub	sp, #32
 8004770:	af04      	add	r7, sp, #16
 8004772:	6078      	str	r0, [r7, #4]
 8004774:	6039      	str	r1, [r7, #0]
    move_end_req_t req;
    if (move_end_req_decoder(frame, len, &req) != PROTO_OK) {
 8004776:	f107 0308 	add.w	r3, r7, #8
 800477a:	461a      	mov	r2, r3
 800477c:	6839      	ldr	r1, [r7, #0]
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f7fc f8c5 	bl	800090e <move_end_req_decoder>
 8004784:	4603      	mov	r3, r0
 8004786:	2b00      	cmp	r3, #0
 8004788:	d00c      	beq.n	80047a4 <motion_on_move_end+0x38>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_FRAME, "move_end", "decode_fail");
 800478a:	4a1f      	ldr	r2, [pc, #124]	@ (8004808 <motion_on_move_end+0x9c>)
 800478c:	4b1f      	ldr	r3, [pc, #124]	@ (800480c <motion_on_move_end+0xa0>)
 800478e:	9301      	str	r3, [sp, #4]
 8004790:	4b1f      	ldr	r3, [pc, #124]	@ (8004810 <motion_on_move_end+0xa4>)
 8004792:	9300      	str	r3, [sp, #0]
 8004794:	4613      	mov	r3, r2
 8004796:	f06f 0201 	mvn.w	r2, #1
 800479a:	2164      	movs	r1, #100	@ 0x64
 800479c:	2002      	movs	r0, #2
 800479e:	f7fd ff25 	bl	80025ec <log_event_auto>
 80047a2:	e02d      	b.n	8004800 <motion_on_move_end+0x94>
        return;
    }
    uint32_t primask = motion_lock();
 80047a4:	f7fe f936 	bl	8002a14 <motion_lock>
 80047a8:	60f8      	str	r0, [r7, #12]
    motion_stop_all_axes_locked();
 80047aa:	f7fe fbd7 	bl	8002f5c <motion_stop_all_axes_locked>
    motion_queue_clear_locked();
 80047ae:	f7fe fc2b 	bl	8003008 <motion_queue_clear_locked>
    g_has_active_segment = 0u;
 80047b2:	4b18      	ldr	r3, [pc, #96]	@ (8004814 <motion_on_move_end+0xa8>)
 80047b4:	2200      	movs	r2, #0
 80047b6:	701a      	strb	r2, [r3, #0]
    g_status.state = MOTION_STOPPING;
 80047b8:	4b17      	ldr	r3, [pc, #92]	@ (8004818 <motion_on_move_end+0xac>)
 80047ba:	2204      	movs	r2, #4
 80047bc:	701a      	strb	r2, [r3, #0]
    motion_refresh_status_locked();
 80047be:	f7fe fa35 	bl	8002c2c <motion_refresh_status_locked>
    motion_unlock(primask);
 80047c2:	68f8      	ldr	r0, [r7, #12]
 80047c4:	f7fe f937 	bl	8002a36 <motion_unlock>

    motion_send_move_end_response(req.frameId);
 80047c8:	7a3b      	ldrb	r3, [r7, #8]
 80047ca:	4618      	mov	r0, r3
 80047cc:	f7fe ff8a 	bl	80036e4 <motion_send_move_end_response>

    primask = motion_lock();
 80047d0:	f7fe f920 	bl	8002a14 <motion_lock>
 80047d4:	60f8      	str	r0, [r7, #12]
    g_status.state = MOTION_IDLE;
 80047d6:	4b10      	ldr	r3, [pc, #64]	@ (8004818 <motion_on_move_end+0xac>)
 80047d8:	2200      	movs	r2, #0
 80047da:	701a      	strb	r2, [r3, #0]
    motion_refresh_status_locked();
 80047dc:	f7fe fa26 	bl	8002c2c <motion_refresh_status_locked>
    motion_unlock(primask);
 80047e0:	68f8      	ldr	r0, [r7, #12]
 80047e2:	f7fe f928 	bl	8002a36 <motion_unlock>

    LOGT_THIS(LOG_STATE_APPLIED, PROTO_OK, "move_end", "stopped");
 80047e6:	4a08      	ldr	r2, [pc, #32]	@ (8004808 <motion_on_move_end+0x9c>)
 80047e8:	4b0c      	ldr	r3, [pc, #48]	@ (800481c <motion_on_move_end+0xb0>)
 80047ea:	9302      	str	r3, [sp, #8]
 80047ec:	4b0c      	ldr	r3, [pc, #48]	@ (8004820 <motion_on_move_end+0xb4>)
 80047ee:	9301      	str	r3, [sp, #4]
 80047f0:	4b07      	ldr	r3, [pc, #28]	@ (8004810 <motion_on_move_end+0xa4>)
 80047f2:	9300      	str	r3, [sp, #0]
 80047f4:	4613      	mov	r3, r2
 80047f6:	2200      	movs	r2, #0
 80047f8:	2102      	movs	r1, #2
 80047fa:	2002      	movs	r0, #2
 80047fc:	f7fd fef6 	bl	80025ec <log_event_auto>
}
 8004800:	3710      	adds	r7, #16
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}
 8004806:	bf00      	nop
 8004808:	080105fc 	.word	0x080105fc
 800480c:	080107b4 	.word	0x080107b4
 8004810:	08010724 	.word	0x08010724
 8004814:	20000168 	.word	0x20000168
 8004818:	200000d0 	.word	0x200000d0
 800481c:	080108fc 	.word	0x080108fc
 8004820:	08010740 	.word	0x08010740

08004824 <motion_on_set_origin>:

/* =======================
 *  set_origin e encoder_status (telemetria)
 * ======================= */
void motion_on_set_origin(const uint8_t *frame, uint32_t len) {
 8004824:	b580      	push	{r7, lr}
 8004826:	b094      	sub	sp, #80	@ 0x50
 8004828:	af04      	add	r7, sp, #16
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	6039      	str	r1, [r7, #0]
    set_origin_req_t req;
    if (set_origin_req_decoder(frame, len, &req) != PROTO_OK) {
 800482e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004832:	461a      	mov	r2, r3
 8004834:	6839      	ldr	r1, [r7, #0]
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f7fc fafd 	bl	8000e36 <set_origin_req_decoder>
 800483c:	4603      	mov	r3, r0
 800483e:	2b00      	cmp	r3, #0
 8004840:	d00c      	beq.n	800485c <motion_on_set_origin+0x38>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_FRAME, "set_origin", "decode_fail");
 8004842:	4a49      	ldr	r2, [pc, #292]	@ (8004968 <motion_on_set_origin+0x144>)
 8004844:	4b49      	ldr	r3, [pc, #292]	@ (800496c <motion_on_set_origin+0x148>)
 8004846:	9301      	str	r3, [sp, #4]
 8004848:	4b49      	ldr	r3, [pc, #292]	@ (8004970 <motion_on_set_origin+0x14c>)
 800484a:	9300      	str	r3, [sp, #0]
 800484c:	4613      	mov	r3, r2
 800484e:	f06f 0201 	mvn.w	r2, #1
 8004852:	2164      	movs	r1, #100	@ 0x64
 8004854:	2002      	movs	r0, #2
 8004856:	f7fd fec9 	bl	80025ec <log_event_auto>
 800485a:	e082      	b.n	8004962 <motion_on_set_origin+0x13e>
        return;
    }
    uint8_t m = req.mask & 0x07u;
 800485c:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8004860:	f003 0307 	and.w	r3, r3, #7
 8004864:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8004868:	2300      	movs	r3, #0
 800486a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800486e:	e046      	b.n	80048fe <motion_on_set_origin+0xda>
        if (m & (1u << axis)) {
 8004870:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8004874:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8004878:	fa22 f303 	lsr.w	r3, r2, r3
 800487c:	f003 0301 	and.w	r3, r3, #1
 8004880:	2b00      	cmp	r3, #0
 8004882:	d037      	beq.n	80048f4 <motion_on_set_origin+0xd0>
            /* Define base externa como a posição absoluta atual e zera relativo */
            int64_t pos = g_encoder_position[axis];
 8004884:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8004888:	4a3a      	ldr	r2, [pc, #232]	@ (8004974 <motion_on_set_origin+0x150>)
 800488a:	00db      	lsls	r3, r3, #3
 800488c:	4413      	add	r3, r2
 800488e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004892:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
            if (pos > INT32_MAX) pos = INT32_MAX; else if (pos < INT32_MIN) pos = INT32_MIN;
 8004896:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800489a:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 800489e:	f173 0300 	sbcs.w	r3, r3, #0
 80048a2:	db06      	blt.n	80048b2 <motion_on_set_origin+0x8e>
 80048a4:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80048a8:	f04f 0300 	mov.w	r3, #0
 80048ac:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
 80048b0:	e00c      	b.n	80048cc <motion_on_set_origin+0xa8>
 80048b2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80048b6:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80048ba:	f173 33ff 	sbcs.w	r3, r3, #4294967295
 80048be:	da05      	bge.n	80048cc <motion_on_set_origin+0xa8>
 80048c0:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80048c4:	f04f 33ff 	mov.w	r3, #4294967295
 80048c8:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
            g_origin_base32[axis] = (int32_t)pos;
 80048cc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80048d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80048d2:	4929      	ldr	r1, [pc, #164]	@ (8004978 <motion_on_set_origin+0x154>)
 80048d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            g_encoder_origin[axis] = g_encoder_position[axis];
 80048d8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80048dc:	f897 103f 	ldrb.w	r1, [r7, #63]	@ 0x3f
 80048e0:	4a24      	ldr	r2, [pc, #144]	@ (8004974 <motion_on_set_origin+0x150>)
 80048e2:	00db      	lsls	r3, r3, #3
 80048e4:	4413      	add	r3, r2
 80048e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ea:	4824      	ldr	r0, [pc, #144]	@ (800497c <motion_on_set_origin+0x158>)
 80048ec:	00c9      	lsls	r1, r1, #3
 80048ee:	4401      	add	r1, r0
 80048f0:	e9c1 2300 	strd	r2, r3, [r1]
    for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 80048f4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80048f8:	3301      	adds	r3, #1
 80048fa:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80048fe:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8004902:	2b02      	cmp	r3, #2
 8004904:	d9b4      	bls.n	8004870 <motion_on_set_origin+0x4c>
        }
    }
    set_origin_resp_t resp;
    resp.frameId = req.frameId;
 8004906:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800490a:	773b      	strb	r3, [r7, #28]
    resp.x0 = g_origin_base32[AXIS_X];
 800490c:	4b1a      	ldr	r3, [pc, #104]	@ (8004978 <motion_on_set_origin+0x154>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	623b      	str	r3, [r7, #32]
    resp.y0 = g_origin_base32[AXIS_Y];
 8004912:	4b19      	ldr	r3, [pc, #100]	@ (8004978 <motion_on_set_origin+0x154>)
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	627b      	str	r3, [r7, #36]	@ 0x24
    resp.z0 = g_origin_base32[AXIS_Z];
 8004918:	4b17      	ldr	r3, [pc, #92]	@ (8004978 <motion_on_set_origin+0x154>)
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint8_t raw[16];
    if (set_origin_resp_encoder(&resp, raw, sizeof raw) == PROTO_OK) {
 800491e:	f107 010c 	add.w	r1, r7, #12
 8004922:	f107 031c 	add.w	r3, r7, #28
 8004926:	2210      	movs	r2, #16
 8004928:	4618      	mov	r0, r3
 800492a:	f7fc fe7d 	bl	8001628 <set_origin_resp_encoder>
 800492e:	4603      	mov	r3, r0
 8004930:	2b00      	cmp	r3, #0
 8004932:	d105      	bne.n	8004940 <motion_on_set_origin+0x11c>
        (void)app_resp_push(raw, (uint32_t)sizeof raw);
 8004934:	f107 030c 	add.w	r3, r7, #12
 8004938:	2110      	movs	r1, #16
 800493a:	4618      	mov	r0, r3
 800493c:	f000 fe0a 	bl	8005554 <app_resp_push>
    }
    LOGA_THIS(LOG_STATE_APPLIED, PROTO_OK, "set_origin", "mask=0x%02X mode=%u", (unsigned)req.mask, (unsigned)req.mode);
 8004940:	4a09      	ldr	r2, [pc, #36]	@ (8004968 <motion_on_set_origin+0x144>)
 8004942:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8004946:	f897 102e 	ldrb.w	r1, [r7, #46]	@ 0x2e
 800494a:	9103      	str	r1, [sp, #12]
 800494c:	9302      	str	r3, [sp, #8]
 800494e:	4b0c      	ldr	r3, [pc, #48]	@ (8004980 <motion_on_set_origin+0x15c>)
 8004950:	9301      	str	r3, [sp, #4]
 8004952:	4b07      	ldr	r3, [pc, #28]	@ (8004970 <motion_on_set_origin+0x14c>)
 8004954:	9300      	str	r3, [sp, #0]
 8004956:	4613      	mov	r3, r2
 8004958:	2200      	movs	r2, #0
 800495a:	2102      	movs	r1, #2
 800495c:	2002      	movs	r0, #2
 800495e:	f7fd fe45 	bl	80025ec <log_event_auto>
}
 8004962:	3740      	adds	r7, #64	@ 0x40
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}
 8004968:	080105fc 	.word	0x080105fc
 800496c:	080107b4 	.word	0x080107b4
 8004970:	08010904 	.word	0x08010904
 8004974:	20000c70 	.word	0x20000c70
 8004978:	20000cbc 	.word	0x20000cbc
 800497c:	20000c98 	.word	0x20000c98
 8004980:	08010910 	.word	0x08010910

08004984 <motion_on_encoder_status>:

void motion_on_encoder_status(const uint8_t *frame, uint32_t len) {
 8004984:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004988:	b09e      	sub	sp, #120	@ 0x78
 800498a:	af02      	add	r7, sp, #8
 800498c:	60f8      	str	r0, [r7, #12]
 800498e:	60b9      	str	r1, [r7, #8]
    encoder_status_req_t req;
    if (encoder_status_req_decoder(frame, len, &req) != PROTO_OK) {
 8004990:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8004994:	461a      	mov	r2, r3
 8004996:	68b9      	ldr	r1, [r7, #8]
 8004998:	68f8      	ldr	r0, [r7, #12]
 800499a:	f7fb fe9f 	bl	80006dc <encoder_status_req_decoder>
 800499e:	4603      	mov	r3, r0
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d00c      	beq.n	80049be <motion_on_encoder_status+0x3a>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_FRAME, "enc_status", "decode_fail");
 80049a4:	4a65      	ldr	r2, [pc, #404]	@ (8004b3c <motion_on_encoder_status+0x1b8>)
 80049a6:	4b66      	ldr	r3, [pc, #408]	@ (8004b40 <motion_on_encoder_status+0x1bc>)
 80049a8:	9301      	str	r3, [sp, #4]
 80049aa:	4b66      	ldr	r3, [pc, #408]	@ (8004b44 <motion_on_encoder_status+0x1c0>)
 80049ac:	9300      	str	r3, [sp, #0]
 80049ae:	4613      	mov	r3, r2
 80049b0:	f06f 0201 	mvn.w	r2, #1
 80049b4:	2164      	movs	r1, #100	@ 0x64
 80049b6:	2002      	movs	r0, #2
 80049b8:	f7fd fe18 	bl	80025ec <log_event_auto>
 80049bc:	e0b9      	b.n	8004b32 <motion_on_encoder_status+0x1ae>
        return;
    }
    /* posição_rel = position - origin; posição_abs = origin_base + posição_rel */
    int32_t rel[3];
    int32_t abs[3];
    for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 80049be:	2300      	movs	r3, #0
 80049c0:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 80049c4:	e080      	b.n	8004ac8 <motion_on_encoder_status+0x144>
        int64_t r = g_encoder_position[axis] - g_encoder_origin[axis];
 80049c6:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80049ca:	4a5f      	ldr	r2, [pc, #380]	@ (8004b48 <motion_on_encoder_status+0x1c4>)
 80049cc:	00db      	lsls	r3, r3, #3
 80049ce:	4413      	add	r3, r2
 80049d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80049d4:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80049d8:	4a5c      	ldr	r2, [pc, #368]	@ (8004b4c <motion_on_encoder_status+0x1c8>)
 80049da:	00db      	lsls	r3, r3, #3
 80049dc:	4413      	add	r3, r2
 80049de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049e2:	ebb0 0a02 	subs.w	sl, r0, r2
 80049e6:	eb61 0b03 	sbc.w	fp, r1, r3
 80049ea:	e9c7 ab18 	strd	sl, fp, [r7, #96]	@ 0x60
        if (r > INT32_MAX) r = INT32_MAX; else if (r < INT32_MIN) r = INT32_MIN;
 80049ee:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80049f2:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80049f6:	f173 0300 	sbcs.w	r3, r3, #0
 80049fa:	db06      	blt.n	8004a0a <motion_on_encoder_status+0x86>
 80049fc:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8004a00:	f04f 0300 	mov.w	r3, #0
 8004a04:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
 8004a08:	e00c      	b.n	8004a24 <motion_on_encoder_status+0xa0>
 8004a0a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8004a0e:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8004a12:	f173 33ff 	sbcs.w	r3, r3, #4294967295
 8004a16:	da05      	bge.n	8004a24 <motion_on_encoder_status+0xa0>
 8004a18:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004a1c:	f04f 33ff 	mov.w	r3, #4294967295
 8004a20:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
        rel[axis] = (int32_t)r;
 8004a24:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8004a28:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	3368      	adds	r3, #104	@ 0x68
 8004a2e:	f107 0108 	add.w	r1, r7, #8
 8004a32:	440b      	add	r3, r1
 8004a34:	f843 2c28 	str.w	r2, [r3, #-40]
        int64_t a = (int64_t)g_origin_base32[axis] + (int64_t)rel[axis];
 8004a38:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8004a3c:	4a44      	ldr	r2, [pc, #272]	@ (8004b50 <motion_on_encoder_status+0x1cc>)
 8004a3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a42:	17da      	asrs	r2, r3, #31
 8004a44:	461c      	mov	r4, r3
 8004a46:	4615      	mov	r5, r2
 8004a48:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8004a4c:	009b      	lsls	r3, r3, #2
 8004a4e:	3368      	adds	r3, #104	@ 0x68
 8004a50:	f107 0208 	add.w	r2, r7, #8
 8004a54:	4413      	add	r3, r2
 8004a56:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8004a5a:	17da      	asrs	r2, r3, #31
 8004a5c:	4698      	mov	r8, r3
 8004a5e:	4691      	mov	r9, r2
 8004a60:	eb14 0308 	adds.w	r3, r4, r8
 8004a64:	603b      	str	r3, [r7, #0]
 8004a66:	eb45 0309 	adc.w	r3, r5, r9
 8004a6a:	607b      	str	r3, [r7, #4]
 8004a6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a70:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
        if (a > INT32_MAX) a = INT32_MAX; else if (a < INT32_MIN) a = INT32_MIN;
 8004a74:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004a78:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8004a7c:	f173 0300 	sbcs.w	r3, r3, #0
 8004a80:	db06      	blt.n	8004a90 <motion_on_encoder_status+0x10c>
 8004a82:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8004a86:	f04f 0300 	mov.w	r3, #0
 8004a8a:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
 8004a8e:	e00c      	b.n	8004aaa <motion_on_encoder_status+0x126>
 8004a90:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004a94:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8004a98:	f173 33ff 	sbcs.w	r3, r3, #4294967295
 8004a9c:	da05      	bge.n	8004aaa <motion_on_encoder_status+0x126>
 8004a9e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004aa2:	f04f 33ff 	mov.w	r3, #4294967295
 8004aa6:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
        abs[axis] = (int32_t)a;
 8004aaa:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8004aae:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004ab0:	009b      	lsls	r3, r3, #2
 8004ab2:	3368      	adds	r3, #104	@ 0x68
 8004ab4:	f107 0108 	add.w	r1, r7, #8
 8004ab8:	440b      	add	r3, r1
 8004aba:	f843 2c34 	str.w	r2, [r3, #-52]
    for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8004abe:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8004ac2:	3301      	adds	r3, #1
 8004ac4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 8004ac8:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8004acc:	2b02      	cmp	r3, #2
 8004ace:	f67f af7a 	bls.w	80049c6 <motion_on_encoder_status+0x42>
    }
    encoder_status_resp_t resp;
    resp.frameId = req.frameId;
 8004ad2:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8004ad6:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    resp.pidErrX = (uint8_t)g_status.pidErrX;
 8004ada:	4b1e      	ldr	r3, [pc, #120]	@ (8004b54 <motion_on_encoder_status+0x1d0>)
 8004adc:	795b      	ldrb	r3, [r3, #5]
 8004ade:	b25b      	sxtb	r3, r3
 8004ae0:	b2db      	uxtb	r3, r3
 8004ae2:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
    resp.pidErrY = (uint8_t)g_status.pidErrY;
 8004ae6:	4b1b      	ldr	r3, [pc, #108]	@ (8004b54 <motion_on_encoder_status+0x1d0>)
 8004ae8:	799b      	ldrb	r3, [r3, #6]
 8004aea:	b25b      	sxtb	r3, r3
 8004aec:	b2db      	uxtb	r3, r3
 8004aee:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    resp.pidErrZ = (uint8_t)g_status.pidErrZ;
 8004af2:	4b18      	ldr	r3, [pc, #96]	@ (8004b54 <motion_on_encoder_status+0x1d0>)
 8004af4:	79db      	ldrb	r3, [r3, #7]
 8004af6:	b25b      	sxtb	r3, r3
 8004af8:	b2db      	uxtb	r3, r3
 8004afa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    resp.delta = 0; /* opcional */
 8004afe:	2300      	movs	r3, #0
 8004b00:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    resp.absX = abs[AXIS_X];
 8004b04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b06:	633b      	str	r3, [r7, #48]	@ 0x30
    resp.absY = abs[AXIS_Y];
 8004b08:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b0a:	637b      	str	r3, [r7, #52]	@ 0x34
    resp.absZ = abs[AXIS_Z];
 8004b0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b0e:	63bb      	str	r3, [r7, #56]	@ 0x38
    uint8_t raw[20];
    if (encoder_status_resp_encoder(&resp, raw, sizeof raw) == PROTO_OK) {
 8004b10:	f107 0114 	add.w	r1, r7, #20
 8004b14:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004b18:	2214      	movs	r2, #20
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f7fc fa76 	bl	800100c <encoder_status_resp_encoder>
 8004b20:	4603      	mov	r3, r0
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d105      	bne.n	8004b32 <motion_on_encoder_status+0x1ae>
        (void)app_resp_push(raw, (uint32_t)sizeof raw);
 8004b26:	f107 0314 	add.w	r3, r7, #20
 8004b2a:	2114      	movs	r1, #20
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	f000 fd11 	bl	8005554 <app_resp_push>
    }
}
 8004b32:	3770      	adds	r7, #112	@ 0x70
 8004b34:	46bd      	mov	sp, r7
 8004b36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b3a:	bf00      	nop
 8004b3c:	080105fc 	.word	0x080105fc
 8004b40:	080107b4 	.word	0x080107b4
 8004b44:	08010924 	.word	0x08010924
 8004b48:	20000c70 	.word	0x20000c70
 8004b4c:	20000c98 	.word	0x20000c98
 8004b50:	20000cbc 	.word	0x20000cbc
 8004b54:	200000d0 	.word	0x200000d0

08004b58 <motion_on_set_microsteps>:

void motion_on_set_microsteps(const uint8_t *frame, uint32_t len) {
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b088      	sub	sp, #32
 8004b5c:	af04      	add	r7, sp, #16
 8004b5e:	6078      	str	r0, [r7, #4]
 8004b60:	6039      	str	r1, [r7, #0]
    set_microsteps_req_t req;
    if (set_microsteps_req_decoder(frame, len, &req) != PROTO_OK) {
 8004b62:	f107 0308 	add.w	r3, r7, #8
 8004b66:	461a      	mov	r2, r3
 8004b68:	6839      	ldr	r1, [r7, #0]
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f7fc f8e8 	bl	8000d40 <set_microsteps_req_decoder>
 8004b70:	4603      	mov	r3, r0
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d00c      	beq.n	8004b90 <motion_on_set_microsteps+0x38>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_FRAME, "set_microsteps", "decode_fail");
 8004b76:	4a20      	ldr	r2, [pc, #128]	@ (8004bf8 <motion_on_set_microsteps+0xa0>)
 8004b78:	4b20      	ldr	r3, [pc, #128]	@ (8004bfc <motion_on_set_microsteps+0xa4>)
 8004b7a:	9301      	str	r3, [sp, #4]
 8004b7c:	4b20      	ldr	r3, [pc, #128]	@ (8004c00 <motion_on_set_microsteps+0xa8>)
 8004b7e:	9300      	str	r3, [sp, #0]
 8004b80:	4613      	mov	r3, r2
 8004b82:	f06f 0201 	mvn.w	r2, #1
 8004b86:	2164      	movs	r1, #100	@ 0x64
 8004b88:	2002      	movs	r0, #2
 8004b8a:	f7fd fd2f 	bl	80025ec <log_event_auto>
        return;
 8004b8e:	e02f      	b.n	8004bf0 <motion_on_set_microsteps+0x98>
    }
    if (g_status.state == MOTION_RUNNING) {
 8004b90:	4b1c      	ldr	r3, [pc, #112]	@ (8004c04 <motion_on_set_microsteps+0xac>)
 8004b92:	781b      	ldrb	r3, [r3, #0]
 8004b94:	b2db      	uxtb	r3, r3
 8004b96:	2b02      	cmp	r3, #2
 8004b98:	d10c      	bne.n	8004bb4 <motion_on_set_microsteps+0x5c>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_RANGE, "set_microsteps", "busy_running");
 8004b9a:	4a17      	ldr	r2, [pc, #92]	@ (8004bf8 <motion_on_set_microsteps+0xa0>)
 8004b9c:	4b1a      	ldr	r3, [pc, #104]	@ (8004c08 <motion_on_set_microsteps+0xb0>)
 8004b9e:	9301      	str	r3, [sp, #4]
 8004ba0:	4b17      	ldr	r3, [pc, #92]	@ (8004c00 <motion_on_set_microsteps+0xa8>)
 8004ba2:	9300      	str	r3, [sp, #0]
 8004ba4:	4613      	mov	r3, r2
 8004ba6:	f06f 0203 	mvn.w	r2, #3
 8004baa:	2164      	movs	r1, #100	@ 0x64
 8004bac:	2002      	movs	r0, #2
 8004bae:	f7fd fd1d 	bl	80025ec <log_event_auto>
        return;
 8004bb2:	e01d      	b.n	8004bf0 <motion_on_set_microsteps+0x98>
    }
    uint16_t ms = (req.microsteps == 0u) ? 1u : req.microsteps;
 8004bb4:	897b      	ldrh	r3, [r7, #10]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d001      	beq.n	8004bbe <motion_on_set_microsteps+0x66>
 8004bba:	897b      	ldrh	r3, [r7, #10]
 8004bbc:	e000      	b.n	8004bc0 <motion_on_set_microsteps+0x68>
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	81fb      	strh	r3, [r7, #14]
    if (ms > 256u) ms = 256u;
 8004bc2:	89fb      	ldrh	r3, [r7, #14]
 8004bc4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004bc8:	d902      	bls.n	8004bd0 <motion_on_set_microsteps+0x78>
 8004bca:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004bce:	81fb      	strh	r3, [r7, #14]
    g_microstep_factor = ms;
 8004bd0:	4a0e      	ldr	r2, [pc, #56]	@ (8004c0c <motion_on_set_microsteps+0xb4>)
 8004bd2:	89fb      	ldrh	r3, [r7, #14]
 8004bd4:	8013      	strh	r3, [r2, #0]
    LOGA_THIS(LOG_STATE_APPLIED, PROTO_OK, "set_microsteps", "ms=%u", (unsigned)ms);
 8004bd6:	4a08      	ldr	r2, [pc, #32]	@ (8004bf8 <motion_on_set_microsteps+0xa0>)
 8004bd8:	89fb      	ldrh	r3, [r7, #14]
 8004bda:	9302      	str	r3, [sp, #8]
 8004bdc:	4b0c      	ldr	r3, [pc, #48]	@ (8004c10 <motion_on_set_microsteps+0xb8>)
 8004bde:	9301      	str	r3, [sp, #4]
 8004be0:	4b07      	ldr	r3, [pc, #28]	@ (8004c00 <motion_on_set_microsteps+0xa8>)
 8004be2:	9300      	str	r3, [sp, #0]
 8004be4:	4613      	mov	r3, r2
 8004be6:	2200      	movs	r2, #0
 8004be8:	2102      	movs	r1, #2
 8004bea:	2002      	movs	r0, #2
 8004bec:	f7fd fcfe 	bl	80025ec <log_event_auto>
}
 8004bf0:	3710      	adds	r7, #16
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}
 8004bf6:	bf00      	nop
 8004bf8:	080105fc 	.word	0x080105fc
 8004bfc:	080107b4 	.word	0x080107b4
 8004c00:	08010930 	.word	0x08010930
 8004c04:	200000d0 	.word	0x200000d0
 8004c08:	08010940 	.word	0x08010940
 8004c0c:	20000010 	.word	0x20000010
 8004c10:	08010950 	.word	0x08010950

08004c14 <motion_demo_set_continuous>:
    }
    motion_unlock(primask);
}

void motion_demo_set_continuous(uint8_t enable)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b086      	sub	sp, #24
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	71fb      	strb	r3, [r7, #7]
    uint32_t primask = motion_lock();
 8004c1e:	f7fd fef9 	bl	8002a14 <motion_lock>
 8004c22:	6138      	str	r0, [r7, #16]
    g_demo_continuous = (enable ? 1u : 0u);
 8004c24:	79fb      	ldrb	r3, [r7, #7]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d001      	beq.n	8004c2e <motion_demo_set_continuous+0x1a>
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	e000      	b.n	8004c30 <motion_demo_set_continuous+0x1c>
 8004c2e:	2200      	movs	r2, #0
 8004c30:	4b48      	ldr	r3, [pc, #288]	@ (8004d54 <motion_demo_set_continuous+0x140>)
 8004c32:	701a      	strb	r2, [r3, #0]

    if (g_demo_continuous) {
 8004c34:	4b47      	ldr	r3, [pc, #284]	@ (8004d54 <motion_demo_set_continuous+0x140>)
 8004c36:	781b      	ldrb	r3, [r3, #0]
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d077      	beq.n	8004d2e <motion_demo_set_continuous+0x11a>
        g_has_active_segment = 1u;
 8004c3e:	4b46      	ldr	r3, [pc, #280]	@ (8004d58 <motion_demo_set_continuous+0x144>)
 8004c40:	2201      	movs	r2, #1
 8004c42:	701a      	strb	r2, [r3, #0]

        for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8004c44:	2300      	movs	r3, #0
 8004c46:	75fb      	strb	r3, [r7, #23]
 8004c48:	e068      	b.n	8004d1c <motion_demo_set_continuous+0x108>
            motion_axis_state_t *ax = &g_axis_state[axis];
 8004c4a:	7dfa      	ldrb	r2, [r7, #23]
 8004c4c:	4613      	mov	r3, r2
 8004c4e:	005b      	lsls	r3, r3, #1
 8004c50:	4413      	add	r3, r2
 8004c52:	011b      	lsls	r3, r3, #4
 8004c54:	4a41      	ldr	r2, [pc, #260]	@ (8004d5c <motion_demo_set_continuous+0x148>)
 8004c56:	4413      	add	r3, r2
 8004c58:	60fb      	str	r3, [r7, #12]

            ax->total_steps       = 0xFFFFFFFFu; 
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	f04f 32ff 	mov.w	r2, #4294967295
 8004c60:	601a      	str	r2, [r3, #0]
            ax->target_steps      = 0u;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2200      	movs	r2, #0
 8004c66:	605a      	str	r2, [r3, #4]
            ax->emitted_steps     = 0u;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	609a      	str	r2, [r3, #8]

            /* tabela em "k steps/s" (~1 kHz) -> converte para steps/s */
            uint16_t vtab         = g_demo_speed_table[g_demo_speed_idx & 0x3u];
 8004c6e:	4b3c      	ldr	r3, [pc, #240]	@ (8004d60 <motion_demo_set_continuous+0x14c>)
 8004c70:	781b      	ldrb	r3, [r3, #0]
 8004c72:	b2db      	uxtb	r3, r3
 8004c74:	f003 0303 	and.w	r3, r3, #3
 8004c78:	4a3a      	ldr	r2, [pc, #232]	@ (8004d64 <motion_demo_set_continuous+0x150>)
 8004c7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c7e:	817b      	strh	r3, [r7, #10]
            ax->velocity_per_tick = vtab;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	897a      	ldrh	r2, [r7, #10]
 8004c84:	819a      	strh	r2, [r3, #12]
            ax->v_target_sps      = ((uint32_t)vtab) * 1000u;
 8004c86:	897b      	ldrh	r3, [r7, #10]
 8004c88:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004c8c:	fb03 f202 	mul.w	r2, r3, r2
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	621a      	str	r2, [r3, #32]
            if (ax->v_target_sps > MOTION_MAX_SPS) ax->v_target_sps = MOTION_MAX_SPS;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	6a1b      	ldr	r3, [r3, #32]
 8004c98:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d903      	bls.n	8004ca8 <motion_demo_set_continuous+0x94>
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 8004ca6:	621a      	str	r2, [r3, #32]
            ax->v_actual_sps      = 0u;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2200      	movs	r2, #0
 8004cac:	625a      	str	r2, [r3, #36]	@ 0x24
            ax->accel_sps2        = DEMO_ACCEL_SPS2;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	4a2d      	ldr	r2, [pc, #180]	@ (8004d68 <motion_demo_set_continuous+0x154>)
 8004cb2:	629a      	str	r2, [r3, #40]	@ 0x28

            ax->dda_accum_q16     = 0u;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	619a      	str	r2, [r3, #24]
            ax->dda_inc_q16       = 0u;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	61da      	str	r2, [r3, #28]

            ax->step_high         = 0u;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	751a      	strb	r2, [r3, #20]
            ax->step_low          = 0u;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	755a      	strb	r2, [r3, #21]
            ax->en_settle_ticks   = MOTION_ENABLE_SETTLE_TICKS;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2202      	movs	r2, #2
 8004cd0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
            ax->dir_settle_ticks  = MOTION_DIR_SETUP_TICKS;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

            motion_hw_step_low(axis);
 8004cdc:	7dfb      	ldrb	r3, [r7, #23]
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f7fd fe1e 	bl	8002920 <motion_hw_step_low>
            motion_hw_set_dir(axis, 1u);     /* forward */
 8004ce4:	7dfb      	ldrb	r3, [r7, #23]
 8004ce6:	2101      	movs	r1, #1
 8004ce8:	4618      	mov	r0, r3
 8004cea:	f7fd fd75 	bl	80027d8 <motion_hw_set_dir>
            motion_hw_enable(axis, 1u);      /* ativo em baixo no TMC5160 */
 8004cee:	7dfb      	ldrb	r3, [r7, #23]
 8004cf0:	2101      	movs	r1, #1
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f7fd fdb0 	bl	8002858 <motion_hw_enable>
            /* Não zera origem automaticamente; mantém a referência definida via set_origin */
            g_encoder_delta_tick[axis] = 0;
 8004cf8:	7dfb      	ldrb	r3, [r7, #23]
 8004cfa:	4a1c      	ldr	r2, [pc, #112]	@ (8004d6c <motion_demo_set_continuous+0x158>)
 8004cfc:	2100      	movs	r1, #0
 8004cfe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            g_pi_i_accum[axis] = 0;
 8004d02:	7dfb      	ldrb	r3, [r7, #23]
 8004d04:	4a1a      	ldr	r2, [pc, #104]	@ (8004d70 <motion_demo_set_continuous+0x15c>)
 8004d06:	2100      	movs	r1, #0
 8004d08:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            g_pi_prev_err[axis] = 0;
 8004d0c:	7dfb      	ldrb	r3, [r7, #23]
 8004d0e:	4a19      	ldr	r2, [pc, #100]	@ (8004d74 <motion_demo_set_continuous+0x160>)
 8004d10:	2100      	movs	r1, #0
 8004d12:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8004d16:	7dfb      	ldrb	r3, [r7, #23]
 8004d18:	3301      	adds	r3, #1
 8004d1a:	75fb      	strb	r3, [r7, #23]
 8004d1c:	7dfb      	ldrb	r3, [r7, #23]
 8004d1e:	2b02      	cmp	r3, #2
 8004d20:	d993      	bls.n	8004c4a <motion_demo_set_continuous+0x36>
        }
        g_status.state = MOTION_RUNNING;
 8004d22:	4b15      	ldr	r3, [pc, #84]	@ (8004d78 <motion_demo_set_continuous+0x164>)
 8004d24:	2202      	movs	r2, #2
 8004d26:	701a      	strb	r2, [r3, #0]
        motion_refresh_status_locked();
 8004d28:	f7fd ff80 	bl	8002c2c <motion_refresh_status_locked>
 8004d2c:	e00b      	b.n	8004d46 <motion_demo_set_continuous+0x132>
    } else {
        motion_stop_all_axes_locked();
 8004d2e:	f7fe f915 	bl	8002f5c <motion_stop_all_axes_locked>
        motion_queue_clear_locked();
 8004d32:	f7fe f969 	bl	8003008 <motion_queue_clear_locked>
        g_has_active_segment = 0u;
 8004d36:	4b08      	ldr	r3, [pc, #32]	@ (8004d58 <motion_demo_set_continuous+0x144>)
 8004d38:	2200      	movs	r2, #0
 8004d3a:	701a      	strb	r2, [r3, #0]
        g_status.state = MOTION_IDLE;
 8004d3c:	4b0e      	ldr	r3, [pc, #56]	@ (8004d78 <motion_demo_set_continuous+0x164>)
 8004d3e:	2200      	movs	r2, #0
 8004d40:	701a      	strb	r2, [r3, #0]
        motion_refresh_status_locked();
 8004d42:	f7fd ff73 	bl	8002c2c <motion_refresh_status_locked>
    }
    motion_unlock(primask);
 8004d46:	6938      	ldr	r0, [r7, #16]
 8004d48:	f7fd fe75 	bl	8002a36 <motion_unlock>
}
 8004d4c:	bf00      	nop
 8004d4e:	3718      	adds	r7, #24
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}
 8004d54:	20000d10 	.word	0x20000d10
 8004d58:	20000168 	.word	0x20000168
 8004d5c:	200000d8 	.word	0x200000d8
 8004d60:	20000012 	.word	0x20000012
 8004d64:	08010ce0 	.word	0x08010ce0
 8004d68:	00030d40 	.word	0x00030d40
 8004d6c:	20000cb0 	.word	0x20000cb0
 8004d70:	20000ce0 	.word	0x20000ce0
 8004d74:	20000cec 	.word	0x20000cec
 8004d78:	200000d0 	.word	0x200000d0

08004d7c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b082      	sub	sp, #8
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
    if (!htim) return;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d00f      	beq.n	8004daa <HAL_TIM_PeriodElapsedCallback+0x2e>
    if (htim->Instance == TIM6) {
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a09      	ldr	r2, [pc, #36]	@ (8004db4 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d102      	bne.n	8004d9a <HAL_TIM_PeriodElapsedCallback+0x1e>
        motion_on_tim6_tick();
 8004d94:	f7fe fda4 	bl	80038e0 <motion_on_tim6_tick>
 8004d98:	e008      	b.n	8004dac <HAL_TIM_PeriodElapsedCallback+0x30>
    } else if (htim->Instance == TIM7) {
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a06      	ldr	r2, [pc, #24]	@ (8004db8 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d103      	bne.n	8004dac <HAL_TIM_PeriodElapsedCallback+0x30>
        motion_on_tim7_tick();
 8004da4:	f7fe ff4a 	bl	8003c3c <motion_on_tim7_tick>
 8004da8:	e000      	b.n	8004dac <HAL_TIM_PeriodElapsedCallback+0x30>
    if (!htim) return;
 8004daa:	bf00      	nop
    } else {
        (void)htim;
    }
}
 8004dac:	3708      	adds	r7, #8
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}
 8004db2:	bf00      	nop
 8004db4:	40001000 	.word	0x40001000
 8004db8:	40001400 	.word	0x40001400

08004dbc <motion_emergency_stop>:

void motion_emergency_stop(void)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b082      	sub	sp, #8
 8004dc0:	af00      	add	r7, sp, #0
    uint32_t primask = motion_lock();
 8004dc2:	f7fd fe27 	bl	8002a14 <motion_lock>
 8004dc6:	6078      	str	r0, [r7, #4]

    g_demo_continuous = 0u;
 8004dc8:	4b10      	ldr	r3, [pc, #64]	@ (8004e0c <motion_emergency_stop+0x50>)
 8004dca:	2200      	movs	r2, #0
 8004dcc:	701a      	strb	r2, [r3, #0]
    motion_stop_all_axes_locked();
 8004dce:	f7fe f8c5 	bl	8002f5c <motion_stop_all_axes_locked>
    motion_queue_clear_locked();
 8004dd2:	f7fe f919 	bl	8003008 <motion_queue_clear_locked>
    g_has_active_segment = 0u;
 8004dd6:	4b0e      	ldr	r3, [pc, #56]	@ (8004e10 <motion_emergency_stop+0x54>)
 8004dd8:	2200      	movs	r2, #0
 8004dda:	701a      	strb	r2, [r3, #0]

    g_status.state = MOTION_STOPPING;
 8004ddc:	4b0d      	ldr	r3, [pc, #52]	@ (8004e14 <motion_emergency_stop+0x58>)
 8004dde:	2204      	movs	r2, #4
 8004de0:	701a      	strb	r2, [r3, #0]
    motion_refresh_status_locked();
 8004de2:	f7fd ff23 	bl	8002c2c <motion_refresh_status_locked>
    motion_unlock(primask);
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f7fd fe25 	bl	8002a36 <motion_unlock>

    primask = motion_lock();
 8004dec:	f7fd fe12 	bl	8002a14 <motion_lock>
 8004df0:	6078      	str	r0, [r7, #4]
    g_status.state = MOTION_IDLE;
 8004df2:	4b08      	ldr	r3, [pc, #32]	@ (8004e14 <motion_emergency_stop+0x58>)
 8004df4:	2200      	movs	r2, #0
 8004df6:	701a      	strb	r2, [r3, #0]
    motion_refresh_status_locked();
 8004df8:	f7fd ff18 	bl	8002c2c <motion_refresh_status_locked>
    motion_unlock(primask);
 8004dfc:	6878      	ldr	r0, [r7, #4]
 8004dfe:	f7fd fe1a 	bl	8002a36 <motion_unlock>
}
 8004e02:	bf00      	nop
 8004e04:	3708      	adds	r7, #8
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}
 8004e0a:	bf00      	nop
 8004e0c:	20000d10 	.word	0x20000d10
 8004e10:	20000168 	.word	0x20000168
 8004e14:	200000d0 	.word	0x200000d0

08004e18 <motion_demo_is_active>:

uint8_t motion_demo_is_active(void)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	af00      	add	r7, sp, #0
    return g_demo_continuous ? 1u : 0u;
 8004e1c:	4b06      	ldr	r3, [pc, #24]	@ (8004e38 <motion_demo_is_active+0x20>)
 8004e1e:	781b      	ldrb	r3, [r3, #0]
 8004e20:	b2db      	uxtb	r3, r3
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d001      	beq.n	8004e2a <motion_demo_is_active+0x12>
 8004e26:	2301      	movs	r3, #1
 8004e28:	e000      	b.n	8004e2c <motion_demo_is_active+0x14>
 8004e2a:	2300      	movs	r3, #0
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e34:	4770      	bx	lr
 8004e36:	bf00      	nop
 8004e38:	20000d10 	.word	0x20000d10

08004e3c <motion_demo_cycle_speed>:

void motion_demo_cycle_speed(void)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b082      	sub	sp, #8
 8004e40:	af00      	add	r7, sp, #0
    g_demo_speed_idx = (uint8_t)((g_demo_speed_idx + 1u) & 0x3u);
 8004e42:	4b2d      	ldr	r3, [pc, #180]	@ (8004ef8 <motion_demo_cycle_speed+0xbc>)
 8004e44:	781b      	ldrb	r3, [r3, #0]
 8004e46:	b2db      	uxtb	r3, r3
 8004e48:	3301      	adds	r3, #1
 8004e4a:	b2db      	uxtb	r3, r3
 8004e4c:	f003 0303 	and.w	r3, r3, #3
 8004e50:	b2da      	uxtb	r2, r3
 8004e52:	4b29      	ldr	r3, [pc, #164]	@ (8004ef8 <motion_demo_cycle_speed+0xbc>)
 8004e54:	701a      	strb	r2, [r3, #0]

    /* Se demo  ativo, atualiza v_target_sps imediatamente (rampa cuida do resto) */
    if (g_demo_continuous) {
 8004e56:	4b29      	ldr	r3, [pc, #164]	@ (8004efc <motion_demo_cycle_speed+0xc0>)
 8004e58:	781b      	ldrb	r3, [r3, #0]
 8004e5a:	b2db      	uxtb	r3, r3
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d047      	beq.n	8004ef0 <motion_demo_cycle_speed+0xb4>
        uint16_t vtab = g_demo_speed_table[g_demo_speed_idx & 0x3u];
 8004e60:	4b25      	ldr	r3, [pc, #148]	@ (8004ef8 <motion_demo_cycle_speed+0xbc>)
 8004e62:	781b      	ldrb	r3, [r3, #0]
 8004e64:	b2db      	uxtb	r3, r3
 8004e66:	f003 0303 	and.w	r3, r3, #3
 8004e6a:	4a25      	ldr	r2, [pc, #148]	@ (8004f00 <motion_demo_cycle_speed+0xc4>)
 8004e6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e70:	80bb      	strh	r3, [r7, #4]
        uint32_t primask = motion_lock();
 8004e72:	f7fd fdcf 	bl	8002a14 <motion_lock>
 8004e76:	6038      	str	r0, [r7, #0]
        for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8004e78:	2300      	movs	r3, #0
 8004e7a:	71fb      	strb	r3, [r7, #7]
 8004e7c:	e032      	b.n	8004ee4 <motion_demo_cycle_speed+0xa8>
            g_axis_state[axis].velocity_per_tick = vtab;
 8004e7e:	79fa      	ldrb	r2, [r7, #7]
 8004e80:	4920      	ldr	r1, [pc, #128]	@ (8004f04 <motion_demo_cycle_speed+0xc8>)
 8004e82:	4613      	mov	r3, r2
 8004e84:	005b      	lsls	r3, r3, #1
 8004e86:	4413      	add	r3, r2
 8004e88:	011b      	lsls	r3, r3, #4
 8004e8a:	440b      	add	r3, r1
 8004e8c:	330c      	adds	r3, #12
 8004e8e:	88ba      	ldrh	r2, [r7, #4]
 8004e90:	801a      	strh	r2, [r3, #0]
            g_axis_state[axis].v_target_sps      = ((uint32_t)vtab) * 1000u;
 8004e92:	88bb      	ldrh	r3, [r7, #4]
 8004e94:	79fa      	ldrb	r2, [r7, #7]
 8004e96:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004e9a:	fb03 f101 	mul.w	r1, r3, r1
 8004e9e:	4819      	ldr	r0, [pc, #100]	@ (8004f04 <motion_demo_cycle_speed+0xc8>)
 8004ea0:	4613      	mov	r3, r2
 8004ea2:	005b      	lsls	r3, r3, #1
 8004ea4:	4413      	add	r3, r2
 8004ea6:	011b      	lsls	r3, r3, #4
 8004ea8:	4403      	add	r3, r0
 8004eaa:	3320      	adds	r3, #32
 8004eac:	6019      	str	r1, [r3, #0]
            if (g_axis_state[axis].v_target_sps > MOTION_MAX_SPS) g_axis_state[axis].v_target_sps = MOTION_MAX_SPS;
 8004eae:	79fa      	ldrb	r2, [r7, #7]
 8004eb0:	4914      	ldr	r1, [pc, #80]	@ (8004f04 <motion_demo_cycle_speed+0xc8>)
 8004eb2:	4613      	mov	r3, r2
 8004eb4:	005b      	lsls	r3, r3, #1
 8004eb6:	4413      	add	r3, r2
 8004eb8:	011b      	lsls	r3, r3, #4
 8004eba:	440b      	add	r3, r1
 8004ebc:	3320      	adds	r3, #32
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d90a      	bls.n	8004ede <motion_demo_cycle_speed+0xa2>
 8004ec8:	79fa      	ldrb	r2, [r7, #7]
 8004eca:	490e      	ldr	r1, [pc, #56]	@ (8004f04 <motion_demo_cycle_speed+0xc8>)
 8004ecc:	4613      	mov	r3, r2
 8004ece:	005b      	lsls	r3, r3, #1
 8004ed0:	4413      	add	r3, r2
 8004ed2:	011b      	lsls	r3, r3, #4
 8004ed4:	440b      	add	r3, r1
 8004ed6:	3320      	adds	r3, #32
 8004ed8:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 8004edc:	601a      	str	r2, [r3, #0]
        for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8004ede:	79fb      	ldrb	r3, [r7, #7]
 8004ee0:	3301      	adds	r3, #1
 8004ee2:	71fb      	strb	r3, [r7, #7]
 8004ee4:	79fb      	ldrb	r3, [r7, #7]
 8004ee6:	2b02      	cmp	r3, #2
 8004ee8:	d9c9      	bls.n	8004e7e <motion_demo_cycle_speed+0x42>
        }
        motion_unlock(primask);
 8004eea:	6838      	ldr	r0, [r7, #0]
 8004eec:	f7fd fda3 	bl	8002a36 <motion_unlock>
    }
}
 8004ef0:	bf00      	nop
 8004ef2:	3708      	adds	r7, #8
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}
 8004ef8:	20000012 	.word	0x20000012
 8004efc:	20000d10 	.word	0x20000d10
 8004f00:	08010ce0 	.word	0x08010ce0
 8004f04:	200000d8 	.word	0x200000d8

08004f08 <probe_service_init>:

LOG_SVC_DEFINE(LOG_SVC_PROBE, "probe");

static probe_status_t g_probe;

void probe_service_init(void) {
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b084      	sub	sp, #16
 8004f0c:	af04      	add	r7, sp, #16
	g_probe.axis_done_mask = 0;
 8004f0e:	4b0e      	ldr	r3, [pc, #56]	@ (8004f48 <probe_service_init+0x40>)
 8004f10:	2200      	movs	r2, #0
 8004f12:	701a      	strb	r2, [r3, #0]
	g_probe.error_flags = 0;
 8004f14:	4b0c      	ldr	r3, [pc, #48]	@ (8004f48 <probe_service_init+0x40>)
 8004f16:	2200      	movs	r2, #0
 8004f18:	705a      	strb	r2, [r3, #1]
	g_probe.latched_pos_x = g_probe.latched_pos_y = g_probe.latched_pos_z = 0;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	4a0a      	ldr	r2, [pc, #40]	@ (8004f48 <probe_service_init+0x40>)
 8004f1e:	60d3      	str	r3, [r2, #12]
 8004f20:	4a09      	ldr	r2, [pc, #36]	@ (8004f48 <probe_service_init+0x40>)
 8004f22:	6093      	str	r3, [r2, #8]
 8004f24:	4a08      	ldr	r2, [pc, #32]	@ (8004f48 <probe_service_init+0x40>)
 8004f26:	6053      	str	r3, [r2, #4]

	LOGT_THIS(LOG_STATE_START, PROTO_OK, "init", "ok");
 8004f28:	4a08      	ldr	r2, [pc, #32]	@ (8004f4c <probe_service_init+0x44>)
 8004f2a:	4b09      	ldr	r3, [pc, #36]	@ (8004f50 <probe_service_init+0x48>)
 8004f2c:	9302      	str	r3, [sp, #8]
 8004f2e:	4b09      	ldr	r3, [pc, #36]	@ (8004f54 <probe_service_init+0x4c>)
 8004f30:	9301      	str	r3, [sp, #4]
 8004f32:	4b09      	ldr	r3, [pc, #36]	@ (8004f58 <probe_service_init+0x50>)
 8004f34:	9300      	str	r3, [sp, #0]
 8004f36:	4613      	mov	r3, r2
 8004f38:	2200      	movs	r2, #0
 8004f3a:	2100      	movs	r1, #0
 8004f3c:	2004      	movs	r0, #4
 8004f3e:	f7fd fb55 	bl	80025ec <log_event_auto>
}
 8004f42:	bf00      	nop
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}
 8004f48:	20000d14 	.word	0x20000d14
 8004f4c:	08010958 	.word	0x08010958
 8004f50:	08010960 	.word	0x08010960
 8004f54:	08010964 	.word	0x08010964
 8004f58:	08010968 	.word	0x08010968

08004f5c <probe_on_move_probe_level>:
const probe_status_t* probe_status_get(void) {
	return &g_probe;
}

void probe_on_move_probe_level(const uint8_t *frame, uint32_t len) {
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b086      	sub	sp, #24
 8004f60:	af04      	add	r7, sp, #16
 8004f62:	6078      	str	r0, [r7, #4]
 8004f64:	6039      	str	r1, [r7, #0]
	(void) frame;
	(void) len; /* implementar FSM de probe */

	LOGT_THIS(LOG_STATE_RECEIVED, PROTO_OK, "move_probe_level", "not_implemented");
 8004f66:	4a08      	ldr	r2, [pc, #32]	@ (8004f88 <probe_on_move_probe_level+0x2c>)
 8004f68:	4b08      	ldr	r3, [pc, #32]	@ (8004f8c <probe_on_move_probe_level+0x30>)
 8004f6a:	9302      	str	r3, [sp, #8]
 8004f6c:	4b08      	ldr	r3, [pc, #32]	@ (8004f90 <probe_on_move_probe_level+0x34>)
 8004f6e:	9301      	str	r3, [sp, #4]
 8004f70:	4b08      	ldr	r3, [pc, #32]	@ (8004f94 <probe_on_move_probe_level+0x38>)
 8004f72:	9300      	str	r3, [sp, #0]
 8004f74:	4613      	mov	r3, r2
 8004f76:	2200      	movs	r2, #0
 8004f78:	2101      	movs	r1, #1
 8004f7a:	2004      	movs	r0, #4
 8004f7c:	f7fd fb36 	bl	80025ec <log_event_auto>
}
 8004f80:	bf00      	nop
 8004f82:	3708      	adds	r7, #8
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}
 8004f88:	08010958 	.word	0x08010958
 8004f8c:	08010970 	.word	0x08010970
 8004f90:	08010964 	.word	0x08010964
 8004f94:	08010980 	.word	0x08010980

08004f98 <safety_service_init>:

LOG_SVC_DEFINE(LOG_SVC_SAFETY, "safety");

static volatile safety_state_t g_state = SAFETY_NORMAL;

void safety_service_init(void) {
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b084      	sub	sp, #16
 8004f9c:	af04      	add	r7, sp, #16
	g_state = SAFETY_NORMAL;
 8004f9e:	4b09      	ldr	r3, [pc, #36]	@ (8004fc4 <safety_service_init+0x2c>)
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	701a      	strb	r2, [r3, #0]

	LOGT_THIS(LOG_STATE_START, PROTO_OK, "init", "normal");
 8004fa4:	4a08      	ldr	r2, [pc, #32]	@ (8004fc8 <safety_service_init+0x30>)
 8004fa6:	4b09      	ldr	r3, [pc, #36]	@ (8004fcc <safety_service_init+0x34>)
 8004fa8:	9302      	str	r3, [sp, #8]
 8004faa:	4b09      	ldr	r3, [pc, #36]	@ (8004fd0 <safety_service_init+0x38>)
 8004fac:	9301      	str	r3, [sp, #4]
 8004fae:	4b09      	ldr	r3, [pc, #36]	@ (8004fd4 <safety_service_init+0x3c>)
 8004fb0:	9300      	str	r3, [sp, #0]
 8004fb2:	4613      	mov	r3, r2
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	2100      	movs	r1, #0
 8004fb8:	2005      	movs	r0, #5
 8004fba:	f7fd fb17 	bl	80025ec <log_event_auto>
}
 8004fbe:	bf00      	nop
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}
 8004fc4:	20000d24 	.word	0x20000d24
 8004fc8:	08010994 	.word	0x08010994
 8004fcc:	0801099c 	.word	0x0801099c
 8004fd0:	080109a4 	.word	0x080109a4
 8004fd4:	080109a8 	.word	0x080109a8

08004fd8 <safety_estop_assert>:
void safety_estop_assert(void) {
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b084      	sub	sp, #16
 8004fdc:	af04      	add	r7, sp, #16
	g_state = SAFETY_ESTOP;
 8004fde:	4b09      	ldr	r3, [pc, #36]	@ (8005004 <safety_estop_assert+0x2c>)
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	701a      	strb	r2, [r3, #0]

	LOGT_THIS(LOG_STATE_ESTOP_ASSERT, PROTO_OK, "estop", "assert");
 8004fe4:	4a08      	ldr	r2, [pc, #32]	@ (8005008 <safety_estop_assert+0x30>)
 8004fe6:	4b09      	ldr	r3, [pc, #36]	@ (800500c <safety_estop_assert+0x34>)
 8004fe8:	9302      	str	r3, [sp, #8]
 8004fea:	4b09      	ldr	r3, [pc, #36]	@ (8005010 <safety_estop_assert+0x38>)
 8004fec:	9301      	str	r3, [sp, #4]
 8004fee:	4b09      	ldr	r3, [pc, #36]	@ (8005014 <safety_estop_assert+0x3c>)
 8004ff0:	9300      	str	r3, [sp, #0]
 8004ff2:	4613      	mov	r3, r2
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	210a      	movs	r1, #10
 8004ff8:	2005      	movs	r0, #5
 8004ffa:	f7fd faf7 	bl	80025ec <log_event_auto>
}
 8004ffe:	bf00      	nop
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}
 8005004:	20000d24 	.word	0x20000d24
 8005008:	08010994 	.word	0x08010994
 800500c:	080109b0 	.word	0x080109b0
 8005010:	080109a4 	.word	0x080109a4
 8005014:	080109b8 	.word	0x080109b8

08005018 <safety_estop_release>:
void safety_estop_release(void) {
 8005018:	b580      	push	{r7, lr}
 800501a:	b084      	sub	sp, #16
 800501c:	af04      	add	r7, sp, #16
	if (g_state == SAFETY_ESTOP)
 800501e:	4b0c      	ldr	r3, [pc, #48]	@ (8005050 <safety_estop_release+0x38>)
 8005020:	781b      	ldrb	r3, [r3, #0]
 8005022:	b2db      	uxtb	r3, r3
 8005024:	2b01      	cmp	r3, #1
 8005026:	d102      	bne.n	800502e <safety_estop_release+0x16>
		g_state = SAFETY_RECOVERY_WAIT;
 8005028:	4b09      	ldr	r3, [pc, #36]	@ (8005050 <safety_estop_release+0x38>)
 800502a:	2202      	movs	r2, #2
 800502c:	701a      	strb	r2, [r3, #0]

	LOGT_THIS(LOG_STATE_ESTOP_RELEASE, PROTO_OK, "estop", "release");
 800502e:	4a09      	ldr	r2, [pc, #36]	@ (8005054 <safety_estop_release+0x3c>)
 8005030:	4b09      	ldr	r3, [pc, #36]	@ (8005058 <safety_estop_release+0x40>)
 8005032:	9302      	str	r3, [sp, #8]
 8005034:	4b09      	ldr	r3, [pc, #36]	@ (800505c <safety_estop_release+0x44>)
 8005036:	9301      	str	r3, [sp, #4]
 8005038:	4b09      	ldr	r3, [pc, #36]	@ (8005060 <safety_estop_release+0x48>)
 800503a:	9300      	str	r3, [sp, #0]
 800503c:	4613      	mov	r3, r2
 800503e:	2200      	movs	r2, #0
 8005040:	210b      	movs	r1, #11
 8005042:	2005      	movs	r0, #5
 8005044:	f7fd fad2 	bl	80025ec <log_event_auto>
}
 8005048:	bf00      	nop
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}
 800504e:	bf00      	nop
 8005050:	20000d24 	.word	0x20000d24
 8005054:	08010994 	.word	0x08010994
 8005058:	080109c0 	.word	0x080109c0
 800505c:	080109a4 	.word	0x080109a4
 8005060:	080109b8 	.word	0x080109b8

08005064 <safety_is_safe>:
int safety_is_safe(void) {
 8005064:	b480      	push	{r7}
 8005066:	af00      	add	r7, sp, #0
	return g_state == SAFETY_NORMAL;
 8005068:	4b06      	ldr	r3, [pc, #24]	@ (8005084 <safety_is_safe+0x20>)
 800506a:	781b      	ldrb	r3, [r3, #0]
 800506c:	b2db      	uxtb	r3, r3
 800506e:	2b00      	cmp	r3, #0
 8005070:	bf0c      	ite	eq
 8005072:	2301      	moveq	r3, #1
 8005074:	2300      	movne	r3, #0
 8005076:	b2db      	uxtb	r3, r3
}
 8005078:	4618      	mov	r0, r3
 800507a:	46bd      	mov	sp, r7
 800507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005080:	4770      	bx	lr
 8005082:	bf00      	nop
 8005084:	20000d24 	.word	0x20000d24

08005088 <h_move_queue_add>:
#include "Services/Probe/probe_service.h"
#include "Services/Led/led_service.h"
#include "Services/Test/test_spi_service.h"

// Funções estáticas de adaptação compatíveis com os callbacks do roteador
static void h_move_queue_add(router_t *r, const uint8_t *f, uint32_t l) {
 8005088:	b580      	push	{r7, lr}
 800508a:	b084      	sub	sp, #16
 800508c:	af00      	add	r7, sp, #0
 800508e:	60f8      	str	r0, [r7, #12]
 8005090:	60b9      	str	r1, [r7, #8]
 8005092:	607a      	str	r2, [r7, #4]
	(void) r;
	motion_on_move_queue_add(f, l);
 8005094:	6879      	ldr	r1, [r7, #4]
 8005096:	68b8      	ldr	r0, [r7, #8]
 8005098:	f7ff f982 	bl	80043a0 <motion_on_move_queue_add>
}
 800509c:	bf00      	nop
 800509e:	3710      	adds	r7, #16
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}

080050a4 <h_move_queue_status>:
static void h_move_queue_status(router_t *r, const uint8_t *f, uint32_t l) {
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b084      	sub	sp, #16
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	60f8      	str	r0, [r7, #12]
 80050ac:	60b9      	str	r1, [r7, #8]
 80050ae:	607a      	str	r2, [r7, #4]
	(void) r;
	motion_on_move_queue_status(f, l);
 80050b0:	6879      	ldr	r1, [r7, #4]
 80050b2:	68b8      	ldr	r0, [r7, #8]
 80050b4:	f7ff fa38 	bl	8004528 <motion_on_move_queue_status>
}
 80050b8:	bf00      	nop
 80050ba:	3710      	adds	r7, #16
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}

080050c0 <h_start_move>:
static void h_start_move(router_t *r, const uint8_t *f, uint32_t l) {
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b084      	sub	sp, #16
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	60f8      	str	r0, [r7, #12]
 80050c8:	60b9      	str	r1, [r7, #8]
 80050ca:	607a      	str	r2, [r7, #4]
	(void) r;
	motion_on_start_move(f, l);
 80050cc:	6879      	ldr	r1, [r7, #4]
 80050ce:	68b8      	ldr	r0, [r7, #8]
 80050d0:	f7ff fa82 	bl	80045d8 <motion_on_start_move>
}
 80050d4:	bf00      	nop
 80050d6:	3710      	adds	r7, #16
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}

080050dc <h_move_home>:
static void h_move_home(router_t *r, const uint8_t *f, uint32_t l) {
 80050dc:	b580      	push	{r7, lr}
 80050de:	b084      	sub	sp, #16
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	60f8      	str	r0, [r7, #12]
 80050e4:	60b9      	str	r1, [r7, #8]
 80050e6:	607a      	str	r2, [r7, #4]
	(void) r;
	home_on_move_home(f, l);
 80050e8:	6879      	ldr	r1, [r7, #4]
 80050ea:	68b8      	ldr	r0, [r7, #8]
 80050ec:	f7fc fd52 	bl	8001b94 <home_on_move_home>
}
 80050f0:	bf00      	nop
 80050f2:	3710      	adds	r7, #16
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}

080050f8 <h_move_probe_level>:
static void h_move_probe_level(router_t *r, const uint8_t *f, uint32_t l) {
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b084      	sub	sp, #16
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	60f8      	str	r0, [r7, #12]
 8005100:	60b9      	str	r1, [r7, #8]
 8005102:	607a      	str	r2, [r7, #4]
	(void) r;
	probe_on_move_probe_level(f, l);
 8005104:	6879      	ldr	r1, [r7, #4]
 8005106:	68b8      	ldr	r0, [r7, #8]
 8005108:	f7ff ff28 	bl	8004f5c <probe_on_move_probe_level>
}
 800510c:	bf00      	nop
 800510e:	3710      	adds	r7, #16
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}

08005114 <h_move_end>:
static void h_move_end(router_t *r, const uint8_t *f, uint32_t l) {
 8005114:	b580      	push	{r7, lr}
 8005116:	b084      	sub	sp, #16
 8005118:	af00      	add	r7, sp, #0
 800511a:	60f8      	str	r0, [r7, #12]
 800511c:	60b9      	str	r1, [r7, #8]
 800511e:	607a      	str	r2, [r7, #4]
	(void) r;
	motion_on_move_end(f, l);
 8005120:	6879      	ldr	r1, [r7, #4]
 8005122:	68b8      	ldr	r0, [r7, #8]
 8005124:	f7ff fb22 	bl	800476c <motion_on_move_end>
}
 8005128:	bf00      	nop
 800512a:	3710      	adds	r7, #16
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}

08005130 <h_led_ctrl>:
static void h_led_ctrl(router_t *r, const uint8_t *f, uint32_t l) {
 8005130:	b580      	push	{r7, lr}
 8005132:	b084      	sub	sp, #16
 8005134:	af00      	add	r7, sp, #0
 8005136:	60f8      	str	r0, [r7, #12]
 8005138:	60b9      	str	r1, [r7, #8]
 800513a:	607a      	str	r2, [r7, #4]
	(void) r;
	led_on_led_ctrl(f, l);
 800513c:	6879      	ldr	r1, [r7, #4]
 800513e:	68b8      	ldr	r0, [r7, #8]
 8005140:	f7fd f88c 	bl	800225c <led_on_led_ctrl>
}
 8005144:	bf00      	nop
 8005146:	3710      	adds	r7, #16
 8005148:	46bd      	mov	sp, r7
 800514a:	bd80      	pop	{r7, pc}

0800514c <h_fpga_status>:
static void h_fpga_status(router_t *r, const uint8_t *f, uint32_t l) {
 800514c:	b480      	push	{r7}
 800514e:	b085      	sub	sp, #20
 8005150:	af00      	add	r7, sp, #0
 8005152:	60f8      	str	r0, [r7, #12]
 8005154:	60b9      	str	r1, [r7, #8]
 8005156:	607a      	str	r2, [r7, #4]
    (void) r;
    (void) f;
    (void) l; /* opcional */
}
 8005158:	bf00      	nop
 800515a:	3714      	adds	r7, #20
 800515c:	46bd      	mov	sp, r7
 800515e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005162:	4770      	bx	lr

08005164 <h_set_origin>:

// Novos serviços: set_origin e encoder_status (telemetria)
static void h_set_origin(router_t *r, const uint8_t *f, uint32_t l) {
 8005164:	b580      	push	{r7, lr}
 8005166:	b084      	sub	sp, #16
 8005168:	af00      	add	r7, sp, #0
 800516a:	60f8      	str	r0, [r7, #12]
 800516c:	60b9      	str	r1, [r7, #8]
 800516e:	607a      	str	r2, [r7, #4]
    (void) r; motion_on_set_origin(f, l);
 8005170:	6879      	ldr	r1, [r7, #4]
 8005172:	68b8      	ldr	r0, [r7, #8]
 8005174:	f7ff fb56 	bl	8004824 <motion_on_set_origin>
}
 8005178:	bf00      	nop
 800517a:	3710      	adds	r7, #16
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}

08005180 <h_encoder_status>:
static void h_encoder_status(router_t *r, const uint8_t *f, uint32_t l) {
 8005180:	b580      	push	{r7, lr}
 8005182:	b084      	sub	sp, #16
 8005184:	af00      	add	r7, sp, #0
 8005186:	60f8      	str	r0, [r7, #12]
 8005188:	60b9      	str	r1, [r7, #8]
 800518a:	607a      	str	r2, [r7, #4]
    (void) r; motion_on_encoder_status(f, l);
 800518c:	6879      	ldr	r1, [r7, #4]
 800518e:	68b8      	ldr	r0, [r7, #8]
 8005190:	f7ff fbf8 	bl	8004984 <motion_on_encoder_status>
}
 8005194:	bf00      	nop
 8005196:	3710      	adds	r7, #16
 8005198:	46bd      	mov	sp, r7
 800519a:	bd80      	pop	{r7, pc}

0800519c <h_set_microsteps>:
static void h_set_microsteps(router_t *r, const uint8_t *f, uint32_t l) {
 800519c:	b580      	push	{r7, lr}
 800519e:	b084      	sub	sp, #16
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	60f8      	str	r0, [r7, #12]
 80051a4:	60b9      	str	r1, [r7, #8]
 80051a6:	607a      	str	r2, [r7, #4]
    (void) r; motion_on_set_microsteps(f, l);
 80051a8:	6879      	ldr	r1, [r7, #4]
 80051aa:	68b8      	ldr	r0, [r7, #8]
 80051ac:	f7ff fcd4 	bl	8004b58 <motion_on_set_microsteps>
}
 80051b0:	bf00      	nop
 80051b2:	3710      	adds	r7, #16
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}

080051b8 <h_test_hello>:

static void h_test_hello(router_t *r, const uint8_t *f, uint32_t l) {
 80051b8:	b480      	push	{r7}
 80051ba:	b085      	sub	sp, #20
 80051bc:	af00      	add	r7, sp, #0
 80051be:	60f8      	str	r0, [r7, #12]
 80051c0:	60b9      	str	r1, [r7, #8]
 80051c2:	607a      	str	r2, [r7, #4]
	(void) r;
	//test_spi_on_hello(f, l);
}
 80051c4:	bf00      	nop
 80051c6:	3714      	adds	r7, #20
 80051c8:	46bd      	mov	sp, r7
 80051ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ce:	4770      	bx	lr

080051d0 <services_register_handlers>:

void services_register_handlers(router_handlers_t *h) {
 80051d0:	b480      	push	{r7}
 80051d2:	b083      	sub	sp, #12
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
	if (!h)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d024      	beq.n	8005228 <services_register_handlers+0x58>
		return;
	h->on_move_queue_add = h_move_queue_add;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	4a14      	ldr	r2, [pc, #80]	@ (8005234 <services_register_handlers+0x64>)
 80051e2:	601a      	str	r2, [r3, #0]
	h->on_move_queue_status = h_move_queue_status;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	4a14      	ldr	r2, [pc, #80]	@ (8005238 <services_register_handlers+0x68>)
 80051e8:	605a      	str	r2, [r3, #4]
	h->on_start_move = h_start_move;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	4a13      	ldr	r2, [pc, #76]	@ (800523c <services_register_handlers+0x6c>)
 80051ee:	609a      	str	r2, [r3, #8]
	h->on_move_home = h_move_home;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	4a13      	ldr	r2, [pc, #76]	@ (8005240 <services_register_handlers+0x70>)
 80051f4:	60da      	str	r2, [r3, #12]
	h->on_move_probe_level = h_move_probe_level;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	4a12      	ldr	r2, [pc, #72]	@ (8005244 <services_register_handlers+0x74>)
 80051fa:	611a      	str	r2, [r3, #16]
	h->on_move_end = h_move_end;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	4a12      	ldr	r2, [pc, #72]	@ (8005248 <services_register_handlers+0x78>)
 8005200:	615a      	str	r2, [r3, #20]
    h->on_led_ctrl = h_led_ctrl;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	4a11      	ldr	r2, [pc, #68]	@ (800524c <services_register_handlers+0x7c>)
 8005206:	619a      	str	r2, [r3, #24]
    h->on_fpga_status = h_fpga_status;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	4a11      	ldr	r2, [pc, #68]	@ (8005250 <services_register_handlers+0x80>)
 800520c:	61da      	str	r2, [r3, #28]
    h->on_set_origin = h_set_origin;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	4a10      	ldr	r2, [pc, #64]	@ (8005254 <services_register_handlers+0x84>)
 8005212:	621a      	str	r2, [r3, #32]
    h->on_encoder_status = h_encoder_status;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	4a10      	ldr	r2, [pc, #64]	@ (8005258 <services_register_handlers+0x88>)
 8005218:	625a      	str	r2, [r3, #36]	@ 0x24
    h->on_set_microsteps = h_set_microsteps;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	4a0f      	ldr	r2, [pc, #60]	@ (800525c <services_register_handlers+0x8c>)
 800521e:	629a      	str	r2, [r3, #40]	@ 0x28
    h->on_test_hello = h_test_hello;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	4a0f      	ldr	r2, [pc, #60]	@ (8005260 <services_register_handlers+0x90>)
 8005224:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005226:	e000      	b.n	800522a <services_register_handlers+0x5a>
		return;
 8005228:	bf00      	nop
}
 800522a:	370c      	adds	r7, #12
 800522c:	46bd      	mov	sp, r7
 800522e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005232:	4770      	bx	lr
 8005234:	08005089 	.word	0x08005089
 8005238:	080050a5 	.word	0x080050a5
 800523c:	080050c1 	.word	0x080050c1
 8005240:	080050dd 	.word	0x080050dd
 8005244:	080050f9 	.word	0x080050f9
 8005248:	08005115 	.word	0x08005115
 800524c:	08005131 	.word	0x08005131
 8005250:	0800514d 	.word	0x0800514d
 8005254:	08005165 	.word	0x08005165
 8005258:	08005181 	.word	0x08005181
 800525c:	0800519d 	.word	0x0800519d
 8005260:	080051b9 	.word	0x080051b9

08005264 <tx_fill_left_zero_right_filler>:
/**
 * @brief Preenche o buffer de TX com 22×0x00 à esquerda e 20×SPI_FILL_BYTE à direita.
 * @param dst Ponteiro para o buffer de TX (tamanho = 42).
 */
static inline void tx_fill_left_zero_right_filler(uint8_t *dst)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b082      	sub	sp, #8
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
    memset(&dst[0],                 0x00,           RESP_LEFT_PAD_LEN); /* 22×0x00  */
 800526c:	2216      	movs	r2, #22
 800526e:	2100      	movs	r1, #0
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f00a fa31 	bl	800f6d8 <memset>
    memset(&dst[RESP_LEFT_PAD_LEN], SPI_FILL_BYTE,  RESP_RIGHT_LEN);    /* 20×filler */
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	3316      	adds	r3, #22
 800527a:	2214      	movs	r2, #20
 800527c:	21a5      	movs	r1, #165	@ 0xa5
 800527e:	4618      	mov	r0, r3
 8005280:	f00a fa2a 	bl	800f6d8 <memset>
}
 8005284:	bf00      	nop
 8005286:	3708      	adds	r7, #8
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}

0800528c <is_fill42>:
 * @param buf Buffer de entrada (tamanho = 42).
 * @param val Valor esperado em todos os bytes.
 * @return 1 se todos os bytes são 'val', 0 caso contrário.
 */
static int is_fill42(const uint8_t *buf, uint8_t val)
{
 800528c:	b480      	push	{r7}
 800528e:	b085      	sub	sp, #20
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
 8005294:	460b      	mov	r3, r1
 8005296:	70fb      	strb	r3, [r7, #3]
    for (uint32_t i = 0; i < APP_SPI_DMA_BUF_LEN; ++i)
 8005298:	2300      	movs	r3, #0
 800529a:	60fb      	str	r3, [r7, #12]
 800529c:	e00b      	b.n	80052b6 <is_fill42+0x2a>
        if (buf[i] != val) return 0;
 800529e:	687a      	ldr	r2, [r7, #4]
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	4413      	add	r3, r2
 80052a4:	781b      	ldrb	r3, [r3, #0]
 80052a6:	78fa      	ldrb	r2, [r7, #3]
 80052a8:	429a      	cmp	r2, r3
 80052aa:	d001      	beq.n	80052b0 <is_fill42+0x24>
 80052ac:	2300      	movs	r3, #0
 80052ae:	e006      	b.n	80052be <is_fill42+0x32>
    for (uint32_t i = 0; i < APP_SPI_DMA_BUF_LEN; ++i)
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	3301      	adds	r3, #1
 80052b4:	60fb      	str	r3, [r7, #12]
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2b29      	cmp	r3, #41	@ 0x29
 80052ba:	d9f0      	bls.n	800529e <is_fill42+0x12>
    return 1;
 80052bc:	2301      	movs	r3, #1
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3714      	adds	r7, #20
 80052c2:	46bd      	mov	sp, r7
 80052c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c8:	4770      	bx	lr

080052ca <find_frame>:
 * @param off  (out) Offset de início do quadro (REQ_HEADER).
 * @param len  (out) Comprimento do quadro (inclui REQ_TAIL).
 * @return 1 se encontrou, 0 caso contrário.
 */
static int find_frame(const uint8_t *buf, uint16_t *off, uint16_t *len)
{
 80052ca:	b480      	push	{r7}
 80052cc:	b087      	sub	sp, #28
 80052ce:	af00      	add	r7, sp, #0
 80052d0:	60f8      	str	r0, [r7, #12]
 80052d2:	60b9      	str	r1, [r7, #8]
 80052d4:	607a      	str	r2, [r7, #4]
    uint16_t i = 0;
 80052d6:	2300      	movs	r3, #0
 80052d8:	82fb      	strh	r3, [r7, #22]
    while (i < APP_SPI_DMA_BUF_LEN && buf[i] != REQ_HEADER) i++;
 80052da:	e002      	b.n	80052e2 <find_frame+0x18>
 80052dc:	8afb      	ldrh	r3, [r7, #22]
 80052de:	3301      	adds	r3, #1
 80052e0:	82fb      	strh	r3, [r7, #22]
 80052e2:	8afb      	ldrh	r3, [r7, #22]
 80052e4:	2b29      	cmp	r3, #41	@ 0x29
 80052e6:	d805      	bhi.n	80052f4 <find_frame+0x2a>
 80052e8:	8afb      	ldrh	r3, [r7, #22]
 80052ea:	68fa      	ldr	r2, [r7, #12]
 80052ec:	4413      	add	r3, r2
 80052ee:	781b      	ldrb	r3, [r3, #0]
 80052f0:	2baa      	cmp	r3, #170	@ 0xaa
 80052f2:	d1f3      	bne.n	80052dc <find_frame+0x12>
    if (i >= APP_SPI_DMA_BUF_LEN) return 0;
 80052f4:	8afb      	ldrh	r3, [r7, #22]
 80052f6:	2b29      	cmp	r3, #41	@ 0x29
 80052f8:	d901      	bls.n	80052fe <find_frame+0x34>
 80052fa:	2300      	movs	r3, #0
 80052fc:	e01d      	b.n	800533a <find_frame+0x70>

    for (uint16_t j = (uint16_t)(i + 1); j < APP_SPI_DMA_BUF_LEN; ++j) {
 80052fe:	8afb      	ldrh	r3, [r7, #22]
 8005300:	3301      	adds	r3, #1
 8005302:	82bb      	strh	r3, [r7, #20]
 8005304:	e015      	b.n	8005332 <find_frame+0x68>
        if (buf[j] == REQ_TAIL) {
 8005306:	8abb      	ldrh	r3, [r7, #20]
 8005308:	68fa      	ldr	r2, [r7, #12]
 800530a:	4413      	add	r3, r2
 800530c:	781b      	ldrb	r3, [r3, #0]
 800530e:	2b55      	cmp	r3, #85	@ 0x55
 8005310:	d10c      	bne.n	800532c <find_frame+0x62>
            *off = i;
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	8afa      	ldrh	r2, [r7, #22]
 8005316:	801a      	strh	r2, [r3, #0]
            *len = (uint16_t)(j - i + 1u);
 8005318:	8aba      	ldrh	r2, [r7, #20]
 800531a:	8afb      	ldrh	r3, [r7, #22]
 800531c:	1ad3      	subs	r3, r2, r3
 800531e:	b29b      	uxth	r3, r3
 8005320:	3301      	adds	r3, #1
 8005322:	b29a      	uxth	r2, r3
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	801a      	strh	r2, [r3, #0]
            return 1;
 8005328:	2301      	movs	r3, #1
 800532a:	e006      	b.n	800533a <find_frame+0x70>
    for (uint16_t j = (uint16_t)(i + 1); j < APP_SPI_DMA_BUF_LEN; ++j) {
 800532c:	8abb      	ldrh	r3, [r7, #20]
 800532e:	3301      	adds	r3, #1
 8005330:	82bb      	strh	r3, [r7, #20]
 8005332:	8abb      	ldrh	r3, [r7, #20]
 8005334:	2b29      	cmp	r3, #41	@ 0x29
 8005336:	d9e6      	bls.n	8005306 <find_frame+0x3c>
        }
    }
    return 0;
 8005338:	2300      	movs	r3, #0
}
 800533a:	4618      	mov	r0, r3
 800533c:	371c      	adds	r7, #28
 800533e:	46bd      	mov	sp, r7
 8005340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005344:	4770      	bx	lr
	...

08005348 <prepare_next_tx>:
 *      * Se n > 20, trunca para os 20 últimos bytes.
 *  - SEM resposta:
 *      * 22×0x00 + 20×SPI_FILL_BYTE (poll).
 */
static void prepare_next_tx(void)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b08e      	sub	sp, #56	@ 0x38
 800534c:	af00      	add	r7, sp, #0
    uint8_t tmp[APP_SPI_DMA_BUF_LEN];
    int n = 0;
 800534e:	2300      	movs	r3, #0
 8005350:	637b      	str	r3, [r7, #52]	@ 0x34

    if (!g_resp_fifo) {
 8005352:	4b21      	ldr	r3, [pc, #132]	@ (80053d8 <prepare_next_tx+0x90>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d106      	bne.n	8005368 <prepare_next_tx+0x20>
        /* Sem fila -> 22×0x00 + 20×filler */
        tx_fill_left_zero_right_filler(g_spi_tx_dma_buf);
 800535a:	4820      	ldr	r0, [pc, #128]	@ (80053dc <prepare_next_tx+0x94>)
 800535c:	f7ff ff82 	bl	8005264 <tx_fill_left_zero_right_filler>
        g_state = APP_SPI_READY;
 8005360:	4b1f      	ldr	r3, [pc, #124]	@ (80053e0 <prepare_next_tx+0x98>)
 8005362:	2200      	movs	r2, #0
 8005364:	701a      	strb	r2, [r3, #0]
 8005366:	e034      	b.n	80053d2 <prepare_next_tx+0x8a>
        return;
    }

    n = resp_fifo_pop(g_resp_fifo, tmp, (int)APP_SPI_DMA_BUF_LEN);
 8005368:	4b1b      	ldr	r3, [pc, #108]	@ (80053d8 <prepare_next_tx+0x90>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	1d39      	adds	r1, r7, #4
 800536e:	222a      	movs	r2, #42	@ 0x2a
 8005370:	4618      	mov	r0, r3
 8005372:	f7fc fa3a 	bl	80017ea <resp_fifo_pop>
 8005376:	6378      	str	r0, [r7, #52]	@ 0x34
    if (n > 0) {
 8005378:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800537a:	2b00      	cmp	r3, #0
 800537c:	dd23      	ble.n	80053c6 <prepare_next_tx+0x7e>
        /* Zera TODO o frame para evitar A5 antes do payload */
        memset(g_spi_tx_dma_buf, 0x00, APP_SPI_DMA_BUF_LEN);
 800537e:	222a      	movs	r2, #42	@ 0x2a
 8005380:	2100      	movs	r1, #0
 8005382:	4816      	ldr	r0, [pc, #88]	@ (80053dc <prepare_next_tx+0x94>)
 8005384:	f00a f9a8 	bl	800f6d8 <memset>

        /* Copia o payload alinhado à direita (trunca se necessário) */
        uint16_t to_copy = (uint16_t)((n > (int)RESP_RIGHT_LEN) ? RESP_RIGHT_LEN : n);
 8005388:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800538a:	2b14      	cmp	r3, #20
 800538c:	dc02      	bgt.n	8005394 <prepare_next_tx+0x4c>
 800538e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005390:	b29b      	uxth	r3, r3
 8005392:	e000      	b.n	8005396 <prepare_next_tx+0x4e>
 8005394:	2314      	movs	r3, #20
 8005396:	867b      	strh	r3, [r7, #50]	@ 0x32
        uint16_t dst_off = (uint16_t)(APP_SPI_DMA_BUF_LEN - to_copy); /* 42 - to_copy */
 8005398:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800539a:	f1c3 032a 	rsb	r3, r3, #42	@ 0x2a
 800539e:	863b      	strh	r3, [r7, #48]	@ 0x30
        uint16_t src_off = (uint16_t)(n - to_copy);                   /* últimos 'to_copy' bytes */
 80053a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053a2:	b29a      	uxth	r2, r3
 80053a4:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80053a6:	1ad3      	subs	r3, r2, r3
 80053a8:	85fb      	strh	r3, [r7, #46]	@ 0x2e

        memcpy(&g_spi_tx_dma_buf[dst_off], &tmp[src_off], to_copy);
 80053aa:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80053ac:	4a0b      	ldr	r2, [pc, #44]	@ (80053dc <prepare_next_tx+0x94>)
 80053ae:	1898      	adds	r0, r3, r2
 80053b0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80053b2:	1d3a      	adds	r2, r7, #4
 80053b4:	4413      	add	r3, r2
 80053b6:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 80053b8:	4619      	mov	r1, r3
 80053ba:	f00a fa18 	bl	800f7ee <memcpy>
        g_state = APP_SPI_PENDING;
 80053be:	4b08      	ldr	r3, [pc, #32]	@ (80053e0 <prepare_next_tx+0x98>)
 80053c0:	2202      	movs	r2, #2
 80053c2:	701a      	strb	r2, [r3, #0]
 80053c4:	e005      	b.n	80053d2 <prepare_next_tx+0x8a>
    } else {
        /* Sem resposta -> mantém contrato visual: 22×0x00 + 20×filler */
        tx_fill_left_zero_right_filler(g_spi_tx_dma_buf);
 80053c6:	4805      	ldr	r0, [pc, #20]	@ (80053dc <prepare_next_tx+0x94>)
 80053c8:	f7ff ff4c 	bl	8005264 <tx_fill_left_zero_right_filler>
        g_state = APP_SPI_READY;
 80053cc:	4b04      	ldr	r3, [pc, #16]	@ (80053e0 <prepare_next_tx+0x98>)
 80053ce:	2200      	movs	r2, #0
 80053d0:	701a      	strb	r2, [r3, #0]
    }
}
 80053d2:	3738      	adds	r7, #56	@ 0x38
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd80      	pop	{r7, pc}
 80053d8:	20000da0 	.word	0x20000da0
 80053dc:	20000dd0 	.word	0x20000dd0
 80053e0:	20000dfc 	.word	0x20000dfc

080053e4 <restart_spi_dma>:
/**
 * @brief Reinicia uma transação SPI por DMA (não bloqueante).
 * Seta g_state=BUSY em caso de sucesso; seta g_spi_error_flag em erro.
 */
static void restart_spi_dma(void)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	af00      	add	r7, sp, #0
    if (HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY) {
 80053e8:	480d      	ldr	r0, [pc, #52]	@ (8005420 <restart_spi_dma+0x3c>)
 80053ea:	f005 fbb9 	bl	800ab60 <HAL_SPI_GetState>
 80053ee:	4603      	mov	r3, r0
 80053f0:	2b01      	cmp	r3, #1
 80053f2:	d003      	beq.n	80053fc <restart_spi_dma+0x18>
        g_spi_error_flag = 1u;
 80053f4:	4b0b      	ldr	r3, [pc, #44]	@ (8005424 <restart_spi_dma+0x40>)
 80053f6:	2201      	movs	r2, #1
 80053f8:	701a      	strb	r2, [r3, #0]
        return;
 80053fa:	e00f      	b.n	800541c <restart_spi_dma+0x38>
    }

    if (HAL_SPI_TransmitReceive_DMA(&hspi2,
 80053fc:	232a      	movs	r3, #42	@ 0x2a
 80053fe:	4a0a      	ldr	r2, [pc, #40]	@ (8005428 <restart_spi_dma+0x44>)
 8005400:	490a      	ldr	r1, [pc, #40]	@ (800542c <restart_spi_dma+0x48>)
 8005402:	4807      	ldr	r0, [pc, #28]	@ (8005420 <restart_spi_dma+0x3c>)
 8005404:	f005 f8ea 	bl	800a5dc <HAL_SPI_TransmitReceive_DMA>
 8005408:	4603      	mov	r3, r0
 800540a:	2b00      	cmp	r3, #0
 800540c:	d003      	beq.n	8005416 <restart_spi_dma+0x32>
            g_spi_tx_dma_buf, g_spi_rx_dma_buf,
            (uint16_t)APP_SPI_DMA_BUF_LEN) != HAL_OK) {
        g_spi_error_flag = 1u;
 800540e:	4b05      	ldr	r3, [pc, #20]	@ (8005424 <restart_spi_dma+0x40>)
 8005410:	2201      	movs	r2, #1
 8005412:	701a      	strb	r2, [r3, #0]
        return;
 8005414:	e002      	b.n	800541c <restart_spi_dma+0x38>
    }

    g_state = APP_SPI_BUSY;
 8005416:	4b06      	ldr	r3, [pc, #24]	@ (8005430 <restart_spi_dma+0x4c>)
 8005418:	2201      	movs	r2, #1
 800541a:	701a      	strb	r2, [r3, #0]
}
 800541c:	bd80      	pop	{r7, pc}
 800541e:	bf00      	nop
 8005420:	20000e40 	.word	0x20000e40
 8005424:	20000dfb 	.word	0x20000dfb
 8005428:	20000da4 	.word	0x20000da4
 800542c:	20000dd0 	.word	0x20000dd0
 8005430:	20000dfc 	.word	0x20000dfc

08005434 <app_init>:
/**
 * @brief Inicializa roteador, fila de respostas e a primeira rodada DMA.
 * Preenche o primeiro TX como 22×0x00 + 20×filler.
 */
void app_init(void)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	af00      	add	r7, sp, #0
    /* Registra serviços no router (o projeto deve prover os handlers) */
    memset(&g_handlers, 0, sizeof g_handlers);
 8005438:	2230      	movs	r2, #48	@ 0x30
 800543a:	2100      	movs	r1, #0
 800543c:	4813      	ldr	r0, [pc, #76]	@ (800548c <app_init+0x58>)
 800543e:	f00a f94b 	bl	800f6d8 <memset>
    services_register_handlers(&g_handlers);
 8005442:	4812      	ldr	r0, [pc, #72]	@ (800548c <app_init+0x58>)
 8005444:	f7ff fec4 	bl	80051d0 <services_register_handlers>

    /* Inicializa serviços (ordem: log/diag, safety, periféricos simples, motion) */
#if LOG_ENABLE
    log_service_init();
 8005448:	f7fd f824 	bl	8002494 <log_service_init>
#endif
    safety_service_init();
 800544c:	f7ff fda4 	bl	8004f98 <safety_service_init>
    led_service_init();
 8005450:	f7fc fe6c 	bl	800212c <led_service_init>
    home_service_init();
 8005454:	f7fc fb7a 	bl	8001b4c <home_service_init>
    probe_service_init();
 8005458:	f7ff fd56 	bl	8004f08 <probe_service_init>
    motion_service_init();
 800545c:	f7fe f974 	bl	8003748 <motion_service_init>

    g_resp_fifo = resp_fifo_create();
 8005460:	f7fc f966 	bl	8001730 <resp_fifo_create>
 8005464:	4603      	mov	r3, r0
 8005466:	4a0a      	ldr	r2, [pc, #40]	@ (8005490 <app_init+0x5c>)
 8005468:	6013      	str	r3, [r2, #0]
    router_init(&g_router, g_resp_fifo, &g_handlers);
 800546a:	4b09      	ldr	r3, [pc, #36]	@ (8005490 <app_init+0x5c>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a07      	ldr	r2, [pc, #28]	@ (800548c <app_init+0x58>)
 8005470:	4619      	mov	r1, r3
 8005472:	4808      	ldr	r0, [pc, #32]	@ (8005494 <app_init+0x60>)
 8005474:	f7fc f9fe 	bl	8001874 <router_init>

    /* Primeiro frame: 22×0x00 + 20×filler (evita A5 no início quando não há resposta) */
    tx_fill_left_zero_right_filler(g_spi_tx_dma_buf);
 8005478:	4807      	ldr	r0, [pc, #28]	@ (8005498 <app_init+0x64>)
 800547a:	f7ff fef3 	bl	8005264 <tx_fill_left_zero_right_filler>

    restart_spi_dma();
 800547e:	f7ff ffb1 	bl	80053e4 <restart_spi_dma>
    g_state = APP_SPI_READY;
 8005482:	4b06      	ldr	r3, [pc, #24]	@ (800549c <app_init+0x68>)
 8005484:	2200      	movs	r2, #0
 8005486:	701a      	strb	r2, [r3, #0]
}
 8005488:	bf00      	nop
 800548a:	bd80      	pop	{r7, pc}
 800548c:	20000d70 	.word	0x20000d70
 8005490:	20000da0 	.word	0x20000da0
 8005494:	20000d28 	.word	0x20000d28
 8005498:	20000dd0 	.word	0x20000dd0
 800549c:	20000dfc 	.word	0x20000dfc

080054a0 <app_poll>:
/**
 * @brief Loop de serviço: processa RX (quando há rodada concluída),
 *        prepara o próximo TX e rearma o DMA.
 */
void app_poll(void)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b082      	sub	sp, #8
 80054a4:	af00      	add	r7, sp, #0
    /* Só processa quando um round DMA foi concluído pelo HAL */
    if (!g_spi_round_done) return;
 80054a6:	4b19      	ldr	r3, [pc, #100]	@ (800550c <app_poll+0x6c>)
 80054a8:	781b      	ldrb	r3, [r3, #0]
 80054aa:	b2db      	uxtb	r3, r3
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d028      	beq.n	8005502 <app_poll+0x62>
    g_spi_round_done = 0u;
 80054b0:	4b16      	ldr	r3, [pc, #88]	@ (800550c <app_poll+0x6c>)
 80054b2:	2200      	movs	r2, #0
 80054b4:	701a      	strb	r2, [r3, #0]

    /* 1) Interpretar o RX atual */
    if (is_fill42(g_spi_rx_dma_buf, SPI_POLL_BYTE)) {
 80054b6:	213c      	movs	r1, #60	@ 0x3c
 80054b8:	4815      	ldr	r0, [pc, #84]	@ (8005510 <app_poll+0x70>)
 80054ba:	f7ff fee7 	bl	800528c <is_fill42>
 80054be:	4603      	mov	r3, r0
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d119      	bne.n	80054f8 <app_poll+0x58>
        /* 42×0x3C => cliente apenas leu respostas; não alimenta router */
    } else {
        /* Tenta extrair [REQ_HEADER ... REQ_TAIL] e empurra para o router */
        uint16_t off = 0, len = 0;
 80054c4:	2300      	movs	r3, #0
 80054c6:	80fb      	strh	r3, [r7, #6]
 80054c8:	2300      	movs	r3, #0
 80054ca:	80bb      	strh	r3, [r7, #4]
        if (find_frame(g_spi_rx_dma_buf, &off, &len)) {
 80054cc:	1d3a      	adds	r2, r7, #4
 80054ce:	1dbb      	adds	r3, r7, #6
 80054d0:	4619      	mov	r1, r3
 80054d2:	480f      	ldr	r0, [pc, #60]	@ (8005510 <app_poll+0x70>)
 80054d4:	f7ff fef9 	bl	80052ca <find_frame>
 80054d8:	4603      	mov	r3, r0
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d009      	beq.n	80054f2 <app_poll+0x52>
            router_feed_bytes(&g_router, &g_spi_rx_dma_buf[off], len);
 80054de:	88fb      	ldrh	r3, [r7, #6]
 80054e0:	461a      	mov	r2, r3
 80054e2:	4b0b      	ldr	r3, [pc, #44]	@ (8005510 <app_poll+0x70>)
 80054e4:	4413      	add	r3, r2
 80054e6:	88ba      	ldrh	r2, [r7, #4]
 80054e8:	4619      	mov	r1, r3
 80054ea:	480a      	ldr	r0, [pc, #40]	@ (8005514 <app_poll+0x74>)
 80054ec:	f7fc fb06 	bl	8001afc <router_feed_bytes>
 80054f0:	e002      	b.n	80054f8 <app_poll+0x58>
        } else {
            /* Quadro inválido/parcial ou outro padrão -> marca erro leve */
            g_spi_error_flag = 1u;
 80054f2:	4b09      	ldr	r3, [pc, #36]	@ (8005518 <app_poll+0x78>)
 80054f4:	2201      	movs	r2, #1
 80054f6:	701a      	strb	r2, [r3, #0]
        }
    }

    /* 2) Preparar TX (resposta à direita ou 22×0x00 + 20×filler) */
    prepare_next_tx();
 80054f8:	f7ff ff26 	bl	8005348 <prepare_next_tx>

    /* 3) Reiniciar DMA para o próximo round */
    restart_spi_dma();
 80054fc:	f7ff ff72 	bl	80053e4 <restart_spi_dma>
 8005500:	e000      	b.n	8005504 <app_poll+0x64>
    if (!g_spi_round_done) return;
 8005502:	bf00      	nop
}
 8005504:	3708      	adds	r7, #8
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}
 800550a:	bf00      	nop
 800550c:	20000dfa 	.word	0x20000dfa
 8005510:	20000da4 	.word	0x20000da4
 8005514:	20000d28 	.word	0x20000d28
 8005518:	20000dfb 	.word	0x20000dfb

0800551c <app_spi_isr_txrx_done>:
/**
 * @brief Callback para “transfer complete” do SPI+DMA.
 * Apenas sinaliza o loop principal (app_poll) via g_spi_round_done.
 */
void app_spi_isr_txrx_done(SPI_HandleTypeDef *hspi)
{
 800551c:	b480      	push	{r7}
 800551e:	b083      	sub	sp, #12
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
    if (!hspi) return;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d008      	beq.n	800553c <app_spi_isr_txrx_done+0x20>
    if (hspi->Instance != APP_SPI_INSTANCE) return;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a07      	ldr	r2, [pc, #28]	@ (800554c <app_spi_isr_txrx_done+0x30>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d105      	bne.n	8005540 <app_spi_isr_txrx_done+0x24>
    g_spi_round_done = 1u;
 8005534:	4b06      	ldr	r3, [pc, #24]	@ (8005550 <app_spi_isr_txrx_done+0x34>)
 8005536:	2201      	movs	r2, #1
 8005538:	701a      	strb	r2, [r3, #0]
 800553a:	e002      	b.n	8005542 <app_spi_isr_txrx_done+0x26>
    if (!hspi) return;
 800553c:	bf00      	nop
 800553e:	e000      	b.n	8005542 <app_spi_isr_txrx_done+0x26>
    if (hspi->Instance != APP_SPI_INSTANCE) return;
 8005540:	bf00      	nop
}
 8005542:	370c      	adds	r7, #12
 8005544:	46bd      	mov	sp, r7
 8005546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554a:	4770      	bx	lr
 800554c:	40003800 	.word	0x40003800
 8005550:	20000dfa 	.word	0x20000dfa

08005554 <app_resp_push>:
 * @param frame Buffer com a resposta (número de bytes = len).
 * @param len   Tamanho da resposta (até 20 bytes). >20 retorna erro.
 * @return 0 em sucesso; PROTO_ERR_ARG ou PROTO_ERR_RANGE em erro.
 */
int app_resp_push(const uint8_t *frame, uint32_t len)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b082      	sub	sp, #8
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
 800555c:	6039      	str	r1, [r7, #0]
    if (!g_resp_fifo || !frame || len == 0u) {
 800555e:	4b0f      	ldr	r3, [pc, #60]	@ (800559c <app_resp_push+0x48>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d005      	beq.n	8005572 <app_resp_push+0x1e>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d002      	beq.n	8005572 <app_resp_push+0x1e>
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d102      	bne.n	8005578 <app_resp_push+0x24>
        return PROTO_ERR_ARG;
 8005572:	f04f 33ff 	mov.w	r3, #4294967295
 8005576:	e00d      	b.n	8005594 <app_resp_push+0x40>
    }
    if (len > RESP_RIGHT_LEN) {
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	2b14      	cmp	r3, #20
 800557c:	d902      	bls.n	8005584 <app_resp_push+0x30>
        return PROTO_ERR_RANGE; /* impede >20 bytes */
 800557e:	f06f 0303 	mvn.w	r3, #3
 8005582:	e007      	b.n	8005594 <app_resp_push+0x40>
    }
    return resp_fifo_push(g_resp_fifo, frame, len);
 8005584:	4b05      	ldr	r3, [pc, #20]	@ (800559c <app_resp_push+0x48>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	683a      	ldr	r2, [r7, #0]
 800558a:	6879      	ldr	r1, [r7, #4]
 800558c:	4618      	mov	r0, r3
 800558e:	f7fc f8d8 	bl	8001742 <resp_fifo_push>
 8005592:	4603      	mov	r3, r0
}
 8005594:	4618      	mov	r0, r3
 8005596:	3708      	adds	r7, #8
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}
 800559c:	20000da0 	.word	0x20000da0

080055a0 <configure_encoder_timer>:
 * A estrutura gerada pelo CubeMX usa TI1 por padrão. Esta função sobrescreve a
 * configuração para capturar os dois canais do encoder, mantendo todos os
 * filtros e *prescalers* em 0/1 para preservar a resolução máxima.
 */
static void configure_encoder_timer(TIM_HandleTypeDef *htim)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b08e      	sub	sp, #56	@ 0x38
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
    TIM_Encoder_InitTypeDef config = {0};
 80055a8:	f107 0314 	add.w	r3, r7, #20
 80055ac:	2224      	movs	r2, #36	@ 0x24
 80055ae:	2100      	movs	r1, #0
 80055b0:	4618      	mov	r0, r3
 80055b2:	f00a f891 	bl	800f6d8 <memset>
    TIM_MasterConfigTypeDef master = {0};
 80055b6:	f107 0308 	add.w	r3, r7, #8
 80055ba:	2200      	movs	r2, #0
 80055bc:	601a      	str	r2, [r3, #0]
 80055be:	605a      	str	r2, [r3, #4]
 80055c0:	609a      	str	r2, [r3, #8]

    config.EncoderMode = TIM_ENCODERMODE_TI12;
 80055c2:	2303      	movs	r3, #3
 80055c4:	617b      	str	r3, [r7, #20]
    config.IC1Polarity = TIM_ICPOLARITY_RISING;
 80055c6:	2300      	movs	r3, #0
 80055c8:	61bb      	str	r3, [r7, #24]
    config.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80055ca:	2301      	movs	r3, #1
 80055cc:	61fb      	str	r3, [r7, #28]
    config.IC1Prescaler = TIM_ICPSC_DIV1;
 80055ce:	2300      	movs	r3, #0
 80055d0:	623b      	str	r3, [r7, #32]
    config.IC1Filter = 0;
 80055d2:	2300      	movs	r3, #0
 80055d4:	627b      	str	r3, [r7, #36]	@ 0x24
    config.IC2Polarity = TIM_ICPOLARITY_RISING;
 80055d6:	2300      	movs	r3, #0
 80055d8:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80055da:	2301      	movs	r3, #1
 80055dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    config.IC2Prescaler = TIM_ICPSC_DIV1;
 80055de:	2300      	movs	r3, #0
 80055e0:	633b      	str	r3, [r7, #48]	@ 0x30
    config.IC2Filter = 0;
 80055e2:	2300      	movs	r3, #0
 80055e4:	637b      	str	r3, [r7, #52]	@ 0x34

    if (HAL_TIM_Encoder_Init(htim, &config) != HAL_OK)
 80055e6:	f107 0314 	add.w	r3, r7, #20
 80055ea:	4619      	mov	r1, r3
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f006 fba5 	bl	800bd3c <HAL_TIM_Encoder_Init>
 80055f2:	4603      	mov	r3, r0
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d001      	beq.n	80055fc <configure_encoder_timer+0x5c>
    {
        Error_Handler();
 80055f8:	f000 fb78 	bl	8005cec <Error_Handler>
    }

    master.MasterOutputTrigger = TIM_TRGO_RESET;
 80055fc:	2300      	movs	r3, #0
 80055fe:	60bb      	str	r3, [r7, #8]
    master.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005600:	2300      	movs	r3, #0
 8005602:	613b      	str	r3, [r7, #16]
    if (HAL_TIMEx_MasterConfigSynchronization(htim, &master) != HAL_OK)
 8005604:	f107 0308 	add.w	r3, r7, #8
 8005608:	4619      	mov	r1, r3
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f008 fa7a 	bl	800db04 <HAL_TIMEx_MasterConfigSynchronization>
 8005610:	4603      	mov	r3, r0
 8005612:	2b00      	cmp	r3, #0
 8005614:	d001      	beq.n	800561a <configure_encoder_timer+0x7a>
    {
        Error_Handler();
 8005616:	f000 fb69 	bl	8005cec <Error_Handler>
    }
}
 800561a:	bf00      	nop
 800561c:	3738      	adds	r7, #56	@ 0x38
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}

08005622 <configure_output>:

/**
 * @brief Ajusta um conjunto de saídas STEP/DIR/ENABLE para modo *push-pull*.
 */
static void configure_output(GPIO_TypeDef *port, uint32_t pins, uint32_t speed)
{
 8005622:	b580      	push	{r7, lr}
 8005624:	b08a      	sub	sp, #40	@ 0x28
 8005626:	af00      	add	r7, sp, #0
 8005628:	60f8      	str	r0, [r7, #12]
 800562a:	60b9      	str	r1, [r7, #8]
 800562c:	607a      	str	r2, [r7, #4]
    GPIO_InitTypeDef init = {0};
 800562e:	f107 0314 	add.w	r3, r7, #20
 8005632:	2200      	movs	r2, #0
 8005634:	601a      	str	r2, [r3, #0]
 8005636:	605a      	str	r2, [r3, #4]
 8005638:	609a      	str	r2, [r3, #8]
 800563a:	60da      	str	r2, [r3, #12]
 800563c:	611a      	str	r2, [r3, #16]
    init.Pin = pins;
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	617b      	str	r3, [r7, #20]
    init.Mode = GPIO_MODE_OUTPUT_PP;
 8005642:	2301      	movs	r3, #1
 8005644:	61bb      	str	r3, [r7, #24]
    init.Pull = GPIO_NOPULL;
 8005646:	2300      	movs	r3, #0
 8005648:	61fb      	str	r3, [r7, #28]
    init.Speed = speed;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(port, &init);
 800564e:	f107 0314 	add.w	r3, r7, #20
 8005652:	4619      	mov	r1, r3
 8005654:	68f8      	ldr	r0, [r7, #12]
 8005656:	f001 fe1d 	bl	8007294 <HAL_GPIO_Init>
}
 800565a:	bf00      	nop
 800565c:	3728      	adds	r7, #40	@ 0x28
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}
	...

08005664 <board_config_apply_motion_gpio>:
//        Error_Handler();
//    }
//}

void board_config_apply_motion_gpio(void)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b086      	sub	sp, #24
 8005668:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef init = {0};
 800566a:	1d3b      	adds	r3, r7, #4
 800566c:	2200      	movs	r2, #0
 800566e:	601a      	str	r2, [r3, #0]
 8005670:	605a      	str	r2, [r3, #4]
 8005672:	609a      	str	r2, [r3, #8]
 8005674:	60da      	str	r2, [r3, #12]
 8005676:	611a      	str	r2, [r3, #16]

    /* Saídas de movimento com tempos de borda compatíveis com STEP/DIR */
    configure_output(GPIOB, GPIO_PIN_4 | GPIO_PIN_0 | GPIO_PIN_1, GPIO_SPEED_FREQ_VERY_HIGH);
 8005678:	2203      	movs	r2, #3
 800567a:	2113      	movs	r1, #19
 800567c:	4825      	ldr	r0, [pc, #148]	@ (8005714 <board_config_apply_motion_gpio+0xb0>)
 800567e:	f7ff ffd0 	bl	8005622 <configure_output>
    configure_output(GPIOB, GPIO_PIN_2, GPIO_SPEED_FREQ_VERY_HIGH);
 8005682:	2203      	movs	r2, #3
 8005684:	2104      	movs	r1, #4
 8005686:	4823      	ldr	r0, [pc, #140]	@ (8005714 <board_config_apply_motion_gpio+0xb0>)
 8005688:	f7ff ffcb 	bl	8005622 <configure_output>
    configure_output(GPIOA, GPIO_PIN_3 | GPIO_PIN_2, GPIO_SPEED_FREQ_VERY_HIGH);
 800568c:	2203      	movs	r2, #3
 800568e:	210c      	movs	r1, #12
 8005690:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005694:	f7ff ffc5 	bl	8005622 <configure_output>
    configure_output(GPIOC, GPIO_PIN_4 | GPIO_PIN_5, GPIO_SPEED_FREQ_LOW);
 8005698:	2200      	movs	r2, #0
 800569a:	2130      	movs	r1, #48	@ 0x30
 800569c:	481e      	ldr	r0, [pc, #120]	@ (8005718 <board_config_apply_motion_gpio+0xb4>)
 800569e:	f7ff ffc0 	bl	8005622 <configure_output>
    configure_output(GPIOD, GPIO_PIN_14, GPIO_SPEED_FREQ_LOW);
 80056a2:	2200      	movs	r2, #0
 80056a4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80056a8:	481c      	ldr	r0, [pc, #112]	@ (800571c <board_config_apply_motion_gpio+0xb8>)
 80056aa:	f7ff ffba 	bl	8005622 <configure_output>

    /* Estados seguros antes de habilitar drivers: ENA alto, STEP/DIR baixos */
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4 | GPIO_PIN_2 | GPIO_PIN_0 | GPIO_PIN_1, GPIO_PIN_RESET);
 80056ae:	2200      	movs	r2, #0
 80056b0:	2117      	movs	r1, #23
 80056b2:	4818      	ldr	r0, [pc, #96]	@ (8005714 <board_config_apply_motion_gpio+0xb0>)
 80056b4:	f002 f89a 	bl	80077ec <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3 | GPIO_PIN_2, GPIO_PIN_RESET);
 80056b8:	2200      	movs	r2, #0
 80056ba:	210c      	movs	r1, #12
 80056bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80056c0:	f002 f894 	bl	80077ec <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);     /* EN_X desabilitado (alto) */
 80056c4:	2201      	movs	r2, #1
 80056c6:	2110      	movs	r1, #16
 80056c8:	4813      	ldr	r0, [pc, #76]	@ (8005718 <board_config_apply_motion_gpio+0xb4>)
 80056ca:	f002 f88f 	bl	80077ec <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);   /* EN_Y habilitado (baixo) */
 80056ce:	2200      	movs	r2, #0
 80056d0:	2120      	movs	r1, #32
 80056d2:	4811      	ldr	r0, [pc, #68]	@ (8005718 <board_config_apply_motion_gpio+0xb4>)
 80056d4:	f002 f88a 	bl	80077ec <HAL_GPIO_WritePin>
    // EN_Z (PD14) ativo em nível baixo por solicitação: inicia habilitado
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80056d8:	2200      	movs	r2, #0
 80056da:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80056de:	480f      	ldr	r0, [pc, #60]	@ (800571c <board_config_apply_motion_gpio+0xb8>)
 80056e0:	f002 f884 	bl	80077ec <HAL_GPIO_WritePin>

    /* Entradas de segurança em *pull-up* com detecção de bordas de ambos os sentidos */
    init.Mode = GPIO_MODE_IT_RISING_FALLING;
 80056e4:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80056e8:	60bb      	str	r3, [r7, #8]
    init.Pull = GPIO_PULLUP;
 80056ea:	2301      	movs	r3, #1
 80056ec:	60fb      	str	r3, [r7, #12]
     */
#if 0
    init.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2;  /* PC0/PC1/PC2 como EXTI */
    HAL_GPIO_Init(GPIOC, &init);
#else
    init.Pin = GPIO_PIN_1;                             /* Somente PC1 como EXTI */
 80056ee:	2302      	movs	r3, #2
 80056f0:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(GPIOC, &init);
 80056f2:	1d3b      	adds	r3, r7, #4
 80056f4:	4619      	mov	r1, r3
 80056f6:	4808      	ldr	r0, [pc, #32]	@ (8005718 <board_config_apply_motion_gpio+0xb4>)
 80056f8:	f001 fdcc 	bl	8007294 <HAL_GPIO_Init>
#endif

    init.Pin = GPIO_PIN_13;                            /* EXTI do PC13 permanece */
 80056fc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005700:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(GPIOC, &init);
 8005702:	1d3b      	adds	r3, r7, #4
 8005704:	4619      	mov	r1, r3
 8005706:	4804      	ldr	r0, [pc, #16]	@ (8005718 <board_config_apply_motion_gpio+0xb4>)
 8005708:	f001 fdc4 	bl	8007294 <HAL_GPIO_Init>
}
 800570c:	bf00      	nop
 800570e:	3718      	adds	r7, #24
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}
 8005714:	48000400 	.word	0x48000400
 8005718:	48000800 	.word	0x48000800
 800571c:	48000c00 	.word	0x48000c00

08005720 <board_config_force_encoder_quadrature>:

void board_config_force_encoder_quadrature(void)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	af00      	add	r7, sp, #0
    configure_encoder_timer(&htim3);
 8005724:	4803      	ldr	r0, [pc, #12]	@ (8005734 <board_config_force_encoder_quadrature+0x14>)
 8005726:	f7ff ff3b 	bl	80055a0 <configure_encoder_timer>
    configure_encoder_timer(&htim5);
 800572a:	4803      	ldr	r0, [pc, #12]	@ (8005738 <board_config_force_encoder_quadrature+0x18>)
 800572c:	f7ff ff38 	bl	80055a0 <configure_encoder_timer>
}
 8005730:	bf00      	nop
 8005732:	bd80      	pop	{r7, pc}
 8005734:	20000f38 	.word	0x20000f38
 8005738:	20000f84 	.word	0x20000f84

0800573c <board_config_apply_interrupt_priorities>:

void board_config_apply_interrupt_priorities(void)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	af00      	add	r7, sp, #0
    /* EXTI de segurança: interrupções mais altas para abortar movimento */
    HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8005740:	2200      	movs	r2, #0
 8005742:	2100      	movs	r1, #0
 8005744:	2006      	movs	r0, #6
 8005746:	f001 fa0f 	bl	8006b68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800574a:	2006      	movs	r0, #6
 800574c:	f001 fa38 	bl	8006bc0 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8005750:	2200      	movs	r2, #0
 8005752:	2100      	movs	r1, #0
 8005754:	2007      	movs	r0, #7
 8005756:	f001 fa07 	bl	8006b68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800575a:	2007      	movs	r0, #7
 800575c:	f001 fa30 	bl	8006bc0 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8005760:	2200      	movs	r2, #0
 8005762:	2100      	movs	r1, #0
 8005764:	2008      	movs	r0, #8
 8005766:	f001 f9ff 	bl	8006b68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800576a:	2008      	movs	r0, #8
 800576c:	f001 fa28 	bl	8006bc0 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8005770:	2200      	movs	r2, #0
 8005772:	2100      	movs	r1, #0
 8005774:	2028      	movs	r0, #40	@ 0x28
 8005776:	f001 f9f7 	bl	8006b68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800577a:	2028      	movs	r0, #40	@ 0x28
 800577c:	f001 fa20 	bl	8006bc0 <HAL_NVIC_EnableIRQ>

    /* Temporização do núcleo de movimento (TIM6/TIM7) e transporte SPI */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8005780:	2200      	movs	r2, #0
 8005782:	2101      	movs	r1, #1
 8005784:	2036      	movs	r0, #54	@ 0x36
 8005786:	f001 f9ef 	bl	8006b68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800578a:	2036      	movs	r0, #54	@ 0x36
 800578c:	f001 fa18 	bl	8006bc0 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 2, 0);
 8005790:	2200      	movs	r2, #0
 8005792:	2102      	movs	r1, #2
 8005794:	200e      	movs	r0, #14
 8005796:	f001 f9e7 	bl	8006b68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800579a:	200e      	movs	r0, #14
 800579c:	f001 fa10 	bl	8006bc0 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 2, 0);
 80057a0:	2200      	movs	r2, #0
 80057a2:	2102      	movs	r1, #2
 80057a4:	200f      	movs	r0, #15
 80057a6:	f001 f9df 	bl	8006b68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80057aa:	200f      	movs	r0, #15
 80057ac:	f001 fa08 	bl	8006bc0 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(TIM7_IRQn, 3, 0);
 80057b0:	2200      	movs	r2, #0
 80057b2:	2103      	movs	r1, #3
 80057b4:	2037      	movs	r0, #55	@ 0x37
 80057b6:	f001 f9d7 	bl	8006b68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80057ba:	2037      	movs	r0, #55	@ 0x37
 80057bc:	f001 fa00 	bl	8006bc0 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(USART1_IRQn, 4, 0);
 80057c0:	2200      	movs	r2, #0
 80057c2:	2104      	movs	r1, #4
 80057c4:	2025      	movs	r0, #37	@ 0x25
 80057c6:	f001 f9cf 	bl	8006b68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80057ca:	2025      	movs	r0, #37	@ 0x25
 80057cc:	f001 f9f8 	bl	8006bc0 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 80057d0:	2200      	movs	r2, #0
 80057d2:	2105      	movs	r1, #5
 80057d4:	2024      	movs	r0, #36	@ 0x24
 80057d6:	f001 f9c7 	bl	8006b68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80057da:	2024      	movs	r0, #36	@ 0x24
 80057dc:	f001 f9f0 	bl	8006bc0 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 6, 0);
 80057e0:	2200      	movs	r2, #0
 80057e2:	2106      	movs	r1, #6
 80057e4:	2018      	movs	r0, #24
 80057e6:	f001 f9bf 	bl	8006b68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80057ea:	2018      	movs	r0, #24
 80057ec:	f001 f9e8 	bl	8006bc0 <HAL_NVIC_EnableIRQ>
}
 80057f0:	bf00      	nop
 80057f2:	bd80      	pop	{r7, pc}

080057f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b082      	sub	sp, #8
 80057f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80057fa:	4b10      	ldr	r3, [pc, #64]	@ (800583c <MX_DMA_Init+0x48>)
 80057fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80057fe:	4a0f      	ldr	r2, [pc, #60]	@ (800583c <MX_DMA_Init+0x48>)
 8005800:	f043 0301 	orr.w	r3, r3, #1
 8005804:	6493      	str	r3, [r2, #72]	@ 0x48
 8005806:	4b0d      	ldr	r3, [pc, #52]	@ (800583c <MX_DMA_Init+0x48>)
 8005808:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800580a:	f003 0301 	and.w	r3, r3, #1
 800580e:	607b      	str	r3, [r7, #4]
 8005810:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8005812:	2200      	movs	r2, #0
 8005814:	2100      	movs	r1, #0
 8005816:	200e      	movs	r0, #14
 8005818:	f001 f9a6 	bl	8006b68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800581c:	200e      	movs	r0, #14
 800581e:	f001 f9cf 	bl	8006bc0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8005822:	2200      	movs	r2, #0
 8005824:	2100      	movs	r1, #0
 8005826:	200f      	movs	r0, #15
 8005828:	f001 f99e 	bl	8006b68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800582c:	200f      	movs	r0, #15
 800582e:	f001 f9c7 	bl	8006bc0 <HAL_NVIC_EnableIRQ>

}
 8005832:	bf00      	nop
 8005834:	3708      	adds	r7, #8
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}
 800583a:	bf00      	nop
 800583c:	40021000 	.word	0x40021000

08005840 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b08c      	sub	sp, #48	@ 0x30
 8005844:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005846:	f107 031c 	add.w	r3, r7, #28
 800584a:	2200      	movs	r2, #0
 800584c:	601a      	str	r2, [r3, #0]
 800584e:	605a      	str	r2, [r3, #4]
 8005850:	609a      	str	r2, [r3, #8]
 8005852:	60da      	str	r2, [r3, #12]
 8005854:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005856:	4b4d      	ldr	r3, [pc, #308]	@ (800598c <MX_GPIO_Init+0x14c>)
 8005858:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800585a:	4a4c      	ldr	r2, [pc, #304]	@ (800598c <MX_GPIO_Init+0x14c>)
 800585c:	f043 0310 	orr.w	r3, r3, #16
 8005860:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005862:	4b4a      	ldr	r3, [pc, #296]	@ (800598c <MX_GPIO_Init+0x14c>)
 8005864:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005866:	f003 0310 	and.w	r3, r3, #16
 800586a:	61bb      	str	r3, [r7, #24]
 800586c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800586e:	4b47      	ldr	r3, [pc, #284]	@ (800598c <MX_GPIO_Init+0x14c>)
 8005870:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005872:	4a46      	ldr	r2, [pc, #280]	@ (800598c <MX_GPIO_Init+0x14c>)
 8005874:	f043 0304 	orr.w	r3, r3, #4
 8005878:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800587a:	4b44      	ldr	r3, [pc, #272]	@ (800598c <MX_GPIO_Init+0x14c>)
 800587c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800587e:	f003 0304 	and.w	r3, r3, #4
 8005882:	617b      	str	r3, [r7, #20]
 8005884:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005886:	4b41      	ldr	r3, [pc, #260]	@ (800598c <MX_GPIO_Init+0x14c>)
 8005888:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800588a:	4a40      	ldr	r2, [pc, #256]	@ (800598c <MX_GPIO_Init+0x14c>)
 800588c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005890:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005892:	4b3e      	ldr	r3, [pc, #248]	@ (800598c <MX_GPIO_Init+0x14c>)
 8005894:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005896:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800589a:	613b      	str	r3, [r7, #16]
 800589c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800589e:	4b3b      	ldr	r3, [pc, #236]	@ (800598c <MX_GPIO_Init+0x14c>)
 80058a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058a2:	4a3a      	ldr	r2, [pc, #232]	@ (800598c <MX_GPIO_Init+0x14c>)
 80058a4:	f043 0301 	orr.w	r3, r3, #1
 80058a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80058aa:	4b38      	ldr	r3, [pc, #224]	@ (800598c <MX_GPIO_Init+0x14c>)
 80058ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058ae:	f003 0301 	and.w	r3, r3, #1
 80058b2:	60fb      	str	r3, [r7, #12]
 80058b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80058b6:	4b35      	ldr	r3, [pc, #212]	@ (800598c <MX_GPIO_Init+0x14c>)
 80058b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058ba:	4a34      	ldr	r2, [pc, #208]	@ (800598c <MX_GPIO_Init+0x14c>)
 80058bc:	f043 0302 	orr.w	r3, r3, #2
 80058c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80058c2:	4b32      	ldr	r3, [pc, #200]	@ (800598c <MX_GPIO_Init+0x14c>)
 80058c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058c6:	f003 0302 	and.w	r3, r3, #2
 80058ca:	60bb      	str	r3, [r7, #8]
 80058cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80058ce:	4b2f      	ldr	r3, [pc, #188]	@ (800598c <MX_GPIO_Init+0x14c>)
 80058d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058d2:	4a2e      	ldr	r2, [pc, #184]	@ (800598c <MX_GPIO_Init+0x14c>)
 80058d4:	f043 0308 	orr.w	r3, r3, #8
 80058d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80058da:	4b2c      	ldr	r3, [pc, #176]	@ (800598c <MX_GPIO_Init+0x14c>)
 80058dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058de:	f003 0308 	and.w	r3, r3, #8
 80058e2:	607b      	str	r3, [r7, #4]
 80058e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE7 PE8 PE9
                           PE10 PE11 PE12 PE13
                           PE14 PE15 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80058e6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80058ea:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80058ec:	2303      	movs	r3, #3
 80058ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058f0:	2300      	movs	r3, #0
 80058f2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80058f4:	f107 031c 	add.w	r3, r7, #28
 80058f8:	4619      	mov	r1, r3
 80058fa:	4825      	ldr	r0, [pc, #148]	@ (8005990 <MX_GPIO_Init+0x150>)
 80058fc:	f001 fcca 	bl	8007294 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 PC1
                           PC3 PC4 PC5 PC6
                           PC7 PC8 PC9 PC10
                           PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_1
 8005900:	f64f 73fa 	movw	r3, #65530	@ 0xfffa
 8005904:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005906:	2303      	movs	r3, #3
 8005908:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800590a:	2300      	movs	r3, #0
 800590c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800590e:	f107 031c 	add.w	r3, r7, #28
 8005912:	4619      	mov	r1, r3
 8005914:	481f      	ldr	r0, [pc, #124]	@ (8005994 <MX_GPIO_Init+0x154>)
 8005916:	f001 fcbd 	bl	8007294 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800591a:	2303      	movs	r3, #3
 800591c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800591e:	2303      	movs	r3, #3
 8005920:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005922:	2300      	movs	r3, #0
 8005924:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8005926:	f107 031c 	add.w	r3, r7, #28
 800592a:	4619      	mov	r1, r3
 800592c:	481a      	ldr	r0, [pc, #104]	@ (8005998 <MX_GPIO_Init+0x158>)
 800592e:	f001 fcb1 	bl	8007294 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 PA5 PA8
                           PA9 PA10 PA11 PA12
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8
 8005932:	f649 7338 	movw	r3, #40760	@ 0x9f38
 8005936:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005938:	2303      	movs	r3, #3
 800593a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800593c:	2300      	movs	r3, #0
 800593e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005940:	f107 031c 	add.w	r3, r7, #28
 8005944:	4619      	mov	r1, r3
 8005946:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800594a:	f001 fca3 	bl	8007294 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB14 PB15
                           PB4 PB5 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 800594e:	f64d 7337 	movw	r3, #57143	@ 0xdf37
 8005952:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005954:	2303      	movs	r3, #3
 8005956:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005958:	2300      	movs	r3, #0
 800595a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800595c:	f107 031c 	add.w	r3, r7, #28
 8005960:	4619      	mov	r1, r3
 8005962:	480e      	ldr	r0, [pc, #56]	@ (800599c <MX_GPIO_Init+0x15c>)
 8005964:	f001 fc96 	bl	8007294 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15
                           PD2 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8005968:	f64f 73e4 	movw	r3, #65508	@ 0xffe4
 800596c:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800596e:	2303      	movs	r3, #3
 8005970:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005972:	2300      	movs	r3, #0
 8005974:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005976:	f107 031c 	add.w	r3, r7, #28
 800597a:	4619      	mov	r1, r3
 800597c:	4808      	ldr	r0, [pc, #32]	@ (80059a0 <MX_GPIO_Init+0x160>)
 800597e:	f001 fc89 	bl	8007294 <HAL_GPIO_Init>

}
 8005982:	bf00      	nop
 8005984:	3730      	adds	r7, #48	@ 0x30
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}
 800598a:	bf00      	nop
 800598c:	40021000 	.word	0x40021000
 8005990:	48001000 	.word	0x48001000
 8005994:	48000800 	.word	0x48000800
 8005998:	48001c00 	.word	0x48001c00
 800599c:	48000400 	.word	0x48000400
 80059a0:	48000c00 	.word	0x48000c00

080059a4 <MX_LPTIM1_Init>:

LPTIM_HandleTypeDef hlptim1;

/* LPTIM1 init function */
void MX_LPTIM1_Init(void)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 80059a8:	4b16      	ldr	r3, [pc, #88]	@ (8005a04 <MX_LPTIM1_Init+0x60>)
 80059aa:	4a17      	ldr	r2, [pc, #92]	@ (8005a08 <MX_LPTIM1_Init+0x64>)
 80059ac:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 80059ae:	4b15      	ldr	r3, [pc, #84]	@ (8005a04 <MX_LPTIM1_Init+0x60>)
 80059b0:	2200      	movs	r2, #0
 80059b2:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 80059b4:	4b13      	ldr	r3, [pc, #76]	@ (8005a04 <MX_LPTIM1_Init+0x60>)
 80059b6:	2200      	movs	r2, #0
 80059b8:	609a      	str	r2, [r3, #8]
  hlptim1.Init.UltraLowPowerClock.Polarity = LPTIM_CLOCKPOLARITY_RISING;
 80059ba:	4b12      	ldr	r3, [pc, #72]	@ (8005a04 <MX_LPTIM1_Init+0x60>)
 80059bc:	2200      	movs	r2, #0
 80059be:	60da      	str	r2, [r3, #12]
  hlptim1.Init.UltraLowPowerClock.SampleTime = LPTIM_CLOCKSAMPLETIME_DIRECTTRANSITION;
 80059c0:	4b10      	ldr	r3, [pc, #64]	@ (8005a04 <MX_LPTIM1_Init+0x60>)
 80059c2:	2200      	movs	r2, #0
 80059c4:	611a      	str	r2, [r3, #16]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 80059c6:	4b0f      	ldr	r3, [pc, #60]	@ (8005a04 <MX_LPTIM1_Init+0x60>)
 80059c8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80059cc:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 80059ce:	4b0d      	ldr	r3, [pc, #52]	@ (8005a04 <MX_LPTIM1_Init+0x60>)
 80059d0:	2200      	movs	r2, #0
 80059d2:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 80059d4:	4b0b      	ldr	r3, [pc, #44]	@ (8005a04 <MX_LPTIM1_Init+0x60>)
 80059d6:	2200      	movs	r2, #0
 80059d8:	625a      	str	r2, [r3, #36]	@ 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_EXTERNAL;
 80059da:	4b0a      	ldr	r3, [pc, #40]	@ (8005a04 <MX_LPTIM1_Init+0x60>)
 80059dc:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80059e0:	629a      	str	r2, [r3, #40]	@ 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 80059e2:	4b08      	ldr	r3, [pc, #32]	@ (8005a04 <MX_LPTIM1_Init+0x60>)
 80059e4:	2200      	movs	r2, #0
 80059e6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 80059e8:	4b06      	ldr	r3, [pc, #24]	@ (8005a04 <MX_LPTIM1_Init+0x60>)
 80059ea:	2200      	movs	r2, #0
 80059ec:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 80059ee:	4805      	ldr	r0, [pc, #20]	@ (8005a04 <MX_LPTIM1_Init+0x60>)
 80059f0:	f001 ff62 	bl	80078b8 <HAL_LPTIM_Init>
 80059f4:	4603      	mov	r3, r0
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d001      	beq.n	80059fe <MX_LPTIM1_Init+0x5a>
  {
    Error_Handler();
 80059fa:	f000 f977 	bl	8005cec <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 80059fe:	bf00      	nop
 8005a00:	bd80      	pop	{r7, pc}
 8005a02:	bf00      	nop
 8005a04:	20000e00 	.word	0x20000e00
 8005a08:	40007c00 	.word	0x40007c00

08005a0c <HAL_LPTIM_MspInit>:

void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* lptimHandle)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b0ac      	sub	sp, #176	@ 0xb0
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a14:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8005a18:	2200      	movs	r2, #0
 8005a1a:	601a      	str	r2, [r3, #0]
 8005a1c:	605a      	str	r2, [r3, #4]
 8005a1e:	609a      	str	r2, [r3, #8]
 8005a20:	60da      	str	r2, [r3, #12]
 8005a22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005a24:	f107 0314 	add.w	r3, r7, #20
 8005a28:	2288      	movs	r2, #136	@ 0x88
 8005a2a:	2100      	movs	r1, #0
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	f009 fe53 	bl	800f6d8 <memset>
  if(lptimHandle->Instance==LPTIM1)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a25      	ldr	r2, [pc, #148]	@ (8005acc <HAL_LPTIM_MspInit+0xc0>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d143      	bne.n	8005ac4 <HAL_LPTIM_MspInit+0xb8>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8005a3c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005a40:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_PCLK;
 8005a42:	2300      	movs	r3, #0
 8005a44:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005a46:	f107 0314 	add.w	r3, r7, #20
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f003 fc50 	bl	80092f0 <HAL_RCCEx_PeriphCLKConfig>
 8005a50:	4603      	mov	r3, r0
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d001      	beq.n	8005a5a <HAL_LPTIM_MspInit+0x4e>
    {
      Error_Handler();
 8005a56:	f000 f949 	bl	8005cec <Error_Handler>
    }

    /* LPTIM1 clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8005a5a:	4b1d      	ldr	r3, [pc, #116]	@ (8005ad0 <HAL_LPTIM_MspInit+0xc4>)
 8005a5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a5e:	4a1c      	ldr	r2, [pc, #112]	@ (8005ad0 <HAL_LPTIM_MspInit+0xc4>)
 8005a60:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005a64:	6593      	str	r3, [r2, #88]	@ 0x58
 8005a66:	4b1a      	ldr	r3, [pc, #104]	@ (8005ad0 <HAL_LPTIM_MspInit+0xc4>)
 8005a68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a6a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005a6e:	613b      	str	r3, [r7, #16]
 8005a70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005a72:	4b17      	ldr	r3, [pc, #92]	@ (8005ad0 <HAL_LPTIM_MspInit+0xc4>)
 8005a74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a76:	4a16      	ldr	r2, [pc, #88]	@ (8005ad0 <HAL_LPTIM_MspInit+0xc4>)
 8005a78:	f043 0304 	orr.w	r3, r3, #4
 8005a7c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005a7e:	4b14      	ldr	r3, [pc, #80]	@ (8005ad0 <HAL_LPTIM_MspInit+0xc4>)
 8005a80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a82:	f003 0304 	and.w	r3, r3, #4
 8005a86:	60fb      	str	r3, [r7, #12]
 8005a88:	68fb      	ldr	r3, [r7, #12]
    /**LPTIM1 GPIO Configuration
    PC0     ------> LPTIM1_IN1
    PC2     ------> LPTIM1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 8005a8a:	2305      	movs	r3, #5
 8005a8c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a90:	2302      	movs	r3, #2
 8005a92:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a96:	2300      	movs	r3, #0
 8005a98:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF1_LPTIM1;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005aa8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8005aac:	4619      	mov	r1, r3
 8005aae:	4809      	ldr	r0, [pc, #36]	@ (8005ad4 <HAL_LPTIM_MspInit+0xc8>)
 8005ab0:	f001 fbf0 	bl	8007294 <HAL_GPIO_Init>

    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	2100      	movs	r1, #0
 8005ab8:	2041      	movs	r0, #65	@ 0x41
 8005aba:	f001 f855 	bl	8006b68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 8005abe:	2041      	movs	r0, #65	@ 0x41
 8005ac0:	f001 f87e 	bl	8006bc0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }
}
 8005ac4:	bf00      	nop
 8005ac6:	37b0      	adds	r7, #176	@ 0xb0
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}
 8005acc:	40007c00 	.word	0x40007c00
 8005ad0:	40021000 	.word	0x40021000
 8005ad4:	48000800 	.word	0x48000800

08005ad8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005adc:	f000 fedf 	bl	800689e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005ae0:	f000 f82a 	bl	8005b38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005ae4:	f7ff feac 	bl	8005840 <MX_GPIO_Init>
  MX_DMA_Init();
 8005ae8:	f7ff fe84 	bl	80057f4 <MX_DMA_Init>
  MX_SPI2_Init();
 8005aec:	f000 f922 	bl	8005d34 <MX_SPI2_Init>
  MX_TIM6_Init();
 8005af0:	f000 fbf0 	bl	80062d4 <MX_TIM6_Init>
  MX_TIM5_Init();
 8005af4:	f000 fb98 	bl	8006228 <MX_TIM5_Init>
  MX_TIM7_Init();
 8005af8:	f000 fc22 	bl	8006340 <MX_TIM7_Init>
  MX_TIM3_Init();
 8005afc:	f000 fb3e 	bl	800617c <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8005b00:	f000 fe16 	bl	8006730 <MX_USART1_UART_Init>
  MX_TIM15_Init();
 8005b04:	f000 fc52 	bl	80063ac <MX_TIM15_Init>
  MX_LPTIM1_Init();
 8005b08:	f7ff ff4c 	bl	80059a4 <MX_LPTIM1_Init>
  /* USER CODE BEGIN 2 */
    board_config_apply_motion_gpio();
 8005b0c:	f7ff fdaa 	bl	8005664 <board_config_apply_motion_gpio>
    board_config_force_encoder_quadrature();
 8005b10:	f7ff fe06 	bl	8005720 <board_config_force_encoder_quadrature>
    board_config_apply_interrupt_priorities();
 8005b14:	f7ff fe12 	bl	800573c <board_config_apply_interrupt_priorities>
    app_init();
 8005b18:	f7ff fc8c 	bl	8005434 <app_init>
    // Inicia timers do laço de passos (TIM6) e controle/status (TIM7)
    HAL_TIM_Base_Start_IT(&htim6);
 8005b1c:	4804      	ldr	r0, [pc, #16]	@ (8005b30 <main+0x58>)
 8005b1e:	f005 fbe1 	bl	800b2e4 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(&htim7);
 8005b22:	4804      	ldr	r0, [pc, #16]	@ (8005b34 <main+0x5c>)
 8005b24:	f005 fbde 	bl	800b2e4 <HAL_TIM_Base_Start_IT>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    //printf("oioioioioioi2\r\n");
    //HAL_Delay(1000);
    app_poll();
 8005b28:	f7ff fcba 	bl	80054a0 <app_poll>
 8005b2c:	e7fc      	b.n	8005b28 <main+0x50>
 8005b2e:	bf00      	nop
 8005b30:	20000fd0 	.word	0x20000fd0
 8005b34:	2000101c 	.word	0x2000101c

08005b38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b096      	sub	sp, #88	@ 0x58
 8005b3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005b3e:	f107 0314 	add.w	r3, r7, #20
 8005b42:	2244      	movs	r2, #68	@ 0x44
 8005b44:	2100      	movs	r1, #0
 8005b46:	4618      	mov	r0, r3
 8005b48:	f009 fdc6 	bl	800f6d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005b4c:	463b      	mov	r3, r7
 8005b4e:	2200      	movs	r2, #0
 8005b50:	601a      	str	r2, [r3, #0]
 8005b52:	605a      	str	r2, [r3, #4]
 8005b54:	609a      	str	r2, [r3, #8]
 8005b56:	60da      	str	r2, [r3, #12]
 8005b58:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8005b5a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8005b5e:	f002 fb9f 	bl	80082a0 <HAL_PWREx_ControlVoltageScaling>
 8005b62:	4603      	mov	r3, r0
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d001      	beq.n	8005b6c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8005b68:	f000 f8c0 	bl	8005cec <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8005b6c:	2310      	movs	r3, #16
 8005b6e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8005b70:	2301      	movs	r3, #1
 8005b72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8005b74:	2300      	movs	r3, #0
 8005b76:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8005b78:	2360      	movs	r3, #96	@ 0x60
 8005b7a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005b7c:	2302      	movs	r3, #2
 8005b7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8005b80:	2301      	movs	r3, #1
 8005b82:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8005b84:	2301      	movs	r3, #1
 8005b86:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8005b88:	2328      	movs	r3, #40	@ 0x28
 8005b8a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8005b8c:	2307      	movs	r3, #7
 8005b8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8005b90:	2302      	movs	r3, #2
 8005b92:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8005b94:	2302      	movs	r3, #2
 8005b96:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005b98:	f107 0314 	add.w	r3, r7, #20
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	f002 fbe1 	bl	8008364 <HAL_RCC_OscConfig>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d001      	beq.n	8005bac <SystemClock_Config+0x74>
  {
    Error_Handler();
 8005ba8:	f000 f8a0 	bl	8005cec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005bac:	230f      	movs	r3, #15
 8005bae:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005bb0:	2303      	movs	r3, #3
 8005bb2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005bb8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005bbc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8005bc2:	463b      	mov	r3, r7
 8005bc4:	2104      	movs	r1, #4
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f003 f8ce 	bl	8008d68 <HAL_RCC_ClockConfig>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d001      	beq.n	8005bd6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8005bd2:	f000 f88b 	bl	8005cec <Error_Handler>
  }
}
 8005bd6:	bf00      	nop
 8005bd8:	3758      	adds	r7, #88	@ 0x58
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}

08005bde <HAL_SPI_TxRxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005bde:	b580      	push	{r7, lr}
 8005be0:	b082      	sub	sp, #8
 8005be2:	af00      	add	r7, sp, #0
 8005be4:	6078      	str	r0, [r7, #4]
    app_spi_isr_txrx_done(hspi);
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f7ff fc98 	bl	800551c <app_spi_isr_txrx_done>
}
 8005bec:	bf00      	nop
 8005bee:	3708      	adds	r7, #8
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd80      	pop	{r7, pc}

08005bf4 <HAL_SPI_ErrorCallback>:

void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b082      	sub	sp, #8
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
    if (hspi == NULL) return;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d013      	beq.n	8005c2a <HAL_SPI_ErrorCallback+0x36>
    if (hspi->Instance != APP_SPI_INSTANCE) return;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a0c      	ldr	r2, [pc, #48]	@ (8005c38 <HAL_SPI_ErrorCallback+0x44>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d110      	bne.n	8005c2e <HAL_SPI_ErrorCallback+0x3a>

    g_spi_last_error = hspi->ErrorCode;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c10:	4a0a      	ldr	r2, [pc, #40]	@ (8005c3c <HAL_SPI_ErrorCallback+0x48>)
 8005c12:	6013      	str	r3, [r2, #0]
    g_spi_error_count++;
 8005c14:	4b0a      	ldr	r3, [pc, #40]	@ (8005c40 <HAL_SPI_ErrorCallback+0x4c>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	3301      	adds	r3, #1
 8005c1a:	4a09      	ldr	r2, [pc, #36]	@ (8005c40 <HAL_SPI_ErrorCallback+0x4c>)
 8005c1c:	6013      	str	r3, [r2, #0]

    /* Indicação visual simples para diagnóstico */
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8005c1e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005c22:	4808      	ldr	r0, [pc, #32]	@ (8005c44 <HAL_SPI_ErrorCallback+0x50>)
 8005c24:	f001 fe0e 	bl	8007844 <HAL_GPIO_TogglePin>
 8005c28:	e002      	b.n	8005c30 <HAL_SPI_ErrorCallback+0x3c>
    if (hspi == NULL) return;
 8005c2a:	bf00      	nop
 8005c2c:	e000      	b.n	8005c30 <HAL_SPI_ErrorCallback+0x3c>
    if (hspi->Instance != APP_SPI_INSTANCE) return;
 8005c2e:	bf00      	nop
}
 8005c30:	3708      	adds	r7, #8
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}
 8005c36:	bf00      	nop
 8005c38:	40003800 	.word	0x40003800
 8005c3c:	20000e3c 	.word	0x20000e3c
 8005c40:	20000e38 	.word	0x20000e38
 8005c44:	48000400 	.word	0x48000400

08005c48 <HAL_GPIO_EXTI_Callback>:
/* Botões de segurança (EXTI):
 * - B1 (PC13): E-STOP imediato (pressionado = nível baixo)
 * - B2 (PC0): Release/recover + funções extras do demo (pressionado = baixo)
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b082      	sub	sp, #8
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	4603      	mov	r3, r0
 8005c50:	80fb      	strh	r3, [r7, #6]
    switch (GPIO_Pin) {
 8005c52:	88fb      	ldrh	r3, [r7, #6]
 8005c54:	2b01      	cmp	r3, #1
 8005c56:	d019      	beq.n	8005c8c <HAL_GPIO_EXTI_Callback+0x44>
 8005c58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c5c:	d135      	bne.n	8005cca <HAL_GPIO_EXTI_Callback+0x82>
    case GPIO_PIN_13: /* B1 - E-STOP */
        if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET) {
 8005c5e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005c62:	481e      	ldr	r0, [pc, #120]	@ (8005cdc <HAL_GPIO_EXTI_Callback+0x94>)
 8005c64:	f001 fda2 	bl	80077ac <HAL_GPIO_ReadPin>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d12f      	bne.n	8005cce <HAL_GPIO_EXTI_Callback+0x86>
            /* Pressionado: aciona E-STOP e para tudo agora */
            safety_estop_assert();
 8005c6e:	f7ff f9b3 	bl	8004fd8 <safety_estop_assert>
            motion_emergency_stop();
 8005c72:	f7ff f8a3 	bl	8004dbc <motion_emergency_stop>
            /* Opcionalmente interrompe os timers para cessar qualquer atividade em ISR */
            HAL_TIM_Base_Stop_IT(&htim6);
 8005c76:	481a      	ldr	r0, [pc, #104]	@ (8005ce0 <HAL_GPIO_EXTI_Callback+0x98>)
 8005c78:	f005 fbe8 	bl	800b44c <HAL_TIM_Base_Stop_IT>
            HAL_TIM_Base_Stop_IT(&htim7);
 8005c7c:	4819      	ldr	r0, [pc, #100]	@ (8005ce4 <HAL_GPIO_EXTI_Callback+0x9c>)
 8005c7e:	f005 fbe5 	bl	800b44c <HAL_TIM_Base_Stop_IT>
            /* Se houver PWM em TIM15 (LED/auxiliar), pare também */
            HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_1);
 8005c82:	2100      	movs	r1, #0
 8005c84:	4818      	ldr	r0, [pc, #96]	@ (8005ce8 <HAL_GPIO_EXTI_Callback+0xa0>)
 8005c86:	f005 ff25 	bl	800bad4 <HAL_TIM_PWM_Stop>
        }
        break;
 8005c8a:	e020      	b.n	8005cce <HAL_GPIO_EXTI_Callback+0x86>
    case GPIO_PIN_0:  /* B2 - Release/Resume + demo speed step */
        if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0) == GPIO_PIN_RESET) {
 8005c8c:	2101      	movs	r1, #1
 8005c8e:	4813      	ldr	r0, [pc, #76]	@ (8005cdc <HAL_GPIO_EXTI_Callback+0x94>)
 8005c90:	f001 fd8c 	bl	80077ac <HAL_GPIO_ReadPin>
 8005c94:	4603      	mov	r3, r0
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d11b      	bne.n	8005cd2 <HAL_GPIO_EXTI_Callback+0x8a>
            /* Libera segurança */
            safety_estop_release();
 8005c9a:	f7ff f9bd 	bl	8005018 <safety_estop_release>
            /* Garante que os timers base voltem a rodar */
            HAL_TIM_Base_Start_IT(&htim6);
 8005c9e:	4810      	ldr	r0, [pc, #64]	@ (8005ce0 <HAL_GPIO_EXTI_Callback+0x98>)
 8005ca0:	f005 fb20 	bl	800b2e4 <HAL_TIM_Base_Start_IT>
            HAL_TIM_Base_Start_IT(&htim7);
 8005ca4:	480f      	ldr	r0, [pc, #60]	@ (8005ce4 <HAL_GPIO_EXTI_Callback+0x9c>)
 8005ca6:	f005 fb1d 	bl	800b2e4 <HAL_TIM_Base_Start_IT>
            /* Reativa movimentos conforme contexto */
            if (motion_demo_is_active()) {
 8005caa:	f7ff f8b5 	bl	8004e18 <motion_demo_is_active>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d002      	beq.n	8005cba <HAL_GPIO_EXTI_Callback+0x72>
                /* Cicla velocidade no modo demo contínuo */
                motion_demo_cycle_speed();
 8005cb4:	f7ff f8c2 	bl	8004e3c <motion_demo_cycle_speed>
                motion_demo_set_continuous(1);
                /* Se usa PWM em TIM15 para indicação, retome */
                HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
            }
        }
        break;
 8005cb8:	e00b      	b.n	8005cd2 <HAL_GPIO_EXTI_Callback+0x8a>
                motion_demo_set_continuous(1);
 8005cba:	2001      	movs	r0, #1
 8005cbc:	f7fe ffaa 	bl	8004c14 <motion_demo_set_continuous>
                HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 8005cc0:	2100      	movs	r1, #0
 8005cc2:	4809      	ldr	r0, [pc, #36]	@ (8005ce8 <HAL_GPIO_EXTI_Callback+0xa0>)
 8005cc4:	f005 fd56 	bl	800b774 <HAL_TIM_PWM_Start>
        break;
 8005cc8:	e003      	b.n	8005cd2 <HAL_GPIO_EXTI_Callback+0x8a>
    case GPIO_PIN_1:
    case GPIO_PIN_2:
    default:
        /* Reservado para sensores PROX/limites; sem ação específica aqui */
        break;
 8005cca:	bf00      	nop
 8005ccc:	e002      	b.n	8005cd4 <HAL_GPIO_EXTI_Callback+0x8c>
        break;
 8005cce:	bf00      	nop
 8005cd0:	e000      	b.n	8005cd4 <HAL_GPIO_EXTI_Callback+0x8c>
        break;
 8005cd2:	bf00      	nop
    }
}
 8005cd4:	bf00      	nop
 8005cd6:	3708      	adds	r7, #8
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd80      	pop	{r7, pc}
 8005cdc:	48000800 	.word	0x48000800
 8005ce0:	20000fd0 	.word	0x20000fd0
 8005ce4:	2000101c 	.word	0x2000101c
 8005ce8:	20001068 	.word	0x20001068

08005cec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
#if LOG_ENABLE
	log_event_ids(LOG_SVC_APP, LOG_STATE_ERROR, -1);
 8005cf0:	f04f 32ff 	mov.w	r2, #4294967295
 8005cf4:	2164      	movs	r1, #100	@ 0x64
 8005cf6:	2000      	movs	r0, #0
 8005cf8:	f7fc fbda 	bl	80024b0 <log_event_ids>
	log_event_names("app", "error", "Error_Handler");
 8005cfc:	4a04      	ldr	r2, [pc, #16]	@ (8005d10 <Error_Handler+0x24>)
 8005cfe:	4905      	ldr	r1, [pc, #20]	@ (8005d14 <Error_Handler+0x28>)
 8005d00:	4805      	ldr	r0, [pc, #20]	@ (8005d18 <Error_Handler+0x2c>)
 8005d02:	f7fc fbe9 	bl	80024d8 <log_event_names>
  __ASM volatile ("cpsid i" : : : "memory");
 8005d06:	b672      	cpsid	i
}
 8005d08:	bf00      	nop
#endif
	__disable_irq();
	while (1) {
 8005d0a:	bf00      	nop
 8005d0c:	e7fd      	b.n	8005d0a <Error_Handler+0x1e>
 8005d0e:	bf00      	nop
 8005d10:	080109c8 	.word	0x080109c8
 8005d14:	080109d8 	.word	0x080109d8
 8005d18:	080109e0 	.word	0x080109e0

08005d1c <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b083      	sub	sp, #12
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
 8005d24:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
	 ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8005d26:	bf00      	nop
 8005d28:	370c      	adds	r7, #12
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d30:	4770      	bx	lr
	...

08005d34 <MX_SPI2_Init>:
DMA_HandleTypeDef hdma_spi2_rx;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8005d38:	4b18      	ldr	r3, [pc, #96]	@ (8005d9c <MX_SPI2_Init+0x68>)
 8005d3a:	4a19      	ldr	r2, [pc, #100]	@ (8005da0 <MX_SPI2_Init+0x6c>)
 8005d3c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8005d3e:	4b17      	ldr	r3, [pc, #92]	@ (8005d9c <MX_SPI2_Init+0x68>)
 8005d40:	2200      	movs	r2, #0
 8005d42:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8005d44:	4b15      	ldr	r3, [pc, #84]	@ (8005d9c <MX_SPI2_Init+0x68>)
 8005d46:	2200      	movs	r2, #0
 8005d48:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8005d4a:	4b14      	ldr	r3, [pc, #80]	@ (8005d9c <MX_SPI2_Init+0x68>)
 8005d4c:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8005d50:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8005d52:	4b12      	ldr	r3, [pc, #72]	@ (8005d9c <MX_SPI2_Init+0x68>)
 8005d54:	2202      	movs	r2, #2
 8005d56:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8005d58:	4b10      	ldr	r3, [pc, #64]	@ (8005d9c <MX_SPI2_Init+0x68>)
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 8005d5e:	4b0f      	ldr	r3, [pc, #60]	@ (8005d9c <MX_SPI2_Init+0x68>)
 8005d60:	2200      	movs	r2, #0
 8005d62:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005d64:	4b0d      	ldr	r3, [pc, #52]	@ (8005d9c <MX_SPI2_Init+0x68>)
 8005d66:	2200      	movs	r2, #0
 8005d68:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8005d6a:	4b0c      	ldr	r3, [pc, #48]	@ (8005d9c <MX_SPI2_Init+0x68>)
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d70:	4b0a      	ldr	r3, [pc, #40]	@ (8005d9c <MX_SPI2_Init+0x68>)
 8005d72:	2200      	movs	r2, #0
 8005d74:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8005d76:	4b09      	ldr	r3, [pc, #36]	@ (8005d9c <MX_SPI2_Init+0x68>)
 8005d78:	2207      	movs	r2, #7
 8005d7a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8005d7c:	4b07      	ldr	r3, [pc, #28]	@ (8005d9c <MX_SPI2_Init+0x68>)
 8005d7e:	2200      	movs	r2, #0
 8005d80:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8005d82:	4b06      	ldr	r3, [pc, #24]	@ (8005d9c <MX_SPI2_Init+0x68>)
 8005d84:	2200      	movs	r2, #0
 8005d86:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8005d88:	4804      	ldr	r0, [pc, #16]	@ (8005d9c <MX_SPI2_Init+0x68>)
 8005d8a:	f004 fa39 	bl	800a200 <HAL_SPI_Init>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d001      	beq.n	8005d98 <MX_SPI2_Init+0x64>
  {
    Error_Handler();
 8005d94:	f7ff ffaa 	bl	8005cec <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8005d98:	bf00      	nop
 8005d9a:	bd80      	pop	{r7, pc}
 8005d9c:	20000e40 	.word	0x20000e40
 8005da0:	40003800 	.word	0x40003800

08005da4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b08a      	sub	sp, #40	@ 0x28
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005dac:	f107 0314 	add.w	r3, r7, #20
 8005db0:	2200      	movs	r2, #0
 8005db2:	601a      	str	r2, [r3, #0]
 8005db4:	605a      	str	r2, [r3, #4]
 8005db6:	609a      	str	r2, [r3, #8]
 8005db8:	60da      	str	r2, [r3, #12]
 8005dba:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a44      	ldr	r2, [pc, #272]	@ (8005ed4 <HAL_SPI_MspInit+0x130>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	f040 8082 	bne.w	8005ecc <HAL_SPI_MspInit+0x128>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005dc8:	4b43      	ldr	r3, [pc, #268]	@ (8005ed8 <HAL_SPI_MspInit+0x134>)
 8005dca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dcc:	4a42      	ldr	r2, [pc, #264]	@ (8005ed8 <HAL_SPI_MspInit+0x134>)
 8005dce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005dd2:	6593      	str	r3, [r2, #88]	@ 0x58
 8005dd4:	4b40      	ldr	r3, [pc, #256]	@ (8005ed8 <HAL_SPI_MspInit+0x134>)
 8005dd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dd8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005ddc:	613b      	str	r3, [r7, #16]
 8005dde:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005de0:	4b3d      	ldr	r3, [pc, #244]	@ (8005ed8 <HAL_SPI_MspInit+0x134>)
 8005de2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005de4:	4a3c      	ldr	r2, [pc, #240]	@ (8005ed8 <HAL_SPI_MspInit+0x134>)
 8005de6:	f043 0308 	orr.w	r3, r3, #8
 8005dea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005dec:	4b3a      	ldr	r3, [pc, #232]	@ (8005ed8 <HAL_SPI_MspInit+0x134>)
 8005dee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005df0:	f003 0308 	and.w	r3, r3, #8
 8005df4:	60fb      	str	r3, [r7, #12]
 8005df6:	68fb      	ldr	r3, [r7, #12]
    PD0     ------> SPI2_NSS
    PD1     ------> SPI2_SCK
    PD3     ------> SPI2_MISO
    PD4     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4;
 8005df8:	231b      	movs	r3, #27
 8005dfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005dfc:	2302      	movs	r3, #2
 8005dfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e00:	2300      	movs	r3, #0
 8005e02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e04:	2303      	movs	r3, #3
 8005e06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005e08:	2305      	movs	r3, #5
 8005e0a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005e0c:	f107 0314 	add.w	r3, r7, #20
 8005e10:	4619      	mov	r1, r3
 8005e12:	4832      	ldr	r0, [pc, #200]	@ (8005edc <HAL_SPI_MspInit+0x138>)
 8005e14:	f001 fa3e 	bl	8007294 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 8005e18:	4b31      	ldr	r3, [pc, #196]	@ (8005ee0 <HAL_SPI_MspInit+0x13c>)
 8005e1a:	4a32      	ldr	r2, [pc, #200]	@ (8005ee4 <HAL_SPI_MspInit+0x140>)
 8005e1c:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_1;
 8005e1e:	4b30      	ldr	r3, [pc, #192]	@ (8005ee0 <HAL_SPI_MspInit+0x13c>)
 8005e20:	2201      	movs	r2, #1
 8005e22:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005e24:	4b2e      	ldr	r3, [pc, #184]	@ (8005ee0 <HAL_SPI_MspInit+0x13c>)
 8005e26:	2200      	movs	r2, #0
 8005e28:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005e2a:	4b2d      	ldr	r3, [pc, #180]	@ (8005ee0 <HAL_SPI_MspInit+0x13c>)
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005e30:	4b2b      	ldr	r3, [pc, #172]	@ (8005ee0 <HAL_SPI_MspInit+0x13c>)
 8005e32:	2280      	movs	r2, #128	@ 0x80
 8005e34:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005e36:	4b2a      	ldr	r3, [pc, #168]	@ (8005ee0 <HAL_SPI_MspInit+0x13c>)
 8005e38:	2200      	movs	r2, #0
 8005e3a:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005e3c:	4b28      	ldr	r3, [pc, #160]	@ (8005ee0 <HAL_SPI_MspInit+0x13c>)
 8005e3e:	2200      	movs	r2, #0
 8005e40:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8005e42:	4b27      	ldr	r3, [pc, #156]	@ (8005ee0 <HAL_SPI_MspInit+0x13c>)
 8005e44:	2220      	movs	r2, #32
 8005e46:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005e48:	4b25      	ldr	r3, [pc, #148]	@ (8005ee0 <HAL_SPI_MspInit+0x13c>)
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8005e4e:	4824      	ldr	r0, [pc, #144]	@ (8005ee0 <HAL_SPI_MspInit+0x13c>)
 8005e50:	f000 feda 	bl	8006c08 <HAL_DMA_Init>
 8005e54:	4603      	mov	r3, r0
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d001      	beq.n	8005e5e <HAL_SPI_MspInit+0xba>
    {
      Error_Handler();
 8005e5a:	f7ff ff47 	bl	8005cec <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	4a1f      	ldr	r2, [pc, #124]	@ (8005ee0 <HAL_SPI_MspInit+0x13c>)
 8005e62:	659a      	str	r2, [r3, #88]	@ 0x58
 8005e64:	4a1e      	ldr	r2, [pc, #120]	@ (8005ee0 <HAL_SPI_MspInit+0x13c>)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 8005e6a:	4b1f      	ldr	r3, [pc, #124]	@ (8005ee8 <HAL_SPI_MspInit+0x144>)
 8005e6c:	4a1f      	ldr	r2, [pc, #124]	@ (8005eec <HAL_SPI_MspInit+0x148>)
 8005e6e:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_1;
 8005e70:	4b1d      	ldr	r3, [pc, #116]	@ (8005ee8 <HAL_SPI_MspInit+0x144>)
 8005e72:	2201      	movs	r2, #1
 8005e74:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005e76:	4b1c      	ldr	r3, [pc, #112]	@ (8005ee8 <HAL_SPI_MspInit+0x144>)
 8005e78:	2210      	movs	r2, #16
 8005e7a:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005e7c:	4b1a      	ldr	r3, [pc, #104]	@ (8005ee8 <HAL_SPI_MspInit+0x144>)
 8005e7e:	2200      	movs	r2, #0
 8005e80:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005e82:	4b19      	ldr	r3, [pc, #100]	@ (8005ee8 <HAL_SPI_MspInit+0x144>)
 8005e84:	2280      	movs	r2, #128	@ 0x80
 8005e86:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005e88:	4b17      	ldr	r3, [pc, #92]	@ (8005ee8 <HAL_SPI_MspInit+0x144>)
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005e8e:	4b16      	ldr	r3, [pc, #88]	@ (8005ee8 <HAL_SPI_MspInit+0x144>)
 8005e90:	2200      	movs	r2, #0
 8005e92:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8005e94:	4b14      	ldr	r3, [pc, #80]	@ (8005ee8 <HAL_SPI_MspInit+0x144>)
 8005e96:	2220      	movs	r2, #32
 8005e98:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005e9a:	4b13      	ldr	r3, [pc, #76]	@ (8005ee8 <HAL_SPI_MspInit+0x144>)
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8005ea0:	4811      	ldr	r0, [pc, #68]	@ (8005ee8 <HAL_SPI_MspInit+0x144>)
 8005ea2:	f000 feb1 	bl	8006c08 <HAL_DMA_Init>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d001      	beq.n	8005eb0 <HAL_SPI_MspInit+0x10c>
    {
      Error_Handler();
 8005eac:	f7ff ff1e 	bl	8005cec <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	4a0d      	ldr	r2, [pc, #52]	@ (8005ee8 <HAL_SPI_MspInit+0x144>)
 8005eb4:	655a      	str	r2, [r3, #84]	@ 0x54
 8005eb6:	4a0c      	ldr	r2, [pc, #48]	@ (8005ee8 <HAL_SPI_MspInit+0x144>)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	2100      	movs	r1, #0
 8005ec0:	2024      	movs	r0, #36	@ 0x24
 8005ec2:	f000 fe51 	bl	8006b68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8005ec6:	2024      	movs	r0, #36	@ 0x24
 8005ec8:	f000 fe7a 	bl	8006bc0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8005ecc:	bf00      	nop
 8005ece:	3728      	adds	r7, #40	@ 0x28
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bd80      	pop	{r7, pc}
 8005ed4:	40003800 	.word	0x40003800
 8005ed8:	40021000 	.word	0x40021000
 8005edc:	48000c00 	.word	0x48000c00
 8005ee0:	20000ea4 	.word	0x20000ea4
 8005ee4:	40020044 	.word	0x40020044
 8005ee8:	20000eec 	.word	0x20000eec
 8005eec:	40020058 	.word	0x40020058

08005ef0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b083      	sub	sp, #12
 8005ef4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005ef6:	4b0f      	ldr	r3, [pc, #60]	@ (8005f34 <HAL_MspInit+0x44>)
 8005ef8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005efa:	4a0e      	ldr	r2, [pc, #56]	@ (8005f34 <HAL_MspInit+0x44>)
 8005efc:	f043 0301 	orr.w	r3, r3, #1
 8005f00:	6613      	str	r3, [r2, #96]	@ 0x60
 8005f02:	4b0c      	ldr	r3, [pc, #48]	@ (8005f34 <HAL_MspInit+0x44>)
 8005f04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f06:	f003 0301 	and.w	r3, r3, #1
 8005f0a:	607b      	str	r3, [r7, #4]
 8005f0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005f0e:	4b09      	ldr	r3, [pc, #36]	@ (8005f34 <HAL_MspInit+0x44>)
 8005f10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f12:	4a08      	ldr	r2, [pc, #32]	@ (8005f34 <HAL_MspInit+0x44>)
 8005f14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005f18:	6593      	str	r3, [r2, #88]	@ 0x58
 8005f1a:	4b06      	ldr	r3, [pc, #24]	@ (8005f34 <HAL_MspInit+0x44>)
 8005f1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f22:	603b      	str	r3, [r7, #0]
 8005f24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005f26:	bf00      	nop
 8005f28:	370c      	adds	r7, #12
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f30:	4770      	bx	lr
 8005f32:	bf00      	nop
 8005f34:	40021000 	.word	0x40021000

08005f38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8005f3c:	bf00      	nop
 8005f3e:	e7fd      	b.n	8005f3c <NMI_Handler+0x4>

08005f40 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005f40:	b480      	push	{r7}
 8005f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005f44:	bf00      	nop
 8005f46:	e7fd      	b.n	8005f44 <HardFault_Handler+0x4>

08005f48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005f4c:	bf00      	nop
 8005f4e:	e7fd      	b.n	8005f4c <MemManage_Handler+0x4>

08005f50 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005f50:	b480      	push	{r7}
 8005f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005f54:	bf00      	nop
 8005f56:	e7fd      	b.n	8005f54 <BusFault_Handler+0x4>

08005f58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005f5c:	bf00      	nop
 8005f5e:	e7fd      	b.n	8005f5c <UsageFault_Handler+0x4>

08005f60 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005f60:	b480      	push	{r7}
 8005f62:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005f64:	bf00      	nop
 8005f66:	46bd      	mov	sp, r7
 8005f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6c:	4770      	bx	lr

08005f6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005f6e:	b480      	push	{r7}
 8005f70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005f72:	bf00      	nop
 8005f74:	46bd      	mov	sp, r7
 8005f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7a:	4770      	bx	lr

08005f7c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005f80:	bf00      	nop
 8005f82:	46bd      	mov	sp, r7
 8005f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f88:	4770      	bx	lr

08005f8a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005f8a:	b580      	push	{r7, lr}
 8005f8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005f8e:	f000 fcdb 	bl	8006948 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005f92:	bf00      	nop
 8005f94:	bd80      	pop	{r7, pc}
	...

08005f98 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8005f9c:	4802      	ldr	r0, [pc, #8]	@ (8005fa8 <DMA1_Channel4_IRQHandler+0x10>)
 8005f9e:	f001 f89a 	bl	80070d6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8005fa2:	bf00      	nop
 8005fa4:	bd80      	pop	{r7, pc}
 8005fa6:	bf00      	nop
 8005fa8:	20000ea4 	.word	0x20000ea4

08005fac <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8005fb0:	4802      	ldr	r0, [pc, #8]	@ (8005fbc <DMA1_Channel5_IRQHandler+0x10>)
 8005fb2:	f001 f890 	bl	80070d6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8005fb6:	bf00      	nop
 8005fb8:	bd80      	pop	{r7, pc}
 8005fba:	bf00      	nop
 8005fbc:	20000eec 	.word	0x20000eec

08005fc0 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8005fc4:	4802      	ldr	r0, [pc, #8]	@ (8005fd0 <SPI2_IRQHandler+0x10>)
 8005fc6:	f004 fcad 	bl	800a924 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8005fca:	bf00      	nop
 8005fcc:	bd80      	pop	{r7, pc}
 8005fce:	bf00      	nop
 8005fd0:	20000e40 	.word	0x20000e40

08005fd4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005fd8:	4802      	ldr	r0, [pc, #8]	@ (8005fe4 <TIM6_DAC_IRQHandler+0x10>)
 8005fda:	f006 f92f 	bl	800c23c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8005fde:	bf00      	nop
 8005fe0:	bd80      	pop	{r7, pc}
 8005fe2:	bf00      	nop
 8005fe4:	20000fd0 	.word	0x20000fd0

08005fe8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8005fec:	4802      	ldr	r0, [pc, #8]	@ (8005ff8 <TIM7_IRQHandler+0x10>)
 8005fee:	f006 f925 	bl	800c23c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8005ff2:	bf00      	nop
 8005ff4:	bd80      	pop	{r7, pc}
 8005ff6:	bf00      	nop
 8005ff8:	2000101c 	.word	0x2000101c

08005ffc <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 8006000:	4802      	ldr	r0, [pc, #8]	@ (800600c <LPTIM1_IRQHandler+0x10>)
 8006002:	f001 ff1f 	bl	8007e44 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 8006006:	bf00      	nop
 8006008:	bd80      	pop	{r7, pc}
 800600a:	bf00      	nop
 800600c:	20000e00 	.word	0x20000e00

08006010 <EXTI0_IRQHandler>:

/* USER CODE BEGIN 1 */
void EXTI0_IRQHandler(void)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8006014:	2001      	movs	r0, #1
 8006016:	f001 fc37 	bl	8007888 <HAL_GPIO_EXTI_IRQHandler>
}
 800601a:	bf00      	nop
 800601c:	bd80      	pop	{r7, pc}

0800601e <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 800601e:	b580      	push	{r7, lr}
 8006020:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8006022:	2002      	movs	r0, #2
 8006024:	f001 fc30 	bl	8007888 <HAL_GPIO_EXTI_IRQHandler>
}
 8006028:	bf00      	nop
 800602a:	bd80      	pop	{r7, pc}

0800602c <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8006030:	2004      	movs	r0, #4
 8006032:	f001 fc29 	bl	8007888 <HAL_GPIO_EXTI_IRQHandler>
}
 8006036:	bf00      	nop
 8006038:	bd80      	pop	{r7, pc}

0800603a <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 800603a:	b580      	push	{r7, lr}
 800603c:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800603e:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8006042:	f001 fc21 	bl	8007888 <HAL_GPIO_EXTI_IRQHandler>
}
 8006046:	bf00      	nop
 8006048:	bd80      	pop	{r7, pc}

0800604a <_read>:
	_kill(status, -1);
	while (1) {
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 800604a:	b580      	push	{r7, lr}
 800604c:	b086      	sub	sp, #24
 800604e:	af00      	add	r7, sp, #0
 8006050:	60f8      	str	r0, [r7, #12]
 8006052:	60b9      	str	r1, [r7, #8]
 8006054:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8006056:	2300      	movs	r3, #0
 8006058:	617b      	str	r3, [r7, #20]
 800605a:	e00a      	b.n	8006072 <_read+0x28>
		*ptr++ = __io_getchar();
 800605c:	f3af 8000 	nop.w
 8006060:	4601      	mov	r1, r0
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	1c5a      	adds	r2, r3, #1
 8006066:	60ba      	str	r2, [r7, #8]
 8006068:	b2ca      	uxtb	r2, r1
 800606a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	3301      	adds	r3, #1
 8006070:	617b      	str	r3, [r7, #20]
 8006072:	697a      	ldr	r2, [r7, #20]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	429a      	cmp	r2, r3
 8006078:	dbf0      	blt.n	800605c <_read+0x12>
	}

	return len;
 800607a:	687b      	ldr	r3, [r7, #4]
}
 800607c:	4618      	mov	r0, r3
 800607e:	3718      	adds	r7, #24
 8006080:	46bd      	mov	sp, r7
 8006082:	bd80      	pop	{r7, pc}

08006084 <_close>:
		__io_putchar(*ptr++);
	}
	return len;
}

int _close(int file) {
 8006084:	b480      	push	{r7}
 8006086:	b083      	sub	sp, #12
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 800608c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006090:	4618      	mov	r0, r3
 8006092:	370c      	adds	r7, #12
 8006094:	46bd      	mov	sp, r7
 8006096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609a:	4770      	bx	lr

0800609c <_fstat>:

int _fstat(int file, struct stat *st) {
 800609c:	b480      	push	{r7}
 800609e:	b083      	sub	sp, #12
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
 80060a4:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80060ac:	605a      	str	r2, [r3, #4]
	return 0;
 80060ae:	2300      	movs	r3, #0
}
 80060b0:	4618      	mov	r0, r3
 80060b2:	370c      	adds	r7, #12
 80060b4:	46bd      	mov	sp, r7
 80060b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ba:	4770      	bx	lr

080060bc <_isatty>:

int _isatty(int file) {
 80060bc:	b480      	push	{r7}
 80060be:	b083      	sub	sp, #12
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 80060c4:	2301      	movs	r3, #1
}
 80060c6:	4618      	mov	r0, r3
 80060c8:	370c      	adds	r7, #12
 80060ca:	46bd      	mov	sp, r7
 80060cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d0:	4770      	bx	lr

080060d2 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 80060d2:	b480      	push	{r7}
 80060d4:	b085      	sub	sp, #20
 80060d6:	af00      	add	r7, sp, #0
 80060d8:	60f8      	str	r0, [r7, #12]
 80060da:	60b9      	str	r1, [r7, #8]
 80060dc:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 80060de:	2300      	movs	r3, #0
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	3714      	adds	r7, #20
 80060e4:	46bd      	mov	sp, r7
 80060e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ea:	4770      	bx	lr

080060ec <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b086      	sub	sp, #24
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 80060f4:	4a14      	ldr	r2, [pc, #80]	@ (8006148 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 80060f6:	4b15      	ldr	r3, [pc, #84]	@ (800614c <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 80060f8:	1ad3      	subs	r3, r2, r3
 80060fa:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 80060fc:	697b      	ldr	r3, [r7, #20]
 80060fe:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8006100:	4b13      	ldr	r3, [pc, #76]	@ (8006150 <_sbrk+0x64>)
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d102      	bne.n	800610e <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 8006108:	4b11      	ldr	r3, [pc, #68]	@ (8006150 <_sbrk+0x64>)
 800610a:	4a12      	ldr	r2, [pc, #72]	@ (8006154 <_sbrk+0x68>)
 800610c:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 800610e:	4b10      	ldr	r3, [pc, #64]	@ (8006150 <_sbrk+0x64>)
 8006110:	681a      	ldr	r2, [r3, #0]
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	4413      	add	r3, r2
 8006116:	693a      	ldr	r2, [r7, #16]
 8006118:	429a      	cmp	r2, r3
 800611a:	d207      	bcs.n	800612c <_sbrk+0x40>
		errno = ENOMEM;
 800611c:	f009 fb3a 	bl	800f794 <__errno>
 8006120:	4603      	mov	r3, r0
 8006122:	220c      	movs	r2, #12
 8006124:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 8006126:	f04f 33ff 	mov.w	r3, #4294967295
 800612a:	e009      	b.n	8006140 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 800612c:	4b08      	ldr	r3, [pc, #32]	@ (8006150 <_sbrk+0x64>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 8006132:	4b07      	ldr	r3, [pc, #28]	@ (8006150 <_sbrk+0x64>)
 8006134:	681a      	ldr	r2, [r3, #0]
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	4413      	add	r3, r2
 800613a:	4a05      	ldr	r2, [pc, #20]	@ (8006150 <_sbrk+0x64>)
 800613c:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 800613e:	68fb      	ldr	r3, [r7, #12]
}
 8006140:	4618      	mov	r0, r3
 8006142:	3718      	adds	r7, #24
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}
 8006148:	20018000 	.word	0x20018000
 800614c:	00000400 	.word	0x00000400
 8006150:	20000f34 	.word	0x20000f34
 8006154:	20001290 	.word	0x20001290

08006158 <SystemInit>:
/**
 * @brief  Setup the microcontroller system.
 * @retval None
 */

void SystemInit(void) {
 8006158:	b480      	push	{r7}
 800615a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 20U) | (3UL << 22U)); /* set CP10 and CP11 Full Access */
 800615c:	4b06      	ldr	r3, [pc, #24]	@ (8006178 <SystemInit+0x20>)
 800615e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006162:	4a05      	ldr	r2, [pc, #20]	@ (8006178 <SystemInit+0x20>)
 8006164:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006168:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800616c:	bf00      	nop
 800616e:	46bd      	mov	sp, r7
 8006170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006174:	4770      	bx	lr
 8006176:	bf00      	nop
 8006178:	e000ed00 	.word	0xe000ed00

0800617c <MX_TIM3_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim15;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b08c      	sub	sp, #48	@ 0x30
 8006180:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8006182:	f107 030c 	add.w	r3, r7, #12
 8006186:	2224      	movs	r2, #36	@ 0x24
 8006188:	2100      	movs	r1, #0
 800618a:	4618      	mov	r0, r3
 800618c:	f009 faa4 	bl	800f6d8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006190:	463b      	mov	r3, r7
 8006192:	2200      	movs	r2, #0
 8006194:	601a      	str	r2, [r3, #0]
 8006196:	605a      	str	r2, [r3, #4]
 8006198:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800619a:	4b21      	ldr	r3, [pc, #132]	@ (8006220 <MX_TIM3_Init+0xa4>)
 800619c:	4a21      	ldr	r2, [pc, #132]	@ (8006224 <MX_TIM3_Init+0xa8>)
 800619e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80061a0:	4b1f      	ldr	r3, [pc, #124]	@ (8006220 <MX_TIM3_Init+0xa4>)
 80061a2:	2200      	movs	r2, #0
 80061a4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80061a6:	4b1e      	ldr	r3, [pc, #120]	@ (8006220 <MX_TIM3_Init+0xa4>)
 80061a8:	2200      	movs	r2, #0
 80061aa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80061ac:	4b1c      	ldr	r3, [pc, #112]	@ (8006220 <MX_TIM3_Init+0xa4>)
 80061ae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80061b2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80061b4:	4b1a      	ldr	r3, [pc, #104]	@ (8006220 <MX_TIM3_Init+0xa4>)
 80061b6:	2200      	movs	r2, #0
 80061b8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80061ba:	4b19      	ldr	r3, [pc, #100]	@ (8006220 <MX_TIM3_Init+0xa4>)
 80061bc:	2200      	movs	r2, #0
 80061be:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80061c0:	2301      	movs	r3, #1
 80061c2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80061c4:	2300      	movs	r3, #0
 80061c6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80061c8:	2301      	movs	r3, #1
 80061ca:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80061cc:	2300      	movs	r3, #0
 80061ce:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80061d0:	2300      	movs	r3, #0
 80061d2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80061d4:	2300      	movs	r3, #0
 80061d6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80061d8:	2301      	movs	r3, #1
 80061da:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80061dc:	2300      	movs	r3, #0
 80061de:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80061e0:	2300      	movs	r3, #0
 80061e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80061e4:	f107 030c 	add.w	r3, r7, #12
 80061e8:	4619      	mov	r1, r3
 80061ea:	480d      	ldr	r0, [pc, #52]	@ (8006220 <MX_TIM3_Init+0xa4>)
 80061ec:	f005 fda6 	bl	800bd3c <HAL_TIM_Encoder_Init>
 80061f0:	4603      	mov	r3, r0
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d001      	beq.n	80061fa <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80061f6:	f7ff fd79 	bl	8005cec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80061fa:	2300      	movs	r3, #0
 80061fc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80061fe:	2300      	movs	r3, #0
 8006200:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8006202:	463b      	mov	r3, r7
 8006204:	4619      	mov	r1, r3
 8006206:	4806      	ldr	r0, [pc, #24]	@ (8006220 <MX_TIM3_Init+0xa4>)
 8006208:	f007 fc7c 	bl	800db04 <HAL_TIMEx_MasterConfigSynchronization>
 800620c:	4603      	mov	r3, r0
 800620e:	2b00      	cmp	r3, #0
 8006210:	d001      	beq.n	8006216 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8006212:	f7ff fd6b 	bl	8005cec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8006216:	bf00      	nop
 8006218:	3730      	adds	r7, #48	@ 0x30
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}
 800621e:	bf00      	nop
 8006220:	20000f38 	.word	0x20000f38
 8006224:	40000400 	.word	0x40000400

08006228 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b08c      	sub	sp, #48	@ 0x30
 800622c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800622e:	f107 030c 	add.w	r3, r7, #12
 8006232:	2224      	movs	r2, #36	@ 0x24
 8006234:	2100      	movs	r1, #0
 8006236:	4618      	mov	r0, r3
 8006238:	f009 fa4e 	bl	800f6d8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800623c:	463b      	mov	r3, r7
 800623e:	2200      	movs	r2, #0
 8006240:	601a      	str	r2, [r3, #0]
 8006242:	605a      	str	r2, [r3, #4]
 8006244:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8006246:	4b21      	ldr	r3, [pc, #132]	@ (80062cc <MX_TIM5_Init+0xa4>)
 8006248:	4a21      	ldr	r2, [pc, #132]	@ (80062d0 <MX_TIM5_Init+0xa8>)
 800624a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800624c:	4b1f      	ldr	r3, [pc, #124]	@ (80062cc <MX_TIM5_Init+0xa4>)
 800624e:	2200      	movs	r2, #0
 8006250:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006252:	4b1e      	ldr	r3, [pc, #120]	@ (80062cc <MX_TIM5_Init+0xa4>)
 8006254:	2200      	movs	r2, #0
 8006256:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8006258:	4b1c      	ldr	r3, [pc, #112]	@ (80062cc <MX_TIM5_Init+0xa4>)
 800625a:	f04f 32ff 	mov.w	r2, #4294967295
 800625e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006260:	4b1a      	ldr	r3, [pc, #104]	@ (80062cc <MX_TIM5_Init+0xa4>)
 8006262:	2200      	movs	r2, #0
 8006264:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006266:	4b19      	ldr	r3, [pc, #100]	@ (80062cc <MX_TIM5_Init+0xa4>)
 8006268:	2200      	movs	r2, #0
 800626a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800626c:	2301      	movs	r3, #1
 800626e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8006270:	2300      	movs	r3, #0
 8006272:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8006274:	2301      	movs	r3, #1
 8006276:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8006278:	2300      	movs	r3, #0
 800627a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800627c:	2300      	movs	r3, #0
 800627e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8006280:	2300      	movs	r3, #0
 8006282:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8006284:	2301      	movs	r3, #1
 8006286:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8006288:	2300      	movs	r3, #0
 800628a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800628c:	2300      	movs	r3, #0
 800628e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8006290:	f107 030c 	add.w	r3, r7, #12
 8006294:	4619      	mov	r1, r3
 8006296:	480d      	ldr	r0, [pc, #52]	@ (80062cc <MX_TIM5_Init+0xa4>)
 8006298:	f005 fd50 	bl	800bd3c <HAL_TIM_Encoder_Init>
 800629c:	4603      	mov	r3, r0
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d001      	beq.n	80062a6 <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 80062a2:	f7ff fd23 	bl	8005cec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80062a6:	2300      	movs	r3, #0
 80062a8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80062aa:	2300      	movs	r3, #0
 80062ac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80062ae:	463b      	mov	r3, r7
 80062b0:	4619      	mov	r1, r3
 80062b2:	4806      	ldr	r0, [pc, #24]	@ (80062cc <MX_TIM5_Init+0xa4>)
 80062b4:	f007 fc26 	bl	800db04 <HAL_TIMEx_MasterConfigSynchronization>
 80062b8:	4603      	mov	r3, r0
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d001      	beq.n	80062c2 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 80062be:	f7ff fd15 	bl	8005cec <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80062c2:	bf00      	nop
 80062c4:	3730      	adds	r7, #48	@ 0x30
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}
 80062ca:	bf00      	nop
 80062cc:	20000f84 	.word	0x20000f84
 80062d0:	40000c00 	.word	0x40000c00

080062d4 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b084      	sub	sp, #16
 80062d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80062da:	1d3b      	adds	r3, r7, #4
 80062dc:	2200      	movs	r2, #0
 80062de:	601a      	str	r2, [r3, #0]
 80062e0:	605a      	str	r2, [r3, #4]
 80062e2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80062e4:	4b14      	ldr	r3, [pc, #80]	@ (8006338 <MX_TIM6_Init+0x64>)
 80062e6:	4a15      	ldr	r2, [pc, #84]	@ (800633c <MX_TIM6_Init+0x68>)
 80062e8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 79;
 80062ea:	4b13      	ldr	r3, [pc, #76]	@ (8006338 <MX_TIM6_Init+0x64>)
 80062ec:	224f      	movs	r2, #79	@ 0x4f
 80062ee:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80062f0:	4b11      	ldr	r3, [pc, #68]	@ (8006338 <MX_TIM6_Init+0x64>)
 80062f2:	2200      	movs	r2, #0
 80062f4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 19;
 80062f6:	4b10      	ldr	r3, [pc, #64]	@ (8006338 <MX_TIM6_Init+0x64>)
 80062f8:	2213      	movs	r2, #19
 80062fa:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80062fc:	4b0e      	ldr	r3, [pc, #56]	@ (8006338 <MX_TIM6_Init+0x64>)
 80062fe:	2280      	movs	r2, #128	@ 0x80
 8006300:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8006302:	480d      	ldr	r0, [pc, #52]	@ (8006338 <MX_TIM6_Init+0x64>)
 8006304:	f004 fee4 	bl	800b0d0 <HAL_TIM_Base_Init>
 8006308:	4603      	mov	r3, r0
 800630a:	2b00      	cmp	r3, #0
 800630c:	d001      	beq.n	8006312 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800630e:	f7ff fced 	bl	8005cec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8006312:	2320      	movs	r3, #32
 8006314:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006316:	2300      	movs	r3, #0
 8006318:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800631a:	1d3b      	adds	r3, r7, #4
 800631c:	4619      	mov	r1, r3
 800631e:	4806      	ldr	r0, [pc, #24]	@ (8006338 <MX_TIM6_Init+0x64>)
 8006320:	f007 fbf0 	bl	800db04 <HAL_TIMEx_MasterConfigSynchronization>
 8006324:	4603      	mov	r3, r0
 8006326:	2b00      	cmp	r3, #0
 8006328:	d001      	beq.n	800632e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800632a:	f7ff fcdf 	bl	8005cec <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800632e:	bf00      	nop
 8006330:	3710      	adds	r7, #16
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}
 8006336:	bf00      	nop
 8006338:	20000fd0 	.word	0x20000fd0
 800633c:	40001000 	.word	0x40001000

08006340 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b084      	sub	sp, #16
 8006344:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006346:	1d3b      	adds	r3, r7, #4
 8006348:	2200      	movs	r2, #0
 800634a:	601a      	str	r2, [r3, #0]
 800634c:	605a      	str	r2, [r3, #4]
 800634e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8006350:	4b14      	ldr	r3, [pc, #80]	@ (80063a4 <MX_TIM7_Init+0x64>)
 8006352:	4a15      	ldr	r2, [pc, #84]	@ (80063a8 <MX_TIM7_Init+0x68>)
 8006354:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 7999;
 8006356:	4b13      	ldr	r3, [pc, #76]	@ (80063a4 <MX_TIM7_Init+0x64>)
 8006358:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 800635c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800635e:	4b11      	ldr	r3, [pc, #68]	@ (80063a4 <MX_TIM7_Init+0x64>)
 8006360:	2200      	movs	r2, #0
 8006362:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9;
 8006364:	4b0f      	ldr	r3, [pc, #60]	@ (80063a4 <MX_TIM7_Init+0x64>)
 8006366:	2209      	movs	r2, #9
 8006368:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800636a:	4b0e      	ldr	r3, [pc, #56]	@ (80063a4 <MX_TIM7_Init+0x64>)
 800636c:	2280      	movs	r2, #128	@ 0x80
 800636e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8006370:	480c      	ldr	r0, [pc, #48]	@ (80063a4 <MX_TIM7_Init+0x64>)
 8006372:	f004 fead 	bl	800b0d0 <HAL_TIM_Base_Init>
 8006376:	4603      	mov	r3, r0
 8006378:	2b00      	cmp	r3, #0
 800637a:	d001      	beq.n	8006380 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 800637c:	f7ff fcb6 	bl	8005cec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006380:	2300      	movs	r3, #0
 8006382:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006384:	2300      	movs	r3, #0
 8006386:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8006388:	1d3b      	adds	r3, r7, #4
 800638a:	4619      	mov	r1, r3
 800638c:	4805      	ldr	r0, [pc, #20]	@ (80063a4 <MX_TIM7_Init+0x64>)
 800638e:	f007 fbb9 	bl	800db04 <HAL_TIMEx_MasterConfigSynchronization>
 8006392:	4603      	mov	r3, r0
 8006394:	2b00      	cmp	r3, #0
 8006396:	d001      	beq.n	800639c <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8006398:	f7ff fca8 	bl	8005cec <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800639c:	bf00      	nop
 800639e:	3710      	adds	r7, #16
 80063a0:	46bd      	mov	sp, r7
 80063a2:	bd80      	pop	{r7, pc}
 80063a4:	2000101c 	.word	0x2000101c
 80063a8:	40001400 	.word	0x40001400

080063ac <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b09a      	sub	sp, #104	@ 0x68
 80063b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80063b2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80063b6:	2200      	movs	r2, #0
 80063b8:	601a      	str	r2, [r3, #0]
 80063ba:	605a      	str	r2, [r3, #4]
 80063bc:	609a      	str	r2, [r3, #8]
 80063be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80063c0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80063c4:	2200      	movs	r2, #0
 80063c6:	601a      	str	r2, [r3, #0]
 80063c8:	605a      	str	r2, [r3, #4]
 80063ca:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80063cc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80063d0:	2200      	movs	r2, #0
 80063d2:	601a      	str	r2, [r3, #0]
 80063d4:	605a      	str	r2, [r3, #4]
 80063d6:	609a      	str	r2, [r3, #8]
 80063d8:	60da      	str	r2, [r3, #12]
 80063da:	611a      	str	r2, [r3, #16]
 80063dc:	615a      	str	r2, [r3, #20]
 80063de:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80063e0:	1d3b      	adds	r3, r7, #4
 80063e2:	222c      	movs	r2, #44	@ 0x2c
 80063e4:	2100      	movs	r1, #0
 80063e6:	4618      	mov	r0, r3
 80063e8:	f009 f976 	bl	800f6d8 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80063ec:	4b3e      	ldr	r3, [pc, #248]	@ (80064e8 <MX_TIM15_Init+0x13c>)
 80063ee:	4a3f      	ldr	r2, [pc, #252]	@ (80064ec <MX_TIM15_Init+0x140>)
 80063f0:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 8191;
 80063f2:	4b3d      	ldr	r3, [pc, #244]	@ (80064e8 <MX_TIM15_Init+0x13c>)
 80063f4:	f641 72ff 	movw	r2, #8191	@ 0x1fff
 80063f8:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80063fa:	4b3b      	ldr	r3, [pc, #236]	@ (80064e8 <MX_TIM15_Init+0x13c>)
 80063fc:	2200      	movs	r2, #0
 80063fe:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8006400:	4b39      	ldr	r3, [pc, #228]	@ (80064e8 <MX_TIM15_Init+0x13c>)
 8006402:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006406:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006408:	4b37      	ldr	r3, [pc, #220]	@ (80064e8 <MX_TIM15_Init+0x13c>)
 800640a:	2200      	movs	r2, #0
 800640c:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800640e:	4b36      	ldr	r3, [pc, #216]	@ (80064e8 <MX_TIM15_Init+0x13c>)
 8006410:	2200      	movs	r2, #0
 8006412:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006414:	4b34      	ldr	r3, [pc, #208]	@ (80064e8 <MX_TIM15_Init+0x13c>)
 8006416:	2200      	movs	r2, #0
 8006418:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 800641a:	4833      	ldr	r0, [pc, #204]	@ (80064e8 <MX_TIM15_Init+0x13c>)
 800641c:	f004 fe58 	bl	800b0d0 <HAL_TIM_Base_Init>
 8006420:	4603      	mov	r3, r0
 8006422:	2b00      	cmp	r3, #0
 8006424:	d001      	beq.n	800642a <MX_TIM15_Init+0x7e>
  {
    Error_Handler();
 8006426:	f7ff fc61 	bl	8005cec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800642a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800642e:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8006430:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006434:	4619      	mov	r1, r3
 8006436:	482c      	ldr	r0, [pc, #176]	@ (80064e8 <MX_TIM15_Init+0x13c>)
 8006438:	f006 fada 	bl	800c9f0 <HAL_TIM_ConfigClockSource>
 800643c:	4603      	mov	r3, r0
 800643e:	2b00      	cmp	r3, #0
 8006440:	d001      	beq.n	8006446 <MX_TIM15_Init+0x9a>
  {
    Error_Handler();
 8006442:	f7ff fc53 	bl	8005cec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8006446:	4828      	ldr	r0, [pc, #160]	@ (80064e8 <MX_TIM15_Init+0x13c>)
 8006448:	f005 f880 	bl	800b54c <HAL_TIM_PWM_Init>
 800644c:	4603      	mov	r3, r0
 800644e:	2b00      	cmp	r3, #0
 8006450:	d001      	beq.n	8006456 <MX_TIM15_Init+0xaa>
  {
    Error_Handler();
 8006452:	f7ff fc4b 	bl	8005cec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006456:	2300      	movs	r3, #0
 8006458:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800645a:	2300      	movs	r3, #0
 800645c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800645e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8006462:	4619      	mov	r1, r3
 8006464:	4820      	ldr	r0, [pc, #128]	@ (80064e8 <MX_TIM15_Init+0x13c>)
 8006466:	f007 fb4d 	bl	800db04 <HAL_TIMEx_MasterConfigSynchronization>
 800646a:	4603      	mov	r3, r0
 800646c:	2b00      	cmp	r3, #0
 800646e:	d001      	beq.n	8006474 <MX_TIM15_Init+0xc8>
  {
    Error_Handler();
 8006470:	f7ff fc3c 	bl	8005cec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006474:	2360      	movs	r3, #96	@ 0x60
 8006476:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8006478:	2300      	movs	r3, #0
 800647a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800647c:	2300      	movs	r3, #0
 800647e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8006480:	2300      	movs	r3, #0
 8006482:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006484:	2300      	movs	r3, #0
 8006486:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8006488:	2300      	movs	r3, #0
 800648a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800648c:	2300      	movs	r3, #0
 800648e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006490:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006494:	2200      	movs	r2, #0
 8006496:	4619      	mov	r1, r3
 8006498:	4813      	ldr	r0, [pc, #76]	@ (80064e8 <MX_TIM15_Init+0x13c>)
 800649a:	f005 ffd7 	bl	800c44c <HAL_TIM_PWM_ConfigChannel>
 800649e:	4603      	mov	r3, r0
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d001      	beq.n	80064a8 <MX_TIM15_Init+0xfc>
  {
    Error_Handler();
 80064a4:	f7ff fc22 	bl	8005cec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80064a8:	2300      	movs	r3, #0
 80064aa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80064ac:	2300      	movs	r3, #0
 80064ae:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80064b0:	2300      	movs	r3, #0
 80064b2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80064b4:	2300      	movs	r3, #0
 80064b6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80064b8:	2300      	movs	r3, #0
 80064ba:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80064bc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80064c0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80064c2:	2300      	movs	r3, #0
 80064c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80064c6:	1d3b      	adds	r3, r7, #4
 80064c8:	4619      	mov	r1, r3
 80064ca:	4807      	ldr	r0, [pc, #28]	@ (80064e8 <MX_TIM15_Init+0x13c>)
 80064cc:	f007 fc70 	bl	800ddb0 <HAL_TIMEx_ConfigBreakDeadTime>
 80064d0:	4603      	mov	r3, r0
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d001      	beq.n	80064da <MX_TIM15_Init+0x12e>
  {
    Error_Handler();
 80064d6:	f7ff fc09 	bl	8005cec <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80064da:	4803      	ldr	r0, [pc, #12]	@ (80064e8 <MX_TIM15_Init+0x13c>)
 80064dc:	f000 f8d2 	bl	8006684 <HAL_TIM_MspPostInit>

}
 80064e0:	bf00      	nop
 80064e2:	3768      	adds	r7, #104	@ 0x68
 80064e4:	46bd      	mov	sp, r7
 80064e6:	bd80      	pop	{r7, pc}
 80064e8:	20001068 	.word	0x20001068
 80064ec:	40014000 	.word	0x40014000

080064f0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b08c      	sub	sp, #48	@ 0x30
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80064f8:	f107 031c 	add.w	r3, r7, #28
 80064fc:	2200      	movs	r2, #0
 80064fe:	601a      	str	r2, [r3, #0]
 8006500:	605a      	str	r2, [r3, #4]
 8006502:	609a      	str	r2, [r3, #8]
 8006504:	60da      	str	r2, [r3, #12]
 8006506:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a2f      	ldr	r2, [pc, #188]	@ (80065cc <HAL_TIM_Encoder_MspInit+0xdc>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d129      	bne.n	8006566 <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006512:	4b2f      	ldr	r3, [pc, #188]	@ (80065d0 <HAL_TIM_Encoder_MspInit+0xe0>)
 8006514:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006516:	4a2e      	ldr	r2, [pc, #184]	@ (80065d0 <HAL_TIM_Encoder_MspInit+0xe0>)
 8006518:	f043 0302 	orr.w	r3, r3, #2
 800651c:	6593      	str	r3, [r2, #88]	@ 0x58
 800651e:	4b2c      	ldr	r3, [pc, #176]	@ (80065d0 <HAL_TIM_Encoder_MspInit+0xe0>)
 8006520:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006522:	f003 0302 	and.w	r3, r3, #2
 8006526:	61bb      	str	r3, [r7, #24]
 8006528:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800652a:	4b29      	ldr	r3, [pc, #164]	@ (80065d0 <HAL_TIM_Encoder_MspInit+0xe0>)
 800652c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800652e:	4a28      	ldr	r2, [pc, #160]	@ (80065d0 <HAL_TIM_Encoder_MspInit+0xe0>)
 8006530:	f043 0301 	orr.w	r3, r3, #1
 8006534:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006536:	4b26      	ldr	r3, [pc, #152]	@ (80065d0 <HAL_TIM_Encoder_MspInit+0xe0>)
 8006538:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800653a:	f003 0301 	and.w	r3, r3, #1
 800653e:	617b      	str	r3, [r7, #20]
 8006540:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006542:	23c0      	movs	r3, #192	@ 0xc0
 8006544:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006546:	2302      	movs	r3, #2
 8006548:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800654a:	2300      	movs	r3, #0
 800654c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800654e:	2300      	movs	r3, #0
 8006550:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006552:	2302      	movs	r3, #2
 8006554:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006556:	f107 031c 	add.w	r3, r7, #28
 800655a:	4619      	mov	r1, r3
 800655c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006560:	f000 fe98 	bl	8007294 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8006564:	e02d      	b.n	80065c2 <HAL_TIM_Encoder_MspInit+0xd2>
  else if(tim_encoderHandle->Instance==TIM5)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4a1a      	ldr	r2, [pc, #104]	@ (80065d4 <HAL_TIM_Encoder_MspInit+0xe4>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d128      	bne.n	80065c2 <HAL_TIM_Encoder_MspInit+0xd2>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8006570:	4b17      	ldr	r3, [pc, #92]	@ (80065d0 <HAL_TIM_Encoder_MspInit+0xe0>)
 8006572:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006574:	4a16      	ldr	r2, [pc, #88]	@ (80065d0 <HAL_TIM_Encoder_MspInit+0xe0>)
 8006576:	f043 0308 	orr.w	r3, r3, #8
 800657a:	6593      	str	r3, [r2, #88]	@ 0x58
 800657c:	4b14      	ldr	r3, [pc, #80]	@ (80065d0 <HAL_TIM_Encoder_MspInit+0xe0>)
 800657e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006580:	f003 0308 	and.w	r3, r3, #8
 8006584:	613b      	str	r3, [r7, #16]
 8006586:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006588:	4b11      	ldr	r3, [pc, #68]	@ (80065d0 <HAL_TIM_Encoder_MspInit+0xe0>)
 800658a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800658c:	4a10      	ldr	r2, [pc, #64]	@ (80065d0 <HAL_TIM_Encoder_MspInit+0xe0>)
 800658e:	f043 0301 	orr.w	r3, r3, #1
 8006592:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006594:	4b0e      	ldr	r3, [pc, #56]	@ (80065d0 <HAL_TIM_Encoder_MspInit+0xe0>)
 8006596:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006598:	f003 0301 	and.w	r3, r3, #1
 800659c:	60fb      	str	r3, [r7, #12]
 800659e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80065a0:	2303      	movs	r3, #3
 80065a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80065a4:	2302      	movs	r3, #2
 80065a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065a8:	2300      	movs	r3, #0
 80065aa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80065ac:	2300      	movs	r3, #0
 80065ae:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80065b0:	2302      	movs	r3, #2
 80065b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80065b4:	f107 031c 	add.w	r3, r7, #28
 80065b8:	4619      	mov	r1, r3
 80065ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80065be:	f000 fe69 	bl	8007294 <HAL_GPIO_Init>
}
 80065c2:	bf00      	nop
 80065c4:	3730      	adds	r7, #48	@ 0x30
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}
 80065ca:	bf00      	nop
 80065cc:	40000400 	.word	0x40000400
 80065d0:	40021000 	.word	0x40021000
 80065d4:	40000c00 	.word	0x40000c00

080065d8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b086      	sub	sp, #24
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a23      	ldr	r2, [pc, #140]	@ (8006674 <HAL_TIM_Base_MspInit+0x9c>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d114      	bne.n	8006614 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80065ea:	4b23      	ldr	r3, [pc, #140]	@ (8006678 <HAL_TIM_Base_MspInit+0xa0>)
 80065ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065ee:	4a22      	ldr	r2, [pc, #136]	@ (8006678 <HAL_TIM_Base_MspInit+0xa0>)
 80065f0:	f043 0310 	orr.w	r3, r3, #16
 80065f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80065f6:	4b20      	ldr	r3, [pc, #128]	@ (8006678 <HAL_TIM_Base_MspInit+0xa0>)
 80065f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065fa:	f003 0310 	and.w	r3, r3, #16
 80065fe:	617b      	str	r3, [r7, #20]
 8006600:	697b      	ldr	r3, [r7, #20]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8006602:	2200      	movs	r2, #0
 8006604:	2100      	movs	r1, #0
 8006606:	2036      	movs	r0, #54	@ 0x36
 8006608:	f000 faae 	bl	8006b68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800660c:	2036      	movs	r0, #54	@ 0x36
 800660e:	f000 fad7 	bl	8006bc0 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM15_CLK_ENABLE();
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8006612:	e02a      	b.n	800666a <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM7)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4a18      	ldr	r2, [pc, #96]	@ (800667c <HAL_TIM_Base_MspInit+0xa4>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d114      	bne.n	8006648 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800661e:	4b16      	ldr	r3, [pc, #88]	@ (8006678 <HAL_TIM_Base_MspInit+0xa0>)
 8006620:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006622:	4a15      	ldr	r2, [pc, #84]	@ (8006678 <HAL_TIM_Base_MspInit+0xa0>)
 8006624:	f043 0320 	orr.w	r3, r3, #32
 8006628:	6593      	str	r3, [r2, #88]	@ 0x58
 800662a:	4b13      	ldr	r3, [pc, #76]	@ (8006678 <HAL_TIM_Base_MspInit+0xa0>)
 800662c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800662e:	f003 0320 	and.w	r3, r3, #32
 8006632:	613b      	str	r3, [r7, #16]
 8006634:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8006636:	2200      	movs	r2, #0
 8006638:	2100      	movs	r1, #0
 800663a:	2037      	movs	r0, #55	@ 0x37
 800663c:	f000 fa94 	bl	8006b68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8006640:	2037      	movs	r0, #55	@ 0x37
 8006642:	f000 fabd 	bl	8006bc0 <HAL_NVIC_EnableIRQ>
}
 8006646:	e010      	b.n	800666a <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM15)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a0c      	ldr	r2, [pc, #48]	@ (8006680 <HAL_TIM_Base_MspInit+0xa8>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d10b      	bne.n	800666a <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8006652:	4b09      	ldr	r3, [pc, #36]	@ (8006678 <HAL_TIM_Base_MspInit+0xa0>)
 8006654:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006656:	4a08      	ldr	r2, [pc, #32]	@ (8006678 <HAL_TIM_Base_MspInit+0xa0>)
 8006658:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800665c:	6613      	str	r3, [r2, #96]	@ 0x60
 800665e:	4b06      	ldr	r3, [pc, #24]	@ (8006678 <HAL_TIM_Base_MspInit+0xa0>)
 8006660:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006662:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006666:	60fb      	str	r3, [r7, #12]
 8006668:	68fb      	ldr	r3, [r7, #12]
}
 800666a:	bf00      	nop
 800666c:	3718      	adds	r7, #24
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}
 8006672:	bf00      	nop
 8006674:	40001000 	.word	0x40001000
 8006678:	40021000 	.word	0x40021000
 800667c:	40001400 	.word	0x40001400
 8006680:	40014000 	.word	0x40014000

08006684 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b08a      	sub	sp, #40	@ 0x28
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800668c:	f107 0314 	add.w	r3, r7, #20
 8006690:	2200      	movs	r2, #0
 8006692:	601a      	str	r2, [r3, #0]
 8006694:	605a      	str	r2, [r3, #4]
 8006696:	609a      	str	r2, [r3, #8]
 8006698:	60da      	str	r2, [r3, #12]
 800669a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM15)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4a20      	ldr	r2, [pc, #128]	@ (8006724 <HAL_TIM_MspPostInit+0xa0>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d139      	bne.n	800671a <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM15_MspPostInit 0 */

  /* USER CODE END TIM15_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80066a6:	4b20      	ldr	r3, [pc, #128]	@ (8006728 <HAL_TIM_MspPostInit+0xa4>)
 80066a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066aa:	4a1f      	ldr	r2, [pc, #124]	@ (8006728 <HAL_TIM_MspPostInit+0xa4>)
 80066ac:	f043 0301 	orr.w	r3, r3, #1
 80066b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80066b2:	4b1d      	ldr	r3, [pc, #116]	@ (8006728 <HAL_TIM_MspPostInit+0xa4>)
 80066b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066b6:	f003 0301 	and.w	r3, r3, #1
 80066ba:	613b      	str	r3, [r7, #16]
 80066bc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80066be:	4b1a      	ldr	r3, [pc, #104]	@ (8006728 <HAL_TIM_MspPostInit+0xa4>)
 80066c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066c2:	4a19      	ldr	r2, [pc, #100]	@ (8006728 <HAL_TIM_MspPostInit+0xa4>)
 80066c4:	f043 0302 	orr.w	r3, r3, #2
 80066c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80066ca:	4b17      	ldr	r3, [pc, #92]	@ (8006728 <HAL_TIM_MspPostInit+0xa4>)
 80066cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066ce:	f003 0302 	and.w	r3, r3, #2
 80066d2:	60fb      	str	r3, [r7, #12]
 80066d4:	68fb      	ldr	r3, [r7, #12]
    /**TIM15 GPIO Configuration
    PA2     ------> TIM15_CH1
    PB13     ------> TIM15_CH1N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80066d6:	2304      	movs	r3, #4
 80066d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80066da:	2302      	movs	r3, #2
 80066dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066de:	2300      	movs	r3, #0
 80066e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80066e2:	2300      	movs	r3, #0
 80066e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 80066e6:	230e      	movs	r3, #14
 80066e8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80066ea:	f107 0314 	add.w	r3, r7, #20
 80066ee:	4619      	mov	r1, r3
 80066f0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80066f4:	f000 fdce 	bl	8007294 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80066f8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80066fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80066fe:	2302      	movs	r3, #2
 8006700:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006702:	2300      	movs	r3, #0
 8006704:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006706:	2300      	movs	r3, #0
 8006708:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 800670a:	230e      	movs	r3, #14
 800670c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800670e:	f107 0314 	add.w	r3, r7, #20
 8006712:	4619      	mov	r1, r3
 8006714:	4805      	ldr	r0, [pc, #20]	@ (800672c <HAL_TIM_MspPostInit+0xa8>)
 8006716:	f000 fdbd 	bl	8007294 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 800671a:	bf00      	nop
 800671c:	3728      	adds	r7, #40	@ 0x28
 800671e:	46bd      	mov	sp, r7
 8006720:	bd80      	pop	{r7, pc}
 8006722:	bf00      	nop
 8006724:	40014000 	.word	0x40014000
 8006728:	40021000 	.word	0x40021000
 800672c:	48000400 	.word	0x48000400

08006730 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8006734:	4b14      	ldr	r3, [pc, #80]	@ (8006788 <MX_USART1_UART_Init+0x58>)
 8006736:	4a15      	ldr	r2, [pc, #84]	@ (800678c <MX_USART1_UART_Init+0x5c>)
 8006738:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800673a:	4b13      	ldr	r3, [pc, #76]	@ (8006788 <MX_USART1_UART_Init+0x58>)
 800673c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8006740:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006742:	4b11      	ldr	r3, [pc, #68]	@ (8006788 <MX_USART1_UART_Init+0x58>)
 8006744:	2200      	movs	r2, #0
 8006746:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006748:	4b0f      	ldr	r3, [pc, #60]	@ (8006788 <MX_USART1_UART_Init+0x58>)
 800674a:	2200      	movs	r2, #0
 800674c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800674e:	4b0e      	ldr	r3, [pc, #56]	@ (8006788 <MX_USART1_UART_Init+0x58>)
 8006750:	2200      	movs	r2, #0
 8006752:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006754:	4b0c      	ldr	r3, [pc, #48]	@ (8006788 <MX_USART1_UART_Init+0x58>)
 8006756:	220c      	movs	r2, #12
 8006758:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800675a:	4b0b      	ldr	r3, [pc, #44]	@ (8006788 <MX_USART1_UART_Init+0x58>)
 800675c:	2200      	movs	r2, #0
 800675e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006760:	4b09      	ldr	r3, [pc, #36]	@ (8006788 <MX_USART1_UART_Init+0x58>)
 8006762:	2200      	movs	r2, #0
 8006764:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006766:	4b08      	ldr	r3, [pc, #32]	@ (8006788 <MX_USART1_UART_Init+0x58>)
 8006768:	2200      	movs	r2, #0
 800676a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800676c:	4b06      	ldr	r3, [pc, #24]	@ (8006788 <MX_USART1_UART_Init+0x58>)
 800676e:	2200      	movs	r2, #0
 8006770:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8006772:	4805      	ldr	r0, [pc, #20]	@ (8006788 <MX_USART1_UART_Init+0x58>)
 8006774:	f007 fc72 	bl	800e05c <HAL_UART_Init>
 8006778:	4603      	mov	r3, r0
 800677a:	2b00      	cmp	r3, #0
 800677c:	d001      	beq.n	8006782 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800677e:	f7ff fab5 	bl	8005cec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8006782:	bf00      	nop
 8006784:	bd80      	pop	{r7, pc}
 8006786:	bf00      	nop
 8006788:	200010b4 	.word	0x200010b4
 800678c:	40013800 	.word	0x40013800

08006790 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b0ac      	sub	sp, #176	@ 0xb0
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006798:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800679c:	2200      	movs	r2, #0
 800679e:	601a      	str	r2, [r3, #0]
 80067a0:	605a      	str	r2, [r3, #4]
 80067a2:	609a      	str	r2, [r3, #8]
 80067a4:	60da      	str	r2, [r3, #12]
 80067a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80067a8:	f107 0314 	add.w	r3, r7, #20
 80067ac:	2288      	movs	r2, #136	@ 0x88
 80067ae:	2100      	movs	r1, #0
 80067b0:	4618      	mov	r0, r3
 80067b2:	f008 ff91 	bl	800f6d8 <memset>
  if(uartHandle->Instance==USART1)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4a21      	ldr	r2, [pc, #132]	@ (8006840 <HAL_UART_MspInit+0xb0>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d13a      	bne.n	8006836 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80067c0:	2301      	movs	r3, #1
 80067c2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80067c4:	2300      	movs	r3, #0
 80067c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80067c8:	f107 0314 	add.w	r3, r7, #20
 80067cc:	4618      	mov	r0, r3
 80067ce:	f002 fd8f 	bl	80092f0 <HAL_RCCEx_PeriphCLKConfig>
 80067d2:	4603      	mov	r3, r0
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d001      	beq.n	80067dc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80067d8:	f7ff fa88 	bl	8005cec <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80067dc:	4b19      	ldr	r3, [pc, #100]	@ (8006844 <HAL_UART_MspInit+0xb4>)
 80067de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80067e0:	4a18      	ldr	r2, [pc, #96]	@ (8006844 <HAL_UART_MspInit+0xb4>)
 80067e2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80067e6:	6613      	str	r3, [r2, #96]	@ 0x60
 80067e8:	4b16      	ldr	r3, [pc, #88]	@ (8006844 <HAL_UART_MspInit+0xb4>)
 80067ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80067ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80067f0:	613b      	str	r3, [r7, #16]
 80067f2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80067f4:	4b13      	ldr	r3, [pc, #76]	@ (8006844 <HAL_UART_MspInit+0xb4>)
 80067f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80067f8:	4a12      	ldr	r2, [pc, #72]	@ (8006844 <HAL_UART_MspInit+0xb4>)
 80067fa:	f043 0302 	orr.w	r3, r3, #2
 80067fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006800:	4b10      	ldr	r3, [pc, #64]	@ (8006844 <HAL_UART_MspInit+0xb4>)
 8006802:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006804:	f003 0302 	and.w	r3, r3, #2
 8006808:	60fb      	str	r3, [r7, #12]
 800680a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800680c:	23c0      	movs	r3, #192	@ 0xc0
 800680e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006812:	2302      	movs	r3, #2
 8006814:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006818:	2300      	movs	r3, #0
 800681a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800681e:	2303      	movs	r3, #3
 8006820:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006824:	2307      	movs	r3, #7
 8006826:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800682a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800682e:	4619      	mov	r1, r3
 8006830:	4805      	ldr	r0, [pc, #20]	@ (8006848 <HAL_UART_MspInit+0xb8>)
 8006832:	f000 fd2f 	bl	8007294 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8006836:	bf00      	nop
 8006838:	37b0      	adds	r7, #176	@ 0xb0
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}
 800683e:	bf00      	nop
 8006840:	40013800 	.word	0x40013800
 8006844:	40021000 	.word	0x40021000
 8006848:	48000400 	.word	0x48000400

0800684c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800684c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8006884 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8006850:	f7ff fc82 	bl	8006158 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006854:	480c      	ldr	r0, [pc, #48]	@ (8006888 <LoopForever+0x6>)
  ldr r1, =_edata
 8006856:	490d      	ldr	r1, [pc, #52]	@ (800688c <LoopForever+0xa>)
  ldr r2, =_sidata
 8006858:	4a0d      	ldr	r2, [pc, #52]	@ (8006890 <LoopForever+0xe>)
  movs r3, #0
 800685a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800685c:	e002      	b.n	8006864 <LoopCopyDataInit>

0800685e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800685e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006860:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006862:	3304      	adds	r3, #4

08006864 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006864:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006866:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006868:	d3f9      	bcc.n	800685e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800686a:	4a0a      	ldr	r2, [pc, #40]	@ (8006894 <LoopForever+0x12>)
  ldr r4, =_ebss
 800686c:	4c0a      	ldr	r4, [pc, #40]	@ (8006898 <LoopForever+0x16>)
  movs r3, #0
 800686e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006870:	e001      	b.n	8006876 <LoopFillZerobss>

08006872 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006872:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006874:	3204      	adds	r2, #4

08006876 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006876:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006878:	d3fb      	bcc.n	8006872 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800687a:	f008 ff91 	bl	800f7a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800687e:	f7ff f92b 	bl	8005ad8 <main>

08006882 <LoopForever>:

LoopForever:
    b LoopForever
 8006882:	e7fe      	b.n	8006882 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8006884:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8006888:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800688c:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8006890:	08010d74 	.word	0x08010d74
  ldr r2, =_sbss
 8006894:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8006898:	2000128c 	.word	0x2000128c

0800689c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800689c:	e7fe      	b.n	800689c <ADC1_2_IRQHandler>

0800689e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800689e:	b580      	push	{r7, lr}
 80068a0:	b082      	sub	sp, #8
 80068a2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80068a4:	2300      	movs	r3, #0
 80068a6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80068a8:	2003      	movs	r0, #3
 80068aa:	f000 f93d 	bl	8006b28 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80068ae:	200f      	movs	r0, #15
 80068b0:	f000 f80e 	bl	80068d0 <HAL_InitTick>
 80068b4:	4603      	mov	r3, r0
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d002      	beq.n	80068c0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80068ba:	2301      	movs	r3, #1
 80068bc:	71fb      	strb	r3, [r7, #7]
 80068be:	e001      	b.n	80068c4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80068c0:	f7ff fb16 	bl	8005ef0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80068c4:	79fb      	ldrb	r3, [r7, #7]
}
 80068c6:	4618      	mov	r0, r3
 80068c8:	3708      	adds	r7, #8
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}
	...

080068d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b084      	sub	sp, #16
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80068d8:	2300      	movs	r3, #0
 80068da:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80068dc:	4b17      	ldr	r3, [pc, #92]	@ (800693c <HAL_InitTick+0x6c>)
 80068de:	781b      	ldrb	r3, [r3, #0]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d023      	beq.n	800692c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80068e4:	4b16      	ldr	r3, [pc, #88]	@ (8006940 <HAL_InitTick+0x70>)
 80068e6:	681a      	ldr	r2, [r3, #0]
 80068e8:	4b14      	ldr	r3, [pc, #80]	@ (800693c <HAL_InitTick+0x6c>)
 80068ea:	781b      	ldrb	r3, [r3, #0]
 80068ec:	4619      	mov	r1, r3
 80068ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80068f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80068f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80068fa:	4618      	mov	r0, r3
 80068fc:	f000 f978 	bl	8006bf0 <HAL_SYSTICK_Config>
 8006900:	4603      	mov	r3, r0
 8006902:	2b00      	cmp	r3, #0
 8006904:	d10f      	bne.n	8006926 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2b0f      	cmp	r3, #15
 800690a:	d809      	bhi.n	8006920 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800690c:	2200      	movs	r2, #0
 800690e:	6879      	ldr	r1, [r7, #4]
 8006910:	f04f 30ff 	mov.w	r0, #4294967295
 8006914:	f000 f928 	bl	8006b68 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006918:	4a0a      	ldr	r2, [pc, #40]	@ (8006944 <HAL_InitTick+0x74>)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6013      	str	r3, [r2, #0]
 800691e:	e007      	b.n	8006930 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8006920:	2301      	movs	r3, #1
 8006922:	73fb      	strb	r3, [r7, #15]
 8006924:	e004      	b.n	8006930 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8006926:	2301      	movs	r3, #1
 8006928:	73fb      	strb	r3, [r7, #15]
 800692a:	e001      	b.n	8006930 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800692c:	2301      	movs	r3, #1
 800692e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8006930:	7bfb      	ldrb	r3, [r7, #15]
}
 8006932:	4618      	mov	r0, r3
 8006934:	3710      	adds	r7, #16
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}
 800693a:	bf00      	nop
 800693c:	2000001c 	.word	0x2000001c
 8006940:	20000014 	.word	0x20000014
 8006944:	20000018 	.word	0x20000018

08006948 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006948:	b480      	push	{r7}
 800694a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800694c:	4b06      	ldr	r3, [pc, #24]	@ (8006968 <HAL_IncTick+0x20>)
 800694e:	781b      	ldrb	r3, [r3, #0]
 8006950:	461a      	mov	r2, r3
 8006952:	4b06      	ldr	r3, [pc, #24]	@ (800696c <HAL_IncTick+0x24>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4413      	add	r3, r2
 8006958:	4a04      	ldr	r2, [pc, #16]	@ (800696c <HAL_IncTick+0x24>)
 800695a:	6013      	str	r3, [r2, #0]
}
 800695c:	bf00      	nop
 800695e:	46bd      	mov	sp, r7
 8006960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006964:	4770      	bx	lr
 8006966:	bf00      	nop
 8006968:	2000001c 	.word	0x2000001c
 800696c:	2000113c 	.word	0x2000113c

08006970 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006970:	b480      	push	{r7}
 8006972:	af00      	add	r7, sp, #0
  return uwTick;
 8006974:	4b03      	ldr	r3, [pc, #12]	@ (8006984 <HAL_GetTick+0x14>)
 8006976:	681b      	ldr	r3, [r3, #0]
}
 8006978:	4618      	mov	r0, r3
 800697a:	46bd      	mov	sp, r7
 800697c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006980:	4770      	bx	lr
 8006982:	bf00      	nop
 8006984:	2000113c 	.word	0x2000113c

08006988 <__NVIC_SetPriorityGrouping>:
{
 8006988:	b480      	push	{r7}
 800698a:	b085      	sub	sp, #20
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f003 0307 	and.w	r3, r3, #7
 8006996:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006998:	4b0c      	ldr	r3, [pc, #48]	@ (80069cc <__NVIC_SetPriorityGrouping+0x44>)
 800699a:	68db      	ldr	r3, [r3, #12]
 800699c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800699e:	68ba      	ldr	r2, [r7, #8]
 80069a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80069a4:	4013      	ands	r3, r2
 80069a6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80069b0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80069b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80069b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80069ba:	4a04      	ldr	r2, [pc, #16]	@ (80069cc <__NVIC_SetPriorityGrouping+0x44>)
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	60d3      	str	r3, [r2, #12]
}
 80069c0:	bf00      	nop
 80069c2:	3714      	adds	r7, #20
 80069c4:	46bd      	mov	sp, r7
 80069c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ca:	4770      	bx	lr
 80069cc:	e000ed00 	.word	0xe000ed00

080069d0 <__NVIC_GetPriorityGrouping>:
{
 80069d0:	b480      	push	{r7}
 80069d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80069d4:	4b04      	ldr	r3, [pc, #16]	@ (80069e8 <__NVIC_GetPriorityGrouping+0x18>)
 80069d6:	68db      	ldr	r3, [r3, #12]
 80069d8:	0a1b      	lsrs	r3, r3, #8
 80069da:	f003 0307 	and.w	r3, r3, #7
}
 80069de:	4618      	mov	r0, r3
 80069e0:	46bd      	mov	sp, r7
 80069e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e6:	4770      	bx	lr
 80069e8:	e000ed00 	.word	0xe000ed00

080069ec <__NVIC_EnableIRQ>:
{
 80069ec:	b480      	push	{r7}
 80069ee:	b083      	sub	sp, #12
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	4603      	mov	r3, r0
 80069f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80069f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	db0b      	blt.n	8006a16 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80069fe:	79fb      	ldrb	r3, [r7, #7]
 8006a00:	f003 021f 	and.w	r2, r3, #31
 8006a04:	4907      	ldr	r1, [pc, #28]	@ (8006a24 <__NVIC_EnableIRQ+0x38>)
 8006a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a0a:	095b      	lsrs	r3, r3, #5
 8006a0c:	2001      	movs	r0, #1
 8006a0e:	fa00 f202 	lsl.w	r2, r0, r2
 8006a12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006a16:	bf00      	nop
 8006a18:	370c      	adds	r7, #12
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a20:	4770      	bx	lr
 8006a22:	bf00      	nop
 8006a24:	e000e100 	.word	0xe000e100

08006a28 <__NVIC_SetPriority>:
{
 8006a28:	b480      	push	{r7}
 8006a2a:	b083      	sub	sp, #12
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	4603      	mov	r3, r0
 8006a30:	6039      	str	r1, [r7, #0]
 8006a32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006a34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	db0a      	blt.n	8006a52 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	b2da      	uxtb	r2, r3
 8006a40:	490c      	ldr	r1, [pc, #48]	@ (8006a74 <__NVIC_SetPriority+0x4c>)
 8006a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a46:	0112      	lsls	r2, r2, #4
 8006a48:	b2d2      	uxtb	r2, r2
 8006a4a:	440b      	add	r3, r1
 8006a4c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006a50:	e00a      	b.n	8006a68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	b2da      	uxtb	r2, r3
 8006a56:	4908      	ldr	r1, [pc, #32]	@ (8006a78 <__NVIC_SetPriority+0x50>)
 8006a58:	79fb      	ldrb	r3, [r7, #7]
 8006a5a:	f003 030f 	and.w	r3, r3, #15
 8006a5e:	3b04      	subs	r3, #4
 8006a60:	0112      	lsls	r2, r2, #4
 8006a62:	b2d2      	uxtb	r2, r2
 8006a64:	440b      	add	r3, r1
 8006a66:	761a      	strb	r2, [r3, #24]
}
 8006a68:	bf00      	nop
 8006a6a:	370c      	adds	r7, #12
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a72:	4770      	bx	lr
 8006a74:	e000e100 	.word	0xe000e100
 8006a78:	e000ed00 	.word	0xe000ed00

08006a7c <NVIC_EncodePriority>:
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b089      	sub	sp, #36	@ 0x24
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	60f8      	str	r0, [r7, #12]
 8006a84:	60b9      	str	r1, [r7, #8]
 8006a86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	f003 0307 	and.w	r3, r3, #7
 8006a8e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006a90:	69fb      	ldr	r3, [r7, #28]
 8006a92:	f1c3 0307 	rsb	r3, r3, #7
 8006a96:	2b04      	cmp	r3, #4
 8006a98:	bf28      	it	cs
 8006a9a:	2304      	movcs	r3, #4
 8006a9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006a9e:	69fb      	ldr	r3, [r7, #28]
 8006aa0:	3304      	adds	r3, #4
 8006aa2:	2b06      	cmp	r3, #6
 8006aa4:	d902      	bls.n	8006aac <NVIC_EncodePriority+0x30>
 8006aa6:	69fb      	ldr	r3, [r7, #28]
 8006aa8:	3b03      	subs	r3, #3
 8006aaa:	e000      	b.n	8006aae <NVIC_EncodePriority+0x32>
 8006aac:	2300      	movs	r3, #0
 8006aae:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006ab0:	f04f 32ff 	mov.w	r2, #4294967295
 8006ab4:	69bb      	ldr	r3, [r7, #24]
 8006ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8006aba:	43da      	mvns	r2, r3
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	401a      	ands	r2, r3
 8006ac0:	697b      	ldr	r3, [r7, #20]
 8006ac2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006ac4:	f04f 31ff 	mov.w	r1, #4294967295
 8006ac8:	697b      	ldr	r3, [r7, #20]
 8006aca:	fa01 f303 	lsl.w	r3, r1, r3
 8006ace:	43d9      	mvns	r1, r3
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006ad4:	4313      	orrs	r3, r2
}
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	3724      	adds	r7, #36	@ 0x24
 8006ada:	46bd      	mov	sp, r7
 8006adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae0:	4770      	bx	lr
	...

08006ae4 <SysTick_Config>:
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b082      	sub	sp, #8
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	3b01      	subs	r3, #1
 8006af0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006af4:	d301      	bcc.n	8006afa <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8006af6:	2301      	movs	r3, #1
 8006af8:	e00f      	b.n	8006b1a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006afa:	4a0a      	ldr	r2, [pc, #40]	@ (8006b24 <SysTick_Config+0x40>)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	3b01      	subs	r3, #1
 8006b00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006b02:	210f      	movs	r1, #15
 8006b04:	f04f 30ff 	mov.w	r0, #4294967295
 8006b08:	f7ff ff8e 	bl	8006a28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006b0c:	4b05      	ldr	r3, [pc, #20]	@ (8006b24 <SysTick_Config+0x40>)
 8006b0e:	2200      	movs	r2, #0
 8006b10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006b12:	4b04      	ldr	r3, [pc, #16]	@ (8006b24 <SysTick_Config+0x40>)
 8006b14:	2207      	movs	r2, #7
 8006b16:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8006b18:	2300      	movs	r3, #0
}
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	3708      	adds	r7, #8
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}
 8006b22:	bf00      	nop
 8006b24:	e000e010 	.word	0xe000e010

08006b28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b082      	sub	sp, #8
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2b07      	cmp	r3, #7
 8006b34:	d00f      	beq.n	8006b56 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2b06      	cmp	r3, #6
 8006b3a:	d00c      	beq.n	8006b56 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2b05      	cmp	r3, #5
 8006b40:	d009      	beq.n	8006b56 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2b04      	cmp	r3, #4
 8006b46:	d006      	beq.n	8006b56 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2b03      	cmp	r3, #3
 8006b4c:	d003      	beq.n	8006b56 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8006b4e:	21a6      	movs	r1, #166	@ 0xa6
 8006b50:	4804      	ldr	r0, [pc, #16]	@ (8006b64 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8006b52:	f7ff f8e3 	bl	8005d1c <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f7ff ff16 	bl	8006988 <__NVIC_SetPriorityGrouping>
}
 8006b5c:	bf00      	nop
 8006b5e:	3708      	adds	r7, #8
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bd80      	pop	{r7, pc}
 8006b64:	080109e4 	.word	0x080109e4

08006b68 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b086      	sub	sp, #24
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	4603      	mov	r3, r0
 8006b70:	60b9      	str	r1, [r7, #8]
 8006b72:	607a      	str	r2, [r7, #4]
 8006b74:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8006b76:	2300      	movs	r3, #0
 8006b78:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2b0f      	cmp	r3, #15
 8006b7e:	d903      	bls.n	8006b88 <HAL_NVIC_SetPriority+0x20>
 8006b80:	21be      	movs	r1, #190	@ 0xbe
 8006b82:	480e      	ldr	r0, [pc, #56]	@ (8006bbc <HAL_NVIC_SetPriority+0x54>)
 8006b84:	f7ff f8ca 	bl	8005d1c <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	2b0f      	cmp	r3, #15
 8006b8c:	d903      	bls.n	8006b96 <HAL_NVIC_SetPriority+0x2e>
 8006b8e:	21bf      	movs	r1, #191	@ 0xbf
 8006b90:	480a      	ldr	r0, [pc, #40]	@ (8006bbc <HAL_NVIC_SetPriority+0x54>)
 8006b92:	f7ff f8c3 	bl	8005d1c <assert_failed>

  prioritygroup = NVIC_GetPriorityGrouping();
 8006b96:	f7ff ff1b 	bl	80069d0 <__NVIC_GetPriorityGrouping>
 8006b9a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006b9c:	687a      	ldr	r2, [r7, #4]
 8006b9e:	68b9      	ldr	r1, [r7, #8]
 8006ba0:	6978      	ldr	r0, [r7, #20]
 8006ba2:	f7ff ff6b 	bl	8006a7c <NVIC_EncodePriority>
 8006ba6:	4602      	mov	r2, r0
 8006ba8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006bac:	4611      	mov	r1, r2
 8006bae:	4618      	mov	r0, r3
 8006bb0:	f7ff ff3a 	bl	8006a28 <__NVIC_SetPriority>
}
 8006bb4:	bf00      	nop
 8006bb6:	3718      	adds	r7, #24
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bd80      	pop	{r7, pc}
 8006bbc:	080109e4 	.word	0x080109e4

08006bc0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b082      	sub	sp, #8
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8006bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	da03      	bge.n	8006bda <HAL_NVIC_EnableIRQ+0x1a>
 8006bd2:	21d2      	movs	r1, #210	@ 0xd2
 8006bd4:	4805      	ldr	r0, [pc, #20]	@ (8006bec <HAL_NVIC_EnableIRQ+0x2c>)
 8006bd6:	f7ff f8a1 	bl	8005d1c <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006bde:	4618      	mov	r0, r3
 8006be0:	f7ff ff04 	bl	80069ec <__NVIC_EnableIRQ>
}
 8006be4:	bf00      	nop
 8006be6:	3708      	adds	r7, #8
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bd80      	pop	{r7, pc}
 8006bec:	080109e4 	.word	0x080109e4

08006bf0 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b082      	sub	sp, #8
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f7ff ff73 	bl	8006ae4 <SysTick_Config>
 8006bfe:	4603      	mov	r3, r0
}
 8006c00:	4618      	mov	r0, r3
 8006c02:	3708      	adds	r7, #8
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bd80      	pop	{r7, pc}

08006c08 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b084      	sub	sp, #16
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d101      	bne.n	8006c1a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8006c16:	2301      	movs	r3, #1
 8006c18:	e19d      	b.n	8006f56 <HAL_DMA_Init+0x34e>
  }

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4a79      	ldr	r2, [pc, #484]	@ (8006e04 <HAL_DMA_Init+0x1fc>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d044      	beq.n	8006cae <HAL_DMA_Init+0xa6>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a77      	ldr	r2, [pc, #476]	@ (8006e08 <HAL_DMA_Init+0x200>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d03f      	beq.n	8006cae <HAL_DMA_Init+0xa6>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4a76      	ldr	r2, [pc, #472]	@ (8006e0c <HAL_DMA_Init+0x204>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d03a      	beq.n	8006cae <HAL_DMA_Init+0xa6>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a74      	ldr	r2, [pc, #464]	@ (8006e10 <HAL_DMA_Init+0x208>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d035      	beq.n	8006cae <HAL_DMA_Init+0xa6>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4a73      	ldr	r2, [pc, #460]	@ (8006e14 <HAL_DMA_Init+0x20c>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d030      	beq.n	8006cae <HAL_DMA_Init+0xa6>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4a71      	ldr	r2, [pc, #452]	@ (8006e18 <HAL_DMA_Init+0x210>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d02b      	beq.n	8006cae <HAL_DMA_Init+0xa6>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4a70      	ldr	r2, [pc, #448]	@ (8006e1c <HAL_DMA_Init+0x214>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d026      	beq.n	8006cae <HAL_DMA_Init+0xa6>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4a6e      	ldr	r2, [pc, #440]	@ (8006e20 <HAL_DMA_Init+0x218>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d021      	beq.n	8006cae <HAL_DMA_Init+0xa6>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4a6d      	ldr	r2, [pc, #436]	@ (8006e24 <HAL_DMA_Init+0x21c>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d01c      	beq.n	8006cae <HAL_DMA_Init+0xa6>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4a6b      	ldr	r2, [pc, #428]	@ (8006e28 <HAL_DMA_Init+0x220>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d017      	beq.n	8006cae <HAL_DMA_Init+0xa6>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4a6a      	ldr	r2, [pc, #424]	@ (8006e2c <HAL_DMA_Init+0x224>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d012      	beq.n	8006cae <HAL_DMA_Init+0xa6>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4a68      	ldr	r2, [pc, #416]	@ (8006e30 <HAL_DMA_Init+0x228>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d00d      	beq.n	8006cae <HAL_DMA_Init+0xa6>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4a67      	ldr	r2, [pc, #412]	@ (8006e34 <HAL_DMA_Init+0x22c>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d008      	beq.n	8006cae <HAL_DMA_Init+0xa6>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4a65      	ldr	r2, [pc, #404]	@ (8006e38 <HAL_DMA_Init+0x230>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d003      	beq.n	8006cae <HAL_DMA_Init+0xa6>
 8006ca6:	21a5      	movs	r1, #165	@ 0xa5
 8006ca8:	4864      	ldr	r0, [pc, #400]	@ (8006e3c <HAL_DMA_Init+0x234>)
 8006caa:	f7ff f837 	bl	8005d1c <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	689b      	ldr	r3, [r3, #8]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d00c      	beq.n	8006cd0 <HAL_DMA_Init+0xc8>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	689b      	ldr	r3, [r3, #8]
 8006cba:	2b10      	cmp	r3, #16
 8006cbc:	d008      	beq.n	8006cd0 <HAL_DMA_Init+0xc8>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	689b      	ldr	r3, [r3, #8]
 8006cc2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006cc6:	d003      	beq.n	8006cd0 <HAL_DMA_Init+0xc8>
 8006cc8:	21a6      	movs	r1, #166	@ 0xa6
 8006cca:	485c      	ldr	r0, [pc, #368]	@ (8006e3c <HAL_DMA_Init+0x234>)
 8006ccc:	f7ff f826 	bl	8005d1c <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	68db      	ldr	r3, [r3, #12]
 8006cd4:	2b40      	cmp	r3, #64	@ 0x40
 8006cd6:	d007      	beq.n	8006ce8 <HAL_DMA_Init+0xe0>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	68db      	ldr	r3, [r3, #12]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d003      	beq.n	8006ce8 <HAL_DMA_Init+0xe0>
 8006ce0:	21a7      	movs	r1, #167	@ 0xa7
 8006ce2:	4856      	ldr	r0, [pc, #344]	@ (8006e3c <HAL_DMA_Init+0x234>)
 8006ce4:	f7ff f81a 	bl	8005d1c <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	691b      	ldr	r3, [r3, #16]
 8006cec:	2b80      	cmp	r3, #128	@ 0x80
 8006cee:	d007      	beq.n	8006d00 <HAL_DMA_Init+0xf8>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	691b      	ldr	r3, [r3, #16]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d003      	beq.n	8006d00 <HAL_DMA_Init+0xf8>
 8006cf8:	21a8      	movs	r1, #168	@ 0xa8
 8006cfa:	4850      	ldr	r0, [pc, #320]	@ (8006e3c <HAL_DMA_Init+0x234>)
 8006cfc:	f7ff f80e 	bl	8005d1c <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	695b      	ldr	r3, [r3, #20]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d00d      	beq.n	8006d24 <HAL_DMA_Init+0x11c>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	695b      	ldr	r3, [r3, #20]
 8006d0c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d10:	d008      	beq.n	8006d24 <HAL_DMA_Init+0x11c>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	695b      	ldr	r3, [r3, #20]
 8006d16:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d1a:	d003      	beq.n	8006d24 <HAL_DMA_Init+0x11c>
 8006d1c:	21a9      	movs	r1, #169	@ 0xa9
 8006d1e:	4847      	ldr	r0, [pc, #284]	@ (8006e3c <HAL_DMA_Init+0x234>)
 8006d20:	f7fe fffc 	bl	8005d1c <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	699b      	ldr	r3, [r3, #24]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d00d      	beq.n	8006d48 <HAL_DMA_Init+0x140>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	699b      	ldr	r3, [r3, #24]
 8006d30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d34:	d008      	beq.n	8006d48 <HAL_DMA_Init+0x140>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	699b      	ldr	r3, [r3, #24]
 8006d3a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006d3e:	d003      	beq.n	8006d48 <HAL_DMA_Init+0x140>
 8006d40:	21aa      	movs	r1, #170	@ 0xaa
 8006d42:	483e      	ldr	r0, [pc, #248]	@ (8006e3c <HAL_DMA_Init+0x234>)
 8006d44:	f7fe ffea 	bl	8005d1c <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	69db      	ldr	r3, [r3, #28]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d007      	beq.n	8006d60 <HAL_DMA_Init+0x158>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	69db      	ldr	r3, [r3, #28]
 8006d54:	2b20      	cmp	r3, #32
 8006d56:	d003      	beq.n	8006d60 <HAL_DMA_Init+0x158>
 8006d58:	21ab      	movs	r1, #171	@ 0xab
 8006d5a:	4838      	ldr	r0, [pc, #224]	@ (8006e3c <HAL_DMA_Init+0x234>)
 8006d5c:	f7fe ffde 	bl	8005d1c <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6a1b      	ldr	r3, [r3, #32]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d012      	beq.n	8006d8e <HAL_DMA_Init+0x186>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6a1b      	ldr	r3, [r3, #32]
 8006d6c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d70:	d00d      	beq.n	8006d8e <HAL_DMA_Init+0x186>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6a1b      	ldr	r3, [r3, #32]
 8006d76:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006d7a:	d008      	beq.n	8006d8e <HAL_DMA_Init+0x186>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6a1b      	ldr	r3, [r3, #32]
 8006d80:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006d84:	d003      	beq.n	8006d8e <HAL_DMA_Init+0x186>
 8006d86:	21ac      	movs	r1, #172	@ 0xac
 8006d88:	482c      	ldr	r0, [pc, #176]	@ (8006e3c <HAL_DMA_Init+0x234>)
 8006d8a:	f7fe ffc7 	bl	8005d1c <assert_failed>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d01f      	beq.n	8006dd6 <HAL_DMA_Init+0x1ce>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	685b      	ldr	r3, [r3, #4]
 8006d9a:	2b01      	cmp	r3, #1
 8006d9c:	d01b      	beq.n	8006dd6 <HAL_DMA_Init+0x1ce>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	685b      	ldr	r3, [r3, #4]
 8006da2:	2b02      	cmp	r3, #2
 8006da4:	d017      	beq.n	8006dd6 <HAL_DMA_Init+0x1ce>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	685b      	ldr	r3, [r3, #4]
 8006daa:	2b03      	cmp	r3, #3
 8006dac:	d013      	beq.n	8006dd6 <HAL_DMA_Init+0x1ce>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	685b      	ldr	r3, [r3, #4]
 8006db2:	2b04      	cmp	r3, #4
 8006db4:	d00f      	beq.n	8006dd6 <HAL_DMA_Init+0x1ce>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	685b      	ldr	r3, [r3, #4]
 8006dba:	2b05      	cmp	r3, #5
 8006dbc:	d00b      	beq.n	8006dd6 <HAL_DMA_Init+0x1ce>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	685b      	ldr	r3, [r3, #4]
 8006dc2:	2b06      	cmp	r3, #6
 8006dc4:	d007      	beq.n	8006dd6 <HAL_DMA_Init+0x1ce>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	685b      	ldr	r3, [r3, #4]
 8006dca:	2b07      	cmp	r3, #7
 8006dcc:	d003      	beq.n	8006dd6 <HAL_DMA_Init+0x1ce>
 8006dce:	21ae      	movs	r1, #174	@ 0xae
 8006dd0:	481a      	ldr	r0, [pc, #104]	@ (8006e3c <HAL_DMA_Init+0x234>)
 8006dd2:	f7fe ffa3 	bl	8005d1c <assert_failed>

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	461a      	mov	r2, r3
 8006ddc:	4b18      	ldr	r3, [pc, #96]	@ (8006e40 <HAL_DMA_Init+0x238>)
 8006dde:	429a      	cmp	r2, r3
 8006de0:	d836      	bhi.n	8006e50 <HAL_DMA_Init+0x248>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	461a      	mov	r2, r3
 8006de8:	4b16      	ldr	r3, [pc, #88]	@ (8006e44 <HAL_DMA_Init+0x23c>)
 8006dea:	4413      	add	r3, r2
 8006dec:	4a16      	ldr	r2, [pc, #88]	@ (8006e48 <HAL_DMA_Init+0x240>)
 8006dee:	fba2 2303 	umull	r2, r3, r2, r3
 8006df2:	091b      	lsrs	r3, r3, #4
 8006df4:	009a      	lsls	r2, r3, #2
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	4a13      	ldr	r2, [pc, #76]	@ (8006e4c <HAL_DMA_Init+0x244>)
 8006dfe:	641a      	str	r2, [r3, #64]	@ 0x40
 8006e00:	e035      	b.n	8006e6e <HAL_DMA_Init+0x266>
 8006e02:	bf00      	nop
 8006e04:	40020008 	.word	0x40020008
 8006e08:	4002001c 	.word	0x4002001c
 8006e0c:	40020030 	.word	0x40020030
 8006e10:	40020044 	.word	0x40020044
 8006e14:	40020058 	.word	0x40020058
 8006e18:	4002006c 	.word	0x4002006c
 8006e1c:	40020080 	.word	0x40020080
 8006e20:	40020408 	.word	0x40020408
 8006e24:	4002041c 	.word	0x4002041c
 8006e28:	40020430 	.word	0x40020430
 8006e2c:	40020444 	.word	0x40020444
 8006e30:	40020458 	.word	0x40020458
 8006e34:	4002046c 	.word	0x4002046c
 8006e38:	40020480 	.word	0x40020480
 8006e3c:	08010a20 	.word	0x08010a20
 8006e40:	40020407 	.word	0x40020407
 8006e44:	bffdfff8 	.word	0xbffdfff8
 8006e48:	cccccccd 	.word	0xcccccccd
 8006e4c:	40020000 	.word	0x40020000
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	461a      	mov	r2, r3
 8006e56:	4b42      	ldr	r3, [pc, #264]	@ (8006f60 <HAL_DMA_Init+0x358>)
 8006e58:	4413      	add	r3, r2
 8006e5a:	4a42      	ldr	r2, [pc, #264]	@ (8006f64 <HAL_DMA_Init+0x35c>)
 8006e5c:	fba2 2303 	umull	r2, r3, r2, r3
 8006e60:	091b      	lsrs	r3, r3, #4
 8006e62:	009a      	lsls	r2, r3, #2
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	4a3f      	ldr	r2, [pc, #252]	@ (8006f68 <HAL_DMA_Init+0x360>)
 8006e6c:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2202      	movs	r2, #2
 8006e72:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8006e84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e88:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006e92:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	691b      	ldr	r3, [r3, #16]
 8006e98:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006e9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	699b      	ldr	r3, [r3, #24]
 8006ea4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006eaa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6a1b      	ldr	r3, [r3, #32]
 8006eb0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006eb2:	68fa      	ldr	r2, [r7, #12]
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	68fa      	ldr	r2, [r7, #12]
 8006ebe:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	689b      	ldr	r3, [r3, #8]
 8006ec4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006ec8:	d039      	beq.n	8006f3e <HAL_DMA_Init+0x336>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ece:	4a27      	ldr	r2, [pc, #156]	@ (8006f6c <HAL_DMA_Init+0x364>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d11a      	bne.n	8006f0a <HAL_DMA_Init+0x302>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8006ed4:	4b26      	ldr	r3, [pc, #152]	@ (8006f70 <HAL_DMA_Init+0x368>)
 8006ed6:	681a      	ldr	r2, [r3, #0]
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006edc:	f003 031c 	and.w	r3, r3, #28
 8006ee0:	210f      	movs	r1, #15
 8006ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8006ee6:	43db      	mvns	r3, r3
 8006ee8:	4921      	ldr	r1, [pc, #132]	@ (8006f70 <HAL_DMA_Init+0x368>)
 8006eea:	4013      	ands	r3, r2
 8006eec:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8006eee:	4b20      	ldr	r3, [pc, #128]	@ (8006f70 <HAL_DMA_Init+0x368>)
 8006ef0:	681a      	ldr	r2, [r3, #0]
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6859      	ldr	r1, [r3, #4]
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006efa:	f003 031c 	and.w	r3, r3, #28
 8006efe:	fa01 f303 	lsl.w	r3, r1, r3
 8006f02:	491b      	ldr	r1, [pc, #108]	@ (8006f70 <HAL_DMA_Init+0x368>)
 8006f04:	4313      	orrs	r3, r2
 8006f06:	600b      	str	r3, [r1, #0]
 8006f08:	e019      	b.n	8006f3e <HAL_DMA_Init+0x336>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8006f0a:	4b1a      	ldr	r3, [pc, #104]	@ (8006f74 <HAL_DMA_Init+0x36c>)
 8006f0c:	681a      	ldr	r2, [r3, #0]
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f12:	f003 031c 	and.w	r3, r3, #28
 8006f16:	210f      	movs	r1, #15
 8006f18:	fa01 f303 	lsl.w	r3, r1, r3
 8006f1c:	43db      	mvns	r3, r3
 8006f1e:	4915      	ldr	r1, [pc, #84]	@ (8006f74 <HAL_DMA_Init+0x36c>)
 8006f20:	4013      	ands	r3, r2
 8006f22:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8006f24:	4b13      	ldr	r3, [pc, #76]	@ (8006f74 <HAL_DMA_Init+0x36c>)
 8006f26:	681a      	ldr	r2, [r3, #0]
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6859      	ldr	r1, [r3, #4]
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f30:	f003 031c 	and.w	r3, r3, #28
 8006f34:	fa01 f303 	lsl.w	r3, r1, r3
 8006f38:	490e      	ldr	r1, [pc, #56]	@ (8006f74 <HAL_DMA_Init+0x36c>)
 8006f3a:	4313      	orrs	r3, r2
 8006f3c:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2200      	movs	r2, #0
 8006f42:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2201      	movs	r2, #1
 8006f48:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2200      	movs	r2, #0
 8006f50:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8006f54:	2300      	movs	r3, #0
}
 8006f56:	4618      	mov	r0, r3
 8006f58:	3710      	adds	r7, #16
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bd80      	pop	{r7, pc}
 8006f5e:	bf00      	nop
 8006f60:	bffdfbf8 	.word	0xbffdfbf8
 8006f64:	cccccccd 	.word	0xcccccccd
 8006f68:	40020400 	.word	0x40020400
 8006f6c:	40020000 	.word	0x40020000
 8006f70:	400200a8 	.word	0x400200a8
 8006f74:	400204a8 	.word	0x400204a8

08006f78 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b086      	sub	sp, #24
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	60f8      	str	r0, [r7, #12]
 8006f80:	60b9      	str	r1, [r7, #8]
 8006f82:	607a      	str	r2, [r7, #4]
 8006f84:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006f86:	2300      	movs	r3, #0
 8006f88:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d003      	beq.n	8006f98 <HAL_DMA_Start_IT+0x20>
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f96:	d304      	bcc.n	8006fa2 <HAL_DMA_Start_IT+0x2a>
 8006f98:	f240 11df 	movw	r1, #479	@ 0x1df
 8006f9c:	482c      	ldr	r0, [pc, #176]	@ (8007050 <HAL_DMA_Start_IT+0xd8>)
 8006f9e:	f7fe febd 	bl	8005d1c <assert_failed>

  /* Process locked */
  __HAL_LOCK(hdma);
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006fa8:	2b01      	cmp	r3, #1
 8006faa:	d101      	bne.n	8006fb0 <HAL_DMA_Start_IT+0x38>
 8006fac:	2302      	movs	r3, #2
 8006fae:	e04b      	b.n	8007048 <HAL_DMA_Start_IT+0xd0>
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	2201      	movs	r2, #1
 8006fb4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006fbe:	b2db      	uxtb	r3, r3
 8006fc0:	2b01      	cmp	r3, #1
 8006fc2:	d13a      	bne.n	800703a <HAL_DMA_Start_IT+0xc2>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	2202      	movs	r2, #2
 8006fc8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	681a      	ldr	r2, [r3, #0]
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f022 0201 	bic.w	r2, r2, #1
 8006fe0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	687a      	ldr	r2, [r7, #4]
 8006fe6:	68b9      	ldr	r1, [r7, #8]
 8006fe8:	68f8      	ldr	r0, [r7, #12]
 8006fea:	f000 f923 	bl	8007234 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d008      	beq.n	8007008 <HAL_DMA_Start_IT+0x90>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	681a      	ldr	r2, [r3, #0]
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f042 020e 	orr.w	r2, r2, #14
 8007004:	601a      	str	r2, [r3, #0]
 8007006:	e00f      	b.n	8007028 <HAL_DMA_Start_IT+0xb0>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	681a      	ldr	r2, [r3, #0]
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f022 0204 	bic.w	r2, r2, #4
 8007016:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	681a      	ldr	r2, [r3, #0]
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f042 020a 	orr.w	r2, r2, #10
 8007026:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	681a      	ldr	r2, [r3, #0]
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f042 0201 	orr.w	r2, r2, #1
 8007036:	601a      	str	r2, [r3, #0]
 8007038:	e005      	b.n	8007046 <HAL_DMA_Start_IT+0xce>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	2200      	movs	r2, #0
 800703e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8007042:	2302      	movs	r3, #2
 8007044:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8007046:	7dfb      	ldrb	r3, [r7, #23]
}
 8007048:	4618      	mov	r0, r3
 800704a:	3718      	adds	r7, #24
 800704c:	46bd      	mov	sp, r7
 800704e:	bd80      	pop	{r7, pc}
 8007050:	08010a20 	.word	0x08010a20

08007054 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b084      	sub	sp, #16
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800705c:	2300      	movs	r3, #0
 800705e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007066:	b2db      	uxtb	r3, r3
 8007068:	2b02      	cmp	r3, #2
 800706a:	d005      	beq.n	8007078 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2204      	movs	r2, #4
 8007070:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8007072:	2301      	movs	r3, #1
 8007074:	73fb      	strb	r3, [r7, #15]
 8007076:	e029      	b.n	80070cc <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	681a      	ldr	r2, [r3, #0]
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f022 020e 	bic.w	r2, r2, #14
 8007086:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	681a      	ldr	r2, [r3, #0]
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f022 0201 	bic.w	r2, r2, #1
 8007096:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800709c:	f003 021c 	and.w	r2, r3, #28
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070a4:	2101      	movs	r1, #1
 80070a6:	fa01 f202 	lsl.w	r2, r1, r2
 80070aa:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2201      	movs	r2, #1
 80070b0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2200      	movs	r2, #0
 80070b8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d003      	beq.n	80070cc <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070c8:	6878      	ldr	r0, [r7, #4]
 80070ca:	4798      	blx	r3
    }
  }
  return status;
 80070cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80070ce:	4618      	mov	r0, r3
 80070d0:	3710      	adds	r7, #16
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bd80      	pop	{r7, pc}

080070d6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80070d6:	b580      	push	{r7, lr}
 80070d8:	b084      	sub	sp, #16
 80070da:	af00      	add	r7, sp, #0
 80070dc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070f2:	f003 031c 	and.w	r3, r3, #28
 80070f6:	2204      	movs	r2, #4
 80070f8:	409a      	lsls	r2, r3
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	4013      	ands	r3, r2
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d026      	beq.n	8007150 <HAL_DMA_IRQHandler+0x7a>
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	f003 0304 	and.w	r3, r3, #4
 8007108:	2b00      	cmp	r3, #0
 800710a:	d021      	beq.n	8007150 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f003 0320 	and.w	r3, r3, #32
 8007116:	2b00      	cmp	r3, #0
 8007118:	d107      	bne.n	800712a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	681a      	ldr	r2, [r3, #0]
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f022 0204 	bic.w	r2, r2, #4
 8007128:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800712e:	f003 021c 	and.w	r2, r3, #28
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007136:	2104      	movs	r1, #4
 8007138:	fa01 f202 	lsl.w	r2, r1, r2
 800713c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007142:	2b00      	cmp	r3, #0
 8007144:	d071      	beq.n	800722a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800714e:	e06c      	b.n	800722a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007154:	f003 031c 	and.w	r3, r3, #28
 8007158:	2202      	movs	r2, #2
 800715a:	409a      	lsls	r2, r3
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	4013      	ands	r3, r2
 8007160:	2b00      	cmp	r3, #0
 8007162:	d02e      	beq.n	80071c2 <HAL_DMA_IRQHandler+0xec>
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	f003 0302 	and.w	r3, r3, #2
 800716a:	2b00      	cmp	r3, #0
 800716c:	d029      	beq.n	80071c2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f003 0320 	and.w	r3, r3, #32
 8007178:	2b00      	cmp	r3, #0
 800717a:	d10b      	bne.n	8007194 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	681a      	ldr	r2, [r3, #0]
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f022 020a 	bic.w	r2, r2, #10
 800718a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2201      	movs	r2, #1
 8007190:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007198:	f003 021c 	and.w	r2, r3, #28
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071a0:	2102      	movs	r1, #2
 80071a2:	fa01 f202 	lsl.w	r2, r1, r2
 80071a6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2200      	movs	r2, #0
 80071ac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d038      	beq.n	800722a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80071c0:	e033      	b.n	800722a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071c6:	f003 031c 	and.w	r3, r3, #28
 80071ca:	2208      	movs	r2, #8
 80071cc:	409a      	lsls	r2, r3
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	4013      	ands	r3, r2
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d02a      	beq.n	800722c <HAL_DMA_IRQHandler+0x156>
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	f003 0308 	and.w	r3, r3, #8
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d025      	beq.n	800722c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	681a      	ldr	r2, [r3, #0]
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f022 020e 	bic.w	r2, r2, #14
 80071ee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071f4:	f003 021c 	and.w	r2, r3, #28
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071fc:	2101      	movs	r1, #1
 80071fe:	fa01 f202 	lsl.w	r2, r1, r2
 8007202:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2201      	movs	r2, #1
 8007208:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2201      	movs	r2, #1
 800720e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2200      	movs	r2, #0
 8007216:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800721e:	2b00      	cmp	r3, #0
 8007220:	d004      	beq.n	800722c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800722a:	bf00      	nop
 800722c:	bf00      	nop
}
 800722e:	3710      	adds	r7, #16
 8007230:	46bd      	mov	sp, r7
 8007232:	bd80      	pop	{r7, pc}

08007234 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007234:	b480      	push	{r7}
 8007236:	b085      	sub	sp, #20
 8007238:	af00      	add	r7, sp, #0
 800723a:	60f8      	str	r0, [r7, #12]
 800723c:	60b9      	str	r1, [r7, #8]
 800723e:	607a      	str	r2, [r7, #4]
 8007240:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007246:	f003 021c 	and.w	r2, r3, #28
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800724e:	2101      	movs	r1, #1
 8007250:	fa01 f202 	lsl.w	r2, r1, r2
 8007254:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	683a      	ldr	r2, [r7, #0]
 800725c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	689b      	ldr	r3, [r3, #8]
 8007262:	2b10      	cmp	r3, #16
 8007264:	d108      	bne.n	8007278 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	687a      	ldr	r2, [r7, #4]
 800726c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	68ba      	ldr	r2, [r7, #8]
 8007274:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8007276:	e007      	b.n	8007288 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	68ba      	ldr	r2, [r7, #8]
 800727e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	687a      	ldr	r2, [r7, #4]
 8007286:	60da      	str	r2, [r3, #12]
}
 8007288:	bf00      	nop
 800728a:	3714      	adds	r7, #20
 800728c:	46bd      	mov	sp, r7
 800728e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007292:	4770      	bx	lr

08007294 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b086      	sub	sp, #24
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
 800729c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800729e:	2300      	movs	r3, #0
 80072a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80072a8:	d01f      	beq.n	80072ea <HAL_GPIO_Init+0x56>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	4a3c      	ldr	r2, [pc, #240]	@ (80073a0 <HAL_GPIO_Init+0x10c>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d01b      	beq.n	80072ea <HAL_GPIO_Init+0x56>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	4a3b      	ldr	r2, [pc, #236]	@ (80073a4 <HAL_GPIO_Init+0x110>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d017      	beq.n	80072ea <HAL_GPIO_Init+0x56>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	4a3a      	ldr	r2, [pc, #232]	@ (80073a8 <HAL_GPIO_Init+0x114>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d013      	beq.n	80072ea <HAL_GPIO_Init+0x56>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	4a39      	ldr	r2, [pc, #228]	@ (80073ac <HAL_GPIO_Init+0x118>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d00f      	beq.n	80072ea <HAL_GPIO_Init+0x56>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	4a38      	ldr	r2, [pc, #224]	@ (80073b0 <HAL_GPIO_Init+0x11c>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d00b      	beq.n	80072ea <HAL_GPIO_Init+0x56>
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	4a37      	ldr	r2, [pc, #220]	@ (80073b4 <HAL_GPIO_Init+0x120>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d007      	beq.n	80072ea <HAL_GPIO_Init+0x56>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	4a36      	ldr	r2, [pc, #216]	@ (80073b8 <HAL_GPIO_Init+0x124>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d003      	beq.n	80072ea <HAL_GPIO_Init+0x56>
 80072e2:	21aa      	movs	r1, #170	@ 0xaa
 80072e4:	4835      	ldr	r0, [pc, #212]	@ (80073bc <HAL_GPIO_Init+0x128>)
 80072e6:	f7fe fd19 	bl	8005d1c <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	b29b      	uxth	r3, r3
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d004      	beq.n	80072fe <HAL_GPIO_Init+0x6a>
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80072fc:	d303      	bcc.n	8007306 <HAL_GPIO_Init+0x72>
 80072fe:	21ab      	movs	r1, #171	@ 0xab
 8007300:	482e      	ldr	r0, [pc, #184]	@ (80073bc <HAL_GPIO_Init+0x128>)
 8007302:	f7fe fd0b 	bl	8005d1c <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	685b      	ldr	r3, [r3, #4]
 800730a:	2b00      	cmp	r3, #0
 800730c:	f000 823d 	beq.w	800778a <HAL_GPIO_Init+0x4f6>
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	685b      	ldr	r3, [r3, #4]
 8007314:	2b01      	cmp	r3, #1
 8007316:	f000 8238 	beq.w	800778a <HAL_GPIO_Init+0x4f6>
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	685b      	ldr	r3, [r3, #4]
 800731e:	2b11      	cmp	r3, #17
 8007320:	f000 8233 	beq.w	800778a <HAL_GPIO_Init+0x4f6>
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	685b      	ldr	r3, [r3, #4]
 8007328:	2b02      	cmp	r3, #2
 800732a:	f000 822e 	beq.w	800778a <HAL_GPIO_Init+0x4f6>
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	685b      	ldr	r3, [r3, #4]
 8007332:	2b12      	cmp	r3, #18
 8007334:	f000 8229 	beq.w	800778a <HAL_GPIO_Init+0x4f6>
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	685b      	ldr	r3, [r3, #4]
 800733c:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 8007340:	f000 8223 	beq.w	800778a <HAL_GPIO_Init+0x4f6>
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	685b      	ldr	r3, [r3, #4]
 8007348:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 800734c:	f000 821d 	beq.w	800778a <HAL_GPIO_Init+0x4f6>
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	685b      	ldr	r3, [r3, #4]
 8007354:	f5b3 1f44 	cmp.w	r3, #3211264	@ 0x310000
 8007358:	f000 8217 	beq.w	800778a <HAL_GPIO_Init+0x4f6>
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	685b      	ldr	r3, [r3, #4]
 8007360:	f5b3 1f90 	cmp.w	r3, #1179648	@ 0x120000
 8007364:	f000 8211 	beq.w	800778a <HAL_GPIO_Init+0x4f6>
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	685b      	ldr	r3, [r3, #4]
 800736c:	f5b3 1f08 	cmp.w	r3, #2228224	@ 0x220000
 8007370:	f000 820b 	beq.w	800778a <HAL_GPIO_Init+0x4f6>
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	685b      	ldr	r3, [r3, #4]
 8007378:	f5b3 1f48 	cmp.w	r3, #3276800	@ 0x320000
 800737c:	f000 8205 	beq.w	800778a <HAL_GPIO_Init+0x4f6>
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	685b      	ldr	r3, [r3, #4]
 8007384:	2b03      	cmp	r3, #3
 8007386:	f000 8200 	beq.w	800778a <HAL_GPIO_Init+0x4f6>
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	685b      	ldr	r3, [r3, #4]
 800738e:	2b0b      	cmp	r3, #11
 8007390:	f000 81fb 	beq.w	800778a <HAL_GPIO_Init+0x4f6>
 8007394:	21ac      	movs	r1, #172	@ 0xac
 8007396:	4809      	ldr	r0, [pc, #36]	@ (80073bc <HAL_GPIO_Init+0x128>)
 8007398:	f7fe fcc0 	bl	8005d1c <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800739c:	e1f5      	b.n	800778a <HAL_GPIO_Init+0x4f6>
 800739e:	bf00      	nop
 80073a0:	48000400 	.word	0x48000400
 80073a4:	48000800 	.word	0x48000800
 80073a8:	48000c00 	.word	0x48000c00
 80073ac:	48001000 	.word	0x48001000
 80073b0:	48001400 	.word	0x48001400
 80073b4:	48001800 	.word	0x48001800
 80073b8:	48001c00 	.word	0x48001c00
 80073bc:	08010a58 	.word	0x08010a58
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	681a      	ldr	r2, [r3, #0]
 80073c4:	2101      	movs	r1, #1
 80073c6:	697b      	ldr	r3, [r7, #20]
 80073c8:	fa01 f303 	lsl.w	r3, r1, r3
 80073cc:	4013      	ands	r3, r2
 80073ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	f000 81d6 	beq.w	8007784 <HAL_GPIO_Init+0x4f0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	685b      	ldr	r3, [r3, #4]
 80073dc:	f003 0303 	and.w	r3, r3, #3
 80073e0:	2b01      	cmp	r3, #1
 80073e2:	d005      	beq.n	80073f0 <HAL_GPIO_Init+0x15c>
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	685b      	ldr	r3, [r3, #4]
 80073e8:	f003 0303 	and.w	r3, r3, #3
 80073ec:	2b02      	cmp	r3, #2
 80073ee:	d144      	bne.n	800747a <HAL_GPIO_Init+0x1e6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	68db      	ldr	r3, [r3, #12]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d00f      	beq.n	8007418 <HAL_GPIO_Init+0x184>
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	68db      	ldr	r3, [r3, #12]
 80073fc:	2b01      	cmp	r3, #1
 80073fe:	d00b      	beq.n	8007418 <HAL_GPIO_Init+0x184>
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	68db      	ldr	r3, [r3, #12]
 8007404:	2b02      	cmp	r3, #2
 8007406:	d007      	beq.n	8007418 <HAL_GPIO_Init+0x184>
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	68db      	ldr	r3, [r3, #12]
 800740c:	2b03      	cmp	r3, #3
 800740e:	d003      	beq.n	8007418 <HAL_GPIO_Init+0x184>
 8007410:	21bb      	movs	r1, #187	@ 0xbb
 8007412:	489c      	ldr	r0, [pc, #624]	@ (8007684 <HAL_GPIO_Init+0x3f0>)
 8007414:	f7fe fc82 	bl	8005d1c <assert_failed>

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	689b      	ldr	r3, [r3, #8]
 800741c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800741e:	697b      	ldr	r3, [r7, #20]
 8007420:	005b      	lsls	r3, r3, #1
 8007422:	2203      	movs	r2, #3
 8007424:	fa02 f303 	lsl.w	r3, r2, r3
 8007428:	43db      	mvns	r3, r3
 800742a:	693a      	ldr	r2, [r7, #16]
 800742c:	4013      	ands	r3, r2
 800742e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	68da      	ldr	r2, [r3, #12]
 8007434:	697b      	ldr	r3, [r7, #20]
 8007436:	005b      	lsls	r3, r3, #1
 8007438:	fa02 f303 	lsl.w	r3, r2, r3
 800743c:	693a      	ldr	r2, [r7, #16]
 800743e:	4313      	orrs	r3, r2
 8007440:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	693a      	ldr	r2, [r7, #16]
 8007446:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	685b      	ldr	r3, [r3, #4]
 800744c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800744e:	2201      	movs	r2, #1
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	fa02 f303 	lsl.w	r3, r2, r3
 8007456:	43db      	mvns	r3, r3
 8007458:	693a      	ldr	r2, [r7, #16]
 800745a:	4013      	ands	r3, r2
 800745c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	685b      	ldr	r3, [r3, #4]
 8007462:	091b      	lsrs	r3, r3, #4
 8007464:	f003 0201 	and.w	r2, r3, #1
 8007468:	697b      	ldr	r3, [r7, #20]
 800746a:	fa02 f303 	lsl.w	r3, r2, r3
 800746e:	693a      	ldr	r2, [r7, #16]
 8007470:	4313      	orrs	r3, r2
 8007472:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	693a      	ldr	r2, [r7, #16]
 8007478:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	685b      	ldr	r3, [r3, #4]
 800747e:	f003 0303 	and.w	r3, r3, #3
 8007482:	2b03      	cmp	r3, #3
 8007484:	d118      	bne.n	80074b8 <HAL_GPIO_Init+0x224>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800748a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800748c:	2201      	movs	r2, #1
 800748e:	697b      	ldr	r3, [r7, #20]
 8007490:	fa02 f303 	lsl.w	r3, r2, r3
 8007494:	43db      	mvns	r3, r3
 8007496:	693a      	ldr	r2, [r7, #16]
 8007498:	4013      	ands	r3, r2
 800749a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	685b      	ldr	r3, [r3, #4]
 80074a0:	08db      	lsrs	r3, r3, #3
 80074a2:	f003 0201 	and.w	r2, r3, #1
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	fa02 f303 	lsl.w	r3, r2, r3
 80074ac:	693a      	ldr	r2, [r7, #16]
 80074ae:	4313      	orrs	r3, r2
 80074b0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	693a      	ldr	r2, [r7, #16]
 80074b6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	685b      	ldr	r3, [r3, #4]
 80074bc:	f003 0303 	and.w	r3, r3, #3
 80074c0:	2b03      	cmp	r3, #3
 80074c2:	d027      	beq.n	8007514 <HAL_GPIO_Init+0x280>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	689b      	ldr	r3, [r3, #8]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d00b      	beq.n	80074e4 <HAL_GPIO_Init+0x250>
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	689b      	ldr	r3, [r3, #8]
 80074d0:	2b01      	cmp	r3, #1
 80074d2:	d007      	beq.n	80074e4 <HAL_GPIO_Init+0x250>
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	689b      	ldr	r3, [r3, #8]
 80074d8:	2b02      	cmp	r3, #2
 80074da:	d003      	beq.n	80074e4 <HAL_GPIO_Init+0x250>
 80074dc:	21dc      	movs	r1, #220	@ 0xdc
 80074de:	4869      	ldr	r0, [pc, #420]	@ (8007684 <HAL_GPIO_Init+0x3f0>)
 80074e0:	f7fe fc1c 	bl	8005d1c <assert_failed>

        temp = GPIOx->PUPDR;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	68db      	ldr	r3, [r3, #12]
 80074e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80074ea:	697b      	ldr	r3, [r7, #20]
 80074ec:	005b      	lsls	r3, r3, #1
 80074ee:	2203      	movs	r2, #3
 80074f0:	fa02 f303 	lsl.w	r3, r2, r3
 80074f4:	43db      	mvns	r3, r3
 80074f6:	693a      	ldr	r2, [r7, #16]
 80074f8:	4013      	ands	r3, r2
 80074fa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	689a      	ldr	r2, [r3, #8]
 8007500:	697b      	ldr	r3, [r7, #20]
 8007502:	005b      	lsls	r3, r3, #1
 8007504:	fa02 f303 	lsl.w	r3, r2, r3
 8007508:	693a      	ldr	r2, [r7, #16]
 800750a:	4313      	orrs	r3, r2
 800750c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	693a      	ldr	r2, [r7, #16]
 8007512:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	685b      	ldr	r3, [r3, #4]
 8007518:	f003 0303 	and.w	r3, r3, #3
 800751c:	2b02      	cmp	r3, #2
 800751e:	d14f      	bne.n	80075c0 <HAL_GPIO_Init+0x32c>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8007526:	d01f      	beq.n	8007568 <HAL_GPIO_Init+0x2d4>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	4a57      	ldr	r2, [pc, #348]	@ (8007688 <HAL_GPIO_Init+0x3f4>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d01b      	beq.n	8007568 <HAL_GPIO_Init+0x2d4>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	4a56      	ldr	r2, [pc, #344]	@ (800768c <HAL_GPIO_Init+0x3f8>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d017      	beq.n	8007568 <HAL_GPIO_Init+0x2d4>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	4a55      	ldr	r2, [pc, #340]	@ (8007690 <HAL_GPIO_Init+0x3fc>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d013      	beq.n	8007568 <HAL_GPIO_Init+0x2d4>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	4a54      	ldr	r2, [pc, #336]	@ (8007694 <HAL_GPIO_Init+0x400>)
 8007544:	4293      	cmp	r3, r2
 8007546:	d00f      	beq.n	8007568 <HAL_GPIO_Init+0x2d4>
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	4a53      	ldr	r2, [pc, #332]	@ (8007698 <HAL_GPIO_Init+0x404>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d00b      	beq.n	8007568 <HAL_GPIO_Init+0x2d4>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	4a52      	ldr	r2, [pc, #328]	@ (800769c <HAL_GPIO_Init+0x408>)
 8007554:	4293      	cmp	r3, r2
 8007556:	d007      	beq.n	8007568 <HAL_GPIO_Init+0x2d4>
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	4a51      	ldr	r2, [pc, #324]	@ (80076a0 <HAL_GPIO_Init+0x40c>)
 800755c:	4293      	cmp	r3, r2
 800755e:	d003      	beq.n	8007568 <HAL_GPIO_Init+0x2d4>
 8007560:	21e8      	movs	r1, #232	@ 0xe8
 8007562:	4848      	ldr	r0, [pc, #288]	@ (8007684 <HAL_GPIO_Init+0x3f0>)
 8007564:	f7fe fbda 	bl	8005d1c <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	691b      	ldr	r3, [r3, #16]
 800756c:	2b0f      	cmp	r3, #15
 800756e:	d903      	bls.n	8007578 <HAL_GPIO_Init+0x2e4>
 8007570:	21e9      	movs	r1, #233	@ 0xe9
 8007572:	4844      	ldr	r0, [pc, #272]	@ (8007684 <HAL_GPIO_Init+0x3f0>)
 8007574:	f7fe fbd2 	bl	8005d1c <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8007578:	697b      	ldr	r3, [r7, #20]
 800757a:	08da      	lsrs	r2, r3, #3
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	3208      	adds	r2, #8
 8007580:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007584:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8007586:	697b      	ldr	r3, [r7, #20]
 8007588:	f003 0307 	and.w	r3, r3, #7
 800758c:	009b      	lsls	r3, r3, #2
 800758e:	220f      	movs	r2, #15
 8007590:	fa02 f303 	lsl.w	r3, r2, r3
 8007594:	43db      	mvns	r3, r3
 8007596:	693a      	ldr	r2, [r7, #16]
 8007598:	4013      	ands	r3, r2
 800759a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	691a      	ldr	r2, [r3, #16]
 80075a0:	697b      	ldr	r3, [r7, #20]
 80075a2:	f003 0307 	and.w	r3, r3, #7
 80075a6:	009b      	lsls	r3, r3, #2
 80075a8:	fa02 f303 	lsl.w	r3, r2, r3
 80075ac:	693a      	ldr	r2, [r7, #16]
 80075ae:	4313      	orrs	r3, r2
 80075b0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80075b2:	697b      	ldr	r3, [r7, #20]
 80075b4:	08da      	lsrs	r2, r3, #3
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	3208      	adds	r2, #8
 80075ba:	6939      	ldr	r1, [r7, #16]
 80075bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80075c6:	697b      	ldr	r3, [r7, #20]
 80075c8:	005b      	lsls	r3, r3, #1
 80075ca:	2203      	movs	r2, #3
 80075cc:	fa02 f303 	lsl.w	r3, r2, r3
 80075d0:	43db      	mvns	r3, r3
 80075d2:	693a      	ldr	r2, [r7, #16]
 80075d4:	4013      	ands	r3, r2
 80075d6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	685b      	ldr	r3, [r3, #4]
 80075dc:	f003 0203 	and.w	r2, r3, #3
 80075e0:	697b      	ldr	r3, [r7, #20]
 80075e2:	005b      	lsls	r3, r3, #1
 80075e4:	fa02 f303 	lsl.w	r3, r2, r3
 80075e8:	693a      	ldr	r2, [r7, #16]
 80075ea:	4313      	orrs	r3, r2
 80075ec:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	693a      	ldr	r2, [r7, #16]
 80075f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	685b      	ldr	r3, [r3, #4]
 80075f8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	f000 80c1 	beq.w	8007784 <HAL_GPIO_Init+0x4f0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007602:	4b28      	ldr	r3, [pc, #160]	@ (80076a4 <HAL_GPIO_Init+0x410>)
 8007604:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007606:	4a27      	ldr	r2, [pc, #156]	@ (80076a4 <HAL_GPIO_Init+0x410>)
 8007608:	f043 0301 	orr.w	r3, r3, #1
 800760c:	6613      	str	r3, [r2, #96]	@ 0x60
 800760e:	4b25      	ldr	r3, [pc, #148]	@ (80076a4 <HAL_GPIO_Init+0x410>)
 8007610:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007612:	f003 0301 	and.w	r3, r3, #1
 8007616:	60bb      	str	r3, [r7, #8]
 8007618:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800761a:	4a23      	ldr	r2, [pc, #140]	@ (80076a8 <HAL_GPIO_Init+0x414>)
 800761c:	697b      	ldr	r3, [r7, #20]
 800761e:	089b      	lsrs	r3, r3, #2
 8007620:	3302      	adds	r3, #2
 8007622:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007626:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8007628:	697b      	ldr	r3, [r7, #20]
 800762a:	f003 0303 	and.w	r3, r3, #3
 800762e:	009b      	lsls	r3, r3, #2
 8007630:	220f      	movs	r2, #15
 8007632:	fa02 f303 	lsl.w	r3, r2, r3
 8007636:	43db      	mvns	r3, r3
 8007638:	693a      	ldr	r2, [r7, #16]
 800763a:	4013      	ands	r3, r2
 800763c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8007644:	d03a      	beq.n	80076bc <HAL_GPIO_Init+0x428>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	4a0f      	ldr	r2, [pc, #60]	@ (8007688 <HAL_GPIO_Init+0x3f4>)
 800764a:	4293      	cmp	r3, r2
 800764c:	d034      	beq.n	80076b8 <HAL_GPIO_Init+0x424>
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	4a0e      	ldr	r2, [pc, #56]	@ (800768c <HAL_GPIO_Init+0x3f8>)
 8007652:	4293      	cmp	r3, r2
 8007654:	d02e      	beq.n	80076b4 <HAL_GPIO_Init+0x420>
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	4a0d      	ldr	r2, [pc, #52]	@ (8007690 <HAL_GPIO_Init+0x3fc>)
 800765a:	4293      	cmp	r3, r2
 800765c:	d028      	beq.n	80076b0 <HAL_GPIO_Init+0x41c>
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	4a0c      	ldr	r2, [pc, #48]	@ (8007694 <HAL_GPIO_Init+0x400>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d022      	beq.n	80076ac <HAL_GPIO_Init+0x418>
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	4a0b      	ldr	r2, [pc, #44]	@ (8007698 <HAL_GPIO_Init+0x404>)
 800766a:	4293      	cmp	r3, r2
 800766c:	d007      	beq.n	800767e <HAL_GPIO_Init+0x3ea>
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	4a0a      	ldr	r2, [pc, #40]	@ (800769c <HAL_GPIO_Init+0x408>)
 8007672:	4293      	cmp	r3, r2
 8007674:	d101      	bne.n	800767a <HAL_GPIO_Init+0x3e6>
 8007676:	2306      	movs	r3, #6
 8007678:	e021      	b.n	80076be <HAL_GPIO_Init+0x42a>
 800767a:	2307      	movs	r3, #7
 800767c:	e01f      	b.n	80076be <HAL_GPIO_Init+0x42a>
 800767e:	2305      	movs	r3, #5
 8007680:	e01d      	b.n	80076be <HAL_GPIO_Init+0x42a>
 8007682:	bf00      	nop
 8007684:	08010a58 	.word	0x08010a58
 8007688:	48000400 	.word	0x48000400
 800768c:	48000800 	.word	0x48000800
 8007690:	48000c00 	.word	0x48000c00
 8007694:	48001000 	.word	0x48001000
 8007698:	48001400 	.word	0x48001400
 800769c:	48001800 	.word	0x48001800
 80076a0:	48001c00 	.word	0x48001c00
 80076a4:	40021000 	.word	0x40021000
 80076a8:	40010000 	.word	0x40010000
 80076ac:	2304      	movs	r3, #4
 80076ae:	e006      	b.n	80076be <HAL_GPIO_Init+0x42a>
 80076b0:	2303      	movs	r3, #3
 80076b2:	e004      	b.n	80076be <HAL_GPIO_Init+0x42a>
 80076b4:	2302      	movs	r3, #2
 80076b6:	e002      	b.n	80076be <HAL_GPIO_Init+0x42a>
 80076b8:	2301      	movs	r3, #1
 80076ba:	e000      	b.n	80076be <HAL_GPIO_Init+0x42a>
 80076bc:	2300      	movs	r3, #0
 80076be:	697a      	ldr	r2, [r7, #20]
 80076c0:	f002 0203 	and.w	r2, r2, #3
 80076c4:	0092      	lsls	r2, r2, #2
 80076c6:	4093      	lsls	r3, r2
 80076c8:	693a      	ldr	r2, [r7, #16]
 80076ca:	4313      	orrs	r3, r2
 80076cc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80076ce:	4935      	ldr	r1, [pc, #212]	@ (80077a4 <HAL_GPIO_Init+0x510>)
 80076d0:	697b      	ldr	r3, [r7, #20]
 80076d2:	089b      	lsrs	r3, r3, #2
 80076d4:	3302      	adds	r3, #2
 80076d6:	693a      	ldr	r2, [r7, #16]
 80076d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80076dc:	4b32      	ldr	r3, [pc, #200]	@ (80077a8 <HAL_GPIO_Init+0x514>)
 80076de:	689b      	ldr	r3, [r3, #8]
 80076e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	43db      	mvns	r3, r3
 80076e6:	693a      	ldr	r2, [r7, #16]
 80076e8:	4013      	ands	r3, r2
 80076ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	685b      	ldr	r3, [r3, #4]
 80076f0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d003      	beq.n	8007700 <HAL_GPIO_Init+0x46c>
        {
          temp |= iocurrent;
 80076f8:	693a      	ldr	r2, [r7, #16]
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	4313      	orrs	r3, r2
 80076fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007700:	4a29      	ldr	r2, [pc, #164]	@ (80077a8 <HAL_GPIO_Init+0x514>)
 8007702:	693b      	ldr	r3, [r7, #16]
 8007704:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8007706:	4b28      	ldr	r3, [pc, #160]	@ (80077a8 <HAL_GPIO_Init+0x514>)
 8007708:	68db      	ldr	r3, [r3, #12]
 800770a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	43db      	mvns	r3, r3
 8007710:	693a      	ldr	r2, [r7, #16]
 8007712:	4013      	ands	r3, r2
 8007714:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	685b      	ldr	r3, [r3, #4]
 800771a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800771e:	2b00      	cmp	r3, #0
 8007720:	d003      	beq.n	800772a <HAL_GPIO_Init+0x496>
        {
          temp |= iocurrent;
 8007722:	693a      	ldr	r2, [r7, #16]
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	4313      	orrs	r3, r2
 8007728:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800772a:	4a1f      	ldr	r2, [pc, #124]	@ (80077a8 <HAL_GPIO_Init+0x514>)
 800772c:	693b      	ldr	r3, [r7, #16]
 800772e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8007730:	4b1d      	ldr	r3, [pc, #116]	@ (80077a8 <HAL_GPIO_Init+0x514>)
 8007732:	685b      	ldr	r3, [r3, #4]
 8007734:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	43db      	mvns	r3, r3
 800773a:	693a      	ldr	r2, [r7, #16]
 800773c:	4013      	ands	r3, r2
 800773e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	685b      	ldr	r3, [r3, #4]
 8007744:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007748:	2b00      	cmp	r3, #0
 800774a:	d003      	beq.n	8007754 <HAL_GPIO_Init+0x4c0>
        {
          temp |= iocurrent;
 800774c:	693a      	ldr	r2, [r7, #16]
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	4313      	orrs	r3, r2
 8007752:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8007754:	4a14      	ldr	r2, [pc, #80]	@ (80077a8 <HAL_GPIO_Init+0x514>)
 8007756:	693b      	ldr	r3, [r7, #16]
 8007758:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800775a:	4b13      	ldr	r3, [pc, #76]	@ (80077a8 <HAL_GPIO_Init+0x514>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	43db      	mvns	r3, r3
 8007764:	693a      	ldr	r2, [r7, #16]
 8007766:	4013      	ands	r3, r2
 8007768:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	685b      	ldr	r3, [r3, #4]
 800776e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007772:	2b00      	cmp	r3, #0
 8007774:	d003      	beq.n	800777e <HAL_GPIO_Init+0x4ea>
        {
          temp |= iocurrent;
 8007776:	693a      	ldr	r2, [r7, #16]
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	4313      	orrs	r3, r2
 800777c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800777e:	4a0a      	ldr	r2, [pc, #40]	@ (80077a8 <HAL_GPIO_Init+0x514>)
 8007780:	693b      	ldr	r3, [r7, #16]
 8007782:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8007784:	697b      	ldr	r3, [r7, #20]
 8007786:	3301      	adds	r3, #1
 8007788:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	681a      	ldr	r2, [r3, #0]
 800778e:	697b      	ldr	r3, [r7, #20]
 8007790:	fa22 f303 	lsr.w	r3, r2, r3
 8007794:	2b00      	cmp	r3, #0
 8007796:	f47f ae13 	bne.w	80073c0 <HAL_GPIO_Init+0x12c>
  }
}
 800779a:	bf00      	nop
 800779c:	bf00      	nop
 800779e:	3718      	adds	r7, #24
 80077a0:	46bd      	mov	sp, r7
 80077a2:	bd80      	pop	{r7, pc}
 80077a4:	40010000 	.word	0x40010000
 80077a8:	40010400 	.word	0x40010400

080077ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b084      	sub	sp, #16
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
 80077b4:	460b      	mov	r3, r1
 80077b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80077b8:	887b      	ldrh	r3, [r7, #2]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d104      	bne.n	80077c8 <HAL_GPIO_ReadPin+0x1c>
 80077be:	f44f 71c7 	mov.w	r1, #398	@ 0x18e
 80077c2:	4809      	ldr	r0, [pc, #36]	@ (80077e8 <HAL_GPIO_ReadPin+0x3c>)
 80077c4:	f7fe faaa 	bl	8005d1c <assert_failed>

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	691a      	ldr	r2, [r3, #16]
 80077cc:	887b      	ldrh	r3, [r7, #2]
 80077ce:	4013      	ands	r3, r2
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d002      	beq.n	80077da <HAL_GPIO_ReadPin+0x2e>
  {
    bitstatus = GPIO_PIN_SET;
 80077d4:	2301      	movs	r3, #1
 80077d6:	73fb      	strb	r3, [r7, #15]
 80077d8:	e001      	b.n	80077de <HAL_GPIO_ReadPin+0x32>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80077da:	2300      	movs	r3, #0
 80077dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80077de:	7bfb      	ldrb	r3, [r7, #15]
}
 80077e0:	4618      	mov	r0, r3
 80077e2:	3710      	adds	r7, #16
 80077e4:	46bd      	mov	sp, r7
 80077e6:	bd80      	pop	{r7, pc}
 80077e8:	08010a58 	.word	0x08010a58

080077ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b082      	sub	sp, #8
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
 80077f4:	460b      	mov	r3, r1
 80077f6:	807b      	strh	r3, [r7, #2]
 80077f8:	4613      	mov	r3, r2
 80077fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80077fc:	887b      	ldrh	r3, [r7, #2]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d104      	bne.n	800780c <HAL_GPIO_WritePin+0x20>
 8007802:	f44f 71d7 	mov.w	r1, #430	@ 0x1ae
 8007806:	480e      	ldr	r0, [pc, #56]	@ (8007840 <HAL_GPIO_WritePin+0x54>)
 8007808:	f7fe fa88 	bl	8005d1c <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800780c:	787b      	ldrb	r3, [r7, #1]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d007      	beq.n	8007822 <HAL_GPIO_WritePin+0x36>
 8007812:	787b      	ldrb	r3, [r7, #1]
 8007814:	2b01      	cmp	r3, #1
 8007816:	d004      	beq.n	8007822 <HAL_GPIO_WritePin+0x36>
 8007818:	f240 11af 	movw	r1, #431	@ 0x1af
 800781c:	4808      	ldr	r0, [pc, #32]	@ (8007840 <HAL_GPIO_WritePin+0x54>)
 800781e:	f7fe fa7d 	bl	8005d1c <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8007822:	787b      	ldrb	r3, [r7, #1]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d003      	beq.n	8007830 <HAL_GPIO_WritePin+0x44>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007828:	887a      	ldrh	r2, [r7, #2]
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800782e:	e002      	b.n	8007836 <HAL_GPIO_WritePin+0x4a>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007830:	887a      	ldrh	r2, [r7, #2]
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8007836:	bf00      	nop
 8007838:	3708      	adds	r7, #8
 800783a:	46bd      	mov	sp, r7
 800783c:	bd80      	pop	{r7, pc}
 800783e:	bf00      	nop
 8007840:	08010a58 	.word	0x08010a58

08007844 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b084      	sub	sp, #16
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
 800784c:	460b      	mov	r3, r1
 800784e:	807b      	strh	r3, [r7, #2]
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8007850:	887b      	ldrh	r3, [r7, #2]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d104      	bne.n	8007860 <HAL_GPIO_TogglePin+0x1c>
 8007856:	f44f 71e3 	mov.w	r1, #454	@ 0x1c6
 800785a:	480a      	ldr	r0, [pc, #40]	@ (8007884 <HAL_GPIO_TogglePin+0x40>)
 800785c:	f7fe fa5e 	bl	8005d1c <assert_failed>

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	695b      	ldr	r3, [r3, #20]
 8007864:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007866:	887a      	ldrh	r2, [r7, #2]
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	4013      	ands	r3, r2
 800786c:	041a      	lsls	r2, r3, #16
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	43d9      	mvns	r1, r3
 8007872:	887b      	ldrh	r3, [r7, #2]
 8007874:	400b      	ands	r3, r1
 8007876:	431a      	orrs	r2, r3
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	619a      	str	r2, [r3, #24]
}
 800787c:	bf00      	nop
 800787e:	3710      	adds	r7, #16
 8007880:	46bd      	mov	sp, r7
 8007882:	bd80      	pop	{r7, pc}
 8007884:	08010a58 	.word	0x08010a58

08007888 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b082      	sub	sp, #8
 800788c:	af00      	add	r7, sp, #0
 800788e:	4603      	mov	r3, r0
 8007890:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8007892:	4b08      	ldr	r3, [pc, #32]	@ (80078b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007894:	695a      	ldr	r2, [r3, #20]
 8007896:	88fb      	ldrh	r3, [r7, #6]
 8007898:	4013      	ands	r3, r2
 800789a:	2b00      	cmp	r3, #0
 800789c:	d006      	beq.n	80078ac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800789e:	4a05      	ldr	r2, [pc, #20]	@ (80078b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80078a0:	88fb      	ldrh	r3, [r7, #6]
 80078a2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80078a4:	88fb      	ldrh	r3, [r7, #6]
 80078a6:	4618      	mov	r0, r3
 80078a8:	f7fe f9ce 	bl	8005c48 <HAL_GPIO_EXTI_Callback>
  }
}
 80078ac:	bf00      	nop
 80078ae:	3708      	adds	r7, #8
 80078b0:	46bd      	mov	sp, r7
 80078b2:	bd80      	pop	{r7, pc}
 80078b4:	40010400 	.word	0x40010400

080078b8 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b084      	sub	sp, #16
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d101      	bne.n	80078ca <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 80078c6:	2301      	movs	r3, #1
 80078c8:	e1f3      	b.n	8007cb2 <HAL_LPTIM_Init+0x3fa>
  }

  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	4a8e      	ldr	r2, [pc, #568]	@ (8007b08 <HAL_LPTIM_Init+0x250>)
 80078d0:	4293      	cmp	r3, r2
 80078d2:	d008      	beq.n	80078e6 <HAL_LPTIM_Init+0x2e>
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	4a8c      	ldr	r2, [pc, #560]	@ (8007b0c <HAL_LPTIM_Init+0x254>)
 80078da:	4293      	cmp	r3, r2
 80078dc:	d003      	beq.n	80078e6 <HAL_LPTIM_Init+0x2e>
 80078de:	21fc      	movs	r1, #252	@ 0xfc
 80078e0:	488b      	ldr	r0, [pc, #556]	@ (8007b10 <HAL_LPTIM_Init+0x258>)
 80078e2:	f7fe fa1b 	bl	8005d1c <assert_failed>

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	685b      	ldr	r3, [r3, #4]
 80078ea:	2b01      	cmp	r3, #1
 80078ec:	d007      	beq.n	80078fe <HAL_LPTIM_Init+0x46>
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	685b      	ldr	r3, [r3, #4]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d003      	beq.n	80078fe <HAL_LPTIM_Init+0x46>
 80078f6:	21fe      	movs	r1, #254	@ 0xfe
 80078f8:	4885      	ldr	r0, [pc, #532]	@ (8007b10 <HAL_LPTIM_Init+0x258>)
 80078fa:	f7fe fa0f 	bl	8005d1c <assert_failed>
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	689b      	ldr	r3, [r3, #8]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d026      	beq.n	8007954 <HAL_LPTIM_Init+0x9c>
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	689b      	ldr	r3, [r3, #8]
 800790a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800790e:	d021      	beq.n	8007954 <HAL_LPTIM_Init+0x9c>
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	689b      	ldr	r3, [r3, #8]
 8007914:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007918:	d01c      	beq.n	8007954 <HAL_LPTIM_Init+0x9c>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	689b      	ldr	r3, [r3, #8]
 800791e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007922:	d017      	beq.n	8007954 <HAL_LPTIM_Init+0x9c>
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	689b      	ldr	r3, [r3, #8]
 8007928:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800792c:	d012      	beq.n	8007954 <HAL_LPTIM_Init+0x9c>
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	689b      	ldr	r3, [r3, #8]
 8007932:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8007936:	d00d      	beq.n	8007954 <HAL_LPTIM_Init+0x9c>
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	689b      	ldr	r3, [r3, #8]
 800793c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007940:	d008      	beq.n	8007954 <HAL_LPTIM_Init+0x9c>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	689b      	ldr	r3, [r3, #8]
 8007946:	f5b3 6f60 	cmp.w	r3, #3584	@ 0xe00
 800794a:	d003      	beq.n	8007954 <HAL_LPTIM_Init+0x9c>
 800794c:	21ff      	movs	r1, #255	@ 0xff
 800794e:	4870      	ldr	r0, [pc, #448]	@ (8007b10 <HAL_LPTIM_Init+0x258>)
 8007950:	f7fe f9e4 	bl	8005d1c <assert_failed>
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	685b      	ldr	r3, [r3, #4]
 8007958:	2b01      	cmp	r3, #1
 800795a:	d004      	beq.n	8007966 <HAL_LPTIM_Init+0xae>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007960:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007964:	d125      	bne.n	80079b2 <HAL_LPTIM_Init+0xfa>
  {
    assert_param(IS_LPTIM_CLOCK_POLARITY(hlptim->Init.UltraLowPowerClock.Polarity));
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	68db      	ldr	r3, [r3, #12]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d00c      	beq.n	8007988 <HAL_LPTIM_Init+0xd0>
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	68db      	ldr	r3, [r3, #12]
 8007972:	2b02      	cmp	r3, #2
 8007974:	d008      	beq.n	8007988 <HAL_LPTIM_Init+0xd0>
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	68db      	ldr	r3, [r3, #12]
 800797a:	2b04      	cmp	r3, #4
 800797c:	d004      	beq.n	8007988 <HAL_LPTIM_Init+0xd0>
 800797e:	f240 1103 	movw	r1, #259	@ 0x103
 8007982:	4863      	ldr	r0, [pc, #396]	@ (8007b10 <HAL_LPTIM_Init+0x258>)
 8007984:	f7fe f9ca 	bl	8005d1c <assert_failed>
    assert_param(IS_LPTIM_CLOCK_SAMPLE_TIME(hlptim->Init.UltraLowPowerClock.SampleTime));
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	691b      	ldr	r3, [r3, #16]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d010      	beq.n	80079b2 <HAL_LPTIM_Init+0xfa>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	691b      	ldr	r3, [r3, #16]
 8007994:	2b08      	cmp	r3, #8
 8007996:	d00c      	beq.n	80079b2 <HAL_LPTIM_Init+0xfa>
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	691b      	ldr	r3, [r3, #16]
 800799c:	2b10      	cmp	r3, #16
 800799e:	d008      	beq.n	80079b2 <HAL_LPTIM_Init+0xfa>
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	691b      	ldr	r3, [r3, #16]
 80079a4:	2b18      	cmp	r3, #24
 80079a6:	d004      	beq.n	80079b2 <HAL_LPTIM_Init+0xfa>
 80079a8:	f44f 7182 	mov.w	r1, #260	@ 0x104
 80079ac:	4858      	ldr	r0, [pc, #352]	@ (8007b10 <HAL_LPTIM_Init+0x258>)
 80079ae:	f7fe f9b5 	bl	8005d1c <assert_failed>
  }
  assert_param(IS_LPTIM_TRG_SOURCE(hlptim->Init.Trigger.Source));
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	695b      	ldr	r3, [r3, #20]
 80079b6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d02b      	beq.n	8007a16 <HAL_LPTIM_Init+0x15e>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	695b      	ldr	r3, [r3, #20]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d027      	beq.n	8007a16 <HAL_LPTIM_Init+0x15e>
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	695b      	ldr	r3, [r3, #20]
 80079ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80079ce:	d022      	beq.n	8007a16 <HAL_LPTIM_Init+0x15e>
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	695b      	ldr	r3, [r3, #20]
 80079d4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80079d8:	d01d      	beq.n	8007a16 <HAL_LPTIM_Init+0x15e>
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	695b      	ldr	r3, [r3, #20]
 80079de:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80079e2:	d018      	beq.n	8007a16 <HAL_LPTIM_Init+0x15e>
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	695b      	ldr	r3, [r3, #20]
 80079e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80079ec:	d013      	beq.n	8007a16 <HAL_LPTIM_Init+0x15e>
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	695b      	ldr	r3, [r3, #20]
 80079f2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80079f6:	d00e      	beq.n	8007a16 <HAL_LPTIM_Init+0x15e>
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	695b      	ldr	r3, [r3, #20]
 80079fc:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8007a00:	d009      	beq.n	8007a16 <HAL_LPTIM_Init+0x15e>
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	695b      	ldr	r3, [r3, #20]
 8007a06:	f5b3 4f60 	cmp.w	r3, #57344	@ 0xe000
 8007a0a:	d004      	beq.n	8007a16 <HAL_LPTIM_Init+0x15e>
 8007a0c:	f44f 7183 	mov.w	r1, #262	@ 0x106
 8007a10:	483f      	ldr	r0, [pc, #252]	@ (8007b10 <HAL_LPTIM_Init+0x258>)
 8007a12:	f7fe f983 	bl	8005d1c <assert_failed>
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	695b      	ldr	r3, [r3, #20]
 8007a1a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d028      	beq.n	8007a74 <HAL_LPTIM_Init+0x1bc>
  {
    assert_param(IS_LPTIM_EXT_TRG_POLARITY(hlptim->Init.Trigger.ActiveEdge));
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	699b      	ldr	r3, [r3, #24]
 8007a26:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007a2a:	d00e      	beq.n	8007a4a <HAL_LPTIM_Init+0x192>
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	699b      	ldr	r3, [r3, #24]
 8007a30:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007a34:	d009      	beq.n	8007a4a <HAL_LPTIM_Init+0x192>
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	699b      	ldr	r3, [r3, #24]
 8007a3a:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8007a3e:	d004      	beq.n	8007a4a <HAL_LPTIM_Init+0x192>
 8007a40:	f240 1109 	movw	r1, #265	@ 0x109
 8007a44:	4832      	ldr	r0, [pc, #200]	@ (8007b10 <HAL_LPTIM_Init+0x258>)
 8007a46:	f7fe f969 	bl	8005d1c <assert_failed>
    assert_param(IS_LPTIM_TRIG_SAMPLE_TIME(hlptim->Init.Trigger.SampleTime));
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	69db      	ldr	r3, [r3, #28]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d010      	beq.n	8007a74 <HAL_LPTIM_Init+0x1bc>
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	69db      	ldr	r3, [r3, #28]
 8007a56:	2b40      	cmp	r3, #64	@ 0x40
 8007a58:	d00c      	beq.n	8007a74 <HAL_LPTIM_Init+0x1bc>
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	69db      	ldr	r3, [r3, #28]
 8007a5e:	2b80      	cmp	r3, #128	@ 0x80
 8007a60:	d008      	beq.n	8007a74 <HAL_LPTIM_Init+0x1bc>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	69db      	ldr	r3, [r3, #28]
 8007a66:	2bc0      	cmp	r3, #192	@ 0xc0
 8007a68:	d004      	beq.n	8007a74 <HAL_LPTIM_Init+0x1bc>
 8007a6a:	f44f 7185 	mov.w	r1, #266	@ 0x10a
 8007a6e:	4828      	ldr	r0, [pc, #160]	@ (8007b10 <HAL_LPTIM_Init+0x258>)
 8007a70:	f7fe f954 	bl	8005d1c <assert_failed>
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6a1b      	ldr	r3, [r3, #32]
 8007a78:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007a7c:	d008      	beq.n	8007a90 <HAL_LPTIM_Init+0x1d8>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6a1b      	ldr	r3, [r3, #32]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d004      	beq.n	8007a90 <HAL_LPTIM_Init+0x1d8>
 8007a86:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 8007a8a:	4821      	ldr	r0, [pc, #132]	@ (8007b10 <HAL_LPTIM_Init+0x258>)
 8007a8c:	f7fe f946 	bl	8005d1c <assert_failed>
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d009      	beq.n	8007aac <HAL_LPTIM_Init+0x1f4>
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a9c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007aa0:	d004      	beq.n	8007aac <HAL_LPTIM_Init+0x1f4>
 8007aa2:	f240 110d 	movw	r1, #269	@ 0x10d
 8007aa6:	481a      	ldr	r0, [pc, #104]	@ (8007b10 <HAL_LPTIM_Init+0x258>)
 8007aa8:	f7fe f938 	bl	8005d1c <assert_failed>
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d009      	beq.n	8007ac8 <HAL_LPTIM_Init+0x210>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ab8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007abc:	d004      	beq.n	8007ac8 <HAL_LPTIM_Init+0x210>
 8007abe:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 8007ac2:	4813      	ldr	r0, [pc, #76]	@ (8007b10 <HAL_LPTIM_Init+0x258>)
 8007ac4:	f7fe f92a 	bl	8005d1c <assert_failed>
#if defined(LPTIM_RCR_REP)
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));
#endif

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8007ace:	b2db      	uxtb	r3, r3
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d106      	bne.n	8007ae2 <HAL_LPTIM_Init+0x22a>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	f7fd ff95 	bl	8005a0c <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2202      	movs	r2, #2
 8007ae6:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  }

#endif

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	68db      	ldr	r3, [r3, #12]
 8007af0:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	685b      	ldr	r3, [r3, #4]
 8007af6:	2b01      	cmp	r3, #1
 8007af8:	d00c      	beq.n	8007b14 <HAL_LPTIM_Init+0x25c>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007afe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007b02:	d10b      	bne.n	8007b1c <HAL_LPTIM_Init+0x264>
 8007b04:	e006      	b.n	8007b14 <HAL_LPTIM_Init+0x25c>
 8007b06:	bf00      	nop
 8007b08:	40007c00 	.word	0x40007c00
 8007b0c:	40009400 	.word	0x40009400
 8007b10:	08010a94 	.word	0x08010a94
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	f023 031e 	bic.w	r3, r3, #30
 8007b1a:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	695b      	ldr	r3, [r3, #20]
 8007b20:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007b24:	4293      	cmp	r3, r2
 8007b26:	d005      	beq.n	8007b34 <HAL_LPTIM_Init+0x27c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8007b2e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007b32:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8007b34:	68fa      	ldr	r2, [r7, #12]
 8007b36:	4b61      	ldr	r3, [pc, #388]	@ (8007cbc <HAL_LPTIM_Init+0x404>)
 8007b38:	4013      	ands	r3, r2
 8007b3a:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8007b44:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8007b4a:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              hlptim->Init.OutputPolarity  |
 8007b50:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              hlptim->Init.UpdateMode      |
 8007b56:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8007b58:	68fa      	ldr	r2, [r7, #12]
 8007b5a:	4313      	orrs	r3, r2
 8007b5c:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	685b      	ldr	r3, [r3, #4]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d107      	bne.n	8007b76 <HAL_LPTIM_Init+0x2be>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8007b6e:	4313      	orrs	r3, r2
 8007b70:	68fa      	ldr	r2, [r7, #12]
 8007b72:	4313      	orrs	r3, r2
 8007b74:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	685b      	ldr	r3, [r3, #4]
 8007b7a:	2b01      	cmp	r3, #1
 8007b7c:	d004      	beq.n	8007b88 <HAL_LPTIM_Init+0x2d0>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b82:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007b86:	d107      	bne.n	8007b98 <HAL_LPTIM_Init+0x2e0>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8007b90:	4313      	orrs	r3, r2
 8007b92:	68fa      	ldr	r2, [r7, #12]
 8007b94:	4313      	orrs	r3, r2
 8007b96:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	695b      	ldr	r3, [r3, #20]
 8007b9c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d00a      	beq.n	8007bba <HAL_LPTIM_Init+0x302>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8007bac:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8007bb2:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8007bb4:	68fa      	ldr	r2, [r7, #12]
 8007bb6:	4313      	orrs	r3, r2
 8007bb8:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	68fa      	ldr	r2, [r7, #12]
 8007bc0:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	4a3e      	ldr	r2, [pc, #248]	@ (8007cc0 <HAL_LPTIM_Init+0x408>)
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	d141      	bne.n	8007c50 <HAL_LPTIM_Init+0x398>
  {
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	4a3b      	ldr	r2, [pc, #236]	@ (8007cc0 <HAL_LPTIM_Init+0x408>)
 8007bd2:	4293      	cmp	r3, r2
 8007bd4:	d107      	bne.n	8007be6 <HAL_LPTIM_Init+0x32e>
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d01d      	beq.n	8007c1a <HAL_LPTIM_Init+0x362>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007be2:	2b01      	cmp	r3, #1
 8007be4:	d019      	beq.n	8007c1a <HAL_LPTIM_Init+0x362>
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	4a36      	ldr	r2, [pc, #216]	@ (8007cc4 <HAL_LPTIM_Init+0x40c>)
 8007bec:	4293      	cmp	r3, r2
 8007bee:	d10f      	bne.n	8007c10 <HAL_LPTIM_Init+0x358>
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d010      	beq.n	8007c1a <HAL_LPTIM_Init+0x362>
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bfc:	2b01      	cmp	r3, #1
 8007bfe:	d00c      	beq.n	8007c1a <HAL_LPTIM_Init+0x362>
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c04:	2b02      	cmp	r3, #2
 8007c06:	d008      	beq.n	8007c1a <HAL_LPTIM_Init+0x362>
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c0c:	2b03      	cmp	r3, #3
 8007c0e:	d004      	beq.n	8007c1a <HAL_LPTIM_Init+0x362>
 8007c10:	f240 117f 	movw	r1, #383	@ 0x17f
 8007c14:	482c      	ldr	r0, [pc, #176]	@ (8007cc8 <HAL_LPTIM_Init+0x410>)
 8007c16:	f7fe f881 	bl	8005d1c <assert_failed>
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	4a28      	ldr	r2, [pc, #160]	@ (8007cc0 <HAL_LPTIM_Init+0x408>)
 8007c20:	4293      	cmp	r3, r2
 8007c22:	d107      	bne.n	8007c34 <HAL_LPTIM_Init+0x37c>
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d008      	beq.n	8007c3e <HAL_LPTIM_Init+0x386>
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c30:	2b02      	cmp	r3, #2
 8007c32:	d004      	beq.n	8007c3e <HAL_LPTIM_Init+0x386>
 8007c34:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 8007c38:	4823      	ldr	r0, [pc, #140]	@ (8007cc8 <HAL_LPTIM_Init+0x410>)
 8007c3a:	f7fe f86f 	bl	8005d1c <assert_failed>

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	430a      	orrs	r2, r1
 8007c4c:	621a      	str	r2, [r3, #32]
 8007c4e:	e02b      	b.n	8007ca8 <HAL_LPTIM_Init+0x3f0>
  }
  else
  {
    /* Check LPTIM Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	4a1a      	ldr	r2, [pc, #104]	@ (8007cc0 <HAL_LPTIM_Init+0x408>)
 8007c56:	4293      	cmp	r3, r2
 8007c58:	d107      	bne.n	8007c6a <HAL_LPTIM_Init+0x3b2>
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d01d      	beq.n	8007c9e <HAL_LPTIM_Init+0x3e6>
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c66:	2b01      	cmp	r3, #1
 8007c68:	d019      	beq.n	8007c9e <HAL_LPTIM_Init+0x3e6>
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	4a15      	ldr	r2, [pc, #84]	@ (8007cc4 <HAL_LPTIM_Init+0x40c>)
 8007c70:	4293      	cmp	r3, r2
 8007c72:	d10f      	bne.n	8007c94 <HAL_LPTIM_Init+0x3dc>
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d010      	beq.n	8007c9e <HAL_LPTIM_Init+0x3e6>
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c80:	2b01      	cmp	r3, #1
 8007c82:	d00c      	beq.n	8007c9e <HAL_LPTIM_Init+0x3e6>
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c88:	2b02      	cmp	r3, #2
 8007c8a:	d008      	beq.n	8007c9e <HAL_LPTIM_Init+0x3e6>
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c90:	2b03      	cmp	r3, #3
 8007c92:	d004      	beq.n	8007c9e <HAL_LPTIM_Init+0x3e6>
 8007c94:	f44f 71c4 	mov.w	r1, #392	@ 0x188
 8007c98:	480b      	ldr	r0, [pc, #44]	@ (8007cc8 <HAL_LPTIM_Init+0x410>)
 8007c9a:	f7fe f83f 	bl	8005d1c <assert_failed>

    /* Configure LPTIM Input1 source */
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	687a      	ldr	r2, [r7, #4]
 8007ca4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007ca6:	621a      	str	r2, [r3, #32]
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2201      	movs	r2, #1
 8007cac:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Return function status */
  return HAL_OK;
 8007cb0:	2300      	movs	r3, #0
}
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	3710      	adds	r7, #16
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	bd80      	pop	{r7, pc}
 8007cba:	bf00      	nop
 8007cbc:	ff19f1fe 	.word	0xff19f1fe
 8007cc0:	40007c00 	.word	0x40007c00
 8007cc4:	40009400 	.word	0x40009400
 8007cc8:	08010a94 	.word	0x08010a94

08007ccc <HAL_LPTIM_Encoder_Start>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0001 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Encoder_Start(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b084      	sub	sp, #16
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
 8007cd4:	6039      	str	r1, [r7, #0]
  uint32_t          tmpcfgr;

  /* Check the parameters */
  assert_param(IS_LPTIM_ENCODER_INTERFACE_INSTANCE(hlptim->Instance));
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	4a3f      	ldr	r2, [pc, #252]	@ (8007dd8 <HAL_LPTIM_Encoder_Start+0x10c>)
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	d004      	beq.n	8007cea <HAL_LPTIM_Encoder_Start+0x1e>
 8007ce0:	f240 41ca 	movw	r1, #1226	@ 0x4ca
 8007ce4:	483d      	ldr	r0, [pc, #244]	@ (8007ddc <HAL_LPTIM_Encoder_Start+0x110>)
 8007ce6:	f7fe f819 	bl	8005d1c <assert_failed>
  assert_param(IS_LPTIM_PERIOD(Period));
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d003      	beq.n	8007cf8 <HAL_LPTIM_Encoder_Start+0x2c>
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007cf6:	d304      	bcc.n	8007d02 <HAL_LPTIM_Encoder_Start+0x36>
 8007cf8:	f240 41cb 	movw	r1, #1227	@ 0x4cb
 8007cfc:	4837      	ldr	r0, [pc, #220]	@ (8007ddc <HAL_LPTIM_Encoder_Start+0x110>)
 8007cfe:	f7fe f80d 	bl	8005d1c <assert_failed>
  assert_param(hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	685b      	ldr	r3, [r3, #4]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d004      	beq.n	8007d14 <HAL_LPTIM_Encoder_Start+0x48>
 8007d0a:	f240 41cc 	movw	r1, #1228	@ 0x4cc
 8007d0e:	4833      	ldr	r0, [pc, #204]	@ (8007ddc <HAL_LPTIM_Encoder_Start+0x110>)
 8007d10:	f7fe f804 	bl	8005d1c <assert_failed>
  assert_param(hlptim->Init.Clock.Prescaler == LPTIM_PRESCALER_DIV1);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	689b      	ldr	r3, [r3, #8]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d004      	beq.n	8007d26 <HAL_LPTIM_Encoder_Start+0x5a>
 8007d1c:	f240 41cd 	movw	r1, #1229	@ 0x4cd
 8007d20:	482e      	ldr	r0, [pc, #184]	@ (8007ddc <HAL_LPTIM_Encoder_Start+0x110>)
 8007d22:	f7fd fffb 	bl	8005d1c <assert_failed>
  assert_param(IS_LPTIM_CLOCK_POLARITY(hlptim->Init.UltraLowPowerClock.Polarity));
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	68db      	ldr	r3, [r3, #12]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d00c      	beq.n	8007d48 <HAL_LPTIM_Encoder_Start+0x7c>
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	68db      	ldr	r3, [r3, #12]
 8007d32:	2b02      	cmp	r3, #2
 8007d34:	d008      	beq.n	8007d48 <HAL_LPTIM_Encoder_Start+0x7c>
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	68db      	ldr	r3, [r3, #12]
 8007d3a:	2b04      	cmp	r3, #4
 8007d3c:	d004      	beq.n	8007d48 <HAL_LPTIM_Encoder_Start+0x7c>
 8007d3e:	f240 41ce 	movw	r1, #1230	@ 0x4ce
 8007d42:	4826      	ldr	r0, [pc, #152]	@ (8007ddc <HAL_LPTIM_Encoder_Start+0x110>)
 8007d44:	f7fd ffea 	bl	8005d1c <assert_failed>

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2202      	movs	r2, #2
 8007d4c:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	68db      	ldr	r3, [r3, #12]
 8007d56:	60fb      	str	r3, [r7, #12]

  /* Clear CKPOL bits */
  tmpcfgr &= (uint32_t)(~LPTIM_CFGR_CKPOL);
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	f023 0306 	bic.w	r3, r3, #6
 8007d5e:	60fb      	str	r3, [r7, #12]

  /* Set Input polarity */
  tmpcfgr |=  hlptim->Init.UltraLowPowerClock.Polarity;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	68db      	ldr	r3, [r3, #12]
 8007d64:	68fa      	ldr	r2, [r7, #12]
 8007d66:	4313      	orrs	r3, r2
 8007d68:	60fb      	str	r3, [r7, #12]

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	68fa      	ldr	r2, [r7, #12]
 8007d70:	60da      	str	r2, [r3, #12]

  /* Set ENC bit to enable the encoder interface */
  hlptim->Instance->CFGR |= LPTIM_CFGR_ENC;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	68da      	ldr	r2, [r3, #12]
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8007d80:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	691a      	ldr	r2, [r3, #16]
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f042 0201 	orr.w	r2, r2, #1
 8007d90:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	2210      	movs	r2, #16
 8007d98:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	683a      	ldr	r2, [r7, #0]
 8007da0:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8007da2:	2110      	movs	r1, #16
 8007da4:	6878      	ldr	r0, [r7, #4]
 8007da6:	f000 f93d 	bl	8008024 <LPTIM_WaitForFlag>
 8007daa:	4603      	mov	r3, r0
 8007dac:	2b03      	cmp	r3, #3
 8007dae:	d101      	bne.n	8007db4 <HAL_LPTIM_Encoder_Start+0xe8>
  {
    return HAL_TIMEOUT;
 8007db0:	2303      	movs	r3, #3
 8007db2:	e00c      	b.n	8007dce <HAL_LPTIM_Encoder_Start+0x102>
  }

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	691a      	ldr	r2, [r3, #16]
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f042 0204 	orr.w	r2, r2, #4
 8007dc2:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2201      	movs	r2, #1
 8007dc8:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Return function status */
  return HAL_OK;
 8007dcc:	2300      	movs	r3, #0
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	3710      	adds	r7, #16
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}
 8007dd6:	bf00      	nop
 8007dd8:	40007c00 	.word	0x40007c00
 8007ddc:	08010a94 	.word	0x08010a94

08007de0 <HAL_LPTIM_Encoder_Stop>:
  * @brief  Stop the Encoder interface.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Encoder_Stop(LPTIM_HandleTypeDef *hlptim)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b082      	sub	sp, #8
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LPTIM_ENCODER_INTERFACE_INSTANCE(hlptim->Instance));
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	4a13      	ldr	r2, [pc, #76]	@ (8007e3c <HAL_LPTIM_Encoder_Stop+0x5c>)
 8007dee:	4293      	cmp	r3, r2
 8007df0:	d004      	beq.n	8007dfc <HAL_LPTIM_Encoder_Stop+0x1c>
 8007df2:	f240 5103 	movw	r1, #1283	@ 0x503
 8007df6:	4812      	ldr	r0, [pc, #72]	@ (8007e40 <HAL_LPTIM_Encoder_Stop+0x60>)
 8007df8:	f7fd ff90 	bl	8005d1c <assert_failed>

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2202      	movs	r2, #2
 8007e00:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	f000 f93d 	bl	8008084 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f000 f8fb 	bl	8008006 <HAL_LPTIM_GetState>
 8007e10:	4603      	mov	r3, r0
 8007e12:	2b03      	cmp	r3, #3
 8007e14:	d101      	bne.n	8007e1a <HAL_LPTIM_Encoder_Stop+0x3a>
  {
    return HAL_TIMEOUT;
 8007e16:	2303      	movs	r3, #3
 8007e18:	e00c      	b.n	8007e34 <HAL_LPTIM_Encoder_Stop+0x54>
  }

  /* Reset ENC bit to disable the encoder interface */
  hlptim->Instance->CFGR &= ~LPTIM_CFGR_ENC;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	68da      	ldr	r2, [r3, #12]
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 8007e28:	60da      	str	r2, [r3, #12]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2201      	movs	r2, #1
 8007e2e:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Return function status */
  return HAL_OK;
 8007e32:	2300      	movs	r3, #0
}
 8007e34:	4618      	mov	r0, r3
 8007e36:	3708      	adds	r7, #8
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	bd80      	pop	{r7, pc}
 8007e3c:	40007c00 	.word	0x40007c00
 8007e40:	08010a94 	.word	0x08010a94

08007e44 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b082      	sub	sp, #8
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f003 0301 	and.w	r3, r3, #1
 8007e56:	2b01      	cmp	r3, #1
 8007e58:	d10d      	bne.n	8007e76 <HAL_LPTIM_IRQHandler+0x32>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	689b      	ldr	r3, [r3, #8]
 8007e60:	f003 0301 	and.w	r3, r3, #1
 8007e64:	2b01      	cmp	r3, #1
 8007e66:	d106      	bne.n	8007e76 <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	2201      	movs	r2, #1
 8007e6e:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 8007e70:	6878      	ldr	r0, [r7, #4]
 8007e72:	f000 f882 	bl	8007f7a <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f003 0302 	and.w	r3, r3, #2
 8007e80:	2b02      	cmp	r3, #2
 8007e82:	d10d      	bne.n	8007ea0 <HAL_LPTIM_IRQHandler+0x5c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	689b      	ldr	r3, [r3, #8]
 8007e8a:	f003 0302 	and.w	r3, r3, #2
 8007e8e:	2b02      	cmp	r3, #2
 8007e90:	d106      	bne.n	8007ea0 <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	2202      	movs	r2, #2
 8007e98:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8007e9a:	6878      	ldr	r0, [r7, #4]
 8007e9c:	f000 f877 	bl	8007f8e <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f003 0304 	and.w	r3, r3, #4
 8007eaa:	2b04      	cmp	r3, #4
 8007eac:	d10d      	bne.n	8007eca <HAL_LPTIM_IRQHandler+0x86>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	689b      	ldr	r3, [r3, #8]
 8007eb4:	f003 0304 	and.w	r3, r3, #4
 8007eb8:	2b04      	cmp	r3, #4
 8007eba:	d106      	bne.n	8007eca <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	2204      	movs	r2, #4
 8007ec2:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 8007ec4:	6878      	ldr	r0, [r7, #4]
 8007ec6:	f000 f86c 	bl	8007fa2 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f003 0308 	and.w	r3, r3, #8
 8007ed4:	2b08      	cmp	r3, #8
 8007ed6:	d10d      	bne.n	8007ef4 <HAL_LPTIM_IRQHandler+0xb0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	689b      	ldr	r3, [r3, #8]
 8007ede:	f003 0308 	and.w	r3, r3, #8
 8007ee2:	2b08      	cmp	r3, #8
 8007ee4:	d106      	bne.n	8007ef4 <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	2208      	movs	r2, #8
 8007eec:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f000 f861 	bl	8007fb6 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f003 0310 	and.w	r3, r3, #16
 8007efe:	2b10      	cmp	r3, #16
 8007f00:	d10d      	bne.n	8007f1e <HAL_LPTIM_IRQHandler+0xda>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	689b      	ldr	r3, [r3, #8]
 8007f08:	f003 0310 	and.w	r3, r3, #16
 8007f0c:	2b10      	cmp	r3, #16
 8007f0e:	d106      	bne.n	8007f1e <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	2210      	movs	r2, #16
 8007f16:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	f000 f856 	bl	8007fca <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f003 0320 	and.w	r3, r3, #32
 8007f28:	2b20      	cmp	r3, #32
 8007f2a:	d10d      	bne.n	8007f48 <HAL_LPTIM_IRQHandler+0x104>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	689b      	ldr	r3, [r3, #8]
 8007f32:	f003 0320 	and.w	r3, r3, #32
 8007f36:	2b20      	cmp	r3, #32
 8007f38:	d106      	bne.n	8007f48 <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	2220      	movs	r2, #32
 8007f40:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f000 f84b 	bl	8007fde <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f52:	2b40      	cmp	r3, #64	@ 0x40
 8007f54:	d10d      	bne.n	8007f72 <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	689b      	ldr	r3, [r3, #8]
 8007f5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f60:	2b40      	cmp	r3, #64	@ 0x40
 8007f62:	d106      	bne.n	8007f72 <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	2240      	movs	r2, #64	@ 0x40
 8007f6a:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f000 f840 	bl	8007ff2 <HAL_LPTIM_DirectionDownCallback>
      HAL_LPTIM_RepCounterWriteCallback(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
#endif
}
 8007f72:	bf00      	nop
 8007f74:	3708      	adds	r7, #8
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bd80      	pop	{r7, pc}

08007f7a <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8007f7a:	b480      	push	{r7}
 8007f7c:	b083      	sub	sp, #12
 8007f7e:	af00      	add	r7, sp, #0
 8007f80:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 8007f82:	bf00      	nop
 8007f84:	370c      	adds	r7, #12
 8007f86:	46bd      	mov	sp, r7
 8007f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8c:	4770      	bx	lr

08007f8e <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8007f8e:	b480      	push	{r7}
 8007f90:	b083      	sub	sp, #12
 8007f92:	af00      	add	r7, sp, #0
 8007f94:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 8007f96:	bf00      	nop
 8007f98:	370c      	adds	r7, #12
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa0:	4770      	bx	lr

08007fa2 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 8007fa2:	b480      	push	{r7}
 8007fa4:	b083      	sub	sp, #12
 8007fa6:	af00      	add	r7, sp, #0
 8007fa8:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 8007faa:	bf00      	nop
 8007fac:	370c      	adds	r7, #12
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb4:	4770      	bx	lr

08007fb6 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8007fb6:	b480      	push	{r7}
 8007fb8:	b083      	sub	sp, #12
 8007fba:	af00      	add	r7, sp, #0
 8007fbc:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8007fbe:	bf00      	nop
 8007fc0:	370c      	adds	r7, #12
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc8:	4770      	bx	lr

08007fca <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8007fca:	b480      	push	{r7}
 8007fcc:	b083      	sub	sp, #12
 8007fce:	af00      	add	r7, sp, #0
 8007fd0:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8007fd2:	bf00      	nop
 8007fd4:	370c      	adds	r7, #12
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fdc:	4770      	bx	lr

08007fde <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8007fde:	b480      	push	{r7}
 8007fe0:	b083      	sub	sp, #12
 8007fe2:	af00      	add	r7, sp, #0
 8007fe4:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8007fe6:	bf00      	nop
 8007fe8:	370c      	adds	r7, #12
 8007fea:	46bd      	mov	sp, r7
 8007fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff0:	4770      	bx	lr

08007ff2 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8007ff2:	b480      	push	{r7}
 8007ff4:	b083      	sub	sp, #12
 8007ff6:	af00      	add	r7, sp, #0
 8007ff8:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8007ffa:	bf00      	nop
 8007ffc:	370c      	adds	r7, #12
 8007ffe:	46bd      	mov	sp, r7
 8008000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008004:	4770      	bx	lr

08008006 <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(const LPTIM_HandleTypeDef *hlptim)
{
 8008006:	b480      	push	{r7}
 8008008:	b083      	sub	sp, #12
 800800a:	af00      	add	r7, sp, #0
 800800c:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8008014:	b2db      	uxtb	r3, r3
}
 8008016:	4618      	mov	r0, r3
 8008018:	370c      	adds	r7, #12
 800801a:	46bd      	mov	sp, r7
 800801c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008020:	4770      	bx	lr
	...

08008024 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(const LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8008024:	b480      	push	{r7}
 8008026:	b085      	sub	sp, #20
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
 800802c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 800802e:	2300      	movs	r3, #0
 8008030:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8008032:	4b12      	ldr	r3, [pc, #72]	@ (800807c <LPTIM_WaitForFlag+0x58>)
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	4a12      	ldr	r2, [pc, #72]	@ (8008080 <LPTIM_WaitForFlag+0x5c>)
 8008038:	fba2 2303 	umull	r2, r3, r2, r3
 800803c:	0b9b      	lsrs	r3, r3, #14
 800803e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8008042:	fb02 f303 	mul.w	r3, r2, r3
 8008046:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	3b01      	subs	r3, #1
 800804c:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 800804e:	68bb      	ldr	r3, [r7, #8]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d101      	bne.n	8008058 <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 8008054:	2303      	movs	r3, #3
 8008056:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	681a      	ldr	r2, [r3, #0]
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	4013      	ands	r3, r2
 8008062:	683a      	ldr	r2, [r7, #0]
 8008064:	429a      	cmp	r2, r3
 8008066:	d002      	beq.n	800806e <LPTIM_WaitForFlag+0x4a>
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d1ec      	bne.n	8008048 <LPTIM_WaitForFlag+0x24>

  return result;
 800806e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008070:	4618      	mov	r0, r3
 8008072:	3714      	adds	r7, #20
 8008074:	46bd      	mov	sp, r7
 8008076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807a:	4770      	bx	lr
 800807c:	20000014 	.word	0x20000014
 8008080:	d1b71759 	.word	0xd1b71759

08008084 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b08c      	sub	sp, #48	@ 0x30
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 800808c:	2300      	movs	r3, #0
 800808e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008090:	f3ef 8310 	mrs	r3, PRIMASK
 8008094:	60fb      	str	r3, [r7, #12]
  return(result);
 8008096:	68fb      	ldr	r3, [r7, #12]
#if defined(LPTIM_RCR_REP)
  uint32_t tmpRCR;
#endif

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8008098:	62bb      	str	r3, [r7, #40]	@ 0x28
 800809a:	2301      	movs	r3, #1
 800809c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800809e:	693b      	ldr	r3, [r7, #16]
 80080a0:	f383 8810 	msr	PRIMASK, r3
}
 80080a4:	bf00      	nop
  __set_PRIMASK(1) ;

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	4a73      	ldr	r2, [pc, #460]	@ (8008278 <LPTIM_Disable+0x1f4>)
 80080ac:	4293      	cmp	r3, r2
 80080ae:	d003      	beq.n	80080b8 <LPTIM_Disable+0x34>
 80080b0:	4a72      	ldr	r2, [pc, #456]	@ (800827c <LPTIM_Disable+0x1f8>)
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d007      	beq.n	80080c6 <LPTIM_Disable+0x42>
    case LPTIM2_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
      break;
#endif /* LPTIM2 */
    default:
      break;
 80080b6:	e00d      	b.n	80080d4 <LPTIM_Disable+0x50>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 80080b8:	4b71      	ldr	r3, [pc, #452]	@ (8008280 <LPTIM_Disable+0x1fc>)
 80080ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80080be:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80080c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 80080c4:	e006      	b.n	80080d4 <LPTIM_Disable+0x50>
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 80080c6:	4b6e      	ldr	r3, [pc, #440]	@ (8008280 <LPTIM_Disable+0x1fc>)
 80080c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80080cc:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80080d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 80080d2:	bf00      	nop
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	689b      	ldr	r3, [r3, #8]
 80080da:	627b      	str	r3, [r7, #36]	@ 0x24
  tmpCFGR = hlptim->Instance->CFGR;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	68db      	ldr	r3, [r3, #12]
 80080e2:	623b      	str	r3, [r7, #32]
  tmpCMP = hlptim->Instance->CMP;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	695b      	ldr	r3, [r3, #20]
 80080ea:	61fb      	str	r3, [r7, #28]
  tmpARR = hlptim->Instance->ARR;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	699b      	ldr	r3, [r3, #24]
 80080f2:	61bb      	str	r3, [r7, #24]
  tmpOR = hlptim->Instance->OR;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	6a1b      	ldr	r3, [r3, #32]
 80080fa:	617b      	str	r3, [r7, #20]
#if defined(LPTIM_RCR_REP)
  tmpRCR = hlptim->Instance->RCR;
#endif

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	4a5d      	ldr	r2, [pc, #372]	@ (8008278 <LPTIM_Disable+0x1f4>)
 8008102:	4293      	cmp	r3, r2
 8008104:	d003      	beq.n	800810e <LPTIM_Disable+0x8a>
 8008106:	4a5d      	ldr	r2, [pc, #372]	@ (800827c <LPTIM_Disable+0x1f8>)
 8008108:	4293      	cmp	r3, r2
 800810a:	d00d      	beq.n	8008128 <LPTIM_Disable+0xa4>
      __HAL_RCC_LPTIM2_FORCE_RESET();
      __HAL_RCC_LPTIM2_RELEASE_RESET();
      break;
#endif /* LPTIM2 */
    default:
      break;
 800810c:	e019      	b.n	8008142 <LPTIM_Disable+0xbe>
      __HAL_RCC_LPTIM1_FORCE_RESET();
 800810e:	4b5c      	ldr	r3, [pc, #368]	@ (8008280 <LPTIM_Disable+0x1fc>)
 8008110:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008112:	4a5b      	ldr	r2, [pc, #364]	@ (8008280 <LPTIM_Disable+0x1fc>)
 8008114:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008118:	6393      	str	r3, [r2, #56]	@ 0x38
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 800811a:	4b59      	ldr	r3, [pc, #356]	@ (8008280 <LPTIM_Disable+0x1fc>)
 800811c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800811e:	4a58      	ldr	r2, [pc, #352]	@ (8008280 <LPTIM_Disable+0x1fc>)
 8008120:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008124:	6393      	str	r3, [r2, #56]	@ 0x38
      break;
 8008126:	e00c      	b.n	8008142 <LPTIM_Disable+0xbe>
      __HAL_RCC_LPTIM2_FORCE_RESET();
 8008128:	4b55      	ldr	r3, [pc, #340]	@ (8008280 <LPTIM_Disable+0x1fc>)
 800812a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800812c:	4a54      	ldr	r2, [pc, #336]	@ (8008280 <LPTIM_Disable+0x1fc>)
 800812e:	f043 0320 	orr.w	r3, r3, #32
 8008132:	63d3      	str	r3, [r2, #60]	@ 0x3c
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 8008134:	4b52      	ldr	r3, [pc, #328]	@ (8008280 <LPTIM_Disable+0x1fc>)
 8008136:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008138:	4a51      	ldr	r2, [pc, #324]	@ (8008280 <LPTIM_Disable+0x1fc>)
 800813a:	f023 0320 	bic.w	r3, r3, #32
 800813e:	63d3      	str	r3, [r2, #60]	@ 0x3c
      break;
 8008140:	bf00      	nop

  /*********** Restore LPTIM Config ***********/
#if defined(LPTIM_RCR_REP)
  if ((tmpCMP != 0UL) || (tmpARR != 0UL) || (tmpRCR != 0UL))
#else
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 8008142:	69fb      	ldr	r3, [r7, #28]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d102      	bne.n	800814e <LPTIM_Disable+0xca>
 8008148:	69bb      	ldr	r3, [r7, #24]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d075      	beq.n	800823a <LPTIM_Disable+0x1b6>
#endif
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	4a49      	ldr	r2, [pc, #292]	@ (8008278 <LPTIM_Disable+0x1f4>)
 8008154:	4293      	cmp	r3, r2
 8008156:	d003      	beq.n	8008160 <LPTIM_Disable+0xdc>
 8008158:	4a48      	ldr	r2, [pc, #288]	@ (800827c <LPTIM_Disable+0x1f8>)
 800815a:	4293      	cmp	r3, r2
 800815c:	d009      	beq.n	8008172 <LPTIM_Disable+0xee>
      case LPTIM2_BASE:
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
        break;
#endif /* LPTIM2 */
      default:
        break;
 800815e:	e011      	b.n	8008184 <LPTIM_Disable+0x100>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_PCLK1);
 8008160:	4b47      	ldr	r3, [pc, #284]	@ (8008280 <LPTIM_Disable+0x1fc>)
 8008162:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008166:	4a46      	ldr	r2, [pc, #280]	@ (8008280 <LPTIM_Disable+0x1fc>)
 8008168:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 800816c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
        break;
 8008170:	e008      	b.n	8008184 <LPTIM_Disable+0x100>
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
 8008172:	4b43      	ldr	r3, [pc, #268]	@ (8008280 <LPTIM_Disable+0x1fc>)
 8008174:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008178:	4a41      	ldr	r2, [pc, #260]	@ (8008280 <LPTIM_Disable+0x1fc>)
 800817a:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800817e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
        break;
 8008182:	bf00      	nop
    }

    if (tmpCMP != 0UL)
 8008184:	69fb      	ldr	r3, [r7, #28]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d01a      	beq.n	80081c0 <LPTIM_Disable+0x13c>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	691a      	ldr	r2, [r3, #16]
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f042 0201 	orr.w	r2, r2, #1
 8008198:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	69fa      	ldr	r2, [r7, #28]
 80081a0:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 80081a2:	2108      	movs	r1, #8
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	f7ff ff3d 	bl	8008024 <LPTIM_WaitForFlag>
 80081aa:	4603      	mov	r3, r0
 80081ac:	2b03      	cmp	r3, #3
 80081ae:	d103      	bne.n	80081b8 <LPTIM_Disable+0x134>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2203      	movs	r2, #3
 80081b4:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	2208      	movs	r2, #8
 80081be:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 80081c0:	69bb      	ldr	r3, [r7, #24]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d01a      	beq.n	80081fc <LPTIM_Disable+0x178>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	691a      	ldr	r2, [r3, #16]
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f042 0201 	orr.w	r2, r2, #1
 80081d4:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	69ba      	ldr	r2, [r7, #24]
 80081dc:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 80081de:	2110      	movs	r1, #16
 80081e0:	6878      	ldr	r0, [r7, #4]
 80081e2:	f7ff ff1f 	bl	8008024 <LPTIM_WaitForFlag>
 80081e6:	4603      	mov	r3, r0
 80081e8:	2b03      	cmp	r3, #3
 80081ea:	d103      	bne.n	80081f4 <LPTIM_Disable+0x170>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2203      	movs	r2, #3
 80081f0:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	2210      	movs	r2, #16
 80081fa:	605a      	str	r2, [r3, #4]
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
    }
#endif

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	4a1d      	ldr	r2, [pc, #116]	@ (8008278 <LPTIM_Disable+0x1f4>)
 8008202:	4293      	cmp	r3, r2
 8008204:	d003      	beq.n	800820e <LPTIM_Disable+0x18a>
 8008206:	4a1d      	ldr	r2, [pc, #116]	@ (800827c <LPTIM_Disable+0x1f8>)
 8008208:	4293      	cmp	r3, r2
 800820a:	d00b      	beq.n	8008224 <LPTIM_Disable+0x1a0>
      case LPTIM2_BASE:
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
        break;
#endif /* LPTIM2 */
      default:
        break;
 800820c:	e015      	b.n	800823a <LPTIM_Disable+0x1b6>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 800820e:	4b1c      	ldr	r3, [pc, #112]	@ (8008280 <LPTIM_Disable+0x1fc>)
 8008210:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008214:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8008218:	4919      	ldr	r1, [pc, #100]	@ (8008280 <LPTIM_Disable+0x1fc>)
 800821a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800821c:	4313      	orrs	r3, r2
 800821e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
        break;
 8008222:	e00a      	b.n	800823a <LPTIM_Disable+0x1b6>
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 8008224:	4b16      	ldr	r3, [pc, #88]	@ (8008280 <LPTIM_Disable+0x1fc>)
 8008226:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800822a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800822e:	4914      	ldr	r1, [pc, #80]	@ (8008280 <LPTIM_Disable+0x1fc>)
 8008230:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008232:	4313      	orrs	r3, r2
 8008234:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
        break;
 8008238:	bf00      	nop
    }
  }

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	691a      	ldr	r2, [r3, #16]
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f022 0201 	bic.w	r2, r2, #1
 8008248:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008250:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	6a3a      	ldr	r2, [r7, #32]
 8008258:	60da      	str	r2, [r3, #12]
  hlptim->Instance->OR = tmpOR;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	697a      	ldr	r2, [r7, #20]
 8008260:	621a      	str	r2, [r3, #32]
 8008262:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008264:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008266:	68bb      	ldr	r3, [r7, #8]
 8008268:	f383 8810 	msr	PRIMASK, r3
}
 800826c:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 800826e:	bf00      	nop
 8008270:	3730      	adds	r7, #48	@ 0x30
 8008272:	46bd      	mov	sp, r7
 8008274:	bd80      	pop	{r7, pc}
 8008276:	bf00      	nop
 8008278:	40007c00 	.word	0x40007c00
 800827c:	40009400 	.word	0x40009400
 8008280:	40021000 	.word	0x40021000

08008284 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8008284:	b480      	push	{r7}
 8008286:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8008288:	4b04      	ldr	r3, [pc, #16]	@ (800829c <HAL_PWREx_GetVoltageRange+0x18>)
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8008290:	4618      	mov	r0, r3
 8008292:	46bd      	mov	sp, r7
 8008294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008298:	4770      	bx	lr
 800829a:	bf00      	nop
 800829c:	40007000 	.word	0x40007000

080082a0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b084      	sub	sp, #16
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80082ae:	d007      	beq.n	80082c0 <HAL_PWREx_ControlVoltageScaling+0x20>
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80082b6:	d003      	beq.n	80082c0 <HAL_PWREx_ControlVoltageScaling+0x20>
 80082b8:	21a7      	movs	r1, #167	@ 0xa7
 80082ba:	4826      	ldr	r0, [pc, #152]	@ (8008354 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 80082bc:	f7fd fd2e 	bl	8005d1c <assert_failed>
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80082c6:	d130      	bne.n	800832a <HAL_PWREx_ControlVoltageScaling+0x8a>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80082c8:	4b23      	ldr	r3, [pc, #140]	@ (8008358 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80082d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80082d4:	d038      	beq.n	8008348 <HAL_PWREx_ControlVoltageScaling+0xa8>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80082d6:	4b20      	ldr	r3, [pc, #128]	@ (8008358 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80082de:	4a1e      	ldr	r2, [pc, #120]	@ (8008358 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 80082e0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80082e4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80082e6:	4b1d      	ldr	r3, [pc, #116]	@ (800835c <HAL_PWREx_ControlVoltageScaling+0xbc>)
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	2232      	movs	r2, #50	@ 0x32
 80082ec:	fb02 f303 	mul.w	r3, r2, r3
 80082f0:	4a1b      	ldr	r2, [pc, #108]	@ (8008360 <HAL_PWREx_ControlVoltageScaling+0xc0>)
 80082f2:	fba2 2303 	umull	r2, r3, r2, r3
 80082f6:	0c9b      	lsrs	r3, r3, #18
 80082f8:	3301      	adds	r3, #1
 80082fa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80082fc:	e002      	b.n	8008304 <HAL_PWREx_ControlVoltageScaling+0x64>
      {
        wait_loop_index--;
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	3b01      	subs	r3, #1
 8008302:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008304:	4b14      	ldr	r3, [pc, #80]	@ (8008358 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8008306:	695b      	ldr	r3, [r3, #20]
 8008308:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800830c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008310:	d102      	bne.n	8008318 <HAL_PWREx_ControlVoltageScaling+0x78>
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d1f2      	bne.n	80082fe <HAL_PWREx_ControlVoltageScaling+0x5e>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008318:	4b0f      	ldr	r3, [pc, #60]	@ (8008358 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 800831a:	695b      	ldr	r3, [r3, #20]
 800831c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008320:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008324:	d110      	bne.n	8008348 <HAL_PWREx_ControlVoltageScaling+0xa8>
      {
        return HAL_TIMEOUT;
 8008326:	2303      	movs	r3, #3
 8008328:	e00f      	b.n	800834a <HAL_PWREx_ControlVoltageScaling+0xaa>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800832a:	4b0b      	ldr	r3, [pc, #44]	@ (8008358 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008332:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008336:	d007      	beq.n	8008348 <HAL_PWREx_ControlVoltageScaling+0xa8>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8008338:	4b07      	ldr	r3, [pc, #28]	@ (8008358 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008340:	4a05      	ldr	r2, [pc, #20]	@ (8008358 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8008342:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008346:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8008348:	2300      	movs	r3, #0
}
 800834a:	4618      	mov	r0, r3
 800834c:	3710      	adds	r7, #16
 800834e:	46bd      	mov	sp, r7
 8008350:	bd80      	pop	{r7, pc}
 8008352:	bf00      	nop
 8008354:	08010ad0 	.word	0x08010ad0
 8008358:	40007000 	.word	0x40007000
 800835c:	20000014 	.word	0x20000014
 8008360:	431bde83 	.word	0x431bde83

08008364 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b088      	sub	sp, #32
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d102      	bne.n	8008378 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8008372:	2301      	movs	r3, #1
 8008374:	f000 bcef 	b.w	8008d56 <HAL_RCC_OscConfig+0x9f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d008      	beq.n	8008392 <HAL_RCC_OscConfig+0x2e>
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	2b1f      	cmp	r3, #31
 8008386:	d904      	bls.n	8008392 <HAL_RCC_OscConfig+0x2e>
 8008388:	f44f 71d1 	mov.w	r1, #418	@ 0x1a2
 800838c:	489a      	ldr	r0, [pc, #616]	@ (80085f8 <HAL_RCC_OscConfig+0x294>)
 800838e:	f7fd fcc5 	bl	8005d1c <assert_failed>

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008392:	4b9a      	ldr	r3, [pc, #616]	@ (80085fc <HAL_RCC_OscConfig+0x298>)
 8008394:	689b      	ldr	r3, [r3, #8]
 8008396:	f003 030c 	and.w	r3, r3, #12
 800839a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800839c:	4b97      	ldr	r3, [pc, #604]	@ (80085fc <HAL_RCC_OscConfig+0x298>)
 800839e:	68db      	ldr	r3, [r3, #12]
 80083a0:	f003 0303 	and.w	r3, r3, #3
 80083a4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f003 0310 	and.w	r3, r3, #16
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	f000 813d 	beq.w	800862e <HAL_RCC_OscConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	699b      	ldr	r3, [r3, #24]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d008      	beq.n	80083ce <HAL_RCC_OscConfig+0x6a>
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	699b      	ldr	r3, [r3, #24]
 80083c0:	2b01      	cmp	r3, #1
 80083c2:	d004      	beq.n	80083ce <HAL_RCC_OscConfig+0x6a>
 80083c4:	f240 11ab 	movw	r1, #427	@ 0x1ab
 80083c8:	488b      	ldr	r0, [pc, #556]	@ (80085f8 <HAL_RCC_OscConfig+0x294>)
 80083ca:	f7fd fca7 	bl	8005d1c <assert_failed>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	69db      	ldr	r3, [r3, #28]
 80083d2:	2bff      	cmp	r3, #255	@ 0xff
 80083d4:	d904      	bls.n	80083e0 <HAL_RCC_OscConfig+0x7c>
 80083d6:	f44f 71d6 	mov.w	r1, #428	@ 0x1ac
 80083da:	4887      	ldr	r0, [pc, #540]	@ (80085f8 <HAL_RCC_OscConfig+0x294>)
 80083dc:	f7fd fc9e 	bl	8005d1c <assert_failed>
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	6a1b      	ldr	r3, [r3, #32]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d030      	beq.n	800844a <HAL_RCC_OscConfig+0xe6>
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	6a1b      	ldr	r3, [r3, #32]
 80083ec:	2b10      	cmp	r3, #16
 80083ee:	d02c      	beq.n	800844a <HAL_RCC_OscConfig+0xe6>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	6a1b      	ldr	r3, [r3, #32]
 80083f4:	2b20      	cmp	r3, #32
 80083f6:	d028      	beq.n	800844a <HAL_RCC_OscConfig+0xe6>
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	6a1b      	ldr	r3, [r3, #32]
 80083fc:	2b30      	cmp	r3, #48	@ 0x30
 80083fe:	d024      	beq.n	800844a <HAL_RCC_OscConfig+0xe6>
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	6a1b      	ldr	r3, [r3, #32]
 8008404:	2b40      	cmp	r3, #64	@ 0x40
 8008406:	d020      	beq.n	800844a <HAL_RCC_OscConfig+0xe6>
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	6a1b      	ldr	r3, [r3, #32]
 800840c:	2b50      	cmp	r3, #80	@ 0x50
 800840e:	d01c      	beq.n	800844a <HAL_RCC_OscConfig+0xe6>
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	6a1b      	ldr	r3, [r3, #32]
 8008414:	2b60      	cmp	r3, #96	@ 0x60
 8008416:	d018      	beq.n	800844a <HAL_RCC_OscConfig+0xe6>
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	6a1b      	ldr	r3, [r3, #32]
 800841c:	2b70      	cmp	r3, #112	@ 0x70
 800841e:	d014      	beq.n	800844a <HAL_RCC_OscConfig+0xe6>
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	6a1b      	ldr	r3, [r3, #32]
 8008424:	2b80      	cmp	r3, #128	@ 0x80
 8008426:	d010      	beq.n	800844a <HAL_RCC_OscConfig+0xe6>
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	6a1b      	ldr	r3, [r3, #32]
 800842c:	2b90      	cmp	r3, #144	@ 0x90
 800842e:	d00c      	beq.n	800844a <HAL_RCC_OscConfig+0xe6>
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	6a1b      	ldr	r3, [r3, #32]
 8008434:	2ba0      	cmp	r3, #160	@ 0xa0
 8008436:	d008      	beq.n	800844a <HAL_RCC_OscConfig+0xe6>
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	6a1b      	ldr	r3, [r3, #32]
 800843c:	2bb0      	cmp	r3, #176	@ 0xb0
 800843e:	d004      	beq.n	800844a <HAL_RCC_OscConfig+0xe6>
 8008440:	f240 11ad 	movw	r1, #429	@ 0x1ad
 8008444:	486c      	ldr	r0, [pc, #432]	@ (80085f8 <HAL_RCC_OscConfig+0x294>)
 8008446:	f7fd fc69 	bl	8005d1c <assert_failed>

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800844a:	69bb      	ldr	r3, [r7, #24]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d007      	beq.n	8008460 <HAL_RCC_OscConfig+0xfc>
 8008450:	69bb      	ldr	r3, [r7, #24]
 8008452:	2b0c      	cmp	r3, #12
 8008454:	f040 808e 	bne.w	8008574 <HAL_RCC_OscConfig+0x210>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8008458:	697b      	ldr	r3, [r7, #20]
 800845a:	2b01      	cmp	r3, #1
 800845c:	f040 808a 	bne.w	8008574 <HAL_RCC_OscConfig+0x210>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8008460:	4b66      	ldr	r3, [pc, #408]	@ (80085fc <HAL_RCC_OscConfig+0x298>)
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f003 0302 	and.w	r3, r3, #2
 8008468:	2b00      	cmp	r3, #0
 800846a:	d006      	beq.n	800847a <HAL_RCC_OscConfig+0x116>
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	699b      	ldr	r3, [r3, #24]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d102      	bne.n	800847a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8008474:	2301      	movs	r3, #1
 8008476:	f000 bc6e 	b.w	8008d56 <HAL_RCC_OscConfig+0x9f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6a1a      	ldr	r2, [r3, #32]
 800847e:	4b5f      	ldr	r3, [pc, #380]	@ (80085fc <HAL_RCC_OscConfig+0x298>)
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	f003 0308 	and.w	r3, r3, #8
 8008486:	2b00      	cmp	r3, #0
 8008488:	d004      	beq.n	8008494 <HAL_RCC_OscConfig+0x130>
 800848a:	4b5c      	ldr	r3, [pc, #368]	@ (80085fc <HAL_RCC_OscConfig+0x298>)
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008492:	e005      	b.n	80084a0 <HAL_RCC_OscConfig+0x13c>
 8008494:	4b59      	ldr	r3, [pc, #356]	@ (80085fc <HAL_RCC_OscConfig+0x298>)
 8008496:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800849a:	091b      	lsrs	r3, r3, #4
 800849c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80084a0:	4293      	cmp	r3, r2
 80084a2:	d224      	bcs.n	80084ee <HAL_RCC_OscConfig+0x18a>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	6a1b      	ldr	r3, [r3, #32]
 80084a8:	4618      	mov	r0, r3
 80084aa:	f000 fec1 	bl	8009230 <RCC_SetFlashLatencyFromMSIRange>
 80084ae:	4603      	mov	r3, r0
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d002      	beq.n	80084ba <HAL_RCC_OscConfig+0x156>
          {
            return HAL_ERROR;
 80084b4:	2301      	movs	r3, #1
 80084b6:	f000 bc4e 	b.w	8008d56 <HAL_RCC_OscConfig+0x9f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80084ba:	4b50      	ldr	r3, [pc, #320]	@ (80085fc <HAL_RCC_OscConfig+0x298>)
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	4a4f      	ldr	r2, [pc, #316]	@ (80085fc <HAL_RCC_OscConfig+0x298>)
 80084c0:	f043 0308 	orr.w	r3, r3, #8
 80084c4:	6013      	str	r3, [r2, #0]
 80084c6:	4b4d      	ldr	r3, [pc, #308]	@ (80085fc <HAL_RCC_OscConfig+0x298>)
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6a1b      	ldr	r3, [r3, #32]
 80084d2:	494a      	ldr	r1, [pc, #296]	@ (80085fc <HAL_RCC_OscConfig+0x298>)
 80084d4:	4313      	orrs	r3, r2
 80084d6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80084d8:	4b48      	ldr	r3, [pc, #288]	@ (80085fc <HAL_RCC_OscConfig+0x298>)
 80084da:	685b      	ldr	r3, [r3, #4]
 80084dc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	69db      	ldr	r3, [r3, #28]
 80084e4:	021b      	lsls	r3, r3, #8
 80084e6:	4945      	ldr	r1, [pc, #276]	@ (80085fc <HAL_RCC_OscConfig+0x298>)
 80084e8:	4313      	orrs	r3, r2
 80084ea:	604b      	str	r3, [r1, #4]
 80084ec:	e026      	b.n	800853c <HAL_RCC_OscConfig+0x1d8>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80084ee:	4b43      	ldr	r3, [pc, #268]	@ (80085fc <HAL_RCC_OscConfig+0x298>)
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	4a42      	ldr	r2, [pc, #264]	@ (80085fc <HAL_RCC_OscConfig+0x298>)
 80084f4:	f043 0308 	orr.w	r3, r3, #8
 80084f8:	6013      	str	r3, [r2, #0]
 80084fa:	4b40      	ldr	r3, [pc, #256]	@ (80085fc <HAL_RCC_OscConfig+0x298>)
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6a1b      	ldr	r3, [r3, #32]
 8008506:	493d      	ldr	r1, [pc, #244]	@ (80085fc <HAL_RCC_OscConfig+0x298>)
 8008508:	4313      	orrs	r3, r2
 800850a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800850c:	4b3b      	ldr	r3, [pc, #236]	@ (80085fc <HAL_RCC_OscConfig+0x298>)
 800850e:	685b      	ldr	r3, [r3, #4]
 8008510:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	69db      	ldr	r3, [r3, #28]
 8008518:	021b      	lsls	r3, r3, #8
 800851a:	4938      	ldr	r1, [pc, #224]	@ (80085fc <HAL_RCC_OscConfig+0x298>)
 800851c:	4313      	orrs	r3, r2
 800851e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008520:	69bb      	ldr	r3, [r7, #24]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d10a      	bne.n	800853c <HAL_RCC_OscConfig+0x1d8>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6a1b      	ldr	r3, [r3, #32]
 800852a:	4618      	mov	r0, r3
 800852c:	f000 fe80 	bl	8009230 <RCC_SetFlashLatencyFromMSIRange>
 8008530:	4603      	mov	r3, r0
 8008532:	2b00      	cmp	r3, #0
 8008534:	d002      	beq.n	800853c <HAL_RCC_OscConfig+0x1d8>
            {
              return HAL_ERROR;
 8008536:	2301      	movs	r3, #1
 8008538:	f000 bc0d 	b.w	8008d56 <HAL_RCC_OscConfig+0x9f2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800853c:	f000 fdb4 	bl	80090a8 <HAL_RCC_GetSysClockFreq>
 8008540:	4602      	mov	r2, r0
 8008542:	4b2e      	ldr	r3, [pc, #184]	@ (80085fc <HAL_RCC_OscConfig+0x298>)
 8008544:	689b      	ldr	r3, [r3, #8]
 8008546:	091b      	lsrs	r3, r3, #4
 8008548:	f003 030f 	and.w	r3, r3, #15
 800854c:	492c      	ldr	r1, [pc, #176]	@ (8008600 <HAL_RCC_OscConfig+0x29c>)
 800854e:	5ccb      	ldrb	r3, [r1, r3]
 8008550:	f003 031f 	and.w	r3, r3, #31
 8008554:	fa22 f303 	lsr.w	r3, r2, r3
 8008558:	4a2a      	ldr	r2, [pc, #168]	@ (8008604 <HAL_RCC_OscConfig+0x2a0>)
 800855a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800855c:	4b2a      	ldr	r3, [pc, #168]	@ (8008608 <HAL_RCC_OscConfig+0x2a4>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	4618      	mov	r0, r3
 8008562:	f7fe f9b5 	bl	80068d0 <HAL_InitTick>
 8008566:	4603      	mov	r3, r0
 8008568:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800856a:	7bfb      	ldrb	r3, [r7, #15]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d05d      	beq.n	800862c <HAL_RCC_OscConfig+0x2c8>
        {
          return status;
 8008570:	7bfb      	ldrb	r3, [r7, #15]
 8008572:	e3f0      	b.n	8008d56 <HAL_RCC_OscConfig+0x9f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	699b      	ldr	r3, [r3, #24]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d032      	beq.n	80085e2 <HAL_RCC_OscConfig+0x27e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800857c:	4b1f      	ldr	r3, [pc, #124]	@ (80085fc <HAL_RCC_OscConfig+0x298>)
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	4a1e      	ldr	r2, [pc, #120]	@ (80085fc <HAL_RCC_OscConfig+0x298>)
 8008582:	f043 0301 	orr.w	r3, r3, #1
 8008586:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008588:	f7fe f9f2 	bl	8006970 <HAL_GetTick>
 800858c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800858e:	e008      	b.n	80085a2 <HAL_RCC_OscConfig+0x23e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008590:	f7fe f9ee 	bl	8006970 <HAL_GetTick>
 8008594:	4602      	mov	r2, r0
 8008596:	693b      	ldr	r3, [r7, #16]
 8008598:	1ad3      	subs	r3, r2, r3
 800859a:	2b02      	cmp	r3, #2
 800859c:	d901      	bls.n	80085a2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800859e:	2303      	movs	r3, #3
 80085a0:	e3d9      	b.n	8008d56 <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80085a2:	4b16      	ldr	r3, [pc, #88]	@ (80085fc <HAL_RCC_OscConfig+0x298>)
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	f003 0302 	and.w	r3, r3, #2
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d0f0      	beq.n	8008590 <HAL_RCC_OscConfig+0x22c>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80085ae:	4b13      	ldr	r3, [pc, #76]	@ (80085fc <HAL_RCC_OscConfig+0x298>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	4a12      	ldr	r2, [pc, #72]	@ (80085fc <HAL_RCC_OscConfig+0x298>)
 80085b4:	f043 0308 	orr.w	r3, r3, #8
 80085b8:	6013      	str	r3, [r2, #0]
 80085ba:	4b10      	ldr	r3, [pc, #64]	@ (80085fc <HAL_RCC_OscConfig+0x298>)
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6a1b      	ldr	r3, [r3, #32]
 80085c6:	490d      	ldr	r1, [pc, #52]	@ (80085fc <HAL_RCC_OscConfig+0x298>)
 80085c8:	4313      	orrs	r3, r2
 80085ca:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80085cc:	4b0b      	ldr	r3, [pc, #44]	@ (80085fc <HAL_RCC_OscConfig+0x298>)
 80085ce:	685b      	ldr	r3, [r3, #4]
 80085d0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	69db      	ldr	r3, [r3, #28]
 80085d8:	021b      	lsls	r3, r3, #8
 80085da:	4908      	ldr	r1, [pc, #32]	@ (80085fc <HAL_RCC_OscConfig+0x298>)
 80085dc:	4313      	orrs	r3, r2
 80085de:	604b      	str	r3, [r1, #4]
 80085e0:	e025      	b.n	800862e <HAL_RCC_OscConfig+0x2ca>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80085e2:	4b06      	ldr	r3, [pc, #24]	@ (80085fc <HAL_RCC_OscConfig+0x298>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	4a05      	ldr	r2, [pc, #20]	@ (80085fc <HAL_RCC_OscConfig+0x298>)
 80085e8:	f023 0301 	bic.w	r3, r3, #1
 80085ec:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80085ee:	f7fe f9bf 	bl	8006970 <HAL_GetTick>
 80085f2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80085f4:	e013      	b.n	800861e <HAL_RCC_OscConfig+0x2ba>
 80085f6:	bf00      	nop
 80085f8:	08010b0c 	.word	0x08010b0c
 80085fc:	40021000 	.word	0x40021000
 8008600:	08010ce8 	.word	0x08010ce8
 8008604:	20000014 	.word	0x20000014
 8008608:	20000018 	.word	0x20000018
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800860c:	f7fe f9b0 	bl	8006970 <HAL_GetTick>
 8008610:	4602      	mov	r2, r0
 8008612:	693b      	ldr	r3, [r7, #16]
 8008614:	1ad3      	subs	r3, r2, r3
 8008616:	2b02      	cmp	r3, #2
 8008618:	d901      	bls.n	800861e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800861a:	2303      	movs	r3, #3
 800861c:	e39b      	b.n	8008d56 <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800861e:	4b97      	ldr	r3, [pc, #604]	@ (800887c <HAL_RCC_OscConfig+0x518>)
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f003 0302 	and.w	r3, r3, #2
 8008626:	2b00      	cmp	r3, #0
 8008628:	d1f0      	bne.n	800860c <HAL_RCC_OscConfig+0x2a8>
 800862a:	e000      	b.n	800862e <HAL_RCC_OscConfig+0x2ca>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800862c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	f003 0301 	and.w	r3, r3, #1
 8008636:	2b00      	cmp	r3, #0
 8008638:	d07e      	beq.n	8008738 <HAL_RCC_OscConfig+0x3d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	685b      	ldr	r3, [r3, #4]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d00e      	beq.n	8008660 <HAL_RCC_OscConfig+0x2fc>
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	685b      	ldr	r3, [r3, #4]
 8008646:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800864a:	d009      	beq.n	8008660 <HAL_RCC_OscConfig+0x2fc>
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	685b      	ldr	r3, [r3, #4]
 8008650:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008654:	d004      	beq.n	8008660 <HAL_RCC_OscConfig+0x2fc>
 8008656:	f240 2119 	movw	r1, #537	@ 0x219
 800865a:	4889      	ldr	r0, [pc, #548]	@ (8008880 <HAL_RCC_OscConfig+0x51c>)
 800865c:	f7fd fb5e 	bl	8005d1c <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8008660:	69bb      	ldr	r3, [r7, #24]
 8008662:	2b08      	cmp	r3, #8
 8008664:	d005      	beq.n	8008672 <HAL_RCC_OscConfig+0x30e>
 8008666:	69bb      	ldr	r3, [r7, #24]
 8008668:	2b0c      	cmp	r3, #12
 800866a:	d10e      	bne.n	800868a <HAL_RCC_OscConfig+0x326>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800866c:	697b      	ldr	r3, [r7, #20]
 800866e:	2b03      	cmp	r3, #3
 8008670:	d10b      	bne.n	800868a <HAL_RCC_OscConfig+0x326>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008672:	4b82      	ldr	r3, [pc, #520]	@ (800887c <HAL_RCC_OscConfig+0x518>)
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800867a:	2b00      	cmp	r3, #0
 800867c:	d05b      	beq.n	8008736 <HAL_RCC_OscConfig+0x3d2>
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	685b      	ldr	r3, [r3, #4]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d157      	bne.n	8008736 <HAL_RCC_OscConfig+0x3d2>
      {
        return HAL_ERROR;
 8008686:	2301      	movs	r3, #1
 8008688:	e365      	b.n	8008d56 <HAL_RCC_OscConfig+0x9f2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	685b      	ldr	r3, [r3, #4]
 800868e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008692:	d106      	bne.n	80086a2 <HAL_RCC_OscConfig+0x33e>
 8008694:	4b79      	ldr	r3, [pc, #484]	@ (800887c <HAL_RCC_OscConfig+0x518>)
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	4a78      	ldr	r2, [pc, #480]	@ (800887c <HAL_RCC_OscConfig+0x518>)
 800869a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800869e:	6013      	str	r3, [r2, #0]
 80086a0:	e01d      	b.n	80086de <HAL_RCC_OscConfig+0x37a>
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	685b      	ldr	r3, [r3, #4]
 80086a6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80086aa:	d10c      	bne.n	80086c6 <HAL_RCC_OscConfig+0x362>
 80086ac:	4b73      	ldr	r3, [pc, #460]	@ (800887c <HAL_RCC_OscConfig+0x518>)
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	4a72      	ldr	r2, [pc, #456]	@ (800887c <HAL_RCC_OscConfig+0x518>)
 80086b2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80086b6:	6013      	str	r3, [r2, #0]
 80086b8:	4b70      	ldr	r3, [pc, #448]	@ (800887c <HAL_RCC_OscConfig+0x518>)
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	4a6f      	ldr	r2, [pc, #444]	@ (800887c <HAL_RCC_OscConfig+0x518>)
 80086be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80086c2:	6013      	str	r3, [r2, #0]
 80086c4:	e00b      	b.n	80086de <HAL_RCC_OscConfig+0x37a>
 80086c6:	4b6d      	ldr	r3, [pc, #436]	@ (800887c <HAL_RCC_OscConfig+0x518>)
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	4a6c      	ldr	r2, [pc, #432]	@ (800887c <HAL_RCC_OscConfig+0x518>)
 80086cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80086d0:	6013      	str	r3, [r2, #0]
 80086d2:	4b6a      	ldr	r3, [pc, #424]	@ (800887c <HAL_RCC_OscConfig+0x518>)
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	4a69      	ldr	r2, [pc, #420]	@ (800887c <HAL_RCC_OscConfig+0x518>)
 80086d8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80086dc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	685b      	ldr	r3, [r3, #4]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d013      	beq.n	800870e <HAL_RCC_OscConfig+0x3aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086e6:	f7fe f943 	bl	8006970 <HAL_GetTick>
 80086ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80086ec:	e008      	b.n	8008700 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80086ee:	f7fe f93f 	bl	8006970 <HAL_GetTick>
 80086f2:	4602      	mov	r2, r0
 80086f4:	693b      	ldr	r3, [r7, #16]
 80086f6:	1ad3      	subs	r3, r2, r3
 80086f8:	2b64      	cmp	r3, #100	@ 0x64
 80086fa:	d901      	bls.n	8008700 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 80086fc:	2303      	movs	r3, #3
 80086fe:	e32a      	b.n	8008d56 <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008700:	4b5e      	ldr	r3, [pc, #376]	@ (800887c <HAL_RCC_OscConfig+0x518>)
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008708:	2b00      	cmp	r3, #0
 800870a:	d0f0      	beq.n	80086ee <HAL_RCC_OscConfig+0x38a>
 800870c:	e014      	b.n	8008738 <HAL_RCC_OscConfig+0x3d4>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800870e:	f7fe f92f 	bl	8006970 <HAL_GetTick>
 8008712:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008714:	e008      	b.n	8008728 <HAL_RCC_OscConfig+0x3c4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008716:	f7fe f92b 	bl	8006970 <HAL_GetTick>
 800871a:	4602      	mov	r2, r0
 800871c:	693b      	ldr	r3, [r7, #16]
 800871e:	1ad3      	subs	r3, r2, r3
 8008720:	2b64      	cmp	r3, #100	@ 0x64
 8008722:	d901      	bls.n	8008728 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8008724:	2303      	movs	r3, #3
 8008726:	e316      	b.n	8008d56 <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008728:	4b54      	ldr	r3, [pc, #336]	@ (800887c <HAL_RCC_OscConfig+0x518>)
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008730:	2b00      	cmp	r3, #0
 8008732:	d1f0      	bne.n	8008716 <HAL_RCC_OscConfig+0x3b2>
 8008734:	e000      	b.n	8008738 <HAL_RCC_OscConfig+0x3d4>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008736:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	f003 0302 	and.w	r3, r3, #2
 8008740:	2b00      	cmp	r3, #0
 8008742:	d077      	beq.n	8008834 <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	68db      	ldr	r3, [r3, #12]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d009      	beq.n	8008760 <HAL_RCC_OscConfig+0x3fc>
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	68db      	ldr	r3, [r3, #12]
 8008750:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008754:	d004      	beq.n	8008760 <HAL_RCC_OscConfig+0x3fc>
 8008756:	f44f 7113 	mov.w	r1, #588	@ 0x24c
 800875a:	4849      	ldr	r0, [pc, #292]	@ (8008880 <HAL_RCC_OscConfig+0x51c>)
 800875c:	f7fd fade 	bl	8005d1c <assert_failed>
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	691b      	ldr	r3, [r3, #16]
 8008764:	2b1f      	cmp	r3, #31
 8008766:	d904      	bls.n	8008772 <HAL_RCC_OscConfig+0x40e>
 8008768:	f240 214d 	movw	r1, #589	@ 0x24d
 800876c:	4844      	ldr	r0, [pc, #272]	@ (8008880 <HAL_RCC_OscConfig+0x51c>)
 800876e:	f7fd fad5 	bl	8005d1c <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8008772:	69bb      	ldr	r3, [r7, #24]
 8008774:	2b04      	cmp	r3, #4
 8008776:	d005      	beq.n	8008784 <HAL_RCC_OscConfig+0x420>
 8008778:	69bb      	ldr	r3, [r7, #24]
 800877a:	2b0c      	cmp	r3, #12
 800877c:	d119      	bne.n	80087b2 <HAL_RCC_OscConfig+0x44e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800877e:	697b      	ldr	r3, [r7, #20]
 8008780:	2b02      	cmp	r3, #2
 8008782:	d116      	bne.n	80087b2 <HAL_RCC_OscConfig+0x44e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008784:	4b3d      	ldr	r3, [pc, #244]	@ (800887c <HAL_RCC_OscConfig+0x518>)
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800878c:	2b00      	cmp	r3, #0
 800878e:	d005      	beq.n	800879c <HAL_RCC_OscConfig+0x438>
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	68db      	ldr	r3, [r3, #12]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d101      	bne.n	800879c <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8008798:	2301      	movs	r3, #1
 800879a:	e2dc      	b.n	8008d56 <HAL_RCC_OscConfig+0x9f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800879c:	4b37      	ldr	r3, [pc, #220]	@ (800887c <HAL_RCC_OscConfig+0x518>)
 800879e:	685b      	ldr	r3, [r3, #4]
 80087a0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	691b      	ldr	r3, [r3, #16]
 80087a8:	061b      	lsls	r3, r3, #24
 80087aa:	4934      	ldr	r1, [pc, #208]	@ (800887c <HAL_RCC_OscConfig+0x518>)
 80087ac:	4313      	orrs	r3, r2
 80087ae:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80087b0:	e040      	b.n	8008834 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	68db      	ldr	r3, [r3, #12]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d023      	beq.n	8008802 <HAL_RCC_OscConfig+0x49e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80087ba:	4b30      	ldr	r3, [pc, #192]	@ (800887c <HAL_RCC_OscConfig+0x518>)
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	4a2f      	ldr	r2, [pc, #188]	@ (800887c <HAL_RCC_OscConfig+0x518>)
 80087c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80087c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087c6:	f7fe f8d3 	bl	8006970 <HAL_GetTick>
 80087ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80087cc:	e008      	b.n	80087e0 <HAL_RCC_OscConfig+0x47c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80087ce:	f7fe f8cf 	bl	8006970 <HAL_GetTick>
 80087d2:	4602      	mov	r2, r0
 80087d4:	693b      	ldr	r3, [r7, #16]
 80087d6:	1ad3      	subs	r3, r2, r3
 80087d8:	2b02      	cmp	r3, #2
 80087da:	d901      	bls.n	80087e0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80087dc:	2303      	movs	r3, #3
 80087de:	e2ba      	b.n	8008d56 <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80087e0:	4b26      	ldr	r3, [pc, #152]	@ (800887c <HAL_RCC_OscConfig+0x518>)
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d0f0      	beq.n	80087ce <HAL_RCC_OscConfig+0x46a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80087ec:	4b23      	ldr	r3, [pc, #140]	@ (800887c <HAL_RCC_OscConfig+0x518>)
 80087ee:	685b      	ldr	r3, [r3, #4]
 80087f0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	691b      	ldr	r3, [r3, #16]
 80087f8:	061b      	lsls	r3, r3, #24
 80087fa:	4920      	ldr	r1, [pc, #128]	@ (800887c <HAL_RCC_OscConfig+0x518>)
 80087fc:	4313      	orrs	r3, r2
 80087fe:	604b      	str	r3, [r1, #4]
 8008800:	e018      	b.n	8008834 <HAL_RCC_OscConfig+0x4d0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008802:	4b1e      	ldr	r3, [pc, #120]	@ (800887c <HAL_RCC_OscConfig+0x518>)
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	4a1d      	ldr	r2, [pc, #116]	@ (800887c <HAL_RCC_OscConfig+0x518>)
 8008808:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800880c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800880e:	f7fe f8af 	bl	8006970 <HAL_GetTick>
 8008812:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008814:	e008      	b.n	8008828 <HAL_RCC_OscConfig+0x4c4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008816:	f7fe f8ab 	bl	8006970 <HAL_GetTick>
 800881a:	4602      	mov	r2, r0
 800881c:	693b      	ldr	r3, [r7, #16]
 800881e:	1ad3      	subs	r3, r2, r3
 8008820:	2b02      	cmp	r3, #2
 8008822:	d901      	bls.n	8008828 <HAL_RCC_OscConfig+0x4c4>
          {
            return HAL_TIMEOUT;
 8008824:	2303      	movs	r3, #3
 8008826:	e296      	b.n	8008d56 <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008828:	4b14      	ldr	r3, [pc, #80]	@ (800887c <HAL_RCC_OscConfig+0x518>)
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008830:	2b00      	cmp	r3, #0
 8008832:	d1f0      	bne.n	8008816 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	f003 0308 	and.w	r3, r3, #8
 800883c:	2b00      	cmp	r3, #0
 800883e:	d04e      	beq.n	80088de <HAL_RCC_OscConfig+0x57a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	695b      	ldr	r3, [r3, #20]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d008      	beq.n	800885a <HAL_RCC_OscConfig+0x4f6>
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	695b      	ldr	r3, [r3, #20]
 800884c:	2b01      	cmp	r3, #1
 800884e:	d004      	beq.n	800885a <HAL_RCC_OscConfig+0x4f6>
 8008850:	f240 218d 	movw	r1, #653	@ 0x28d
 8008854:	480a      	ldr	r0, [pc, #40]	@ (8008880 <HAL_RCC_OscConfig+0x51c>)
 8008856:	f7fd fa61 	bl	8005d1c <assert_failed>

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	695b      	ldr	r3, [r3, #20]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d021      	beq.n	80088a6 <HAL_RCC_OscConfig+0x542>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008862:	4b06      	ldr	r3, [pc, #24]	@ (800887c <HAL_RCC_OscConfig+0x518>)
 8008864:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008868:	4a04      	ldr	r2, [pc, #16]	@ (800887c <HAL_RCC_OscConfig+0x518>)
 800886a:	f043 0301 	orr.w	r3, r3, #1
 800886e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008872:	f7fe f87d 	bl	8006970 <HAL_GetTick>
 8008876:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008878:	e00d      	b.n	8008896 <HAL_RCC_OscConfig+0x532>
 800887a:	bf00      	nop
 800887c:	40021000 	.word	0x40021000
 8008880:	08010b0c 	.word	0x08010b0c
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008884:	f7fe f874 	bl	8006970 <HAL_GetTick>
 8008888:	4602      	mov	r2, r0
 800888a:	693b      	ldr	r3, [r7, #16]
 800888c:	1ad3      	subs	r3, r2, r3
 800888e:	2b02      	cmp	r3, #2
 8008890:	d901      	bls.n	8008896 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8008892:	2303      	movs	r3, #3
 8008894:	e25f      	b.n	8008d56 <HAL_RCC_OscConfig+0x9f2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008896:	4b66      	ldr	r3, [pc, #408]	@ (8008a30 <HAL_RCC_OscConfig+0x6cc>)
 8008898:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800889c:	f003 0302 	and.w	r3, r3, #2
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d0ef      	beq.n	8008884 <HAL_RCC_OscConfig+0x520>
 80088a4:	e01b      	b.n	80088de <HAL_RCC_OscConfig+0x57a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80088a6:	4b62      	ldr	r3, [pc, #392]	@ (8008a30 <HAL_RCC_OscConfig+0x6cc>)
 80088a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80088ac:	4a60      	ldr	r2, [pc, #384]	@ (8008a30 <HAL_RCC_OscConfig+0x6cc>)
 80088ae:	f023 0301 	bic.w	r3, r3, #1
 80088b2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80088b6:	f7fe f85b 	bl	8006970 <HAL_GetTick>
 80088ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80088bc:	e008      	b.n	80088d0 <HAL_RCC_OscConfig+0x56c>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80088be:	f7fe f857 	bl	8006970 <HAL_GetTick>
 80088c2:	4602      	mov	r2, r0
 80088c4:	693b      	ldr	r3, [r7, #16]
 80088c6:	1ad3      	subs	r3, r2, r3
 80088c8:	2b02      	cmp	r3, #2
 80088ca:	d901      	bls.n	80088d0 <HAL_RCC_OscConfig+0x56c>
        {
          return HAL_TIMEOUT;
 80088cc:	2303      	movs	r3, #3
 80088ce:	e242      	b.n	8008d56 <HAL_RCC_OscConfig+0x9f2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80088d0:	4b57      	ldr	r3, [pc, #348]	@ (8008a30 <HAL_RCC_OscConfig+0x6cc>)
 80088d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80088d6:	f003 0302 	and.w	r3, r3, #2
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d1ef      	bne.n	80088be <HAL_RCC_OscConfig+0x55a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f003 0304 	and.w	r3, r3, #4
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	f000 80b8 	beq.w	8008a5c <HAL_RCC_OscConfig+0x6f8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80088ec:	2300      	movs	r3, #0
 80088ee:	77fb      	strb	r3, [r7, #31]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	689b      	ldr	r3, [r3, #8]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d00c      	beq.n	8008912 <HAL_RCC_OscConfig+0x5ae>
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	689b      	ldr	r3, [r3, #8]
 80088fc:	2b01      	cmp	r3, #1
 80088fe:	d008      	beq.n	8008912 <HAL_RCC_OscConfig+0x5ae>
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	689b      	ldr	r3, [r3, #8]
 8008904:	2b05      	cmp	r3, #5
 8008906:	d004      	beq.n	8008912 <HAL_RCC_OscConfig+0x5ae>
 8008908:	f44f 7138 	mov.w	r1, #736	@ 0x2e0
 800890c:	4849      	ldr	r0, [pc, #292]	@ (8008a34 <HAL_RCC_OscConfig+0x6d0>)
 800890e:	f7fd fa05 	bl	8005d1c <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8008912:	4b47      	ldr	r3, [pc, #284]	@ (8008a30 <HAL_RCC_OscConfig+0x6cc>)
 8008914:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008916:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800891a:	2b00      	cmp	r3, #0
 800891c:	d10d      	bne.n	800893a <HAL_RCC_OscConfig+0x5d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800891e:	4b44      	ldr	r3, [pc, #272]	@ (8008a30 <HAL_RCC_OscConfig+0x6cc>)
 8008920:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008922:	4a43      	ldr	r2, [pc, #268]	@ (8008a30 <HAL_RCC_OscConfig+0x6cc>)
 8008924:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008928:	6593      	str	r3, [r2, #88]	@ 0x58
 800892a:	4b41      	ldr	r3, [pc, #260]	@ (8008a30 <HAL_RCC_OscConfig+0x6cc>)
 800892c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800892e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008932:	60bb      	str	r3, [r7, #8]
 8008934:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008936:	2301      	movs	r3, #1
 8008938:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800893a:	4b3f      	ldr	r3, [pc, #252]	@ (8008a38 <HAL_RCC_OscConfig+0x6d4>)
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008942:	2b00      	cmp	r3, #0
 8008944:	d118      	bne.n	8008978 <HAL_RCC_OscConfig+0x614>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008946:	4b3c      	ldr	r3, [pc, #240]	@ (8008a38 <HAL_RCC_OscConfig+0x6d4>)
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	4a3b      	ldr	r2, [pc, #236]	@ (8008a38 <HAL_RCC_OscConfig+0x6d4>)
 800894c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008950:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008952:	f7fe f80d 	bl	8006970 <HAL_GetTick>
 8008956:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008958:	e008      	b.n	800896c <HAL_RCC_OscConfig+0x608>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800895a:	f7fe f809 	bl	8006970 <HAL_GetTick>
 800895e:	4602      	mov	r2, r0
 8008960:	693b      	ldr	r3, [r7, #16]
 8008962:	1ad3      	subs	r3, r2, r3
 8008964:	2b02      	cmp	r3, #2
 8008966:	d901      	bls.n	800896c <HAL_RCC_OscConfig+0x608>
        {
          return HAL_TIMEOUT;
 8008968:	2303      	movs	r3, #3
 800896a:	e1f4      	b.n	8008d56 <HAL_RCC_OscConfig+0x9f2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800896c:	4b32      	ldr	r3, [pc, #200]	@ (8008a38 <HAL_RCC_OscConfig+0x6d4>)
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008974:	2b00      	cmp	r3, #0
 8008976:	d0f0      	beq.n	800895a <HAL_RCC_OscConfig+0x5f6>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	689b      	ldr	r3, [r3, #8]
 800897c:	2b01      	cmp	r3, #1
 800897e:	d108      	bne.n	8008992 <HAL_RCC_OscConfig+0x62e>
 8008980:	4b2b      	ldr	r3, [pc, #172]	@ (8008a30 <HAL_RCC_OscConfig+0x6cc>)
 8008982:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008986:	4a2a      	ldr	r2, [pc, #168]	@ (8008a30 <HAL_RCC_OscConfig+0x6cc>)
 8008988:	f043 0301 	orr.w	r3, r3, #1
 800898c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008990:	e024      	b.n	80089dc <HAL_RCC_OscConfig+0x678>
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	689b      	ldr	r3, [r3, #8]
 8008996:	2b05      	cmp	r3, #5
 8008998:	d110      	bne.n	80089bc <HAL_RCC_OscConfig+0x658>
 800899a:	4b25      	ldr	r3, [pc, #148]	@ (8008a30 <HAL_RCC_OscConfig+0x6cc>)
 800899c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80089a0:	4a23      	ldr	r2, [pc, #140]	@ (8008a30 <HAL_RCC_OscConfig+0x6cc>)
 80089a2:	f043 0304 	orr.w	r3, r3, #4
 80089a6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80089aa:	4b21      	ldr	r3, [pc, #132]	@ (8008a30 <HAL_RCC_OscConfig+0x6cc>)
 80089ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80089b0:	4a1f      	ldr	r2, [pc, #124]	@ (8008a30 <HAL_RCC_OscConfig+0x6cc>)
 80089b2:	f043 0301 	orr.w	r3, r3, #1
 80089b6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80089ba:	e00f      	b.n	80089dc <HAL_RCC_OscConfig+0x678>
 80089bc:	4b1c      	ldr	r3, [pc, #112]	@ (8008a30 <HAL_RCC_OscConfig+0x6cc>)
 80089be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80089c2:	4a1b      	ldr	r2, [pc, #108]	@ (8008a30 <HAL_RCC_OscConfig+0x6cc>)
 80089c4:	f023 0301 	bic.w	r3, r3, #1
 80089c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80089cc:	4b18      	ldr	r3, [pc, #96]	@ (8008a30 <HAL_RCC_OscConfig+0x6cc>)
 80089ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80089d2:	4a17      	ldr	r2, [pc, #92]	@ (8008a30 <HAL_RCC_OscConfig+0x6cc>)
 80089d4:	f023 0304 	bic.w	r3, r3, #4
 80089d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	689b      	ldr	r3, [r3, #8]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d016      	beq.n	8008a12 <HAL_RCC_OscConfig+0x6ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80089e4:	f7fd ffc4 	bl	8006970 <HAL_GetTick>
 80089e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80089ea:	e00a      	b.n	8008a02 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80089ec:	f7fd ffc0 	bl	8006970 <HAL_GetTick>
 80089f0:	4602      	mov	r2, r0
 80089f2:	693b      	ldr	r3, [r7, #16]
 80089f4:	1ad3      	subs	r3, r2, r3
 80089f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80089fa:	4293      	cmp	r3, r2
 80089fc:	d901      	bls.n	8008a02 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80089fe:	2303      	movs	r3, #3
 8008a00:	e1a9      	b.n	8008d56 <HAL_RCC_OscConfig+0x9f2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008a02:	4b0b      	ldr	r3, [pc, #44]	@ (8008a30 <HAL_RCC_OscConfig+0x6cc>)
 8008a04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a08:	f003 0302 	and.w	r3, r3, #2
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d0ed      	beq.n	80089ec <HAL_RCC_OscConfig+0x688>
 8008a10:	e01b      	b.n	8008a4a <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a12:	f7fd ffad 	bl	8006970 <HAL_GetTick>
 8008a16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008a18:	e010      	b.n	8008a3c <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008a1a:	f7fd ffa9 	bl	8006970 <HAL_GetTick>
 8008a1e:	4602      	mov	r2, r0
 8008a20:	693b      	ldr	r3, [r7, #16]
 8008a22:	1ad3      	subs	r3, r2, r3
 8008a24:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008a28:	4293      	cmp	r3, r2
 8008a2a:	d907      	bls.n	8008a3c <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 8008a2c:	2303      	movs	r3, #3
 8008a2e:	e192      	b.n	8008d56 <HAL_RCC_OscConfig+0x9f2>
 8008a30:	40021000 	.word	0x40021000
 8008a34:	08010b0c 	.word	0x08010b0c
 8008a38:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008a3c:	4b98      	ldr	r3, [pc, #608]	@ (8008ca0 <HAL_RCC_OscConfig+0x93c>)
 8008a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a42:	f003 0302 	and.w	r3, r3, #2
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d1e7      	bne.n	8008a1a <HAL_RCC_OscConfig+0x6b6>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008a4a:	7ffb      	ldrb	r3, [r7, #31]
 8008a4c:	2b01      	cmp	r3, #1
 8008a4e:	d105      	bne.n	8008a5c <HAL_RCC_OscConfig+0x6f8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008a50:	4b93      	ldr	r3, [pc, #588]	@ (8008ca0 <HAL_RCC_OscConfig+0x93c>)
 8008a52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a54:	4a92      	ldr	r2, [pc, #584]	@ (8008ca0 <HAL_RCC_OscConfig+0x93c>)
 8008a56:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008a5a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d00c      	beq.n	8008a7e <HAL_RCC_OscConfig+0x71a>
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a68:	2b01      	cmp	r3, #1
 8008a6a:	d008      	beq.n	8008a7e <HAL_RCC_OscConfig+0x71a>
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a70:	2b02      	cmp	r3, #2
 8008a72:	d004      	beq.n	8008a7e <HAL_RCC_OscConfig+0x71a>
 8008a74:	f240 316e 	movw	r1, #878	@ 0x36e
 8008a78:	488a      	ldr	r0, [pc, #552]	@ (8008ca4 <HAL_RCC_OscConfig+0x940>)
 8008a7a:	f7fd f94f 	bl	8005d1c <assert_failed>

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	f000 8166 	beq.w	8008d54 <HAL_RCC_OscConfig+0x9f0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a8c:	2b02      	cmp	r3, #2
 8008a8e:	f040 813c 	bne.w	8008d0a <HAL_RCC_OscConfig+0x9a6>
    {
      /* Check the parameters */
      assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d010      	beq.n	8008abc <HAL_RCC_OscConfig+0x758>
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a9e:	2b01      	cmp	r3, #1
 8008aa0:	d00c      	beq.n	8008abc <HAL_RCC_OscConfig+0x758>
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008aa6:	2b02      	cmp	r3, #2
 8008aa8:	d008      	beq.n	8008abc <HAL_RCC_OscConfig+0x758>
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008aae:	2b03      	cmp	r3, #3
 8008ab0:	d004      	beq.n	8008abc <HAL_RCC_OscConfig+0x758>
 8008ab2:	f240 3176 	movw	r1, #886	@ 0x376
 8008ab6:	487b      	ldr	r0, [pc, #492]	@ (8008ca4 <HAL_RCC_OscConfig+0x940>)
 8008ab8:	f7fd f930 	bl	8005d1c <assert_failed>
      assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d003      	beq.n	8008acc <HAL_RCC_OscConfig+0x768>
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ac8:	2b08      	cmp	r3, #8
 8008aca:	d904      	bls.n	8008ad6 <HAL_RCC_OscConfig+0x772>
 8008acc:	f240 3177 	movw	r1, #887	@ 0x377
 8008ad0:	4874      	ldr	r0, [pc, #464]	@ (8008ca4 <HAL_RCC_OscConfig+0x940>)
 8008ad2:	f7fd f923 	bl	8005d1c <assert_failed>
      assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ada:	2b07      	cmp	r3, #7
 8008adc:	d903      	bls.n	8008ae6 <HAL_RCC_OscConfig+0x782>
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ae2:	2b56      	cmp	r3, #86	@ 0x56
 8008ae4:	d904      	bls.n	8008af0 <HAL_RCC_OscConfig+0x78c>
 8008ae6:	f44f 715e 	mov.w	r1, #888	@ 0x378
 8008aea:	486e      	ldr	r0, [pc, #440]	@ (8008ca4 <HAL_RCC_OscConfig+0x940>)
 8008aec:	f7fd f916 	bl	8005d1c <assert_failed>
#if defined(RCC_PLLP_SUPPORT)
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008af4:	2b07      	cmp	r3, #7
 8008af6:	d008      	beq.n	8008b0a <HAL_RCC_OscConfig+0x7a6>
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008afc:	2b11      	cmp	r3, #17
 8008afe:	d004      	beq.n	8008b0a <HAL_RCC_OscConfig+0x7a6>
 8008b00:	f240 317a 	movw	r1, #890	@ 0x37a
 8008b04:	4867      	ldr	r0, [pc, #412]	@ (8008ca4 <HAL_RCC_OscConfig+0x940>)
 8008b06:	f7fd f909 	bl	8005d1c <assert_failed>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b0e:	2b02      	cmp	r3, #2
 8008b10:	d010      	beq.n	8008b34 <HAL_RCC_OscConfig+0x7d0>
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b16:	2b04      	cmp	r3, #4
 8008b18:	d00c      	beq.n	8008b34 <HAL_RCC_OscConfig+0x7d0>
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b1e:	2b06      	cmp	r3, #6
 8008b20:	d008      	beq.n	8008b34 <HAL_RCC_OscConfig+0x7d0>
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b26:	2b08      	cmp	r3, #8
 8008b28:	d004      	beq.n	8008b34 <HAL_RCC_OscConfig+0x7d0>
 8008b2a:	f44f 715f 	mov.w	r1, #892	@ 0x37c
 8008b2e:	485d      	ldr	r0, [pc, #372]	@ (8008ca4 <HAL_RCC_OscConfig+0x940>)
 8008b30:	f7fd f8f4 	bl	8005d1c <assert_failed>
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b38:	2b02      	cmp	r3, #2
 8008b3a:	d010      	beq.n	8008b5e <HAL_RCC_OscConfig+0x7fa>
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b40:	2b04      	cmp	r3, #4
 8008b42:	d00c      	beq.n	8008b5e <HAL_RCC_OscConfig+0x7fa>
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b48:	2b06      	cmp	r3, #6
 8008b4a:	d008      	beq.n	8008b5e <HAL_RCC_OscConfig+0x7fa>
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b50:	2b08      	cmp	r3, #8
 8008b52:	d004      	beq.n	8008b5e <HAL_RCC_OscConfig+0x7fa>
 8008b54:	f240 317d 	movw	r1, #893	@ 0x37d
 8008b58:	4852      	ldr	r0, [pc, #328]	@ (8008ca4 <HAL_RCC_OscConfig+0x940>)
 8008b5a:	f7fd f8df 	bl	8005d1c <assert_failed>

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8008b5e:	4b50      	ldr	r3, [pc, #320]	@ (8008ca0 <HAL_RCC_OscConfig+0x93c>)
 8008b60:	68db      	ldr	r3, [r3, #12]
 8008b62:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008b64:	697b      	ldr	r3, [r7, #20]
 8008b66:	f003 0203 	and.w	r2, r3, #3
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b6e:	429a      	cmp	r2, r3
 8008b70:	d130      	bne.n	8008bd4 <HAL_RCC_OscConfig+0x870>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008b72:	697b      	ldr	r3, [r7, #20]
 8008b74:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b7c:	3b01      	subs	r3, #1
 8008b7e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008b80:	429a      	cmp	r2, r3
 8008b82:	d127      	bne.n	8008bd4 <HAL_RCC_OscConfig+0x870>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008b84:	697b      	ldr	r3, [r7, #20]
 8008b86:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b8e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008b90:	429a      	cmp	r2, r3
 8008b92:	d11f      	bne.n	8008bd4 <HAL_RCC_OscConfig+0x870>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8008b94:	697b      	ldr	r3, [r7, #20]
 8008b96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008b9a:	687a      	ldr	r2, [r7, #4]
 8008b9c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8008b9e:	2a07      	cmp	r2, #7
 8008ba0:	bf14      	ite	ne
 8008ba2:	2201      	movne	r2, #1
 8008ba4:	2200      	moveq	r2, #0
 8008ba6:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008ba8:	4293      	cmp	r3, r2
 8008baa:	d113      	bne.n	8008bd4 <HAL_RCC_OscConfig+0x870>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008bac:	697b      	ldr	r3, [r7, #20]
 8008bae:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008bb6:	085b      	lsrs	r3, r3, #1
 8008bb8:	3b01      	subs	r3, #1
 8008bba:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8008bbc:	429a      	cmp	r2, r3
 8008bbe:	d109      	bne.n	8008bd4 <HAL_RCC_OscConfig+0x870>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8008bc0:	697b      	ldr	r3, [r7, #20]
 8008bc2:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bca:	085b      	lsrs	r3, r3, #1
 8008bcc:	3b01      	subs	r3, #1
 8008bce:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008bd0:	429a      	cmp	r2, r3
 8008bd2:	d074      	beq.n	8008cbe <HAL_RCC_OscConfig+0x95a>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008bd4:	69bb      	ldr	r3, [r7, #24]
 8008bd6:	2b0c      	cmp	r3, #12
 8008bd8:	d06f      	beq.n	8008cba <HAL_RCC_OscConfig+0x956>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8008bda:	4b31      	ldr	r3, [pc, #196]	@ (8008ca0 <HAL_RCC_OscConfig+0x93c>)
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d105      	bne.n	8008bf2 <HAL_RCC_OscConfig+0x88e>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8008be6:	4b2e      	ldr	r3, [pc, #184]	@ (8008ca0 <HAL_RCC_OscConfig+0x93c>)
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d001      	beq.n	8008bf6 <HAL_RCC_OscConfig+0x892>
#endif
            )
          {
            return HAL_ERROR;
 8008bf2:	2301      	movs	r3, #1
 8008bf4:	e0af      	b.n	8008d56 <HAL_RCC_OscConfig+0x9f2>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8008bf6:	4b2a      	ldr	r3, [pc, #168]	@ (8008ca0 <HAL_RCC_OscConfig+0x93c>)
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	4a29      	ldr	r2, [pc, #164]	@ (8008ca0 <HAL_RCC_OscConfig+0x93c>)
 8008bfc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008c00:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008c02:	f7fd feb5 	bl	8006970 <HAL_GetTick>
 8008c06:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008c08:	e008      	b.n	8008c1c <HAL_RCC_OscConfig+0x8b8>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008c0a:	f7fd feb1 	bl	8006970 <HAL_GetTick>
 8008c0e:	4602      	mov	r2, r0
 8008c10:	693b      	ldr	r3, [r7, #16]
 8008c12:	1ad3      	subs	r3, r2, r3
 8008c14:	2b02      	cmp	r3, #2
 8008c16:	d901      	bls.n	8008c1c <HAL_RCC_OscConfig+0x8b8>
              {
                return HAL_TIMEOUT;
 8008c18:	2303      	movs	r3, #3
 8008c1a:	e09c      	b.n	8008d56 <HAL_RCC_OscConfig+0x9f2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008c1c:	4b20      	ldr	r3, [pc, #128]	@ (8008ca0 <HAL_RCC_OscConfig+0x93c>)
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d1f0      	bne.n	8008c0a <HAL_RCC_OscConfig+0x8a6>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008c28:	4b1d      	ldr	r3, [pc, #116]	@ (8008ca0 <HAL_RCC_OscConfig+0x93c>)
 8008c2a:	68da      	ldr	r2, [r3, #12]
 8008c2c:	4b1e      	ldr	r3, [pc, #120]	@ (8008ca8 <HAL_RCC_OscConfig+0x944>)
 8008c2e:	4013      	ands	r3, r2
 8008c30:	687a      	ldr	r2, [r7, #4]
 8008c32:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8008c34:	687a      	ldr	r2, [r7, #4]
 8008c36:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008c38:	3a01      	subs	r2, #1
 8008c3a:	0112      	lsls	r2, r2, #4
 8008c3c:	4311      	orrs	r1, r2
 8008c3e:	687a      	ldr	r2, [r7, #4]
 8008c40:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8008c42:	0212      	lsls	r2, r2, #8
 8008c44:	4311      	orrs	r1, r2
 8008c46:	687a      	ldr	r2, [r7, #4]
 8008c48:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008c4a:	0852      	lsrs	r2, r2, #1
 8008c4c:	3a01      	subs	r2, #1
 8008c4e:	0552      	lsls	r2, r2, #21
 8008c50:	4311      	orrs	r1, r2
 8008c52:	687a      	ldr	r2, [r7, #4]
 8008c54:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8008c56:	0852      	lsrs	r2, r2, #1
 8008c58:	3a01      	subs	r2, #1
 8008c5a:	0652      	lsls	r2, r2, #25
 8008c5c:	4311      	orrs	r1, r2
 8008c5e:	687a      	ldr	r2, [r7, #4]
 8008c60:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8008c62:	0912      	lsrs	r2, r2, #4
 8008c64:	0452      	lsls	r2, r2, #17
 8008c66:	430a      	orrs	r2, r1
 8008c68:	490d      	ldr	r1, [pc, #52]	@ (8008ca0 <HAL_RCC_OscConfig+0x93c>)
 8008c6a:	4313      	orrs	r3, r2
 8008c6c:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8008c6e:	4b0c      	ldr	r3, [pc, #48]	@ (8008ca0 <HAL_RCC_OscConfig+0x93c>)
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	4a0b      	ldr	r2, [pc, #44]	@ (8008ca0 <HAL_RCC_OscConfig+0x93c>)
 8008c74:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008c78:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008c7a:	4b09      	ldr	r3, [pc, #36]	@ (8008ca0 <HAL_RCC_OscConfig+0x93c>)
 8008c7c:	68db      	ldr	r3, [r3, #12]
 8008c7e:	4a08      	ldr	r2, [pc, #32]	@ (8008ca0 <HAL_RCC_OscConfig+0x93c>)
 8008c80:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008c84:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008c86:	f7fd fe73 	bl	8006970 <HAL_GetTick>
 8008c8a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008c8c:	e00e      	b.n	8008cac <HAL_RCC_OscConfig+0x948>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008c8e:	f7fd fe6f 	bl	8006970 <HAL_GetTick>
 8008c92:	4602      	mov	r2, r0
 8008c94:	693b      	ldr	r3, [r7, #16]
 8008c96:	1ad3      	subs	r3, r2, r3
 8008c98:	2b02      	cmp	r3, #2
 8008c9a:	d907      	bls.n	8008cac <HAL_RCC_OscConfig+0x948>
              {
                return HAL_TIMEOUT;
 8008c9c:	2303      	movs	r3, #3
 8008c9e:	e05a      	b.n	8008d56 <HAL_RCC_OscConfig+0x9f2>
 8008ca0:	40021000 	.word	0x40021000
 8008ca4:	08010b0c 	.word	0x08010b0c
 8008ca8:	f99d808c 	.word	0xf99d808c
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008cac:	4b2c      	ldr	r3, [pc, #176]	@ (8008d60 <HAL_RCC_OscConfig+0x9fc>)
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d0ea      	beq.n	8008c8e <HAL_RCC_OscConfig+0x92a>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008cb8:	e04c      	b.n	8008d54 <HAL_RCC_OscConfig+0x9f0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8008cba:	2301      	movs	r3, #1
 8008cbc:	e04b      	b.n	8008d56 <HAL_RCC_OscConfig+0x9f2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008cbe:	4b28      	ldr	r3, [pc, #160]	@ (8008d60 <HAL_RCC_OscConfig+0x9fc>)
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d144      	bne.n	8008d54 <HAL_RCC_OscConfig+0x9f0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8008cca:	4b25      	ldr	r3, [pc, #148]	@ (8008d60 <HAL_RCC_OscConfig+0x9fc>)
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	4a24      	ldr	r2, [pc, #144]	@ (8008d60 <HAL_RCC_OscConfig+0x9fc>)
 8008cd0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008cd4:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008cd6:	4b22      	ldr	r3, [pc, #136]	@ (8008d60 <HAL_RCC_OscConfig+0x9fc>)
 8008cd8:	68db      	ldr	r3, [r3, #12]
 8008cda:	4a21      	ldr	r2, [pc, #132]	@ (8008d60 <HAL_RCC_OscConfig+0x9fc>)
 8008cdc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008ce0:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008ce2:	f7fd fe45 	bl	8006970 <HAL_GetTick>
 8008ce6:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008ce8:	e008      	b.n	8008cfc <HAL_RCC_OscConfig+0x998>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008cea:	f7fd fe41 	bl	8006970 <HAL_GetTick>
 8008cee:	4602      	mov	r2, r0
 8008cf0:	693b      	ldr	r3, [r7, #16]
 8008cf2:	1ad3      	subs	r3, r2, r3
 8008cf4:	2b02      	cmp	r3, #2
 8008cf6:	d901      	bls.n	8008cfc <HAL_RCC_OscConfig+0x998>
            {
              return HAL_TIMEOUT;
 8008cf8:	2303      	movs	r3, #3
 8008cfa:	e02c      	b.n	8008d56 <HAL_RCC_OscConfig+0x9f2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008cfc:	4b18      	ldr	r3, [pc, #96]	@ (8008d60 <HAL_RCC_OscConfig+0x9fc>)
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d0f0      	beq.n	8008cea <HAL_RCC_OscConfig+0x986>
 8008d08:	e024      	b.n	8008d54 <HAL_RCC_OscConfig+0x9f0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008d0a:	69bb      	ldr	r3, [r7, #24]
 8008d0c:	2b0c      	cmp	r3, #12
 8008d0e:	d01f      	beq.n	8008d50 <HAL_RCC_OscConfig+0x9ec>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008d10:	4b13      	ldr	r3, [pc, #76]	@ (8008d60 <HAL_RCC_OscConfig+0x9fc>)
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	4a12      	ldr	r2, [pc, #72]	@ (8008d60 <HAL_RCC_OscConfig+0x9fc>)
 8008d16:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008d1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d1c:	f7fd fe28 	bl	8006970 <HAL_GetTick>
 8008d20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008d22:	e008      	b.n	8008d36 <HAL_RCC_OscConfig+0x9d2>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008d24:	f7fd fe24 	bl	8006970 <HAL_GetTick>
 8008d28:	4602      	mov	r2, r0
 8008d2a:	693b      	ldr	r3, [r7, #16]
 8008d2c:	1ad3      	subs	r3, r2, r3
 8008d2e:	2b02      	cmp	r3, #2
 8008d30:	d901      	bls.n	8008d36 <HAL_RCC_OscConfig+0x9d2>
          {
            return HAL_TIMEOUT;
 8008d32:	2303      	movs	r3, #3
 8008d34:	e00f      	b.n	8008d56 <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008d36:	4b0a      	ldr	r3, [pc, #40]	@ (8008d60 <HAL_RCC_OscConfig+0x9fc>)
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d1f0      	bne.n	8008d24 <HAL_RCC_OscConfig+0x9c0>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8008d42:	4b07      	ldr	r3, [pc, #28]	@ (8008d60 <HAL_RCC_OscConfig+0x9fc>)
 8008d44:	68da      	ldr	r2, [r3, #12]
 8008d46:	4906      	ldr	r1, [pc, #24]	@ (8008d60 <HAL_RCC_OscConfig+0x9fc>)
 8008d48:	4b06      	ldr	r3, [pc, #24]	@ (8008d64 <HAL_RCC_OscConfig+0xa00>)
 8008d4a:	4013      	ands	r3, r2
 8008d4c:	60cb      	str	r3, [r1, #12]
 8008d4e:	e001      	b.n	8008d54 <HAL_RCC_OscConfig+0x9f0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8008d50:	2301      	movs	r3, #1
 8008d52:	e000      	b.n	8008d56 <HAL_RCC_OscConfig+0x9f2>
      }
    }
  }
  return HAL_OK;
 8008d54:	2300      	movs	r3, #0
}
 8008d56:	4618      	mov	r0, r3
 8008d58:	3720      	adds	r7, #32
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bd80      	pop	{r7, pc}
 8008d5e:	bf00      	nop
 8008d60:	40021000 	.word	0x40021000
 8008d64:	feeefffc 	.word	0xfeeefffc

08008d68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b084      	sub	sp, #16
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
 8008d70:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d101      	bne.n	8008d7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008d78:	2301      	movs	r3, #1
 8008d7a:	e186      	b.n	800908a <HAL_RCC_ClockConfig+0x322>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d003      	beq.n	8008d8c <HAL_RCC_ClockConfig+0x24>
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	2b0f      	cmp	r3, #15
 8008d8a:	d904      	bls.n	8008d96 <HAL_RCC_ClockConfig+0x2e>
 8008d8c:	f240 4159 	movw	r1, #1113	@ 0x459
 8008d90:	4882      	ldr	r0, [pc, #520]	@ (8008f9c <HAL_RCC_ClockConfig+0x234>)
 8008d92:	f7fc ffc3 	bl	8005d1c <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8008d96:	683b      	ldr	r3, [r7, #0]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d010      	beq.n	8008dbe <HAL_RCC_ClockConfig+0x56>
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	2b01      	cmp	r3, #1
 8008da0:	d00d      	beq.n	8008dbe <HAL_RCC_ClockConfig+0x56>
 8008da2:	683b      	ldr	r3, [r7, #0]
 8008da4:	2b02      	cmp	r3, #2
 8008da6:	d00a      	beq.n	8008dbe <HAL_RCC_ClockConfig+0x56>
 8008da8:	683b      	ldr	r3, [r7, #0]
 8008daa:	2b03      	cmp	r3, #3
 8008dac:	d007      	beq.n	8008dbe <HAL_RCC_ClockConfig+0x56>
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	2b04      	cmp	r3, #4
 8008db2:	d004      	beq.n	8008dbe <HAL_RCC_ClockConfig+0x56>
 8008db4:	f240 415a 	movw	r1, #1114	@ 0x45a
 8008db8:	4878      	ldr	r0, [pc, #480]	@ (8008f9c <HAL_RCC_ClockConfig+0x234>)
 8008dba:	f7fc ffaf 	bl	8005d1c <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008dbe:	4b78      	ldr	r3, [pc, #480]	@ (8008fa0 <HAL_RCC_ClockConfig+0x238>)
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	f003 0307 	and.w	r3, r3, #7
 8008dc6:	683a      	ldr	r2, [r7, #0]
 8008dc8:	429a      	cmp	r2, r3
 8008dca:	d910      	bls.n	8008dee <HAL_RCC_ClockConfig+0x86>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008dcc:	4b74      	ldr	r3, [pc, #464]	@ (8008fa0 <HAL_RCC_ClockConfig+0x238>)
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	f023 0207 	bic.w	r2, r3, #7
 8008dd4:	4972      	ldr	r1, [pc, #456]	@ (8008fa0 <HAL_RCC_ClockConfig+0x238>)
 8008dd6:	683b      	ldr	r3, [r7, #0]
 8008dd8:	4313      	orrs	r3, r2
 8008dda:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008ddc:	4b70      	ldr	r3, [pc, #448]	@ (8008fa0 <HAL_RCC_ClockConfig+0x238>)
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	f003 0307 	and.w	r3, r3, #7
 8008de4:	683a      	ldr	r2, [r7, #0]
 8008de6:	429a      	cmp	r2, r3
 8008de8:	d001      	beq.n	8008dee <HAL_RCC_ClockConfig+0x86>
    {
      return HAL_ERROR;
 8008dea:	2301      	movs	r3, #1
 8008dec:	e14d      	b.n	800908a <HAL_RCC_ClockConfig+0x322>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	f003 0302 	and.w	r3, r3, #2
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d039      	beq.n	8008e6e <HAL_RCC_ClockConfig+0x106>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	689b      	ldr	r3, [r3, #8]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d024      	beq.n	8008e4c <HAL_RCC_ClockConfig+0xe4>
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	689b      	ldr	r3, [r3, #8]
 8008e06:	2b80      	cmp	r3, #128	@ 0x80
 8008e08:	d020      	beq.n	8008e4c <HAL_RCC_ClockConfig+0xe4>
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	689b      	ldr	r3, [r3, #8]
 8008e0e:	2b90      	cmp	r3, #144	@ 0x90
 8008e10:	d01c      	beq.n	8008e4c <HAL_RCC_ClockConfig+0xe4>
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	689b      	ldr	r3, [r3, #8]
 8008e16:	2ba0      	cmp	r3, #160	@ 0xa0
 8008e18:	d018      	beq.n	8008e4c <HAL_RCC_ClockConfig+0xe4>
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	689b      	ldr	r3, [r3, #8]
 8008e1e:	2bb0      	cmp	r3, #176	@ 0xb0
 8008e20:	d014      	beq.n	8008e4c <HAL_RCC_ClockConfig+0xe4>
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	689b      	ldr	r3, [r3, #8]
 8008e26:	2bc0      	cmp	r3, #192	@ 0xc0
 8008e28:	d010      	beq.n	8008e4c <HAL_RCC_ClockConfig+0xe4>
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	689b      	ldr	r3, [r3, #8]
 8008e2e:	2bd0      	cmp	r3, #208	@ 0xd0
 8008e30:	d00c      	beq.n	8008e4c <HAL_RCC_ClockConfig+0xe4>
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	689b      	ldr	r3, [r3, #8]
 8008e36:	2be0      	cmp	r3, #224	@ 0xe0
 8008e38:	d008      	beq.n	8008e4c <HAL_RCC_ClockConfig+0xe4>
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	689b      	ldr	r3, [r3, #8]
 8008e3e:	2bf0      	cmp	r3, #240	@ 0xf0
 8008e40:	d004      	beq.n	8008e4c <HAL_RCC_ClockConfig+0xe4>
 8008e42:	f240 4172 	movw	r1, #1138	@ 0x472
 8008e46:	4855      	ldr	r0, [pc, #340]	@ (8008f9c <HAL_RCC_ClockConfig+0x234>)
 8008e48:	f7fc ff68 	bl	8005d1c <assert_failed>

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	689a      	ldr	r2, [r3, #8]
 8008e50:	4b54      	ldr	r3, [pc, #336]	@ (8008fa4 <HAL_RCC_ClockConfig+0x23c>)
 8008e52:	689b      	ldr	r3, [r3, #8]
 8008e54:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008e58:	429a      	cmp	r2, r3
 8008e5a:	d908      	bls.n	8008e6e <HAL_RCC_ClockConfig+0x106>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008e5c:	4b51      	ldr	r3, [pc, #324]	@ (8008fa4 <HAL_RCC_ClockConfig+0x23c>)
 8008e5e:	689b      	ldr	r3, [r3, #8]
 8008e60:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	689b      	ldr	r3, [r3, #8]
 8008e68:	494e      	ldr	r1, [pc, #312]	@ (8008fa4 <HAL_RCC_ClockConfig+0x23c>)
 8008e6a:	4313      	orrs	r3, r2
 8008e6c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	f003 0301 	and.w	r3, r3, #1
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d061      	beq.n	8008f3e <HAL_RCC_ClockConfig+0x1d6>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	685b      	ldr	r3, [r3, #4]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d010      	beq.n	8008ea4 <HAL_RCC_ClockConfig+0x13c>
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	685b      	ldr	r3, [r3, #4]
 8008e86:	2b01      	cmp	r3, #1
 8008e88:	d00c      	beq.n	8008ea4 <HAL_RCC_ClockConfig+0x13c>
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	685b      	ldr	r3, [r3, #4]
 8008e8e:	2b02      	cmp	r3, #2
 8008e90:	d008      	beq.n	8008ea4 <HAL_RCC_ClockConfig+0x13c>
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	685b      	ldr	r3, [r3, #4]
 8008e96:	2b03      	cmp	r3, #3
 8008e98:	d004      	beq.n	8008ea4 <HAL_RCC_ClockConfig+0x13c>
 8008e9a:	f240 417d 	movw	r1, #1149	@ 0x47d
 8008e9e:	483f      	ldr	r0, [pc, #252]	@ (8008f9c <HAL_RCC_ClockConfig+0x234>)
 8008ea0:	f7fc ff3c 	bl	8005d1c <assert_failed>

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	685b      	ldr	r3, [r3, #4]
 8008ea8:	2b03      	cmp	r3, #3
 8008eaa:	d107      	bne.n	8008ebc <HAL_RCC_ClockConfig+0x154>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008eac:	4b3d      	ldr	r3, [pc, #244]	@ (8008fa4 <HAL_RCC_ClockConfig+0x23c>)
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d121      	bne.n	8008efc <HAL_RCC_ClockConfig+0x194>
      {
        return HAL_ERROR;
 8008eb8:	2301      	movs	r3, #1
 8008eba:	e0e6      	b.n	800908a <HAL_RCC_ClockConfig+0x322>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	685b      	ldr	r3, [r3, #4]
 8008ec0:	2b02      	cmp	r3, #2
 8008ec2:	d107      	bne.n	8008ed4 <HAL_RCC_ClockConfig+0x16c>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008ec4:	4b37      	ldr	r3, [pc, #220]	@ (8008fa4 <HAL_RCC_ClockConfig+0x23c>)
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d115      	bne.n	8008efc <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_ERROR;
 8008ed0:	2301      	movs	r3, #1
 8008ed2:	e0da      	b.n	800908a <HAL_RCC_ClockConfig+0x322>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	685b      	ldr	r3, [r3, #4]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d107      	bne.n	8008eec <HAL_RCC_ClockConfig+0x184>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008edc:	4b31      	ldr	r3, [pc, #196]	@ (8008fa4 <HAL_RCC_ClockConfig+0x23c>)
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	f003 0302 	and.w	r3, r3, #2
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d109      	bne.n	8008efc <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_ERROR;
 8008ee8:	2301      	movs	r3, #1
 8008eea:	e0ce      	b.n	800908a <HAL_RCC_ClockConfig+0x322>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008eec:	4b2d      	ldr	r3, [pc, #180]	@ (8008fa4 <HAL_RCC_ClockConfig+0x23c>)
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d101      	bne.n	8008efc <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_ERROR;
 8008ef8:	2301      	movs	r3, #1
 8008efa:	e0c6      	b.n	800908a <HAL_RCC_ClockConfig+0x322>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008efc:	4b29      	ldr	r3, [pc, #164]	@ (8008fa4 <HAL_RCC_ClockConfig+0x23c>)
 8008efe:	689b      	ldr	r3, [r3, #8]
 8008f00:	f023 0203 	bic.w	r2, r3, #3
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	685b      	ldr	r3, [r3, #4]
 8008f08:	4926      	ldr	r1, [pc, #152]	@ (8008fa4 <HAL_RCC_ClockConfig+0x23c>)
 8008f0a:	4313      	orrs	r3, r2
 8008f0c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008f0e:	f7fd fd2f 	bl	8006970 <HAL_GetTick>
 8008f12:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008f14:	e00a      	b.n	8008f2c <HAL_RCC_ClockConfig+0x1c4>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008f16:	f7fd fd2b 	bl	8006970 <HAL_GetTick>
 8008f1a:	4602      	mov	r2, r0
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	1ad3      	subs	r3, r2, r3
 8008f20:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008f24:	4293      	cmp	r3, r2
 8008f26:	d901      	bls.n	8008f2c <HAL_RCC_ClockConfig+0x1c4>
      {
        return HAL_TIMEOUT;
 8008f28:	2303      	movs	r3, #3
 8008f2a:	e0ae      	b.n	800908a <HAL_RCC_ClockConfig+0x322>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008f2c:	4b1d      	ldr	r3, [pc, #116]	@ (8008fa4 <HAL_RCC_ClockConfig+0x23c>)
 8008f2e:	689b      	ldr	r3, [r3, #8]
 8008f30:	f003 020c 	and.w	r2, r3, #12
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	685b      	ldr	r3, [r3, #4]
 8008f38:	009b      	lsls	r3, r3, #2
 8008f3a:	429a      	cmp	r2, r3
 8008f3c:	d1eb      	bne.n	8008f16 <HAL_RCC_ClockConfig+0x1ae>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	f003 0302 	and.w	r3, r3, #2
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d010      	beq.n	8008f6c <HAL_RCC_ClockConfig+0x204>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	689a      	ldr	r2, [r3, #8]
 8008f4e:	4b15      	ldr	r3, [pc, #84]	@ (8008fa4 <HAL_RCC_ClockConfig+0x23c>)
 8008f50:	689b      	ldr	r3, [r3, #8]
 8008f52:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008f56:	429a      	cmp	r2, r3
 8008f58:	d208      	bcs.n	8008f6c <HAL_RCC_ClockConfig+0x204>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008f5a:	4b12      	ldr	r3, [pc, #72]	@ (8008fa4 <HAL_RCC_ClockConfig+0x23c>)
 8008f5c:	689b      	ldr	r3, [r3, #8]
 8008f5e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	689b      	ldr	r3, [r3, #8]
 8008f66:	490f      	ldr	r1, [pc, #60]	@ (8008fa4 <HAL_RCC_ClockConfig+0x23c>)
 8008f68:	4313      	orrs	r3, r2
 8008f6a:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008f6c:	4b0c      	ldr	r3, [pc, #48]	@ (8008fa0 <HAL_RCC_ClockConfig+0x238>)
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	f003 0307 	and.w	r3, r3, #7
 8008f74:	683a      	ldr	r2, [r7, #0]
 8008f76:	429a      	cmp	r2, r3
 8008f78:	d216      	bcs.n	8008fa8 <HAL_RCC_ClockConfig+0x240>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008f7a:	4b09      	ldr	r3, [pc, #36]	@ (8008fa0 <HAL_RCC_ClockConfig+0x238>)
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	f023 0207 	bic.w	r2, r3, #7
 8008f82:	4907      	ldr	r1, [pc, #28]	@ (8008fa0 <HAL_RCC_ClockConfig+0x238>)
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	4313      	orrs	r3, r2
 8008f88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008f8a:	4b05      	ldr	r3, [pc, #20]	@ (8008fa0 <HAL_RCC_ClockConfig+0x238>)
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	f003 0307 	and.w	r3, r3, #7
 8008f92:	683a      	ldr	r2, [r7, #0]
 8008f94:	429a      	cmp	r2, r3
 8008f96:	d007      	beq.n	8008fa8 <HAL_RCC_ClockConfig+0x240>
    {
      return HAL_ERROR;
 8008f98:	2301      	movs	r3, #1
 8008f9a:	e076      	b.n	800908a <HAL_RCC_ClockConfig+0x322>
 8008f9c:	08010b0c 	.word	0x08010b0c
 8008fa0:	40022000 	.word	0x40022000
 8008fa4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	f003 0304 	and.w	r3, r3, #4
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d025      	beq.n	8009000 <HAL_RCC_ClockConfig+0x298>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	68db      	ldr	r3, [r3, #12]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d018      	beq.n	8008fee <HAL_RCC_ClockConfig+0x286>
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	68db      	ldr	r3, [r3, #12]
 8008fc0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008fc4:	d013      	beq.n	8008fee <HAL_RCC_ClockConfig+0x286>
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	68db      	ldr	r3, [r3, #12]
 8008fca:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8008fce:	d00e      	beq.n	8008fee <HAL_RCC_ClockConfig+0x286>
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	68db      	ldr	r3, [r3, #12]
 8008fd4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008fd8:	d009      	beq.n	8008fee <HAL_RCC_ClockConfig+0x286>
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	68db      	ldr	r3, [r3, #12]
 8008fde:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008fe2:	d004      	beq.n	8008fee <HAL_RCC_ClockConfig+0x286>
 8008fe4:	f240 41f5 	movw	r1, #1269	@ 0x4f5
 8008fe8:	482a      	ldr	r0, [pc, #168]	@ (8009094 <HAL_RCC_ClockConfig+0x32c>)
 8008fea:	f7fc fe97 	bl	8005d1c <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008fee:	4b2a      	ldr	r3, [pc, #168]	@ (8009098 <HAL_RCC_ClockConfig+0x330>)
 8008ff0:	689b      	ldr	r3, [r3, #8]
 8008ff2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	68db      	ldr	r3, [r3, #12]
 8008ffa:	4927      	ldr	r1, [pc, #156]	@ (8009098 <HAL_RCC_ClockConfig+0x330>)
 8008ffc:	4313      	orrs	r3, r2
 8008ffe:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	f003 0308 	and.w	r3, r3, #8
 8009008:	2b00      	cmp	r3, #0
 800900a:	d026      	beq.n	800905a <HAL_RCC_ClockConfig+0x2f2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	691b      	ldr	r3, [r3, #16]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d018      	beq.n	8009046 <HAL_RCC_ClockConfig+0x2de>
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	691b      	ldr	r3, [r3, #16]
 8009018:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800901c:	d013      	beq.n	8009046 <HAL_RCC_ClockConfig+0x2de>
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	691b      	ldr	r3, [r3, #16]
 8009022:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8009026:	d00e      	beq.n	8009046 <HAL_RCC_ClockConfig+0x2de>
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	691b      	ldr	r3, [r3, #16]
 800902c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8009030:	d009      	beq.n	8009046 <HAL_RCC_ClockConfig+0x2de>
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	691b      	ldr	r3, [r3, #16]
 8009036:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800903a:	d004      	beq.n	8009046 <HAL_RCC_ClockConfig+0x2de>
 800903c:	f240 41fc 	movw	r1, #1276	@ 0x4fc
 8009040:	4814      	ldr	r0, [pc, #80]	@ (8009094 <HAL_RCC_ClockConfig+0x32c>)
 8009042:	f7fc fe6b 	bl	8005d1c <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009046:	4b14      	ldr	r3, [pc, #80]	@ (8009098 <HAL_RCC_ClockConfig+0x330>)
 8009048:	689b      	ldr	r3, [r3, #8]
 800904a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	691b      	ldr	r3, [r3, #16]
 8009052:	00db      	lsls	r3, r3, #3
 8009054:	4910      	ldr	r1, [pc, #64]	@ (8009098 <HAL_RCC_ClockConfig+0x330>)
 8009056:	4313      	orrs	r3, r2
 8009058:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800905a:	f000 f825 	bl	80090a8 <HAL_RCC_GetSysClockFreq>
 800905e:	4602      	mov	r2, r0
 8009060:	4b0d      	ldr	r3, [pc, #52]	@ (8009098 <HAL_RCC_ClockConfig+0x330>)
 8009062:	689b      	ldr	r3, [r3, #8]
 8009064:	091b      	lsrs	r3, r3, #4
 8009066:	f003 030f 	and.w	r3, r3, #15
 800906a:	490c      	ldr	r1, [pc, #48]	@ (800909c <HAL_RCC_ClockConfig+0x334>)
 800906c:	5ccb      	ldrb	r3, [r1, r3]
 800906e:	f003 031f 	and.w	r3, r3, #31
 8009072:	fa22 f303 	lsr.w	r3, r2, r3
 8009076:	4a0a      	ldr	r2, [pc, #40]	@ (80090a0 <HAL_RCC_ClockConfig+0x338>)
 8009078:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800907a:	4b0a      	ldr	r3, [pc, #40]	@ (80090a4 <HAL_RCC_ClockConfig+0x33c>)
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	4618      	mov	r0, r3
 8009080:	f7fd fc26 	bl	80068d0 <HAL_InitTick>
 8009084:	4603      	mov	r3, r0
 8009086:	72fb      	strb	r3, [r7, #11]

  return status;
 8009088:	7afb      	ldrb	r3, [r7, #11]
}
 800908a:	4618      	mov	r0, r3
 800908c:	3710      	adds	r7, #16
 800908e:	46bd      	mov	sp, r7
 8009090:	bd80      	pop	{r7, pc}
 8009092:	bf00      	nop
 8009094:	08010b0c 	.word	0x08010b0c
 8009098:	40021000 	.word	0x40021000
 800909c:	08010ce8 	.word	0x08010ce8
 80090a0:	20000014 	.word	0x20000014
 80090a4:	20000018 	.word	0x20000018

080090a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80090a8:	b480      	push	{r7}
 80090aa:	b089      	sub	sp, #36	@ 0x24
 80090ac:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80090ae:	2300      	movs	r3, #0
 80090b0:	61fb      	str	r3, [r7, #28]
 80090b2:	2300      	movs	r3, #0
 80090b4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80090b6:	4b3e      	ldr	r3, [pc, #248]	@ (80091b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80090b8:	689b      	ldr	r3, [r3, #8]
 80090ba:	f003 030c 	and.w	r3, r3, #12
 80090be:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80090c0:	4b3b      	ldr	r3, [pc, #236]	@ (80091b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80090c2:	68db      	ldr	r3, [r3, #12]
 80090c4:	f003 0303 	and.w	r3, r3, #3
 80090c8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80090ca:	693b      	ldr	r3, [r7, #16]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d005      	beq.n	80090dc <HAL_RCC_GetSysClockFreq+0x34>
 80090d0:	693b      	ldr	r3, [r7, #16]
 80090d2:	2b0c      	cmp	r3, #12
 80090d4:	d121      	bne.n	800911a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	2b01      	cmp	r3, #1
 80090da:	d11e      	bne.n	800911a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80090dc:	4b34      	ldr	r3, [pc, #208]	@ (80091b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	f003 0308 	and.w	r3, r3, #8
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d107      	bne.n	80090f8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80090e8:	4b31      	ldr	r3, [pc, #196]	@ (80091b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80090ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80090ee:	0a1b      	lsrs	r3, r3, #8
 80090f0:	f003 030f 	and.w	r3, r3, #15
 80090f4:	61fb      	str	r3, [r7, #28]
 80090f6:	e005      	b.n	8009104 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80090f8:	4b2d      	ldr	r3, [pc, #180]	@ (80091b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	091b      	lsrs	r3, r3, #4
 80090fe:	f003 030f 	and.w	r3, r3, #15
 8009102:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8009104:	4a2b      	ldr	r2, [pc, #172]	@ (80091b4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8009106:	69fb      	ldr	r3, [r7, #28]
 8009108:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800910c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800910e:	693b      	ldr	r3, [r7, #16]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d10d      	bne.n	8009130 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8009114:	69fb      	ldr	r3, [r7, #28]
 8009116:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009118:	e00a      	b.n	8009130 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800911a:	693b      	ldr	r3, [r7, #16]
 800911c:	2b04      	cmp	r3, #4
 800911e:	d102      	bne.n	8009126 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8009120:	4b25      	ldr	r3, [pc, #148]	@ (80091b8 <HAL_RCC_GetSysClockFreq+0x110>)
 8009122:	61bb      	str	r3, [r7, #24]
 8009124:	e004      	b.n	8009130 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8009126:	693b      	ldr	r3, [r7, #16]
 8009128:	2b08      	cmp	r3, #8
 800912a:	d101      	bne.n	8009130 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800912c:	4b23      	ldr	r3, [pc, #140]	@ (80091bc <HAL_RCC_GetSysClockFreq+0x114>)
 800912e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8009130:	693b      	ldr	r3, [r7, #16]
 8009132:	2b0c      	cmp	r3, #12
 8009134:	d134      	bne.n	80091a0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009136:	4b1e      	ldr	r3, [pc, #120]	@ (80091b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8009138:	68db      	ldr	r3, [r3, #12]
 800913a:	f003 0303 	and.w	r3, r3, #3
 800913e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8009140:	68bb      	ldr	r3, [r7, #8]
 8009142:	2b02      	cmp	r3, #2
 8009144:	d003      	beq.n	800914e <HAL_RCC_GetSysClockFreq+0xa6>
 8009146:	68bb      	ldr	r3, [r7, #8]
 8009148:	2b03      	cmp	r3, #3
 800914a:	d003      	beq.n	8009154 <HAL_RCC_GetSysClockFreq+0xac>
 800914c:	e005      	b.n	800915a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800914e:	4b1a      	ldr	r3, [pc, #104]	@ (80091b8 <HAL_RCC_GetSysClockFreq+0x110>)
 8009150:	617b      	str	r3, [r7, #20]
      break;
 8009152:	e005      	b.n	8009160 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8009154:	4b19      	ldr	r3, [pc, #100]	@ (80091bc <HAL_RCC_GetSysClockFreq+0x114>)
 8009156:	617b      	str	r3, [r7, #20]
      break;
 8009158:	e002      	b.n	8009160 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800915a:	69fb      	ldr	r3, [r7, #28]
 800915c:	617b      	str	r3, [r7, #20]
      break;
 800915e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009160:	4b13      	ldr	r3, [pc, #76]	@ (80091b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8009162:	68db      	ldr	r3, [r3, #12]
 8009164:	091b      	lsrs	r3, r3, #4
 8009166:	f003 0307 	and.w	r3, r3, #7
 800916a:	3301      	adds	r3, #1
 800916c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800916e:	4b10      	ldr	r3, [pc, #64]	@ (80091b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8009170:	68db      	ldr	r3, [r3, #12]
 8009172:	0a1b      	lsrs	r3, r3, #8
 8009174:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009178:	697a      	ldr	r2, [r7, #20]
 800917a:	fb03 f202 	mul.w	r2, r3, r2
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	fbb2 f3f3 	udiv	r3, r2, r3
 8009184:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009186:	4b0a      	ldr	r3, [pc, #40]	@ (80091b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8009188:	68db      	ldr	r3, [r3, #12]
 800918a:	0e5b      	lsrs	r3, r3, #25
 800918c:	f003 0303 	and.w	r3, r3, #3
 8009190:	3301      	adds	r3, #1
 8009192:	005b      	lsls	r3, r3, #1
 8009194:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8009196:	697a      	ldr	r2, [r7, #20]
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	fbb2 f3f3 	udiv	r3, r2, r3
 800919e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80091a0:	69bb      	ldr	r3, [r7, #24]
}
 80091a2:	4618      	mov	r0, r3
 80091a4:	3724      	adds	r7, #36	@ 0x24
 80091a6:	46bd      	mov	sp, r7
 80091a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ac:	4770      	bx	lr
 80091ae:	bf00      	nop
 80091b0:	40021000 	.word	0x40021000
 80091b4:	08010d00 	.word	0x08010d00
 80091b8:	00f42400 	.word	0x00f42400
 80091bc:	007a1200 	.word	0x007a1200

080091c0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80091c0:	b480      	push	{r7}
 80091c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80091c4:	4b03      	ldr	r3, [pc, #12]	@ (80091d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80091c6:	681b      	ldr	r3, [r3, #0]
}
 80091c8:	4618      	mov	r0, r3
 80091ca:	46bd      	mov	sp, r7
 80091cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d0:	4770      	bx	lr
 80091d2:	bf00      	nop
 80091d4:	20000014 	.word	0x20000014

080091d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80091dc:	f7ff fff0 	bl	80091c0 <HAL_RCC_GetHCLKFreq>
 80091e0:	4602      	mov	r2, r0
 80091e2:	4b06      	ldr	r3, [pc, #24]	@ (80091fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80091e4:	689b      	ldr	r3, [r3, #8]
 80091e6:	0a1b      	lsrs	r3, r3, #8
 80091e8:	f003 0307 	and.w	r3, r3, #7
 80091ec:	4904      	ldr	r1, [pc, #16]	@ (8009200 <HAL_RCC_GetPCLK1Freq+0x28>)
 80091ee:	5ccb      	ldrb	r3, [r1, r3]
 80091f0:	f003 031f 	and.w	r3, r3, #31
 80091f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80091f8:	4618      	mov	r0, r3
 80091fa:	bd80      	pop	{r7, pc}
 80091fc:	40021000 	.word	0x40021000
 8009200:	08010cf8 	.word	0x08010cf8

08009204 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009204:	b580      	push	{r7, lr}
 8009206:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8009208:	f7ff ffda 	bl	80091c0 <HAL_RCC_GetHCLKFreq>
 800920c:	4602      	mov	r2, r0
 800920e:	4b06      	ldr	r3, [pc, #24]	@ (8009228 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009210:	689b      	ldr	r3, [r3, #8]
 8009212:	0adb      	lsrs	r3, r3, #11
 8009214:	f003 0307 	and.w	r3, r3, #7
 8009218:	4904      	ldr	r1, [pc, #16]	@ (800922c <HAL_RCC_GetPCLK2Freq+0x28>)
 800921a:	5ccb      	ldrb	r3, [r1, r3]
 800921c:	f003 031f 	and.w	r3, r3, #31
 8009220:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009224:	4618      	mov	r0, r3
 8009226:	bd80      	pop	{r7, pc}
 8009228:	40021000 	.word	0x40021000
 800922c:	08010cf8 	.word	0x08010cf8

08009230 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b086      	sub	sp, #24
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8009238:	2300      	movs	r3, #0
 800923a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800923c:	4b2a      	ldr	r3, [pc, #168]	@ (80092e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800923e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009240:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009244:	2b00      	cmp	r3, #0
 8009246:	d003      	beq.n	8009250 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8009248:	f7ff f81c 	bl	8008284 <HAL_PWREx_GetVoltageRange>
 800924c:	6178      	str	r0, [r7, #20]
 800924e:	e014      	b.n	800927a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8009250:	4b25      	ldr	r3, [pc, #148]	@ (80092e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009252:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009254:	4a24      	ldr	r2, [pc, #144]	@ (80092e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009256:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800925a:	6593      	str	r3, [r2, #88]	@ 0x58
 800925c:	4b22      	ldr	r3, [pc, #136]	@ (80092e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800925e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009260:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009264:	60fb      	str	r3, [r7, #12]
 8009266:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8009268:	f7ff f80c 	bl	8008284 <HAL_PWREx_GetVoltageRange>
 800926c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800926e:	4b1e      	ldr	r3, [pc, #120]	@ (80092e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009270:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009272:	4a1d      	ldr	r2, [pc, #116]	@ (80092e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009274:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009278:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800927a:	697b      	ldr	r3, [r7, #20]
 800927c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009280:	d10b      	bne.n	800929a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	2b80      	cmp	r3, #128	@ 0x80
 8009286:	d919      	bls.n	80092bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2ba0      	cmp	r3, #160	@ 0xa0
 800928c:	d902      	bls.n	8009294 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800928e:	2302      	movs	r3, #2
 8009290:	613b      	str	r3, [r7, #16]
 8009292:	e013      	b.n	80092bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8009294:	2301      	movs	r3, #1
 8009296:	613b      	str	r3, [r7, #16]
 8009298:	e010      	b.n	80092bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	2b80      	cmp	r3, #128	@ 0x80
 800929e:	d902      	bls.n	80092a6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80092a0:	2303      	movs	r3, #3
 80092a2:	613b      	str	r3, [r7, #16]
 80092a4:	e00a      	b.n	80092bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	2b80      	cmp	r3, #128	@ 0x80
 80092aa:	d102      	bne.n	80092b2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80092ac:	2302      	movs	r3, #2
 80092ae:	613b      	str	r3, [r7, #16]
 80092b0:	e004      	b.n	80092bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	2b70      	cmp	r3, #112	@ 0x70
 80092b6:	d101      	bne.n	80092bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80092b8:	2301      	movs	r3, #1
 80092ba:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80092bc:	4b0b      	ldr	r3, [pc, #44]	@ (80092ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	f023 0207 	bic.w	r2, r3, #7
 80092c4:	4909      	ldr	r1, [pc, #36]	@ (80092ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80092c6:	693b      	ldr	r3, [r7, #16]
 80092c8:	4313      	orrs	r3, r2
 80092ca:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80092cc:	4b07      	ldr	r3, [pc, #28]	@ (80092ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	f003 0307 	and.w	r3, r3, #7
 80092d4:	693a      	ldr	r2, [r7, #16]
 80092d6:	429a      	cmp	r2, r3
 80092d8:	d001      	beq.n	80092de <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80092da:	2301      	movs	r3, #1
 80092dc:	e000      	b.n	80092e0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80092de:	2300      	movs	r3, #0
}
 80092e0:	4618      	mov	r0, r3
 80092e2:	3718      	adds	r7, #24
 80092e4:	46bd      	mov	sp, r7
 80092e6:	bd80      	pop	{r7, pc}
 80092e8:	40021000 	.word	0x40021000
 80092ec:	40022000 	.word	0x40022000

080092f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b086      	sub	sp, #24
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80092f8:	2300      	movs	r3, #0
 80092fa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80092fc:	2300      	movs	r3, #0
 80092fe:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009308:	2b00      	cmp	r3, #0
 800930a:	d004      	beq.n	8009316 <HAL_RCCEx_PeriphCLKConfig+0x26>
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009314:	d303      	bcc.n	800931e <HAL_RCCEx_PeriphCLKConfig+0x2e>
 8009316:	21c9      	movs	r1, #201	@ 0xc9
 8009318:	4889      	ldr	r0, [pc, #548]	@ (8009540 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800931a:	f7fc fcff 	bl	8005d1c <assert_failed>

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009326:	2b00      	cmp	r3, #0
 8009328:	d058      	beq.n	80093dc <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800932e:	2b00      	cmp	r3, #0
 8009330:	d012      	beq.n	8009358 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009336:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800933a:	d00d      	beq.n	8009358 <HAL_RCCEx_PeriphCLKConfig+0x68>
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009340:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009344:	d008      	beq.n	8009358 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800934a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800934e:	d003      	beq.n	8009358 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8009350:	21d1      	movs	r1, #209	@ 0xd1
 8009352:	487b      	ldr	r0, [pc, #492]	@ (8009540 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8009354:	f7fc fce2 	bl	8005d1c <assert_failed>

    switch(PeriphClkInit->Sai1ClockSelection)
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800935c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8009360:	d02a      	beq.n	80093b8 <HAL_RCCEx_PeriphCLKConfig+0xc8>
 8009362:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8009366:	d824      	bhi.n	80093b2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
 8009368:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800936c:	d008      	beq.n	8009380 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800936e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009372:	d81e      	bhi.n	80093b2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
 8009374:	2b00      	cmp	r3, #0
 8009376:	d00a      	beq.n	800938e <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8009378:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800937c:	d010      	beq.n	80093a0 <HAL_RCCEx_PeriphCLKConfig+0xb0>
 800937e:	e018      	b.n	80093b2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8009380:	4b70      	ldr	r3, [pc, #448]	@ (8009544 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8009382:	68db      	ldr	r3, [r3, #12]
 8009384:	4a6f      	ldr	r2, [pc, #444]	@ (8009544 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8009386:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800938a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800938c:	e015      	b.n	80093ba <HAL_RCCEx_PeriphCLKConfig+0xca>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	3304      	adds	r3, #4
 8009392:	2100      	movs	r1, #0
 8009394:	4618      	mov	r0, r3
 8009396:	f000 fc69 	bl	8009c6c <RCCEx_PLLSAI1_Config>
 800939a:	4603      	mov	r3, r0
 800939c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800939e:	e00c      	b.n	80093ba <HAL_RCCEx_PeriphCLKConfig+0xca>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	3320      	adds	r3, #32
 80093a4:	2100      	movs	r1, #0
 80093a6:	4618      	mov	r0, r3
 80093a8:	f000 fde0 	bl	8009f6c <RCCEx_PLLSAI2_Config>
 80093ac:	4603      	mov	r3, r0
 80093ae:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80093b0:	e003      	b.n	80093ba <HAL_RCCEx_PeriphCLKConfig+0xca>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80093b2:	2301      	movs	r3, #1
 80093b4:	74fb      	strb	r3, [r7, #19]
      break;
 80093b6:	e000      	b.n	80093ba <HAL_RCCEx_PeriphCLKConfig+0xca>
      break;
 80093b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80093ba:	7cfb      	ldrb	r3, [r7, #19]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d10b      	bne.n	80093d8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80093c0:	4b60      	ldr	r3, [pc, #384]	@ (8009544 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80093c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80093c6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80093ce:	495d      	ldr	r1, [pc, #372]	@ (8009544 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80093d0:	4313      	orrs	r3, r2
 80093d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80093d6:	e001      	b.n	80093dc <HAL_RCCEx_PeriphCLKConfig+0xec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093d8:	7cfb      	ldrb	r3, [r7, #19]
 80093da:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d059      	beq.n	800949c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d013      	beq.n	8009418 <HAL_RCCEx_PeriphCLKConfig+0x128>
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80093f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80093f8:	d00e      	beq.n	8009418 <HAL_RCCEx_PeriphCLKConfig+0x128>
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80093fe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009402:	d009      	beq.n	8009418 <HAL_RCCEx_PeriphCLKConfig+0x128>
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009408:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800940c:	d004      	beq.n	8009418 <HAL_RCCEx_PeriphCLKConfig+0x128>
 800940e:	f240 110f 	movw	r1, #271	@ 0x10f
 8009412:	484b      	ldr	r0, [pc, #300]	@ (8009540 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8009414:	f7fc fc82 	bl	8005d1c <assert_failed>

    switch(PeriphClkInit->Sai2ClockSelection)
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800941c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009420:	d02a      	beq.n	8009478 <HAL_RCCEx_PeriphCLKConfig+0x188>
 8009422:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009426:	d824      	bhi.n	8009472 <HAL_RCCEx_PeriphCLKConfig+0x182>
 8009428:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800942c:	d008      	beq.n	8009440 <HAL_RCCEx_PeriphCLKConfig+0x150>
 800942e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009432:	d81e      	bhi.n	8009472 <HAL_RCCEx_PeriphCLKConfig+0x182>
 8009434:	2b00      	cmp	r3, #0
 8009436:	d00a      	beq.n	800944e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8009438:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800943c:	d010      	beq.n	8009460 <HAL_RCCEx_PeriphCLKConfig+0x170>
 800943e:	e018      	b.n	8009472 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8009440:	4b40      	ldr	r3, [pc, #256]	@ (8009544 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8009442:	68db      	ldr	r3, [r3, #12]
 8009444:	4a3f      	ldr	r2, [pc, #252]	@ (8009544 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8009446:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800944a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800944c:	e015      	b.n	800947a <HAL_RCCEx_PeriphCLKConfig+0x18a>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	3304      	adds	r3, #4
 8009452:	2100      	movs	r1, #0
 8009454:	4618      	mov	r0, r3
 8009456:	f000 fc09 	bl	8009c6c <RCCEx_PLLSAI1_Config>
 800945a:	4603      	mov	r3, r0
 800945c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800945e:	e00c      	b.n	800947a <HAL_RCCEx_PeriphCLKConfig+0x18a>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	3320      	adds	r3, #32
 8009464:	2100      	movs	r1, #0
 8009466:	4618      	mov	r0, r3
 8009468:	f000 fd80 	bl	8009f6c <RCCEx_PLLSAI2_Config>
 800946c:	4603      	mov	r3, r0
 800946e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8009470:	e003      	b.n	800947a <HAL_RCCEx_PeriphCLKConfig+0x18a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009472:	2301      	movs	r3, #1
 8009474:	74fb      	strb	r3, [r7, #19]
      break;
 8009476:	e000      	b.n	800947a <HAL_RCCEx_PeriphCLKConfig+0x18a>
      break;
 8009478:	bf00      	nop
    }

    if(ret == HAL_OK)
 800947a:	7cfb      	ldrb	r3, [r7, #19]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d10b      	bne.n	8009498 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8009480:	4b30      	ldr	r3, [pc, #192]	@ (8009544 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8009482:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009486:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800948e:	492d      	ldr	r1, [pc, #180]	@ (8009544 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8009490:	4313      	orrs	r3, r2
 8009492:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8009496:	e001      	b.n	800949c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009498:	7cfb      	ldrb	r3, [r7, #19]
 800949a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	f000 80c2 	beq.w	800962e <HAL_RCCEx_PeriphCLKConfig+0x33e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80094aa:	2300      	movs	r3, #0
 80094ac:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d016      	beq.n	80094e6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80094be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80094c2:	d010      	beq.n	80094e6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80094ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80094ce:	d00a      	beq.n	80094e6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80094d6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80094da:	d004      	beq.n	80094e6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 80094dc:	f44f 71a2 	mov.w	r1, #324	@ 0x144
 80094e0:	4817      	ldr	r0, [pc, #92]	@ (8009540 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80094e2:	f7fc fc1b 	bl	8005d1c <assert_failed>

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80094e6:	4b17      	ldr	r3, [pc, #92]	@ (8009544 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80094e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80094ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d101      	bne.n	80094f6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80094f2:	2301      	movs	r3, #1
 80094f4:	e000      	b.n	80094f8 <HAL_RCCEx_PeriphCLKConfig+0x208>
 80094f6:	2300      	movs	r3, #0
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d00d      	beq.n	8009518 <HAL_RCCEx_PeriphCLKConfig+0x228>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80094fc:	4b11      	ldr	r3, [pc, #68]	@ (8009544 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80094fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009500:	4a10      	ldr	r2, [pc, #64]	@ (8009544 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8009502:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009506:	6593      	str	r3, [r2, #88]	@ 0x58
 8009508:	4b0e      	ldr	r3, [pc, #56]	@ (8009544 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800950a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800950c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009510:	60bb      	str	r3, [r7, #8]
 8009512:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009514:	2301      	movs	r3, #1
 8009516:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009518:	4b0b      	ldr	r3, [pc, #44]	@ (8009548 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	4a0a      	ldr	r2, [pc, #40]	@ (8009548 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800951e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009522:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009524:	f7fd fa24 	bl	8006970 <HAL_GetTick>
 8009528:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800952a:	e00f      	b.n	800954c <HAL_RCCEx_PeriphCLKConfig+0x25c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800952c:	f7fd fa20 	bl	8006970 <HAL_GetTick>
 8009530:	4602      	mov	r2, r0
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	1ad3      	subs	r3, r2, r3
 8009536:	2b02      	cmp	r3, #2
 8009538:	d908      	bls.n	800954c <HAL_RCCEx_PeriphCLKConfig+0x25c>
      {
        ret = HAL_TIMEOUT;
 800953a:	2303      	movs	r3, #3
 800953c:	74fb      	strb	r3, [r7, #19]
        break;
 800953e:	e00b      	b.n	8009558 <HAL_RCCEx_PeriphCLKConfig+0x268>
 8009540:	08010b44 	.word	0x08010b44
 8009544:	40021000 	.word	0x40021000
 8009548:	40007000 	.word	0x40007000
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800954c:	4b30      	ldr	r3, [pc, #192]	@ (8009610 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009554:	2b00      	cmp	r3, #0
 8009556:	d0e9      	beq.n	800952c <HAL_RCCEx_PeriphCLKConfig+0x23c>
      }
    }

    if(ret == HAL_OK)
 8009558:	7cfb      	ldrb	r3, [r7, #19]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d15c      	bne.n	8009618 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800955e:	4b2d      	ldr	r3, [pc, #180]	@ (8009614 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8009560:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009564:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009568:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800956a:	697b      	ldr	r3, [r7, #20]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d01f      	beq.n	80095b0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009576:	697a      	ldr	r2, [r7, #20]
 8009578:	429a      	cmp	r2, r3
 800957a:	d019      	beq.n	80095b0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800957c:	4b25      	ldr	r3, [pc, #148]	@ (8009614 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 800957e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009582:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009586:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009588:	4b22      	ldr	r3, [pc, #136]	@ (8009614 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 800958a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800958e:	4a21      	ldr	r2, [pc, #132]	@ (8009614 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8009590:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009594:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009598:	4b1e      	ldr	r3, [pc, #120]	@ (8009614 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 800959a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800959e:	4a1d      	ldr	r2, [pc, #116]	@ (8009614 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 80095a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80095a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80095a8:	4a1a      	ldr	r2, [pc, #104]	@ (8009614 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 80095aa:	697b      	ldr	r3, [r7, #20]
 80095ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80095b0:	697b      	ldr	r3, [r7, #20]
 80095b2:	f003 0301 	and.w	r3, r3, #1
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d016      	beq.n	80095e8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80095ba:	f7fd f9d9 	bl	8006970 <HAL_GetTick>
 80095be:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80095c0:	e00b      	b.n	80095da <HAL_RCCEx_PeriphCLKConfig+0x2ea>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80095c2:	f7fd f9d5 	bl	8006970 <HAL_GetTick>
 80095c6:	4602      	mov	r2, r0
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	1ad3      	subs	r3, r2, r3
 80095cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80095d0:	4293      	cmp	r3, r2
 80095d2:	d902      	bls.n	80095da <HAL_RCCEx_PeriphCLKConfig+0x2ea>
          {
            ret = HAL_TIMEOUT;
 80095d4:	2303      	movs	r3, #3
 80095d6:	74fb      	strb	r3, [r7, #19]
            break;
 80095d8:	e006      	b.n	80095e8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80095da:	4b0e      	ldr	r3, [pc, #56]	@ (8009614 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 80095dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80095e0:	f003 0302 	and.w	r3, r3, #2
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d0ec      	beq.n	80095c2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
          }
        }
      }

      if(ret == HAL_OK)
 80095e8:	7cfb      	ldrb	r3, [r7, #19]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d10c      	bne.n	8009608 <HAL_RCCEx_PeriphCLKConfig+0x318>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80095ee:	4b09      	ldr	r3, [pc, #36]	@ (8009614 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 80095f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80095f4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80095fe:	4905      	ldr	r1, [pc, #20]	@ (8009614 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8009600:	4313      	orrs	r3, r2
 8009602:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8009606:	e009      	b.n	800961c <HAL_RCCEx_PeriphCLKConfig+0x32c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009608:	7cfb      	ldrb	r3, [r7, #19]
 800960a:	74bb      	strb	r3, [r7, #18]
 800960c:	e006      	b.n	800961c <HAL_RCCEx_PeriphCLKConfig+0x32c>
 800960e:	bf00      	nop
 8009610:	40007000 	.word	0x40007000
 8009614:	40021000 	.word	0x40021000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009618:	7cfb      	ldrb	r3, [r7, #19]
 800961a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800961c:	7c7b      	ldrb	r3, [r7, #17]
 800961e:	2b01      	cmp	r3, #1
 8009620:	d105      	bne.n	800962e <HAL_RCCEx_PeriphCLKConfig+0x33e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009622:	4b8d      	ldr	r3, [pc, #564]	@ (8009858 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8009624:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009626:	4a8c      	ldr	r2, [pc, #560]	@ (8009858 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8009628:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800962c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	f003 0301 	and.w	r3, r3, #1
 8009636:	2b00      	cmp	r3, #0
 8009638:	d01f      	beq.n	800967a <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800963e:	2b00      	cmp	r3, #0
 8009640:	d010      	beq.n	8009664 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009646:	2b01      	cmp	r3, #1
 8009648:	d00c      	beq.n	8009664 <HAL_RCCEx_PeriphCLKConfig+0x374>
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800964e:	2b03      	cmp	r3, #3
 8009650:	d008      	beq.n	8009664 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009656:	2b02      	cmp	r3, #2
 8009658:	d004      	beq.n	8009664 <HAL_RCCEx_PeriphCLKConfig+0x374>
 800965a:	f240 1199 	movw	r1, #409	@ 0x199
 800965e:	487f      	ldr	r0, [pc, #508]	@ (800985c <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 8009660:	f7fc fb5c 	bl	8005d1c <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009664:	4b7c      	ldr	r3, [pc, #496]	@ (8009858 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8009666:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800966a:	f023 0203 	bic.w	r2, r3, #3
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009672:	4979      	ldr	r1, [pc, #484]	@ (8009858 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8009674:	4313      	orrs	r3, r2
 8009676:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	f003 0302 	and.w	r3, r3, #2
 8009682:	2b00      	cmp	r3, #0
 8009684:	d01f      	beq.n	80096c6 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800968a:	2b00      	cmp	r3, #0
 800968c:	d010      	beq.n	80096b0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009692:	2b04      	cmp	r3, #4
 8009694:	d00c      	beq.n	80096b0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800969a:	2b0c      	cmp	r3, #12
 800969c:	d008      	beq.n	80096b0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80096a2:	2b08      	cmp	r3, #8
 80096a4:	d004      	beq.n	80096b0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 80096a6:	f240 11a3 	movw	r1, #419	@ 0x1a3
 80096aa:	486c      	ldr	r0, [pc, #432]	@ (800985c <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 80096ac:	f7fc fb36 	bl	8005d1c <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80096b0:	4b69      	ldr	r3, [pc, #420]	@ (8009858 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 80096b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80096b6:	f023 020c 	bic.w	r2, r3, #12
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80096be:	4966      	ldr	r1, [pc, #408]	@ (8009858 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 80096c0:	4313      	orrs	r3, r2
 80096c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	f003 0304 	and.w	r3, r3, #4
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d01f      	beq.n	8009712 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d010      	beq.n	80096fc <HAL_RCCEx_PeriphCLKConfig+0x40c>
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096de:	2b10      	cmp	r3, #16
 80096e0:	d00c      	beq.n	80096fc <HAL_RCCEx_PeriphCLKConfig+0x40c>
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096e6:	2b30      	cmp	r3, #48	@ 0x30
 80096e8:	d008      	beq.n	80096fc <HAL_RCCEx_PeriphCLKConfig+0x40c>
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096ee:	2b20      	cmp	r3, #32
 80096f0:	d004      	beq.n	80096fc <HAL_RCCEx_PeriphCLKConfig+0x40c>
 80096f2:	f240 11af 	movw	r1, #431	@ 0x1af
 80096f6:	4859      	ldr	r0, [pc, #356]	@ (800985c <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 80096f8:	f7fc fb10 	bl	8005d1c <assert_failed>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80096fc:	4b56      	ldr	r3, [pc, #344]	@ (8009858 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 80096fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009702:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800970a:	4953      	ldr	r1, [pc, #332]	@ (8009858 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 800970c:	4313      	orrs	r3, r2
 800970e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	f003 0308 	and.w	r3, r3, #8
 800971a:	2b00      	cmp	r3, #0
 800971c:	d01f      	beq.n	800975e <HAL_RCCEx_PeriphCLKConfig+0x46e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009722:	2b00      	cmp	r3, #0
 8009724:	d010      	beq.n	8009748 <HAL_RCCEx_PeriphCLKConfig+0x458>
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800972a:	2b40      	cmp	r3, #64	@ 0x40
 800972c:	d00c      	beq.n	8009748 <HAL_RCCEx_PeriphCLKConfig+0x458>
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009732:	2bc0      	cmp	r3, #192	@ 0xc0
 8009734:	d008      	beq.n	8009748 <HAL_RCCEx_PeriphCLKConfig+0x458>
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800973a:	2b80      	cmp	r3, #128	@ 0x80
 800973c:	d004      	beq.n	8009748 <HAL_RCCEx_PeriphCLKConfig+0x458>
 800973e:	f240 11bd 	movw	r1, #445	@ 0x1bd
 8009742:	4846      	ldr	r0, [pc, #280]	@ (800985c <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 8009744:	f7fc faea 	bl	8005d1c <assert_failed>

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009748:	4b43      	ldr	r3, [pc, #268]	@ (8009858 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 800974a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800974e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009756:	4940      	ldr	r1, [pc, #256]	@ (8009858 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8009758:	4313      	orrs	r3, r2
 800975a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	f003 0310 	and.w	r3, r3, #16
 8009766:	2b00      	cmp	r3, #0
 8009768:	d022      	beq.n	80097b0 <HAL_RCCEx_PeriphCLKConfig+0x4c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800976e:	2b00      	cmp	r3, #0
 8009770:	d013      	beq.n	800979a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009776:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800977a:	d00e      	beq.n	800979a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009780:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009784:	d009      	beq.n	800979a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800978a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800978e:	d004      	beq.n	800979a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8009790:	f240 11cb 	movw	r1, #459	@ 0x1cb
 8009794:	4831      	ldr	r0, [pc, #196]	@ (800985c <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 8009796:	f7fc fac1 	bl	8005d1c <assert_failed>

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800979a:	4b2f      	ldr	r3, [pc, #188]	@ (8009858 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 800979c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80097a0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80097a8:	492b      	ldr	r1, [pc, #172]	@ (8009858 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 80097aa:	4313      	orrs	r3, r2
 80097ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	f003 0320 	and.w	r3, r3, #32
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d022      	beq.n	8009802 <HAL_RCCEx_PeriphCLKConfig+0x512>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d013      	beq.n	80097ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80097c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80097cc:	d00e      	beq.n	80097ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80097d2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80097d6:	d009      	beq.n	80097ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80097dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80097e0:	d004      	beq.n	80097ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>
 80097e2:	f240 11d7 	movw	r1, #471	@ 0x1d7
 80097e6:	481d      	ldr	r0, [pc, #116]	@ (800985c <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 80097e8:	f7fc fa98 	bl	8005d1c <assert_failed>

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80097ec:	4b1a      	ldr	r3, [pc, #104]	@ (8009858 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 80097ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80097f2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80097fa:	4917      	ldr	r1, [pc, #92]	@ (8009858 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 80097fc:	4313      	orrs	r3, r2
 80097fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800980a:	2b00      	cmp	r3, #0
 800980c:	d028      	beq.n	8009860 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009812:	2b00      	cmp	r3, #0
 8009814:	d013      	beq.n	800983e <HAL_RCCEx_PeriphCLKConfig+0x54e>
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800981a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800981e:	d00e      	beq.n	800983e <HAL_RCCEx_PeriphCLKConfig+0x54e>
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009824:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8009828:	d009      	beq.n	800983e <HAL_RCCEx_PeriphCLKConfig+0x54e>
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800982e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8009832:	d004      	beq.n	800983e <HAL_RCCEx_PeriphCLKConfig+0x54e>
 8009834:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8009838:	4808      	ldr	r0, [pc, #32]	@ (800985c <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 800983a:	f7fc fa6f 	bl	8005d1c <assert_failed>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800983e:	4b06      	ldr	r3, [pc, #24]	@ (8009858 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8009840:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009844:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800984c:	4902      	ldr	r1, [pc, #8]	@ (8009858 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 800984e:	4313      	orrs	r3, r2
 8009850:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8009854:	e004      	b.n	8009860 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8009856:	bf00      	nop
 8009858:	40021000 	.word	0x40021000
 800985c:	08010b44 	.word	0x08010b44
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009868:	2b00      	cmp	r3, #0
 800986a:	d022      	beq.n	80098b2 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009870:	2b00      	cmp	r3, #0
 8009872:	d013      	beq.n	800989c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009878:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800987c:	d00e      	beq.n	800989c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009882:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009886:	d009      	beq.n	800989c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800988c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009890:	d004      	beq.n	800989c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8009892:	f240 11e7 	movw	r1, #487	@ 0x1e7
 8009896:	489e      	ldr	r0, [pc, #632]	@ (8009b10 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 8009898:	f7fc fa40 	bl	8005d1c <assert_failed>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800989c:	4b9d      	ldr	r3, [pc, #628]	@ (8009b14 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 800989e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80098a2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80098aa:	499a      	ldr	r1, [pc, #616]	@ (8009b14 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80098ac:	4313      	orrs	r3, r2
 80098ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d01d      	beq.n	80098fa <HAL_RCCEx_PeriphCLKConfig+0x60a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d00e      	beq.n	80098e4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80098ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80098ce:	d009      	beq.n	80098e4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80098d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80098d8:	d004      	beq.n	80098e4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 80098da:	f240 11ef 	movw	r1, #495	@ 0x1ef
 80098de:	488c      	ldr	r0, [pc, #560]	@ (8009b10 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 80098e0:	f7fc fa1c 	bl	8005d1c <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80098e4:	4b8b      	ldr	r3, [pc, #556]	@ (8009b14 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80098e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80098ea:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80098f2:	4988      	ldr	r1, [pc, #544]	@ (8009b14 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80098f4:	4313      	orrs	r3, r2
 80098f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009902:	2b00      	cmp	r3, #0
 8009904:	d01d      	beq.n	8009942 <HAL_RCCEx_PeriphCLKConfig+0x652>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800990a:	2b00      	cmp	r3, #0
 800990c:	d00e      	beq.n	800992c <HAL_RCCEx_PeriphCLKConfig+0x63c>
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009912:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009916:	d009      	beq.n	800992c <HAL_RCCEx_PeriphCLKConfig+0x63c>
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800991c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009920:	d004      	beq.n	800992c <HAL_RCCEx_PeriphCLKConfig+0x63c>
 8009922:	f240 11fb 	movw	r1, #507	@ 0x1fb
 8009926:	487a      	ldr	r0, [pc, #488]	@ (8009b10 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 8009928:	f7fc f9f8 	bl	8005d1c <assert_failed>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800992c:	4b79      	ldr	r3, [pc, #484]	@ (8009b14 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 800992e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009932:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800993a:	4976      	ldr	r1, [pc, #472]	@ (8009b14 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 800993c:	4313      	orrs	r3, r2
 800993e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800994a:	2b00      	cmp	r3, #0
 800994c:	d01d      	beq.n	800998a <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009952:	2b00      	cmp	r3, #0
 8009954:	d00e      	beq.n	8009974 <HAL_RCCEx_PeriphCLKConfig+0x684>
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800995a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800995e:	d009      	beq.n	8009974 <HAL_RCCEx_PeriphCLKConfig+0x684>
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009964:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009968:	d004      	beq.n	8009974 <HAL_RCCEx_PeriphCLKConfig+0x684>
 800996a:	f240 2107 	movw	r1, #519	@ 0x207
 800996e:	4868      	ldr	r0, [pc, #416]	@ (8009b10 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 8009970:	f7fc f9d4 	bl	8005d1c <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009974:	4b67      	ldr	r3, [pc, #412]	@ (8009b14 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8009976:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800997a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009982:	4964      	ldr	r1, [pc, #400]	@ (8009b14 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8009984:	4313      	orrs	r3, r2
 8009986:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009992:	2b00      	cmp	r3, #0
 8009994:	d040      	beq.n	8009a18 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800999a:	2b00      	cmp	r3, #0
 800999c:	d013      	beq.n	80099c6 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80099a2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80099a6:	d00e      	beq.n	80099c6 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80099ac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80099b0:	d009      	beq.n	80099c6 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80099b6:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80099ba:	d004      	beq.n	80099c6 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 80099bc:	f44f 7108 	mov.w	r1, #544	@ 0x220
 80099c0:	4853      	ldr	r0, [pc, #332]	@ (8009b10 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 80099c2:	f7fc f9ab 	bl	8005d1c <assert_failed>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80099c6:	4b53      	ldr	r3, [pc, #332]	@ (8009b14 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80099c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80099cc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80099d4:	494f      	ldr	r1, [pc, #316]	@ (8009b14 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80099d6:	4313      	orrs	r3, r2
 80099d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80099e0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80099e4:	d106      	bne.n	80099f4 <HAL_RCCEx_PeriphCLKConfig+0x704>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80099e6:	4b4b      	ldr	r3, [pc, #300]	@ (8009b14 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80099e8:	68db      	ldr	r3, [r3, #12]
 80099ea:	4a4a      	ldr	r2, [pc, #296]	@ (8009b14 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80099ec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80099f0:	60d3      	str	r3, [r2, #12]
 80099f2:	e011      	b.n	8009a18 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80099f8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80099fc:	d10c      	bne.n	8009a18 <HAL_RCCEx_PeriphCLKConfig+0x728>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	3304      	adds	r3, #4
 8009a02:	2101      	movs	r1, #1
 8009a04:	4618      	mov	r0, r3
 8009a06:	f000 f931 	bl	8009c6c <RCCEx_PLLSAI1_Config>
 8009a0a:	4603      	mov	r3, r0
 8009a0c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8009a0e:	7cfb      	ldrb	r3, [r7, #19]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d001      	beq.n	8009a18 <HAL_RCCEx_PeriphCLKConfig+0x728>
        {
          /* set overall return value */
          status = ret;
 8009a14:	7cfb      	ldrb	r3, [r7, #19]
 8009a16:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d040      	beq.n	8009aa6 <HAL_RCCEx_PeriphCLKConfig+0x7b6>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d013      	beq.n	8009a54 <HAL_RCCEx_PeriphCLKConfig+0x764>
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a30:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009a34:	d00e      	beq.n	8009a54 <HAL_RCCEx_PeriphCLKConfig+0x764>
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a3a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009a3e:	d009      	beq.n	8009a54 <HAL_RCCEx_PeriphCLKConfig+0x764>
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a44:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8009a48:	d004      	beq.n	8009a54 <HAL_RCCEx_PeriphCLKConfig+0x764>
 8009a4a:	f240 2141 	movw	r1, #577	@ 0x241
 8009a4e:	4830      	ldr	r0, [pc, #192]	@ (8009b10 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 8009a50:	f7fc f964 	bl	8005d1c <assert_failed>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8009a54:	4b2f      	ldr	r3, [pc, #188]	@ (8009b14 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8009a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009a5a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a62:	492c      	ldr	r1, [pc, #176]	@ (8009b14 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8009a64:	4313      	orrs	r3, r2
 8009a66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a6e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009a72:	d106      	bne.n	8009a82 <HAL_RCCEx_PeriphCLKConfig+0x792>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009a74:	4b27      	ldr	r3, [pc, #156]	@ (8009b14 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8009a76:	68db      	ldr	r3, [r3, #12]
 8009a78:	4a26      	ldr	r2, [pc, #152]	@ (8009b14 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8009a7a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009a7e:	60d3      	str	r3, [r2, #12]
 8009a80:	e011      	b.n	8009aa6 <HAL_RCCEx_PeriphCLKConfig+0x7b6>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a86:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009a8a:	d10c      	bne.n	8009aa6 <HAL_RCCEx_PeriphCLKConfig+0x7b6>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	3304      	adds	r3, #4
 8009a90:	2101      	movs	r1, #1
 8009a92:	4618      	mov	r0, r3
 8009a94:	f000 f8ea 	bl	8009c6c <RCCEx_PLLSAI1_Config>
 8009a98:	4603      	mov	r3, r0
 8009a9a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009a9c:	7cfb      	ldrb	r3, [r7, #19]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d001      	beq.n	8009aa6 <HAL_RCCEx_PeriphCLKConfig+0x7b6>
      {
        /* set overall return value */
        status = ret;
 8009aa2:	7cfb      	ldrb	r3, [r7, #19]
 8009aa4:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d044      	beq.n	8009b3c <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d013      	beq.n	8009ae2 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009abe:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009ac2:	d00e      	beq.n	8009ae2 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009ac8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009acc:	d009      	beq.n	8009ae2 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009ad2:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8009ad6:	d004      	beq.n	8009ae2 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
 8009ad8:	f240 2166 	movw	r1, #614	@ 0x266
 8009adc:	480c      	ldr	r0, [pc, #48]	@ (8009b10 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 8009ade:	f7fc f91d 	bl	8005d1c <assert_failed>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009ae2:	4b0c      	ldr	r3, [pc, #48]	@ (8009b14 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8009ae4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009ae8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009af0:	4908      	ldr	r1, [pc, #32]	@ (8009b14 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8009af2:	4313      	orrs	r3, r2
 8009af4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009afc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009b00:	d10a      	bne.n	8009b18 <HAL_RCCEx_PeriphCLKConfig+0x828>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009b02:	4b04      	ldr	r3, [pc, #16]	@ (8009b14 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8009b04:	68db      	ldr	r3, [r3, #12]
 8009b06:	4a03      	ldr	r2, [pc, #12]	@ (8009b14 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8009b08:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009b0c:	60d3      	str	r3, [r2, #12]
 8009b0e:	e015      	b.n	8009b3c <HAL_RCCEx_PeriphCLKConfig+0x84c>
 8009b10:	08010b44 	.word	0x08010b44
 8009b14:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009b1c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009b20:	d10c      	bne.n	8009b3c <HAL_RCCEx_PeriphCLKConfig+0x84c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	3304      	adds	r3, #4
 8009b26:	2101      	movs	r1, #1
 8009b28:	4618      	mov	r0, r3
 8009b2a:	f000 f89f 	bl	8009c6c <RCCEx_PLLSAI1_Config>
 8009b2e:	4603      	mov	r3, r0
 8009b30:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009b32:	7cfb      	ldrb	r3, [r7, #19]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d001      	beq.n	8009b3c <HAL_RCCEx_PeriphCLKConfig+0x84c>
      {
        /* set overall return value */
        status = ret;
 8009b38:	7cfb      	ldrb	r3, [r7, #19]
 8009b3a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d047      	beq.n	8009bd8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d013      	beq.n	8009b78 <HAL_RCCEx_PeriphCLKConfig+0x888>
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009b54:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009b58:	d00e      	beq.n	8009b78 <HAL_RCCEx_PeriphCLKConfig+0x888>
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009b5e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009b62:	d009      	beq.n	8009b78 <HAL_RCCEx_PeriphCLKConfig+0x888>
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009b68:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009b6c:	d004      	beq.n	8009b78 <HAL_RCCEx_PeriphCLKConfig+0x888>
 8009b6e:	f240 2186 	movw	r1, #646	@ 0x286
 8009b72:	483c      	ldr	r0, [pc, #240]	@ (8009c64 <HAL_RCCEx_PeriphCLKConfig+0x974>)
 8009b74:	f7fc f8d2 	bl	8005d1c <assert_failed>

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009b78:	4b3b      	ldr	r3, [pc, #236]	@ (8009c68 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 8009b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b7e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009b86:	4938      	ldr	r1, [pc, #224]	@ (8009c68 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 8009b88:	4313      	orrs	r3, r2
 8009b8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009b92:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009b96:	d10d      	bne.n	8009bb4 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	3304      	adds	r3, #4
 8009b9c:	2102      	movs	r1, #2
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	f000 f864 	bl	8009c6c <RCCEx_PLLSAI1_Config>
 8009ba4:	4603      	mov	r3, r0
 8009ba6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009ba8:	7cfb      	ldrb	r3, [r7, #19]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d014      	beq.n	8009bd8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
      {
        /* set overall return value */
        status = ret;
 8009bae:	7cfb      	ldrb	r3, [r7, #19]
 8009bb0:	74bb      	strb	r3, [r7, #18]
 8009bb2:	e011      	b.n	8009bd8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009bb8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009bbc:	d10c      	bne.n	8009bd8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	3320      	adds	r3, #32
 8009bc2:	2102      	movs	r1, #2
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	f000 f9d1 	bl	8009f6c <RCCEx_PLLSAI2_Config>
 8009bca:	4603      	mov	r3, r0
 8009bcc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009bce:	7cfb      	ldrb	r3, [r7, #19]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d001      	beq.n	8009bd8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
      {
        /* set overall return value */
        status = ret;
 8009bd4:	7cfb      	ldrb	r3, [r7, #19]
 8009bd6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d018      	beq.n	8009c16 <HAL_RCCEx_PeriphCLKConfig+0x926>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d009      	beq.n	8009c00 <HAL_RCCEx_PeriphCLKConfig+0x910>
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009bf0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009bf4:	d004      	beq.n	8009c00 <HAL_RCCEx_PeriphCLKConfig+0x910>
 8009bf6:	f240 21b6 	movw	r1, #694	@ 0x2b6
 8009bfa:	481a      	ldr	r0, [pc, #104]	@ (8009c64 <HAL_RCCEx_PeriphCLKConfig+0x974>)
 8009bfc:	f7fc f88e 	bl	8005d1c <assert_failed>

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009c00:	4b19      	ldr	r3, [pc, #100]	@ (8009c68 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 8009c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c06:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009c0e:	4916      	ldr	r1, [pc, #88]	@ (8009c68 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 8009c10:	4313      	orrs	r3, r2
 8009c12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d01b      	beq.n	8009c5a <HAL_RCCEx_PeriphCLKConfig+0x96a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d00a      	beq.n	8009c42 <HAL_RCCEx_PeriphCLKConfig+0x952>
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c32:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009c36:	d004      	beq.n	8009c42 <HAL_RCCEx_PeriphCLKConfig+0x952>
 8009c38:	f44f 7131 	mov.w	r1, #708	@ 0x2c4
 8009c3c:	4809      	ldr	r0, [pc, #36]	@ (8009c64 <HAL_RCCEx_PeriphCLKConfig+0x974>)
 8009c3e:	f7fc f86d 	bl	8005d1c <assert_failed>

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009c42:	4b09      	ldr	r3, [pc, #36]	@ (8009c68 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 8009c44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c48:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c52:	4905      	ldr	r1, [pc, #20]	@ (8009c68 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 8009c54:	4313      	orrs	r3, r2
 8009c56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8009c5a:	7cbb      	ldrb	r3, [r7, #18]
}
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	3718      	adds	r7, #24
 8009c60:	46bd      	mov	sp, r7
 8009c62:	bd80      	pop	{r7, pc}
 8009c64:	08010b44 	.word	0x08010b44
 8009c68:	40021000 	.word	0x40021000

08009c6c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b084      	sub	sp, #16
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
 8009c74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009c76:	2300      	movs	r3, #0
 8009c78:	73fb      	strb	r3, [r7, #15]

  /* check for PLLSAI1 Parameters used to output PLLSAI1CLK */
  /* P, Q and R dividers are verified in each specific divider case below */
  assert_param(IS_RCC_PLLSAI1SOURCE(PllSai1->PLLSAI1Source));
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d010      	beq.n	8009ca4 <RCCEx_PLLSAI1_Config+0x38>
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	2b01      	cmp	r3, #1
 8009c88:	d00c      	beq.n	8009ca4 <RCCEx_PLLSAI1_Config+0x38>
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	2b02      	cmp	r3, #2
 8009c90:	d008      	beq.n	8009ca4 <RCCEx_PLLSAI1_Config+0x38>
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	2b03      	cmp	r3, #3
 8009c98:	d004      	beq.n	8009ca4 <RCCEx_PLLSAI1_Config+0x38>
 8009c9a:	f640 3162 	movw	r1, #2914	@ 0xb62
 8009c9e:	4887      	ldr	r0, [pc, #540]	@ (8009ebc <RCCEx_PLLSAI1_Config+0x250>)
 8009ca0:	f7fc f83c 	bl	8005d1c <assert_failed>
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	685b      	ldr	r3, [r3, #4]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d003      	beq.n	8009cb4 <RCCEx_PLLSAI1_Config+0x48>
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	685b      	ldr	r3, [r3, #4]
 8009cb0:	2b08      	cmp	r3, #8
 8009cb2:	d904      	bls.n	8009cbe <RCCEx_PLLSAI1_Config+0x52>
 8009cb4:	f640 3163 	movw	r1, #2915	@ 0xb63
 8009cb8:	4880      	ldr	r0, [pc, #512]	@ (8009ebc <RCCEx_PLLSAI1_Config+0x250>)
 8009cba:	f7fc f82f 	bl	8005d1c <assert_failed>
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	689b      	ldr	r3, [r3, #8]
 8009cc2:	2b07      	cmp	r3, #7
 8009cc4:	d903      	bls.n	8009cce <RCCEx_PLLSAI1_Config+0x62>
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	689b      	ldr	r3, [r3, #8]
 8009cca:	2b56      	cmp	r3, #86	@ 0x56
 8009ccc:	d904      	bls.n	8009cd8 <RCCEx_PLLSAI1_Config+0x6c>
 8009cce:	f640 3164 	movw	r1, #2916	@ 0xb64
 8009cd2:	487a      	ldr	r0, [pc, #488]	@ (8009ebc <RCCEx_PLLSAI1_Config+0x250>)
 8009cd4:	f7fc f822 	bl	8005d1c <assert_failed>
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	699b      	ldr	r3, [r3, #24]
 8009cdc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d10b      	bne.n	8009cfc <RCCEx_PLLSAI1_Config+0x90>
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	699b      	ldr	r3, [r3, #24]
 8009ce8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d105      	bne.n	8009cfc <RCCEx_PLLSAI1_Config+0x90>
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	699b      	ldr	r3, [r3, #24]
 8009cf4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d007      	beq.n	8009d0c <RCCEx_PLLSAI1_Config+0xa0>
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	699b      	ldr	r3, [r3, #24]
 8009d00:	f023 7388 	bic.w	r3, r3, #17825792	@ 0x1100000
 8009d04:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d004      	beq.n	8009d16 <RCCEx_PLLSAI1_Config+0xaa>
 8009d0c:	f640 3165 	movw	r1, #2917	@ 0xb65
 8009d10:	486a      	ldr	r0, [pc, #424]	@ (8009ebc <RCCEx_PLLSAI1_Config+0x250>)
 8009d12:	f7fc f803 	bl	8005d1c <assert_failed>

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8009d16:	4b6a      	ldr	r3, [pc, #424]	@ (8009ec0 <RCCEx_PLLSAI1_Config+0x254>)
 8009d18:	68db      	ldr	r3, [r3, #12]
 8009d1a:	f003 0303 	and.w	r3, r3, #3
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d018      	beq.n	8009d54 <RCCEx_PLLSAI1_Config+0xe8>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8009d22:	4b67      	ldr	r3, [pc, #412]	@ (8009ec0 <RCCEx_PLLSAI1_Config+0x254>)
 8009d24:	68db      	ldr	r3, [r3, #12]
 8009d26:	f003 0203 	and.w	r2, r3, #3
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	429a      	cmp	r2, r3
 8009d30:	d10d      	bne.n	8009d4e <RCCEx_PLLSAI1_Config+0xe2>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
       ||
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d009      	beq.n	8009d4e <RCCEx_PLLSAI1_Config+0xe2>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8009d3a:	4b61      	ldr	r3, [pc, #388]	@ (8009ec0 <RCCEx_PLLSAI1_Config+0x254>)
 8009d3c:	68db      	ldr	r3, [r3, #12]
 8009d3e:	091b      	lsrs	r3, r3, #4
 8009d40:	f003 0307 	and.w	r3, r3, #7
 8009d44:	1c5a      	adds	r2, r3, #1
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	685b      	ldr	r3, [r3, #4]
       ||
 8009d4a:	429a      	cmp	r2, r3
 8009d4c:	d047      	beq.n	8009dde <RCCEx_PLLSAI1_Config+0x172>
#endif
      )
    {
      status = HAL_ERROR;
 8009d4e:	2301      	movs	r3, #1
 8009d50:	73fb      	strb	r3, [r7, #15]
 8009d52:	e044      	b.n	8009dde <RCCEx_PLLSAI1_Config+0x172>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	2b03      	cmp	r3, #3
 8009d5a:	d018      	beq.n	8009d8e <RCCEx_PLLSAI1_Config+0x122>
 8009d5c:	2b03      	cmp	r3, #3
 8009d5e:	d825      	bhi.n	8009dac <RCCEx_PLLSAI1_Config+0x140>
 8009d60:	2b01      	cmp	r3, #1
 8009d62:	d002      	beq.n	8009d6a <RCCEx_PLLSAI1_Config+0xfe>
 8009d64:	2b02      	cmp	r3, #2
 8009d66:	d009      	beq.n	8009d7c <RCCEx_PLLSAI1_Config+0x110>
 8009d68:	e020      	b.n	8009dac <RCCEx_PLLSAI1_Config+0x140>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8009d6a:	4b55      	ldr	r3, [pc, #340]	@ (8009ec0 <RCCEx_PLLSAI1_Config+0x254>)
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	f003 0302 	and.w	r3, r3, #2
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d11d      	bne.n	8009db2 <RCCEx_PLLSAI1_Config+0x146>
      {
        status = HAL_ERROR;
 8009d76:	2301      	movs	r3, #1
 8009d78:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009d7a:	e01a      	b.n	8009db2 <RCCEx_PLLSAI1_Config+0x146>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8009d7c:	4b50      	ldr	r3, [pc, #320]	@ (8009ec0 <RCCEx_PLLSAI1_Config+0x254>)
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d116      	bne.n	8009db6 <RCCEx_PLLSAI1_Config+0x14a>
      {
        status = HAL_ERROR;
 8009d88:	2301      	movs	r3, #1
 8009d8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009d8c:	e013      	b.n	8009db6 <RCCEx_PLLSAI1_Config+0x14a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8009d8e:	4b4c      	ldr	r3, [pc, #304]	@ (8009ec0 <RCCEx_PLLSAI1_Config+0x254>)
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d10f      	bne.n	8009dba <RCCEx_PLLSAI1_Config+0x14e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8009d9a:	4b49      	ldr	r3, [pc, #292]	@ (8009ec0 <RCCEx_PLLSAI1_Config+0x254>)
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d109      	bne.n	8009dba <RCCEx_PLLSAI1_Config+0x14e>
        {
          status = HAL_ERROR;
 8009da6:	2301      	movs	r3, #1
 8009da8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009daa:	e006      	b.n	8009dba <RCCEx_PLLSAI1_Config+0x14e>
    default:
      status = HAL_ERROR;
 8009dac:	2301      	movs	r3, #1
 8009dae:	73fb      	strb	r3, [r7, #15]
      break;
 8009db0:	e004      	b.n	8009dbc <RCCEx_PLLSAI1_Config+0x150>
      break;
 8009db2:	bf00      	nop
 8009db4:	e002      	b.n	8009dbc <RCCEx_PLLSAI1_Config+0x150>
      break;
 8009db6:	bf00      	nop
 8009db8:	e000      	b.n	8009dbc <RCCEx_PLLSAI1_Config+0x150>
      break;
 8009dba:	bf00      	nop
    }

    if(status == HAL_OK)
 8009dbc:	7bfb      	ldrb	r3, [r7, #15]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d10d      	bne.n	8009dde <RCCEx_PLLSAI1_Config+0x172>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8009dc2:	4b3f      	ldr	r3, [pc, #252]	@ (8009ec0 <RCCEx_PLLSAI1_Config+0x254>)
 8009dc4:	68db      	ldr	r3, [r3, #12]
 8009dc6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	6819      	ldr	r1, [r3, #0]
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	685b      	ldr	r3, [r3, #4]
 8009dd2:	3b01      	subs	r3, #1
 8009dd4:	011b      	lsls	r3, r3, #4
 8009dd6:	430b      	orrs	r3, r1
 8009dd8:	4939      	ldr	r1, [pc, #228]	@ (8009ec0 <RCCEx_PLLSAI1_Config+0x254>)
 8009dda:	4313      	orrs	r3, r2
 8009ddc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8009dde:	7bfb      	ldrb	r3, [r7, #15]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	f040 80ba 	bne.w	8009f5a <RCCEx_PLLSAI1_Config+0x2ee>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8009de6:	4b36      	ldr	r3, [pc, #216]	@ (8009ec0 <RCCEx_PLLSAI1_Config+0x254>)
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	4a35      	ldr	r2, [pc, #212]	@ (8009ec0 <RCCEx_PLLSAI1_Config+0x254>)
 8009dec:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009df0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009df2:	f7fc fdbd 	bl	8006970 <HAL_GetTick>
 8009df6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8009df8:	e009      	b.n	8009e0e <RCCEx_PLLSAI1_Config+0x1a2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009dfa:	f7fc fdb9 	bl	8006970 <HAL_GetTick>
 8009dfe:	4602      	mov	r2, r0
 8009e00:	68bb      	ldr	r3, [r7, #8]
 8009e02:	1ad3      	subs	r3, r2, r3
 8009e04:	2b02      	cmp	r3, #2
 8009e06:	d902      	bls.n	8009e0e <RCCEx_PLLSAI1_Config+0x1a2>
      {
        status = HAL_TIMEOUT;
 8009e08:	2303      	movs	r3, #3
 8009e0a:	73fb      	strb	r3, [r7, #15]
        break;
 8009e0c:	e005      	b.n	8009e1a <RCCEx_PLLSAI1_Config+0x1ae>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8009e0e:	4b2c      	ldr	r3, [pc, #176]	@ (8009ec0 <RCCEx_PLLSAI1_Config+0x254>)
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d1ef      	bne.n	8009dfa <RCCEx_PLLSAI1_Config+0x18e>
      }
    }

    if(status == HAL_OK)
 8009e1a:	7bfb      	ldrb	r3, [r7, #15]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	f040 809c 	bne.w	8009f5a <RCCEx_PLLSAI1_Config+0x2ee>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8009e22:	683b      	ldr	r3, [r7, #0]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d11e      	bne.n	8009e66 <RCCEx_PLLSAI1_Config+0x1fa>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	68db      	ldr	r3, [r3, #12]
 8009e2c:	2b07      	cmp	r3, #7
 8009e2e:	d008      	beq.n	8009e42 <RCCEx_PLLSAI1_Config+0x1d6>
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	68db      	ldr	r3, [r3, #12]
 8009e34:	2b11      	cmp	r3, #17
 8009e36:	d004      	beq.n	8009e42 <RCCEx_PLLSAI1_Config+0x1d6>
 8009e38:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 8009e3c:	481f      	ldr	r0, [pc, #124]	@ (8009ebc <RCCEx_PLLSAI1_Config+0x250>)
 8009e3e:	f7fb ff6d 	bl	8005d1c <assert_failed>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009e42:	4b1f      	ldr	r3, [pc, #124]	@ (8009ec0 <RCCEx_PLLSAI1_Config+0x254>)
 8009e44:	691b      	ldr	r3, [r3, #16]
 8009e46:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8009e4a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009e4e:	687a      	ldr	r2, [r7, #4]
 8009e50:	6892      	ldr	r2, [r2, #8]
 8009e52:	0211      	lsls	r1, r2, #8
 8009e54:	687a      	ldr	r2, [r7, #4]
 8009e56:	68d2      	ldr	r2, [r2, #12]
 8009e58:	0912      	lsrs	r2, r2, #4
 8009e5a:	0452      	lsls	r2, r2, #17
 8009e5c:	430a      	orrs	r2, r1
 8009e5e:	4918      	ldr	r1, [pc, #96]	@ (8009ec0 <RCCEx_PLLSAI1_Config+0x254>)
 8009e60:	4313      	orrs	r3, r2
 8009e62:	610b      	str	r3, [r1, #16]
 8009e64:	e055      	b.n	8009f12 <RCCEx_PLLSAI1_Config+0x2a6>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8009e66:	683b      	ldr	r3, [r7, #0]
 8009e68:	2b01      	cmp	r3, #1
 8009e6a:	d12b      	bne.n	8009ec4 <RCCEx_PLLSAI1_Config+0x258>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	691b      	ldr	r3, [r3, #16]
 8009e70:	2b02      	cmp	r3, #2
 8009e72:	d010      	beq.n	8009e96 <RCCEx_PLLSAI1_Config+0x22a>
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	691b      	ldr	r3, [r3, #16]
 8009e78:	2b04      	cmp	r3, #4
 8009e7a:	d00c      	beq.n	8009e96 <RCCEx_PLLSAI1_Config+0x22a>
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	691b      	ldr	r3, [r3, #16]
 8009e80:	2b06      	cmp	r3, #6
 8009e82:	d008      	beq.n	8009e96 <RCCEx_PLLSAI1_Config+0x22a>
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	691b      	ldr	r3, [r3, #16]
 8009e88:	2b08      	cmp	r3, #8
 8009e8a:	d004      	beq.n	8009e96 <RCCEx_PLLSAI1_Config+0x22a>
 8009e8c:	f640 31dc 	movw	r1, #3036	@ 0xbdc
 8009e90:	480a      	ldr	r0, [pc, #40]	@ (8009ebc <RCCEx_PLLSAI1_Config+0x250>)
 8009e92:	f7fb ff43 	bl	8005d1c <assert_failed>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009e96:	4b0a      	ldr	r3, [pc, #40]	@ (8009ec0 <RCCEx_PLLSAI1_Config+0x254>)
 8009e98:	691b      	ldr	r3, [r3, #16]
 8009e9a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8009e9e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8009ea2:	687a      	ldr	r2, [r7, #4]
 8009ea4:	6892      	ldr	r2, [r2, #8]
 8009ea6:	0211      	lsls	r1, r2, #8
 8009ea8:	687a      	ldr	r2, [r7, #4]
 8009eaa:	6912      	ldr	r2, [r2, #16]
 8009eac:	0852      	lsrs	r2, r2, #1
 8009eae:	3a01      	subs	r2, #1
 8009eb0:	0552      	lsls	r2, r2, #21
 8009eb2:	430a      	orrs	r2, r1
 8009eb4:	4902      	ldr	r1, [pc, #8]	@ (8009ec0 <RCCEx_PLLSAI1_Config+0x254>)
 8009eb6:	4313      	orrs	r3, r2
 8009eb8:	610b      	str	r3, [r1, #16]
 8009eba:	e02a      	b.n	8009f12 <RCCEx_PLLSAI1_Config+0x2a6>
 8009ebc:	08010b44 	.word	0x08010b44
 8009ec0:	40021000 	.word	0x40021000
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	695b      	ldr	r3, [r3, #20]
 8009ec8:	2b02      	cmp	r3, #2
 8009eca:	d010      	beq.n	8009eee <RCCEx_PLLSAI1_Config+0x282>
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	695b      	ldr	r3, [r3, #20]
 8009ed0:	2b04      	cmp	r3, #4
 8009ed2:	d00c      	beq.n	8009eee <RCCEx_PLLSAI1_Config+0x282>
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	695b      	ldr	r3, [r3, #20]
 8009ed8:	2b06      	cmp	r3, #6
 8009eda:	d008      	beq.n	8009eee <RCCEx_PLLSAI1_Config+0x282>
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	695b      	ldr	r3, [r3, #20]
 8009ee0:	2b08      	cmp	r3, #8
 8009ee2:	d004      	beq.n	8009eee <RCCEx_PLLSAI1_Config+0x282>
 8009ee4:	f640 31ee 	movw	r1, #3054	@ 0xbee
 8009ee8:	481e      	ldr	r0, [pc, #120]	@ (8009f64 <RCCEx_PLLSAI1_Config+0x2f8>)
 8009eea:	f7fb ff17 	bl	8005d1c <assert_failed>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009eee:	4b1e      	ldr	r3, [pc, #120]	@ (8009f68 <RCCEx_PLLSAI1_Config+0x2fc>)
 8009ef0:	691b      	ldr	r3, [r3, #16]
 8009ef2:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8009ef6:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8009efa:	687a      	ldr	r2, [r7, #4]
 8009efc:	6892      	ldr	r2, [r2, #8]
 8009efe:	0211      	lsls	r1, r2, #8
 8009f00:	687a      	ldr	r2, [r7, #4]
 8009f02:	6952      	ldr	r2, [r2, #20]
 8009f04:	0852      	lsrs	r2, r2, #1
 8009f06:	3a01      	subs	r2, #1
 8009f08:	0652      	lsls	r2, r2, #25
 8009f0a:	430a      	orrs	r2, r1
 8009f0c:	4916      	ldr	r1, [pc, #88]	@ (8009f68 <RCCEx_PLLSAI1_Config+0x2fc>)
 8009f0e:	4313      	orrs	r3, r2
 8009f10:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8009f12:	4b15      	ldr	r3, [pc, #84]	@ (8009f68 <RCCEx_PLLSAI1_Config+0x2fc>)
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	4a14      	ldr	r2, [pc, #80]	@ (8009f68 <RCCEx_PLLSAI1_Config+0x2fc>)
 8009f18:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009f1c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009f1e:	f7fc fd27 	bl	8006970 <HAL_GetTick>
 8009f22:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8009f24:	e009      	b.n	8009f3a <RCCEx_PLLSAI1_Config+0x2ce>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009f26:	f7fc fd23 	bl	8006970 <HAL_GetTick>
 8009f2a:	4602      	mov	r2, r0
 8009f2c:	68bb      	ldr	r3, [r7, #8]
 8009f2e:	1ad3      	subs	r3, r2, r3
 8009f30:	2b02      	cmp	r3, #2
 8009f32:	d902      	bls.n	8009f3a <RCCEx_PLLSAI1_Config+0x2ce>
        {
          status = HAL_TIMEOUT;
 8009f34:	2303      	movs	r3, #3
 8009f36:	73fb      	strb	r3, [r7, #15]
          break;
 8009f38:	e005      	b.n	8009f46 <RCCEx_PLLSAI1_Config+0x2da>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8009f3a:	4b0b      	ldr	r3, [pc, #44]	@ (8009f68 <RCCEx_PLLSAI1_Config+0x2fc>)
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d0ef      	beq.n	8009f26 <RCCEx_PLLSAI1_Config+0x2ba>
        }
      }

      if(status == HAL_OK)
 8009f46:	7bfb      	ldrb	r3, [r7, #15]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d106      	bne.n	8009f5a <RCCEx_PLLSAI1_Config+0x2ee>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8009f4c:	4b06      	ldr	r3, [pc, #24]	@ (8009f68 <RCCEx_PLLSAI1_Config+0x2fc>)
 8009f4e:	691a      	ldr	r2, [r3, #16]
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	699b      	ldr	r3, [r3, #24]
 8009f54:	4904      	ldr	r1, [pc, #16]	@ (8009f68 <RCCEx_PLLSAI1_Config+0x2fc>)
 8009f56:	4313      	orrs	r3, r2
 8009f58:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8009f5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	3710      	adds	r7, #16
 8009f60:	46bd      	mov	sp, r7
 8009f62:	bd80      	pop	{r7, pc}
 8009f64:	08010b44 	.word	0x08010b44
 8009f68:	40021000 	.word	0x40021000

08009f6c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8009f6c:	b580      	push	{r7, lr}
 8009f6e:	b084      	sub	sp, #16
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	6078      	str	r0, [r7, #4]
 8009f74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009f76:	2300      	movs	r3, #0
 8009f78:	73fb      	strb	r3, [r7, #15]

  /* check for PLLSAI2 Parameters used to output PLLSAI2CLK */
  /* P, Q and R dividers are verified in each specific divider case below */
  assert_param(IS_RCC_PLLSAI2SOURCE(PllSai2->PLLSAI2Source));
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d010      	beq.n	8009fa4 <RCCEx_PLLSAI2_Config+0x38>
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	2b01      	cmp	r3, #1
 8009f88:	d00c      	beq.n	8009fa4 <RCCEx_PLLSAI2_Config+0x38>
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	2b02      	cmp	r3, #2
 8009f90:	d008      	beq.n	8009fa4 <RCCEx_PLLSAI2_Config+0x38>
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	2b03      	cmp	r3, #3
 8009f98:	d004      	beq.n	8009fa4 <RCCEx_PLLSAI2_Config+0x38>
 8009f9a:	f640 412f 	movw	r1, #3119	@ 0xc2f
 8009f9e:	4896      	ldr	r0, [pc, #600]	@ (800a1f8 <RCCEx_PLLSAI2_Config+0x28c>)
 8009fa0:	f7fb febc 	bl	8005d1c <assert_failed>
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	685b      	ldr	r3, [r3, #4]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d003      	beq.n	8009fb4 <RCCEx_PLLSAI2_Config+0x48>
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	685b      	ldr	r3, [r3, #4]
 8009fb0:	2b08      	cmp	r3, #8
 8009fb2:	d904      	bls.n	8009fbe <RCCEx_PLLSAI2_Config+0x52>
 8009fb4:	f44f 6143 	mov.w	r1, #3120	@ 0xc30
 8009fb8:	488f      	ldr	r0, [pc, #572]	@ (800a1f8 <RCCEx_PLLSAI2_Config+0x28c>)
 8009fba:	f7fb feaf 	bl	8005d1c <assert_failed>
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	689b      	ldr	r3, [r3, #8]
 8009fc2:	2b07      	cmp	r3, #7
 8009fc4:	d903      	bls.n	8009fce <RCCEx_PLLSAI2_Config+0x62>
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	689b      	ldr	r3, [r3, #8]
 8009fca:	2b56      	cmp	r3, #86	@ 0x56
 8009fcc:	d904      	bls.n	8009fd8 <RCCEx_PLLSAI2_Config+0x6c>
 8009fce:	f640 4131 	movw	r1, #3121	@ 0xc31
 8009fd2:	4889      	ldr	r0, [pc, #548]	@ (800a1f8 <RCCEx_PLLSAI2_Config+0x28c>)
 8009fd4:	f7fb fea2 	bl	8005d1c <assert_failed>
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	695b      	ldr	r3, [r3, #20]
 8009fdc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d105      	bne.n	8009ff0 <RCCEx_PLLSAI2_Config+0x84>
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	695b      	ldr	r3, [r3, #20]
 8009fe8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d007      	beq.n	800a000 <RCCEx_PLLSAI2_Config+0x94>
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	695b      	ldr	r3, [r3, #20]
 8009ff4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009ff8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d004      	beq.n	800a00a <RCCEx_PLLSAI2_Config+0x9e>
 800a000:	f640 4132 	movw	r1, #3122	@ 0xc32
 800a004:	487c      	ldr	r0, [pc, #496]	@ (800a1f8 <RCCEx_PLLSAI2_Config+0x28c>)
 800a006:	f7fb fe89 	bl	8005d1c <assert_failed>

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800a00a:	4b7c      	ldr	r3, [pc, #496]	@ (800a1fc <RCCEx_PLLSAI2_Config+0x290>)
 800a00c:	68db      	ldr	r3, [r3, #12]
 800a00e:	f003 0303 	and.w	r3, r3, #3
 800a012:	2b00      	cmp	r3, #0
 800a014:	d018      	beq.n	800a048 <RCCEx_PLLSAI2_Config+0xdc>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800a016:	4b79      	ldr	r3, [pc, #484]	@ (800a1fc <RCCEx_PLLSAI2_Config+0x290>)
 800a018:	68db      	ldr	r3, [r3, #12]
 800a01a:	f003 0203 	and.w	r2, r3, #3
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	429a      	cmp	r2, r3
 800a024:	d10d      	bne.n	800a042 <RCCEx_PLLSAI2_Config+0xd6>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
       ||
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d009      	beq.n	800a042 <RCCEx_PLLSAI2_Config+0xd6>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800a02e:	4b73      	ldr	r3, [pc, #460]	@ (800a1fc <RCCEx_PLLSAI2_Config+0x290>)
 800a030:	68db      	ldr	r3, [r3, #12]
 800a032:	091b      	lsrs	r3, r3, #4
 800a034:	f003 0307 	and.w	r3, r3, #7
 800a038:	1c5a      	adds	r2, r3, #1
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	685b      	ldr	r3, [r3, #4]
       ||
 800a03e:	429a      	cmp	r2, r3
 800a040:	d047      	beq.n	800a0d2 <RCCEx_PLLSAI2_Config+0x166>
#endif
      )
    {
      status = HAL_ERROR;
 800a042:	2301      	movs	r3, #1
 800a044:	73fb      	strb	r3, [r7, #15]
 800a046:	e044      	b.n	800a0d2 <RCCEx_PLLSAI2_Config+0x166>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	2b03      	cmp	r3, #3
 800a04e:	d018      	beq.n	800a082 <RCCEx_PLLSAI2_Config+0x116>
 800a050:	2b03      	cmp	r3, #3
 800a052:	d825      	bhi.n	800a0a0 <RCCEx_PLLSAI2_Config+0x134>
 800a054:	2b01      	cmp	r3, #1
 800a056:	d002      	beq.n	800a05e <RCCEx_PLLSAI2_Config+0xf2>
 800a058:	2b02      	cmp	r3, #2
 800a05a:	d009      	beq.n	800a070 <RCCEx_PLLSAI2_Config+0x104>
 800a05c:	e020      	b.n	800a0a0 <RCCEx_PLLSAI2_Config+0x134>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800a05e:	4b67      	ldr	r3, [pc, #412]	@ (800a1fc <RCCEx_PLLSAI2_Config+0x290>)
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	f003 0302 	and.w	r3, r3, #2
 800a066:	2b00      	cmp	r3, #0
 800a068:	d11d      	bne.n	800a0a6 <RCCEx_PLLSAI2_Config+0x13a>
      {
        status = HAL_ERROR;
 800a06a:	2301      	movs	r3, #1
 800a06c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a06e:	e01a      	b.n	800a0a6 <RCCEx_PLLSAI2_Config+0x13a>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800a070:	4b62      	ldr	r3, [pc, #392]	@ (800a1fc <RCCEx_PLLSAI2_Config+0x290>)
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d116      	bne.n	800a0aa <RCCEx_PLLSAI2_Config+0x13e>
      {
        status = HAL_ERROR;
 800a07c:	2301      	movs	r3, #1
 800a07e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a080:	e013      	b.n	800a0aa <RCCEx_PLLSAI2_Config+0x13e>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800a082:	4b5e      	ldr	r3, [pc, #376]	@ (800a1fc <RCCEx_PLLSAI2_Config+0x290>)
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d10f      	bne.n	800a0ae <RCCEx_PLLSAI2_Config+0x142>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800a08e:	4b5b      	ldr	r3, [pc, #364]	@ (800a1fc <RCCEx_PLLSAI2_Config+0x290>)
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a096:	2b00      	cmp	r3, #0
 800a098:	d109      	bne.n	800a0ae <RCCEx_PLLSAI2_Config+0x142>
        {
          status = HAL_ERROR;
 800a09a:	2301      	movs	r3, #1
 800a09c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a09e:	e006      	b.n	800a0ae <RCCEx_PLLSAI2_Config+0x142>
    default:
      status = HAL_ERROR;
 800a0a0:	2301      	movs	r3, #1
 800a0a2:	73fb      	strb	r3, [r7, #15]
      break;
 800a0a4:	e004      	b.n	800a0b0 <RCCEx_PLLSAI2_Config+0x144>
      break;
 800a0a6:	bf00      	nop
 800a0a8:	e002      	b.n	800a0b0 <RCCEx_PLLSAI2_Config+0x144>
      break;
 800a0aa:	bf00      	nop
 800a0ac:	e000      	b.n	800a0b0 <RCCEx_PLLSAI2_Config+0x144>
      break;
 800a0ae:	bf00      	nop
    }

    if(status == HAL_OK)
 800a0b0:	7bfb      	ldrb	r3, [r7, #15]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d10d      	bne.n	800a0d2 <RCCEx_PLLSAI2_Config+0x166>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800a0b6:	4b51      	ldr	r3, [pc, #324]	@ (800a1fc <RCCEx_PLLSAI2_Config+0x290>)
 800a0b8:	68db      	ldr	r3, [r3, #12]
 800a0ba:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	6819      	ldr	r1, [r3, #0]
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	685b      	ldr	r3, [r3, #4]
 800a0c6:	3b01      	subs	r3, #1
 800a0c8:	011b      	lsls	r3, r3, #4
 800a0ca:	430b      	orrs	r3, r1
 800a0cc:	494b      	ldr	r1, [pc, #300]	@ (800a1fc <RCCEx_PLLSAI2_Config+0x290>)
 800a0ce:	4313      	orrs	r3, r2
 800a0d0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800a0d2:	7bfb      	ldrb	r3, [r7, #15]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	f040 808a 	bne.w	800a1ee <RCCEx_PLLSAI2_Config+0x282>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800a0da:	4b48      	ldr	r3, [pc, #288]	@ (800a1fc <RCCEx_PLLSAI2_Config+0x290>)
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	4a47      	ldr	r2, [pc, #284]	@ (800a1fc <RCCEx_PLLSAI2_Config+0x290>)
 800a0e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a0e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a0e6:	f7fc fc43 	bl	8006970 <HAL_GetTick>
 800a0ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800a0ec:	e009      	b.n	800a102 <RCCEx_PLLSAI2_Config+0x196>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800a0ee:	f7fc fc3f 	bl	8006970 <HAL_GetTick>
 800a0f2:	4602      	mov	r2, r0
 800a0f4:	68bb      	ldr	r3, [r7, #8]
 800a0f6:	1ad3      	subs	r3, r2, r3
 800a0f8:	2b02      	cmp	r3, #2
 800a0fa:	d902      	bls.n	800a102 <RCCEx_PLLSAI2_Config+0x196>
      {
        status = HAL_TIMEOUT;
 800a0fc:	2303      	movs	r3, #3
 800a0fe:	73fb      	strb	r3, [r7, #15]
        break;
 800a100:	e005      	b.n	800a10e <RCCEx_PLLSAI2_Config+0x1a2>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800a102:	4b3e      	ldr	r3, [pc, #248]	@ (800a1fc <RCCEx_PLLSAI2_Config+0x290>)
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d1ef      	bne.n	800a0ee <RCCEx_PLLSAI2_Config+0x182>
      }
    }

    if(status == HAL_OK)
 800a10e:	7bfb      	ldrb	r3, [r7, #15]
 800a110:	2b00      	cmp	r3, #0
 800a112:	d16c      	bne.n	800a1ee <RCCEx_PLLSAI2_Config+0x282>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800a114:	683b      	ldr	r3, [r7, #0]
 800a116:	2b00      	cmp	r3, #0
 800a118:	d11e      	bne.n	800a158 <RCCEx_PLLSAI2_Config+0x1ec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	68db      	ldr	r3, [r3, #12]
 800a11e:	2b07      	cmp	r3, #7
 800a120:	d008      	beq.n	800a134 <RCCEx_PLLSAI2_Config+0x1c8>
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	68db      	ldr	r3, [r3, #12]
 800a126:	2b11      	cmp	r3, #17
 800a128:	d004      	beq.n	800a134 <RCCEx_PLLSAI2_Config+0x1c8>
 800a12a:	f640 4185 	movw	r1, #3205	@ 0xc85
 800a12e:	4832      	ldr	r0, [pc, #200]	@ (800a1f8 <RCCEx_PLLSAI2_Config+0x28c>)
 800a130:	f7fb fdf4 	bl	8005d1c <assert_failed>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800a134:	4b31      	ldr	r3, [pc, #196]	@ (800a1fc <RCCEx_PLLSAI2_Config+0x290>)
 800a136:	695b      	ldr	r3, [r3, #20]
 800a138:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800a13c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a140:	687a      	ldr	r2, [r7, #4]
 800a142:	6892      	ldr	r2, [r2, #8]
 800a144:	0211      	lsls	r1, r2, #8
 800a146:	687a      	ldr	r2, [r7, #4]
 800a148:	68d2      	ldr	r2, [r2, #12]
 800a14a:	0912      	lsrs	r2, r2, #4
 800a14c:	0452      	lsls	r2, r2, #17
 800a14e:	430a      	orrs	r2, r1
 800a150:	492a      	ldr	r1, [pc, #168]	@ (800a1fc <RCCEx_PLLSAI2_Config+0x290>)
 800a152:	4313      	orrs	r3, r2
 800a154:	614b      	str	r3, [r1, #20]
 800a156:	e026      	b.n	800a1a6 <RCCEx_PLLSAI2_Config+0x23a>
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#endif /* RCC_PLLSAI2Q_DIV_SUPPORT */
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	691b      	ldr	r3, [r3, #16]
 800a15c:	2b02      	cmp	r3, #2
 800a15e:	d010      	beq.n	800a182 <RCCEx_PLLSAI2_Config+0x216>
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	691b      	ldr	r3, [r3, #16]
 800a164:	2b04      	cmp	r3, #4
 800a166:	d00c      	beq.n	800a182 <RCCEx_PLLSAI2_Config+0x216>
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	691b      	ldr	r3, [r3, #16]
 800a16c:	2b06      	cmp	r3, #6
 800a16e:	d008      	beq.n	800a182 <RCCEx_PLLSAI2_Config+0x216>
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	691b      	ldr	r3, [r3, #16]
 800a174:	2b08      	cmp	r3, #8
 800a176:	d004      	beq.n	800a182 <RCCEx_PLLSAI2_Config+0x216>
 800a178:	f640 41bd 	movw	r1, #3261	@ 0xcbd
 800a17c:	481e      	ldr	r0, [pc, #120]	@ (800a1f8 <RCCEx_PLLSAI2_Config+0x28c>)
 800a17e:	f7fb fdcd 	bl	8005d1c <assert_failed>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800a182:	4b1e      	ldr	r3, [pc, #120]	@ (800a1fc <RCCEx_PLLSAI2_Config+0x290>)
 800a184:	695b      	ldr	r3, [r3, #20]
 800a186:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800a18a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800a18e:	687a      	ldr	r2, [r7, #4]
 800a190:	6892      	ldr	r2, [r2, #8]
 800a192:	0211      	lsls	r1, r2, #8
 800a194:	687a      	ldr	r2, [r7, #4]
 800a196:	6912      	ldr	r2, [r2, #16]
 800a198:	0852      	lsrs	r2, r2, #1
 800a19a:	3a01      	subs	r2, #1
 800a19c:	0652      	lsls	r2, r2, #25
 800a19e:	430a      	orrs	r2, r1
 800a1a0:	4916      	ldr	r1, [pc, #88]	@ (800a1fc <RCCEx_PLLSAI2_Config+0x290>)
 800a1a2:	4313      	orrs	r3, r2
 800a1a4:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800a1a6:	4b15      	ldr	r3, [pc, #84]	@ (800a1fc <RCCEx_PLLSAI2_Config+0x290>)
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	4a14      	ldr	r2, [pc, #80]	@ (800a1fc <RCCEx_PLLSAI2_Config+0x290>)
 800a1ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a1b0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a1b2:	f7fc fbdd 	bl	8006970 <HAL_GetTick>
 800a1b6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800a1b8:	e009      	b.n	800a1ce <RCCEx_PLLSAI2_Config+0x262>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800a1ba:	f7fc fbd9 	bl	8006970 <HAL_GetTick>
 800a1be:	4602      	mov	r2, r0
 800a1c0:	68bb      	ldr	r3, [r7, #8]
 800a1c2:	1ad3      	subs	r3, r2, r3
 800a1c4:	2b02      	cmp	r3, #2
 800a1c6:	d902      	bls.n	800a1ce <RCCEx_PLLSAI2_Config+0x262>
        {
          status = HAL_TIMEOUT;
 800a1c8:	2303      	movs	r3, #3
 800a1ca:	73fb      	strb	r3, [r7, #15]
          break;
 800a1cc:	e005      	b.n	800a1da <RCCEx_PLLSAI2_Config+0x26e>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800a1ce:	4b0b      	ldr	r3, [pc, #44]	@ (800a1fc <RCCEx_PLLSAI2_Config+0x290>)
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d0ef      	beq.n	800a1ba <RCCEx_PLLSAI2_Config+0x24e>
        }
      }

      if(status == HAL_OK)
 800a1da:	7bfb      	ldrb	r3, [r7, #15]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d106      	bne.n	800a1ee <RCCEx_PLLSAI2_Config+0x282>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800a1e0:	4b06      	ldr	r3, [pc, #24]	@ (800a1fc <RCCEx_PLLSAI2_Config+0x290>)
 800a1e2:	695a      	ldr	r2, [r3, #20]
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	695b      	ldr	r3, [r3, #20]
 800a1e8:	4904      	ldr	r1, [pc, #16]	@ (800a1fc <RCCEx_PLLSAI2_Config+0x290>)
 800a1ea:	4313      	orrs	r3, r2
 800a1ec:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800a1ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	3710      	adds	r7, #16
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	bd80      	pop	{r7, pc}
 800a1f8:	08010b44 	.word	0x08010b44
 800a1fc:	40021000 	.word	0x40021000

0800a200 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a200:	b580      	push	{r7, lr}
 800a202:	b084      	sub	sp, #16
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d101      	bne.n	800a212 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a20e:	2301      	movs	r3, #1
 800a210:	e1dd      	b.n	800a5ce <HAL_SPI_Init+0x3ce>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	4a7b      	ldr	r2, [pc, #492]	@ (800a404 <HAL_SPI_Init+0x204>)
 800a218:	4293      	cmp	r3, r2
 800a21a:	d00e      	beq.n	800a23a <HAL_SPI_Init+0x3a>
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	4a79      	ldr	r2, [pc, #484]	@ (800a408 <HAL_SPI_Init+0x208>)
 800a222:	4293      	cmp	r3, r2
 800a224:	d009      	beq.n	800a23a <HAL_SPI_Init+0x3a>
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	4a78      	ldr	r2, [pc, #480]	@ (800a40c <HAL_SPI_Init+0x20c>)
 800a22c:	4293      	cmp	r3, r2
 800a22e:	d004      	beq.n	800a23a <HAL_SPI_Init+0x3a>
 800a230:	f240 1147 	movw	r1, #327	@ 0x147
 800a234:	4876      	ldr	r0, [pc, #472]	@ (800a410 <HAL_SPI_Init+0x210>)
 800a236:	f7fb fd71 	bl	8005d1c <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	685b      	ldr	r3, [r3, #4]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d009      	beq.n	800a256 <HAL_SPI_Init+0x56>
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	685b      	ldr	r3, [r3, #4]
 800a246:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a24a:	d004      	beq.n	800a256 <HAL_SPI_Init+0x56>
 800a24c:	f44f 71a4 	mov.w	r1, #328	@ 0x148
 800a250:	486f      	ldr	r0, [pc, #444]	@ (800a410 <HAL_SPI_Init+0x210>)
 800a252:	f7fb fd63 	bl	8005d1c <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	689b      	ldr	r3, [r3, #8]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d00e      	beq.n	800a27c <HAL_SPI_Init+0x7c>
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	689b      	ldr	r3, [r3, #8]
 800a262:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a266:	d009      	beq.n	800a27c <HAL_SPI_Init+0x7c>
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	689b      	ldr	r3, [r3, #8]
 800a26c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a270:	d004      	beq.n	800a27c <HAL_SPI_Init+0x7c>
 800a272:	f240 1149 	movw	r1, #329	@ 0x149
 800a276:	4866      	ldr	r0, [pc, #408]	@ (800a410 <HAL_SPI_Init+0x210>)
 800a278:	f7fb fd50 	bl	8005d1c <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	68db      	ldr	r3, [r3, #12]
 800a280:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800a284:	d040      	beq.n	800a308 <HAL_SPI_Init+0x108>
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	68db      	ldr	r3, [r3, #12]
 800a28a:	f5b3 6f60 	cmp.w	r3, #3584	@ 0xe00
 800a28e:	d03b      	beq.n	800a308 <HAL_SPI_Init+0x108>
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	68db      	ldr	r3, [r3, #12]
 800a294:	f5b3 6f50 	cmp.w	r3, #3328	@ 0xd00
 800a298:	d036      	beq.n	800a308 <HAL_SPI_Init+0x108>
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	68db      	ldr	r3, [r3, #12]
 800a29e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a2a2:	d031      	beq.n	800a308 <HAL_SPI_Init+0x108>
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	68db      	ldr	r3, [r3, #12]
 800a2a8:	f5b3 6f30 	cmp.w	r3, #2816	@ 0xb00
 800a2ac:	d02c      	beq.n	800a308 <HAL_SPI_Init+0x108>
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	68db      	ldr	r3, [r3, #12]
 800a2b2:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800a2b6:	d027      	beq.n	800a308 <HAL_SPI_Init+0x108>
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	68db      	ldr	r3, [r3, #12]
 800a2bc:	f5b3 6f10 	cmp.w	r3, #2304	@ 0x900
 800a2c0:	d022      	beq.n	800a308 <HAL_SPI_Init+0x108>
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	68db      	ldr	r3, [r3, #12]
 800a2c6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a2ca:	d01d      	beq.n	800a308 <HAL_SPI_Init+0x108>
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	68db      	ldr	r3, [r3, #12]
 800a2d0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a2d4:	d018      	beq.n	800a308 <HAL_SPI_Init+0x108>
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	68db      	ldr	r3, [r3, #12]
 800a2da:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800a2de:	d013      	beq.n	800a308 <HAL_SPI_Init+0x108>
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	68db      	ldr	r3, [r3, #12]
 800a2e4:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800a2e8:	d00e      	beq.n	800a308 <HAL_SPI_Init+0x108>
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	68db      	ldr	r3, [r3, #12]
 800a2ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a2f2:	d009      	beq.n	800a308 <HAL_SPI_Init+0x108>
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	68db      	ldr	r3, [r3, #12]
 800a2f8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a2fc:	d004      	beq.n	800a308 <HAL_SPI_Init+0x108>
 800a2fe:	f44f 71a5 	mov.w	r1, #330	@ 0x14a
 800a302:	4843      	ldr	r0, [pc, #268]	@ (800a410 <HAL_SPI_Init+0x210>)
 800a304:	f7fb fd0a 	bl	8005d1c <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	699b      	ldr	r3, [r3, #24]
 800a30c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a310:	d00d      	beq.n	800a32e <HAL_SPI_Init+0x12e>
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	699b      	ldr	r3, [r3, #24]
 800a316:	2b00      	cmp	r3, #0
 800a318:	d009      	beq.n	800a32e <HAL_SPI_Init+0x12e>
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	699b      	ldr	r3, [r3, #24]
 800a31e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a322:	d004      	beq.n	800a32e <HAL_SPI_Init+0x12e>
 800a324:	f240 114b 	movw	r1, #331	@ 0x14b
 800a328:	4839      	ldr	r0, [pc, #228]	@ (800a410 <HAL_SPI_Init+0x210>)
 800a32a:	f7fb fcf7 	bl	8005d1c <assert_failed>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a332:	2b08      	cmp	r3, #8
 800a334:	d008      	beq.n	800a348 <HAL_SPI_Init+0x148>
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d004      	beq.n	800a348 <HAL_SPI_Init+0x148>
 800a33e:	f44f 71a6 	mov.w	r1, #332	@ 0x14c
 800a342:	4833      	ldr	r0, [pc, #204]	@ (800a410 <HAL_SPI_Init+0x210>)
 800a344:	f7fb fcea 	bl	8005d1c <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	69db      	ldr	r3, [r3, #28]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d020      	beq.n	800a392 <HAL_SPI_Init+0x192>
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	69db      	ldr	r3, [r3, #28]
 800a354:	2b08      	cmp	r3, #8
 800a356:	d01c      	beq.n	800a392 <HAL_SPI_Init+0x192>
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	69db      	ldr	r3, [r3, #28]
 800a35c:	2b10      	cmp	r3, #16
 800a35e:	d018      	beq.n	800a392 <HAL_SPI_Init+0x192>
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	69db      	ldr	r3, [r3, #28]
 800a364:	2b18      	cmp	r3, #24
 800a366:	d014      	beq.n	800a392 <HAL_SPI_Init+0x192>
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	69db      	ldr	r3, [r3, #28]
 800a36c:	2b20      	cmp	r3, #32
 800a36e:	d010      	beq.n	800a392 <HAL_SPI_Init+0x192>
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	69db      	ldr	r3, [r3, #28]
 800a374:	2b28      	cmp	r3, #40	@ 0x28
 800a376:	d00c      	beq.n	800a392 <HAL_SPI_Init+0x192>
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	69db      	ldr	r3, [r3, #28]
 800a37c:	2b30      	cmp	r3, #48	@ 0x30
 800a37e:	d008      	beq.n	800a392 <HAL_SPI_Init+0x192>
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	69db      	ldr	r3, [r3, #28]
 800a384:	2b38      	cmp	r3, #56	@ 0x38
 800a386:	d004      	beq.n	800a392 <HAL_SPI_Init+0x192>
 800a388:	f240 114d 	movw	r1, #333	@ 0x14d
 800a38c:	4820      	ldr	r0, [pc, #128]	@ (800a410 <HAL_SPI_Init+0x210>)
 800a38e:	f7fb fcc5 	bl	8005d1c <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	6a1b      	ldr	r3, [r3, #32]
 800a396:	2b00      	cmp	r3, #0
 800a398:	d008      	beq.n	800a3ac <HAL_SPI_Init+0x1ac>
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	6a1b      	ldr	r3, [r3, #32]
 800a39e:	2b80      	cmp	r3, #128	@ 0x80
 800a3a0:	d004      	beq.n	800a3ac <HAL_SPI_Init+0x1ac>
 800a3a2:	f44f 71a7 	mov.w	r1, #334	@ 0x14e
 800a3a6:	481a      	ldr	r0, [pc, #104]	@ (800a410 <HAL_SPI_Init+0x210>)
 800a3a8:	f7fb fcb8 	bl	8005d1c <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d008      	beq.n	800a3c6 <HAL_SPI_Init+0x1c6>
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3b8:	2b10      	cmp	r3, #16
 800a3ba:	d004      	beq.n	800a3c6 <HAL_SPI_Init+0x1c6>
 800a3bc:	f240 114f 	movw	r1, #335	@ 0x14f
 800a3c0:	4813      	ldr	r0, [pc, #76]	@ (800a410 <HAL_SPI_Init+0x210>)
 800a3c2:	f7fb fcab 	bl	8005d1c <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d151      	bne.n	800a472 <HAL_SPI_Init+0x272>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	691b      	ldr	r3, [r3, #16]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d008      	beq.n	800a3e8 <HAL_SPI_Init+0x1e8>
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	691b      	ldr	r3, [r3, #16]
 800a3da:	2b02      	cmp	r3, #2
 800a3dc:	d004      	beq.n	800a3e8 <HAL_SPI_Init+0x1e8>
 800a3de:	f44f 71a9 	mov.w	r1, #338	@ 0x152
 800a3e2:	480b      	ldr	r0, [pc, #44]	@ (800a410 <HAL_SPI_Init+0x210>)
 800a3e4:	f7fb fc9a 	bl	8005d1c <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	695b      	ldr	r3, [r3, #20]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d011      	beq.n	800a414 <HAL_SPI_Init+0x214>
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	695b      	ldr	r3, [r3, #20]
 800a3f4:	2b01      	cmp	r3, #1
 800a3f6:	d00d      	beq.n	800a414 <HAL_SPI_Init+0x214>
 800a3f8:	f240 1153 	movw	r1, #339	@ 0x153
 800a3fc:	4804      	ldr	r0, [pc, #16]	@ (800a410 <HAL_SPI_Init+0x210>)
 800a3fe:	f7fb fc8d 	bl	8005d1c <assert_failed>
 800a402:	e007      	b.n	800a414 <HAL_SPI_Init+0x214>
 800a404:	40013000 	.word	0x40013000
 800a408:	40003800 	.word	0x40003800
 800a40c:	40003c00 	.word	0x40003c00
 800a410:	08010b80 	.word	0x08010b80

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	685b      	ldr	r3, [r3, #4]
 800a418:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a41c:	d125      	bne.n	800a46a <HAL_SPI_Init+0x26a>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	69db      	ldr	r3, [r3, #28]
 800a422:	2b00      	cmp	r3, #0
 800a424:	d050      	beq.n	800a4c8 <HAL_SPI_Init+0x2c8>
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	69db      	ldr	r3, [r3, #28]
 800a42a:	2b08      	cmp	r3, #8
 800a42c:	d04c      	beq.n	800a4c8 <HAL_SPI_Init+0x2c8>
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	69db      	ldr	r3, [r3, #28]
 800a432:	2b10      	cmp	r3, #16
 800a434:	d048      	beq.n	800a4c8 <HAL_SPI_Init+0x2c8>
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	69db      	ldr	r3, [r3, #28]
 800a43a:	2b18      	cmp	r3, #24
 800a43c:	d044      	beq.n	800a4c8 <HAL_SPI_Init+0x2c8>
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	69db      	ldr	r3, [r3, #28]
 800a442:	2b20      	cmp	r3, #32
 800a444:	d040      	beq.n	800a4c8 <HAL_SPI_Init+0x2c8>
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	69db      	ldr	r3, [r3, #28]
 800a44a:	2b28      	cmp	r3, #40	@ 0x28
 800a44c:	d03c      	beq.n	800a4c8 <HAL_SPI_Init+0x2c8>
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	69db      	ldr	r3, [r3, #28]
 800a452:	2b30      	cmp	r3, #48	@ 0x30
 800a454:	d038      	beq.n	800a4c8 <HAL_SPI_Init+0x2c8>
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	69db      	ldr	r3, [r3, #28]
 800a45a:	2b38      	cmp	r3, #56	@ 0x38
 800a45c:	d034      	beq.n	800a4c8 <HAL_SPI_Init+0x2c8>
 800a45e:	f240 1157 	movw	r1, #343	@ 0x157
 800a462:	485d      	ldr	r0, [pc, #372]	@ (800a5d8 <HAL_SPI_Init+0x3d8>)
 800a464:	f7fb fc5a 	bl	8005d1c <assert_failed>
 800a468:	e02e      	b.n	800a4c8 <HAL_SPI_Init+0x2c8>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	2200      	movs	r2, #0
 800a46e:	61da      	str	r2, [r3, #28]
 800a470:	e02a      	b.n	800a4c8 <HAL_SPI_Init+0x2c8>
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	69db      	ldr	r3, [r3, #28]
 800a476:	2b00      	cmp	r3, #0
 800a478:	d020      	beq.n	800a4bc <HAL_SPI_Init+0x2bc>
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	69db      	ldr	r3, [r3, #28]
 800a47e:	2b08      	cmp	r3, #8
 800a480:	d01c      	beq.n	800a4bc <HAL_SPI_Init+0x2bc>
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	69db      	ldr	r3, [r3, #28]
 800a486:	2b10      	cmp	r3, #16
 800a488:	d018      	beq.n	800a4bc <HAL_SPI_Init+0x2bc>
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	69db      	ldr	r3, [r3, #28]
 800a48e:	2b18      	cmp	r3, #24
 800a490:	d014      	beq.n	800a4bc <HAL_SPI_Init+0x2bc>
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	69db      	ldr	r3, [r3, #28]
 800a496:	2b20      	cmp	r3, #32
 800a498:	d010      	beq.n	800a4bc <HAL_SPI_Init+0x2bc>
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	69db      	ldr	r3, [r3, #28]
 800a49e:	2b28      	cmp	r3, #40	@ 0x28
 800a4a0:	d00c      	beq.n	800a4bc <HAL_SPI_Init+0x2bc>
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	69db      	ldr	r3, [r3, #28]
 800a4a6:	2b30      	cmp	r3, #48	@ 0x30
 800a4a8:	d008      	beq.n	800a4bc <HAL_SPI_Init+0x2bc>
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	69db      	ldr	r3, [r3, #28]
 800a4ae:	2b38      	cmp	r3, #56	@ 0x38
 800a4b0:	d004      	beq.n	800a4bc <HAL_SPI_Init+0x2bc>
 800a4b2:	f240 1161 	movw	r1, #353	@ 0x161
 800a4b6:	4848      	ldr	r0, [pc, #288]	@ (800a5d8 <HAL_SPI_Init+0x3d8>)
 800a4b8:	f7fb fc30 	bl	8005d1c <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	2200      	movs	r2, #0
 800a4c0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	2200      	movs	r2, #0
 800a4c6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800a4d4:	b2db      	uxtb	r3, r3
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d106      	bne.n	800a4e8 <HAL_SPI_Init+0x2e8>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	2200      	movs	r2, #0
 800a4de:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a4e2:	6878      	ldr	r0, [r7, #4]
 800a4e4:	f7fb fc5e 	bl	8005da4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	2202      	movs	r2, #2
 800a4ec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	681a      	ldr	r2, [r3, #0]
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a4fe:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	68db      	ldr	r3, [r3, #12]
 800a504:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a508:	d902      	bls.n	800a510 <HAL_SPI_Init+0x310>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800a50a:	2300      	movs	r3, #0
 800a50c:	60fb      	str	r3, [r7, #12]
 800a50e:	e002      	b.n	800a516 <HAL_SPI_Init+0x316>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800a510:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a514:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	68db      	ldr	r3, [r3, #12]
 800a51a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800a51e:	d007      	beq.n	800a530 <HAL_SPI_Init+0x330>
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	68db      	ldr	r3, [r3, #12]
 800a524:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a528:	d002      	beq.n	800a530 <HAL_SPI_Init+0x330>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	2200      	movs	r2, #0
 800a52e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	685b      	ldr	r3, [r3, #4]
 800a534:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	689b      	ldr	r3, [r3, #8]
 800a53c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800a540:	431a      	orrs	r2, r3
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	691b      	ldr	r3, [r3, #16]
 800a546:	f003 0302 	and.w	r3, r3, #2
 800a54a:	431a      	orrs	r2, r3
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	695b      	ldr	r3, [r3, #20]
 800a550:	f003 0301 	and.w	r3, r3, #1
 800a554:	431a      	orrs	r2, r3
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	699b      	ldr	r3, [r3, #24]
 800a55a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a55e:	431a      	orrs	r2, r3
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	69db      	ldr	r3, [r3, #28]
 800a564:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a568:	431a      	orrs	r2, r3
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	6a1b      	ldr	r3, [r3, #32]
 800a56e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a572:	ea42 0103 	orr.w	r1, r2, r3
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a57a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	430a      	orrs	r2, r1
 800a584:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	699b      	ldr	r3, [r3, #24]
 800a58a:	0c1b      	lsrs	r3, r3, #16
 800a58c:	f003 0204 	and.w	r2, r3, #4
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a594:	f003 0310 	and.w	r3, r3, #16
 800a598:	431a      	orrs	r2, r3
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a59e:	f003 0308 	and.w	r3, r3, #8
 800a5a2:	431a      	orrs	r2, r3
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	68db      	ldr	r3, [r3, #12]
 800a5a8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800a5ac:	ea42 0103 	orr.w	r1, r2, r3
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	430a      	orrs	r2, r1
 800a5bc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	2201      	movs	r2, #1
 800a5c8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800a5cc:	2300      	movs	r3, #0
}
 800a5ce:	4618      	mov	r0, r3
 800a5d0:	3710      	adds	r7, #16
 800a5d2:	46bd      	mov	sp, r7
 800a5d4:	bd80      	pop	{r7, pc}
 800a5d6:	bf00      	nop
 800a5d8:	08010b80 	.word	0x08010b80

0800a5dc <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	b086      	sub	sp, #24
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	60f8      	str	r0, [r7, #12]
 800a5e4:	60b9      	str	r1, [r7, #8]
 800a5e6:	607a      	str	r2, [r7, #4]
 800a5e8:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;

  /* Check rx & tx dma handles */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d104      	bne.n	800a5fc <HAL_SPI_TransmitReceive_DMA+0x20>
 800a5f2:	f640 0172 	movw	r1, #2162	@ 0x872
 800a5f6:	487f      	ldr	r0, [pc, #508]	@ (800a7f4 <HAL_SPI_TransmitReceive_DMA+0x218>)
 800a5f8:	f7fb fb90 	bl	8005d1c <assert_failed>
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a600:	2b00      	cmp	r3, #0
 800a602:	d104      	bne.n	800a60e <HAL_SPI_TransmitReceive_DMA+0x32>
 800a604:	f640 0173 	movw	r1, #2163	@ 0x873
 800a608:	487a      	ldr	r0, [pc, #488]	@ (800a7f4 <HAL_SPI_TransmitReceive_DMA+0x218>)
 800a60a:	f7fb fb87 	bl	8005d1c <assert_failed>

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	689b      	ldr	r3, [r3, #8]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d004      	beq.n	800a620 <HAL_SPI_TransmitReceive_DMA+0x44>
 800a616:	f640 0176 	movw	r1, #2166	@ 0x876
 800a61a:	4876      	ldr	r0, [pc, #472]	@ (800a7f4 <HAL_SPI_TransmitReceive_DMA+0x218>)
 800a61c:	f7fb fb7e 	bl	8005d1c <assert_failed>

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800a626:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	685b      	ldr	r3, [r3, #4]
 800a62c:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800a62e:	7dfb      	ldrb	r3, [r7, #23]
 800a630:	2b01      	cmp	r3, #1
 800a632:	d00c      	beq.n	800a64e <HAL_SPI_TransmitReceive_DMA+0x72>
 800a634:	693b      	ldr	r3, [r7, #16]
 800a636:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a63a:	d106      	bne.n	800a64a <HAL_SPI_TransmitReceive_DMA+0x6e>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	689b      	ldr	r3, [r3, #8]
 800a640:	2b00      	cmp	r3, #0
 800a642:	d102      	bne.n	800a64a <HAL_SPI_TransmitReceive_DMA+0x6e>
 800a644:	7dfb      	ldrb	r3, [r7, #23]
 800a646:	2b04      	cmp	r3, #4
 800a648:	d001      	beq.n	800a64e <HAL_SPI_TransmitReceive_DMA+0x72>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800a64a:	2302      	movs	r3, #2
 800a64c:	e15f      	b.n	800a90e <HAL_SPI_TransmitReceive_DMA+0x332>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a64e:	68bb      	ldr	r3, [r7, #8]
 800a650:	2b00      	cmp	r3, #0
 800a652:	d005      	beq.n	800a660 <HAL_SPI_TransmitReceive_DMA+0x84>
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	2b00      	cmp	r3, #0
 800a658:	d002      	beq.n	800a660 <HAL_SPI_TransmitReceive_DMA+0x84>
 800a65a:	887b      	ldrh	r3, [r7, #2]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d101      	bne.n	800a664 <HAL_SPI_TransmitReceive_DMA+0x88>
  {
    return HAL_ERROR;
 800a660:	2301      	movs	r3, #1
 800a662:	e154      	b.n	800a90e <HAL_SPI_TransmitReceive_DMA+0x332>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800a66a:	2b01      	cmp	r3, #1
 800a66c:	d101      	bne.n	800a672 <HAL_SPI_TransmitReceive_DMA+0x96>
 800a66e:	2302      	movs	r3, #2
 800a670:	e14d      	b.n	800a90e <HAL_SPI_TransmitReceive_DMA+0x332>
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	2201      	movs	r2, #1
 800a676:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800a680:	b2db      	uxtb	r3, r3
 800a682:	2b04      	cmp	r3, #4
 800a684:	d003      	beq.n	800a68e <HAL_SPI_TransmitReceive_DMA+0xb2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	2205      	movs	r2, #5
 800a68a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	2200      	movs	r2, #0
 800a692:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	68ba      	ldr	r2, [r7, #8]
 800a698:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	887a      	ldrh	r2, [r7, #2]
 800a69e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	887a      	ldrh	r2, [r7, #2]
 800a6a4:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	687a      	ldr	r2, [r7, #4]
 800a6aa:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	887a      	ldrh	r2, [r7, #2]
 800a6b0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	887a      	ldrh	r2, [r7, #2]
 800a6b8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	2200      	movs	r2, #0
 800a6c0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	2200      	movs	r2, #0
 800a6c6:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	685a      	ldr	r2, [r3, #4]
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	f422 42c0 	bic.w	r2, r2, #24576	@ 0x6000
 800a6d6:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	68db      	ldr	r3, [r3, #12]
 800a6dc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a6e0:	d908      	bls.n	800a6f4 <HAL_SPI_TransmitReceive_DMA+0x118>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	685a      	ldr	r2, [r3, #4]
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800a6f0:	605a      	str	r2, [r3, #4]
 800a6f2:	e06f      	b.n	800a7d4 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	685a      	ldr	r2, [r3, #4]
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a702:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a708:	699b      	ldr	r3, [r3, #24]
 800a70a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a70e:	d126      	bne.n	800a75e <HAL_SPI_TransmitReceive_DMA+0x182>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 800a714:	f003 0301 	and.w	r3, r3, #1
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d10f      	bne.n	800a73c <HAL_SPI_TransmitReceive_DMA+0x160>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	685a      	ldr	r2, [r3, #4]
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800a72a:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a730:	b29b      	uxth	r3, r3
 800a732:	085b      	lsrs	r3, r3, #1
 800a734:	b29a      	uxth	r2, r3
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800a73a:	e010      	b.n	800a75e <HAL_SPI_TransmitReceive_DMA+0x182>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	685a      	ldr	r2, [r3, #4]
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a74a:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a750:	b29b      	uxth	r3, r3
 800a752:	085b      	lsrs	r3, r3, #1
 800a754:	b29b      	uxth	r3, r3
 800a756:	3301      	adds	r3, #1
 800a758:	b29a      	uxth	r2, r3
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a762:	699b      	ldr	r3, [r3, #24]
 800a764:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a768:	d134      	bne.n	800a7d4 <HAL_SPI_TransmitReceive_DMA+0x1f8>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	685a      	ldr	r2, [r3, #4]
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800a778:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a780:	b29b      	uxth	r3, r3
 800a782:	f003 0301 	and.w	r3, r3, #1
 800a786:	2b00      	cmp	r3, #0
 800a788:	d111      	bne.n	800a7ae <HAL_SPI_TransmitReceive_DMA+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	685a      	ldr	r2, [r3, #4]
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a798:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a7a0:	b29b      	uxth	r3, r3
 800a7a2:	085b      	lsrs	r3, r3, #1
 800a7a4:	b29a      	uxth	r2, r3
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800a7ac:	e012      	b.n	800a7d4 <HAL_SPI_TransmitReceive_DMA+0x1f8>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	685a      	ldr	r2, [r3, #4]
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a7bc:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a7c4:	b29b      	uxth	r3, r3
 800a7c6:	085b      	lsrs	r3, r3, #1
 800a7c8:	b29b      	uxth	r3, r3
 800a7ca:	3301      	adds	r3, #1
 800a7cc:	b29a      	uxth	r2, r3
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800a7da:	b2db      	uxtb	r3, r3
 800a7dc:	2b04      	cmp	r3, #4
 800a7de:	d10f      	bne.n	800a800 <HAL_SPI_TransmitReceive_DMA+0x224>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a7e4:	4a04      	ldr	r2, [pc, #16]	@ (800a7f8 <HAL_SPI_TransmitReceive_DMA+0x21c>)
 800a7e6:	631a      	str	r2, [r3, #48]	@ 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a7ec:	4a03      	ldr	r2, [pc, #12]	@ (800a7fc <HAL_SPI_TransmitReceive_DMA+0x220>)
 800a7ee:	62da      	str	r2, [r3, #44]	@ 0x2c
 800a7f0:	e00e      	b.n	800a810 <HAL_SPI_TransmitReceive_DMA+0x234>
 800a7f2:	bf00      	nop
 800a7f4:	08010b80 	.word	0x08010b80
 800a7f8:	0800acb5 	.word	0x0800acb5
 800a7fc:	0800ab7d 	.word	0x0800ab7d
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a804:	4a44      	ldr	r2, [pc, #272]	@ (800a918 <HAL_SPI_TransmitReceive_DMA+0x33c>)
 800a806:	631a      	str	r2, [r3, #48]	@ 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a80c:	4a43      	ldr	r2, [pc, #268]	@ (800a91c <HAL_SPI_TransmitReceive_DMA+0x340>)
 800a80e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a814:	4a42      	ldr	r2, [pc, #264]	@ (800a920 <HAL_SPI_TransmitReceive_DMA+0x344>)
 800a816:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a81c:	2200      	movs	r2, #0
 800a81e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	330c      	adds	r3, #12
 800a82a:	4619      	mov	r1, r3
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a830:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a838:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800a83a:	f7fc fb9d 	bl	8006f78 <HAL_DMA_Start_IT>
 800a83e:	4603      	mov	r3, r0
 800a840:	2b00      	cmp	r3, #0
 800a842:	d00b      	beq.n	800a85c <HAL_SPI_TransmitReceive_DMA+0x280>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a848:	f043 0210 	orr.w	r2, r3, #16
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	2200      	movs	r2, #0
 800a854:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800a858:	2301      	movs	r3, #1
 800a85a:	e058      	b.n	800a90e <HAL_SPI_TransmitReceive_DMA+0x332>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	685a      	ldr	r2, [r3, #4]
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	f042 0201 	orr.w	r2, r2, #1
 800a86a:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a870:	2200      	movs	r2, #0
 800a872:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a878:	2200      	movs	r2, #0
 800a87a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a880:	2200      	movs	r2, #0
 800a882:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a888:	2200      	movs	r2, #0
 800a88a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a894:	4619      	mov	r1, r3
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	330c      	adds	r3, #12
 800a89c:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a8a2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800a8a4:	f7fc fb68 	bl	8006f78 <HAL_DMA_Start_IT>
 800a8a8:	4603      	mov	r3, r0
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d00b      	beq.n	800a8c6 <HAL_SPI_TransmitReceive_DMA+0x2ea>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a8b2:	f043 0210 	orr.w	r2, r3, #16
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	2200      	movs	r2, #0
 800a8be:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800a8c2:	2301      	movs	r3, #1
 800a8c4:	e023      	b.n	800a90e <HAL_SPI_TransmitReceive_DMA+0x332>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a8d0:	2b40      	cmp	r3, #64	@ 0x40
 800a8d2:	d007      	beq.n	800a8e4 <HAL_SPI_TransmitReceive_DMA+0x308>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	681a      	ldr	r2, [r3, #0]
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a8e2:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	2200      	movs	r2, #0
 800a8e8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	685a      	ldr	r2, [r3, #4]
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	f042 0220 	orr.w	r2, r2, #32
 800a8fa:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	685a      	ldr	r2, [r3, #4]
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	f042 0202 	orr.w	r2, r2, #2
 800a90a:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800a90c:	2300      	movs	r3, #0
}
 800a90e:	4618      	mov	r0, r3
 800a910:	3718      	adds	r7, #24
 800a912:	46bd      	mov	sp, r7
 800a914:	bd80      	pop	{r7, pc}
 800a916:	bf00      	nop
 800a918:	0800acd1 	.word	0x0800acd1
 800a91c:	0800ac25 	.word	0x0800ac25
 800a920:	0800aced 	.word	0x0800aced

0800a924 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800a924:	b580      	push	{r7, lr}
 800a926:	b088      	sub	sp, #32
 800a928:	af00      	add	r7, sp, #0
 800a92a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	685b      	ldr	r3, [r3, #4]
 800a932:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	689b      	ldr	r3, [r3, #8]
 800a93a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800a93c:	69bb      	ldr	r3, [r7, #24]
 800a93e:	099b      	lsrs	r3, r3, #6
 800a940:	f003 0301 	and.w	r3, r3, #1
 800a944:	2b00      	cmp	r3, #0
 800a946:	d10f      	bne.n	800a968 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800a948:	69bb      	ldr	r3, [r7, #24]
 800a94a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d00a      	beq.n	800a968 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800a952:	69fb      	ldr	r3, [r7, #28]
 800a954:	099b      	lsrs	r3, r3, #6
 800a956:	f003 0301 	and.w	r3, r3, #1
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d004      	beq.n	800a968 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a962:	6878      	ldr	r0, [r7, #4]
 800a964:	4798      	blx	r3
    return;
 800a966:	e0d7      	b.n	800ab18 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800a968:	69bb      	ldr	r3, [r7, #24]
 800a96a:	085b      	lsrs	r3, r3, #1
 800a96c:	f003 0301 	and.w	r3, r3, #1
 800a970:	2b00      	cmp	r3, #0
 800a972:	d00a      	beq.n	800a98a <HAL_SPI_IRQHandler+0x66>
 800a974:	69fb      	ldr	r3, [r7, #28]
 800a976:	09db      	lsrs	r3, r3, #7
 800a978:	f003 0301 	and.w	r3, r3, #1
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d004      	beq.n	800a98a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a984:	6878      	ldr	r0, [r7, #4]
 800a986:	4798      	blx	r3
    return;
 800a988:	e0c6      	b.n	800ab18 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800a98a:	69bb      	ldr	r3, [r7, #24]
 800a98c:	095b      	lsrs	r3, r3, #5
 800a98e:	f003 0301 	and.w	r3, r3, #1
 800a992:	2b00      	cmp	r3, #0
 800a994:	d10c      	bne.n	800a9b0 <HAL_SPI_IRQHandler+0x8c>
 800a996:	69bb      	ldr	r3, [r7, #24]
 800a998:	099b      	lsrs	r3, r3, #6
 800a99a:	f003 0301 	and.w	r3, r3, #1
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d106      	bne.n	800a9b0 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800a9a2:	69bb      	ldr	r3, [r7, #24]
 800a9a4:	0a1b      	lsrs	r3, r3, #8
 800a9a6:	f003 0301 	and.w	r3, r3, #1
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	f000 80b4 	beq.w	800ab18 <HAL_SPI_IRQHandler+0x1f4>
 800a9b0:	69fb      	ldr	r3, [r7, #28]
 800a9b2:	095b      	lsrs	r3, r3, #5
 800a9b4:	f003 0301 	and.w	r3, r3, #1
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	f000 80ad 	beq.w	800ab18 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800a9be:	69bb      	ldr	r3, [r7, #24]
 800a9c0:	099b      	lsrs	r3, r3, #6
 800a9c2:	f003 0301 	and.w	r3, r3, #1
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d023      	beq.n	800aa12 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800a9d0:	b2db      	uxtb	r3, r3
 800a9d2:	2b03      	cmp	r3, #3
 800a9d4:	d011      	beq.n	800a9fa <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a9da:	f043 0204 	orr.w	r2, r3, #4
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	617b      	str	r3, [r7, #20]
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	68db      	ldr	r3, [r3, #12]
 800a9ec:	617b      	str	r3, [r7, #20]
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	689b      	ldr	r3, [r3, #8]
 800a9f4:	617b      	str	r3, [r7, #20]
 800a9f6:	697b      	ldr	r3, [r7, #20]
 800a9f8:	e00b      	b.n	800aa12 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a9fa:	2300      	movs	r3, #0
 800a9fc:	613b      	str	r3, [r7, #16]
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	68db      	ldr	r3, [r3, #12]
 800aa04:	613b      	str	r3, [r7, #16]
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	689b      	ldr	r3, [r3, #8]
 800aa0c:	613b      	str	r3, [r7, #16]
 800aa0e:	693b      	ldr	r3, [r7, #16]
        return;
 800aa10:	e082      	b.n	800ab18 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800aa12:	69bb      	ldr	r3, [r7, #24]
 800aa14:	095b      	lsrs	r3, r3, #5
 800aa16:	f003 0301 	and.w	r3, r3, #1
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d014      	beq.n	800aa48 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800aa22:	f043 0201 	orr.w	r2, r3, #1
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	60fb      	str	r3, [r7, #12]
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	689b      	ldr	r3, [r3, #8]
 800aa34:	60fb      	str	r3, [r7, #12]
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	681a      	ldr	r2, [r3, #0]
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800aa44:	601a      	str	r2, [r3, #0]
 800aa46:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800aa48:	69bb      	ldr	r3, [r7, #24]
 800aa4a:	0a1b      	lsrs	r3, r3, #8
 800aa4c:	f003 0301 	and.w	r3, r3, #1
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d00c      	beq.n	800aa6e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800aa58:	f043 0208 	orr.w	r2, r3, #8
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800aa60:	2300      	movs	r3, #0
 800aa62:	60bb      	str	r3, [r7, #8]
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	689b      	ldr	r3, [r3, #8]
 800aa6a:	60bb      	str	r3, [r7, #8]
 800aa6c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d04f      	beq.n	800ab16 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	685a      	ldr	r2, [r3, #4]
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800aa84:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	2201      	movs	r2, #1
 800aa8a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800aa8e:	69fb      	ldr	r3, [r7, #28]
 800aa90:	f003 0302 	and.w	r3, r3, #2
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d104      	bne.n	800aaa2 <HAL_SPI_IRQHandler+0x17e>
 800aa98:	69fb      	ldr	r3, [r7, #28]
 800aa9a:	f003 0301 	and.w	r3, r3, #1
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d034      	beq.n	800ab0c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	685a      	ldr	r2, [r3, #4]
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	f022 0203 	bic.w	r2, r2, #3
 800aab0:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d011      	beq.n	800aade <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aabe:	4a18      	ldr	r2, [pc, #96]	@ (800ab20 <HAL_SPI_IRQHandler+0x1fc>)
 800aac0:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aac6:	4618      	mov	r0, r3
 800aac8:	f7fc fac4 	bl	8007054 <HAL_DMA_Abort_IT>
 800aacc:	4603      	mov	r3, r0
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d005      	beq.n	800aade <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800aad6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d016      	beq.n	800ab14 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aaea:	4a0d      	ldr	r2, [pc, #52]	@ (800ab20 <HAL_SPI_IRQHandler+0x1fc>)
 800aaec:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	f7fc faae 	bl	8007054 <HAL_DMA_Abort_IT>
 800aaf8:	4603      	mov	r3, r0
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d00a      	beq.n	800ab14 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ab02:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 800ab0a:	e003      	b.n	800ab14 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800ab0c:	6878      	ldr	r0, [r7, #4]
 800ab0e:	f7fb f871 	bl	8005bf4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800ab12:	e000      	b.n	800ab16 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800ab14:	bf00      	nop
    return;
 800ab16:	bf00      	nop
  }
}
 800ab18:	3720      	adds	r7, #32
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	bd80      	pop	{r7, pc}
 800ab1e:	bf00      	nop
 800ab20:	0800ad2d 	.word	0x0800ad2d

0800ab24 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800ab24:	b480      	push	{r7}
 800ab26:	b083      	sub	sp, #12
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800ab2c:	bf00      	nop
 800ab2e:	370c      	adds	r7, #12
 800ab30:	46bd      	mov	sp, r7
 800ab32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab36:	4770      	bx	lr

0800ab38 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800ab38:	b480      	push	{r7}
 800ab3a:	b083      	sub	sp, #12
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800ab40:	bf00      	nop
 800ab42:	370c      	adds	r7, #12
 800ab44:	46bd      	mov	sp, r7
 800ab46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab4a:	4770      	bx	lr

0800ab4c <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800ab4c:	b480      	push	{r7}
 800ab4e:	b083      	sub	sp, #12
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800ab54:	bf00      	nop
 800ab56:	370c      	adds	r7, #12
 800ab58:	46bd      	mov	sp, r7
 800ab5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5e:	4770      	bx	lr

0800ab60 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 800ab60:	b480      	push	{r7}
 800ab62:	b083      	sub	sp, #12
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800ab6e:	b2db      	uxtb	r3, r3
}
 800ab70:	4618      	mov	r0, r3
 800ab72:	370c      	adds	r7, #12
 800ab74:	46bd      	mov	sp, r7
 800ab76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7a:	4770      	bx	lr

0800ab7c <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ab7c:	b580      	push	{r7, lr}
 800ab7e:	b084      	sub	sp, #16
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab88:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ab8a:	f7fb fef1 	bl	8006970 <HAL_GetTick>
 800ab8e:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	f003 0320 	and.w	r3, r3, #32
 800ab9a:	2b20      	cmp	r3, #32
 800ab9c:	d03c      	beq.n	800ac18 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	685a      	ldr	r2, [r3, #4]
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	f022 0220 	bic.w	r2, r2, #32
 800abac:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	689b      	ldr	r3, [r3, #8]
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d10d      	bne.n	800abd2 <SPI_DMAReceiveCplt+0x56>
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	685b      	ldr	r3, [r3, #4]
 800abba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800abbe:	d108      	bne.n	800abd2 <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	685a      	ldr	r2, [r3, #4]
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	f022 0203 	bic.w	r2, r2, #3
 800abce:	605a      	str	r2, [r3, #4]
 800abd0:	e007      	b.n	800abe2 <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	685a      	ldr	r2, [r3, #4]
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	f022 0201 	bic.w	r2, r2, #1
 800abe0:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800abe2:	68ba      	ldr	r2, [r7, #8]
 800abe4:	2164      	movs	r1, #100	@ 0x64
 800abe6:	68f8      	ldr	r0, [r7, #12]
 800abe8:	f000 f9d4 	bl	800af94 <SPI_EndRxTransaction>
 800abec:	4603      	mov	r3, r0
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d002      	beq.n	800abf8 <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	2220      	movs	r2, #32
 800abf6:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    hspi->RxXferCount = 0U;
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	2200      	movs	r2, #0
 800abfc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	2201      	movs	r2, #1
 800ac04:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d003      	beq.n	800ac18 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800ac10:	68f8      	ldr	r0, [r7, #12]
 800ac12:	f7fa ffef 	bl	8005bf4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800ac16:	e002      	b.n	800ac1e <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800ac18:	68f8      	ldr	r0, [r7, #12]
 800ac1a:	f7ff ff83 	bl	800ab24 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ac1e:	3710      	adds	r7, #16
 800ac20:	46bd      	mov	sp, r7
 800ac22:	bd80      	pop	{r7, pc}

0800ac24 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ac24:	b580      	push	{r7, lr}
 800ac26:	b084      	sub	sp, #16
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac30:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ac32:	f7fb fe9d 	bl	8006970 <HAL_GetTick>
 800ac36:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	f003 0320 	and.w	r3, r3, #32
 800ac42:	2b20      	cmp	r3, #32
 800ac44:	d030      	beq.n	800aca8 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	685a      	ldr	r2, [r3, #4]
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	f022 0220 	bic.w	r2, r2, #32
 800ac54:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800ac56:	68ba      	ldr	r2, [r7, #8]
 800ac58:	2164      	movs	r1, #100	@ 0x64
 800ac5a:	68f8      	ldr	r0, [r7, #12]
 800ac5c:	f000 f9f2 	bl	800b044 <SPI_EndRxTxTransaction>
 800ac60:	4603      	mov	r3, r0
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d005      	beq.n	800ac72 <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ac6a:	f043 0220 	orr.w	r2, r3, #32
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	685a      	ldr	r2, [r3, #4]
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	f022 0203 	bic.w	r2, r2, #3
 800ac80:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	2200      	movs	r2, #0
 800ac86:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->RxXferCount = 0U;
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	2200      	movs	r2, #0
 800ac8c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	2201      	movs	r2, #1
 800ac94:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d003      	beq.n	800aca8 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800aca0:	68f8      	ldr	r0, [r7, #12]
 800aca2:	f7fa ffa7 	bl	8005bf4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800aca6:	e002      	b.n	800acae <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800aca8:	68f8      	ldr	r0, [r7, #12]
 800acaa:	f7fa ff98 	bl	8005bde <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800acae:	3710      	adds	r7, #16
 800acb0:	46bd      	mov	sp, r7
 800acb2:	bd80      	pop	{r7, pc}

0800acb4 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800acb4:	b580      	push	{r7, lr}
 800acb6:	b084      	sub	sp, #16
 800acb8:	af00      	add	r7, sp, #0
 800acba:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800acc0:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800acc2:	68f8      	ldr	r0, [r7, #12]
 800acc4:	f7ff ff38 	bl	800ab38 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800acc8:	bf00      	nop
 800acca:	3710      	adds	r7, #16
 800accc:	46bd      	mov	sp, r7
 800acce:	bd80      	pop	{r7, pc}

0800acd0 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800acd0:	b580      	push	{r7, lr}
 800acd2:	b084      	sub	sp, #16
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800acdc:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800acde:	68f8      	ldr	r0, [r7, #12]
 800ace0:	f7ff ff34 	bl	800ab4c <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ace4:	bf00      	nop
 800ace6:	3710      	adds	r7, #16
 800ace8:	46bd      	mov	sp, r7
 800acea:	bd80      	pop	{r7, pc}

0800acec <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800acec:	b580      	push	{r7, lr}
 800acee:	b084      	sub	sp, #16
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800acf8:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	685a      	ldr	r2, [r3, #4]
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	f022 0203 	bic.w	r2, r2, #3
 800ad08:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ad0e:	f043 0210 	orr.w	r2, r3, #16
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	2201      	movs	r2, #1
 800ad1a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800ad1e:	68f8      	ldr	r0, [r7, #12]
 800ad20:	f7fa ff68 	bl	8005bf4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ad24:	bf00      	nop
 800ad26:	3710      	adds	r7, #16
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	bd80      	pop	{r7, pc}

0800ad2c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ad2c:	b580      	push	{r7, lr}
 800ad2e:	b084      	sub	sp, #16
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad38:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	2200      	movs	r2, #0
 800ad3e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	2200      	movs	r2, #0
 800ad46:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800ad48:	68f8      	ldr	r0, [r7, #12]
 800ad4a:	f7fa ff53 	bl	8005bf4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ad4e:	bf00      	nop
 800ad50:	3710      	adds	r7, #16
 800ad52:	46bd      	mov	sp, r7
 800ad54:	bd80      	pop	{r7, pc}
	...

0800ad58 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ad58:	b580      	push	{r7, lr}
 800ad5a:	b088      	sub	sp, #32
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	60f8      	str	r0, [r7, #12]
 800ad60:	60b9      	str	r1, [r7, #8]
 800ad62:	603b      	str	r3, [r7, #0]
 800ad64:	4613      	mov	r3, r2
 800ad66:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800ad68:	f7fb fe02 	bl	8006970 <HAL_GetTick>
 800ad6c:	4602      	mov	r2, r0
 800ad6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad70:	1a9b      	subs	r3, r3, r2
 800ad72:	683a      	ldr	r2, [r7, #0]
 800ad74:	4413      	add	r3, r2
 800ad76:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800ad78:	f7fb fdfa 	bl	8006970 <HAL_GetTick>
 800ad7c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800ad7e:	4b39      	ldr	r3, [pc, #228]	@ (800ae64 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	015b      	lsls	r3, r3, #5
 800ad84:	0d1b      	lsrs	r3, r3, #20
 800ad86:	69fa      	ldr	r2, [r7, #28]
 800ad88:	fb02 f303 	mul.w	r3, r2, r3
 800ad8c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ad8e:	e054      	b.n	800ae3a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800ad90:	683b      	ldr	r3, [r7, #0]
 800ad92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad96:	d050      	beq.n	800ae3a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800ad98:	f7fb fdea 	bl	8006970 <HAL_GetTick>
 800ad9c:	4602      	mov	r2, r0
 800ad9e:	69bb      	ldr	r3, [r7, #24]
 800ada0:	1ad3      	subs	r3, r2, r3
 800ada2:	69fa      	ldr	r2, [r7, #28]
 800ada4:	429a      	cmp	r2, r3
 800ada6:	d902      	bls.n	800adae <SPI_WaitFlagStateUntilTimeout+0x56>
 800ada8:	69fb      	ldr	r3, [r7, #28]
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d13d      	bne.n	800ae2a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	685a      	ldr	r2, [r3, #4]
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800adbc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	685b      	ldr	r3, [r3, #4]
 800adc2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800adc6:	d111      	bne.n	800adec <SPI_WaitFlagStateUntilTimeout+0x94>
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	689b      	ldr	r3, [r3, #8]
 800adcc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800add0:	d004      	beq.n	800addc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	689b      	ldr	r3, [r3, #8]
 800add6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800adda:	d107      	bne.n	800adec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	681a      	ldr	r2, [r3, #0]
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800adea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800adf0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800adf4:	d10f      	bne.n	800ae16 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	681a      	ldr	r2, [r3, #0]
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800ae04:	601a      	str	r2, [r3, #0]
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	681a      	ldr	r2, [r3, #0]
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800ae14:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	2201      	movs	r2, #1
 800ae1a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	2200      	movs	r2, #0
 800ae22:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800ae26:	2303      	movs	r3, #3
 800ae28:	e017      	b.n	800ae5a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800ae2a:	697b      	ldr	r3, [r7, #20]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d101      	bne.n	800ae34 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800ae30:	2300      	movs	r3, #0
 800ae32:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800ae34:	697b      	ldr	r3, [r7, #20]
 800ae36:	3b01      	subs	r3, #1
 800ae38:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	689a      	ldr	r2, [r3, #8]
 800ae40:	68bb      	ldr	r3, [r7, #8]
 800ae42:	4013      	ands	r3, r2
 800ae44:	68ba      	ldr	r2, [r7, #8]
 800ae46:	429a      	cmp	r2, r3
 800ae48:	bf0c      	ite	eq
 800ae4a:	2301      	moveq	r3, #1
 800ae4c:	2300      	movne	r3, #0
 800ae4e:	b2db      	uxtb	r3, r3
 800ae50:	461a      	mov	r2, r3
 800ae52:	79fb      	ldrb	r3, [r7, #7]
 800ae54:	429a      	cmp	r2, r3
 800ae56:	d19b      	bne.n	800ad90 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800ae58:	2300      	movs	r3, #0
}
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	3720      	adds	r7, #32
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	bd80      	pop	{r7, pc}
 800ae62:	bf00      	nop
 800ae64:	20000014 	.word	0x20000014

0800ae68 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ae68:	b580      	push	{r7, lr}
 800ae6a:	b08a      	sub	sp, #40	@ 0x28
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	60f8      	str	r0, [r7, #12]
 800ae70:	60b9      	str	r1, [r7, #8]
 800ae72:	607a      	str	r2, [r7, #4]
 800ae74:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800ae76:	2300      	movs	r3, #0
 800ae78:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800ae7a:	f7fb fd79 	bl	8006970 <HAL_GetTick>
 800ae7e:	4602      	mov	r2, r0
 800ae80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae82:	1a9b      	subs	r3, r3, r2
 800ae84:	683a      	ldr	r2, [r7, #0]
 800ae86:	4413      	add	r3, r2
 800ae88:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800ae8a:	f7fb fd71 	bl	8006970 <HAL_GetTick>
 800ae8e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	330c      	adds	r3, #12
 800ae96:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800ae98:	4b3d      	ldr	r3, [pc, #244]	@ (800af90 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800ae9a:	681a      	ldr	r2, [r3, #0]
 800ae9c:	4613      	mov	r3, r2
 800ae9e:	009b      	lsls	r3, r3, #2
 800aea0:	4413      	add	r3, r2
 800aea2:	00da      	lsls	r2, r3, #3
 800aea4:	1ad3      	subs	r3, r2, r3
 800aea6:	0d1b      	lsrs	r3, r3, #20
 800aea8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aeaa:	fb02 f303 	mul.w	r3, r2, r3
 800aeae:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800aeb0:	e060      	b.n	800af74 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800aeb2:	68bb      	ldr	r3, [r7, #8]
 800aeb4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800aeb8:	d107      	bne.n	800aeca <SPI_WaitFifoStateUntilTimeout+0x62>
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d104      	bne.n	800aeca <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800aec0:	69fb      	ldr	r3, [r7, #28]
 800aec2:	781b      	ldrb	r3, [r3, #0]
 800aec4:	b2db      	uxtb	r3, r3
 800aec6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800aec8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800aeca:	683b      	ldr	r3, [r7, #0]
 800aecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aed0:	d050      	beq.n	800af74 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800aed2:	f7fb fd4d 	bl	8006970 <HAL_GetTick>
 800aed6:	4602      	mov	r2, r0
 800aed8:	6a3b      	ldr	r3, [r7, #32]
 800aeda:	1ad3      	subs	r3, r2, r3
 800aedc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aede:	429a      	cmp	r2, r3
 800aee0:	d902      	bls.n	800aee8 <SPI_WaitFifoStateUntilTimeout+0x80>
 800aee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d13d      	bne.n	800af64 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	685a      	ldr	r2, [r3, #4]
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800aef6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	685b      	ldr	r3, [r3, #4]
 800aefc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800af00:	d111      	bne.n	800af26 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	689b      	ldr	r3, [r3, #8]
 800af06:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800af0a:	d004      	beq.n	800af16 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	689b      	ldr	r3, [r3, #8]
 800af10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800af14:	d107      	bne.n	800af26 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	681a      	ldr	r2, [r3, #0]
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800af24:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af2a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800af2e:	d10f      	bne.n	800af50 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	681a      	ldr	r2, [r3, #0]
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800af3e:	601a      	str	r2, [r3, #0]
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	681a      	ldr	r2, [r3, #0]
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800af4e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	2201      	movs	r2, #1
 800af54:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	2200      	movs	r2, #0
 800af5c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800af60:	2303      	movs	r3, #3
 800af62:	e010      	b.n	800af86 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800af64:	69bb      	ldr	r3, [r7, #24]
 800af66:	2b00      	cmp	r3, #0
 800af68:	d101      	bne.n	800af6e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800af6a:	2300      	movs	r3, #0
 800af6c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800af6e:	69bb      	ldr	r3, [r7, #24]
 800af70:	3b01      	subs	r3, #1
 800af72:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	689a      	ldr	r2, [r3, #8]
 800af7a:	68bb      	ldr	r3, [r7, #8]
 800af7c:	4013      	ands	r3, r2
 800af7e:	687a      	ldr	r2, [r7, #4]
 800af80:	429a      	cmp	r2, r3
 800af82:	d196      	bne.n	800aeb2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800af84:	2300      	movs	r3, #0
}
 800af86:	4618      	mov	r0, r3
 800af88:	3728      	adds	r7, #40	@ 0x28
 800af8a:	46bd      	mov	sp, r7
 800af8c:	bd80      	pop	{r7, pc}
 800af8e:	bf00      	nop
 800af90:	20000014 	.word	0x20000014

0800af94 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800af94:	b580      	push	{r7, lr}
 800af96:	b086      	sub	sp, #24
 800af98:	af02      	add	r7, sp, #8
 800af9a:	60f8      	str	r0, [r7, #12]
 800af9c:	60b9      	str	r1, [r7, #8]
 800af9e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	685b      	ldr	r3, [r3, #4]
 800afa4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800afa8:	d111      	bne.n	800afce <SPI_EndRxTransaction+0x3a>
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	689b      	ldr	r3, [r3, #8]
 800afae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800afb2:	d004      	beq.n	800afbe <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	689b      	ldr	r3, [r3, #8]
 800afb8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800afbc:	d107      	bne.n	800afce <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	681a      	ldr	r2, [r3, #0]
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800afcc:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	9300      	str	r3, [sp, #0]
 800afd2:	68bb      	ldr	r3, [r7, #8]
 800afd4:	2200      	movs	r2, #0
 800afd6:	2180      	movs	r1, #128	@ 0x80
 800afd8:	68f8      	ldr	r0, [r7, #12]
 800afda:	f7ff febd 	bl	800ad58 <SPI_WaitFlagStateUntilTimeout>
 800afde:	4603      	mov	r3, r0
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d007      	beq.n	800aff4 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800afe8:	f043 0220 	orr.w	r2, r3, #32
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800aff0:	2303      	movs	r3, #3
 800aff2:	e023      	b.n	800b03c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	685b      	ldr	r3, [r3, #4]
 800aff8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800affc:	d11d      	bne.n	800b03a <SPI_EndRxTransaction+0xa6>
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	689b      	ldr	r3, [r3, #8]
 800b002:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b006:	d004      	beq.n	800b012 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	689b      	ldr	r3, [r3, #8]
 800b00c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b010:	d113      	bne.n	800b03a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	9300      	str	r3, [sp, #0]
 800b016:	68bb      	ldr	r3, [r7, #8]
 800b018:	2200      	movs	r2, #0
 800b01a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800b01e:	68f8      	ldr	r0, [r7, #12]
 800b020:	f7ff ff22 	bl	800ae68 <SPI_WaitFifoStateUntilTimeout>
 800b024:	4603      	mov	r3, r0
 800b026:	2b00      	cmp	r3, #0
 800b028:	d007      	beq.n	800b03a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b02e:	f043 0220 	orr.w	r2, r3, #32
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800b036:	2303      	movs	r3, #3
 800b038:	e000      	b.n	800b03c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800b03a:	2300      	movs	r3, #0
}
 800b03c:	4618      	mov	r0, r3
 800b03e:	3710      	adds	r7, #16
 800b040:	46bd      	mov	sp, r7
 800b042:	bd80      	pop	{r7, pc}

0800b044 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800b044:	b580      	push	{r7, lr}
 800b046:	b086      	sub	sp, #24
 800b048:	af02      	add	r7, sp, #8
 800b04a:	60f8      	str	r0, [r7, #12]
 800b04c:	60b9      	str	r1, [r7, #8]
 800b04e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	9300      	str	r3, [sp, #0]
 800b054:	68bb      	ldr	r3, [r7, #8]
 800b056:	2200      	movs	r2, #0
 800b058:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800b05c:	68f8      	ldr	r0, [r7, #12]
 800b05e:	f7ff ff03 	bl	800ae68 <SPI_WaitFifoStateUntilTimeout>
 800b062:	4603      	mov	r3, r0
 800b064:	2b00      	cmp	r3, #0
 800b066:	d007      	beq.n	800b078 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b06c:	f043 0220 	orr.w	r2, r3, #32
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800b074:	2303      	movs	r3, #3
 800b076:	e027      	b.n	800b0c8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	9300      	str	r3, [sp, #0]
 800b07c:	68bb      	ldr	r3, [r7, #8]
 800b07e:	2200      	movs	r2, #0
 800b080:	2180      	movs	r1, #128	@ 0x80
 800b082:	68f8      	ldr	r0, [r7, #12]
 800b084:	f7ff fe68 	bl	800ad58 <SPI_WaitFlagStateUntilTimeout>
 800b088:	4603      	mov	r3, r0
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d007      	beq.n	800b09e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b092:	f043 0220 	orr.w	r2, r3, #32
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800b09a:	2303      	movs	r3, #3
 800b09c:	e014      	b.n	800b0c8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	9300      	str	r3, [sp, #0]
 800b0a2:	68bb      	ldr	r3, [r7, #8]
 800b0a4:	2200      	movs	r2, #0
 800b0a6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800b0aa:	68f8      	ldr	r0, [r7, #12]
 800b0ac:	f7ff fedc 	bl	800ae68 <SPI_WaitFifoStateUntilTimeout>
 800b0b0:	4603      	mov	r3, r0
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d007      	beq.n	800b0c6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b0ba:	f043 0220 	orr.w	r2, r3, #32
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800b0c2:	2303      	movs	r3, #3
 800b0c4:	e000      	b.n	800b0c8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800b0c6:	2300      	movs	r3, #0
}
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	3710      	adds	r7, #16
 800b0cc:	46bd      	mov	sp, r7
 800b0ce:	bd80      	pop	{r7, pc}

0800b0d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b0d0:	b580      	push	{r7, lr}
 800b0d2:	b082      	sub	sp, #8
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d101      	bne.n	800b0e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b0de:	2301      	movs	r3, #1
 800b0e0:	e0e6      	b.n	800b2b0 <HAL_TIM_Base_Init+0x1e0>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	4a74      	ldr	r2, [pc, #464]	@ (800b2b8 <HAL_TIM_Base_Init+0x1e8>)
 800b0e8:	4293      	cmp	r3, r2
 800b0ea:	d036      	beq.n	800b15a <HAL_TIM_Base_Init+0x8a>
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b0f4:	d031      	beq.n	800b15a <HAL_TIM_Base_Init+0x8a>
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	4a70      	ldr	r2, [pc, #448]	@ (800b2bc <HAL_TIM_Base_Init+0x1ec>)
 800b0fc:	4293      	cmp	r3, r2
 800b0fe:	d02c      	beq.n	800b15a <HAL_TIM_Base_Init+0x8a>
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	4a6e      	ldr	r2, [pc, #440]	@ (800b2c0 <HAL_TIM_Base_Init+0x1f0>)
 800b106:	4293      	cmp	r3, r2
 800b108:	d027      	beq.n	800b15a <HAL_TIM_Base_Init+0x8a>
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	4a6d      	ldr	r2, [pc, #436]	@ (800b2c4 <HAL_TIM_Base_Init+0x1f4>)
 800b110:	4293      	cmp	r3, r2
 800b112:	d022      	beq.n	800b15a <HAL_TIM_Base_Init+0x8a>
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	4a6b      	ldr	r2, [pc, #428]	@ (800b2c8 <HAL_TIM_Base_Init+0x1f8>)
 800b11a:	4293      	cmp	r3, r2
 800b11c:	d01d      	beq.n	800b15a <HAL_TIM_Base_Init+0x8a>
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	4a6a      	ldr	r2, [pc, #424]	@ (800b2cc <HAL_TIM_Base_Init+0x1fc>)
 800b124:	4293      	cmp	r3, r2
 800b126:	d018      	beq.n	800b15a <HAL_TIM_Base_Init+0x8a>
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	4a68      	ldr	r2, [pc, #416]	@ (800b2d0 <HAL_TIM_Base_Init+0x200>)
 800b12e:	4293      	cmp	r3, r2
 800b130:	d013      	beq.n	800b15a <HAL_TIM_Base_Init+0x8a>
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	4a67      	ldr	r2, [pc, #412]	@ (800b2d4 <HAL_TIM_Base_Init+0x204>)
 800b138:	4293      	cmp	r3, r2
 800b13a:	d00e      	beq.n	800b15a <HAL_TIM_Base_Init+0x8a>
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	4a65      	ldr	r2, [pc, #404]	@ (800b2d8 <HAL_TIM_Base_Init+0x208>)
 800b142:	4293      	cmp	r3, r2
 800b144:	d009      	beq.n	800b15a <HAL_TIM_Base_Init+0x8a>
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	4a64      	ldr	r2, [pc, #400]	@ (800b2dc <HAL_TIM_Base_Init+0x20c>)
 800b14c:	4293      	cmp	r3, r2
 800b14e:	d004      	beq.n	800b15a <HAL_TIM_Base_Init+0x8a>
 800b150:	f44f 718b 	mov.w	r1, #278	@ 0x116
 800b154:	4862      	ldr	r0, [pc, #392]	@ (800b2e0 <HAL_TIM_Base_Init+0x210>)
 800b156:	f7fa fde1 	bl	8005d1c <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	689b      	ldr	r3, [r3, #8]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d014      	beq.n	800b18c <HAL_TIM_Base_Init+0xbc>
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	689b      	ldr	r3, [r3, #8]
 800b166:	2b10      	cmp	r3, #16
 800b168:	d010      	beq.n	800b18c <HAL_TIM_Base_Init+0xbc>
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	689b      	ldr	r3, [r3, #8]
 800b16e:	2b20      	cmp	r3, #32
 800b170:	d00c      	beq.n	800b18c <HAL_TIM_Base_Init+0xbc>
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	689b      	ldr	r3, [r3, #8]
 800b176:	2b40      	cmp	r3, #64	@ 0x40
 800b178:	d008      	beq.n	800b18c <HAL_TIM_Base_Init+0xbc>
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	689b      	ldr	r3, [r3, #8]
 800b17e:	2b60      	cmp	r3, #96	@ 0x60
 800b180:	d004      	beq.n	800b18c <HAL_TIM_Base_Init+0xbc>
 800b182:	f240 1117 	movw	r1, #279	@ 0x117
 800b186:	4856      	ldr	r0, [pc, #344]	@ (800b2e0 <HAL_TIM_Base_Init+0x210>)
 800b188:	f7fa fdc8 	bl	8005d1c <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	691b      	ldr	r3, [r3, #16]
 800b190:	2b00      	cmp	r3, #0
 800b192:	d00e      	beq.n	800b1b2 <HAL_TIM_Base_Init+0xe2>
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	691b      	ldr	r3, [r3, #16]
 800b198:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b19c:	d009      	beq.n	800b1b2 <HAL_TIM_Base_Init+0xe2>
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	691b      	ldr	r3, [r3, #16]
 800b1a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b1a6:	d004      	beq.n	800b1b2 <HAL_TIM_Base_Init+0xe2>
 800b1a8:	f44f 718c 	mov.w	r1, #280	@ 0x118
 800b1ac:	484c      	ldr	r0, [pc, #304]	@ (800b2e0 <HAL_TIM_Base_Init+0x210>)
 800b1ae:	f7fa fdb5 	bl	8005d1c <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b1ba:	d004      	beq.n	800b1c6 <HAL_TIM_Base_Init+0xf6>
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	4a40      	ldr	r2, [pc, #256]	@ (800b2c4 <HAL_TIM_Base_Init+0x1f4>)
 800b1c2:	4293      	cmp	r3, r2
 800b1c4:	d107      	bne.n	800b1d6 <HAL_TIM_Base_Init+0x106>
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	68db      	ldr	r3, [r3, #12]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	bf14      	ite	ne
 800b1ce:	2301      	movne	r3, #1
 800b1d0:	2300      	moveq	r3, #0
 800b1d2:	b2db      	uxtb	r3, r3
 800b1d4:	e00e      	b.n	800b1f4 <HAL_TIM_Base_Init+0x124>
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	68db      	ldr	r3, [r3, #12]
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d006      	beq.n	800b1ec <HAL_TIM_Base_Init+0x11c>
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	68db      	ldr	r3, [r3, #12]
 800b1e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b1e6:	d201      	bcs.n	800b1ec <HAL_TIM_Base_Init+0x11c>
 800b1e8:	2301      	movs	r3, #1
 800b1ea:	e000      	b.n	800b1ee <HAL_TIM_Base_Init+0x11e>
 800b1ec:	2300      	movs	r3, #0
 800b1ee:	f003 0301 	and.w	r3, r3, #1
 800b1f2:	b2db      	uxtb	r3, r3
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d104      	bne.n	800b202 <HAL_TIM_Base_Init+0x132>
 800b1f8:	f240 1119 	movw	r1, #281	@ 0x119
 800b1fc:	4838      	ldr	r0, [pc, #224]	@ (800b2e0 <HAL_TIM_Base_Init+0x210>)
 800b1fe:	f7fa fd8d 	bl	8005d1c <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	699b      	ldr	r3, [r3, #24]
 800b206:	2b00      	cmp	r3, #0
 800b208:	d008      	beq.n	800b21c <HAL_TIM_Base_Init+0x14c>
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	699b      	ldr	r3, [r3, #24]
 800b20e:	2b80      	cmp	r3, #128	@ 0x80
 800b210:	d004      	beq.n	800b21c <HAL_TIM_Base_Init+0x14c>
 800b212:	f44f 718d 	mov.w	r1, #282	@ 0x11a
 800b216:	4832      	ldr	r0, [pc, #200]	@ (800b2e0 <HAL_TIM_Base_Init+0x210>)
 800b218:	f7fa fd80 	bl	8005d1c <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b222:	b2db      	uxtb	r3, r3
 800b224:	2b00      	cmp	r3, #0
 800b226:	d106      	bne.n	800b236 <HAL_TIM_Base_Init+0x166>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	2200      	movs	r2, #0
 800b22c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b230:	6878      	ldr	r0, [r7, #4]
 800b232:	f7fb f9d1 	bl	80065d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	2202      	movs	r2, #2
 800b23a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	681a      	ldr	r2, [r3, #0]
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	3304      	adds	r3, #4
 800b246:	4619      	mov	r1, r3
 800b248:	4610      	mov	r0, r2
 800b24a:	f001 ff43 	bl	800d0d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	2201      	movs	r2, #1
 800b252:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	2201      	movs	r2, #1
 800b25a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	2201      	movs	r2, #1
 800b262:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	2201      	movs	r2, #1
 800b26a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	2201      	movs	r2, #1
 800b272:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	2201      	movs	r2, #1
 800b27a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	2201      	movs	r2, #1
 800b282:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	2201      	movs	r2, #1
 800b28a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	2201      	movs	r2, #1
 800b292:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	2201      	movs	r2, #1
 800b29a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	2201      	movs	r2, #1
 800b2a2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	2201      	movs	r2, #1
 800b2aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b2ae:	2300      	movs	r3, #0
}
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	3708      	adds	r7, #8
 800b2b4:	46bd      	mov	sp, r7
 800b2b6:	bd80      	pop	{r7, pc}
 800b2b8:	40012c00 	.word	0x40012c00
 800b2bc:	40000400 	.word	0x40000400
 800b2c0:	40000800 	.word	0x40000800
 800b2c4:	40000c00 	.word	0x40000c00
 800b2c8:	40001000 	.word	0x40001000
 800b2cc:	40001400 	.word	0x40001400
 800b2d0:	40013400 	.word	0x40013400
 800b2d4:	40014000 	.word	0x40014000
 800b2d8:	40014400 	.word	0x40014400
 800b2dc:	40014800 	.word	0x40014800
 800b2e0:	08010bb8 	.word	0x08010bb8

0800b2e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b2e4:	b580      	push	{r7, lr}
 800b2e6:	b084      	sub	sp, #16
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	4a4a      	ldr	r2, [pc, #296]	@ (800b41c <HAL_TIM_Base_Start_IT+0x138>)
 800b2f2:	4293      	cmp	r3, r2
 800b2f4:	d036      	beq.n	800b364 <HAL_TIM_Base_Start_IT+0x80>
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b2fe:	d031      	beq.n	800b364 <HAL_TIM_Base_Start_IT+0x80>
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	4a46      	ldr	r2, [pc, #280]	@ (800b420 <HAL_TIM_Base_Start_IT+0x13c>)
 800b306:	4293      	cmp	r3, r2
 800b308:	d02c      	beq.n	800b364 <HAL_TIM_Base_Start_IT+0x80>
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	4a45      	ldr	r2, [pc, #276]	@ (800b424 <HAL_TIM_Base_Start_IT+0x140>)
 800b310:	4293      	cmp	r3, r2
 800b312:	d027      	beq.n	800b364 <HAL_TIM_Base_Start_IT+0x80>
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	4a43      	ldr	r2, [pc, #268]	@ (800b428 <HAL_TIM_Base_Start_IT+0x144>)
 800b31a:	4293      	cmp	r3, r2
 800b31c:	d022      	beq.n	800b364 <HAL_TIM_Base_Start_IT+0x80>
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	4a42      	ldr	r2, [pc, #264]	@ (800b42c <HAL_TIM_Base_Start_IT+0x148>)
 800b324:	4293      	cmp	r3, r2
 800b326:	d01d      	beq.n	800b364 <HAL_TIM_Base_Start_IT+0x80>
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	4a40      	ldr	r2, [pc, #256]	@ (800b430 <HAL_TIM_Base_Start_IT+0x14c>)
 800b32e:	4293      	cmp	r3, r2
 800b330:	d018      	beq.n	800b364 <HAL_TIM_Base_Start_IT+0x80>
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	4a3f      	ldr	r2, [pc, #252]	@ (800b434 <HAL_TIM_Base_Start_IT+0x150>)
 800b338:	4293      	cmp	r3, r2
 800b33a:	d013      	beq.n	800b364 <HAL_TIM_Base_Start_IT+0x80>
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	4a3d      	ldr	r2, [pc, #244]	@ (800b438 <HAL_TIM_Base_Start_IT+0x154>)
 800b342:	4293      	cmp	r3, r2
 800b344:	d00e      	beq.n	800b364 <HAL_TIM_Base_Start_IT+0x80>
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	4a3c      	ldr	r2, [pc, #240]	@ (800b43c <HAL_TIM_Base_Start_IT+0x158>)
 800b34c:	4293      	cmp	r3, r2
 800b34e:	d009      	beq.n	800b364 <HAL_TIM_Base_Start_IT+0x80>
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	4a3a      	ldr	r2, [pc, #232]	@ (800b440 <HAL_TIM_Base_Start_IT+0x15c>)
 800b356:	4293      	cmp	r3, r2
 800b358:	d004      	beq.n	800b364 <HAL_TIM_Base_Start_IT+0x80>
 800b35a:	f240 11d3 	movw	r1, #467	@ 0x1d3
 800b35e:	4839      	ldr	r0, [pc, #228]	@ (800b444 <HAL_TIM_Base_Start_IT+0x160>)
 800b360:	f7fa fcdc 	bl	8005d1c <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b36a:	b2db      	uxtb	r3, r3
 800b36c:	2b01      	cmp	r3, #1
 800b36e:	d001      	beq.n	800b374 <HAL_TIM_Base_Start_IT+0x90>
  {
    return HAL_ERROR;
 800b370:	2301      	movs	r3, #1
 800b372:	e04f      	b.n	800b414 <HAL_TIM_Base_Start_IT+0x130>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	2202      	movs	r2, #2
 800b378:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	68da      	ldr	r2, [r3, #12]
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	f042 0201 	orr.w	r2, r2, #1
 800b38a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	4a22      	ldr	r2, [pc, #136]	@ (800b41c <HAL_TIM_Base_Start_IT+0x138>)
 800b392:	4293      	cmp	r3, r2
 800b394:	d01d      	beq.n	800b3d2 <HAL_TIM_Base_Start_IT+0xee>
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b39e:	d018      	beq.n	800b3d2 <HAL_TIM_Base_Start_IT+0xee>
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	4a1e      	ldr	r2, [pc, #120]	@ (800b420 <HAL_TIM_Base_Start_IT+0x13c>)
 800b3a6:	4293      	cmp	r3, r2
 800b3a8:	d013      	beq.n	800b3d2 <HAL_TIM_Base_Start_IT+0xee>
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	4a1d      	ldr	r2, [pc, #116]	@ (800b424 <HAL_TIM_Base_Start_IT+0x140>)
 800b3b0:	4293      	cmp	r3, r2
 800b3b2:	d00e      	beq.n	800b3d2 <HAL_TIM_Base_Start_IT+0xee>
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	4a1b      	ldr	r2, [pc, #108]	@ (800b428 <HAL_TIM_Base_Start_IT+0x144>)
 800b3ba:	4293      	cmp	r3, r2
 800b3bc:	d009      	beq.n	800b3d2 <HAL_TIM_Base_Start_IT+0xee>
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	4a1c      	ldr	r2, [pc, #112]	@ (800b434 <HAL_TIM_Base_Start_IT+0x150>)
 800b3c4:	4293      	cmp	r3, r2
 800b3c6:	d004      	beq.n	800b3d2 <HAL_TIM_Base_Start_IT+0xee>
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	4a1a      	ldr	r2, [pc, #104]	@ (800b438 <HAL_TIM_Base_Start_IT+0x154>)
 800b3ce:	4293      	cmp	r3, r2
 800b3d0:	d115      	bne.n	800b3fe <HAL_TIM_Base_Start_IT+0x11a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	689a      	ldr	r2, [r3, #8]
 800b3d8:	4b1b      	ldr	r3, [pc, #108]	@ (800b448 <HAL_TIM_Base_Start_IT+0x164>)
 800b3da:	4013      	ands	r3, r2
 800b3dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	2b06      	cmp	r3, #6
 800b3e2:	d015      	beq.n	800b410 <HAL_TIM_Base_Start_IT+0x12c>
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b3ea:	d011      	beq.n	800b410 <HAL_TIM_Base_Start_IT+0x12c>
    {
      __HAL_TIM_ENABLE(htim);
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	681a      	ldr	r2, [r3, #0]
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	f042 0201 	orr.w	r2, r2, #1
 800b3fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b3fc:	e008      	b.n	800b410 <HAL_TIM_Base_Start_IT+0x12c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	681a      	ldr	r2, [r3, #0]
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	f042 0201 	orr.w	r2, r2, #1
 800b40c:	601a      	str	r2, [r3, #0]
 800b40e:	e000      	b.n	800b412 <HAL_TIM_Base_Start_IT+0x12e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b410:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b412:	2300      	movs	r3, #0
}
 800b414:	4618      	mov	r0, r3
 800b416:	3710      	adds	r7, #16
 800b418:	46bd      	mov	sp, r7
 800b41a:	bd80      	pop	{r7, pc}
 800b41c:	40012c00 	.word	0x40012c00
 800b420:	40000400 	.word	0x40000400
 800b424:	40000800 	.word	0x40000800
 800b428:	40000c00 	.word	0x40000c00
 800b42c:	40001000 	.word	0x40001000
 800b430:	40001400 	.word	0x40001400
 800b434:	40013400 	.word	0x40013400
 800b438:	40014000 	.word	0x40014000
 800b43c:	40014400 	.word	0x40014400
 800b440:	40014800 	.word	0x40014800
 800b444:	08010bb8 	.word	0x08010bb8
 800b448:	00010007 	.word	0x00010007

0800b44c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800b44c:	b580      	push	{r7, lr}
 800b44e:	b082      	sub	sp, #8
 800b450:	af00      	add	r7, sp, #0
 800b452:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	4a31      	ldr	r2, [pc, #196]	@ (800b520 <HAL_TIM_Base_Stop_IT+0xd4>)
 800b45a:	4293      	cmp	r3, r2
 800b45c:	d036      	beq.n	800b4cc <HAL_TIM_Base_Stop_IT+0x80>
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b466:	d031      	beq.n	800b4cc <HAL_TIM_Base_Stop_IT+0x80>
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	4a2d      	ldr	r2, [pc, #180]	@ (800b524 <HAL_TIM_Base_Stop_IT+0xd8>)
 800b46e:	4293      	cmp	r3, r2
 800b470:	d02c      	beq.n	800b4cc <HAL_TIM_Base_Stop_IT+0x80>
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	4a2c      	ldr	r2, [pc, #176]	@ (800b528 <HAL_TIM_Base_Stop_IT+0xdc>)
 800b478:	4293      	cmp	r3, r2
 800b47a:	d027      	beq.n	800b4cc <HAL_TIM_Base_Stop_IT+0x80>
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	4a2a      	ldr	r2, [pc, #168]	@ (800b52c <HAL_TIM_Base_Stop_IT+0xe0>)
 800b482:	4293      	cmp	r3, r2
 800b484:	d022      	beq.n	800b4cc <HAL_TIM_Base_Stop_IT+0x80>
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	4a29      	ldr	r2, [pc, #164]	@ (800b530 <HAL_TIM_Base_Stop_IT+0xe4>)
 800b48c:	4293      	cmp	r3, r2
 800b48e:	d01d      	beq.n	800b4cc <HAL_TIM_Base_Stop_IT+0x80>
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	4a27      	ldr	r2, [pc, #156]	@ (800b534 <HAL_TIM_Base_Stop_IT+0xe8>)
 800b496:	4293      	cmp	r3, r2
 800b498:	d018      	beq.n	800b4cc <HAL_TIM_Base_Stop_IT+0x80>
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	4a26      	ldr	r2, [pc, #152]	@ (800b538 <HAL_TIM_Base_Stop_IT+0xec>)
 800b4a0:	4293      	cmp	r3, r2
 800b4a2:	d013      	beq.n	800b4cc <HAL_TIM_Base_Stop_IT+0x80>
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	4a24      	ldr	r2, [pc, #144]	@ (800b53c <HAL_TIM_Base_Stop_IT+0xf0>)
 800b4aa:	4293      	cmp	r3, r2
 800b4ac:	d00e      	beq.n	800b4cc <HAL_TIM_Base_Stop_IT+0x80>
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	4a23      	ldr	r2, [pc, #140]	@ (800b540 <HAL_TIM_Base_Stop_IT+0xf4>)
 800b4b4:	4293      	cmp	r3, r2
 800b4b6:	d009      	beq.n	800b4cc <HAL_TIM_Base_Stop_IT+0x80>
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	4a21      	ldr	r2, [pc, #132]	@ (800b544 <HAL_TIM_Base_Stop_IT+0xf8>)
 800b4be:	4293      	cmp	r3, r2
 800b4c0:	d004      	beq.n	800b4cc <HAL_TIM_Base_Stop_IT+0x80>
 800b4c2:	f240 11fb 	movw	r1, #507	@ 0x1fb
 800b4c6:	4820      	ldr	r0, [pc, #128]	@ (800b548 <HAL_TIM_Base_Stop_IT+0xfc>)
 800b4c8:	f7fa fc28 	bl	8005d1c <assert_failed>

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	68da      	ldr	r2, [r3, #12]
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	f022 0201 	bic.w	r2, r2, #1
 800b4da:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	6a1a      	ldr	r2, [r3, #32]
 800b4e2:	f241 1311 	movw	r3, #4369	@ 0x1111
 800b4e6:	4013      	ands	r3, r2
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d10f      	bne.n	800b50c <HAL_TIM_Base_Stop_IT+0xc0>
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	6a1a      	ldr	r2, [r3, #32]
 800b4f2:	f240 4344 	movw	r3, #1092	@ 0x444
 800b4f6:	4013      	ands	r3, r2
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d107      	bne.n	800b50c <HAL_TIM_Base_Stop_IT+0xc0>
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	681a      	ldr	r2, [r3, #0]
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	f022 0201 	bic.w	r2, r2, #1
 800b50a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	2201      	movs	r2, #1
 800b510:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800b514:	2300      	movs	r3, #0
}
 800b516:	4618      	mov	r0, r3
 800b518:	3708      	adds	r7, #8
 800b51a:	46bd      	mov	sp, r7
 800b51c:	bd80      	pop	{r7, pc}
 800b51e:	bf00      	nop
 800b520:	40012c00 	.word	0x40012c00
 800b524:	40000400 	.word	0x40000400
 800b528:	40000800 	.word	0x40000800
 800b52c:	40000c00 	.word	0x40000c00
 800b530:	40001000 	.word	0x40001000
 800b534:	40001400 	.word	0x40001400
 800b538:	40013400 	.word	0x40013400
 800b53c:	40014000 	.word	0x40014000
 800b540:	40014400 	.word	0x40014400
 800b544:	40014800 	.word	0x40014800
 800b548:	08010bb8 	.word	0x08010bb8

0800b54c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b54c:	b580      	push	{r7, lr}
 800b54e:	b082      	sub	sp, #8
 800b550:	af00      	add	r7, sp, #0
 800b552:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	2b00      	cmp	r3, #0
 800b558:	d101      	bne.n	800b55e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b55a:	2301      	movs	r3, #1
 800b55c:	e0e6      	b.n	800b72c <HAL_TIM_PWM_Init+0x1e0>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	4a74      	ldr	r2, [pc, #464]	@ (800b734 <HAL_TIM_PWM_Init+0x1e8>)
 800b564:	4293      	cmp	r3, r2
 800b566:	d036      	beq.n	800b5d6 <HAL_TIM_PWM_Init+0x8a>
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b570:	d031      	beq.n	800b5d6 <HAL_TIM_PWM_Init+0x8a>
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	4a70      	ldr	r2, [pc, #448]	@ (800b738 <HAL_TIM_PWM_Init+0x1ec>)
 800b578:	4293      	cmp	r3, r2
 800b57a:	d02c      	beq.n	800b5d6 <HAL_TIM_PWM_Init+0x8a>
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	4a6e      	ldr	r2, [pc, #440]	@ (800b73c <HAL_TIM_PWM_Init+0x1f0>)
 800b582:	4293      	cmp	r3, r2
 800b584:	d027      	beq.n	800b5d6 <HAL_TIM_PWM_Init+0x8a>
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	4a6d      	ldr	r2, [pc, #436]	@ (800b740 <HAL_TIM_PWM_Init+0x1f4>)
 800b58c:	4293      	cmp	r3, r2
 800b58e:	d022      	beq.n	800b5d6 <HAL_TIM_PWM_Init+0x8a>
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	4a6b      	ldr	r2, [pc, #428]	@ (800b744 <HAL_TIM_PWM_Init+0x1f8>)
 800b596:	4293      	cmp	r3, r2
 800b598:	d01d      	beq.n	800b5d6 <HAL_TIM_PWM_Init+0x8a>
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	4a6a      	ldr	r2, [pc, #424]	@ (800b748 <HAL_TIM_PWM_Init+0x1fc>)
 800b5a0:	4293      	cmp	r3, r2
 800b5a2:	d018      	beq.n	800b5d6 <HAL_TIM_PWM_Init+0x8a>
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	4a68      	ldr	r2, [pc, #416]	@ (800b74c <HAL_TIM_PWM_Init+0x200>)
 800b5aa:	4293      	cmp	r3, r2
 800b5ac:	d013      	beq.n	800b5d6 <HAL_TIM_PWM_Init+0x8a>
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	4a67      	ldr	r2, [pc, #412]	@ (800b750 <HAL_TIM_PWM_Init+0x204>)
 800b5b4:	4293      	cmp	r3, r2
 800b5b6:	d00e      	beq.n	800b5d6 <HAL_TIM_PWM_Init+0x8a>
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	4a65      	ldr	r2, [pc, #404]	@ (800b754 <HAL_TIM_PWM_Init+0x208>)
 800b5be:	4293      	cmp	r3, r2
 800b5c0:	d009      	beq.n	800b5d6 <HAL_TIM_PWM_Init+0x8a>
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	4a64      	ldr	r2, [pc, #400]	@ (800b758 <HAL_TIM_PWM_Init+0x20c>)
 800b5c8:	4293      	cmp	r3, r2
 800b5ca:	d004      	beq.n	800b5d6 <HAL_TIM_PWM_Init+0x8a>
 800b5cc:	f240 5133 	movw	r1, #1331	@ 0x533
 800b5d0:	4862      	ldr	r0, [pc, #392]	@ (800b75c <HAL_TIM_PWM_Init+0x210>)
 800b5d2:	f7fa fba3 	bl	8005d1c <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	689b      	ldr	r3, [r3, #8]
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d014      	beq.n	800b608 <HAL_TIM_PWM_Init+0xbc>
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	689b      	ldr	r3, [r3, #8]
 800b5e2:	2b10      	cmp	r3, #16
 800b5e4:	d010      	beq.n	800b608 <HAL_TIM_PWM_Init+0xbc>
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	689b      	ldr	r3, [r3, #8]
 800b5ea:	2b20      	cmp	r3, #32
 800b5ec:	d00c      	beq.n	800b608 <HAL_TIM_PWM_Init+0xbc>
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	689b      	ldr	r3, [r3, #8]
 800b5f2:	2b40      	cmp	r3, #64	@ 0x40
 800b5f4:	d008      	beq.n	800b608 <HAL_TIM_PWM_Init+0xbc>
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	689b      	ldr	r3, [r3, #8]
 800b5fa:	2b60      	cmp	r3, #96	@ 0x60
 800b5fc:	d004      	beq.n	800b608 <HAL_TIM_PWM_Init+0xbc>
 800b5fe:	f240 5134 	movw	r1, #1332	@ 0x534
 800b602:	4856      	ldr	r0, [pc, #344]	@ (800b75c <HAL_TIM_PWM_Init+0x210>)
 800b604:	f7fa fb8a 	bl	8005d1c <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	691b      	ldr	r3, [r3, #16]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d00e      	beq.n	800b62e <HAL_TIM_PWM_Init+0xe2>
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	691b      	ldr	r3, [r3, #16]
 800b614:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b618:	d009      	beq.n	800b62e <HAL_TIM_PWM_Init+0xe2>
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	691b      	ldr	r3, [r3, #16]
 800b61e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b622:	d004      	beq.n	800b62e <HAL_TIM_PWM_Init+0xe2>
 800b624:	f240 5135 	movw	r1, #1333	@ 0x535
 800b628:	484c      	ldr	r0, [pc, #304]	@ (800b75c <HAL_TIM_PWM_Init+0x210>)
 800b62a:	f7fa fb77 	bl	8005d1c <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b636:	d004      	beq.n	800b642 <HAL_TIM_PWM_Init+0xf6>
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	4a40      	ldr	r2, [pc, #256]	@ (800b740 <HAL_TIM_PWM_Init+0x1f4>)
 800b63e:	4293      	cmp	r3, r2
 800b640:	d107      	bne.n	800b652 <HAL_TIM_PWM_Init+0x106>
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	68db      	ldr	r3, [r3, #12]
 800b646:	2b00      	cmp	r3, #0
 800b648:	bf14      	ite	ne
 800b64a:	2301      	movne	r3, #1
 800b64c:	2300      	moveq	r3, #0
 800b64e:	b2db      	uxtb	r3, r3
 800b650:	e00e      	b.n	800b670 <HAL_TIM_PWM_Init+0x124>
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	68db      	ldr	r3, [r3, #12]
 800b656:	2b00      	cmp	r3, #0
 800b658:	d006      	beq.n	800b668 <HAL_TIM_PWM_Init+0x11c>
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	68db      	ldr	r3, [r3, #12]
 800b65e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b662:	d201      	bcs.n	800b668 <HAL_TIM_PWM_Init+0x11c>
 800b664:	2301      	movs	r3, #1
 800b666:	e000      	b.n	800b66a <HAL_TIM_PWM_Init+0x11e>
 800b668:	2300      	movs	r3, #0
 800b66a:	f003 0301 	and.w	r3, r3, #1
 800b66e:	b2db      	uxtb	r3, r3
 800b670:	2b00      	cmp	r3, #0
 800b672:	d104      	bne.n	800b67e <HAL_TIM_PWM_Init+0x132>
 800b674:	f240 5136 	movw	r1, #1334	@ 0x536
 800b678:	4838      	ldr	r0, [pc, #224]	@ (800b75c <HAL_TIM_PWM_Init+0x210>)
 800b67a:	f7fa fb4f 	bl	8005d1c <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	699b      	ldr	r3, [r3, #24]
 800b682:	2b00      	cmp	r3, #0
 800b684:	d008      	beq.n	800b698 <HAL_TIM_PWM_Init+0x14c>
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	699b      	ldr	r3, [r3, #24]
 800b68a:	2b80      	cmp	r3, #128	@ 0x80
 800b68c:	d004      	beq.n	800b698 <HAL_TIM_PWM_Init+0x14c>
 800b68e:	f240 5137 	movw	r1, #1335	@ 0x537
 800b692:	4832      	ldr	r0, [pc, #200]	@ (800b75c <HAL_TIM_PWM_Init+0x210>)
 800b694:	f7fa fb42 	bl	8005d1c <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b69e:	b2db      	uxtb	r3, r3
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d106      	bne.n	800b6b2 <HAL_TIM_PWM_Init+0x166>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	2200      	movs	r2, #0
 800b6a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b6ac:	6878      	ldr	r0, [r7, #4]
 800b6ae:	f000 f857 	bl	800b760 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	2202      	movs	r2, #2
 800b6b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	681a      	ldr	r2, [r3, #0]
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	3304      	adds	r3, #4
 800b6c2:	4619      	mov	r1, r3
 800b6c4:	4610      	mov	r0, r2
 800b6c6:	f001 fd05 	bl	800d0d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	2201      	movs	r2, #1
 800b6ce:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	2201      	movs	r2, #1
 800b6d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	2201      	movs	r2, #1
 800b6de:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	2201      	movs	r2, #1
 800b6e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	2201      	movs	r2, #1
 800b6ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	2201      	movs	r2, #1
 800b6f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	2201      	movs	r2, #1
 800b6fe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	2201      	movs	r2, #1
 800b706:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	2201      	movs	r2, #1
 800b70e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	2201      	movs	r2, #1
 800b716:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	2201      	movs	r2, #1
 800b71e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	2201      	movs	r2, #1
 800b726:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b72a:	2300      	movs	r3, #0
}
 800b72c:	4618      	mov	r0, r3
 800b72e:	3708      	adds	r7, #8
 800b730:	46bd      	mov	sp, r7
 800b732:	bd80      	pop	{r7, pc}
 800b734:	40012c00 	.word	0x40012c00
 800b738:	40000400 	.word	0x40000400
 800b73c:	40000800 	.word	0x40000800
 800b740:	40000c00 	.word	0x40000c00
 800b744:	40001000 	.word	0x40001000
 800b748:	40001400 	.word	0x40001400
 800b74c:	40013400 	.word	0x40013400
 800b750:	40014000 	.word	0x40014000
 800b754:	40014400 	.word	0x40014400
 800b758:	40014800 	.word	0x40014800
 800b75c:	08010bb8 	.word	0x08010bb8

0800b760 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800b760:	b480      	push	{r7}
 800b762:	b083      	sub	sp, #12
 800b764:	af00      	add	r7, sp, #0
 800b766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800b768:	bf00      	nop
 800b76a:	370c      	adds	r7, #12
 800b76c:	46bd      	mov	sp, r7
 800b76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b772:	4770      	bx	lr

0800b774 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b774:	b580      	push	{r7, lr}
 800b776:	b084      	sub	sp, #16
 800b778:	af00      	add	r7, sp, #0
 800b77a:	6078      	str	r0, [r7, #4]
 800b77c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	4a85      	ldr	r2, [pc, #532]	@ (800b998 <HAL_TIM_PWM_Start+0x224>)
 800b784:	4293      	cmp	r3, r2
 800b786:	d115      	bne.n	800b7b4 <HAL_TIM_PWM_Start+0x40>
 800b788:	683b      	ldr	r3, [r7, #0]
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	f000 808d 	beq.w	800b8aa <HAL_TIM_PWM_Start+0x136>
 800b790:	683b      	ldr	r3, [r7, #0]
 800b792:	2b04      	cmp	r3, #4
 800b794:	f000 8089 	beq.w	800b8aa <HAL_TIM_PWM_Start+0x136>
 800b798:	683b      	ldr	r3, [r7, #0]
 800b79a:	2b08      	cmp	r3, #8
 800b79c:	f000 8085 	beq.w	800b8aa <HAL_TIM_PWM_Start+0x136>
 800b7a0:	683b      	ldr	r3, [r7, #0]
 800b7a2:	2b0c      	cmp	r3, #12
 800b7a4:	f000 8081 	beq.w	800b8aa <HAL_TIM_PWM_Start+0x136>
 800b7a8:	683b      	ldr	r3, [r7, #0]
 800b7aa:	2b10      	cmp	r3, #16
 800b7ac:	d07d      	beq.n	800b8aa <HAL_TIM_PWM_Start+0x136>
 800b7ae:	683b      	ldr	r3, [r7, #0]
 800b7b0:	2b14      	cmp	r3, #20
 800b7b2:	d07a      	beq.n	800b8aa <HAL_TIM_PWM_Start+0x136>
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b7bc:	d10b      	bne.n	800b7d6 <HAL_TIM_PWM_Start+0x62>
 800b7be:	683b      	ldr	r3, [r7, #0]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d072      	beq.n	800b8aa <HAL_TIM_PWM_Start+0x136>
 800b7c4:	683b      	ldr	r3, [r7, #0]
 800b7c6:	2b04      	cmp	r3, #4
 800b7c8:	d06f      	beq.n	800b8aa <HAL_TIM_PWM_Start+0x136>
 800b7ca:	683b      	ldr	r3, [r7, #0]
 800b7cc:	2b08      	cmp	r3, #8
 800b7ce:	d06c      	beq.n	800b8aa <HAL_TIM_PWM_Start+0x136>
 800b7d0:	683b      	ldr	r3, [r7, #0]
 800b7d2:	2b0c      	cmp	r3, #12
 800b7d4:	d069      	beq.n	800b8aa <HAL_TIM_PWM_Start+0x136>
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	4a70      	ldr	r2, [pc, #448]	@ (800b99c <HAL_TIM_PWM_Start+0x228>)
 800b7dc:	4293      	cmp	r3, r2
 800b7de:	d10b      	bne.n	800b7f8 <HAL_TIM_PWM_Start+0x84>
 800b7e0:	683b      	ldr	r3, [r7, #0]
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d061      	beq.n	800b8aa <HAL_TIM_PWM_Start+0x136>
 800b7e6:	683b      	ldr	r3, [r7, #0]
 800b7e8:	2b04      	cmp	r3, #4
 800b7ea:	d05e      	beq.n	800b8aa <HAL_TIM_PWM_Start+0x136>
 800b7ec:	683b      	ldr	r3, [r7, #0]
 800b7ee:	2b08      	cmp	r3, #8
 800b7f0:	d05b      	beq.n	800b8aa <HAL_TIM_PWM_Start+0x136>
 800b7f2:	683b      	ldr	r3, [r7, #0]
 800b7f4:	2b0c      	cmp	r3, #12
 800b7f6:	d058      	beq.n	800b8aa <HAL_TIM_PWM_Start+0x136>
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	4a68      	ldr	r2, [pc, #416]	@ (800b9a0 <HAL_TIM_PWM_Start+0x22c>)
 800b7fe:	4293      	cmp	r3, r2
 800b800:	d10b      	bne.n	800b81a <HAL_TIM_PWM_Start+0xa6>
 800b802:	683b      	ldr	r3, [r7, #0]
 800b804:	2b00      	cmp	r3, #0
 800b806:	d050      	beq.n	800b8aa <HAL_TIM_PWM_Start+0x136>
 800b808:	683b      	ldr	r3, [r7, #0]
 800b80a:	2b04      	cmp	r3, #4
 800b80c:	d04d      	beq.n	800b8aa <HAL_TIM_PWM_Start+0x136>
 800b80e:	683b      	ldr	r3, [r7, #0]
 800b810:	2b08      	cmp	r3, #8
 800b812:	d04a      	beq.n	800b8aa <HAL_TIM_PWM_Start+0x136>
 800b814:	683b      	ldr	r3, [r7, #0]
 800b816:	2b0c      	cmp	r3, #12
 800b818:	d047      	beq.n	800b8aa <HAL_TIM_PWM_Start+0x136>
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	4a61      	ldr	r2, [pc, #388]	@ (800b9a4 <HAL_TIM_PWM_Start+0x230>)
 800b820:	4293      	cmp	r3, r2
 800b822:	d10b      	bne.n	800b83c <HAL_TIM_PWM_Start+0xc8>
 800b824:	683b      	ldr	r3, [r7, #0]
 800b826:	2b00      	cmp	r3, #0
 800b828:	d03f      	beq.n	800b8aa <HAL_TIM_PWM_Start+0x136>
 800b82a:	683b      	ldr	r3, [r7, #0]
 800b82c:	2b04      	cmp	r3, #4
 800b82e:	d03c      	beq.n	800b8aa <HAL_TIM_PWM_Start+0x136>
 800b830:	683b      	ldr	r3, [r7, #0]
 800b832:	2b08      	cmp	r3, #8
 800b834:	d039      	beq.n	800b8aa <HAL_TIM_PWM_Start+0x136>
 800b836:	683b      	ldr	r3, [r7, #0]
 800b838:	2b0c      	cmp	r3, #12
 800b83a:	d036      	beq.n	800b8aa <HAL_TIM_PWM_Start+0x136>
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	4a59      	ldr	r2, [pc, #356]	@ (800b9a8 <HAL_TIM_PWM_Start+0x234>)
 800b842:	4293      	cmp	r3, r2
 800b844:	d111      	bne.n	800b86a <HAL_TIM_PWM_Start+0xf6>
 800b846:	683b      	ldr	r3, [r7, #0]
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d02e      	beq.n	800b8aa <HAL_TIM_PWM_Start+0x136>
 800b84c:	683b      	ldr	r3, [r7, #0]
 800b84e:	2b04      	cmp	r3, #4
 800b850:	d02b      	beq.n	800b8aa <HAL_TIM_PWM_Start+0x136>
 800b852:	683b      	ldr	r3, [r7, #0]
 800b854:	2b08      	cmp	r3, #8
 800b856:	d028      	beq.n	800b8aa <HAL_TIM_PWM_Start+0x136>
 800b858:	683b      	ldr	r3, [r7, #0]
 800b85a:	2b0c      	cmp	r3, #12
 800b85c:	d025      	beq.n	800b8aa <HAL_TIM_PWM_Start+0x136>
 800b85e:	683b      	ldr	r3, [r7, #0]
 800b860:	2b10      	cmp	r3, #16
 800b862:	d022      	beq.n	800b8aa <HAL_TIM_PWM_Start+0x136>
 800b864:	683b      	ldr	r3, [r7, #0]
 800b866:	2b14      	cmp	r3, #20
 800b868:	d01f      	beq.n	800b8aa <HAL_TIM_PWM_Start+0x136>
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	4a4f      	ldr	r2, [pc, #316]	@ (800b9ac <HAL_TIM_PWM_Start+0x238>)
 800b870:	4293      	cmp	r3, r2
 800b872:	d105      	bne.n	800b880 <HAL_TIM_PWM_Start+0x10c>
 800b874:	683b      	ldr	r3, [r7, #0]
 800b876:	2b00      	cmp	r3, #0
 800b878:	d017      	beq.n	800b8aa <HAL_TIM_PWM_Start+0x136>
 800b87a:	683b      	ldr	r3, [r7, #0]
 800b87c:	2b04      	cmp	r3, #4
 800b87e:	d014      	beq.n	800b8aa <HAL_TIM_PWM_Start+0x136>
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	4a4a      	ldr	r2, [pc, #296]	@ (800b9b0 <HAL_TIM_PWM_Start+0x23c>)
 800b886:	4293      	cmp	r3, r2
 800b888:	d102      	bne.n	800b890 <HAL_TIM_PWM_Start+0x11c>
 800b88a:	683b      	ldr	r3, [r7, #0]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d00c      	beq.n	800b8aa <HAL_TIM_PWM_Start+0x136>
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	4a47      	ldr	r2, [pc, #284]	@ (800b9b4 <HAL_TIM_PWM_Start+0x240>)
 800b896:	4293      	cmp	r3, r2
 800b898:	d102      	bne.n	800b8a0 <HAL_TIM_PWM_Start+0x12c>
 800b89a:	683b      	ldr	r3, [r7, #0]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d004      	beq.n	800b8aa <HAL_TIM_PWM_Start+0x136>
 800b8a0:	f240 51bc 	movw	r1, #1468	@ 0x5bc
 800b8a4:	4844      	ldr	r0, [pc, #272]	@ (800b9b8 <HAL_TIM_PWM_Start+0x244>)
 800b8a6:	f7fa fa39 	bl	8005d1c <assert_failed>

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b8aa:	683b      	ldr	r3, [r7, #0]
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d109      	bne.n	800b8c4 <HAL_TIM_PWM_Start+0x150>
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b8b6:	b2db      	uxtb	r3, r3
 800b8b8:	2b01      	cmp	r3, #1
 800b8ba:	bf14      	ite	ne
 800b8bc:	2301      	movne	r3, #1
 800b8be:	2300      	moveq	r3, #0
 800b8c0:	b2db      	uxtb	r3, r3
 800b8c2:	e03c      	b.n	800b93e <HAL_TIM_PWM_Start+0x1ca>
 800b8c4:	683b      	ldr	r3, [r7, #0]
 800b8c6:	2b04      	cmp	r3, #4
 800b8c8:	d109      	bne.n	800b8de <HAL_TIM_PWM_Start+0x16a>
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800b8d0:	b2db      	uxtb	r3, r3
 800b8d2:	2b01      	cmp	r3, #1
 800b8d4:	bf14      	ite	ne
 800b8d6:	2301      	movne	r3, #1
 800b8d8:	2300      	moveq	r3, #0
 800b8da:	b2db      	uxtb	r3, r3
 800b8dc:	e02f      	b.n	800b93e <HAL_TIM_PWM_Start+0x1ca>
 800b8de:	683b      	ldr	r3, [r7, #0]
 800b8e0:	2b08      	cmp	r3, #8
 800b8e2:	d109      	bne.n	800b8f8 <HAL_TIM_PWM_Start+0x184>
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b8ea:	b2db      	uxtb	r3, r3
 800b8ec:	2b01      	cmp	r3, #1
 800b8ee:	bf14      	ite	ne
 800b8f0:	2301      	movne	r3, #1
 800b8f2:	2300      	moveq	r3, #0
 800b8f4:	b2db      	uxtb	r3, r3
 800b8f6:	e022      	b.n	800b93e <HAL_TIM_PWM_Start+0x1ca>
 800b8f8:	683b      	ldr	r3, [r7, #0]
 800b8fa:	2b0c      	cmp	r3, #12
 800b8fc:	d109      	bne.n	800b912 <HAL_TIM_PWM_Start+0x19e>
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b904:	b2db      	uxtb	r3, r3
 800b906:	2b01      	cmp	r3, #1
 800b908:	bf14      	ite	ne
 800b90a:	2301      	movne	r3, #1
 800b90c:	2300      	moveq	r3, #0
 800b90e:	b2db      	uxtb	r3, r3
 800b910:	e015      	b.n	800b93e <HAL_TIM_PWM_Start+0x1ca>
 800b912:	683b      	ldr	r3, [r7, #0]
 800b914:	2b10      	cmp	r3, #16
 800b916:	d109      	bne.n	800b92c <HAL_TIM_PWM_Start+0x1b8>
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b91e:	b2db      	uxtb	r3, r3
 800b920:	2b01      	cmp	r3, #1
 800b922:	bf14      	ite	ne
 800b924:	2301      	movne	r3, #1
 800b926:	2300      	moveq	r3, #0
 800b928:	b2db      	uxtb	r3, r3
 800b92a:	e008      	b.n	800b93e <HAL_TIM_PWM_Start+0x1ca>
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800b932:	b2db      	uxtb	r3, r3
 800b934:	2b01      	cmp	r3, #1
 800b936:	bf14      	ite	ne
 800b938:	2301      	movne	r3, #1
 800b93a:	2300      	moveq	r3, #0
 800b93c:	b2db      	uxtb	r3, r3
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d001      	beq.n	800b946 <HAL_TIM_PWM_Start+0x1d2>
  {
    return HAL_ERROR;
 800b942:	2301      	movs	r3, #1
 800b944:	e0af      	b.n	800baa6 <HAL_TIM_PWM_Start+0x332>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b946:	683b      	ldr	r3, [r7, #0]
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d104      	bne.n	800b956 <HAL_TIM_PWM_Start+0x1e2>
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	2202      	movs	r2, #2
 800b950:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b954:	e036      	b.n	800b9c4 <HAL_TIM_PWM_Start+0x250>
 800b956:	683b      	ldr	r3, [r7, #0]
 800b958:	2b04      	cmp	r3, #4
 800b95a:	d104      	bne.n	800b966 <HAL_TIM_PWM_Start+0x1f2>
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	2202      	movs	r2, #2
 800b960:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b964:	e02e      	b.n	800b9c4 <HAL_TIM_PWM_Start+0x250>
 800b966:	683b      	ldr	r3, [r7, #0]
 800b968:	2b08      	cmp	r3, #8
 800b96a:	d104      	bne.n	800b976 <HAL_TIM_PWM_Start+0x202>
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	2202      	movs	r2, #2
 800b970:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b974:	e026      	b.n	800b9c4 <HAL_TIM_PWM_Start+0x250>
 800b976:	683b      	ldr	r3, [r7, #0]
 800b978:	2b0c      	cmp	r3, #12
 800b97a:	d104      	bne.n	800b986 <HAL_TIM_PWM_Start+0x212>
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	2202      	movs	r2, #2
 800b980:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b984:	e01e      	b.n	800b9c4 <HAL_TIM_PWM_Start+0x250>
 800b986:	683b      	ldr	r3, [r7, #0]
 800b988:	2b10      	cmp	r3, #16
 800b98a:	d117      	bne.n	800b9bc <HAL_TIM_PWM_Start+0x248>
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	2202      	movs	r2, #2
 800b990:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b994:	e016      	b.n	800b9c4 <HAL_TIM_PWM_Start+0x250>
 800b996:	bf00      	nop
 800b998:	40012c00 	.word	0x40012c00
 800b99c:	40000400 	.word	0x40000400
 800b9a0:	40000800 	.word	0x40000800
 800b9a4:	40000c00 	.word	0x40000c00
 800b9a8:	40013400 	.word	0x40013400
 800b9ac:	40014000 	.word	0x40014000
 800b9b0:	40014400 	.word	0x40014400
 800b9b4:	40014800 	.word	0x40014800
 800b9b8:	08010bb8 	.word	0x08010bb8
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	2202      	movs	r2, #2
 800b9c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	2201      	movs	r2, #1
 800b9ca:	6839      	ldr	r1, [r7, #0]
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	f002 f821 	bl	800da14 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	4a36      	ldr	r2, [pc, #216]	@ (800bab0 <HAL_TIM_PWM_Start+0x33c>)
 800b9d8:	4293      	cmp	r3, r2
 800b9da:	d013      	beq.n	800ba04 <HAL_TIM_PWM_Start+0x290>
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	4a34      	ldr	r2, [pc, #208]	@ (800bab4 <HAL_TIM_PWM_Start+0x340>)
 800b9e2:	4293      	cmp	r3, r2
 800b9e4:	d00e      	beq.n	800ba04 <HAL_TIM_PWM_Start+0x290>
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	4a33      	ldr	r2, [pc, #204]	@ (800bab8 <HAL_TIM_PWM_Start+0x344>)
 800b9ec:	4293      	cmp	r3, r2
 800b9ee:	d009      	beq.n	800ba04 <HAL_TIM_PWM_Start+0x290>
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	4a31      	ldr	r2, [pc, #196]	@ (800babc <HAL_TIM_PWM_Start+0x348>)
 800b9f6:	4293      	cmp	r3, r2
 800b9f8:	d004      	beq.n	800ba04 <HAL_TIM_PWM_Start+0x290>
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	4a30      	ldr	r2, [pc, #192]	@ (800bac0 <HAL_TIM_PWM_Start+0x34c>)
 800ba00:	4293      	cmp	r3, r2
 800ba02:	d101      	bne.n	800ba08 <HAL_TIM_PWM_Start+0x294>
 800ba04:	2301      	movs	r3, #1
 800ba06:	e000      	b.n	800ba0a <HAL_TIM_PWM_Start+0x296>
 800ba08:	2300      	movs	r3, #0
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d007      	beq.n	800ba1e <HAL_TIM_PWM_Start+0x2aa>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800ba1c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	4a23      	ldr	r2, [pc, #140]	@ (800bab0 <HAL_TIM_PWM_Start+0x33c>)
 800ba24:	4293      	cmp	r3, r2
 800ba26:	d01d      	beq.n	800ba64 <HAL_TIM_PWM_Start+0x2f0>
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ba30:	d018      	beq.n	800ba64 <HAL_TIM_PWM_Start+0x2f0>
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	4a23      	ldr	r2, [pc, #140]	@ (800bac4 <HAL_TIM_PWM_Start+0x350>)
 800ba38:	4293      	cmp	r3, r2
 800ba3a:	d013      	beq.n	800ba64 <HAL_TIM_PWM_Start+0x2f0>
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	4a21      	ldr	r2, [pc, #132]	@ (800bac8 <HAL_TIM_PWM_Start+0x354>)
 800ba42:	4293      	cmp	r3, r2
 800ba44:	d00e      	beq.n	800ba64 <HAL_TIM_PWM_Start+0x2f0>
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	4a20      	ldr	r2, [pc, #128]	@ (800bacc <HAL_TIM_PWM_Start+0x358>)
 800ba4c:	4293      	cmp	r3, r2
 800ba4e:	d009      	beq.n	800ba64 <HAL_TIM_PWM_Start+0x2f0>
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	4a17      	ldr	r2, [pc, #92]	@ (800bab4 <HAL_TIM_PWM_Start+0x340>)
 800ba56:	4293      	cmp	r3, r2
 800ba58:	d004      	beq.n	800ba64 <HAL_TIM_PWM_Start+0x2f0>
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	4a16      	ldr	r2, [pc, #88]	@ (800bab8 <HAL_TIM_PWM_Start+0x344>)
 800ba60:	4293      	cmp	r3, r2
 800ba62:	d115      	bne.n	800ba90 <HAL_TIM_PWM_Start+0x31c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	689a      	ldr	r2, [r3, #8]
 800ba6a:	4b19      	ldr	r3, [pc, #100]	@ (800bad0 <HAL_TIM_PWM_Start+0x35c>)
 800ba6c:	4013      	ands	r3, r2
 800ba6e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	2b06      	cmp	r3, #6
 800ba74:	d015      	beq.n	800baa2 <HAL_TIM_PWM_Start+0x32e>
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ba7c:	d011      	beq.n	800baa2 <HAL_TIM_PWM_Start+0x32e>
    {
      __HAL_TIM_ENABLE(htim);
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	681a      	ldr	r2, [r3, #0]
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	f042 0201 	orr.w	r2, r2, #1
 800ba8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ba8e:	e008      	b.n	800baa2 <HAL_TIM_PWM_Start+0x32e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	681a      	ldr	r2, [r3, #0]
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	f042 0201 	orr.w	r2, r2, #1
 800ba9e:	601a      	str	r2, [r3, #0]
 800baa0:	e000      	b.n	800baa4 <HAL_TIM_PWM_Start+0x330>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800baa2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800baa4:	2300      	movs	r3, #0
}
 800baa6:	4618      	mov	r0, r3
 800baa8:	3710      	adds	r7, #16
 800baaa:	46bd      	mov	sp, r7
 800baac:	bd80      	pop	{r7, pc}
 800baae:	bf00      	nop
 800bab0:	40012c00 	.word	0x40012c00
 800bab4:	40013400 	.word	0x40013400
 800bab8:	40014000 	.word	0x40014000
 800babc:	40014400 	.word	0x40014400
 800bac0:	40014800 	.word	0x40014800
 800bac4:	40000400 	.word	0x40000400
 800bac8:	40000800 	.word	0x40000800
 800bacc:	40000c00 	.word	0x40000c00
 800bad0:	00010007 	.word	0x00010007

0800bad4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bad4:	b580      	push	{r7, lr}
 800bad6:	b082      	sub	sp, #8
 800bad8:	af00      	add	r7, sp, #0
 800bada:	6078      	str	r0, [r7, #4]
 800badc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	4a8d      	ldr	r2, [pc, #564]	@ (800bd18 <HAL_TIM_PWM_Stop+0x244>)
 800bae4:	4293      	cmp	r3, r2
 800bae6:	d115      	bne.n	800bb14 <HAL_TIM_PWM_Stop+0x40>
 800bae8:	683b      	ldr	r3, [r7, #0]
 800baea:	2b00      	cmp	r3, #0
 800baec:	f000 808d 	beq.w	800bc0a <HAL_TIM_PWM_Stop+0x136>
 800baf0:	683b      	ldr	r3, [r7, #0]
 800baf2:	2b04      	cmp	r3, #4
 800baf4:	f000 8089 	beq.w	800bc0a <HAL_TIM_PWM_Stop+0x136>
 800baf8:	683b      	ldr	r3, [r7, #0]
 800bafa:	2b08      	cmp	r3, #8
 800bafc:	f000 8085 	beq.w	800bc0a <HAL_TIM_PWM_Stop+0x136>
 800bb00:	683b      	ldr	r3, [r7, #0]
 800bb02:	2b0c      	cmp	r3, #12
 800bb04:	f000 8081 	beq.w	800bc0a <HAL_TIM_PWM_Stop+0x136>
 800bb08:	683b      	ldr	r3, [r7, #0]
 800bb0a:	2b10      	cmp	r3, #16
 800bb0c:	d07d      	beq.n	800bc0a <HAL_TIM_PWM_Stop+0x136>
 800bb0e:	683b      	ldr	r3, [r7, #0]
 800bb10:	2b14      	cmp	r3, #20
 800bb12:	d07a      	beq.n	800bc0a <HAL_TIM_PWM_Stop+0x136>
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bb1c:	d10b      	bne.n	800bb36 <HAL_TIM_PWM_Stop+0x62>
 800bb1e:	683b      	ldr	r3, [r7, #0]
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d072      	beq.n	800bc0a <HAL_TIM_PWM_Stop+0x136>
 800bb24:	683b      	ldr	r3, [r7, #0]
 800bb26:	2b04      	cmp	r3, #4
 800bb28:	d06f      	beq.n	800bc0a <HAL_TIM_PWM_Stop+0x136>
 800bb2a:	683b      	ldr	r3, [r7, #0]
 800bb2c:	2b08      	cmp	r3, #8
 800bb2e:	d06c      	beq.n	800bc0a <HAL_TIM_PWM_Stop+0x136>
 800bb30:	683b      	ldr	r3, [r7, #0]
 800bb32:	2b0c      	cmp	r3, #12
 800bb34:	d069      	beq.n	800bc0a <HAL_TIM_PWM_Stop+0x136>
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	4a78      	ldr	r2, [pc, #480]	@ (800bd1c <HAL_TIM_PWM_Stop+0x248>)
 800bb3c:	4293      	cmp	r3, r2
 800bb3e:	d10b      	bne.n	800bb58 <HAL_TIM_PWM_Stop+0x84>
 800bb40:	683b      	ldr	r3, [r7, #0]
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d061      	beq.n	800bc0a <HAL_TIM_PWM_Stop+0x136>
 800bb46:	683b      	ldr	r3, [r7, #0]
 800bb48:	2b04      	cmp	r3, #4
 800bb4a:	d05e      	beq.n	800bc0a <HAL_TIM_PWM_Stop+0x136>
 800bb4c:	683b      	ldr	r3, [r7, #0]
 800bb4e:	2b08      	cmp	r3, #8
 800bb50:	d05b      	beq.n	800bc0a <HAL_TIM_PWM_Stop+0x136>
 800bb52:	683b      	ldr	r3, [r7, #0]
 800bb54:	2b0c      	cmp	r3, #12
 800bb56:	d058      	beq.n	800bc0a <HAL_TIM_PWM_Stop+0x136>
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	4a70      	ldr	r2, [pc, #448]	@ (800bd20 <HAL_TIM_PWM_Stop+0x24c>)
 800bb5e:	4293      	cmp	r3, r2
 800bb60:	d10b      	bne.n	800bb7a <HAL_TIM_PWM_Stop+0xa6>
 800bb62:	683b      	ldr	r3, [r7, #0]
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d050      	beq.n	800bc0a <HAL_TIM_PWM_Stop+0x136>
 800bb68:	683b      	ldr	r3, [r7, #0]
 800bb6a:	2b04      	cmp	r3, #4
 800bb6c:	d04d      	beq.n	800bc0a <HAL_TIM_PWM_Stop+0x136>
 800bb6e:	683b      	ldr	r3, [r7, #0]
 800bb70:	2b08      	cmp	r3, #8
 800bb72:	d04a      	beq.n	800bc0a <HAL_TIM_PWM_Stop+0x136>
 800bb74:	683b      	ldr	r3, [r7, #0]
 800bb76:	2b0c      	cmp	r3, #12
 800bb78:	d047      	beq.n	800bc0a <HAL_TIM_PWM_Stop+0x136>
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	4a69      	ldr	r2, [pc, #420]	@ (800bd24 <HAL_TIM_PWM_Stop+0x250>)
 800bb80:	4293      	cmp	r3, r2
 800bb82:	d10b      	bne.n	800bb9c <HAL_TIM_PWM_Stop+0xc8>
 800bb84:	683b      	ldr	r3, [r7, #0]
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d03f      	beq.n	800bc0a <HAL_TIM_PWM_Stop+0x136>
 800bb8a:	683b      	ldr	r3, [r7, #0]
 800bb8c:	2b04      	cmp	r3, #4
 800bb8e:	d03c      	beq.n	800bc0a <HAL_TIM_PWM_Stop+0x136>
 800bb90:	683b      	ldr	r3, [r7, #0]
 800bb92:	2b08      	cmp	r3, #8
 800bb94:	d039      	beq.n	800bc0a <HAL_TIM_PWM_Stop+0x136>
 800bb96:	683b      	ldr	r3, [r7, #0]
 800bb98:	2b0c      	cmp	r3, #12
 800bb9a:	d036      	beq.n	800bc0a <HAL_TIM_PWM_Stop+0x136>
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	4a61      	ldr	r2, [pc, #388]	@ (800bd28 <HAL_TIM_PWM_Stop+0x254>)
 800bba2:	4293      	cmp	r3, r2
 800bba4:	d111      	bne.n	800bbca <HAL_TIM_PWM_Stop+0xf6>
 800bba6:	683b      	ldr	r3, [r7, #0]
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d02e      	beq.n	800bc0a <HAL_TIM_PWM_Stop+0x136>
 800bbac:	683b      	ldr	r3, [r7, #0]
 800bbae:	2b04      	cmp	r3, #4
 800bbb0:	d02b      	beq.n	800bc0a <HAL_TIM_PWM_Stop+0x136>
 800bbb2:	683b      	ldr	r3, [r7, #0]
 800bbb4:	2b08      	cmp	r3, #8
 800bbb6:	d028      	beq.n	800bc0a <HAL_TIM_PWM_Stop+0x136>
 800bbb8:	683b      	ldr	r3, [r7, #0]
 800bbba:	2b0c      	cmp	r3, #12
 800bbbc:	d025      	beq.n	800bc0a <HAL_TIM_PWM_Stop+0x136>
 800bbbe:	683b      	ldr	r3, [r7, #0]
 800bbc0:	2b10      	cmp	r3, #16
 800bbc2:	d022      	beq.n	800bc0a <HAL_TIM_PWM_Stop+0x136>
 800bbc4:	683b      	ldr	r3, [r7, #0]
 800bbc6:	2b14      	cmp	r3, #20
 800bbc8:	d01f      	beq.n	800bc0a <HAL_TIM_PWM_Stop+0x136>
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	4a57      	ldr	r2, [pc, #348]	@ (800bd2c <HAL_TIM_PWM_Stop+0x258>)
 800bbd0:	4293      	cmp	r3, r2
 800bbd2:	d105      	bne.n	800bbe0 <HAL_TIM_PWM_Stop+0x10c>
 800bbd4:	683b      	ldr	r3, [r7, #0]
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d017      	beq.n	800bc0a <HAL_TIM_PWM_Stop+0x136>
 800bbda:	683b      	ldr	r3, [r7, #0]
 800bbdc:	2b04      	cmp	r3, #4
 800bbde:	d014      	beq.n	800bc0a <HAL_TIM_PWM_Stop+0x136>
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	4a52      	ldr	r2, [pc, #328]	@ (800bd30 <HAL_TIM_PWM_Stop+0x25c>)
 800bbe6:	4293      	cmp	r3, r2
 800bbe8:	d102      	bne.n	800bbf0 <HAL_TIM_PWM_Stop+0x11c>
 800bbea:	683b      	ldr	r3, [r7, #0]
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d00c      	beq.n	800bc0a <HAL_TIM_PWM_Stop+0x136>
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	4a4f      	ldr	r2, [pc, #316]	@ (800bd34 <HAL_TIM_PWM_Stop+0x260>)
 800bbf6:	4293      	cmp	r3, r2
 800bbf8:	d102      	bne.n	800bc00 <HAL_TIM_PWM_Stop+0x12c>
 800bbfa:	683b      	ldr	r3, [r7, #0]
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d004      	beq.n	800bc0a <HAL_TIM_PWM_Stop+0x136>
 800bc00:	f240 51f2 	movw	r1, #1522	@ 0x5f2
 800bc04:	484c      	ldr	r0, [pc, #304]	@ (800bd38 <HAL_TIM_PWM_Stop+0x264>)
 800bc06:	f7fa f889 	bl	8005d1c <assert_failed>

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	2200      	movs	r2, #0
 800bc10:	6839      	ldr	r1, [r7, #0]
 800bc12:	4618      	mov	r0, r3
 800bc14:	f001 fefe 	bl	800da14 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	4a3e      	ldr	r2, [pc, #248]	@ (800bd18 <HAL_TIM_PWM_Stop+0x244>)
 800bc1e:	4293      	cmp	r3, r2
 800bc20:	d013      	beq.n	800bc4a <HAL_TIM_PWM_Stop+0x176>
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	4a40      	ldr	r2, [pc, #256]	@ (800bd28 <HAL_TIM_PWM_Stop+0x254>)
 800bc28:	4293      	cmp	r3, r2
 800bc2a:	d00e      	beq.n	800bc4a <HAL_TIM_PWM_Stop+0x176>
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	4a3e      	ldr	r2, [pc, #248]	@ (800bd2c <HAL_TIM_PWM_Stop+0x258>)
 800bc32:	4293      	cmp	r3, r2
 800bc34:	d009      	beq.n	800bc4a <HAL_TIM_PWM_Stop+0x176>
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	4a3d      	ldr	r2, [pc, #244]	@ (800bd30 <HAL_TIM_PWM_Stop+0x25c>)
 800bc3c:	4293      	cmp	r3, r2
 800bc3e:	d004      	beq.n	800bc4a <HAL_TIM_PWM_Stop+0x176>
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	4a3b      	ldr	r2, [pc, #236]	@ (800bd34 <HAL_TIM_PWM_Stop+0x260>)
 800bc46:	4293      	cmp	r3, r2
 800bc48:	d101      	bne.n	800bc4e <HAL_TIM_PWM_Stop+0x17a>
 800bc4a:	2301      	movs	r3, #1
 800bc4c:	e000      	b.n	800bc50 <HAL_TIM_PWM_Stop+0x17c>
 800bc4e:	2300      	movs	r3, #0
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d017      	beq.n	800bc84 <HAL_TIM_PWM_Stop+0x1b0>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	6a1a      	ldr	r2, [r3, #32]
 800bc5a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800bc5e:	4013      	ands	r3, r2
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d10f      	bne.n	800bc84 <HAL_TIM_PWM_Stop+0x1b0>
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	6a1a      	ldr	r2, [r3, #32]
 800bc6a:	f240 4344 	movw	r3, #1092	@ 0x444
 800bc6e:	4013      	ands	r3, r2
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d107      	bne.n	800bc84 <HAL_TIM_PWM_Stop+0x1b0>
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800bc82:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	6a1a      	ldr	r2, [r3, #32]
 800bc8a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800bc8e:	4013      	ands	r3, r2
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d10f      	bne.n	800bcb4 <HAL_TIM_PWM_Stop+0x1e0>
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	6a1a      	ldr	r2, [r3, #32]
 800bc9a:	f240 4344 	movw	r3, #1092	@ 0x444
 800bc9e:	4013      	ands	r3, r2
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d107      	bne.n	800bcb4 <HAL_TIM_PWM_Stop+0x1e0>
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	681a      	ldr	r2, [r3, #0]
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	f022 0201 	bic.w	r2, r2, #1
 800bcb2:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800bcb4:	683b      	ldr	r3, [r7, #0]
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d104      	bne.n	800bcc4 <HAL_TIM_PWM_Stop+0x1f0>
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	2201      	movs	r2, #1
 800bcbe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800bcc2:	e023      	b.n	800bd0c <HAL_TIM_PWM_Stop+0x238>
 800bcc4:	683b      	ldr	r3, [r7, #0]
 800bcc6:	2b04      	cmp	r3, #4
 800bcc8:	d104      	bne.n	800bcd4 <HAL_TIM_PWM_Stop+0x200>
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	2201      	movs	r2, #1
 800bcce:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800bcd2:	e01b      	b.n	800bd0c <HAL_TIM_PWM_Stop+0x238>
 800bcd4:	683b      	ldr	r3, [r7, #0]
 800bcd6:	2b08      	cmp	r3, #8
 800bcd8:	d104      	bne.n	800bce4 <HAL_TIM_PWM_Stop+0x210>
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	2201      	movs	r2, #1
 800bcde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800bce2:	e013      	b.n	800bd0c <HAL_TIM_PWM_Stop+0x238>
 800bce4:	683b      	ldr	r3, [r7, #0]
 800bce6:	2b0c      	cmp	r3, #12
 800bce8:	d104      	bne.n	800bcf4 <HAL_TIM_PWM_Stop+0x220>
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	2201      	movs	r2, #1
 800bcee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800bcf2:	e00b      	b.n	800bd0c <HAL_TIM_PWM_Stop+0x238>
 800bcf4:	683b      	ldr	r3, [r7, #0]
 800bcf6:	2b10      	cmp	r3, #16
 800bcf8:	d104      	bne.n	800bd04 <HAL_TIM_PWM_Stop+0x230>
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	2201      	movs	r2, #1
 800bcfe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800bd02:	e003      	b.n	800bd0c <HAL_TIM_PWM_Stop+0x238>
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	2201      	movs	r2, #1
 800bd08:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 800bd0c:	2300      	movs	r3, #0
}
 800bd0e:	4618      	mov	r0, r3
 800bd10:	3708      	adds	r7, #8
 800bd12:	46bd      	mov	sp, r7
 800bd14:	bd80      	pop	{r7, pc}
 800bd16:	bf00      	nop
 800bd18:	40012c00 	.word	0x40012c00
 800bd1c:	40000400 	.word	0x40000400
 800bd20:	40000800 	.word	0x40000800
 800bd24:	40000c00 	.word	0x40000c00
 800bd28:	40013400 	.word	0x40013400
 800bd2c:	40014000 	.word	0x40014000
 800bd30:	40014400 	.word	0x40014400
 800bd34:	40014800 	.word	0x40014800
 800bd38:	08010bb8 	.word	0x08010bb8

0800bd3c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800bd3c:	b580      	push	{r7, lr}
 800bd3e:	b086      	sub	sp, #24
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	6078      	str	r0, [r7, #4]
 800bd44:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d101      	bne.n	800bd50 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800bd4c:	2301      	movs	r3, #1
 800bd4e:	e1b0      	b.n	800c0b2 <HAL_TIM_Encoder_Init+0x376>
  }

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	4a7f      	ldr	r2, [pc, #508]	@ (800bf54 <HAL_TIM_Encoder_Init+0x218>)
 800bd56:	4293      	cmp	r3, r2
 800bd58:	d01d      	beq.n	800bd96 <HAL_TIM_Encoder_Init+0x5a>
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bd62:	d018      	beq.n	800bd96 <HAL_TIM_Encoder_Init+0x5a>
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	4a7b      	ldr	r2, [pc, #492]	@ (800bf58 <HAL_TIM_Encoder_Init+0x21c>)
 800bd6a:	4293      	cmp	r3, r2
 800bd6c:	d013      	beq.n	800bd96 <HAL_TIM_Encoder_Init+0x5a>
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	4a7a      	ldr	r2, [pc, #488]	@ (800bf5c <HAL_TIM_Encoder_Init+0x220>)
 800bd74:	4293      	cmp	r3, r2
 800bd76:	d00e      	beq.n	800bd96 <HAL_TIM_Encoder_Init+0x5a>
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	4a78      	ldr	r2, [pc, #480]	@ (800bf60 <HAL_TIM_Encoder_Init+0x224>)
 800bd7e:	4293      	cmp	r3, r2
 800bd80:	d009      	beq.n	800bd96 <HAL_TIM_Encoder_Init+0x5a>
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	4a77      	ldr	r2, [pc, #476]	@ (800bf64 <HAL_TIM_Encoder_Init+0x228>)
 800bd88:	4293      	cmp	r3, r2
 800bd8a:	d004      	beq.n	800bd96 <HAL_TIM_Encoder_Init+0x5a>
 800bd8c:	f640 31e3 	movw	r1, #3043	@ 0xbe3
 800bd90:	4875      	ldr	r0, [pc, #468]	@ (800bf68 <HAL_TIM_Encoder_Init+0x22c>)
 800bd92:	f7f9 ffc3 	bl	8005d1c <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	689b      	ldr	r3, [r3, #8]
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d014      	beq.n	800bdc8 <HAL_TIM_Encoder_Init+0x8c>
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	689b      	ldr	r3, [r3, #8]
 800bda2:	2b10      	cmp	r3, #16
 800bda4:	d010      	beq.n	800bdc8 <HAL_TIM_Encoder_Init+0x8c>
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	689b      	ldr	r3, [r3, #8]
 800bdaa:	2b20      	cmp	r3, #32
 800bdac:	d00c      	beq.n	800bdc8 <HAL_TIM_Encoder_Init+0x8c>
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	689b      	ldr	r3, [r3, #8]
 800bdb2:	2b40      	cmp	r3, #64	@ 0x40
 800bdb4:	d008      	beq.n	800bdc8 <HAL_TIM_Encoder_Init+0x8c>
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	689b      	ldr	r3, [r3, #8]
 800bdba:	2b60      	cmp	r3, #96	@ 0x60
 800bdbc:	d004      	beq.n	800bdc8 <HAL_TIM_Encoder_Init+0x8c>
 800bdbe:	f640 31e4 	movw	r1, #3044	@ 0xbe4
 800bdc2:	4869      	ldr	r0, [pc, #420]	@ (800bf68 <HAL_TIM_Encoder_Init+0x22c>)
 800bdc4:	f7f9 ffaa 	bl	8005d1c <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	691b      	ldr	r3, [r3, #16]
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d00e      	beq.n	800bdee <HAL_TIM_Encoder_Init+0xb2>
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	691b      	ldr	r3, [r3, #16]
 800bdd4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bdd8:	d009      	beq.n	800bdee <HAL_TIM_Encoder_Init+0xb2>
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	691b      	ldr	r3, [r3, #16]
 800bdde:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bde2:	d004      	beq.n	800bdee <HAL_TIM_Encoder_Init+0xb2>
 800bde4:	f640 31e5 	movw	r1, #3045	@ 0xbe5
 800bde8:	485f      	ldr	r0, [pc, #380]	@ (800bf68 <HAL_TIM_Encoder_Init+0x22c>)
 800bdea:	f7f9 ff97 	bl	8005d1c <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	699b      	ldr	r3, [r3, #24]
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d008      	beq.n	800be08 <HAL_TIM_Encoder_Init+0xcc>
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	699b      	ldr	r3, [r3, #24]
 800bdfa:	2b80      	cmp	r3, #128	@ 0x80
 800bdfc:	d004      	beq.n	800be08 <HAL_TIM_Encoder_Init+0xcc>
 800bdfe:	f640 31e6 	movw	r1, #3046	@ 0xbe6
 800be02:	4859      	ldr	r0, [pc, #356]	@ (800bf68 <HAL_TIM_Encoder_Init+0x22c>)
 800be04:	f7f9 ff8a 	bl	8005d1c <assert_failed>
  assert_param(IS_TIM_ENCODER_MODE(sConfig->EncoderMode));
 800be08:	683b      	ldr	r3, [r7, #0]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	2b01      	cmp	r3, #1
 800be0e:	d00c      	beq.n	800be2a <HAL_TIM_Encoder_Init+0xee>
 800be10:	683b      	ldr	r3, [r7, #0]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	2b02      	cmp	r3, #2
 800be16:	d008      	beq.n	800be2a <HAL_TIM_Encoder_Init+0xee>
 800be18:	683b      	ldr	r3, [r7, #0]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	2b03      	cmp	r3, #3
 800be1e:	d004      	beq.n	800be2a <HAL_TIM_Encoder_Init+0xee>
 800be20:	f640 31e7 	movw	r1, #3047	@ 0xbe7
 800be24:	4850      	ldr	r0, [pc, #320]	@ (800bf68 <HAL_TIM_Encoder_Init+0x22c>)
 800be26:	f7f9 ff79 	bl	8005d1c <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC1Selection));
 800be2a:	683b      	ldr	r3, [r7, #0]
 800be2c:	689b      	ldr	r3, [r3, #8]
 800be2e:	2b01      	cmp	r3, #1
 800be30:	d00c      	beq.n	800be4c <HAL_TIM_Encoder_Init+0x110>
 800be32:	683b      	ldr	r3, [r7, #0]
 800be34:	689b      	ldr	r3, [r3, #8]
 800be36:	2b02      	cmp	r3, #2
 800be38:	d008      	beq.n	800be4c <HAL_TIM_Encoder_Init+0x110>
 800be3a:	683b      	ldr	r3, [r7, #0]
 800be3c:	689b      	ldr	r3, [r3, #8]
 800be3e:	2b03      	cmp	r3, #3
 800be40:	d004      	beq.n	800be4c <HAL_TIM_Encoder_Init+0x110>
 800be42:	f640 31e8 	movw	r1, #3048	@ 0xbe8
 800be46:	4848      	ldr	r0, [pc, #288]	@ (800bf68 <HAL_TIM_Encoder_Init+0x22c>)
 800be48:	f7f9 ff68 	bl	8005d1c <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC2Selection));
 800be4c:	683b      	ldr	r3, [r7, #0]
 800be4e:	699b      	ldr	r3, [r3, #24]
 800be50:	2b01      	cmp	r3, #1
 800be52:	d00c      	beq.n	800be6e <HAL_TIM_Encoder_Init+0x132>
 800be54:	683b      	ldr	r3, [r7, #0]
 800be56:	699b      	ldr	r3, [r3, #24]
 800be58:	2b02      	cmp	r3, #2
 800be5a:	d008      	beq.n	800be6e <HAL_TIM_Encoder_Init+0x132>
 800be5c:	683b      	ldr	r3, [r7, #0]
 800be5e:	699b      	ldr	r3, [r3, #24]
 800be60:	2b03      	cmp	r3, #3
 800be62:	d004      	beq.n	800be6e <HAL_TIM_Encoder_Init+0x132>
 800be64:	f640 31e9 	movw	r1, #3049	@ 0xbe9
 800be68:	483f      	ldr	r0, [pc, #252]	@ (800bf68 <HAL_TIM_Encoder_Init+0x22c>)
 800be6a:	f7f9 ff57 	bl	8005d1c <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC1Polarity));
 800be6e:	683b      	ldr	r3, [r7, #0]
 800be70:	685b      	ldr	r3, [r3, #4]
 800be72:	2b00      	cmp	r3, #0
 800be74:	d008      	beq.n	800be88 <HAL_TIM_Encoder_Init+0x14c>
 800be76:	683b      	ldr	r3, [r7, #0]
 800be78:	685b      	ldr	r3, [r3, #4]
 800be7a:	2b02      	cmp	r3, #2
 800be7c:	d004      	beq.n	800be88 <HAL_TIM_Encoder_Init+0x14c>
 800be7e:	f640 31ea 	movw	r1, #3050	@ 0xbea
 800be82:	4839      	ldr	r0, [pc, #228]	@ (800bf68 <HAL_TIM_Encoder_Init+0x22c>)
 800be84:	f7f9 ff4a 	bl	8005d1c <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC2Polarity));
 800be88:	683b      	ldr	r3, [r7, #0]
 800be8a:	695b      	ldr	r3, [r3, #20]
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d008      	beq.n	800bea2 <HAL_TIM_Encoder_Init+0x166>
 800be90:	683b      	ldr	r3, [r7, #0]
 800be92:	695b      	ldr	r3, [r3, #20]
 800be94:	2b02      	cmp	r3, #2
 800be96:	d004      	beq.n	800bea2 <HAL_TIM_Encoder_Init+0x166>
 800be98:	f640 31eb 	movw	r1, #3051	@ 0xbeb
 800be9c:	4832      	ldr	r0, [pc, #200]	@ (800bf68 <HAL_TIM_Encoder_Init+0x22c>)
 800be9e:	f7f9 ff3d 	bl	8005d1c <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
 800bea2:	683b      	ldr	r3, [r7, #0]
 800bea4:	68db      	ldr	r3, [r3, #12]
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d010      	beq.n	800becc <HAL_TIM_Encoder_Init+0x190>
 800beaa:	683b      	ldr	r3, [r7, #0]
 800beac:	68db      	ldr	r3, [r3, #12]
 800beae:	2b04      	cmp	r3, #4
 800beb0:	d00c      	beq.n	800becc <HAL_TIM_Encoder_Init+0x190>
 800beb2:	683b      	ldr	r3, [r7, #0]
 800beb4:	68db      	ldr	r3, [r3, #12]
 800beb6:	2b08      	cmp	r3, #8
 800beb8:	d008      	beq.n	800becc <HAL_TIM_Encoder_Init+0x190>
 800beba:	683b      	ldr	r3, [r7, #0]
 800bebc:	68db      	ldr	r3, [r3, #12]
 800bebe:	2b0c      	cmp	r3, #12
 800bec0:	d004      	beq.n	800becc <HAL_TIM_Encoder_Init+0x190>
 800bec2:	f640 31ec 	movw	r1, #3052	@ 0xbec
 800bec6:	4828      	ldr	r0, [pc, #160]	@ (800bf68 <HAL_TIM_Encoder_Init+0x22c>)
 800bec8:	f7f9 ff28 	bl	8005d1c <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
 800becc:	683b      	ldr	r3, [r7, #0]
 800bece:	69db      	ldr	r3, [r3, #28]
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d010      	beq.n	800bef6 <HAL_TIM_Encoder_Init+0x1ba>
 800bed4:	683b      	ldr	r3, [r7, #0]
 800bed6:	69db      	ldr	r3, [r3, #28]
 800bed8:	2b04      	cmp	r3, #4
 800beda:	d00c      	beq.n	800bef6 <HAL_TIM_Encoder_Init+0x1ba>
 800bedc:	683b      	ldr	r3, [r7, #0]
 800bede:	69db      	ldr	r3, [r3, #28]
 800bee0:	2b08      	cmp	r3, #8
 800bee2:	d008      	beq.n	800bef6 <HAL_TIM_Encoder_Init+0x1ba>
 800bee4:	683b      	ldr	r3, [r7, #0]
 800bee6:	69db      	ldr	r3, [r3, #28]
 800bee8:	2b0c      	cmp	r3, #12
 800beea:	d004      	beq.n	800bef6 <HAL_TIM_Encoder_Init+0x1ba>
 800beec:	f640 31ed 	movw	r1, #3053	@ 0xbed
 800bef0:	481d      	ldr	r0, [pc, #116]	@ (800bf68 <HAL_TIM_Encoder_Init+0x22c>)
 800bef2:	f7f9 ff13 	bl	8005d1c <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
 800bef6:	683b      	ldr	r3, [r7, #0]
 800bef8:	691b      	ldr	r3, [r3, #16]
 800befa:	2b0f      	cmp	r3, #15
 800befc:	d904      	bls.n	800bf08 <HAL_TIM_Encoder_Init+0x1cc>
 800befe:	f640 31ee 	movw	r1, #3054	@ 0xbee
 800bf02:	4819      	ldr	r0, [pc, #100]	@ (800bf68 <HAL_TIM_Encoder_Init+0x22c>)
 800bf04:	f7f9 ff0a 	bl	8005d1c <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
 800bf08:	683b      	ldr	r3, [r7, #0]
 800bf0a:	6a1b      	ldr	r3, [r3, #32]
 800bf0c:	2b0f      	cmp	r3, #15
 800bf0e:	d904      	bls.n	800bf1a <HAL_TIM_Encoder_Init+0x1de>
 800bf10:	f640 31ef 	movw	r1, #3055	@ 0xbef
 800bf14:	4814      	ldr	r0, [pc, #80]	@ (800bf68 <HAL_TIM_Encoder_Init+0x22c>)
 800bf16:	f7f9 ff01 	bl	8005d1c <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bf22:	d004      	beq.n	800bf2e <HAL_TIM_Encoder_Init+0x1f2>
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	4a0d      	ldr	r2, [pc, #52]	@ (800bf60 <HAL_TIM_Encoder_Init+0x224>)
 800bf2a:	4293      	cmp	r3, r2
 800bf2c:	d107      	bne.n	800bf3e <HAL_TIM_Encoder_Init+0x202>
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	68db      	ldr	r3, [r3, #12]
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	bf14      	ite	ne
 800bf36:	2301      	movne	r3, #1
 800bf38:	2300      	moveq	r3, #0
 800bf3a:	b2db      	uxtb	r3, r3
 800bf3c:	e01a      	b.n	800bf74 <HAL_TIM_Encoder_Init+0x238>
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	68db      	ldr	r3, [r3, #12]
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d012      	beq.n	800bf6c <HAL_TIM_Encoder_Init+0x230>
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	68db      	ldr	r3, [r3, #12]
 800bf4a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bf4e:	d20d      	bcs.n	800bf6c <HAL_TIM_Encoder_Init+0x230>
 800bf50:	2301      	movs	r3, #1
 800bf52:	e00c      	b.n	800bf6e <HAL_TIM_Encoder_Init+0x232>
 800bf54:	40012c00 	.word	0x40012c00
 800bf58:	40000400 	.word	0x40000400
 800bf5c:	40000800 	.word	0x40000800
 800bf60:	40000c00 	.word	0x40000c00
 800bf64:	40013400 	.word	0x40013400
 800bf68:	08010bb8 	.word	0x08010bb8
 800bf6c:	2300      	movs	r3, #0
 800bf6e:	f003 0301 	and.w	r3, r3, #1
 800bf72:	b2db      	uxtb	r3, r3
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d104      	bne.n	800bf82 <HAL_TIM_Encoder_Init+0x246>
 800bf78:	f44f 613f 	mov.w	r1, #3056	@ 0xbf0
 800bf7c:	484f      	ldr	r0, [pc, #316]	@ (800c0bc <HAL_TIM_Encoder_Init+0x380>)
 800bf7e:	f7f9 fecd 	bl	8005d1c <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bf88:	b2db      	uxtb	r3, r3
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d106      	bne.n	800bf9c <HAL_TIM_Encoder_Init+0x260>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	2200      	movs	r2, #0
 800bf92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800bf96:	6878      	ldr	r0, [r7, #4]
 800bf98:	f7fa faaa 	bl	80064f0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	2202      	movs	r2, #2
 800bfa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	689b      	ldr	r3, [r3, #8]
 800bfaa:	687a      	ldr	r2, [r7, #4]
 800bfac:	6812      	ldr	r2, [r2, #0]
 800bfae:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 800bfb2:	f023 0307 	bic.w	r3, r3, #7
 800bfb6:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	681a      	ldr	r2, [r3, #0]
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	3304      	adds	r3, #4
 800bfc0:	4619      	mov	r1, r3
 800bfc2:	4610      	mov	r0, r2
 800bfc4:	f001 f886 	bl	800d0d4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	689b      	ldr	r3, [r3, #8]
 800bfce:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	699b      	ldr	r3, [r3, #24]
 800bfd6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	6a1b      	ldr	r3, [r3, #32]
 800bfde:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800bfe0:	683b      	ldr	r3, [r7, #0]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	697a      	ldr	r2, [r7, #20]
 800bfe6:	4313      	orrs	r3, r2
 800bfe8:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800bfea:	693b      	ldr	r3, [r7, #16]
 800bfec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bff0:	f023 0303 	bic.w	r3, r3, #3
 800bff4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800bff6:	683b      	ldr	r3, [r7, #0]
 800bff8:	689a      	ldr	r2, [r3, #8]
 800bffa:	683b      	ldr	r3, [r7, #0]
 800bffc:	699b      	ldr	r3, [r3, #24]
 800bffe:	021b      	lsls	r3, r3, #8
 800c000:	4313      	orrs	r3, r2
 800c002:	693a      	ldr	r2, [r7, #16]
 800c004:	4313      	orrs	r3, r2
 800c006:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800c008:	693b      	ldr	r3, [r7, #16]
 800c00a:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800c00e:	f023 030c 	bic.w	r3, r3, #12
 800c012:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800c014:	693b      	ldr	r3, [r7, #16]
 800c016:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800c01a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c01e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800c020:	683b      	ldr	r3, [r7, #0]
 800c022:	68da      	ldr	r2, [r3, #12]
 800c024:	683b      	ldr	r3, [r7, #0]
 800c026:	69db      	ldr	r3, [r3, #28]
 800c028:	021b      	lsls	r3, r3, #8
 800c02a:	4313      	orrs	r3, r2
 800c02c:	693a      	ldr	r2, [r7, #16]
 800c02e:	4313      	orrs	r3, r2
 800c030:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800c032:	683b      	ldr	r3, [r7, #0]
 800c034:	691b      	ldr	r3, [r3, #16]
 800c036:	011a      	lsls	r2, r3, #4
 800c038:	683b      	ldr	r3, [r7, #0]
 800c03a:	6a1b      	ldr	r3, [r3, #32]
 800c03c:	031b      	lsls	r3, r3, #12
 800c03e:	4313      	orrs	r3, r2
 800c040:	693a      	ldr	r2, [r7, #16]
 800c042:	4313      	orrs	r3, r2
 800c044:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800c04c:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800c054:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800c056:	683b      	ldr	r3, [r7, #0]
 800c058:	685a      	ldr	r2, [r3, #4]
 800c05a:	683b      	ldr	r3, [r7, #0]
 800c05c:	695b      	ldr	r3, [r3, #20]
 800c05e:	011b      	lsls	r3, r3, #4
 800c060:	4313      	orrs	r3, r2
 800c062:	68fa      	ldr	r2, [r7, #12]
 800c064:	4313      	orrs	r3, r2
 800c066:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	697a      	ldr	r2, [r7, #20]
 800c06e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	693a      	ldr	r2, [r7, #16]
 800c076:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	68fa      	ldr	r2, [r7, #12]
 800c07e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	2201      	movs	r2, #1
 800c084:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	2201      	movs	r2, #1
 800c08c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	2201      	movs	r2, #1
 800c094:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	2201      	movs	r2, #1
 800c09c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	2201      	movs	r2, #1
 800c0a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	2201      	movs	r2, #1
 800c0ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c0b0:	2300      	movs	r3, #0
}
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	3718      	adds	r7, #24
 800c0b6:	46bd      	mov	sp, r7
 800c0b8:	bd80      	pop	{r7, pc}
 800c0ba:	bf00      	nop
 800c0bc:	08010bb8 	.word	0x08010bb8

0800c0c0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c0c0:	b580      	push	{r7, lr}
 800c0c2:	b084      	sub	sp, #16
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	6078      	str	r0, [r7, #4]
 800c0c8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800c0d0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800c0d8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c0e0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c0e8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	4a4d      	ldr	r2, [pc, #308]	@ (800c224 <HAL_TIM_Encoder_Start+0x164>)
 800c0f0:	4293      	cmp	r3, r2
 800c0f2:	d01d      	beq.n	800c130 <HAL_TIM_Encoder_Start+0x70>
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c0fc:	d018      	beq.n	800c130 <HAL_TIM_Encoder_Start+0x70>
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	4a49      	ldr	r2, [pc, #292]	@ (800c228 <HAL_TIM_Encoder_Start+0x168>)
 800c104:	4293      	cmp	r3, r2
 800c106:	d013      	beq.n	800c130 <HAL_TIM_Encoder_Start+0x70>
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	4a47      	ldr	r2, [pc, #284]	@ (800c22c <HAL_TIM_Encoder_Start+0x16c>)
 800c10e:	4293      	cmp	r3, r2
 800c110:	d00e      	beq.n	800c130 <HAL_TIM_Encoder_Start+0x70>
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	4a46      	ldr	r2, [pc, #280]	@ (800c230 <HAL_TIM_Encoder_Start+0x170>)
 800c118:	4293      	cmp	r3, r2
 800c11a:	d009      	beq.n	800c130 <HAL_TIM_Encoder_Start+0x70>
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	4a44      	ldr	r2, [pc, #272]	@ (800c234 <HAL_TIM_Encoder_Start+0x174>)
 800c122:	4293      	cmp	r3, r2
 800c124:	d004      	beq.n	800c130 <HAL_TIM_Encoder_Start+0x70>
 800c126:	f640 41a1 	movw	r1, #3233	@ 0xca1
 800c12a:	4843      	ldr	r0, [pc, #268]	@ (800c238 <HAL_TIM_Encoder_Start+0x178>)
 800c12c:	f7f9 fdf6 	bl	8005d1c <assert_failed>

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800c130:	683b      	ldr	r3, [r7, #0]
 800c132:	2b00      	cmp	r3, #0
 800c134:	d110      	bne.n	800c158 <HAL_TIM_Encoder_Start+0x98>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800c136:	7bfb      	ldrb	r3, [r7, #15]
 800c138:	2b01      	cmp	r3, #1
 800c13a:	d102      	bne.n	800c142 <HAL_TIM_Encoder_Start+0x82>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800c13c:	7b7b      	ldrb	r3, [r7, #13]
 800c13e:	2b01      	cmp	r3, #1
 800c140:	d001      	beq.n	800c146 <HAL_TIM_Encoder_Start+0x86>
    {
      return HAL_ERROR;
 800c142:	2301      	movs	r3, #1
 800c144:	e069      	b.n	800c21a <HAL_TIM_Encoder_Start+0x15a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	2202      	movs	r2, #2
 800c14a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	2202      	movs	r2, #2
 800c152:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c156:	e031      	b.n	800c1bc <HAL_TIM_Encoder_Start+0xfc>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800c158:	683b      	ldr	r3, [r7, #0]
 800c15a:	2b04      	cmp	r3, #4
 800c15c:	d110      	bne.n	800c180 <HAL_TIM_Encoder_Start+0xc0>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800c15e:	7bbb      	ldrb	r3, [r7, #14]
 800c160:	2b01      	cmp	r3, #1
 800c162:	d102      	bne.n	800c16a <HAL_TIM_Encoder_Start+0xaa>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800c164:	7b3b      	ldrb	r3, [r7, #12]
 800c166:	2b01      	cmp	r3, #1
 800c168:	d001      	beq.n	800c16e <HAL_TIM_Encoder_Start+0xae>
    {
      return HAL_ERROR;
 800c16a:	2301      	movs	r3, #1
 800c16c:	e055      	b.n	800c21a <HAL_TIM_Encoder_Start+0x15a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	2202      	movs	r2, #2
 800c172:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	2202      	movs	r2, #2
 800c17a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c17e:	e01d      	b.n	800c1bc <HAL_TIM_Encoder_Start+0xfc>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800c180:	7bfb      	ldrb	r3, [r7, #15]
 800c182:	2b01      	cmp	r3, #1
 800c184:	d108      	bne.n	800c198 <HAL_TIM_Encoder_Start+0xd8>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800c186:	7bbb      	ldrb	r3, [r7, #14]
 800c188:	2b01      	cmp	r3, #1
 800c18a:	d105      	bne.n	800c198 <HAL_TIM_Encoder_Start+0xd8>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800c18c:	7b7b      	ldrb	r3, [r7, #13]
 800c18e:	2b01      	cmp	r3, #1
 800c190:	d102      	bne.n	800c198 <HAL_TIM_Encoder_Start+0xd8>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800c192:	7b3b      	ldrb	r3, [r7, #12]
 800c194:	2b01      	cmp	r3, #1
 800c196:	d001      	beq.n	800c19c <HAL_TIM_Encoder_Start+0xdc>
    {
      return HAL_ERROR;
 800c198:	2301      	movs	r3, #1
 800c19a:	e03e      	b.n	800c21a <HAL_TIM_Encoder_Start+0x15a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	2202      	movs	r2, #2
 800c1a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	2202      	movs	r2, #2
 800c1a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	2202      	movs	r2, #2
 800c1b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	2202      	movs	r2, #2
 800c1b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800c1bc:	683b      	ldr	r3, [r7, #0]
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d003      	beq.n	800c1ca <HAL_TIM_Encoder_Start+0x10a>
 800c1c2:	683b      	ldr	r3, [r7, #0]
 800c1c4:	2b04      	cmp	r3, #4
 800c1c6:	d008      	beq.n	800c1da <HAL_TIM_Encoder_Start+0x11a>
 800c1c8:	e00f      	b.n	800c1ea <HAL_TIM_Encoder_Start+0x12a>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	2201      	movs	r2, #1
 800c1d0:	2100      	movs	r1, #0
 800c1d2:	4618      	mov	r0, r3
 800c1d4:	f001 fc1e 	bl	800da14 <TIM_CCxChannelCmd>
      break;
 800c1d8:	e016      	b.n	800c208 <HAL_TIM_Encoder_Start+0x148>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	2201      	movs	r2, #1
 800c1e0:	2104      	movs	r1, #4
 800c1e2:	4618      	mov	r0, r3
 800c1e4:	f001 fc16 	bl	800da14 <TIM_CCxChannelCmd>
      break;
 800c1e8:	e00e      	b.n	800c208 <HAL_TIM_Encoder_Start+0x148>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	2201      	movs	r2, #1
 800c1f0:	2100      	movs	r1, #0
 800c1f2:	4618      	mov	r0, r3
 800c1f4:	f001 fc0e 	bl	800da14 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	2201      	movs	r2, #1
 800c1fe:	2104      	movs	r1, #4
 800c200:	4618      	mov	r0, r3
 800c202:	f001 fc07 	bl	800da14 <TIM_CCxChannelCmd>
      break;
 800c206:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	681a      	ldr	r2, [r3, #0]
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	f042 0201 	orr.w	r2, r2, #1
 800c216:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800c218:	2300      	movs	r3, #0
}
 800c21a:	4618      	mov	r0, r3
 800c21c:	3710      	adds	r7, #16
 800c21e:	46bd      	mov	sp, r7
 800c220:	bd80      	pop	{r7, pc}
 800c222:	bf00      	nop
 800c224:	40012c00 	.word	0x40012c00
 800c228:	40000400 	.word	0x40000400
 800c22c:	40000800 	.word	0x40000800
 800c230:	40000c00 	.word	0x40000c00
 800c234:	40013400 	.word	0x40013400
 800c238:	08010bb8 	.word	0x08010bb8

0800c23c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c23c:	b580      	push	{r7, lr}
 800c23e:	b084      	sub	sp, #16
 800c240:	af00      	add	r7, sp, #0
 800c242:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	68db      	ldr	r3, [r3, #12]
 800c24a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	691b      	ldr	r3, [r3, #16]
 800c252:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800c254:	68bb      	ldr	r3, [r7, #8]
 800c256:	f003 0302 	and.w	r3, r3, #2
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d020      	beq.n	800c2a0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	f003 0302 	and.w	r3, r3, #2
 800c264:	2b00      	cmp	r3, #0
 800c266:	d01b      	beq.n	800c2a0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	f06f 0202 	mvn.w	r2, #2
 800c270:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	2201      	movs	r2, #1
 800c276:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	699b      	ldr	r3, [r3, #24]
 800c27e:	f003 0303 	and.w	r3, r3, #3
 800c282:	2b00      	cmp	r3, #0
 800c284:	d003      	beq.n	800c28e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c286:	6878      	ldr	r0, [r7, #4]
 800c288:	f000 ff06 	bl	800d098 <HAL_TIM_IC_CaptureCallback>
 800c28c:	e005      	b.n	800c29a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c28e:	6878      	ldr	r0, [r7, #4]
 800c290:	f000 fef8 	bl	800d084 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c294:	6878      	ldr	r0, [r7, #4]
 800c296:	f000 ff09 	bl	800d0ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	2200      	movs	r2, #0
 800c29e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800c2a0:	68bb      	ldr	r3, [r7, #8]
 800c2a2:	f003 0304 	and.w	r3, r3, #4
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d020      	beq.n	800c2ec <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	f003 0304 	and.w	r3, r3, #4
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d01b      	beq.n	800c2ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	f06f 0204 	mvn.w	r2, #4
 800c2bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	2202      	movs	r2, #2
 800c2c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	699b      	ldr	r3, [r3, #24]
 800c2ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d003      	beq.n	800c2da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c2d2:	6878      	ldr	r0, [r7, #4]
 800c2d4:	f000 fee0 	bl	800d098 <HAL_TIM_IC_CaptureCallback>
 800c2d8:	e005      	b.n	800c2e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c2da:	6878      	ldr	r0, [r7, #4]
 800c2dc:	f000 fed2 	bl	800d084 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c2e0:	6878      	ldr	r0, [r7, #4]
 800c2e2:	f000 fee3 	bl	800d0ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	2200      	movs	r2, #0
 800c2ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800c2ec:	68bb      	ldr	r3, [r7, #8]
 800c2ee:	f003 0308 	and.w	r3, r3, #8
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d020      	beq.n	800c338 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	f003 0308 	and.w	r3, r3, #8
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d01b      	beq.n	800c338 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	f06f 0208 	mvn.w	r2, #8
 800c308:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	2204      	movs	r2, #4
 800c30e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	69db      	ldr	r3, [r3, #28]
 800c316:	f003 0303 	and.w	r3, r3, #3
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d003      	beq.n	800c326 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c31e:	6878      	ldr	r0, [r7, #4]
 800c320:	f000 feba 	bl	800d098 <HAL_TIM_IC_CaptureCallback>
 800c324:	e005      	b.n	800c332 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c326:	6878      	ldr	r0, [r7, #4]
 800c328:	f000 feac 	bl	800d084 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c32c:	6878      	ldr	r0, [r7, #4]
 800c32e:	f000 febd 	bl	800d0ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	2200      	movs	r2, #0
 800c336:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800c338:	68bb      	ldr	r3, [r7, #8]
 800c33a:	f003 0310 	and.w	r3, r3, #16
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d020      	beq.n	800c384 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	f003 0310 	and.w	r3, r3, #16
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d01b      	beq.n	800c384 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	f06f 0210 	mvn.w	r2, #16
 800c354:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	2208      	movs	r2, #8
 800c35a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	69db      	ldr	r3, [r3, #28]
 800c362:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c366:	2b00      	cmp	r3, #0
 800c368:	d003      	beq.n	800c372 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c36a:	6878      	ldr	r0, [r7, #4]
 800c36c:	f000 fe94 	bl	800d098 <HAL_TIM_IC_CaptureCallback>
 800c370:	e005      	b.n	800c37e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c372:	6878      	ldr	r0, [r7, #4]
 800c374:	f000 fe86 	bl	800d084 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c378:	6878      	ldr	r0, [r7, #4]
 800c37a:	f000 fe97 	bl	800d0ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	2200      	movs	r2, #0
 800c382:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800c384:	68bb      	ldr	r3, [r7, #8]
 800c386:	f003 0301 	and.w	r3, r3, #1
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d00c      	beq.n	800c3a8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	f003 0301 	and.w	r3, r3, #1
 800c394:	2b00      	cmp	r3, #0
 800c396:	d007      	beq.n	800c3a8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	f06f 0201 	mvn.w	r2, #1
 800c3a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c3a2:	6878      	ldr	r0, [r7, #4]
 800c3a4:	f7f8 fcea 	bl	8004d7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c3a8:	68bb      	ldr	r3, [r7, #8]
 800c3aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d104      	bne.n	800c3bc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800c3b2:	68bb      	ldr	r3, [r7, #8]
 800c3b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d00c      	beq.n	800c3d6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d007      	beq.n	800c3d6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800c3ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c3d0:	6878      	ldr	r0, [r7, #4]
 800c3d2:	f001 fe2f 	bl	800e034 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800c3d6:	68bb      	ldr	r3, [r7, #8]
 800c3d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d00c      	beq.n	800c3fa <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d007      	beq.n	800c3fa <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800c3f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c3f4:	6878      	ldr	r0, [r7, #4]
 800c3f6:	f001 fe27 	bl	800e048 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800c3fa:	68bb      	ldr	r3, [r7, #8]
 800c3fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c400:	2b00      	cmp	r3, #0
 800c402:	d00c      	beq.n	800c41e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d007      	beq.n	800c41e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800c416:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c418:	6878      	ldr	r0, [r7, #4]
 800c41a:	f000 fe51 	bl	800d0c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800c41e:	68bb      	ldr	r3, [r7, #8]
 800c420:	f003 0320 	and.w	r3, r3, #32
 800c424:	2b00      	cmp	r3, #0
 800c426:	d00c      	beq.n	800c442 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	f003 0320 	and.w	r3, r3, #32
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d007      	beq.n	800c442 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	f06f 0220 	mvn.w	r2, #32
 800c43a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c43c:	6878      	ldr	r0, [r7, #4]
 800c43e:	f001 fdef 	bl	800e020 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c442:	bf00      	nop
 800c444:	3710      	adds	r7, #16
 800c446:	46bd      	mov	sp, r7
 800c448:	bd80      	pop	{r7, pc}
	...

0800c44c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c44c:	b580      	push	{r7, lr}
 800c44e:	b086      	sub	sp, #24
 800c450:	af00      	add	r7, sp, #0
 800c452:	60f8      	str	r0, [r7, #12]
 800c454:	60b9      	str	r1, [r7, #8]
 800c456:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c458:	2300      	movs	r3, #0
 800c45a:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d016      	beq.n	800c490 <HAL_TIM_PWM_ConfigChannel+0x44>
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	2b04      	cmp	r3, #4
 800c466:	d013      	beq.n	800c490 <HAL_TIM_PWM_ConfigChannel+0x44>
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	2b08      	cmp	r3, #8
 800c46c:	d010      	beq.n	800c490 <HAL_TIM_PWM_ConfigChannel+0x44>
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	2b0c      	cmp	r3, #12
 800c472:	d00d      	beq.n	800c490 <HAL_TIM_PWM_ConfigChannel+0x44>
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	2b10      	cmp	r3, #16
 800c478:	d00a      	beq.n	800c490 <HAL_TIM_PWM_ConfigChannel+0x44>
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	2b14      	cmp	r3, #20
 800c47e:	d007      	beq.n	800c490 <HAL_TIM_PWM_ConfigChannel+0x44>
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	2b3c      	cmp	r3, #60	@ 0x3c
 800c484:	d004      	beq.n	800c490 <HAL_TIM_PWM_ConfigChannel+0x44>
 800c486:	f241 01b3 	movw	r1, #4275	@ 0x10b3
 800c48a:	488b      	ldr	r0, [pc, #556]	@ (800c6b8 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 800c48c:	f7f9 fc46 	bl	8005d1c <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 800c490:	68bb      	ldr	r3, [r7, #8]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	2b60      	cmp	r3, #96	@ 0x60
 800c496:	d01c      	beq.n	800c4d2 <HAL_TIM_PWM_ConfigChannel+0x86>
 800c498:	68bb      	ldr	r3, [r7, #8]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	2b70      	cmp	r3, #112	@ 0x70
 800c49e:	d018      	beq.n	800c4d2 <HAL_TIM_PWM_ConfigChannel+0x86>
 800c4a0:	68bb      	ldr	r3, [r7, #8]
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	4a85      	ldr	r2, [pc, #532]	@ (800c6bc <HAL_TIM_PWM_ConfigChannel+0x270>)
 800c4a6:	4293      	cmp	r3, r2
 800c4a8:	d013      	beq.n	800c4d2 <HAL_TIM_PWM_ConfigChannel+0x86>
 800c4aa:	68bb      	ldr	r3, [r7, #8]
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	4a84      	ldr	r2, [pc, #528]	@ (800c6c0 <HAL_TIM_PWM_ConfigChannel+0x274>)
 800c4b0:	4293      	cmp	r3, r2
 800c4b2:	d00e      	beq.n	800c4d2 <HAL_TIM_PWM_ConfigChannel+0x86>
 800c4b4:	68bb      	ldr	r3, [r7, #8]
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	4a82      	ldr	r2, [pc, #520]	@ (800c6c4 <HAL_TIM_PWM_ConfigChannel+0x278>)
 800c4ba:	4293      	cmp	r3, r2
 800c4bc:	d009      	beq.n	800c4d2 <HAL_TIM_PWM_ConfigChannel+0x86>
 800c4be:	68bb      	ldr	r3, [r7, #8]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	4a81      	ldr	r2, [pc, #516]	@ (800c6c8 <HAL_TIM_PWM_ConfigChannel+0x27c>)
 800c4c4:	4293      	cmp	r3, r2
 800c4c6:	d004      	beq.n	800c4d2 <HAL_TIM_PWM_ConfigChannel+0x86>
 800c4c8:	f241 01b4 	movw	r1, #4276	@ 0x10b4
 800c4cc:	487a      	ldr	r0, [pc, #488]	@ (800c6b8 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 800c4ce:	f7f9 fc25 	bl	8005d1c <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 800c4d2:	68bb      	ldr	r3, [r7, #8]
 800c4d4:	689b      	ldr	r3, [r3, #8]
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d008      	beq.n	800c4ec <HAL_TIM_PWM_ConfigChannel+0xa0>
 800c4da:	68bb      	ldr	r3, [r7, #8]
 800c4dc:	689b      	ldr	r3, [r3, #8]
 800c4de:	2b02      	cmp	r3, #2
 800c4e0:	d004      	beq.n	800c4ec <HAL_TIM_PWM_ConfigChannel+0xa0>
 800c4e2:	f241 01b5 	movw	r1, #4277	@ 0x10b5
 800c4e6:	4874      	ldr	r0, [pc, #464]	@ (800c6b8 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 800c4e8:	f7f9 fc18 	bl	8005d1c <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 800c4ec:	68bb      	ldr	r3, [r7, #8]
 800c4ee:	691b      	ldr	r3, [r3, #16]
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d008      	beq.n	800c506 <HAL_TIM_PWM_ConfigChannel+0xba>
 800c4f4:	68bb      	ldr	r3, [r7, #8]
 800c4f6:	691b      	ldr	r3, [r3, #16]
 800c4f8:	2b04      	cmp	r3, #4
 800c4fa:	d004      	beq.n	800c506 <HAL_TIM_PWM_ConfigChannel+0xba>
 800c4fc:	f241 01b6 	movw	r1, #4278	@ 0x10b6
 800c500:	486d      	ldr	r0, [pc, #436]	@ (800c6b8 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 800c502:	f7f9 fc0b 	bl	8005d1c <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c50c:	2b01      	cmp	r3, #1
 800c50e:	d101      	bne.n	800c514 <HAL_TIM_PWM_ConfigChannel+0xc8>
 800c510:	2302      	movs	r3, #2
 800c512:	e1d9      	b.n	800c8c8 <HAL_TIM_PWM_ConfigChannel+0x47c>
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	2201      	movs	r2, #1
 800c518:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	2b14      	cmp	r3, #20
 800c520:	f200 81ca 	bhi.w	800c8b8 <HAL_TIM_PWM_ConfigChannel+0x46c>
 800c524:	a201      	add	r2, pc, #4	@ (adr r2, 800c52c <HAL_TIM_PWM_ConfigChannel+0xe0>)
 800c526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c52a:	bf00      	nop
 800c52c:	0800c581 	.word	0x0800c581
 800c530:	0800c8b9 	.word	0x0800c8b9
 800c534:	0800c8b9 	.word	0x0800c8b9
 800c538:	0800c8b9 	.word	0x0800c8b9
 800c53c:	0800c625 	.word	0x0800c625
 800c540:	0800c8b9 	.word	0x0800c8b9
 800c544:	0800c8b9 	.word	0x0800c8b9
 800c548:	0800c8b9 	.word	0x0800c8b9
 800c54c:	0800c6ed 	.word	0x0800c6ed
 800c550:	0800c8b9 	.word	0x0800c8b9
 800c554:	0800c8b9 	.word	0x0800c8b9
 800c558:	0800c8b9 	.word	0x0800c8b9
 800c55c:	0800c773 	.word	0x0800c773
 800c560:	0800c8b9 	.word	0x0800c8b9
 800c564:	0800c8b9 	.word	0x0800c8b9
 800c568:	0800c8b9 	.word	0x0800c8b9
 800c56c:	0800c7fb 	.word	0x0800c7fb
 800c570:	0800c8b9 	.word	0x0800c8b9
 800c574:	0800c8b9 	.word	0x0800c8b9
 800c578:	0800c8b9 	.word	0x0800c8b9
 800c57c:	0800c859 	.word	0x0800c859
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	4a51      	ldr	r2, [pc, #324]	@ (800c6cc <HAL_TIM_PWM_ConfigChannel+0x280>)
 800c586:	4293      	cmp	r3, r2
 800c588:	d02c      	beq.n	800c5e4 <HAL_TIM_PWM_ConfigChannel+0x198>
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c592:	d027      	beq.n	800c5e4 <HAL_TIM_PWM_ConfigChannel+0x198>
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	4a4d      	ldr	r2, [pc, #308]	@ (800c6d0 <HAL_TIM_PWM_ConfigChannel+0x284>)
 800c59a:	4293      	cmp	r3, r2
 800c59c:	d022      	beq.n	800c5e4 <HAL_TIM_PWM_ConfigChannel+0x198>
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	4a4c      	ldr	r2, [pc, #304]	@ (800c6d4 <HAL_TIM_PWM_ConfigChannel+0x288>)
 800c5a4:	4293      	cmp	r3, r2
 800c5a6:	d01d      	beq.n	800c5e4 <HAL_TIM_PWM_ConfigChannel+0x198>
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	4a4a      	ldr	r2, [pc, #296]	@ (800c6d8 <HAL_TIM_PWM_ConfigChannel+0x28c>)
 800c5ae:	4293      	cmp	r3, r2
 800c5b0:	d018      	beq.n	800c5e4 <HAL_TIM_PWM_ConfigChannel+0x198>
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	4a49      	ldr	r2, [pc, #292]	@ (800c6dc <HAL_TIM_PWM_ConfigChannel+0x290>)
 800c5b8:	4293      	cmp	r3, r2
 800c5ba:	d013      	beq.n	800c5e4 <HAL_TIM_PWM_ConfigChannel+0x198>
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	4a47      	ldr	r2, [pc, #284]	@ (800c6e0 <HAL_TIM_PWM_ConfigChannel+0x294>)
 800c5c2:	4293      	cmp	r3, r2
 800c5c4:	d00e      	beq.n	800c5e4 <HAL_TIM_PWM_ConfigChannel+0x198>
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	4a46      	ldr	r2, [pc, #280]	@ (800c6e4 <HAL_TIM_PWM_ConfigChannel+0x298>)
 800c5cc:	4293      	cmp	r3, r2
 800c5ce:	d009      	beq.n	800c5e4 <HAL_TIM_PWM_ConfigChannel+0x198>
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	4a44      	ldr	r2, [pc, #272]	@ (800c6e8 <HAL_TIM_PWM_ConfigChannel+0x29c>)
 800c5d6:	4293      	cmp	r3, r2
 800c5d8:	d004      	beq.n	800c5e4 <HAL_TIM_PWM_ConfigChannel+0x198>
 800c5da:	f44f 5186 	mov.w	r1, #4288	@ 0x10c0
 800c5de:	4836      	ldr	r0, [pc, #216]	@ (800c6b8 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 800c5e0:	f7f9 fb9c 	bl	8005d1c <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	68b9      	ldr	r1, [r7, #8]
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	f000 fe18 	bl	800d220 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	699a      	ldr	r2, [r3, #24]
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	f042 0208 	orr.w	r2, r2, #8
 800c5fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	699a      	ldr	r2, [r3, #24]
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	f022 0204 	bic.w	r2, r2, #4
 800c60e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	6999      	ldr	r1, [r3, #24]
 800c616:	68bb      	ldr	r3, [r7, #8]
 800c618:	691a      	ldr	r2, [r3, #16]
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	430a      	orrs	r2, r1
 800c620:	619a      	str	r2, [r3, #24]
      break;
 800c622:	e14c      	b.n	800c8be <HAL_TIM_PWM_ConfigChannel+0x472>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	4a28      	ldr	r2, [pc, #160]	@ (800c6cc <HAL_TIM_PWM_ConfigChannel+0x280>)
 800c62a:	4293      	cmp	r3, r2
 800c62c:	d022      	beq.n	800c674 <HAL_TIM_PWM_ConfigChannel+0x228>
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c636:	d01d      	beq.n	800c674 <HAL_TIM_PWM_ConfigChannel+0x228>
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	4a24      	ldr	r2, [pc, #144]	@ (800c6d0 <HAL_TIM_PWM_ConfigChannel+0x284>)
 800c63e:	4293      	cmp	r3, r2
 800c640:	d018      	beq.n	800c674 <HAL_TIM_PWM_ConfigChannel+0x228>
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	4a23      	ldr	r2, [pc, #140]	@ (800c6d4 <HAL_TIM_PWM_ConfigChannel+0x288>)
 800c648:	4293      	cmp	r3, r2
 800c64a:	d013      	beq.n	800c674 <HAL_TIM_PWM_ConfigChannel+0x228>
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	4a21      	ldr	r2, [pc, #132]	@ (800c6d8 <HAL_TIM_PWM_ConfigChannel+0x28c>)
 800c652:	4293      	cmp	r3, r2
 800c654:	d00e      	beq.n	800c674 <HAL_TIM_PWM_ConfigChannel+0x228>
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	4a20      	ldr	r2, [pc, #128]	@ (800c6dc <HAL_TIM_PWM_ConfigChannel+0x290>)
 800c65c:	4293      	cmp	r3, r2
 800c65e:	d009      	beq.n	800c674 <HAL_TIM_PWM_ConfigChannel+0x228>
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	4a1e      	ldr	r2, [pc, #120]	@ (800c6e0 <HAL_TIM_PWM_ConfigChannel+0x294>)
 800c666:	4293      	cmp	r3, r2
 800c668:	d004      	beq.n	800c674 <HAL_TIM_PWM_ConfigChannel+0x228>
 800c66a:	f241 01d1 	movw	r1, #4305	@ 0x10d1
 800c66e:	4812      	ldr	r0, [pc, #72]	@ (800c6b8 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 800c670:	f7f9 fb54 	bl	8005d1c <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	68b9      	ldr	r1, [r7, #8]
 800c67a:	4618      	mov	r0, r3
 800c67c:	f000 fe8a 	bl	800d394 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	699a      	ldr	r2, [r3, #24]
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c68e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	699a      	ldr	r2, [r3, #24]
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c69e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	6999      	ldr	r1, [r3, #24]
 800c6a6:	68bb      	ldr	r3, [r7, #8]
 800c6a8:	691b      	ldr	r3, [r3, #16]
 800c6aa:	021a      	lsls	r2, r3, #8
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	430a      	orrs	r2, r1
 800c6b2:	619a      	str	r2, [r3, #24]
      break;
 800c6b4:	e103      	b.n	800c8be <HAL_TIM_PWM_ConfigChannel+0x472>
 800c6b6:	bf00      	nop
 800c6b8:	08010bb8 	.word	0x08010bb8
 800c6bc:	00010040 	.word	0x00010040
 800c6c0:	00010050 	.word	0x00010050
 800c6c4:	00010060 	.word	0x00010060
 800c6c8:	00010070 	.word	0x00010070
 800c6cc:	40012c00 	.word	0x40012c00
 800c6d0:	40000400 	.word	0x40000400
 800c6d4:	40000800 	.word	0x40000800
 800c6d8:	40000c00 	.word	0x40000c00
 800c6dc:	40013400 	.word	0x40013400
 800c6e0:	40014000 	.word	0x40014000
 800c6e4:	40014400 	.word	0x40014400
 800c6e8:	40014800 	.word	0x40014800
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	4a77      	ldr	r2, [pc, #476]	@ (800c8d0 <HAL_TIM_PWM_ConfigChannel+0x484>)
 800c6f2:	4293      	cmp	r3, r2
 800c6f4:	d01d      	beq.n	800c732 <HAL_TIM_PWM_ConfigChannel+0x2e6>
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c6fe:	d018      	beq.n	800c732 <HAL_TIM_PWM_ConfigChannel+0x2e6>
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	4a73      	ldr	r2, [pc, #460]	@ (800c8d4 <HAL_TIM_PWM_ConfigChannel+0x488>)
 800c706:	4293      	cmp	r3, r2
 800c708:	d013      	beq.n	800c732 <HAL_TIM_PWM_ConfigChannel+0x2e6>
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	4a72      	ldr	r2, [pc, #456]	@ (800c8d8 <HAL_TIM_PWM_ConfigChannel+0x48c>)
 800c710:	4293      	cmp	r3, r2
 800c712:	d00e      	beq.n	800c732 <HAL_TIM_PWM_ConfigChannel+0x2e6>
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	4a70      	ldr	r2, [pc, #448]	@ (800c8dc <HAL_TIM_PWM_ConfigChannel+0x490>)
 800c71a:	4293      	cmp	r3, r2
 800c71c:	d009      	beq.n	800c732 <HAL_TIM_PWM_ConfigChannel+0x2e6>
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	4a6f      	ldr	r2, [pc, #444]	@ (800c8e0 <HAL_TIM_PWM_ConfigChannel+0x494>)
 800c724:	4293      	cmp	r3, r2
 800c726:	d004      	beq.n	800c732 <HAL_TIM_PWM_ConfigChannel+0x2e6>
 800c728:	f241 01e2 	movw	r1, #4322	@ 0x10e2
 800c72c:	486d      	ldr	r0, [pc, #436]	@ (800c8e4 <HAL_TIM_PWM_ConfigChannel+0x498>)
 800c72e:	f7f9 faf5 	bl	8005d1c <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	68b9      	ldr	r1, [r7, #8]
 800c738:	4618      	mov	r0, r3
 800c73a:	f000 fedd 	bl	800d4f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	69da      	ldr	r2, [r3, #28]
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	f042 0208 	orr.w	r2, r2, #8
 800c74c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	69da      	ldr	r2, [r3, #28]
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	f022 0204 	bic.w	r2, r2, #4
 800c75c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	69d9      	ldr	r1, [r3, #28]
 800c764:	68bb      	ldr	r3, [r7, #8]
 800c766:	691a      	ldr	r2, [r3, #16]
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	430a      	orrs	r2, r1
 800c76e:	61da      	str	r2, [r3, #28]
      break;
 800c770:	e0a5      	b.n	800c8be <HAL_TIM_PWM_ConfigChannel+0x472>
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	4a56      	ldr	r2, [pc, #344]	@ (800c8d0 <HAL_TIM_PWM_ConfigChannel+0x484>)
 800c778:	4293      	cmp	r3, r2
 800c77a:	d01d      	beq.n	800c7b8 <HAL_TIM_PWM_ConfigChannel+0x36c>
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c784:	d018      	beq.n	800c7b8 <HAL_TIM_PWM_ConfigChannel+0x36c>
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	4a52      	ldr	r2, [pc, #328]	@ (800c8d4 <HAL_TIM_PWM_ConfigChannel+0x488>)
 800c78c:	4293      	cmp	r3, r2
 800c78e:	d013      	beq.n	800c7b8 <HAL_TIM_PWM_ConfigChannel+0x36c>
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	4a50      	ldr	r2, [pc, #320]	@ (800c8d8 <HAL_TIM_PWM_ConfigChannel+0x48c>)
 800c796:	4293      	cmp	r3, r2
 800c798:	d00e      	beq.n	800c7b8 <HAL_TIM_PWM_ConfigChannel+0x36c>
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	4a4f      	ldr	r2, [pc, #316]	@ (800c8dc <HAL_TIM_PWM_ConfigChannel+0x490>)
 800c7a0:	4293      	cmp	r3, r2
 800c7a2:	d009      	beq.n	800c7b8 <HAL_TIM_PWM_ConfigChannel+0x36c>
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	4a4d      	ldr	r2, [pc, #308]	@ (800c8e0 <HAL_TIM_PWM_ConfigChannel+0x494>)
 800c7aa:	4293      	cmp	r3, r2
 800c7ac:	d004      	beq.n	800c7b8 <HAL_TIM_PWM_ConfigChannel+0x36c>
 800c7ae:	f241 01f3 	movw	r1, #4339	@ 0x10f3
 800c7b2:	484c      	ldr	r0, [pc, #304]	@ (800c8e4 <HAL_TIM_PWM_ConfigChannel+0x498>)
 800c7b4:	f7f9 fab2 	bl	8005d1c <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	68b9      	ldr	r1, [r7, #8]
 800c7be:	4618      	mov	r0, r3
 800c7c0:	f000 ff4c 	bl	800d65c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	69da      	ldr	r2, [r3, #28]
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c7d2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	69da      	ldr	r2, [r3, #28]
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c7e2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	69d9      	ldr	r1, [r3, #28]
 800c7ea:	68bb      	ldr	r3, [r7, #8]
 800c7ec:	691b      	ldr	r3, [r3, #16]
 800c7ee:	021a      	lsls	r2, r3, #8
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	430a      	orrs	r2, r1
 800c7f6:	61da      	str	r2, [r3, #28]
      break;
 800c7f8:	e061      	b.n	800c8be <HAL_TIM_PWM_ConfigChannel+0x472>
    }

    case TIM_CHANNEL_5:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	4a34      	ldr	r2, [pc, #208]	@ (800c8d0 <HAL_TIM_PWM_ConfigChannel+0x484>)
 800c800:	4293      	cmp	r3, r2
 800c802:	d009      	beq.n	800c818 <HAL_TIM_PWM_ConfigChannel+0x3cc>
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	4a35      	ldr	r2, [pc, #212]	@ (800c8e0 <HAL_TIM_PWM_ConfigChannel+0x494>)
 800c80a:	4293      	cmp	r3, r2
 800c80c:	d004      	beq.n	800c818 <HAL_TIM_PWM_ConfigChannel+0x3cc>
 800c80e:	f241 1104 	movw	r1, #4356	@ 0x1104
 800c812:	4834      	ldr	r0, [pc, #208]	@ (800c8e4 <HAL_TIM_PWM_ConfigChannel+0x498>)
 800c814:	f7f9 fa82 	bl	8005d1c <assert_failed>

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	68b9      	ldr	r1, [r7, #8]
 800c81e:	4618      	mov	r0, r3
 800c820:	f000 ff94 	bl	800d74c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	f042 0208 	orr.w	r2, r2, #8
 800c832:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	f022 0204 	bic.w	r2, r2, #4
 800c842:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800c84a:	68bb      	ldr	r3, [r7, #8]
 800c84c:	691a      	ldr	r2, [r3, #16]
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	430a      	orrs	r2, r1
 800c854:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800c856:	e032      	b.n	800c8be <HAL_TIM_PWM_ConfigChannel+0x472>
    }

    case TIM_CHANNEL_6:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	4a1c      	ldr	r2, [pc, #112]	@ (800c8d0 <HAL_TIM_PWM_ConfigChannel+0x484>)
 800c85e:	4293      	cmp	r3, r2
 800c860:	d009      	beq.n	800c876 <HAL_TIM_PWM_ConfigChannel+0x42a>
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	4a1e      	ldr	r2, [pc, #120]	@ (800c8e0 <HAL_TIM_PWM_ConfigChannel+0x494>)
 800c868:	4293      	cmp	r3, r2
 800c86a:	d004      	beq.n	800c876 <HAL_TIM_PWM_ConfigChannel+0x42a>
 800c86c:	f241 1115 	movw	r1, #4373	@ 0x1115
 800c870:	481c      	ldr	r0, [pc, #112]	@ (800c8e4 <HAL_TIM_PWM_ConfigChannel+0x498>)
 800c872:	f7f9 fa53 	bl	8005d1c <assert_failed>

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	68b9      	ldr	r1, [r7, #8]
 800c87c:	4618      	mov	r0, r3
 800c87e:	f000 ffc9 	bl	800d814 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c890:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c8a0:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800c8a8:	68bb      	ldr	r3, [r7, #8]
 800c8aa:	691b      	ldr	r3, [r3, #16]
 800c8ac:	021a      	lsls	r2, r3, #8
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	430a      	orrs	r2, r1
 800c8b4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800c8b6:	e002      	b.n	800c8be <HAL_TIM_PWM_ConfigChannel+0x472>
    }

    default:
      status = HAL_ERROR;
 800c8b8:	2301      	movs	r3, #1
 800c8ba:	75fb      	strb	r3, [r7, #23]
      break;
 800c8bc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	2200      	movs	r2, #0
 800c8c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c8c6:	7dfb      	ldrb	r3, [r7, #23]
}
 800c8c8:	4618      	mov	r0, r3
 800c8ca:	3718      	adds	r7, #24
 800c8cc:	46bd      	mov	sp, r7
 800c8ce:	bd80      	pop	{r7, pc}
 800c8d0:	40012c00 	.word	0x40012c00
 800c8d4:	40000400 	.word	0x40000400
 800c8d8:	40000800 	.word	0x40000800
 800c8dc:	40000c00 	.word	0x40000c00
 800c8e0:	40013400 	.word	0x40013400
 800c8e4:	08010bb8 	.word	0x08010bb8

0800c8e8 <HAL_TIM_GenerateEvent>:
  *         only for timer instances supporting break input(s).
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_TIM_GenerateEvent(TIM_HandleTypeDef *htim, uint32_t EventSource)
{
 800c8e8:	b580      	push	{r7, lr}
 800c8ea:	b082      	sub	sp, #8
 800c8ec:	af00      	add	r7, sp, #0
 800c8ee:	6078      	str	r0, [r7, #4]
 800c8f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	4a33      	ldr	r2, [pc, #204]	@ (800c9c4 <HAL_TIM_GenerateEvent+0xdc>)
 800c8f8:	4293      	cmp	r3, r2
 800c8fa:	d036      	beq.n	800c96a <HAL_TIM_GenerateEvent+0x82>
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c904:	d031      	beq.n	800c96a <HAL_TIM_GenerateEvent+0x82>
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	4a2f      	ldr	r2, [pc, #188]	@ (800c9c8 <HAL_TIM_GenerateEvent+0xe0>)
 800c90c:	4293      	cmp	r3, r2
 800c90e:	d02c      	beq.n	800c96a <HAL_TIM_GenerateEvent+0x82>
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	4a2d      	ldr	r2, [pc, #180]	@ (800c9cc <HAL_TIM_GenerateEvent+0xe4>)
 800c916:	4293      	cmp	r3, r2
 800c918:	d027      	beq.n	800c96a <HAL_TIM_GenerateEvent+0x82>
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	4a2c      	ldr	r2, [pc, #176]	@ (800c9d0 <HAL_TIM_GenerateEvent+0xe8>)
 800c920:	4293      	cmp	r3, r2
 800c922:	d022      	beq.n	800c96a <HAL_TIM_GenerateEvent+0x82>
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	4a2a      	ldr	r2, [pc, #168]	@ (800c9d4 <HAL_TIM_GenerateEvent+0xec>)
 800c92a:	4293      	cmp	r3, r2
 800c92c:	d01d      	beq.n	800c96a <HAL_TIM_GenerateEvent+0x82>
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	4a29      	ldr	r2, [pc, #164]	@ (800c9d8 <HAL_TIM_GenerateEvent+0xf0>)
 800c934:	4293      	cmp	r3, r2
 800c936:	d018      	beq.n	800c96a <HAL_TIM_GenerateEvent+0x82>
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	4a27      	ldr	r2, [pc, #156]	@ (800c9dc <HAL_TIM_GenerateEvent+0xf4>)
 800c93e:	4293      	cmp	r3, r2
 800c940:	d013      	beq.n	800c96a <HAL_TIM_GenerateEvent+0x82>
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	4a26      	ldr	r2, [pc, #152]	@ (800c9e0 <HAL_TIM_GenerateEvent+0xf8>)
 800c948:	4293      	cmp	r3, r2
 800c94a:	d00e      	beq.n	800c96a <HAL_TIM_GenerateEvent+0x82>
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	4a24      	ldr	r2, [pc, #144]	@ (800c9e4 <HAL_TIM_GenerateEvent+0xfc>)
 800c952:	4293      	cmp	r3, r2
 800c954:	d009      	beq.n	800c96a <HAL_TIM_GenerateEvent+0x82>
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	4a23      	ldr	r2, [pc, #140]	@ (800c9e8 <HAL_TIM_GenerateEvent+0x100>)
 800c95c:	4293      	cmp	r3, r2
 800c95e:	d004      	beq.n	800c96a <HAL_TIM_GenerateEvent+0x82>
 800c960:	f44f 51a4 	mov.w	r1, #5248	@ 0x1480
 800c964:	4821      	ldr	r0, [pc, #132]	@ (800c9ec <HAL_TIM_GenerateEvent+0x104>)
 800c966:	f7f9 f9d9 	bl	8005d1c <assert_failed>
  assert_param(IS_TIM_EVENT_SOURCE(EventSource));
 800c96a:	683b      	ldr	r3, [r7, #0]
 800c96c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c970:	d202      	bcs.n	800c978 <HAL_TIM_GenerateEvent+0x90>
 800c972:	683b      	ldr	r3, [r7, #0]
 800c974:	2b00      	cmp	r3, #0
 800c976:	d104      	bne.n	800c982 <HAL_TIM_GenerateEvent+0x9a>
 800c978:	f241 4181 	movw	r1, #5249	@ 0x1481
 800c97c:	481b      	ldr	r0, [pc, #108]	@ (800c9ec <HAL_TIM_GenerateEvent+0x104>)
 800c97e:	f7f9 f9cd 	bl	8005d1c <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c988:	2b01      	cmp	r3, #1
 800c98a:	d101      	bne.n	800c990 <HAL_TIM_GenerateEvent+0xa8>
 800c98c:	2302      	movs	r3, #2
 800c98e:	e014      	b.n	800c9ba <HAL_TIM_GenerateEvent+0xd2>
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	2201      	movs	r2, #1
 800c994:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	2202      	movs	r2, #2
 800c99c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the event sources */
  htim->Instance->EGR = EventSource;
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	683a      	ldr	r2, [r7, #0]
 800c9a6:	615a      	str	r2, [r3, #20]

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	2201      	movs	r2, #1
 800c9ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	2200      	movs	r2, #0
 800c9b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800c9b8:	2300      	movs	r3, #0
}
 800c9ba:	4618      	mov	r0, r3
 800c9bc:	3708      	adds	r7, #8
 800c9be:	46bd      	mov	sp, r7
 800c9c0:	bd80      	pop	{r7, pc}
 800c9c2:	bf00      	nop
 800c9c4:	40012c00 	.word	0x40012c00
 800c9c8:	40000400 	.word	0x40000400
 800c9cc:	40000800 	.word	0x40000800
 800c9d0:	40000c00 	.word	0x40000c00
 800c9d4:	40001000 	.word	0x40001000
 800c9d8:	40001400 	.word	0x40001400
 800c9dc:	40013400 	.word	0x40013400
 800c9e0:	40014000 	.word	0x40014000
 800c9e4:	40014400 	.word	0x40014400
 800c9e8:	40014800 	.word	0x40014800
 800c9ec:	08010bb8 	.word	0x08010bb8

0800c9f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c9f0:	b580      	push	{r7, lr}
 800c9f2:	b084      	sub	sp, #16
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	6078      	str	r0, [r7, #4]
 800c9f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c9fa:	2300      	movs	r3, #0
 800c9fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ca04:	2b01      	cmp	r3, #1
 800ca06:	d101      	bne.n	800ca0c <HAL_TIM_ConfigClockSource+0x1c>
 800ca08:	2302      	movs	r3, #2
 800ca0a:	e329      	b.n	800d060 <HAL_TIM_ConfigClockSource+0x670>
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	2201      	movs	r2, #1
 800ca10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	2202      	movs	r2, #2
 800ca18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800ca1c:	683b      	ldr	r3, [r7, #0]
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ca24:	d029      	beq.n	800ca7a <HAL_TIM_ConfigClockSource+0x8a>
 800ca26:	683b      	ldr	r3, [r7, #0]
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	2b70      	cmp	r3, #112	@ 0x70
 800ca2c:	d025      	beq.n	800ca7a <HAL_TIM_ConfigClockSource+0x8a>
 800ca2e:	683b      	ldr	r3, [r7, #0]
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ca36:	d020      	beq.n	800ca7a <HAL_TIM_ConfigClockSource+0x8a>
 800ca38:	683b      	ldr	r3, [r7, #0]
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	2b40      	cmp	r3, #64	@ 0x40
 800ca3e:	d01c      	beq.n	800ca7a <HAL_TIM_ConfigClockSource+0x8a>
 800ca40:	683b      	ldr	r3, [r7, #0]
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	2b50      	cmp	r3, #80	@ 0x50
 800ca46:	d018      	beq.n	800ca7a <HAL_TIM_ConfigClockSource+0x8a>
 800ca48:	683b      	ldr	r3, [r7, #0]
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	2b60      	cmp	r3, #96	@ 0x60
 800ca4e:	d014      	beq.n	800ca7a <HAL_TIM_ConfigClockSource+0x8a>
 800ca50:	683b      	ldr	r3, [r7, #0]
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d010      	beq.n	800ca7a <HAL_TIM_ConfigClockSource+0x8a>
 800ca58:	683b      	ldr	r3, [r7, #0]
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	2b10      	cmp	r3, #16
 800ca5e:	d00c      	beq.n	800ca7a <HAL_TIM_ConfigClockSource+0x8a>
 800ca60:	683b      	ldr	r3, [r7, #0]
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	2b20      	cmp	r3, #32
 800ca66:	d008      	beq.n	800ca7a <HAL_TIM_ConfigClockSource+0x8a>
 800ca68:	683b      	ldr	r3, [r7, #0]
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	2b30      	cmp	r3, #48	@ 0x30
 800ca6e:	d004      	beq.n	800ca7a <HAL_TIM_ConfigClockSource+0x8a>
 800ca70:	f241 5156 	movw	r1, #5462	@ 0x1556
 800ca74:	4888      	ldr	r0, [pc, #544]	@ (800cc98 <HAL_TIM_ConfigClockSource+0x2a8>)
 800ca76:	f7f9 f951 	bl	8005d1c <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	689b      	ldr	r3, [r3, #8]
 800ca80:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ca82:	68bb      	ldr	r3, [r7, #8]
 800ca84:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ca88:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800ca8c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ca8e:	68bb      	ldr	r3, [r7, #8]
 800ca90:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ca94:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	68ba      	ldr	r2, [r7, #8]
 800ca9c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ca9e:	683b      	ldr	r3, [r7, #0]
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800caa6:	f000 810d 	beq.w	800ccc4 <HAL_TIM_ConfigClockSource+0x2d4>
 800caaa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800caae:	f200 82ca 	bhi.w	800d046 <HAL_TIM_ConfigClockSource+0x656>
 800cab2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cab6:	d02d      	beq.n	800cb14 <HAL_TIM_ConfigClockSource+0x124>
 800cab8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cabc:	f200 82c3 	bhi.w	800d046 <HAL_TIM_ConfigClockSource+0x656>
 800cac0:	2b70      	cmp	r3, #112	@ 0x70
 800cac2:	d06f      	beq.n	800cba4 <HAL_TIM_ConfigClockSource+0x1b4>
 800cac4:	2b70      	cmp	r3, #112	@ 0x70
 800cac6:	f200 82be 	bhi.w	800d046 <HAL_TIM_ConfigClockSource+0x656>
 800caca:	2b60      	cmp	r3, #96	@ 0x60
 800cacc:	f000 81d4 	beq.w	800ce78 <HAL_TIM_ConfigClockSource+0x488>
 800cad0:	2b60      	cmp	r3, #96	@ 0x60
 800cad2:	f200 82b8 	bhi.w	800d046 <HAL_TIM_ConfigClockSource+0x656>
 800cad6:	2b50      	cmp	r3, #80	@ 0x50
 800cad8:	f000 8165 	beq.w	800cda6 <HAL_TIM_ConfigClockSource+0x3b6>
 800cadc:	2b50      	cmp	r3, #80	@ 0x50
 800cade:	f200 82b2 	bhi.w	800d046 <HAL_TIM_ConfigClockSource+0x656>
 800cae2:	2b40      	cmp	r3, #64	@ 0x40
 800cae4:	f000 8223 	beq.w	800cf2e <HAL_TIM_ConfigClockSource+0x53e>
 800cae8:	2b40      	cmp	r3, #64	@ 0x40
 800caea:	f200 82ac 	bhi.w	800d046 <HAL_TIM_ConfigClockSource+0x656>
 800caee:	2b30      	cmp	r3, #48	@ 0x30
 800caf0:	f000 8278 	beq.w	800cfe4 <HAL_TIM_ConfigClockSource+0x5f4>
 800caf4:	2b30      	cmp	r3, #48	@ 0x30
 800caf6:	f200 82a6 	bhi.w	800d046 <HAL_TIM_ConfigClockSource+0x656>
 800cafa:	2b20      	cmp	r3, #32
 800cafc:	f000 8272 	beq.w	800cfe4 <HAL_TIM_ConfigClockSource+0x5f4>
 800cb00:	2b20      	cmp	r3, #32
 800cb02:	f200 82a0 	bhi.w	800d046 <HAL_TIM_ConfigClockSource+0x656>
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	f000 826c 	beq.w	800cfe4 <HAL_TIM_ConfigClockSource+0x5f4>
 800cb0c:	2b10      	cmp	r3, #16
 800cb0e:	f000 8269 	beq.w	800cfe4 <HAL_TIM_ConfigClockSource+0x5f4>
 800cb12:	e298      	b.n	800d046 <HAL_TIM_ConfigClockSource+0x656>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	4a60      	ldr	r2, [pc, #384]	@ (800cc9c <HAL_TIM_ConfigClockSource+0x2ac>)
 800cb1a:	4293      	cmp	r3, r2
 800cb1c:	f000 8296 	beq.w	800d04c <HAL_TIM_ConfigClockSource+0x65c>
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cb28:	f000 8290 	beq.w	800d04c <HAL_TIM_ConfigClockSource+0x65c>
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	4a5b      	ldr	r2, [pc, #364]	@ (800cca0 <HAL_TIM_ConfigClockSource+0x2b0>)
 800cb32:	4293      	cmp	r3, r2
 800cb34:	f000 828a 	beq.w	800d04c <HAL_TIM_ConfigClockSource+0x65c>
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	4a59      	ldr	r2, [pc, #356]	@ (800cca4 <HAL_TIM_ConfigClockSource+0x2b4>)
 800cb3e:	4293      	cmp	r3, r2
 800cb40:	f000 8284 	beq.w	800d04c <HAL_TIM_ConfigClockSource+0x65c>
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	4a57      	ldr	r2, [pc, #348]	@ (800cca8 <HAL_TIM_ConfigClockSource+0x2b8>)
 800cb4a:	4293      	cmp	r3, r2
 800cb4c:	f000 827e 	beq.w	800d04c <HAL_TIM_ConfigClockSource+0x65c>
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	4a55      	ldr	r2, [pc, #340]	@ (800ccac <HAL_TIM_ConfigClockSource+0x2bc>)
 800cb56:	4293      	cmp	r3, r2
 800cb58:	f000 8278 	beq.w	800d04c <HAL_TIM_ConfigClockSource+0x65c>
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	4a53      	ldr	r2, [pc, #332]	@ (800ccb0 <HAL_TIM_ConfigClockSource+0x2c0>)
 800cb62:	4293      	cmp	r3, r2
 800cb64:	f000 8272 	beq.w	800d04c <HAL_TIM_ConfigClockSource+0x65c>
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	4a51      	ldr	r2, [pc, #324]	@ (800ccb4 <HAL_TIM_ConfigClockSource+0x2c4>)
 800cb6e:	4293      	cmp	r3, r2
 800cb70:	f000 826c 	beq.w	800d04c <HAL_TIM_ConfigClockSource+0x65c>
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	4a4f      	ldr	r2, [pc, #316]	@ (800ccb8 <HAL_TIM_ConfigClockSource+0x2c8>)
 800cb7a:	4293      	cmp	r3, r2
 800cb7c:	f000 8266 	beq.w	800d04c <HAL_TIM_ConfigClockSource+0x65c>
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	4a4d      	ldr	r2, [pc, #308]	@ (800ccbc <HAL_TIM_ConfigClockSource+0x2cc>)
 800cb86:	4293      	cmp	r3, r2
 800cb88:	f000 8260 	beq.w	800d04c <HAL_TIM_ConfigClockSource+0x65c>
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	4a4b      	ldr	r2, [pc, #300]	@ (800ccc0 <HAL_TIM_ConfigClockSource+0x2d0>)
 800cb92:	4293      	cmp	r3, r2
 800cb94:	f000 825a 	beq.w	800d04c <HAL_TIM_ConfigClockSource+0x65c>
 800cb98:	f241 5162 	movw	r1, #5474	@ 0x1562
 800cb9c:	483e      	ldr	r0, [pc, #248]	@ (800cc98 <HAL_TIM_ConfigClockSource+0x2a8>)
 800cb9e:	f7f9 f8bd 	bl	8005d1c <assert_failed>
      break;
 800cba2:	e253      	b.n	800d04c <HAL_TIM_ConfigClockSource+0x65c>
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	4a3c      	ldr	r2, [pc, #240]	@ (800cc9c <HAL_TIM_ConfigClockSource+0x2ac>)
 800cbaa:	4293      	cmp	r3, r2
 800cbac:	d022      	beq.n	800cbf4 <HAL_TIM_ConfigClockSource+0x204>
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cbb6:	d01d      	beq.n	800cbf4 <HAL_TIM_ConfigClockSource+0x204>
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	4a38      	ldr	r2, [pc, #224]	@ (800cca0 <HAL_TIM_ConfigClockSource+0x2b0>)
 800cbbe:	4293      	cmp	r3, r2
 800cbc0:	d018      	beq.n	800cbf4 <HAL_TIM_ConfigClockSource+0x204>
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	4a37      	ldr	r2, [pc, #220]	@ (800cca4 <HAL_TIM_ConfigClockSource+0x2b4>)
 800cbc8:	4293      	cmp	r3, r2
 800cbca:	d013      	beq.n	800cbf4 <HAL_TIM_ConfigClockSource+0x204>
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	4a35      	ldr	r2, [pc, #212]	@ (800cca8 <HAL_TIM_ConfigClockSource+0x2b8>)
 800cbd2:	4293      	cmp	r3, r2
 800cbd4:	d00e      	beq.n	800cbf4 <HAL_TIM_ConfigClockSource+0x204>
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	4a36      	ldr	r2, [pc, #216]	@ (800ccb4 <HAL_TIM_ConfigClockSource+0x2c4>)
 800cbdc:	4293      	cmp	r3, r2
 800cbde:	d009      	beq.n	800cbf4 <HAL_TIM_ConfigClockSource+0x204>
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	4a34      	ldr	r2, [pc, #208]	@ (800ccb8 <HAL_TIM_ConfigClockSource+0x2c8>)
 800cbe6:	4293      	cmp	r3, r2
 800cbe8:	d004      	beq.n	800cbf4 <HAL_TIM_ConfigClockSource+0x204>
 800cbea:	f241 5169 	movw	r1, #5481	@ 0x1569
 800cbee:	482a      	ldr	r0, [pc, #168]	@ (800cc98 <HAL_TIM_ConfigClockSource+0x2a8>)
 800cbf0:	f7f9 f894 	bl	8005d1c <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800cbf4:	683b      	ldr	r3, [r7, #0]
 800cbf6:	689b      	ldr	r3, [r3, #8]
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d013      	beq.n	800cc24 <HAL_TIM_ConfigClockSource+0x234>
 800cbfc:	683b      	ldr	r3, [r7, #0]
 800cbfe:	689b      	ldr	r3, [r3, #8]
 800cc00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cc04:	d00e      	beq.n	800cc24 <HAL_TIM_ConfigClockSource+0x234>
 800cc06:	683b      	ldr	r3, [r7, #0]
 800cc08:	689b      	ldr	r3, [r3, #8]
 800cc0a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cc0e:	d009      	beq.n	800cc24 <HAL_TIM_ConfigClockSource+0x234>
 800cc10:	683b      	ldr	r3, [r7, #0]
 800cc12:	689b      	ldr	r3, [r3, #8]
 800cc14:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800cc18:	d004      	beq.n	800cc24 <HAL_TIM_ConfigClockSource+0x234>
 800cc1a:	f241 516c 	movw	r1, #5484	@ 0x156c
 800cc1e:	481e      	ldr	r0, [pc, #120]	@ (800cc98 <HAL_TIM_ConfigClockSource+0x2a8>)
 800cc20:	f7f9 f87c 	bl	8005d1c <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800cc24:	683b      	ldr	r3, [r7, #0]
 800cc26:	685b      	ldr	r3, [r3, #4]
 800cc28:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cc2c:	d014      	beq.n	800cc58 <HAL_TIM_ConfigClockSource+0x268>
 800cc2e:	683b      	ldr	r3, [r7, #0]
 800cc30:	685b      	ldr	r3, [r3, #4]
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d010      	beq.n	800cc58 <HAL_TIM_ConfigClockSource+0x268>
 800cc36:	683b      	ldr	r3, [r7, #0]
 800cc38:	685b      	ldr	r3, [r3, #4]
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d00c      	beq.n	800cc58 <HAL_TIM_ConfigClockSource+0x268>
 800cc3e:	683b      	ldr	r3, [r7, #0]
 800cc40:	685b      	ldr	r3, [r3, #4]
 800cc42:	2b02      	cmp	r3, #2
 800cc44:	d008      	beq.n	800cc58 <HAL_TIM_ConfigClockSource+0x268>
 800cc46:	683b      	ldr	r3, [r7, #0]
 800cc48:	685b      	ldr	r3, [r3, #4]
 800cc4a:	2b0a      	cmp	r3, #10
 800cc4c:	d004      	beq.n	800cc58 <HAL_TIM_ConfigClockSource+0x268>
 800cc4e:	f241 516d 	movw	r1, #5485	@ 0x156d
 800cc52:	4811      	ldr	r0, [pc, #68]	@ (800cc98 <HAL_TIM_ConfigClockSource+0x2a8>)
 800cc54:	f7f9 f862 	bl	8005d1c <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800cc58:	683b      	ldr	r3, [r7, #0]
 800cc5a:	68db      	ldr	r3, [r3, #12]
 800cc5c:	2b0f      	cmp	r3, #15
 800cc5e:	d904      	bls.n	800cc6a <HAL_TIM_ConfigClockSource+0x27a>
 800cc60:	f241 516e 	movw	r1, #5486	@ 0x156e
 800cc64:	480c      	ldr	r0, [pc, #48]	@ (800cc98 <HAL_TIM_ConfigClockSource+0x2a8>)
 800cc66:	f7f9 f859 	bl	8005d1c <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800cc6e:	683b      	ldr	r3, [r7, #0]
 800cc70:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800cc72:	683b      	ldr	r3, [r7, #0]
 800cc74:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800cc76:	683b      	ldr	r3, [r7, #0]
 800cc78:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800cc7a:	f000 feab 	bl	800d9d4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	689b      	ldr	r3, [r3, #8]
 800cc84:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800cc86:	68bb      	ldr	r3, [r7, #8]
 800cc88:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800cc8c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	68ba      	ldr	r2, [r7, #8]
 800cc94:	609a      	str	r2, [r3, #8]
      break;
 800cc96:	e1da      	b.n	800d04e <HAL_TIM_ConfigClockSource+0x65e>
 800cc98:	08010bb8 	.word	0x08010bb8
 800cc9c:	40012c00 	.word	0x40012c00
 800cca0:	40000400 	.word	0x40000400
 800cca4:	40000800 	.word	0x40000800
 800cca8:	40000c00 	.word	0x40000c00
 800ccac:	40001000 	.word	0x40001000
 800ccb0:	40001400 	.word	0x40001400
 800ccb4:	40013400 	.word	0x40013400
 800ccb8:	40014000 	.word	0x40014000
 800ccbc:	40014400 	.word	0x40014400
 800ccc0:	40014800 	.word	0x40014800
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	4a64      	ldr	r2, [pc, #400]	@ (800ce5c <HAL_TIM_ConfigClockSource+0x46c>)
 800ccca:	4293      	cmp	r3, r2
 800cccc:	d01d      	beq.n	800cd0a <HAL_TIM_ConfigClockSource+0x31a>
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ccd6:	d018      	beq.n	800cd0a <HAL_TIM_ConfigClockSource+0x31a>
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	4a60      	ldr	r2, [pc, #384]	@ (800ce60 <HAL_TIM_ConfigClockSource+0x470>)
 800ccde:	4293      	cmp	r3, r2
 800cce0:	d013      	beq.n	800cd0a <HAL_TIM_ConfigClockSource+0x31a>
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	4a5f      	ldr	r2, [pc, #380]	@ (800ce64 <HAL_TIM_ConfigClockSource+0x474>)
 800cce8:	4293      	cmp	r3, r2
 800ccea:	d00e      	beq.n	800cd0a <HAL_TIM_ConfigClockSource+0x31a>
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	4a5d      	ldr	r2, [pc, #372]	@ (800ce68 <HAL_TIM_ConfigClockSource+0x478>)
 800ccf2:	4293      	cmp	r3, r2
 800ccf4:	d009      	beq.n	800cd0a <HAL_TIM_ConfigClockSource+0x31a>
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	4a5c      	ldr	r2, [pc, #368]	@ (800ce6c <HAL_TIM_ConfigClockSource+0x47c>)
 800ccfc:	4293      	cmp	r3, r2
 800ccfe:	d004      	beq.n	800cd0a <HAL_TIM_ConfigClockSource+0x31a>
 800cd00:	f241 5181 	movw	r1, #5505	@ 0x1581
 800cd04:	485a      	ldr	r0, [pc, #360]	@ (800ce70 <HAL_TIM_ConfigClockSource+0x480>)
 800cd06:	f7f9 f809 	bl	8005d1c <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800cd0a:	683b      	ldr	r3, [r7, #0]
 800cd0c:	689b      	ldr	r3, [r3, #8]
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d013      	beq.n	800cd3a <HAL_TIM_ConfigClockSource+0x34a>
 800cd12:	683b      	ldr	r3, [r7, #0]
 800cd14:	689b      	ldr	r3, [r3, #8]
 800cd16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cd1a:	d00e      	beq.n	800cd3a <HAL_TIM_ConfigClockSource+0x34a>
 800cd1c:	683b      	ldr	r3, [r7, #0]
 800cd1e:	689b      	ldr	r3, [r3, #8]
 800cd20:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cd24:	d009      	beq.n	800cd3a <HAL_TIM_ConfigClockSource+0x34a>
 800cd26:	683b      	ldr	r3, [r7, #0]
 800cd28:	689b      	ldr	r3, [r3, #8]
 800cd2a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800cd2e:	d004      	beq.n	800cd3a <HAL_TIM_ConfigClockSource+0x34a>
 800cd30:	f241 5184 	movw	r1, #5508	@ 0x1584
 800cd34:	484e      	ldr	r0, [pc, #312]	@ (800ce70 <HAL_TIM_ConfigClockSource+0x480>)
 800cd36:	f7f8 fff1 	bl	8005d1c <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800cd3a:	683b      	ldr	r3, [r7, #0]
 800cd3c:	685b      	ldr	r3, [r3, #4]
 800cd3e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cd42:	d014      	beq.n	800cd6e <HAL_TIM_ConfigClockSource+0x37e>
 800cd44:	683b      	ldr	r3, [r7, #0]
 800cd46:	685b      	ldr	r3, [r3, #4]
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d010      	beq.n	800cd6e <HAL_TIM_ConfigClockSource+0x37e>
 800cd4c:	683b      	ldr	r3, [r7, #0]
 800cd4e:	685b      	ldr	r3, [r3, #4]
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d00c      	beq.n	800cd6e <HAL_TIM_ConfigClockSource+0x37e>
 800cd54:	683b      	ldr	r3, [r7, #0]
 800cd56:	685b      	ldr	r3, [r3, #4]
 800cd58:	2b02      	cmp	r3, #2
 800cd5a:	d008      	beq.n	800cd6e <HAL_TIM_ConfigClockSource+0x37e>
 800cd5c:	683b      	ldr	r3, [r7, #0]
 800cd5e:	685b      	ldr	r3, [r3, #4]
 800cd60:	2b0a      	cmp	r3, #10
 800cd62:	d004      	beq.n	800cd6e <HAL_TIM_ConfigClockSource+0x37e>
 800cd64:	f241 5185 	movw	r1, #5509	@ 0x1585
 800cd68:	4841      	ldr	r0, [pc, #260]	@ (800ce70 <HAL_TIM_ConfigClockSource+0x480>)
 800cd6a:	f7f8 ffd7 	bl	8005d1c <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800cd6e:	683b      	ldr	r3, [r7, #0]
 800cd70:	68db      	ldr	r3, [r3, #12]
 800cd72:	2b0f      	cmp	r3, #15
 800cd74:	d904      	bls.n	800cd80 <HAL_TIM_ConfigClockSource+0x390>
 800cd76:	f241 5186 	movw	r1, #5510	@ 0x1586
 800cd7a:	483d      	ldr	r0, [pc, #244]	@ (800ce70 <HAL_TIM_ConfigClockSource+0x480>)
 800cd7c:	f7f8 ffce 	bl	8005d1c <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800cd84:	683b      	ldr	r3, [r7, #0]
 800cd86:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800cd88:	683b      	ldr	r3, [r7, #0]
 800cd8a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800cd8c:	683b      	ldr	r3, [r7, #0]
 800cd8e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800cd90:	f000 fe20 	bl	800d9d4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	689a      	ldr	r2, [r3, #8]
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800cda2:	609a      	str	r2, [r3, #8]
      break;
 800cda4:	e153      	b.n	800d04e <HAL_TIM_ConfigClockSource+0x65e>
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	4a2c      	ldr	r2, [pc, #176]	@ (800ce5c <HAL_TIM_ConfigClockSource+0x46c>)
 800cdac:	4293      	cmp	r3, r2
 800cdae:	d022      	beq.n	800cdf6 <HAL_TIM_ConfigClockSource+0x406>
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cdb8:	d01d      	beq.n	800cdf6 <HAL_TIM_ConfigClockSource+0x406>
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	4a28      	ldr	r2, [pc, #160]	@ (800ce60 <HAL_TIM_ConfigClockSource+0x470>)
 800cdc0:	4293      	cmp	r3, r2
 800cdc2:	d018      	beq.n	800cdf6 <HAL_TIM_ConfigClockSource+0x406>
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	4a26      	ldr	r2, [pc, #152]	@ (800ce64 <HAL_TIM_ConfigClockSource+0x474>)
 800cdca:	4293      	cmp	r3, r2
 800cdcc:	d013      	beq.n	800cdf6 <HAL_TIM_ConfigClockSource+0x406>
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	4a25      	ldr	r2, [pc, #148]	@ (800ce68 <HAL_TIM_ConfigClockSource+0x478>)
 800cdd4:	4293      	cmp	r3, r2
 800cdd6:	d00e      	beq.n	800cdf6 <HAL_TIM_ConfigClockSource+0x406>
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	4a23      	ldr	r2, [pc, #140]	@ (800ce6c <HAL_TIM_ConfigClockSource+0x47c>)
 800cdde:	4293      	cmp	r3, r2
 800cde0:	d009      	beq.n	800cdf6 <HAL_TIM_ConfigClockSource+0x406>
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	4a23      	ldr	r2, [pc, #140]	@ (800ce74 <HAL_TIM_ConfigClockSource+0x484>)
 800cde8:	4293      	cmp	r3, r2
 800cdea:	d004      	beq.n	800cdf6 <HAL_TIM_ConfigClockSource+0x406>
 800cdec:	f241 5195 	movw	r1, #5525	@ 0x1595
 800cdf0:	481f      	ldr	r0, [pc, #124]	@ (800ce70 <HAL_TIM_ConfigClockSource+0x480>)
 800cdf2:	f7f8 ff93 	bl	8005d1c <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800cdf6:	683b      	ldr	r3, [r7, #0]
 800cdf8:	685b      	ldr	r3, [r3, #4]
 800cdfa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cdfe:	d014      	beq.n	800ce2a <HAL_TIM_ConfigClockSource+0x43a>
 800ce00:	683b      	ldr	r3, [r7, #0]
 800ce02:	685b      	ldr	r3, [r3, #4]
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d010      	beq.n	800ce2a <HAL_TIM_ConfigClockSource+0x43a>
 800ce08:	683b      	ldr	r3, [r7, #0]
 800ce0a:	685b      	ldr	r3, [r3, #4]
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d00c      	beq.n	800ce2a <HAL_TIM_ConfigClockSource+0x43a>
 800ce10:	683b      	ldr	r3, [r7, #0]
 800ce12:	685b      	ldr	r3, [r3, #4]
 800ce14:	2b02      	cmp	r3, #2
 800ce16:	d008      	beq.n	800ce2a <HAL_TIM_ConfigClockSource+0x43a>
 800ce18:	683b      	ldr	r3, [r7, #0]
 800ce1a:	685b      	ldr	r3, [r3, #4]
 800ce1c:	2b0a      	cmp	r3, #10
 800ce1e:	d004      	beq.n	800ce2a <HAL_TIM_ConfigClockSource+0x43a>
 800ce20:	f241 5198 	movw	r1, #5528	@ 0x1598
 800ce24:	4812      	ldr	r0, [pc, #72]	@ (800ce70 <HAL_TIM_ConfigClockSource+0x480>)
 800ce26:	f7f8 ff79 	bl	8005d1c <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800ce2a:	683b      	ldr	r3, [r7, #0]
 800ce2c:	68db      	ldr	r3, [r3, #12]
 800ce2e:	2b0f      	cmp	r3, #15
 800ce30:	d904      	bls.n	800ce3c <HAL_TIM_ConfigClockSource+0x44c>
 800ce32:	f241 5199 	movw	r1, #5529	@ 0x1599
 800ce36:	480e      	ldr	r0, [pc, #56]	@ (800ce70 <HAL_TIM_ConfigClockSource+0x480>)
 800ce38:	f7f8 ff70 	bl	8005d1c <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ce40:	683b      	ldr	r3, [r7, #0]
 800ce42:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ce44:	683b      	ldr	r3, [r7, #0]
 800ce46:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ce48:	461a      	mov	r2, r3
 800ce4a:	f000 fd49 	bl	800d8e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	2150      	movs	r1, #80	@ 0x50
 800ce54:	4618      	mov	r0, r3
 800ce56:	f000 fda2 	bl	800d99e <TIM_ITRx_SetConfig>
      break;
 800ce5a:	e0f8      	b.n	800d04e <HAL_TIM_ConfigClockSource+0x65e>
 800ce5c:	40012c00 	.word	0x40012c00
 800ce60:	40000400 	.word	0x40000400
 800ce64:	40000800 	.word	0x40000800
 800ce68:	40000c00 	.word	0x40000c00
 800ce6c:	40013400 	.word	0x40013400
 800ce70:	08010bb8 	.word	0x08010bb8
 800ce74:	40014000 	.word	0x40014000
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	4a7a      	ldr	r2, [pc, #488]	@ (800d068 <HAL_TIM_ConfigClockSource+0x678>)
 800ce7e:	4293      	cmp	r3, r2
 800ce80:	d022      	beq.n	800cec8 <HAL_TIM_ConfigClockSource+0x4d8>
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ce8a:	d01d      	beq.n	800cec8 <HAL_TIM_ConfigClockSource+0x4d8>
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	4a76      	ldr	r2, [pc, #472]	@ (800d06c <HAL_TIM_ConfigClockSource+0x67c>)
 800ce92:	4293      	cmp	r3, r2
 800ce94:	d018      	beq.n	800cec8 <HAL_TIM_ConfigClockSource+0x4d8>
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	4a75      	ldr	r2, [pc, #468]	@ (800d070 <HAL_TIM_ConfigClockSource+0x680>)
 800ce9c:	4293      	cmp	r3, r2
 800ce9e:	d013      	beq.n	800cec8 <HAL_TIM_ConfigClockSource+0x4d8>
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	4a73      	ldr	r2, [pc, #460]	@ (800d074 <HAL_TIM_ConfigClockSource+0x684>)
 800cea6:	4293      	cmp	r3, r2
 800cea8:	d00e      	beq.n	800cec8 <HAL_TIM_ConfigClockSource+0x4d8>
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	4a72      	ldr	r2, [pc, #456]	@ (800d078 <HAL_TIM_ConfigClockSource+0x688>)
 800ceb0:	4293      	cmp	r3, r2
 800ceb2:	d009      	beq.n	800cec8 <HAL_TIM_ConfigClockSource+0x4d8>
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	4a70      	ldr	r2, [pc, #448]	@ (800d07c <HAL_TIM_ConfigClockSource+0x68c>)
 800ceba:	4293      	cmp	r3, r2
 800cebc:	d004      	beq.n	800cec8 <HAL_TIM_ConfigClockSource+0x4d8>
 800cebe:	f241 51a5 	movw	r1, #5541	@ 0x15a5
 800cec2:	486f      	ldr	r0, [pc, #444]	@ (800d080 <HAL_TIM_ConfigClockSource+0x690>)
 800cec4:	f7f8 ff2a 	bl	8005d1c <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800cec8:	683b      	ldr	r3, [r7, #0]
 800ceca:	685b      	ldr	r3, [r3, #4]
 800cecc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ced0:	d014      	beq.n	800cefc <HAL_TIM_ConfigClockSource+0x50c>
 800ced2:	683b      	ldr	r3, [r7, #0]
 800ced4:	685b      	ldr	r3, [r3, #4]
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d010      	beq.n	800cefc <HAL_TIM_ConfigClockSource+0x50c>
 800ceda:	683b      	ldr	r3, [r7, #0]
 800cedc:	685b      	ldr	r3, [r3, #4]
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d00c      	beq.n	800cefc <HAL_TIM_ConfigClockSource+0x50c>
 800cee2:	683b      	ldr	r3, [r7, #0]
 800cee4:	685b      	ldr	r3, [r3, #4]
 800cee6:	2b02      	cmp	r3, #2
 800cee8:	d008      	beq.n	800cefc <HAL_TIM_ConfigClockSource+0x50c>
 800ceea:	683b      	ldr	r3, [r7, #0]
 800ceec:	685b      	ldr	r3, [r3, #4]
 800ceee:	2b0a      	cmp	r3, #10
 800cef0:	d004      	beq.n	800cefc <HAL_TIM_ConfigClockSource+0x50c>
 800cef2:	f241 51a8 	movw	r1, #5544	@ 0x15a8
 800cef6:	4862      	ldr	r0, [pc, #392]	@ (800d080 <HAL_TIM_ConfigClockSource+0x690>)
 800cef8:	f7f8 ff10 	bl	8005d1c <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800cefc:	683b      	ldr	r3, [r7, #0]
 800cefe:	68db      	ldr	r3, [r3, #12]
 800cf00:	2b0f      	cmp	r3, #15
 800cf02:	d904      	bls.n	800cf0e <HAL_TIM_ConfigClockSource+0x51e>
 800cf04:	f241 51a9 	movw	r1, #5545	@ 0x15a9
 800cf08:	485d      	ldr	r0, [pc, #372]	@ (800d080 <HAL_TIM_ConfigClockSource+0x690>)
 800cf0a:	f7f8 ff07 	bl	8005d1c <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800cf12:	683b      	ldr	r3, [r7, #0]
 800cf14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800cf16:	683b      	ldr	r3, [r7, #0]
 800cf18:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800cf1a:	461a      	mov	r2, r3
 800cf1c:	f000 fd0f 	bl	800d93e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	2160      	movs	r1, #96	@ 0x60
 800cf26:	4618      	mov	r0, r3
 800cf28:	f000 fd39 	bl	800d99e <TIM_ITRx_SetConfig>
      break;
 800cf2c:	e08f      	b.n	800d04e <HAL_TIM_ConfigClockSource+0x65e>
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	4a4d      	ldr	r2, [pc, #308]	@ (800d068 <HAL_TIM_ConfigClockSource+0x678>)
 800cf34:	4293      	cmp	r3, r2
 800cf36:	d022      	beq.n	800cf7e <HAL_TIM_ConfigClockSource+0x58e>
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cf40:	d01d      	beq.n	800cf7e <HAL_TIM_ConfigClockSource+0x58e>
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	4a49      	ldr	r2, [pc, #292]	@ (800d06c <HAL_TIM_ConfigClockSource+0x67c>)
 800cf48:	4293      	cmp	r3, r2
 800cf4a:	d018      	beq.n	800cf7e <HAL_TIM_ConfigClockSource+0x58e>
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	4a47      	ldr	r2, [pc, #284]	@ (800d070 <HAL_TIM_ConfigClockSource+0x680>)
 800cf52:	4293      	cmp	r3, r2
 800cf54:	d013      	beq.n	800cf7e <HAL_TIM_ConfigClockSource+0x58e>
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	4a46      	ldr	r2, [pc, #280]	@ (800d074 <HAL_TIM_ConfigClockSource+0x684>)
 800cf5c:	4293      	cmp	r3, r2
 800cf5e:	d00e      	beq.n	800cf7e <HAL_TIM_ConfigClockSource+0x58e>
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	4a44      	ldr	r2, [pc, #272]	@ (800d078 <HAL_TIM_ConfigClockSource+0x688>)
 800cf66:	4293      	cmp	r3, r2
 800cf68:	d009      	beq.n	800cf7e <HAL_TIM_ConfigClockSource+0x58e>
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	4a43      	ldr	r2, [pc, #268]	@ (800d07c <HAL_TIM_ConfigClockSource+0x68c>)
 800cf70:	4293      	cmp	r3, r2
 800cf72:	d004      	beq.n	800cf7e <HAL_TIM_ConfigClockSource+0x58e>
 800cf74:	f241 51b5 	movw	r1, #5557	@ 0x15b5
 800cf78:	4841      	ldr	r0, [pc, #260]	@ (800d080 <HAL_TIM_ConfigClockSource+0x690>)
 800cf7a:	f7f8 fecf 	bl	8005d1c <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800cf7e:	683b      	ldr	r3, [r7, #0]
 800cf80:	685b      	ldr	r3, [r3, #4]
 800cf82:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cf86:	d014      	beq.n	800cfb2 <HAL_TIM_ConfigClockSource+0x5c2>
 800cf88:	683b      	ldr	r3, [r7, #0]
 800cf8a:	685b      	ldr	r3, [r3, #4]
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d010      	beq.n	800cfb2 <HAL_TIM_ConfigClockSource+0x5c2>
 800cf90:	683b      	ldr	r3, [r7, #0]
 800cf92:	685b      	ldr	r3, [r3, #4]
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d00c      	beq.n	800cfb2 <HAL_TIM_ConfigClockSource+0x5c2>
 800cf98:	683b      	ldr	r3, [r7, #0]
 800cf9a:	685b      	ldr	r3, [r3, #4]
 800cf9c:	2b02      	cmp	r3, #2
 800cf9e:	d008      	beq.n	800cfb2 <HAL_TIM_ConfigClockSource+0x5c2>
 800cfa0:	683b      	ldr	r3, [r7, #0]
 800cfa2:	685b      	ldr	r3, [r3, #4]
 800cfa4:	2b0a      	cmp	r3, #10
 800cfa6:	d004      	beq.n	800cfb2 <HAL_TIM_ConfigClockSource+0x5c2>
 800cfa8:	f241 51b8 	movw	r1, #5560	@ 0x15b8
 800cfac:	4834      	ldr	r0, [pc, #208]	@ (800d080 <HAL_TIM_ConfigClockSource+0x690>)
 800cfae:	f7f8 feb5 	bl	8005d1c <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800cfb2:	683b      	ldr	r3, [r7, #0]
 800cfb4:	68db      	ldr	r3, [r3, #12]
 800cfb6:	2b0f      	cmp	r3, #15
 800cfb8:	d904      	bls.n	800cfc4 <HAL_TIM_ConfigClockSource+0x5d4>
 800cfba:	f241 51b9 	movw	r1, #5561	@ 0x15b9
 800cfbe:	4830      	ldr	r0, [pc, #192]	@ (800d080 <HAL_TIM_ConfigClockSource+0x690>)
 800cfc0:	f7f8 feac 	bl	8005d1c <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800cfc8:	683b      	ldr	r3, [r7, #0]
 800cfca:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800cfcc:	683b      	ldr	r3, [r7, #0]
 800cfce:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cfd0:	461a      	mov	r2, r3
 800cfd2:	f000 fc85 	bl	800d8e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	2140      	movs	r1, #64	@ 0x40
 800cfdc:	4618      	mov	r0, r3
 800cfde:	f000 fcde 	bl	800d99e <TIM_ITRx_SetConfig>
      break;
 800cfe2:	e034      	b.n	800d04e <HAL_TIM_ConfigClockSource+0x65e>
    case TIM_CLOCKSOURCE_ITR1:
    case TIM_CLOCKSOURCE_ITR2:
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	4a1f      	ldr	r2, [pc, #124]	@ (800d068 <HAL_TIM_ConfigClockSource+0x678>)
 800cfea:	4293      	cmp	r3, r2
 800cfec:	d022      	beq.n	800d034 <HAL_TIM_ConfigClockSource+0x644>
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cff6:	d01d      	beq.n	800d034 <HAL_TIM_ConfigClockSource+0x644>
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	4a1b      	ldr	r2, [pc, #108]	@ (800d06c <HAL_TIM_ConfigClockSource+0x67c>)
 800cffe:	4293      	cmp	r3, r2
 800d000:	d018      	beq.n	800d034 <HAL_TIM_ConfigClockSource+0x644>
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	4a1a      	ldr	r2, [pc, #104]	@ (800d070 <HAL_TIM_ConfigClockSource+0x680>)
 800d008:	4293      	cmp	r3, r2
 800d00a:	d013      	beq.n	800d034 <HAL_TIM_ConfigClockSource+0x644>
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	4a18      	ldr	r2, [pc, #96]	@ (800d074 <HAL_TIM_ConfigClockSource+0x684>)
 800d012:	4293      	cmp	r3, r2
 800d014:	d00e      	beq.n	800d034 <HAL_TIM_ConfigClockSource+0x644>
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	4a17      	ldr	r2, [pc, #92]	@ (800d078 <HAL_TIM_ConfigClockSource+0x688>)
 800d01c:	4293      	cmp	r3, r2
 800d01e:	d009      	beq.n	800d034 <HAL_TIM_ConfigClockSource+0x644>
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	4a15      	ldr	r2, [pc, #84]	@ (800d07c <HAL_TIM_ConfigClockSource+0x68c>)
 800d026:	4293      	cmp	r3, r2
 800d028:	d004      	beq.n	800d034 <HAL_TIM_ConfigClockSource+0x644>
 800d02a:	f241 51c8 	movw	r1, #5576	@ 0x15c8
 800d02e:	4814      	ldr	r0, [pc, #80]	@ (800d080 <HAL_TIM_ConfigClockSource+0x690>)
 800d030:	f7f8 fe74 	bl	8005d1c <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	681a      	ldr	r2, [r3, #0]
 800d038:	683b      	ldr	r3, [r7, #0]
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	4619      	mov	r1, r3
 800d03e:	4610      	mov	r0, r2
 800d040:	f000 fcad 	bl	800d99e <TIM_ITRx_SetConfig>
      break;
 800d044:	e003      	b.n	800d04e <HAL_TIM_ConfigClockSource+0x65e>
    }

    default:
      status = HAL_ERROR;
 800d046:	2301      	movs	r3, #1
 800d048:	73fb      	strb	r3, [r7, #15]
      break;
 800d04a:	e000      	b.n	800d04e <HAL_TIM_ConfigClockSource+0x65e>
      break;
 800d04c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	2201      	movs	r2, #1
 800d052:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	2200      	movs	r2, #0
 800d05a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800d05e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d060:	4618      	mov	r0, r3
 800d062:	3710      	adds	r7, #16
 800d064:	46bd      	mov	sp, r7
 800d066:	bd80      	pop	{r7, pc}
 800d068:	40012c00 	.word	0x40012c00
 800d06c:	40000400 	.word	0x40000400
 800d070:	40000800 	.word	0x40000800
 800d074:	40000c00 	.word	0x40000c00
 800d078:	40013400 	.word	0x40013400
 800d07c:	40014000 	.word	0x40014000
 800d080:	08010bb8 	.word	0x08010bb8

0800d084 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d084:	b480      	push	{r7}
 800d086:	b083      	sub	sp, #12
 800d088:	af00      	add	r7, sp, #0
 800d08a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d08c:	bf00      	nop
 800d08e:	370c      	adds	r7, #12
 800d090:	46bd      	mov	sp, r7
 800d092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d096:	4770      	bx	lr

0800d098 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d098:	b480      	push	{r7}
 800d09a:	b083      	sub	sp, #12
 800d09c:	af00      	add	r7, sp, #0
 800d09e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d0a0:	bf00      	nop
 800d0a2:	370c      	adds	r7, #12
 800d0a4:	46bd      	mov	sp, r7
 800d0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0aa:	4770      	bx	lr

0800d0ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d0ac:	b480      	push	{r7}
 800d0ae:	b083      	sub	sp, #12
 800d0b0:	af00      	add	r7, sp, #0
 800d0b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d0b4:	bf00      	nop
 800d0b6:	370c      	adds	r7, #12
 800d0b8:	46bd      	mov	sp, r7
 800d0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0be:	4770      	bx	lr

0800d0c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d0c0:	b480      	push	{r7}
 800d0c2:	b083      	sub	sp, #12
 800d0c4:	af00      	add	r7, sp, #0
 800d0c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d0c8:	bf00      	nop
 800d0ca:	370c      	adds	r7, #12
 800d0cc:	46bd      	mov	sp, r7
 800d0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d2:	4770      	bx	lr

0800d0d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d0d4:	b480      	push	{r7}
 800d0d6:	b085      	sub	sp, #20
 800d0d8:	af00      	add	r7, sp, #0
 800d0da:	6078      	str	r0, [r7, #4]
 800d0dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	4a46      	ldr	r2, [pc, #280]	@ (800d200 <TIM_Base_SetConfig+0x12c>)
 800d0e8:	4293      	cmp	r3, r2
 800d0ea:	d013      	beq.n	800d114 <TIM_Base_SetConfig+0x40>
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d0f2:	d00f      	beq.n	800d114 <TIM_Base_SetConfig+0x40>
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	4a43      	ldr	r2, [pc, #268]	@ (800d204 <TIM_Base_SetConfig+0x130>)
 800d0f8:	4293      	cmp	r3, r2
 800d0fa:	d00b      	beq.n	800d114 <TIM_Base_SetConfig+0x40>
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	4a42      	ldr	r2, [pc, #264]	@ (800d208 <TIM_Base_SetConfig+0x134>)
 800d100:	4293      	cmp	r3, r2
 800d102:	d007      	beq.n	800d114 <TIM_Base_SetConfig+0x40>
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	4a41      	ldr	r2, [pc, #260]	@ (800d20c <TIM_Base_SetConfig+0x138>)
 800d108:	4293      	cmp	r3, r2
 800d10a:	d003      	beq.n	800d114 <TIM_Base_SetConfig+0x40>
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	4a40      	ldr	r2, [pc, #256]	@ (800d210 <TIM_Base_SetConfig+0x13c>)
 800d110:	4293      	cmp	r3, r2
 800d112:	d108      	bne.n	800d126 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d11a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d11c:	683b      	ldr	r3, [r7, #0]
 800d11e:	685b      	ldr	r3, [r3, #4]
 800d120:	68fa      	ldr	r2, [r7, #12]
 800d122:	4313      	orrs	r3, r2
 800d124:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	4a35      	ldr	r2, [pc, #212]	@ (800d200 <TIM_Base_SetConfig+0x12c>)
 800d12a:	4293      	cmp	r3, r2
 800d12c:	d01f      	beq.n	800d16e <TIM_Base_SetConfig+0x9a>
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d134:	d01b      	beq.n	800d16e <TIM_Base_SetConfig+0x9a>
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	4a32      	ldr	r2, [pc, #200]	@ (800d204 <TIM_Base_SetConfig+0x130>)
 800d13a:	4293      	cmp	r3, r2
 800d13c:	d017      	beq.n	800d16e <TIM_Base_SetConfig+0x9a>
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	4a31      	ldr	r2, [pc, #196]	@ (800d208 <TIM_Base_SetConfig+0x134>)
 800d142:	4293      	cmp	r3, r2
 800d144:	d013      	beq.n	800d16e <TIM_Base_SetConfig+0x9a>
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	4a30      	ldr	r2, [pc, #192]	@ (800d20c <TIM_Base_SetConfig+0x138>)
 800d14a:	4293      	cmp	r3, r2
 800d14c:	d00f      	beq.n	800d16e <TIM_Base_SetConfig+0x9a>
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	4a2f      	ldr	r2, [pc, #188]	@ (800d210 <TIM_Base_SetConfig+0x13c>)
 800d152:	4293      	cmp	r3, r2
 800d154:	d00b      	beq.n	800d16e <TIM_Base_SetConfig+0x9a>
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	4a2e      	ldr	r2, [pc, #184]	@ (800d214 <TIM_Base_SetConfig+0x140>)
 800d15a:	4293      	cmp	r3, r2
 800d15c:	d007      	beq.n	800d16e <TIM_Base_SetConfig+0x9a>
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	4a2d      	ldr	r2, [pc, #180]	@ (800d218 <TIM_Base_SetConfig+0x144>)
 800d162:	4293      	cmp	r3, r2
 800d164:	d003      	beq.n	800d16e <TIM_Base_SetConfig+0x9a>
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	4a2c      	ldr	r2, [pc, #176]	@ (800d21c <TIM_Base_SetConfig+0x148>)
 800d16a:	4293      	cmp	r3, r2
 800d16c:	d108      	bne.n	800d180 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d174:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d176:	683b      	ldr	r3, [r7, #0]
 800d178:	68db      	ldr	r3, [r3, #12]
 800d17a:	68fa      	ldr	r2, [r7, #12]
 800d17c:	4313      	orrs	r3, r2
 800d17e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800d186:	683b      	ldr	r3, [r7, #0]
 800d188:	695b      	ldr	r3, [r3, #20]
 800d18a:	4313      	orrs	r3, r2
 800d18c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	68fa      	ldr	r2, [r7, #12]
 800d192:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d194:	683b      	ldr	r3, [r7, #0]
 800d196:	689a      	ldr	r2, [r3, #8]
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d19c:	683b      	ldr	r3, [r7, #0]
 800d19e:	681a      	ldr	r2, [r3, #0]
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	4a16      	ldr	r2, [pc, #88]	@ (800d200 <TIM_Base_SetConfig+0x12c>)
 800d1a8:	4293      	cmp	r3, r2
 800d1aa:	d00f      	beq.n	800d1cc <TIM_Base_SetConfig+0xf8>
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	4a18      	ldr	r2, [pc, #96]	@ (800d210 <TIM_Base_SetConfig+0x13c>)
 800d1b0:	4293      	cmp	r3, r2
 800d1b2:	d00b      	beq.n	800d1cc <TIM_Base_SetConfig+0xf8>
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	4a17      	ldr	r2, [pc, #92]	@ (800d214 <TIM_Base_SetConfig+0x140>)
 800d1b8:	4293      	cmp	r3, r2
 800d1ba:	d007      	beq.n	800d1cc <TIM_Base_SetConfig+0xf8>
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	4a16      	ldr	r2, [pc, #88]	@ (800d218 <TIM_Base_SetConfig+0x144>)
 800d1c0:	4293      	cmp	r3, r2
 800d1c2:	d003      	beq.n	800d1cc <TIM_Base_SetConfig+0xf8>
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	4a15      	ldr	r2, [pc, #84]	@ (800d21c <TIM_Base_SetConfig+0x148>)
 800d1c8:	4293      	cmp	r3, r2
 800d1ca:	d103      	bne.n	800d1d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d1cc:	683b      	ldr	r3, [r7, #0]
 800d1ce:	691a      	ldr	r2, [r3, #16]
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	2201      	movs	r2, #1
 800d1d8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	691b      	ldr	r3, [r3, #16]
 800d1de:	f003 0301 	and.w	r3, r3, #1
 800d1e2:	2b01      	cmp	r3, #1
 800d1e4:	d105      	bne.n	800d1f2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	691b      	ldr	r3, [r3, #16]
 800d1ea:	f023 0201 	bic.w	r2, r3, #1
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	611a      	str	r2, [r3, #16]
  }
}
 800d1f2:	bf00      	nop
 800d1f4:	3714      	adds	r7, #20
 800d1f6:	46bd      	mov	sp, r7
 800d1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1fc:	4770      	bx	lr
 800d1fe:	bf00      	nop
 800d200:	40012c00 	.word	0x40012c00
 800d204:	40000400 	.word	0x40000400
 800d208:	40000800 	.word	0x40000800
 800d20c:	40000c00 	.word	0x40000c00
 800d210:	40013400 	.word	0x40013400
 800d214:	40014000 	.word	0x40014000
 800d218:	40014400 	.word	0x40014400
 800d21c:	40014800 	.word	0x40014800

0800d220 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d220:	b580      	push	{r7, lr}
 800d222:	b086      	sub	sp, #24
 800d224:	af00      	add	r7, sp, #0
 800d226:	6078      	str	r0, [r7, #4]
 800d228:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	6a1b      	ldr	r3, [r3, #32]
 800d22e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	6a1b      	ldr	r3, [r3, #32]
 800d234:	f023 0201 	bic.w	r2, r3, #1
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	685b      	ldr	r3, [r3, #4]
 800d240:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	699b      	ldr	r3, [r3, #24]
 800d246:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d24e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d252:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	f023 0303 	bic.w	r3, r3, #3
 800d25a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d25c:	683b      	ldr	r3, [r7, #0]
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	68fa      	ldr	r2, [r7, #12]
 800d262:	4313      	orrs	r3, r2
 800d264:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d266:	697b      	ldr	r3, [r7, #20]
 800d268:	f023 0302 	bic.w	r3, r3, #2
 800d26c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d26e:	683b      	ldr	r3, [r7, #0]
 800d270:	689b      	ldr	r3, [r3, #8]
 800d272:	697a      	ldr	r2, [r7, #20]
 800d274:	4313      	orrs	r3, r2
 800d276:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	4a40      	ldr	r2, [pc, #256]	@ (800d37c <TIM_OC1_SetConfig+0x15c>)
 800d27c:	4293      	cmp	r3, r2
 800d27e:	d00f      	beq.n	800d2a0 <TIM_OC1_SetConfig+0x80>
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	4a3f      	ldr	r2, [pc, #252]	@ (800d380 <TIM_OC1_SetConfig+0x160>)
 800d284:	4293      	cmp	r3, r2
 800d286:	d00b      	beq.n	800d2a0 <TIM_OC1_SetConfig+0x80>
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	4a3e      	ldr	r2, [pc, #248]	@ (800d384 <TIM_OC1_SetConfig+0x164>)
 800d28c:	4293      	cmp	r3, r2
 800d28e:	d007      	beq.n	800d2a0 <TIM_OC1_SetConfig+0x80>
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	4a3d      	ldr	r2, [pc, #244]	@ (800d388 <TIM_OC1_SetConfig+0x168>)
 800d294:	4293      	cmp	r3, r2
 800d296:	d003      	beq.n	800d2a0 <TIM_OC1_SetConfig+0x80>
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	4a3c      	ldr	r2, [pc, #240]	@ (800d38c <TIM_OC1_SetConfig+0x16c>)
 800d29c:	4293      	cmp	r3, r2
 800d29e:	d119      	bne.n	800d2d4 <TIM_OC1_SetConfig+0xb4>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800d2a0:	683b      	ldr	r3, [r7, #0]
 800d2a2:	68db      	ldr	r3, [r3, #12]
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d008      	beq.n	800d2ba <TIM_OC1_SetConfig+0x9a>
 800d2a8:	683b      	ldr	r3, [r7, #0]
 800d2aa:	68db      	ldr	r3, [r3, #12]
 800d2ac:	2b08      	cmp	r3, #8
 800d2ae:	d004      	beq.n	800d2ba <TIM_OC1_SetConfig+0x9a>
 800d2b0:	f641 316e 	movw	r1, #7022	@ 0x1b6e
 800d2b4:	4836      	ldr	r0, [pc, #216]	@ (800d390 <TIM_OC1_SetConfig+0x170>)
 800d2b6:	f7f8 fd31 	bl	8005d1c <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d2ba:	697b      	ldr	r3, [r7, #20]
 800d2bc:	f023 0308 	bic.w	r3, r3, #8
 800d2c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d2c2:	683b      	ldr	r3, [r7, #0]
 800d2c4:	68db      	ldr	r3, [r3, #12]
 800d2c6:	697a      	ldr	r2, [r7, #20]
 800d2c8:	4313      	orrs	r3, r2
 800d2ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d2cc:	697b      	ldr	r3, [r7, #20]
 800d2ce:	f023 0304 	bic.w	r3, r3, #4
 800d2d2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	4a29      	ldr	r2, [pc, #164]	@ (800d37c <TIM_OC1_SetConfig+0x15c>)
 800d2d8:	4293      	cmp	r3, r2
 800d2da:	d00f      	beq.n	800d2fc <TIM_OC1_SetConfig+0xdc>
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	4a28      	ldr	r2, [pc, #160]	@ (800d380 <TIM_OC1_SetConfig+0x160>)
 800d2e0:	4293      	cmp	r3, r2
 800d2e2:	d00b      	beq.n	800d2fc <TIM_OC1_SetConfig+0xdc>
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	4a27      	ldr	r2, [pc, #156]	@ (800d384 <TIM_OC1_SetConfig+0x164>)
 800d2e8:	4293      	cmp	r3, r2
 800d2ea:	d007      	beq.n	800d2fc <TIM_OC1_SetConfig+0xdc>
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	4a26      	ldr	r2, [pc, #152]	@ (800d388 <TIM_OC1_SetConfig+0x168>)
 800d2f0:	4293      	cmp	r3, r2
 800d2f2:	d003      	beq.n	800d2fc <TIM_OC1_SetConfig+0xdc>
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	4a25      	ldr	r2, [pc, #148]	@ (800d38c <TIM_OC1_SetConfig+0x16c>)
 800d2f8:	4293      	cmp	r3, r2
 800d2fa:	d12d      	bne.n	800d358 <TIM_OC1_SetConfig+0x138>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800d2fc:	683b      	ldr	r3, [r7, #0]
 800d2fe:	699b      	ldr	r3, [r3, #24]
 800d300:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d304:	d008      	beq.n	800d318 <TIM_OC1_SetConfig+0xf8>
 800d306:	683b      	ldr	r3, [r7, #0]
 800d308:	699b      	ldr	r3, [r3, #24]
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d004      	beq.n	800d318 <TIM_OC1_SetConfig+0xf8>
 800d30e:	f641 317b 	movw	r1, #7035	@ 0x1b7b
 800d312:	481f      	ldr	r0, [pc, #124]	@ (800d390 <TIM_OC1_SetConfig+0x170>)
 800d314:	f7f8 fd02 	bl	8005d1c <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800d318:	683b      	ldr	r3, [r7, #0]
 800d31a:	695b      	ldr	r3, [r3, #20]
 800d31c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d320:	d008      	beq.n	800d334 <TIM_OC1_SetConfig+0x114>
 800d322:	683b      	ldr	r3, [r7, #0]
 800d324:	695b      	ldr	r3, [r3, #20]
 800d326:	2b00      	cmp	r3, #0
 800d328:	d004      	beq.n	800d334 <TIM_OC1_SetConfig+0x114>
 800d32a:	f641 317c 	movw	r1, #7036	@ 0x1b7c
 800d32e:	4818      	ldr	r0, [pc, #96]	@ (800d390 <TIM_OC1_SetConfig+0x170>)
 800d330:	f7f8 fcf4 	bl	8005d1c <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d334:	693b      	ldr	r3, [r7, #16]
 800d336:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d33a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d33c:	693b      	ldr	r3, [r7, #16]
 800d33e:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800d342:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d344:	683b      	ldr	r3, [r7, #0]
 800d346:	695b      	ldr	r3, [r3, #20]
 800d348:	693a      	ldr	r2, [r7, #16]
 800d34a:	4313      	orrs	r3, r2
 800d34c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d34e:	683b      	ldr	r3, [r7, #0]
 800d350:	699b      	ldr	r3, [r3, #24]
 800d352:	693a      	ldr	r2, [r7, #16]
 800d354:	4313      	orrs	r3, r2
 800d356:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	693a      	ldr	r2, [r7, #16]
 800d35c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	68fa      	ldr	r2, [r7, #12]
 800d362:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d364:	683b      	ldr	r3, [r7, #0]
 800d366:	685a      	ldr	r2, [r3, #4]
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	697a      	ldr	r2, [r7, #20]
 800d370:	621a      	str	r2, [r3, #32]
}
 800d372:	bf00      	nop
 800d374:	3718      	adds	r7, #24
 800d376:	46bd      	mov	sp, r7
 800d378:	bd80      	pop	{r7, pc}
 800d37a:	bf00      	nop
 800d37c:	40012c00 	.word	0x40012c00
 800d380:	40013400 	.word	0x40013400
 800d384:	40014000 	.word	0x40014000
 800d388:	40014400 	.word	0x40014400
 800d38c:	40014800 	.word	0x40014800
 800d390:	08010bb8 	.word	0x08010bb8

0800d394 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d394:	b580      	push	{r7, lr}
 800d396:	b086      	sub	sp, #24
 800d398:	af00      	add	r7, sp, #0
 800d39a:	6078      	str	r0, [r7, #4]
 800d39c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	6a1b      	ldr	r3, [r3, #32]
 800d3a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	6a1b      	ldr	r3, [r3, #32]
 800d3a8:	f023 0210 	bic.w	r2, r3, #16
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	685b      	ldr	r3, [r3, #4]
 800d3b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	699b      	ldr	r3, [r3, #24]
 800d3ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800d3c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d3c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d3ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d3d0:	683b      	ldr	r3, [r7, #0]
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	021b      	lsls	r3, r3, #8
 800d3d6:	68fa      	ldr	r2, [r7, #12]
 800d3d8:	4313      	orrs	r3, r2
 800d3da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d3dc:	697b      	ldr	r3, [r7, #20]
 800d3de:	f023 0320 	bic.w	r3, r3, #32
 800d3e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d3e4:	683b      	ldr	r3, [r7, #0]
 800d3e6:	689b      	ldr	r3, [r3, #8]
 800d3e8:	011b      	lsls	r3, r3, #4
 800d3ea:	697a      	ldr	r2, [r7, #20]
 800d3ec:	4313      	orrs	r3, r2
 800d3ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	4a3b      	ldr	r2, [pc, #236]	@ (800d4e0 <TIM_OC2_SetConfig+0x14c>)
 800d3f4:	4293      	cmp	r3, r2
 800d3f6:	d003      	beq.n	800d400 <TIM_OC2_SetConfig+0x6c>
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	4a3a      	ldr	r2, [pc, #232]	@ (800d4e4 <TIM_OC2_SetConfig+0x150>)
 800d3fc:	4293      	cmp	r3, r2
 800d3fe:	d11a      	bne.n	800d436 <TIM_OC2_SetConfig+0xa2>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800d400:	683b      	ldr	r3, [r7, #0]
 800d402:	68db      	ldr	r3, [r3, #12]
 800d404:	2b00      	cmp	r3, #0
 800d406:	d008      	beq.n	800d41a <TIM_OC2_SetConfig+0x86>
 800d408:	683b      	ldr	r3, [r7, #0]
 800d40a:	68db      	ldr	r3, [r3, #12]
 800d40c:	2b08      	cmp	r3, #8
 800d40e:	d004      	beq.n	800d41a <TIM_OC2_SetConfig+0x86>
 800d410:	f641 31ba 	movw	r1, #7098	@ 0x1bba
 800d414:	4834      	ldr	r0, [pc, #208]	@ (800d4e8 <TIM_OC2_SetConfig+0x154>)
 800d416:	f7f8 fc81 	bl	8005d1c <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d41a:	697b      	ldr	r3, [r7, #20]
 800d41c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d420:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d422:	683b      	ldr	r3, [r7, #0]
 800d424:	68db      	ldr	r3, [r3, #12]
 800d426:	011b      	lsls	r3, r3, #4
 800d428:	697a      	ldr	r2, [r7, #20]
 800d42a:	4313      	orrs	r3, r2
 800d42c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d42e:	697b      	ldr	r3, [r7, #20]
 800d430:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d434:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	4a29      	ldr	r2, [pc, #164]	@ (800d4e0 <TIM_OC2_SetConfig+0x14c>)
 800d43a:	4293      	cmp	r3, r2
 800d43c:	d00f      	beq.n	800d45e <TIM_OC2_SetConfig+0xca>
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	4a28      	ldr	r2, [pc, #160]	@ (800d4e4 <TIM_OC2_SetConfig+0x150>)
 800d442:	4293      	cmp	r3, r2
 800d444:	d00b      	beq.n	800d45e <TIM_OC2_SetConfig+0xca>
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	4a28      	ldr	r2, [pc, #160]	@ (800d4ec <TIM_OC2_SetConfig+0x158>)
 800d44a:	4293      	cmp	r3, r2
 800d44c:	d007      	beq.n	800d45e <TIM_OC2_SetConfig+0xca>
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	4a27      	ldr	r2, [pc, #156]	@ (800d4f0 <TIM_OC2_SetConfig+0x15c>)
 800d452:	4293      	cmp	r3, r2
 800d454:	d003      	beq.n	800d45e <TIM_OC2_SetConfig+0xca>
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	4a26      	ldr	r2, [pc, #152]	@ (800d4f4 <TIM_OC2_SetConfig+0x160>)
 800d45a:	4293      	cmp	r3, r2
 800d45c:	d12f      	bne.n	800d4be <TIM_OC2_SetConfig+0x12a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800d45e:	683b      	ldr	r3, [r7, #0]
 800d460:	699b      	ldr	r3, [r3, #24]
 800d462:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d466:	d008      	beq.n	800d47a <TIM_OC2_SetConfig+0xe6>
 800d468:	683b      	ldr	r3, [r7, #0]
 800d46a:	699b      	ldr	r3, [r3, #24]
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d004      	beq.n	800d47a <TIM_OC2_SetConfig+0xe6>
 800d470:	f641 31c7 	movw	r1, #7111	@ 0x1bc7
 800d474:	481c      	ldr	r0, [pc, #112]	@ (800d4e8 <TIM_OC2_SetConfig+0x154>)
 800d476:	f7f8 fc51 	bl	8005d1c <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800d47a:	683b      	ldr	r3, [r7, #0]
 800d47c:	695b      	ldr	r3, [r3, #20]
 800d47e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d482:	d008      	beq.n	800d496 <TIM_OC2_SetConfig+0x102>
 800d484:	683b      	ldr	r3, [r7, #0]
 800d486:	695b      	ldr	r3, [r3, #20]
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d004      	beq.n	800d496 <TIM_OC2_SetConfig+0x102>
 800d48c:	f641 31c8 	movw	r1, #7112	@ 0x1bc8
 800d490:	4815      	ldr	r0, [pc, #84]	@ (800d4e8 <TIM_OC2_SetConfig+0x154>)
 800d492:	f7f8 fc43 	bl	8005d1c <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d496:	693b      	ldr	r3, [r7, #16]
 800d498:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800d49c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d49e:	693b      	ldr	r3, [r7, #16]
 800d4a0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800d4a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d4a6:	683b      	ldr	r3, [r7, #0]
 800d4a8:	695b      	ldr	r3, [r3, #20]
 800d4aa:	009b      	lsls	r3, r3, #2
 800d4ac:	693a      	ldr	r2, [r7, #16]
 800d4ae:	4313      	orrs	r3, r2
 800d4b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d4b2:	683b      	ldr	r3, [r7, #0]
 800d4b4:	699b      	ldr	r3, [r3, #24]
 800d4b6:	009b      	lsls	r3, r3, #2
 800d4b8:	693a      	ldr	r2, [r7, #16]
 800d4ba:	4313      	orrs	r3, r2
 800d4bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	693a      	ldr	r2, [r7, #16]
 800d4c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	68fa      	ldr	r2, [r7, #12]
 800d4c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d4ca:	683b      	ldr	r3, [r7, #0]
 800d4cc:	685a      	ldr	r2, [r3, #4]
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	697a      	ldr	r2, [r7, #20]
 800d4d6:	621a      	str	r2, [r3, #32]
}
 800d4d8:	bf00      	nop
 800d4da:	3718      	adds	r7, #24
 800d4dc:	46bd      	mov	sp, r7
 800d4de:	bd80      	pop	{r7, pc}
 800d4e0:	40012c00 	.word	0x40012c00
 800d4e4:	40013400 	.word	0x40013400
 800d4e8:	08010bb8 	.word	0x08010bb8
 800d4ec:	40014000 	.word	0x40014000
 800d4f0:	40014400 	.word	0x40014400
 800d4f4:	40014800 	.word	0x40014800

0800d4f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d4f8:	b580      	push	{r7, lr}
 800d4fa:	b086      	sub	sp, #24
 800d4fc:	af00      	add	r7, sp, #0
 800d4fe:	6078      	str	r0, [r7, #4]
 800d500:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	6a1b      	ldr	r3, [r3, #32]
 800d506:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	6a1b      	ldr	r3, [r3, #32]
 800d50c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	685b      	ldr	r3, [r3, #4]
 800d518:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	69db      	ldr	r3, [r3, #28]
 800d51e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d526:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d52a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	f023 0303 	bic.w	r3, r3, #3
 800d532:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d534:	683b      	ldr	r3, [r7, #0]
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	68fa      	ldr	r2, [r7, #12]
 800d53a:	4313      	orrs	r3, r2
 800d53c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d53e:	697b      	ldr	r3, [r7, #20]
 800d540:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800d544:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d546:	683b      	ldr	r3, [r7, #0]
 800d548:	689b      	ldr	r3, [r3, #8]
 800d54a:	021b      	lsls	r3, r3, #8
 800d54c:	697a      	ldr	r2, [r7, #20]
 800d54e:	4313      	orrs	r3, r2
 800d550:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	4a3b      	ldr	r2, [pc, #236]	@ (800d644 <TIM_OC3_SetConfig+0x14c>)
 800d556:	4293      	cmp	r3, r2
 800d558:	d003      	beq.n	800d562 <TIM_OC3_SetConfig+0x6a>
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	4a3a      	ldr	r2, [pc, #232]	@ (800d648 <TIM_OC3_SetConfig+0x150>)
 800d55e:	4293      	cmp	r3, r2
 800d560:	d11a      	bne.n	800d598 <TIM_OC3_SetConfig+0xa0>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800d562:	683b      	ldr	r3, [r7, #0]
 800d564:	68db      	ldr	r3, [r3, #12]
 800d566:	2b00      	cmp	r3, #0
 800d568:	d008      	beq.n	800d57c <TIM_OC3_SetConfig+0x84>
 800d56a:	683b      	ldr	r3, [r7, #0]
 800d56c:	68db      	ldr	r3, [r3, #12]
 800d56e:	2b08      	cmp	r3, #8
 800d570:	d004      	beq.n	800d57c <TIM_OC3_SetConfig+0x84>
 800d572:	f641 4105 	movw	r1, #7173	@ 0x1c05
 800d576:	4835      	ldr	r0, [pc, #212]	@ (800d64c <TIM_OC3_SetConfig+0x154>)
 800d578:	f7f8 fbd0 	bl	8005d1c <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d57c:	697b      	ldr	r3, [r7, #20]
 800d57e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800d582:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d584:	683b      	ldr	r3, [r7, #0]
 800d586:	68db      	ldr	r3, [r3, #12]
 800d588:	021b      	lsls	r3, r3, #8
 800d58a:	697a      	ldr	r2, [r7, #20]
 800d58c:	4313      	orrs	r3, r2
 800d58e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d590:	697b      	ldr	r3, [r7, #20]
 800d592:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800d596:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	4a2a      	ldr	r2, [pc, #168]	@ (800d644 <TIM_OC3_SetConfig+0x14c>)
 800d59c:	4293      	cmp	r3, r2
 800d59e:	d00f      	beq.n	800d5c0 <TIM_OC3_SetConfig+0xc8>
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	4a29      	ldr	r2, [pc, #164]	@ (800d648 <TIM_OC3_SetConfig+0x150>)
 800d5a4:	4293      	cmp	r3, r2
 800d5a6:	d00b      	beq.n	800d5c0 <TIM_OC3_SetConfig+0xc8>
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	4a29      	ldr	r2, [pc, #164]	@ (800d650 <TIM_OC3_SetConfig+0x158>)
 800d5ac:	4293      	cmp	r3, r2
 800d5ae:	d007      	beq.n	800d5c0 <TIM_OC3_SetConfig+0xc8>
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	4a28      	ldr	r2, [pc, #160]	@ (800d654 <TIM_OC3_SetConfig+0x15c>)
 800d5b4:	4293      	cmp	r3, r2
 800d5b6:	d003      	beq.n	800d5c0 <TIM_OC3_SetConfig+0xc8>
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	4a27      	ldr	r2, [pc, #156]	@ (800d658 <TIM_OC3_SetConfig+0x160>)
 800d5bc:	4293      	cmp	r3, r2
 800d5be:	d12f      	bne.n	800d620 <TIM_OC3_SetConfig+0x128>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800d5c0:	683b      	ldr	r3, [r7, #0]
 800d5c2:	699b      	ldr	r3, [r3, #24]
 800d5c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d5c8:	d008      	beq.n	800d5dc <TIM_OC3_SetConfig+0xe4>
 800d5ca:	683b      	ldr	r3, [r7, #0]
 800d5cc:	699b      	ldr	r3, [r3, #24]
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d004      	beq.n	800d5dc <TIM_OC3_SetConfig+0xe4>
 800d5d2:	f641 4112 	movw	r1, #7186	@ 0x1c12
 800d5d6:	481d      	ldr	r0, [pc, #116]	@ (800d64c <TIM_OC3_SetConfig+0x154>)
 800d5d8:	f7f8 fba0 	bl	8005d1c <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800d5dc:	683b      	ldr	r3, [r7, #0]
 800d5de:	695b      	ldr	r3, [r3, #20]
 800d5e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d5e4:	d008      	beq.n	800d5f8 <TIM_OC3_SetConfig+0x100>
 800d5e6:	683b      	ldr	r3, [r7, #0]
 800d5e8:	695b      	ldr	r3, [r3, #20]
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d004      	beq.n	800d5f8 <TIM_OC3_SetConfig+0x100>
 800d5ee:	f641 4113 	movw	r1, #7187	@ 0x1c13
 800d5f2:	4816      	ldr	r0, [pc, #88]	@ (800d64c <TIM_OC3_SetConfig+0x154>)
 800d5f4:	f7f8 fb92 	bl	8005d1c <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d5f8:	693b      	ldr	r3, [r7, #16]
 800d5fa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d5fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d600:	693b      	ldr	r3, [r7, #16]
 800d602:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800d606:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d608:	683b      	ldr	r3, [r7, #0]
 800d60a:	695b      	ldr	r3, [r3, #20]
 800d60c:	011b      	lsls	r3, r3, #4
 800d60e:	693a      	ldr	r2, [r7, #16]
 800d610:	4313      	orrs	r3, r2
 800d612:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d614:	683b      	ldr	r3, [r7, #0]
 800d616:	699b      	ldr	r3, [r3, #24]
 800d618:	011b      	lsls	r3, r3, #4
 800d61a:	693a      	ldr	r2, [r7, #16]
 800d61c:	4313      	orrs	r3, r2
 800d61e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	693a      	ldr	r2, [r7, #16]
 800d624:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	68fa      	ldr	r2, [r7, #12]
 800d62a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d62c:	683b      	ldr	r3, [r7, #0]
 800d62e:	685a      	ldr	r2, [r3, #4]
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	697a      	ldr	r2, [r7, #20]
 800d638:	621a      	str	r2, [r3, #32]
}
 800d63a:	bf00      	nop
 800d63c:	3718      	adds	r7, #24
 800d63e:	46bd      	mov	sp, r7
 800d640:	bd80      	pop	{r7, pc}
 800d642:	bf00      	nop
 800d644:	40012c00 	.word	0x40012c00
 800d648:	40013400 	.word	0x40013400
 800d64c:	08010bb8 	.word	0x08010bb8
 800d650:	40014000 	.word	0x40014000
 800d654:	40014400 	.word	0x40014400
 800d658:	40014800 	.word	0x40014800

0800d65c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d65c:	b580      	push	{r7, lr}
 800d65e:	b086      	sub	sp, #24
 800d660:	af00      	add	r7, sp, #0
 800d662:	6078      	str	r0, [r7, #4]
 800d664:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	6a1b      	ldr	r3, [r3, #32]
 800d66a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	6a1b      	ldr	r3, [r3, #32]
 800d670:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	685b      	ldr	r3, [r3, #4]
 800d67c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	69db      	ldr	r3, [r3, #28]
 800d682:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800d68a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d68e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d696:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d698:	683b      	ldr	r3, [r7, #0]
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	021b      	lsls	r3, r3, #8
 800d69e:	68fa      	ldr	r2, [r7, #12]
 800d6a0:	4313      	orrs	r3, r2
 800d6a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d6a4:	693b      	ldr	r3, [r7, #16]
 800d6a6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800d6aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d6ac:	683b      	ldr	r3, [r7, #0]
 800d6ae:	689b      	ldr	r3, [r3, #8]
 800d6b0:	031b      	lsls	r3, r3, #12
 800d6b2:	693a      	ldr	r2, [r7, #16]
 800d6b4:	4313      	orrs	r3, r2
 800d6b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	4a1e      	ldr	r2, [pc, #120]	@ (800d734 <TIM_OC4_SetConfig+0xd8>)
 800d6bc:	4293      	cmp	r3, r2
 800d6be:	d00f      	beq.n	800d6e0 <TIM_OC4_SetConfig+0x84>
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	4a1d      	ldr	r2, [pc, #116]	@ (800d738 <TIM_OC4_SetConfig+0xdc>)
 800d6c4:	4293      	cmp	r3, r2
 800d6c6:	d00b      	beq.n	800d6e0 <TIM_OC4_SetConfig+0x84>
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	4a1c      	ldr	r2, [pc, #112]	@ (800d73c <TIM_OC4_SetConfig+0xe0>)
 800d6cc:	4293      	cmp	r3, r2
 800d6ce:	d007      	beq.n	800d6e0 <TIM_OC4_SetConfig+0x84>
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	4a1b      	ldr	r2, [pc, #108]	@ (800d740 <TIM_OC4_SetConfig+0xe4>)
 800d6d4:	4293      	cmp	r3, r2
 800d6d6:	d003      	beq.n	800d6e0 <TIM_OC4_SetConfig+0x84>
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	4a1a      	ldr	r2, [pc, #104]	@ (800d744 <TIM_OC4_SetConfig+0xe8>)
 800d6dc:	4293      	cmp	r3, r2
 800d6de:	d117      	bne.n	800d710 <TIM_OC4_SetConfig+0xb4>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800d6e0:	683b      	ldr	r3, [r7, #0]
 800d6e2:	695b      	ldr	r3, [r3, #20]
 800d6e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d6e8:	d008      	beq.n	800d6fc <TIM_OC4_SetConfig+0xa0>
 800d6ea:	683b      	ldr	r3, [r7, #0]
 800d6ec:	695b      	ldr	r3, [r3, #20]
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d004      	beq.n	800d6fc <TIM_OC4_SetConfig+0xa0>
 800d6f2:	f641 4152 	movw	r1, #7250	@ 0x1c52
 800d6f6:	4814      	ldr	r0, [pc, #80]	@ (800d748 <TIM_OC4_SetConfig+0xec>)
 800d6f8:	f7f8 fb10 	bl	8005d1c <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d6fc:	697b      	ldr	r3, [r7, #20]
 800d6fe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d702:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d704:	683b      	ldr	r3, [r7, #0]
 800d706:	695b      	ldr	r3, [r3, #20]
 800d708:	019b      	lsls	r3, r3, #6
 800d70a:	697a      	ldr	r2, [r7, #20]
 800d70c:	4313      	orrs	r3, r2
 800d70e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	697a      	ldr	r2, [r7, #20]
 800d714:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	68fa      	ldr	r2, [r7, #12]
 800d71a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d71c:	683b      	ldr	r3, [r7, #0]
 800d71e:	685a      	ldr	r2, [r3, #4]
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	693a      	ldr	r2, [r7, #16]
 800d728:	621a      	str	r2, [r3, #32]
}
 800d72a:	bf00      	nop
 800d72c:	3718      	adds	r7, #24
 800d72e:	46bd      	mov	sp, r7
 800d730:	bd80      	pop	{r7, pc}
 800d732:	bf00      	nop
 800d734:	40012c00 	.word	0x40012c00
 800d738:	40013400 	.word	0x40013400
 800d73c:	40014000 	.word	0x40014000
 800d740:	40014400 	.word	0x40014400
 800d744:	40014800 	.word	0x40014800
 800d748:	08010bb8 	.word	0x08010bb8

0800d74c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800d74c:	b480      	push	{r7}
 800d74e:	b087      	sub	sp, #28
 800d750:	af00      	add	r7, sp, #0
 800d752:	6078      	str	r0, [r7, #4]
 800d754:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	6a1b      	ldr	r3, [r3, #32]
 800d75a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	6a1b      	ldr	r3, [r3, #32]
 800d760:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	685b      	ldr	r3, [r3, #4]
 800d76c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d772:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d77a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d77e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d780:	683b      	ldr	r3, [r7, #0]
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	68fa      	ldr	r2, [r7, #12]
 800d786:	4313      	orrs	r3, r2
 800d788:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800d78a:	693b      	ldr	r3, [r7, #16]
 800d78c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800d790:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800d792:	683b      	ldr	r3, [r7, #0]
 800d794:	689b      	ldr	r3, [r3, #8]
 800d796:	041b      	lsls	r3, r3, #16
 800d798:	693a      	ldr	r2, [r7, #16]
 800d79a:	4313      	orrs	r3, r2
 800d79c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	4a17      	ldr	r2, [pc, #92]	@ (800d800 <TIM_OC5_SetConfig+0xb4>)
 800d7a2:	4293      	cmp	r3, r2
 800d7a4:	d00f      	beq.n	800d7c6 <TIM_OC5_SetConfig+0x7a>
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	4a16      	ldr	r2, [pc, #88]	@ (800d804 <TIM_OC5_SetConfig+0xb8>)
 800d7aa:	4293      	cmp	r3, r2
 800d7ac:	d00b      	beq.n	800d7c6 <TIM_OC5_SetConfig+0x7a>
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	4a15      	ldr	r2, [pc, #84]	@ (800d808 <TIM_OC5_SetConfig+0xbc>)
 800d7b2:	4293      	cmp	r3, r2
 800d7b4:	d007      	beq.n	800d7c6 <TIM_OC5_SetConfig+0x7a>
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	4a14      	ldr	r2, [pc, #80]	@ (800d80c <TIM_OC5_SetConfig+0xc0>)
 800d7ba:	4293      	cmp	r3, r2
 800d7bc:	d003      	beq.n	800d7c6 <TIM_OC5_SetConfig+0x7a>
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	4a13      	ldr	r2, [pc, #76]	@ (800d810 <TIM_OC5_SetConfig+0xc4>)
 800d7c2:	4293      	cmp	r3, r2
 800d7c4:	d109      	bne.n	800d7da <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800d7c6:	697b      	ldr	r3, [r7, #20]
 800d7c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d7cc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800d7ce:	683b      	ldr	r3, [r7, #0]
 800d7d0:	695b      	ldr	r3, [r3, #20]
 800d7d2:	021b      	lsls	r3, r3, #8
 800d7d4:	697a      	ldr	r2, [r7, #20]
 800d7d6:	4313      	orrs	r3, r2
 800d7d8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	697a      	ldr	r2, [r7, #20]
 800d7de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	68fa      	ldr	r2, [r7, #12]
 800d7e4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800d7e6:	683b      	ldr	r3, [r7, #0]
 800d7e8:	685a      	ldr	r2, [r3, #4]
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	693a      	ldr	r2, [r7, #16]
 800d7f2:	621a      	str	r2, [r3, #32]
}
 800d7f4:	bf00      	nop
 800d7f6:	371c      	adds	r7, #28
 800d7f8:	46bd      	mov	sp, r7
 800d7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7fe:	4770      	bx	lr
 800d800:	40012c00 	.word	0x40012c00
 800d804:	40013400 	.word	0x40013400
 800d808:	40014000 	.word	0x40014000
 800d80c:	40014400 	.word	0x40014400
 800d810:	40014800 	.word	0x40014800

0800d814 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800d814:	b480      	push	{r7}
 800d816:	b087      	sub	sp, #28
 800d818:	af00      	add	r7, sp, #0
 800d81a:	6078      	str	r0, [r7, #4]
 800d81c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	6a1b      	ldr	r3, [r3, #32]
 800d822:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	6a1b      	ldr	r3, [r3, #32]
 800d828:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	685b      	ldr	r3, [r3, #4]
 800d834:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d83a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800d842:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d846:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d848:	683b      	ldr	r3, [r7, #0]
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	021b      	lsls	r3, r3, #8
 800d84e:	68fa      	ldr	r2, [r7, #12]
 800d850:	4313      	orrs	r3, r2
 800d852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800d854:	693b      	ldr	r3, [r7, #16]
 800d856:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800d85a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800d85c:	683b      	ldr	r3, [r7, #0]
 800d85e:	689b      	ldr	r3, [r3, #8]
 800d860:	051b      	lsls	r3, r3, #20
 800d862:	693a      	ldr	r2, [r7, #16]
 800d864:	4313      	orrs	r3, r2
 800d866:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	4a18      	ldr	r2, [pc, #96]	@ (800d8cc <TIM_OC6_SetConfig+0xb8>)
 800d86c:	4293      	cmp	r3, r2
 800d86e:	d00f      	beq.n	800d890 <TIM_OC6_SetConfig+0x7c>
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	4a17      	ldr	r2, [pc, #92]	@ (800d8d0 <TIM_OC6_SetConfig+0xbc>)
 800d874:	4293      	cmp	r3, r2
 800d876:	d00b      	beq.n	800d890 <TIM_OC6_SetConfig+0x7c>
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	4a16      	ldr	r2, [pc, #88]	@ (800d8d4 <TIM_OC6_SetConfig+0xc0>)
 800d87c:	4293      	cmp	r3, r2
 800d87e:	d007      	beq.n	800d890 <TIM_OC6_SetConfig+0x7c>
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	4a15      	ldr	r2, [pc, #84]	@ (800d8d8 <TIM_OC6_SetConfig+0xc4>)
 800d884:	4293      	cmp	r3, r2
 800d886:	d003      	beq.n	800d890 <TIM_OC6_SetConfig+0x7c>
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	4a14      	ldr	r2, [pc, #80]	@ (800d8dc <TIM_OC6_SetConfig+0xc8>)
 800d88c:	4293      	cmp	r3, r2
 800d88e:	d109      	bne.n	800d8a4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800d890:	697b      	ldr	r3, [r7, #20]
 800d892:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800d896:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800d898:	683b      	ldr	r3, [r7, #0]
 800d89a:	695b      	ldr	r3, [r3, #20]
 800d89c:	029b      	lsls	r3, r3, #10
 800d89e:	697a      	ldr	r2, [r7, #20]
 800d8a0:	4313      	orrs	r3, r2
 800d8a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	697a      	ldr	r2, [r7, #20]
 800d8a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	68fa      	ldr	r2, [r7, #12]
 800d8ae:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800d8b0:	683b      	ldr	r3, [r7, #0]
 800d8b2:	685a      	ldr	r2, [r3, #4]
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	693a      	ldr	r2, [r7, #16]
 800d8bc:	621a      	str	r2, [r3, #32]
}
 800d8be:	bf00      	nop
 800d8c0:	371c      	adds	r7, #28
 800d8c2:	46bd      	mov	sp, r7
 800d8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8c8:	4770      	bx	lr
 800d8ca:	bf00      	nop
 800d8cc:	40012c00 	.word	0x40012c00
 800d8d0:	40013400 	.word	0x40013400
 800d8d4:	40014000 	.word	0x40014000
 800d8d8:	40014400 	.word	0x40014400
 800d8dc:	40014800 	.word	0x40014800

0800d8e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d8e0:	b480      	push	{r7}
 800d8e2:	b087      	sub	sp, #28
 800d8e4:	af00      	add	r7, sp, #0
 800d8e6:	60f8      	str	r0, [r7, #12]
 800d8e8:	60b9      	str	r1, [r7, #8]
 800d8ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	6a1b      	ldr	r3, [r3, #32]
 800d8f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	6a1b      	ldr	r3, [r3, #32]
 800d8f6:	f023 0201 	bic.w	r2, r3, #1
 800d8fa:	68fb      	ldr	r3, [r7, #12]
 800d8fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	699b      	ldr	r3, [r3, #24]
 800d902:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d904:	693b      	ldr	r3, [r7, #16]
 800d906:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800d90a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	011b      	lsls	r3, r3, #4
 800d910:	693a      	ldr	r2, [r7, #16]
 800d912:	4313      	orrs	r3, r2
 800d914:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d916:	697b      	ldr	r3, [r7, #20]
 800d918:	f023 030a 	bic.w	r3, r3, #10
 800d91c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d91e:	697a      	ldr	r2, [r7, #20]
 800d920:	68bb      	ldr	r3, [r7, #8]
 800d922:	4313      	orrs	r3, r2
 800d924:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d926:	68fb      	ldr	r3, [r7, #12]
 800d928:	693a      	ldr	r2, [r7, #16]
 800d92a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	697a      	ldr	r2, [r7, #20]
 800d930:	621a      	str	r2, [r3, #32]
}
 800d932:	bf00      	nop
 800d934:	371c      	adds	r7, #28
 800d936:	46bd      	mov	sp, r7
 800d938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d93c:	4770      	bx	lr

0800d93e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d93e:	b480      	push	{r7}
 800d940:	b087      	sub	sp, #28
 800d942:	af00      	add	r7, sp, #0
 800d944:	60f8      	str	r0, [r7, #12]
 800d946:	60b9      	str	r1, [r7, #8]
 800d948:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	6a1b      	ldr	r3, [r3, #32]
 800d94e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	6a1b      	ldr	r3, [r3, #32]
 800d954:	f023 0210 	bic.w	r2, r3, #16
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	699b      	ldr	r3, [r3, #24]
 800d960:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d962:	693b      	ldr	r3, [r7, #16]
 800d964:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800d968:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	031b      	lsls	r3, r3, #12
 800d96e:	693a      	ldr	r2, [r7, #16]
 800d970:	4313      	orrs	r3, r2
 800d972:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d974:	697b      	ldr	r3, [r7, #20]
 800d976:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800d97a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d97c:	68bb      	ldr	r3, [r7, #8]
 800d97e:	011b      	lsls	r3, r3, #4
 800d980:	697a      	ldr	r2, [r7, #20]
 800d982:	4313      	orrs	r3, r2
 800d984:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	693a      	ldr	r2, [r7, #16]
 800d98a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d98c:	68fb      	ldr	r3, [r7, #12]
 800d98e:	697a      	ldr	r2, [r7, #20]
 800d990:	621a      	str	r2, [r3, #32]
}
 800d992:	bf00      	nop
 800d994:	371c      	adds	r7, #28
 800d996:	46bd      	mov	sp, r7
 800d998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d99c:	4770      	bx	lr

0800d99e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d99e:	b480      	push	{r7}
 800d9a0:	b085      	sub	sp, #20
 800d9a2:	af00      	add	r7, sp, #0
 800d9a4:	6078      	str	r0, [r7, #4]
 800d9a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	689b      	ldr	r3, [r3, #8]
 800d9ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d9b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d9b6:	683a      	ldr	r2, [r7, #0]
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	4313      	orrs	r3, r2
 800d9bc:	f043 0307 	orr.w	r3, r3, #7
 800d9c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	68fa      	ldr	r2, [r7, #12]
 800d9c6:	609a      	str	r2, [r3, #8]
}
 800d9c8:	bf00      	nop
 800d9ca:	3714      	adds	r7, #20
 800d9cc:	46bd      	mov	sp, r7
 800d9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9d2:	4770      	bx	lr

0800d9d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d9d4:	b480      	push	{r7}
 800d9d6:	b087      	sub	sp, #28
 800d9d8:	af00      	add	r7, sp, #0
 800d9da:	60f8      	str	r0, [r7, #12]
 800d9dc:	60b9      	str	r1, [r7, #8]
 800d9de:	607a      	str	r2, [r7, #4]
 800d9e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	689b      	ldr	r3, [r3, #8]
 800d9e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d9e8:	697b      	ldr	r3, [r7, #20]
 800d9ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800d9ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d9f0:	683b      	ldr	r3, [r7, #0]
 800d9f2:	021a      	lsls	r2, r3, #8
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	431a      	orrs	r2, r3
 800d9f8:	68bb      	ldr	r3, [r7, #8]
 800d9fa:	4313      	orrs	r3, r2
 800d9fc:	697a      	ldr	r2, [r7, #20]
 800d9fe:	4313      	orrs	r3, r2
 800da00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	697a      	ldr	r2, [r7, #20]
 800da06:	609a      	str	r2, [r3, #8]
}
 800da08:	bf00      	nop
 800da0a:	371c      	adds	r7, #28
 800da0c:	46bd      	mov	sp, r7
 800da0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da12:	4770      	bx	lr

0800da14 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800da14:	b580      	push	{r7, lr}
 800da16:	b086      	sub	sp, #24
 800da18:	af00      	add	r7, sp, #0
 800da1a:	60f8      	str	r0, [r7, #12]
 800da1c:	60b9      	str	r1, [r7, #8]
 800da1e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	4a2f      	ldr	r2, [pc, #188]	@ (800dae0 <TIM_CCxChannelCmd+0xcc>)
 800da24:	4293      	cmp	r3, r2
 800da26:	d024      	beq.n	800da72 <TIM_CCxChannelCmd+0x5e>
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800da2e:	d020      	beq.n	800da72 <TIM_CCxChannelCmd+0x5e>
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	4a2c      	ldr	r2, [pc, #176]	@ (800dae4 <TIM_CCxChannelCmd+0xd0>)
 800da34:	4293      	cmp	r3, r2
 800da36:	d01c      	beq.n	800da72 <TIM_CCxChannelCmd+0x5e>
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	4a2b      	ldr	r2, [pc, #172]	@ (800dae8 <TIM_CCxChannelCmd+0xd4>)
 800da3c:	4293      	cmp	r3, r2
 800da3e:	d018      	beq.n	800da72 <TIM_CCxChannelCmd+0x5e>
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	4a2a      	ldr	r2, [pc, #168]	@ (800daec <TIM_CCxChannelCmd+0xd8>)
 800da44:	4293      	cmp	r3, r2
 800da46:	d014      	beq.n	800da72 <TIM_CCxChannelCmd+0x5e>
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	4a29      	ldr	r2, [pc, #164]	@ (800daf0 <TIM_CCxChannelCmd+0xdc>)
 800da4c:	4293      	cmp	r3, r2
 800da4e:	d010      	beq.n	800da72 <TIM_CCxChannelCmd+0x5e>
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	4a28      	ldr	r2, [pc, #160]	@ (800daf4 <TIM_CCxChannelCmd+0xe0>)
 800da54:	4293      	cmp	r3, r2
 800da56:	d00c      	beq.n	800da72 <TIM_CCxChannelCmd+0x5e>
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	4a27      	ldr	r2, [pc, #156]	@ (800daf8 <TIM_CCxChannelCmd+0xe4>)
 800da5c:	4293      	cmp	r3, r2
 800da5e:	d008      	beq.n	800da72 <TIM_CCxChannelCmd+0x5e>
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	4a26      	ldr	r2, [pc, #152]	@ (800dafc <TIM_CCxChannelCmd+0xe8>)
 800da64:	4293      	cmp	r3, r2
 800da66:	d004      	beq.n	800da72 <TIM_CCxChannelCmd+0x5e>
 800da68:	f641 61ac 	movw	r1, #7852	@ 0x1eac
 800da6c:	4824      	ldr	r0, [pc, #144]	@ (800db00 <TIM_CCxChannelCmd+0xec>)
 800da6e:	f7f8 f955 	bl	8005d1c <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 800da72:	68bb      	ldr	r3, [r7, #8]
 800da74:	2b00      	cmp	r3, #0
 800da76:	d016      	beq.n	800daa6 <TIM_CCxChannelCmd+0x92>
 800da78:	68bb      	ldr	r3, [r7, #8]
 800da7a:	2b04      	cmp	r3, #4
 800da7c:	d013      	beq.n	800daa6 <TIM_CCxChannelCmd+0x92>
 800da7e:	68bb      	ldr	r3, [r7, #8]
 800da80:	2b08      	cmp	r3, #8
 800da82:	d010      	beq.n	800daa6 <TIM_CCxChannelCmd+0x92>
 800da84:	68bb      	ldr	r3, [r7, #8]
 800da86:	2b0c      	cmp	r3, #12
 800da88:	d00d      	beq.n	800daa6 <TIM_CCxChannelCmd+0x92>
 800da8a:	68bb      	ldr	r3, [r7, #8]
 800da8c:	2b10      	cmp	r3, #16
 800da8e:	d00a      	beq.n	800daa6 <TIM_CCxChannelCmd+0x92>
 800da90:	68bb      	ldr	r3, [r7, #8]
 800da92:	2b14      	cmp	r3, #20
 800da94:	d007      	beq.n	800daa6 <TIM_CCxChannelCmd+0x92>
 800da96:	68bb      	ldr	r3, [r7, #8]
 800da98:	2b3c      	cmp	r3, #60	@ 0x3c
 800da9a:	d004      	beq.n	800daa6 <TIM_CCxChannelCmd+0x92>
 800da9c:	f641 61ad 	movw	r1, #7853	@ 0x1ead
 800daa0:	4817      	ldr	r0, [pc, #92]	@ (800db00 <TIM_CCxChannelCmd+0xec>)
 800daa2:	f7f8 f93b 	bl	8005d1c <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800daa6:	68bb      	ldr	r3, [r7, #8]
 800daa8:	f003 031f 	and.w	r3, r3, #31
 800daac:	2201      	movs	r2, #1
 800daae:	fa02 f303 	lsl.w	r3, r2, r3
 800dab2:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	6a1a      	ldr	r2, [r3, #32]
 800dab8:	697b      	ldr	r3, [r7, #20]
 800daba:	43db      	mvns	r3, r3
 800dabc:	401a      	ands	r2, r3
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	6a1a      	ldr	r2, [r3, #32]
 800dac6:	68bb      	ldr	r3, [r7, #8]
 800dac8:	f003 031f 	and.w	r3, r3, #31
 800dacc:	6879      	ldr	r1, [r7, #4]
 800dace:	fa01 f303 	lsl.w	r3, r1, r3
 800dad2:	431a      	orrs	r2, r3
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	621a      	str	r2, [r3, #32]
}
 800dad8:	bf00      	nop
 800dada:	3718      	adds	r7, #24
 800dadc:	46bd      	mov	sp, r7
 800dade:	bd80      	pop	{r7, pc}
 800dae0:	40012c00 	.word	0x40012c00
 800dae4:	40000400 	.word	0x40000400
 800dae8:	40000800 	.word	0x40000800
 800daec:	40000c00 	.word	0x40000c00
 800daf0:	40013400 	.word	0x40013400
 800daf4:	40014000 	.word	0x40014000
 800daf8:	40014400 	.word	0x40014400
 800dafc:	40014800 	.word	0x40014800
 800db00:	08010bb8 	.word	0x08010bb8

0800db04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800db04:	b580      	push	{r7, lr}
 800db06:	b084      	sub	sp, #16
 800db08:	af00      	add	r7, sp, #0
 800db0a:	6078      	str	r0, [r7, #4]
 800db0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	4a34      	ldr	r2, [pc, #208]	@ (800dbe4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800db14:	4293      	cmp	r3, r2
 800db16:	d02c      	beq.n	800db72 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800db20:	d027      	beq.n	800db72 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	4a30      	ldr	r2, [pc, #192]	@ (800dbe8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800db28:	4293      	cmp	r3, r2
 800db2a:	d022      	beq.n	800db72 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	4a2e      	ldr	r2, [pc, #184]	@ (800dbec <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800db32:	4293      	cmp	r3, r2
 800db34:	d01d      	beq.n	800db72 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	4a2d      	ldr	r2, [pc, #180]	@ (800dbf0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800db3c:	4293      	cmp	r3, r2
 800db3e:	d018      	beq.n	800db72 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	4a2b      	ldr	r2, [pc, #172]	@ (800dbf4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800db46:	4293      	cmp	r3, r2
 800db48:	d013      	beq.n	800db72 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	4a2a      	ldr	r2, [pc, #168]	@ (800dbf8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800db50:	4293      	cmp	r3, r2
 800db52:	d00e      	beq.n	800db72 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	4a28      	ldr	r2, [pc, #160]	@ (800dbfc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800db5a:	4293      	cmp	r3, r2
 800db5c:	d009      	beq.n	800db72 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	4a27      	ldr	r2, [pc, #156]	@ (800dc00 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800db64:	4293      	cmp	r3, r2
 800db66:	d004      	beq.n	800db72 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800db68:	f240 71ac 	movw	r1, #1964	@ 0x7ac
 800db6c:	4825      	ldr	r0, [pc, #148]	@ (800dc04 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800db6e:	f7f8 f8d5 	bl	8005d1c <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800db72:	683b      	ldr	r3, [r7, #0]
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	2b00      	cmp	r3, #0
 800db78:	d020      	beq.n	800dbbc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800db7a:	683b      	ldr	r3, [r7, #0]
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	2b10      	cmp	r3, #16
 800db80:	d01c      	beq.n	800dbbc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800db82:	683b      	ldr	r3, [r7, #0]
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	2b20      	cmp	r3, #32
 800db88:	d018      	beq.n	800dbbc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800db8a:	683b      	ldr	r3, [r7, #0]
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	2b30      	cmp	r3, #48	@ 0x30
 800db90:	d014      	beq.n	800dbbc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800db92:	683b      	ldr	r3, [r7, #0]
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	2b40      	cmp	r3, #64	@ 0x40
 800db98:	d010      	beq.n	800dbbc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800db9a:	683b      	ldr	r3, [r7, #0]
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	2b50      	cmp	r3, #80	@ 0x50
 800dba0:	d00c      	beq.n	800dbbc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800dba2:	683b      	ldr	r3, [r7, #0]
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	2b60      	cmp	r3, #96	@ 0x60
 800dba8:	d008      	beq.n	800dbbc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800dbaa:	683b      	ldr	r3, [r7, #0]
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	2b70      	cmp	r3, #112	@ 0x70
 800dbb0:	d004      	beq.n	800dbbc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800dbb2:	f240 71ad 	movw	r1, #1965	@ 0x7ad
 800dbb6:	4813      	ldr	r0, [pc, #76]	@ (800dc04 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800dbb8:	f7f8 f8b0 	bl	8005d1c <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800dbbc:	683b      	ldr	r3, [r7, #0]
 800dbbe:	689b      	ldr	r3, [r3, #8]
 800dbc0:	2b80      	cmp	r3, #128	@ 0x80
 800dbc2:	d008      	beq.n	800dbd6 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
 800dbc4:	683b      	ldr	r3, [r7, #0]
 800dbc6:	689b      	ldr	r3, [r3, #8]
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d004      	beq.n	800dbd6 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
 800dbcc:	f240 71ae 	movw	r1, #1966	@ 0x7ae
 800dbd0:	480c      	ldr	r0, [pc, #48]	@ (800dc04 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800dbd2:	f7f8 f8a3 	bl	8005d1c <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800dbdc:	2b01      	cmp	r3, #1
 800dbde:	d113      	bne.n	800dc08 <HAL_TIMEx_MasterConfigSynchronization+0x104>
 800dbe0:	2302      	movs	r3, #2
 800dbe2:	e0d3      	b.n	800dd8c <HAL_TIMEx_MasterConfigSynchronization+0x288>
 800dbe4:	40012c00 	.word	0x40012c00
 800dbe8:	40000400 	.word	0x40000400
 800dbec:	40000800 	.word	0x40000800
 800dbf0:	40000c00 	.word	0x40000c00
 800dbf4:	40001000 	.word	0x40001000
 800dbf8:	40001400 	.word	0x40001400
 800dbfc:	40013400 	.word	0x40013400
 800dc00:	40014000 	.word	0x40014000
 800dc04:	08010bf0 	.word	0x08010bf0
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	2201      	movs	r2, #1
 800dc0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	2202      	movs	r2, #2
 800dc14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	685b      	ldr	r3, [r3, #4]
 800dc1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	689b      	ldr	r3, [r3, #8]
 800dc26:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	4a59      	ldr	r2, [pc, #356]	@ (800dd94 <HAL_TIMEx_MasterConfigSynchronization+0x290>)
 800dc2e:	4293      	cmp	r3, r2
 800dc30:	d004      	beq.n	800dc3c <HAL_TIMEx_MasterConfigSynchronization+0x138>
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	4a58      	ldr	r2, [pc, #352]	@ (800dd98 <HAL_TIMEx_MasterConfigSynchronization+0x294>)
 800dc38:	4293      	cmp	r3, r2
 800dc3a:	d161      	bne.n	800dd00 <HAL_TIMEx_MasterConfigSynchronization+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 800dc3c:	683b      	ldr	r3, [r7, #0]
 800dc3e:	685b      	ldr	r3, [r3, #4]
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d054      	beq.n	800dcee <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800dc44:	683b      	ldr	r3, [r7, #0]
 800dc46:	685b      	ldr	r3, [r3, #4]
 800dc48:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800dc4c:	d04f      	beq.n	800dcee <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800dc4e:	683b      	ldr	r3, [r7, #0]
 800dc50:	685b      	ldr	r3, [r3, #4]
 800dc52:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800dc56:	d04a      	beq.n	800dcee <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800dc58:	683b      	ldr	r3, [r7, #0]
 800dc5a:	685b      	ldr	r3, [r3, #4]
 800dc5c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800dc60:	d045      	beq.n	800dcee <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800dc62:	683b      	ldr	r3, [r7, #0]
 800dc64:	685b      	ldr	r3, [r3, #4]
 800dc66:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800dc6a:	d040      	beq.n	800dcee <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800dc6c:	683b      	ldr	r3, [r7, #0]
 800dc6e:	685b      	ldr	r3, [r3, #4]
 800dc70:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 800dc74:	d03b      	beq.n	800dcee <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800dc76:	683b      	ldr	r3, [r7, #0]
 800dc78:	685b      	ldr	r3, [r3, #4]
 800dc7a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800dc7e:	d036      	beq.n	800dcee <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800dc80:	683b      	ldr	r3, [r7, #0]
 800dc82:	685b      	ldr	r3, [r3, #4]
 800dc84:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800dc88:	d031      	beq.n	800dcee <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800dc8a:	683b      	ldr	r3, [r7, #0]
 800dc8c:	685b      	ldr	r3, [r3, #4]
 800dc8e:	f5b3 0fe0 	cmp.w	r3, #7340032	@ 0x700000
 800dc92:	d02c      	beq.n	800dcee <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800dc94:	683b      	ldr	r3, [r7, #0]
 800dc96:	685b      	ldr	r3, [r3, #4]
 800dc98:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800dc9c:	d027      	beq.n	800dcee <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800dc9e:	683b      	ldr	r3, [r7, #0]
 800dca0:	685b      	ldr	r3, [r3, #4]
 800dca2:	f5b3 0f10 	cmp.w	r3, #9437184	@ 0x900000
 800dca6:	d022      	beq.n	800dcee <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800dca8:	683b      	ldr	r3, [r7, #0]
 800dcaa:	685b      	ldr	r3, [r3, #4]
 800dcac:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800dcb0:	d01d      	beq.n	800dcee <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800dcb2:	683b      	ldr	r3, [r7, #0]
 800dcb4:	685b      	ldr	r3, [r3, #4]
 800dcb6:	f5b3 0f30 	cmp.w	r3, #11534336	@ 0xb00000
 800dcba:	d018      	beq.n	800dcee <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800dcbc:	683b      	ldr	r3, [r7, #0]
 800dcbe:	685b      	ldr	r3, [r3, #4]
 800dcc0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800dcc4:	d013      	beq.n	800dcee <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800dcc6:	683b      	ldr	r3, [r7, #0]
 800dcc8:	685b      	ldr	r3, [r3, #4]
 800dcca:	f5b3 0f50 	cmp.w	r3, #13631488	@ 0xd00000
 800dcce:	d00e      	beq.n	800dcee <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800dcd0:	683b      	ldr	r3, [r7, #0]
 800dcd2:	685b      	ldr	r3, [r3, #4]
 800dcd4:	f5b3 0f60 	cmp.w	r3, #14680064	@ 0xe00000
 800dcd8:	d009      	beq.n	800dcee <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800dcda:	683b      	ldr	r3, [r7, #0]
 800dcdc:	685b      	ldr	r3, [r3, #4]
 800dcde:	f5b3 0f70 	cmp.w	r3, #15728640	@ 0xf00000
 800dce2:	d004      	beq.n	800dcee <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800dce4:	f44f 61f8 	mov.w	r1, #1984	@ 0x7c0
 800dce8:	482c      	ldr	r0, [pc, #176]	@ (800dd9c <HAL_TIMEx_MasterConfigSynchronization+0x298>)
 800dcea:	f7f8 f817 	bl	8005d1c <assert_failed>

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800dcf4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800dcf6:	683b      	ldr	r3, [r7, #0]
 800dcf8:	685b      	ldr	r3, [r3, #4]
 800dcfa:	68fa      	ldr	r2, [r7, #12]
 800dcfc:	4313      	orrs	r3, r2
 800dcfe:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dd06:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800dd08:	683b      	ldr	r3, [r7, #0]
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	68fa      	ldr	r2, [r7, #12]
 800dd0e:	4313      	orrs	r3, r2
 800dd10:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	68fa      	ldr	r2, [r7, #12]
 800dd18:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	4a1d      	ldr	r2, [pc, #116]	@ (800dd94 <HAL_TIMEx_MasterConfigSynchronization+0x290>)
 800dd20:	4293      	cmp	r3, r2
 800dd22:	d01d      	beq.n	800dd60 <HAL_TIMEx_MasterConfigSynchronization+0x25c>
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dd2c:	d018      	beq.n	800dd60 <HAL_TIMEx_MasterConfigSynchronization+0x25c>
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	4a1b      	ldr	r2, [pc, #108]	@ (800dda0 <HAL_TIMEx_MasterConfigSynchronization+0x29c>)
 800dd34:	4293      	cmp	r3, r2
 800dd36:	d013      	beq.n	800dd60 <HAL_TIMEx_MasterConfigSynchronization+0x25c>
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	4a19      	ldr	r2, [pc, #100]	@ (800dda4 <HAL_TIMEx_MasterConfigSynchronization+0x2a0>)
 800dd3e:	4293      	cmp	r3, r2
 800dd40:	d00e      	beq.n	800dd60 <HAL_TIMEx_MasterConfigSynchronization+0x25c>
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	4a18      	ldr	r2, [pc, #96]	@ (800dda8 <HAL_TIMEx_MasterConfigSynchronization+0x2a4>)
 800dd48:	4293      	cmp	r3, r2
 800dd4a:	d009      	beq.n	800dd60 <HAL_TIMEx_MasterConfigSynchronization+0x25c>
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	4a11      	ldr	r2, [pc, #68]	@ (800dd98 <HAL_TIMEx_MasterConfigSynchronization+0x294>)
 800dd52:	4293      	cmp	r3, r2
 800dd54:	d004      	beq.n	800dd60 <HAL_TIMEx_MasterConfigSynchronization+0x25c>
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	4a14      	ldr	r2, [pc, #80]	@ (800ddac <HAL_TIMEx_MasterConfigSynchronization+0x2a8>)
 800dd5c:	4293      	cmp	r3, r2
 800dd5e:	d10c      	bne.n	800dd7a <HAL_TIMEx_MasterConfigSynchronization+0x276>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800dd60:	68bb      	ldr	r3, [r7, #8]
 800dd62:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800dd66:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800dd68:	683b      	ldr	r3, [r7, #0]
 800dd6a:	689b      	ldr	r3, [r3, #8]
 800dd6c:	68ba      	ldr	r2, [r7, #8]
 800dd6e:	4313      	orrs	r3, r2
 800dd70:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	68ba      	ldr	r2, [r7, #8]
 800dd78:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	2201      	movs	r2, #1
 800dd7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	2200      	movs	r2, #0
 800dd86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800dd8a:	2300      	movs	r3, #0
}
 800dd8c:	4618      	mov	r0, r3
 800dd8e:	3710      	adds	r7, #16
 800dd90:	46bd      	mov	sp, r7
 800dd92:	bd80      	pop	{r7, pc}
 800dd94:	40012c00 	.word	0x40012c00
 800dd98:	40013400 	.word	0x40013400
 800dd9c:	08010bf0 	.word	0x08010bf0
 800dda0:	40000400 	.word	0x40000400
 800dda4:	40000800 	.word	0x40000800
 800dda8:	40000c00 	.word	0x40000c00
 800ddac:	40014000 	.word	0x40014000

0800ddb0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ddb0:	b580      	push	{r7, lr}
 800ddb2:	b084      	sub	sp, #16
 800ddb4:	af00      	add	r7, sp, #0
 800ddb6:	6078      	str	r0, [r7, #4]
 800ddb8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ddba:	2300      	movs	r3, #0
 800ddbc:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	4a91      	ldr	r2, [pc, #580]	@ (800e008 <HAL_TIMEx_ConfigBreakDeadTime+0x258>)
 800ddc4:	4293      	cmp	r3, r2
 800ddc6:	d018      	beq.n	800ddfa <HAL_TIMEx_ConfigBreakDeadTime+0x4a>
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	4a8f      	ldr	r2, [pc, #572]	@ (800e00c <HAL_TIMEx_ConfigBreakDeadTime+0x25c>)
 800ddce:	4293      	cmp	r3, r2
 800ddd0:	d013      	beq.n	800ddfa <HAL_TIMEx_ConfigBreakDeadTime+0x4a>
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	4a8e      	ldr	r2, [pc, #568]	@ (800e010 <HAL_TIMEx_ConfigBreakDeadTime+0x260>)
 800ddd8:	4293      	cmp	r3, r2
 800ddda:	d00e      	beq.n	800ddfa <HAL_TIMEx_ConfigBreakDeadTime+0x4a>
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	4a8c      	ldr	r2, [pc, #560]	@ (800e014 <HAL_TIMEx_ConfigBreakDeadTime+0x264>)
 800dde2:	4293      	cmp	r3, r2
 800dde4:	d009      	beq.n	800ddfa <HAL_TIMEx_ConfigBreakDeadTime+0x4a>
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	4a8b      	ldr	r2, [pc, #556]	@ (800e018 <HAL_TIMEx_ConfigBreakDeadTime+0x268>)
 800ddec:	4293      	cmp	r3, r2
 800ddee:	d004      	beq.n	800ddfa <HAL_TIMEx_ConfigBreakDeadTime+0x4a>
 800ddf0:	f240 71f5 	movw	r1, #2037	@ 0x7f5
 800ddf4:	4889      	ldr	r0, [pc, #548]	@ (800e01c <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 800ddf6:	f7f7 ff91 	bl	8005d1c <assert_failed>
  assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
 800ddfa:	683b      	ldr	r3, [r7, #0]
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800de02:	d008      	beq.n	800de16 <HAL_TIMEx_ConfigBreakDeadTime+0x66>
 800de04:	683b      	ldr	r3, [r7, #0]
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d004      	beq.n	800de16 <HAL_TIMEx_ConfigBreakDeadTime+0x66>
 800de0c:	f240 71f6 	movw	r1, #2038	@ 0x7f6
 800de10:	4882      	ldr	r0, [pc, #520]	@ (800e01c <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 800de12:	f7f7 ff83 	bl	8005d1c <assert_failed>
  assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
 800de16:	683b      	ldr	r3, [r7, #0]
 800de18:	685b      	ldr	r3, [r3, #4]
 800de1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800de1e:	d008      	beq.n	800de32 <HAL_TIMEx_ConfigBreakDeadTime+0x82>
 800de20:	683b      	ldr	r3, [r7, #0]
 800de22:	685b      	ldr	r3, [r3, #4]
 800de24:	2b00      	cmp	r3, #0
 800de26:	d004      	beq.n	800de32 <HAL_TIMEx_ConfigBreakDeadTime+0x82>
 800de28:	f240 71f7 	movw	r1, #2039	@ 0x7f7
 800de2c:	487b      	ldr	r0, [pc, #492]	@ (800e01c <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 800de2e:	f7f7 ff75 	bl	8005d1c <assert_failed>
  assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
 800de32:	683b      	ldr	r3, [r7, #0]
 800de34:	689b      	ldr	r3, [r3, #8]
 800de36:	2b00      	cmp	r3, #0
 800de38:	d013      	beq.n	800de62 <HAL_TIMEx_ConfigBreakDeadTime+0xb2>
 800de3a:	683b      	ldr	r3, [r7, #0]
 800de3c:	689b      	ldr	r3, [r3, #8]
 800de3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800de42:	d00e      	beq.n	800de62 <HAL_TIMEx_ConfigBreakDeadTime+0xb2>
 800de44:	683b      	ldr	r3, [r7, #0]
 800de46:	689b      	ldr	r3, [r3, #8]
 800de48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800de4c:	d009      	beq.n	800de62 <HAL_TIMEx_ConfigBreakDeadTime+0xb2>
 800de4e:	683b      	ldr	r3, [r7, #0]
 800de50:	689b      	ldr	r3, [r3, #8]
 800de52:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800de56:	d004      	beq.n	800de62 <HAL_TIMEx_ConfigBreakDeadTime+0xb2>
 800de58:	f44f 61ff 	mov.w	r1, #2040	@ 0x7f8
 800de5c:	486f      	ldr	r0, [pc, #444]	@ (800e01c <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 800de5e:	f7f7 ff5d 	bl	8005d1c <assert_failed>
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
 800de62:	683b      	ldr	r3, [r7, #0]
 800de64:	68db      	ldr	r3, [r3, #12]
 800de66:	2bff      	cmp	r3, #255	@ 0xff
 800de68:	d904      	bls.n	800de74 <HAL_TIMEx_ConfigBreakDeadTime+0xc4>
 800de6a:	f240 71f9 	movw	r1, #2041	@ 0x7f9
 800de6e:	486b      	ldr	r0, [pc, #428]	@ (800e01c <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 800de70:	f7f7 ff54 	bl	8005d1c <assert_failed>
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
 800de74:	683b      	ldr	r3, [r7, #0]
 800de76:	691b      	ldr	r3, [r3, #16]
 800de78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800de7c:	d008      	beq.n	800de90 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800de7e:	683b      	ldr	r3, [r7, #0]
 800de80:	691b      	ldr	r3, [r3, #16]
 800de82:	2b00      	cmp	r3, #0
 800de84:	d004      	beq.n	800de90 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800de86:	f240 71fa 	movw	r1, #2042	@ 0x7fa
 800de8a:	4864      	ldr	r0, [pc, #400]	@ (800e01c <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 800de8c:	f7f7 ff46 	bl	8005d1c <assert_failed>
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
 800de90:	683b      	ldr	r3, [r7, #0]
 800de92:	695b      	ldr	r3, [r3, #20]
 800de94:	2b00      	cmp	r3, #0
 800de96:	d009      	beq.n	800deac <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 800de98:	683b      	ldr	r3, [r7, #0]
 800de9a:	695b      	ldr	r3, [r3, #20]
 800de9c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800dea0:	d004      	beq.n	800deac <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 800dea2:	f240 71fb 	movw	r1, #2043	@ 0x7fb
 800dea6:	485d      	ldr	r0, [pc, #372]	@ (800e01c <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 800dea8:	f7f7 ff38 	bl	8005d1c <assert_failed>
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
 800deac:	683b      	ldr	r3, [r7, #0]
 800deae:	699b      	ldr	r3, [r3, #24]
 800deb0:	2b0f      	cmp	r3, #15
 800deb2:	d904      	bls.n	800debe <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800deb4:	f240 71fc 	movw	r1, #2044	@ 0x7fc
 800deb8:	4858      	ldr	r0, [pc, #352]	@ (800e01c <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 800deba:	f7f7 ff2f 	bl	8005d1c <assert_failed>
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
 800debe:	683b      	ldr	r3, [r7, #0]
 800dec0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dec2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800dec6:	d008      	beq.n	800deda <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800dec8:	683b      	ldr	r3, [r7, #0]
 800deca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800decc:	2b00      	cmp	r3, #0
 800dece:	d004      	beq.n	800deda <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800ded0:	f240 71fd 	movw	r1, #2045	@ 0x7fd
 800ded4:	4851      	ldr	r0, [pc, #324]	@ (800e01c <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 800ded6:	f7f7 ff21 	bl	8005d1c <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800dee0:	2b01      	cmp	r3, #1
 800dee2:	d101      	bne.n	800dee8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
 800dee4:	2302      	movs	r3, #2
 800dee6:	e08a      	b.n	800dffe <HAL_TIMEx_ConfigBreakDeadTime+0x24e>
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	2201      	movs	r2, #1
 800deec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800def6:	683b      	ldr	r3, [r7, #0]
 800def8:	68db      	ldr	r3, [r3, #12]
 800defa:	4313      	orrs	r3, r2
 800defc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800df04:	683b      	ldr	r3, [r7, #0]
 800df06:	689b      	ldr	r3, [r3, #8]
 800df08:	4313      	orrs	r3, r2
 800df0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800df12:	683b      	ldr	r3, [r7, #0]
 800df14:	685b      	ldr	r3, [r3, #4]
 800df16:	4313      	orrs	r3, r2
 800df18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800df20:	683b      	ldr	r3, [r7, #0]
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	4313      	orrs	r3, r2
 800df26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800df2e:	683b      	ldr	r3, [r7, #0]
 800df30:	691b      	ldr	r3, [r3, #16]
 800df32:	4313      	orrs	r3, r2
 800df34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800df36:	68fb      	ldr	r3, [r7, #12]
 800df38:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800df3c:	683b      	ldr	r3, [r7, #0]
 800df3e:	695b      	ldr	r3, [r3, #20]
 800df40:	4313      	orrs	r3, r2
 800df42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800df4a:	683b      	ldr	r3, [r7, #0]
 800df4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800df4e:	4313      	orrs	r3, r2
 800df50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800df58:	683b      	ldr	r3, [r7, #0]
 800df5a:	699b      	ldr	r3, [r3, #24]
 800df5c:	041b      	lsls	r3, r3, #16
 800df5e:	4313      	orrs	r3, r2
 800df60:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	4a28      	ldr	r2, [pc, #160]	@ (800e008 <HAL_TIMEx_ConfigBreakDeadTime+0x258>)
 800df68:	4293      	cmp	r3, r2
 800df6a:	d004      	beq.n	800df76 <HAL_TIMEx_ConfigBreakDeadTime+0x1c6>
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	4a26      	ldr	r2, [pc, #152]	@ (800e00c <HAL_TIMEx_ConfigBreakDeadTime+0x25c>)
 800df72:	4293      	cmp	r3, r2
 800df74:	d13a      	bne.n	800dfec <HAL_TIMEx_ConfigBreakDeadTime+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
 800df76:	683b      	ldr	r3, [r7, #0]
 800df78:	69db      	ldr	r3, [r3, #28]
 800df7a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800df7e:	d008      	beq.n	800df92 <HAL_TIMEx_ConfigBreakDeadTime+0x1e2>
 800df80:	683b      	ldr	r3, [r7, #0]
 800df82:	69db      	ldr	r3, [r3, #28]
 800df84:	2b00      	cmp	r3, #0
 800df86:	d004      	beq.n	800df92 <HAL_TIMEx_ConfigBreakDeadTime+0x1e2>
 800df88:	f640 0112 	movw	r1, #2066	@ 0x812
 800df8c:	4823      	ldr	r0, [pc, #140]	@ (800e01c <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 800df8e:	f7f7 fec5 	bl	8005d1c <assert_failed>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
 800df92:	683b      	ldr	r3, [r7, #0]
 800df94:	6a1b      	ldr	r3, [r3, #32]
 800df96:	2b00      	cmp	r3, #0
 800df98:	d009      	beq.n	800dfae <HAL_TIMEx_ConfigBreakDeadTime+0x1fe>
 800df9a:	683b      	ldr	r3, [r7, #0]
 800df9c:	6a1b      	ldr	r3, [r3, #32]
 800df9e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800dfa2:	d004      	beq.n	800dfae <HAL_TIMEx_ConfigBreakDeadTime+0x1fe>
 800dfa4:	f640 0113 	movw	r1, #2067	@ 0x813
 800dfa8:	481c      	ldr	r0, [pc, #112]	@ (800e01c <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 800dfaa:	f7f7 feb7 	bl	8005d1c <assert_failed>
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
 800dfae:	683b      	ldr	r3, [r7, #0]
 800dfb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dfb2:	2b0f      	cmp	r3, #15
 800dfb4:	d904      	bls.n	800dfc0 <HAL_TIMEx_ConfigBreakDeadTime+0x210>
 800dfb6:	f640 0114 	movw	r1, #2068	@ 0x814
 800dfba:	4818      	ldr	r0, [pc, #96]	@ (800e01c <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 800dfbc:	f7f7 feae 	bl	8005d1c <assert_failed>

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800dfc6:	683b      	ldr	r3, [r7, #0]
 800dfc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dfca:	051b      	lsls	r3, r3, #20
 800dfcc:	4313      	orrs	r3, r2
 800dfce:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800dfd6:	683b      	ldr	r3, [r7, #0]
 800dfd8:	69db      	ldr	r3, [r3, #28]
 800dfda:	4313      	orrs	r3, r2
 800dfdc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800dfe4:	683b      	ldr	r3, [r7, #0]
 800dfe6:	6a1b      	ldr	r3, [r3, #32]
 800dfe8:	4313      	orrs	r3, r2
 800dfea:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	68fa      	ldr	r2, [r7, #12]
 800dff2:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	2200      	movs	r2, #0
 800dff8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800dffc:	2300      	movs	r3, #0
}
 800dffe:	4618      	mov	r0, r3
 800e000:	3710      	adds	r7, #16
 800e002:	46bd      	mov	sp, r7
 800e004:	bd80      	pop	{r7, pc}
 800e006:	bf00      	nop
 800e008:	40012c00 	.word	0x40012c00
 800e00c:	40013400 	.word	0x40013400
 800e010:	40014000 	.word	0x40014000
 800e014:	40014400 	.word	0x40014400
 800e018:	40014800 	.word	0x40014800
 800e01c:	08010bf0 	.word	0x08010bf0

0800e020 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e020:	b480      	push	{r7}
 800e022:	b083      	sub	sp, #12
 800e024:	af00      	add	r7, sp, #0
 800e026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e028:	bf00      	nop
 800e02a:	370c      	adds	r7, #12
 800e02c:	46bd      	mov	sp, r7
 800e02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e032:	4770      	bx	lr

0800e034 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e034:	b480      	push	{r7}
 800e036:	b083      	sub	sp, #12
 800e038:	af00      	add	r7, sp, #0
 800e03a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e03c:	bf00      	nop
 800e03e:	370c      	adds	r7, #12
 800e040:	46bd      	mov	sp, r7
 800e042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e046:	4770      	bx	lr

0800e048 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e048:	b480      	push	{r7}
 800e04a:	b083      	sub	sp, #12
 800e04c:	af00      	add	r7, sp, #0
 800e04e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e050:	bf00      	nop
 800e052:	370c      	adds	r7, #12
 800e054:	46bd      	mov	sp, r7
 800e056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e05a:	4770      	bx	lr

0800e05c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e05c:	b580      	push	{r7, lr}
 800e05e:	b082      	sub	sp, #8
 800e060:	af00      	add	r7, sp, #0
 800e062:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	2b00      	cmp	r3, #0
 800e068:	d101      	bne.n	800e06e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e06a:	2301      	movs	r3, #1
 800e06c:	e08b      	b.n	800e186 <HAL_UART_Init+0x12a>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	699b      	ldr	r3, [r3, #24]
 800e072:	2b00      	cmp	r3, #0
 800e074:	d023      	beq.n	800e0be <HAL_UART_Init+0x62>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	4a45      	ldr	r2, [pc, #276]	@ (800e190 <HAL_UART_Init+0x134>)
 800e07c:	4293      	cmp	r3, r2
 800e07e:	d041      	beq.n	800e104 <HAL_UART_Init+0xa8>
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	681b      	ldr	r3, [r3, #0]
 800e084:	4a43      	ldr	r2, [pc, #268]	@ (800e194 <HAL_UART_Init+0x138>)
 800e086:	4293      	cmp	r3, r2
 800e088:	d03c      	beq.n	800e104 <HAL_UART_Init+0xa8>
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	681b      	ldr	r3, [r3, #0]
 800e08e:	4a42      	ldr	r2, [pc, #264]	@ (800e198 <HAL_UART_Init+0x13c>)
 800e090:	4293      	cmp	r3, r2
 800e092:	d037      	beq.n	800e104 <HAL_UART_Init+0xa8>
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	4a40      	ldr	r2, [pc, #256]	@ (800e19c <HAL_UART_Init+0x140>)
 800e09a:	4293      	cmp	r3, r2
 800e09c:	d032      	beq.n	800e104 <HAL_UART_Init+0xa8>
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	681b      	ldr	r3, [r3, #0]
 800e0a2:	4a3f      	ldr	r2, [pc, #252]	@ (800e1a0 <HAL_UART_Init+0x144>)
 800e0a4:	4293      	cmp	r3, r2
 800e0a6:	d02d      	beq.n	800e104 <HAL_UART_Init+0xa8>
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	4a3d      	ldr	r2, [pc, #244]	@ (800e1a4 <HAL_UART_Init+0x148>)
 800e0ae:	4293      	cmp	r3, r2
 800e0b0:	d028      	beq.n	800e104 <HAL_UART_Init+0xa8>
 800e0b2:	f44f 71a9 	mov.w	r1, #338	@ 0x152
 800e0b6:	483c      	ldr	r0, [pc, #240]	@ (800e1a8 <HAL_UART_Init+0x14c>)
 800e0b8:	f7f7 fe30 	bl	8005d1c <assert_failed>
 800e0bc:	e022      	b.n	800e104 <HAL_UART_Init+0xa8>
  }
  else
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	681b      	ldr	r3, [r3, #0]
 800e0c2:	4a33      	ldr	r2, [pc, #204]	@ (800e190 <HAL_UART_Init+0x134>)
 800e0c4:	4293      	cmp	r3, r2
 800e0c6:	d01d      	beq.n	800e104 <HAL_UART_Init+0xa8>
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	4a31      	ldr	r2, [pc, #196]	@ (800e194 <HAL_UART_Init+0x138>)
 800e0ce:	4293      	cmp	r3, r2
 800e0d0:	d018      	beq.n	800e104 <HAL_UART_Init+0xa8>
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	4a30      	ldr	r2, [pc, #192]	@ (800e198 <HAL_UART_Init+0x13c>)
 800e0d8:	4293      	cmp	r3, r2
 800e0da:	d013      	beq.n	800e104 <HAL_UART_Init+0xa8>
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	4a2e      	ldr	r2, [pc, #184]	@ (800e19c <HAL_UART_Init+0x140>)
 800e0e2:	4293      	cmp	r3, r2
 800e0e4:	d00e      	beq.n	800e104 <HAL_UART_Init+0xa8>
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	4a2d      	ldr	r2, [pc, #180]	@ (800e1a0 <HAL_UART_Init+0x144>)
 800e0ec:	4293      	cmp	r3, r2
 800e0ee:	d009      	beq.n	800e104 <HAL_UART_Init+0xa8>
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	4a2b      	ldr	r2, [pc, #172]	@ (800e1a4 <HAL_UART_Init+0x148>)
 800e0f6:	4293      	cmp	r3, r2
 800e0f8:	d004      	beq.n	800e104 <HAL_UART_Init+0xa8>
 800e0fa:	f240 1157 	movw	r1, #343	@ 0x157
 800e0fe:	482a      	ldr	r0, [pc, #168]	@ (800e1a8 <HAL_UART_Init+0x14c>)
 800e100:	f7f7 fe0c 	bl	8005d1c <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d106      	bne.n	800e11a <HAL_UART_Init+0xbe>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	2200      	movs	r2, #0
 800e110:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e114:	6878      	ldr	r0, [r7, #4]
 800e116:	f7f8 fb3b 	bl	8006790 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	2224      	movs	r2, #36	@ 0x24
 800e11e:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	681a      	ldr	r2, [r3, #0]
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	f022 0201 	bic.w	r2, r2, #1
 800e12e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e134:	2b00      	cmp	r3, #0
 800e136:	d002      	beq.n	800e13e <HAL_UART_Init+0xe2>
  {
    UART_AdvFeatureConfig(huart);
 800e138:	6878      	ldr	r0, [r7, #4]
 800e13a:	f000 fc1f 	bl	800e97c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e13e:	6878      	ldr	r0, [r7, #4]
 800e140:	f000 f8be 	bl	800e2c0 <UART_SetConfig>
 800e144:	4603      	mov	r3, r0
 800e146:	2b01      	cmp	r3, #1
 800e148:	d101      	bne.n	800e14e <HAL_UART_Init+0xf2>
  {
    return HAL_ERROR;
 800e14a:	2301      	movs	r3, #1
 800e14c:	e01b      	b.n	800e186 <HAL_UART_Init+0x12a>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	685a      	ldr	r2, [r3, #4]
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800e15c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	689a      	ldr	r2, [r3, #8]
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800e16c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	681a      	ldr	r2, [r3, #0]
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	f042 0201 	orr.w	r2, r2, #1
 800e17c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e17e:	6878      	ldr	r0, [r7, #4]
 800e180:	f000 fd5c 	bl	800ec3c <UART_CheckIdleState>
 800e184:	4603      	mov	r3, r0
}
 800e186:	4618      	mov	r0, r3
 800e188:	3708      	adds	r7, #8
 800e18a:	46bd      	mov	sp, r7
 800e18c:	bd80      	pop	{r7, pc}
 800e18e:	bf00      	nop
 800e190:	40013800 	.word	0x40013800
 800e194:	40004400 	.word	0x40004400
 800e198:	40004800 	.word	0x40004800
 800e19c:	40004c00 	.word	0x40004c00
 800e1a0:	40005000 	.word	0x40005000
 800e1a4:	40008000 	.word	0x40008000
 800e1a8:	08010c2c 	.word	0x08010c2c

0800e1ac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e1ac:	b580      	push	{r7, lr}
 800e1ae:	b08a      	sub	sp, #40	@ 0x28
 800e1b0:	af02      	add	r7, sp, #8
 800e1b2:	60f8      	str	r0, [r7, #12]
 800e1b4:	60b9      	str	r1, [r7, #8]
 800e1b6:	603b      	str	r3, [r7, #0]
 800e1b8:	4613      	mov	r3, r2
 800e1ba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e1c0:	2b20      	cmp	r3, #32
 800e1c2:	d177      	bne.n	800e2b4 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800e1c4:	68bb      	ldr	r3, [r7, #8]
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d002      	beq.n	800e1d0 <HAL_UART_Transmit+0x24>
 800e1ca:	88fb      	ldrh	r3, [r7, #6]
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d101      	bne.n	800e1d4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800e1d0:	2301      	movs	r3, #1
 800e1d2:	e070      	b.n	800e2b6 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	2200      	movs	r2, #0
 800e1d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	2221      	movs	r2, #33	@ 0x21
 800e1e0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e1e2:	f7f8 fbc5 	bl	8006970 <HAL_GetTick>
 800e1e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	88fa      	ldrh	r2, [r7, #6]
 800e1ec:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	88fa      	ldrh	r2, [r7, #6]
 800e1f4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	689b      	ldr	r3, [r3, #8]
 800e1fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e200:	d108      	bne.n	800e214 <HAL_UART_Transmit+0x68>
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	691b      	ldr	r3, [r3, #16]
 800e206:	2b00      	cmp	r3, #0
 800e208:	d104      	bne.n	800e214 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800e20a:	2300      	movs	r3, #0
 800e20c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800e20e:	68bb      	ldr	r3, [r7, #8]
 800e210:	61bb      	str	r3, [r7, #24]
 800e212:	e003      	b.n	800e21c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800e214:	68bb      	ldr	r3, [r7, #8]
 800e216:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e218:	2300      	movs	r3, #0
 800e21a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800e21c:	e02f      	b.n	800e27e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800e21e:	683b      	ldr	r3, [r7, #0]
 800e220:	9300      	str	r3, [sp, #0]
 800e222:	697b      	ldr	r3, [r7, #20]
 800e224:	2200      	movs	r2, #0
 800e226:	2180      	movs	r1, #128	@ 0x80
 800e228:	68f8      	ldr	r0, [r7, #12]
 800e22a:	f000 fdaf 	bl	800ed8c <UART_WaitOnFlagUntilTimeout>
 800e22e:	4603      	mov	r3, r0
 800e230:	2b00      	cmp	r3, #0
 800e232:	d004      	beq.n	800e23e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800e234:	68fb      	ldr	r3, [r7, #12]
 800e236:	2220      	movs	r2, #32
 800e238:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800e23a:	2303      	movs	r3, #3
 800e23c:	e03b      	b.n	800e2b6 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800e23e:	69fb      	ldr	r3, [r7, #28]
 800e240:	2b00      	cmp	r3, #0
 800e242:	d10b      	bne.n	800e25c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e244:	69bb      	ldr	r3, [r7, #24]
 800e246:	881a      	ldrh	r2, [r3, #0]
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e250:	b292      	uxth	r2, r2
 800e252:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800e254:	69bb      	ldr	r3, [r7, #24]
 800e256:	3302      	adds	r3, #2
 800e258:	61bb      	str	r3, [r7, #24]
 800e25a:	e007      	b.n	800e26c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800e25c:	69fb      	ldr	r3, [r7, #28]
 800e25e:	781a      	ldrb	r2, [r3, #0]
 800e260:	68fb      	ldr	r3, [r7, #12]
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800e266:	69fb      	ldr	r3, [r7, #28]
 800e268:	3301      	adds	r3, #1
 800e26a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800e272:	b29b      	uxth	r3, r3
 800e274:	3b01      	subs	r3, #1
 800e276:	b29a      	uxth	r2, r3
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800e27e:	68fb      	ldr	r3, [r7, #12]
 800e280:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800e284:	b29b      	uxth	r3, r3
 800e286:	2b00      	cmp	r3, #0
 800e288:	d1c9      	bne.n	800e21e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e28a:	683b      	ldr	r3, [r7, #0]
 800e28c:	9300      	str	r3, [sp, #0]
 800e28e:	697b      	ldr	r3, [r7, #20]
 800e290:	2200      	movs	r2, #0
 800e292:	2140      	movs	r1, #64	@ 0x40
 800e294:	68f8      	ldr	r0, [r7, #12]
 800e296:	f000 fd79 	bl	800ed8c <UART_WaitOnFlagUntilTimeout>
 800e29a:	4603      	mov	r3, r0
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d004      	beq.n	800e2aa <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	2220      	movs	r2, #32
 800e2a4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800e2a6:	2303      	movs	r3, #3
 800e2a8:	e005      	b.n	800e2b6 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e2aa:	68fb      	ldr	r3, [r7, #12]
 800e2ac:	2220      	movs	r2, #32
 800e2ae:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800e2b0:	2300      	movs	r3, #0
 800e2b2:	e000      	b.n	800e2b6 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800e2b4:	2302      	movs	r3, #2
  }
}
 800e2b6:	4618      	mov	r0, r3
 800e2b8:	3720      	adds	r7, #32
 800e2ba:	46bd      	mov	sp, r7
 800e2bc:	bd80      	pop	{r7, pc}
	...

0800e2c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e2c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e2c4:	b08a      	sub	sp, #40	@ 0x28
 800e2c6:	af00      	add	r7, sp, #0
 800e2c8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e2ca:	2300      	movs	r3, #0
 800e2cc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  uint32_t lpuart_ker_ck_pres;
#endif /* USART_PRESC_PRESCALER */
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	685b      	ldr	r3, [r3, #4]
 800e2d4:	4a9e      	ldr	r2, [pc, #632]	@ (800e550 <UART_SetConfig+0x290>)
 800e2d6:	4293      	cmp	r3, r2
 800e2d8:	d904      	bls.n	800e2e4 <UART_SetConfig+0x24>
 800e2da:	f640 4158 	movw	r1, #3160	@ 0xc58
 800e2de:	489d      	ldr	r0, [pc, #628]	@ (800e554 <UART_SetConfig+0x294>)
 800e2e0:	f7f7 fd1c 	bl	8005d1c <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	689b      	ldr	r3, [r3, #8]
 800e2e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e2ec:	d00d      	beq.n	800e30a <UART_SetConfig+0x4a>
 800e2ee:	68fb      	ldr	r3, [r7, #12]
 800e2f0:	689b      	ldr	r3, [r3, #8]
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d009      	beq.n	800e30a <UART_SetConfig+0x4a>
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	689b      	ldr	r3, [r3, #8]
 800e2fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e2fe:	d004      	beq.n	800e30a <UART_SetConfig+0x4a>
 800e300:	f640 4159 	movw	r1, #3161	@ 0xc59
 800e304:	4893      	ldr	r0, [pc, #588]	@ (800e554 <UART_SetConfig+0x294>)
 800e306:	f7f7 fd09 	bl	8005d1c <assert_failed>
  if (UART_INSTANCE_LOWPOWER(huart))
 800e30a:	68fb      	ldr	r3, [r7, #12]
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	4a92      	ldr	r2, [pc, #584]	@ (800e558 <UART_SetConfig+0x298>)
 800e310:	4293      	cmp	r3, r2
 800e312:	d10e      	bne.n	800e332 <UART_SetConfig+0x72>
  {
    assert_param(IS_LPUART_STOPBITS(huart->Init.StopBits));
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	68db      	ldr	r3, [r3, #12]
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d030      	beq.n	800e37e <UART_SetConfig+0xbe>
 800e31c:	68fb      	ldr	r3, [r7, #12]
 800e31e:	68db      	ldr	r3, [r3, #12]
 800e320:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e324:	d02b      	beq.n	800e37e <UART_SetConfig+0xbe>
 800e326:	f640 415c 	movw	r1, #3164	@ 0xc5c
 800e32a:	488a      	ldr	r0, [pc, #552]	@ (800e554 <UART_SetConfig+0x294>)
 800e32c:	f7f7 fcf6 	bl	8005d1c <assert_failed>
 800e330:	e025      	b.n	800e37e <UART_SetConfig+0xbe>
  }
  else
  {
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	68db      	ldr	r3, [r3, #12]
 800e336:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e33a:	d012      	beq.n	800e362 <UART_SetConfig+0xa2>
 800e33c:	68fb      	ldr	r3, [r7, #12]
 800e33e:	68db      	ldr	r3, [r3, #12]
 800e340:	2b00      	cmp	r3, #0
 800e342:	d00e      	beq.n	800e362 <UART_SetConfig+0xa2>
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	68db      	ldr	r3, [r3, #12]
 800e348:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800e34c:	d009      	beq.n	800e362 <UART_SetConfig+0xa2>
 800e34e:	68fb      	ldr	r3, [r7, #12]
 800e350:	68db      	ldr	r3, [r3, #12]
 800e352:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e356:	d004      	beq.n	800e362 <UART_SetConfig+0xa2>
 800e358:	f44f 6146 	mov.w	r1, #3168	@ 0xc60
 800e35c:	487d      	ldr	r0, [pc, #500]	@ (800e554 <UART_SetConfig+0x294>)
 800e35e:	f7f7 fcdd 	bl	8005d1c <assert_failed>
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	6a1b      	ldr	r3, [r3, #32]
 800e366:	2b00      	cmp	r3, #0
 800e368:	d009      	beq.n	800e37e <UART_SetConfig+0xbe>
 800e36a:	68fb      	ldr	r3, [r7, #12]
 800e36c:	6a1b      	ldr	r3, [r3, #32]
 800e36e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e372:	d004      	beq.n	800e37e <UART_SetConfig+0xbe>
 800e374:	f640 4161 	movw	r1, #3169	@ 0xc61
 800e378:	4876      	ldr	r0, [pc, #472]	@ (800e554 <UART_SetConfig+0x294>)
 800e37a:	f7f7 fccf 	bl	8005d1c <assert_failed>
  }

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	691b      	ldr	r3, [r3, #16]
 800e382:	2b00      	cmp	r3, #0
 800e384:	d00e      	beq.n	800e3a4 <UART_SetConfig+0xe4>
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	691b      	ldr	r3, [r3, #16]
 800e38a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e38e:	d009      	beq.n	800e3a4 <UART_SetConfig+0xe4>
 800e390:	68fb      	ldr	r3, [r7, #12]
 800e392:	691b      	ldr	r3, [r3, #16]
 800e394:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800e398:	d004      	beq.n	800e3a4 <UART_SetConfig+0xe4>
 800e39a:	f640 4164 	movw	r1, #3172	@ 0xc64
 800e39e:	486d      	ldr	r0, [pc, #436]	@ (800e554 <UART_SetConfig+0x294>)
 800e3a0:	f7f7 fcbc 	bl	8005d1c <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800e3a4:	68fb      	ldr	r3, [r7, #12]
 800e3a6:	695b      	ldr	r3, [r3, #20]
 800e3a8:	f023 030c 	bic.w	r3, r3, #12
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d103      	bne.n	800e3b8 <UART_SetConfig+0xf8>
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	695b      	ldr	r3, [r3, #20]
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d104      	bne.n	800e3c2 <UART_SetConfig+0x102>
 800e3b8:	f640 4165 	movw	r1, #3173	@ 0xc65
 800e3bc:	4865      	ldr	r0, [pc, #404]	@ (800e554 <UART_SetConfig+0x294>)
 800e3be:	f7f7 fcad 	bl	8005d1c <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	699b      	ldr	r3, [r3, #24]
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d013      	beq.n	800e3f2 <UART_SetConfig+0x132>
 800e3ca:	68fb      	ldr	r3, [r7, #12]
 800e3cc:	699b      	ldr	r3, [r3, #24]
 800e3ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e3d2:	d00e      	beq.n	800e3f2 <UART_SetConfig+0x132>
 800e3d4:	68fb      	ldr	r3, [r7, #12]
 800e3d6:	699b      	ldr	r3, [r3, #24]
 800e3d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e3dc:	d009      	beq.n	800e3f2 <UART_SetConfig+0x132>
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	699b      	ldr	r3, [r3, #24]
 800e3e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e3e6:	d004      	beq.n	800e3f2 <UART_SetConfig+0x132>
 800e3e8:	f640 4166 	movw	r1, #3174	@ 0xc66
 800e3ec:	4859      	ldr	r0, [pc, #356]	@ (800e554 <UART_SetConfig+0x294>)
 800e3ee:	f7f7 fc95 	bl	8005d1c <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	69db      	ldr	r3, [r3, #28]
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d009      	beq.n	800e40e <UART_SetConfig+0x14e>
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	69db      	ldr	r3, [r3, #28]
 800e3fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e402:	d004      	beq.n	800e40e <UART_SetConfig+0x14e>
 800e404:	f640 4167 	movw	r1, #3175	@ 0xc67
 800e408:	4852      	ldr	r0, [pc, #328]	@ (800e554 <UART_SetConfig+0x294>)
 800e40a:	f7f7 fc87 	bl	8005d1c <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e40e:	68fb      	ldr	r3, [r7, #12]
 800e410:	689a      	ldr	r2, [r3, #8]
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	691b      	ldr	r3, [r3, #16]
 800e416:	431a      	orrs	r2, r3
 800e418:	68fb      	ldr	r3, [r7, #12]
 800e41a:	695b      	ldr	r3, [r3, #20]
 800e41c:	431a      	orrs	r2, r3
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	69db      	ldr	r3, [r3, #28]
 800e422:	4313      	orrs	r3, r2
 800e424:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e426:	68fb      	ldr	r3, [r7, #12]
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	681a      	ldr	r2, [r3, #0]
 800e42c:	4b4b      	ldr	r3, [pc, #300]	@ (800e55c <UART_SetConfig+0x29c>)
 800e42e:	4013      	ands	r3, r2
 800e430:	68fa      	ldr	r2, [r7, #12]
 800e432:	6812      	ldr	r2, [r2, #0]
 800e434:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e436:	430b      	orrs	r3, r1
 800e438:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e43a:	68fb      	ldr	r3, [r7, #12]
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	685b      	ldr	r3, [r3, #4]
 800e440:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	68da      	ldr	r2, [r3, #12]
 800e448:	68fb      	ldr	r3, [r7, #12]
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	430a      	orrs	r2, r1
 800e44e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	699b      	ldr	r3, [r3, #24]
 800e454:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	4a3f      	ldr	r2, [pc, #252]	@ (800e558 <UART_SetConfig+0x298>)
 800e45c:	4293      	cmp	r3, r2
 800e45e:	d004      	beq.n	800e46a <UART_SetConfig+0x1aa>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e460:	68fb      	ldr	r3, [r7, #12]
 800e462:	6a1b      	ldr	r3, [r3, #32]
 800e464:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e466:	4313      	orrs	r3, r2
 800e468:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	689b      	ldr	r3, [r3, #8]
 800e470:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e47a:	430a      	orrs	r2, r1
 800e47c:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e47e:	68fb      	ldr	r3, [r7, #12]
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	4a37      	ldr	r2, [pc, #220]	@ (800e560 <UART_SetConfig+0x2a0>)
 800e484:	4293      	cmp	r3, r2
 800e486:	d125      	bne.n	800e4d4 <UART_SetConfig+0x214>
 800e488:	4b36      	ldr	r3, [pc, #216]	@ (800e564 <UART_SetConfig+0x2a4>)
 800e48a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e48e:	f003 0303 	and.w	r3, r3, #3
 800e492:	2b03      	cmp	r3, #3
 800e494:	d81a      	bhi.n	800e4cc <UART_SetConfig+0x20c>
 800e496:	a201      	add	r2, pc, #4	@ (adr r2, 800e49c <UART_SetConfig+0x1dc>)
 800e498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e49c:	0800e4ad 	.word	0x0800e4ad
 800e4a0:	0800e4bd 	.word	0x0800e4bd
 800e4a4:	0800e4b5 	.word	0x0800e4b5
 800e4a8:	0800e4c5 	.word	0x0800e4c5
 800e4ac:	2301      	movs	r3, #1
 800e4ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e4b2:	e114      	b.n	800e6de <UART_SetConfig+0x41e>
 800e4b4:	2302      	movs	r3, #2
 800e4b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e4ba:	e110      	b.n	800e6de <UART_SetConfig+0x41e>
 800e4bc:	2304      	movs	r3, #4
 800e4be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e4c2:	e10c      	b.n	800e6de <UART_SetConfig+0x41e>
 800e4c4:	2308      	movs	r3, #8
 800e4c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e4ca:	e108      	b.n	800e6de <UART_SetConfig+0x41e>
 800e4cc:	2310      	movs	r3, #16
 800e4ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e4d2:	e104      	b.n	800e6de <UART_SetConfig+0x41e>
 800e4d4:	68fb      	ldr	r3, [r7, #12]
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	4a23      	ldr	r2, [pc, #140]	@ (800e568 <UART_SetConfig+0x2a8>)
 800e4da:	4293      	cmp	r3, r2
 800e4dc:	d146      	bne.n	800e56c <UART_SetConfig+0x2ac>
 800e4de:	4b21      	ldr	r3, [pc, #132]	@ (800e564 <UART_SetConfig+0x2a4>)
 800e4e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e4e4:	f003 030c 	and.w	r3, r3, #12
 800e4e8:	2b0c      	cmp	r3, #12
 800e4ea:	d82d      	bhi.n	800e548 <UART_SetConfig+0x288>
 800e4ec:	a201      	add	r2, pc, #4	@ (adr r2, 800e4f4 <UART_SetConfig+0x234>)
 800e4ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4f2:	bf00      	nop
 800e4f4:	0800e529 	.word	0x0800e529
 800e4f8:	0800e549 	.word	0x0800e549
 800e4fc:	0800e549 	.word	0x0800e549
 800e500:	0800e549 	.word	0x0800e549
 800e504:	0800e539 	.word	0x0800e539
 800e508:	0800e549 	.word	0x0800e549
 800e50c:	0800e549 	.word	0x0800e549
 800e510:	0800e549 	.word	0x0800e549
 800e514:	0800e531 	.word	0x0800e531
 800e518:	0800e549 	.word	0x0800e549
 800e51c:	0800e549 	.word	0x0800e549
 800e520:	0800e549 	.word	0x0800e549
 800e524:	0800e541 	.word	0x0800e541
 800e528:	2300      	movs	r3, #0
 800e52a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e52e:	e0d6      	b.n	800e6de <UART_SetConfig+0x41e>
 800e530:	2302      	movs	r3, #2
 800e532:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e536:	e0d2      	b.n	800e6de <UART_SetConfig+0x41e>
 800e538:	2304      	movs	r3, #4
 800e53a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e53e:	e0ce      	b.n	800e6de <UART_SetConfig+0x41e>
 800e540:	2308      	movs	r3, #8
 800e542:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e546:	e0ca      	b.n	800e6de <UART_SetConfig+0x41e>
 800e548:	2310      	movs	r3, #16
 800e54a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e54e:	e0c6      	b.n	800e6de <UART_SetConfig+0x41e>
 800e550:	00989680 	.word	0x00989680
 800e554:	08010c2c 	.word	0x08010c2c
 800e558:	40008000 	.word	0x40008000
 800e55c:	efff69f3 	.word	0xefff69f3
 800e560:	40013800 	.word	0x40013800
 800e564:	40021000 	.word	0x40021000
 800e568:	40004400 	.word	0x40004400
 800e56c:	68fb      	ldr	r3, [r7, #12]
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	4aae      	ldr	r2, [pc, #696]	@ (800e82c <UART_SetConfig+0x56c>)
 800e572:	4293      	cmp	r3, r2
 800e574:	d125      	bne.n	800e5c2 <UART_SetConfig+0x302>
 800e576:	4bae      	ldr	r3, [pc, #696]	@ (800e830 <UART_SetConfig+0x570>)
 800e578:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e57c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800e580:	2b30      	cmp	r3, #48	@ 0x30
 800e582:	d016      	beq.n	800e5b2 <UART_SetConfig+0x2f2>
 800e584:	2b30      	cmp	r3, #48	@ 0x30
 800e586:	d818      	bhi.n	800e5ba <UART_SetConfig+0x2fa>
 800e588:	2b20      	cmp	r3, #32
 800e58a:	d00a      	beq.n	800e5a2 <UART_SetConfig+0x2e2>
 800e58c:	2b20      	cmp	r3, #32
 800e58e:	d814      	bhi.n	800e5ba <UART_SetConfig+0x2fa>
 800e590:	2b00      	cmp	r3, #0
 800e592:	d002      	beq.n	800e59a <UART_SetConfig+0x2da>
 800e594:	2b10      	cmp	r3, #16
 800e596:	d008      	beq.n	800e5aa <UART_SetConfig+0x2ea>
 800e598:	e00f      	b.n	800e5ba <UART_SetConfig+0x2fa>
 800e59a:	2300      	movs	r3, #0
 800e59c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e5a0:	e09d      	b.n	800e6de <UART_SetConfig+0x41e>
 800e5a2:	2302      	movs	r3, #2
 800e5a4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e5a8:	e099      	b.n	800e6de <UART_SetConfig+0x41e>
 800e5aa:	2304      	movs	r3, #4
 800e5ac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e5b0:	e095      	b.n	800e6de <UART_SetConfig+0x41e>
 800e5b2:	2308      	movs	r3, #8
 800e5b4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e5b8:	e091      	b.n	800e6de <UART_SetConfig+0x41e>
 800e5ba:	2310      	movs	r3, #16
 800e5bc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e5c0:	e08d      	b.n	800e6de <UART_SetConfig+0x41e>
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	4a9b      	ldr	r2, [pc, #620]	@ (800e834 <UART_SetConfig+0x574>)
 800e5c8:	4293      	cmp	r3, r2
 800e5ca:	d125      	bne.n	800e618 <UART_SetConfig+0x358>
 800e5cc:	4b98      	ldr	r3, [pc, #608]	@ (800e830 <UART_SetConfig+0x570>)
 800e5ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e5d2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800e5d6:	2bc0      	cmp	r3, #192	@ 0xc0
 800e5d8:	d016      	beq.n	800e608 <UART_SetConfig+0x348>
 800e5da:	2bc0      	cmp	r3, #192	@ 0xc0
 800e5dc:	d818      	bhi.n	800e610 <UART_SetConfig+0x350>
 800e5de:	2b80      	cmp	r3, #128	@ 0x80
 800e5e0:	d00a      	beq.n	800e5f8 <UART_SetConfig+0x338>
 800e5e2:	2b80      	cmp	r3, #128	@ 0x80
 800e5e4:	d814      	bhi.n	800e610 <UART_SetConfig+0x350>
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d002      	beq.n	800e5f0 <UART_SetConfig+0x330>
 800e5ea:	2b40      	cmp	r3, #64	@ 0x40
 800e5ec:	d008      	beq.n	800e600 <UART_SetConfig+0x340>
 800e5ee:	e00f      	b.n	800e610 <UART_SetConfig+0x350>
 800e5f0:	2300      	movs	r3, #0
 800e5f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e5f6:	e072      	b.n	800e6de <UART_SetConfig+0x41e>
 800e5f8:	2302      	movs	r3, #2
 800e5fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e5fe:	e06e      	b.n	800e6de <UART_SetConfig+0x41e>
 800e600:	2304      	movs	r3, #4
 800e602:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e606:	e06a      	b.n	800e6de <UART_SetConfig+0x41e>
 800e608:	2308      	movs	r3, #8
 800e60a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e60e:	e066      	b.n	800e6de <UART_SetConfig+0x41e>
 800e610:	2310      	movs	r3, #16
 800e612:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e616:	e062      	b.n	800e6de <UART_SetConfig+0x41e>
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	4a86      	ldr	r2, [pc, #536]	@ (800e838 <UART_SetConfig+0x578>)
 800e61e:	4293      	cmp	r3, r2
 800e620:	d12a      	bne.n	800e678 <UART_SetConfig+0x3b8>
 800e622:	4b83      	ldr	r3, [pc, #524]	@ (800e830 <UART_SetConfig+0x570>)
 800e624:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e628:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e62c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e630:	d01a      	beq.n	800e668 <UART_SetConfig+0x3a8>
 800e632:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e636:	d81b      	bhi.n	800e670 <UART_SetConfig+0x3b0>
 800e638:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e63c:	d00c      	beq.n	800e658 <UART_SetConfig+0x398>
 800e63e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e642:	d815      	bhi.n	800e670 <UART_SetConfig+0x3b0>
 800e644:	2b00      	cmp	r3, #0
 800e646:	d003      	beq.n	800e650 <UART_SetConfig+0x390>
 800e648:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e64c:	d008      	beq.n	800e660 <UART_SetConfig+0x3a0>
 800e64e:	e00f      	b.n	800e670 <UART_SetConfig+0x3b0>
 800e650:	2300      	movs	r3, #0
 800e652:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e656:	e042      	b.n	800e6de <UART_SetConfig+0x41e>
 800e658:	2302      	movs	r3, #2
 800e65a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e65e:	e03e      	b.n	800e6de <UART_SetConfig+0x41e>
 800e660:	2304      	movs	r3, #4
 800e662:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e666:	e03a      	b.n	800e6de <UART_SetConfig+0x41e>
 800e668:	2308      	movs	r3, #8
 800e66a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e66e:	e036      	b.n	800e6de <UART_SetConfig+0x41e>
 800e670:	2310      	movs	r3, #16
 800e672:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e676:	e032      	b.n	800e6de <UART_SetConfig+0x41e>
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	681b      	ldr	r3, [r3, #0]
 800e67c:	4a6f      	ldr	r2, [pc, #444]	@ (800e83c <UART_SetConfig+0x57c>)
 800e67e:	4293      	cmp	r3, r2
 800e680:	d12a      	bne.n	800e6d8 <UART_SetConfig+0x418>
 800e682:	4b6b      	ldr	r3, [pc, #428]	@ (800e830 <UART_SetConfig+0x570>)
 800e684:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e688:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800e68c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800e690:	d01a      	beq.n	800e6c8 <UART_SetConfig+0x408>
 800e692:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800e696:	d81b      	bhi.n	800e6d0 <UART_SetConfig+0x410>
 800e698:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e69c:	d00c      	beq.n	800e6b8 <UART_SetConfig+0x3f8>
 800e69e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e6a2:	d815      	bhi.n	800e6d0 <UART_SetConfig+0x410>
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d003      	beq.n	800e6b0 <UART_SetConfig+0x3f0>
 800e6a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e6ac:	d008      	beq.n	800e6c0 <UART_SetConfig+0x400>
 800e6ae:	e00f      	b.n	800e6d0 <UART_SetConfig+0x410>
 800e6b0:	2300      	movs	r3, #0
 800e6b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e6b6:	e012      	b.n	800e6de <UART_SetConfig+0x41e>
 800e6b8:	2302      	movs	r3, #2
 800e6ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e6be:	e00e      	b.n	800e6de <UART_SetConfig+0x41e>
 800e6c0:	2304      	movs	r3, #4
 800e6c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e6c6:	e00a      	b.n	800e6de <UART_SetConfig+0x41e>
 800e6c8:	2308      	movs	r3, #8
 800e6ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e6ce:	e006      	b.n	800e6de <UART_SetConfig+0x41e>
 800e6d0:	2310      	movs	r3, #16
 800e6d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e6d6:	e002      	b.n	800e6de <UART_SetConfig+0x41e>
 800e6d8:	2310      	movs	r3, #16
 800e6da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e6de:	68fb      	ldr	r3, [r7, #12]
 800e6e0:	681b      	ldr	r3, [r3, #0]
 800e6e2:	4a56      	ldr	r2, [pc, #344]	@ (800e83c <UART_SetConfig+0x57c>)
 800e6e4:	4293      	cmp	r3, r2
 800e6e6:	d17a      	bne.n	800e7de <UART_SetConfig+0x51e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e6e8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800e6ec:	2b08      	cmp	r3, #8
 800e6ee:	d824      	bhi.n	800e73a <UART_SetConfig+0x47a>
 800e6f0:	a201      	add	r2, pc, #4	@ (adr r2, 800e6f8 <UART_SetConfig+0x438>)
 800e6f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6f6:	bf00      	nop
 800e6f8:	0800e71d 	.word	0x0800e71d
 800e6fc:	0800e73b 	.word	0x0800e73b
 800e700:	0800e725 	.word	0x0800e725
 800e704:	0800e73b 	.word	0x0800e73b
 800e708:	0800e72b 	.word	0x0800e72b
 800e70c:	0800e73b 	.word	0x0800e73b
 800e710:	0800e73b 	.word	0x0800e73b
 800e714:	0800e73b 	.word	0x0800e73b
 800e718:	0800e733 	.word	0x0800e733
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e71c:	f7fa fd5c 	bl	80091d8 <HAL_RCC_GetPCLK1Freq>
 800e720:	61f8      	str	r0, [r7, #28]
        break;
 800e722:	e010      	b.n	800e746 <UART_SetConfig+0x486>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e724:	4b46      	ldr	r3, [pc, #280]	@ (800e840 <UART_SetConfig+0x580>)
 800e726:	61fb      	str	r3, [r7, #28]
        break;
 800e728:	e00d      	b.n	800e746 <UART_SetConfig+0x486>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e72a:	f7fa fcbd 	bl	80090a8 <HAL_RCC_GetSysClockFreq>
 800e72e:	61f8      	str	r0, [r7, #28]
        break;
 800e730:	e009      	b.n	800e746 <UART_SetConfig+0x486>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e732:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e736:	61fb      	str	r3, [r7, #28]
        break;
 800e738:	e005      	b.n	800e746 <UART_SetConfig+0x486>
      default:
        pclk = 0U;
 800e73a:	2300      	movs	r3, #0
 800e73c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800e73e:	2301      	movs	r3, #1
 800e740:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800e744:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e746:	69fb      	ldr	r3, [r7, #28]
 800e748:	2b00      	cmp	r3, #0
 800e74a:	f000 8107 	beq.w	800e95c <UART_SetConfig+0x69c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	685a      	ldr	r2, [r3, #4]
 800e752:	4613      	mov	r3, r2
 800e754:	005b      	lsls	r3, r3, #1
 800e756:	4413      	add	r3, r2
 800e758:	69fa      	ldr	r2, [r7, #28]
 800e75a:	429a      	cmp	r2, r3
 800e75c:	d305      	bcc.n	800e76a <UART_SetConfig+0x4aa>
          (pclk > (4096U * huart->Init.BaudRate)))
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	685b      	ldr	r3, [r3, #4]
 800e762:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800e764:	69fa      	ldr	r2, [r7, #28]
 800e766:	429a      	cmp	r2, r3
 800e768:	d903      	bls.n	800e772 <UART_SetConfig+0x4b2>
      {
        ret = HAL_ERROR;
 800e76a:	2301      	movs	r3, #1
 800e76c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800e770:	e0f4      	b.n	800e95c <UART_SetConfig+0x69c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800e772:	69fb      	ldr	r3, [r7, #28]
 800e774:	2200      	movs	r2, #0
 800e776:	461c      	mov	r4, r3
 800e778:	4615      	mov	r5, r2
 800e77a:	f04f 0200 	mov.w	r2, #0
 800e77e:	f04f 0300 	mov.w	r3, #0
 800e782:	022b      	lsls	r3, r5, #8
 800e784:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800e788:	0222      	lsls	r2, r4, #8
 800e78a:	68f9      	ldr	r1, [r7, #12]
 800e78c:	6849      	ldr	r1, [r1, #4]
 800e78e:	0849      	lsrs	r1, r1, #1
 800e790:	2000      	movs	r0, #0
 800e792:	4688      	mov	r8, r1
 800e794:	4681      	mov	r9, r0
 800e796:	eb12 0a08 	adds.w	sl, r2, r8
 800e79a:	eb43 0b09 	adc.w	fp, r3, r9
 800e79e:	68fb      	ldr	r3, [r7, #12]
 800e7a0:	685b      	ldr	r3, [r3, #4]
 800e7a2:	2200      	movs	r2, #0
 800e7a4:	603b      	str	r3, [r7, #0]
 800e7a6:	607a      	str	r2, [r7, #4]
 800e7a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e7ac:	4650      	mov	r0, sl
 800e7ae:	4659      	mov	r1, fp
 800e7b0:	f7f1 fdae 	bl	8000310 <__aeabi_uldivmod>
 800e7b4:	4602      	mov	r2, r0
 800e7b6:	460b      	mov	r3, r1
 800e7b8:	4613      	mov	r3, r2
 800e7ba:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e7bc:	69bb      	ldr	r3, [r7, #24]
 800e7be:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e7c2:	d308      	bcc.n	800e7d6 <UART_SetConfig+0x516>
 800e7c4:	69bb      	ldr	r3, [r7, #24]
 800e7c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e7ca:	d204      	bcs.n	800e7d6 <UART_SetConfig+0x516>
        {
          huart->Instance->BRR = usartdiv;
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	681b      	ldr	r3, [r3, #0]
 800e7d0:	69ba      	ldr	r2, [r7, #24]
 800e7d2:	60da      	str	r2, [r3, #12]
 800e7d4:	e0c2      	b.n	800e95c <UART_SetConfig+0x69c>
        }
        else
        {
          ret = HAL_ERROR;
 800e7d6:	2301      	movs	r3, #1
 800e7d8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800e7dc:	e0be      	b.n	800e95c <UART_SetConfig+0x69c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	69db      	ldr	r3, [r3, #28]
 800e7e2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e7e6:	d16a      	bne.n	800e8be <UART_SetConfig+0x5fe>
  {
    switch (clocksource)
 800e7e8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800e7ec:	2b08      	cmp	r3, #8
 800e7ee:	d834      	bhi.n	800e85a <UART_SetConfig+0x59a>
 800e7f0:	a201      	add	r2, pc, #4	@ (adr r2, 800e7f8 <UART_SetConfig+0x538>)
 800e7f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7f6:	bf00      	nop
 800e7f8:	0800e81d 	.word	0x0800e81d
 800e7fc:	0800e825 	.word	0x0800e825
 800e800:	0800e845 	.word	0x0800e845
 800e804:	0800e85b 	.word	0x0800e85b
 800e808:	0800e84b 	.word	0x0800e84b
 800e80c:	0800e85b 	.word	0x0800e85b
 800e810:	0800e85b 	.word	0x0800e85b
 800e814:	0800e85b 	.word	0x0800e85b
 800e818:	0800e853 	.word	0x0800e853
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e81c:	f7fa fcdc 	bl	80091d8 <HAL_RCC_GetPCLK1Freq>
 800e820:	61f8      	str	r0, [r7, #28]
        break;
 800e822:	e020      	b.n	800e866 <UART_SetConfig+0x5a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e824:	f7fa fcee 	bl	8009204 <HAL_RCC_GetPCLK2Freq>
 800e828:	61f8      	str	r0, [r7, #28]
        break;
 800e82a:	e01c      	b.n	800e866 <UART_SetConfig+0x5a6>
 800e82c:	40004800 	.word	0x40004800
 800e830:	40021000 	.word	0x40021000
 800e834:	40004c00 	.word	0x40004c00
 800e838:	40005000 	.word	0x40005000
 800e83c:	40008000 	.word	0x40008000
 800e840:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e844:	4b4c      	ldr	r3, [pc, #304]	@ (800e978 <UART_SetConfig+0x6b8>)
 800e846:	61fb      	str	r3, [r7, #28]
        break;
 800e848:	e00d      	b.n	800e866 <UART_SetConfig+0x5a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e84a:	f7fa fc2d 	bl	80090a8 <HAL_RCC_GetSysClockFreq>
 800e84e:	61f8      	str	r0, [r7, #28]
        break;
 800e850:	e009      	b.n	800e866 <UART_SetConfig+0x5a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e852:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e856:	61fb      	str	r3, [r7, #28]
        break;
 800e858:	e005      	b.n	800e866 <UART_SetConfig+0x5a6>
      default:
        pclk = 0U;
 800e85a:	2300      	movs	r3, #0
 800e85c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800e85e:	2301      	movs	r3, #1
 800e860:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800e864:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e866:	69fb      	ldr	r3, [r7, #28]
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d077      	beq.n	800e95c <UART_SetConfig+0x69c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800e86c:	69fb      	ldr	r3, [r7, #28]
 800e86e:	005a      	lsls	r2, r3, #1
 800e870:	68fb      	ldr	r3, [r7, #12]
 800e872:	685b      	ldr	r3, [r3, #4]
 800e874:	085b      	lsrs	r3, r3, #1
 800e876:	441a      	add	r2, r3
 800e878:	68fb      	ldr	r3, [r7, #12]
 800e87a:	685b      	ldr	r3, [r3, #4]
 800e87c:	fbb2 f3f3 	udiv	r3, r2, r3
 800e880:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e882:	69bb      	ldr	r3, [r7, #24]
 800e884:	2b0f      	cmp	r3, #15
 800e886:	d916      	bls.n	800e8b6 <UART_SetConfig+0x5f6>
 800e888:	69bb      	ldr	r3, [r7, #24]
 800e88a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e88e:	d212      	bcs.n	800e8b6 <UART_SetConfig+0x5f6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e890:	69bb      	ldr	r3, [r7, #24]
 800e892:	b29b      	uxth	r3, r3
 800e894:	f023 030f 	bic.w	r3, r3, #15
 800e898:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e89a:	69bb      	ldr	r3, [r7, #24]
 800e89c:	085b      	lsrs	r3, r3, #1
 800e89e:	b29b      	uxth	r3, r3
 800e8a0:	f003 0307 	and.w	r3, r3, #7
 800e8a4:	b29a      	uxth	r2, r3
 800e8a6:	8afb      	ldrh	r3, [r7, #22]
 800e8a8:	4313      	orrs	r3, r2
 800e8aa:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	8afa      	ldrh	r2, [r7, #22]
 800e8b2:	60da      	str	r2, [r3, #12]
 800e8b4:	e052      	b.n	800e95c <UART_SetConfig+0x69c>
      }
      else
      {
        ret = HAL_ERROR;
 800e8b6:	2301      	movs	r3, #1
 800e8b8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800e8bc:	e04e      	b.n	800e95c <UART_SetConfig+0x69c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800e8be:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800e8c2:	2b08      	cmp	r3, #8
 800e8c4:	d827      	bhi.n	800e916 <UART_SetConfig+0x656>
 800e8c6:	a201      	add	r2, pc, #4	@ (adr r2, 800e8cc <UART_SetConfig+0x60c>)
 800e8c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8cc:	0800e8f1 	.word	0x0800e8f1
 800e8d0:	0800e8f9 	.word	0x0800e8f9
 800e8d4:	0800e901 	.word	0x0800e901
 800e8d8:	0800e917 	.word	0x0800e917
 800e8dc:	0800e907 	.word	0x0800e907
 800e8e0:	0800e917 	.word	0x0800e917
 800e8e4:	0800e917 	.word	0x0800e917
 800e8e8:	0800e917 	.word	0x0800e917
 800e8ec:	0800e90f 	.word	0x0800e90f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e8f0:	f7fa fc72 	bl	80091d8 <HAL_RCC_GetPCLK1Freq>
 800e8f4:	61f8      	str	r0, [r7, #28]
        break;
 800e8f6:	e014      	b.n	800e922 <UART_SetConfig+0x662>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e8f8:	f7fa fc84 	bl	8009204 <HAL_RCC_GetPCLK2Freq>
 800e8fc:	61f8      	str	r0, [r7, #28]
        break;
 800e8fe:	e010      	b.n	800e922 <UART_SetConfig+0x662>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e900:	4b1d      	ldr	r3, [pc, #116]	@ (800e978 <UART_SetConfig+0x6b8>)
 800e902:	61fb      	str	r3, [r7, #28]
        break;
 800e904:	e00d      	b.n	800e922 <UART_SetConfig+0x662>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e906:	f7fa fbcf 	bl	80090a8 <HAL_RCC_GetSysClockFreq>
 800e90a:	61f8      	str	r0, [r7, #28]
        break;
 800e90c:	e009      	b.n	800e922 <UART_SetConfig+0x662>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e90e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e912:	61fb      	str	r3, [r7, #28]
        break;
 800e914:	e005      	b.n	800e922 <UART_SetConfig+0x662>
      default:
        pclk = 0U;
 800e916:	2300      	movs	r3, #0
 800e918:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800e91a:	2301      	movs	r3, #1
 800e91c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800e920:	bf00      	nop
    }

    if (pclk != 0U)
 800e922:	69fb      	ldr	r3, [r7, #28]
 800e924:	2b00      	cmp	r3, #0
 800e926:	d019      	beq.n	800e95c <UART_SetConfig+0x69c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800e928:	68fb      	ldr	r3, [r7, #12]
 800e92a:	685b      	ldr	r3, [r3, #4]
 800e92c:	085a      	lsrs	r2, r3, #1
 800e92e:	69fb      	ldr	r3, [r7, #28]
 800e930:	441a      	add	r2, r3
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	685b      	ldr	r3, [r3, #4]
 800e936:	fbb2 f3f3 	udiv	r3, r2, r3
 800e93a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e93c:	69bb      	ldr	r3, [r7, #24]
 800e93e:	2b0f      	cmp	r3, #15
 800e940:	d909      	bls.n	800e956 <UART_SetConfig+0x696>
 800e942:	69bb      	ldr	r3, [r7, #24]
 800e944:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e948:	d205      	bcs.n	800e956 <UART_SetConfig+0x696>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e94a:	69bb      	ldr	r3, [r7, #24]
 800e94c:	b29a      	uxth	r2, r3
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	681b      	ldr	r3, [r3, #0]
 800e952:	60da      	str	r2, [r3, #12]
 800e954:	e002      	b.n	800e95c <UART_SetConfig+0x69c>
      }
      else
      {
        ret = HAL_ERROR;
 800e956:	2301      	movs	r3, #1
 800e958:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	2200      	movs	r2, #0
 800e960:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800e962:	68fb      	ldr	r3, [r7, #12]
 800e964:	2200      	movs	r2, #0
 800e966:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800e968:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800e96c:	4618      	mov	r0, r3
 800e96e:	3728      	adds	r7, #40	@ 0x28
 800e970:	46bd      	mov	sp, r7
 800e972:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e976:	bf00      	nop
 800e978:	00f42400 	.word	0x00f42400

0800e97c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e97c:	b580      	push	{r7, lr}
 800e97e:	b082      	sub	sp, #8
 800e980:	af00      	add	r7, sp, #0
 800e982:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e988:	2bff      	cmp	r3, #255	@ 0xff
 800e98a:	d904      	bls.n	800e996 <UART_AdvFeatureConfig+0x1a>
 800e98c:	f640 514d 	movw	r1, #3405	@ 0xd4d
 800e990:	4891      	ldr	r0, [pc, #580]	@ (800ebd8 <UART_AdvFeatureConfig+0x25c>)
 800e992:	f7f7 f9c3 	bl	8005d1c <assert_failed>

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e99a:	f003 0308 	and.w	r3, r3, #8
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d018      	beq.n	800e9d4 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d009      	beq.n	800e9be <UART_AdvFeatureConfig+0x42>
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e9ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e9b2:	d004      	beq.n	800e9be <UART_AdvFeatureConfig+0x42>
 800e9b4:	f640 5152 	movw	r1, #3410	@ 0xd52
 800e9b8:	4887      	ldr	r0, [pc, #540]	@ (800ebd8 <UART_AdvFeatureConfig+0x25c>)
 800e9ba:	f7f7 f9af 	bl	8005d1c <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	685b      	ldr	r3, [r3, #4]
 800e9c4:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	430a      	orrs	r2, r1
 800e9d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e9d8:	f003 0301 	and.w	r3, r3, #1
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d018      	beq.n	800ea12 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d009      	beq.n	800e9fc <UART_AdvFeatureConfig+0x80>
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e9ec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e9f0:	d004      	beq.n	800e9fc <UART_AdvFeatureConfig+0x80>
 800e9f2:	f640 5159 	movw	r1, #3417	@ 0xd59
 800e9f6:	4878      	ldr	r0, [pc, #480]	@ (800ebd8 <UART_AdvFeatureConfig+0x25c>)
 800e9f8:	f7f7 f990 	bl	8005d1c <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	685b      	ldr	r3, [r3, #4]
 800ea02:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	430a      	orrs	r2, r1
 800ea10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ea16:	f003 0302 	and.w	r3, r3, #2
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d018      	beq.n	800ea50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d009      	beq.n	800ea3a <UART_AdvFeatureConfig+0xbe>
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea2a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ea2e:	d004      	beq.n	800ea3a <UART_AdvFeatureConfig+0xbe>
 800ea30:	f44f 6156 	mov.w	r1, #3424	@ 0xd60
 800ea34:	4868      	ldr	r0, [pc, #416]	@ (800ebd8 <UART_AdvFeatureConfig+0x25c>)
 800ea36:	f7f7 f971 	bl	8005d1c <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	685b      	ldr	r3, [r3, #4]
 800ea40:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	681b      	ldr	r3, [r3, #0]
 800ea4c:	430a      	orrs	r2, r1
 800ea4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ea54:	f003 0304 	and.w	r3, r3, #4
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d018      	beq.n	800ea8e <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d009      	beq.n	800ea78 <UART_AdvFeatureConfig+0xfc>
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ea68:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ea6c:	d004      	beq.n	800ea78 <UART_AdvFeatureConfig+0xfc>
 800ea6e:	f640 5167 	movw	r1, #3431	@ 0xd67
 800ea72:	4859      	ldr	r0, [pc, #356]	@ (800ebd8 <UART_AdvFeatureConfig+0x25c>)
 800ea74:	f7f7 f952 	bl	8005d1c <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	681b      	ldr	r3, [r3, #0]
 800ea7c:	685b      	ldr	r3, [r3, #4]
 800ea7e:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	430a      	orrs	r2, r1
 800ea8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ea92:	f003 0310 	and.w	r3, r3, #16
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d018      	beq.n	800eacc <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d009      	beq.n	800eab6 <UART_AdvFeatureConfig+0x13a>
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eaa6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800eaaa:	d004      	beq.n	800eab6 <UART_AdvFeatureConfig+0x13a>
 800eaac:	f640 516e 	movw	r1, #3438	@ 0xd6e
 800eab0:	4849      	ldr	r0, [pc, #292]	@ (800ebd8 <UART_AdvFeatureConfig+0x25c>)
 800eab2:	f7f7 f933 	bl	8005d1c <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	689b      	ldr	r3, [r3, #8]
 800eabc:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	681b      	ldr	r3, [r3, #0]
 800eac8:	430a      	orrs	r2, r1
 800eaca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ead0:	f003 0320 	and.w	r3, r3, #32
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	d018      	beq.n	800eb0a <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800eadc:	2b00      	cmp	r3, #0
 800eade:	d009      	beq.n	800eaf4 <UART_AdvFeatureConfig+0x178>
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800eae4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800eae8:	d004      	beq.n	800eaf4 <UART_AdvFeatureConfig+0x178>
 800eaea:	f640 5175 	movw	r1, #3445	@ 0xd75
 800eaee:	483a      	ldr	r0, [pc, #232]	@ (800ebd8 <UART_AdvFeatureConfig+0x25c>)
 800eaf0:	f7f7 f914 	bl	8005d1c <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	681b      	ldr	r3, [r3, #0]
 800eaf8:	689b      	ldr	r3, [r3, #8]
 800eafa:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	681b      	ldr	r3, [r3, #0]
 800eb06:	430a      	orrs	r2, r1
 800eb08:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eb0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d06c      	beq.n	800ebf0 <UART_AdvFeatureConfig+0x274>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	681b      	ldr	r3, [r3, #0]
 800eb1a:	4a30      	ldr	r2, [pc, #192]	@ (800ebdc <UART_AdvFeatureConfig+0x260>)
 800eb1c:	4293      	cmp	r3, r2
 800eb1e:	d018      	beq.n	800eb52 <UART_AdvFeatureConfig+0x1d6>
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	4a2e      	ldr	r2, [pc, #184]	@ (800ebe0 <UART_AdvFeatureConfig+0x264>)
 800eb26:	4293      	cmp	r3, r2
 800eb28:	d013      	beq.n	800eb52 <UART_AdvFeatureConfig+0x1d6>
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	681b      	ldr	r3, [r3, #0]
 800eb2e:	4a2d      	ldr	r2, [pc, #180]	@ (800ebe4 <UART_AdvFeatureConfig+0x268>)
 800eb30:	4293      	cmp	r3, r2
 800eb32:	d00e      	beq.n	800eb52 <UART_AdvFeatureConfig+0x1d6>
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	4a2b      	ldr	r2, [pc, #172]	@ (800ebe8 <UART_AdvFeatureConfig+0x26c>)
 800eb3a:	4293      	cmp	r3, r2
 800eb3c:	d009      	beq.n	800eb52 <UART_AdvFeatureConfig+0x1d6>
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	4a2a      	ldr	r2, [pc, #168]	@ (800ebec <UART_AdvFeatureConfig+0x270>)
 800eb44:	4293      	cmp	r3, r2
 800eb46:	d004      	beq.n	800eb52 <UART_AdvFeatureConfig+0x1d6>
 800eb48:	f640 517c 	movw	r1, #3452	@ 0xd7c
 800eb4c:	4822      	ldr	r0, [pc, #136]	@ (800ebd8 <UART_AdvFeatureConfig+0x25c>)
 800eb4e:	f7f7 f8e5 	bl	8005d1c <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d009      	beq.n	800eb6e <UART_AdvFeatureConfig+0x1f2>
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eb5e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800eb62:	d004      	beq.n	800eb6e <UART_AdvFeatureConfig+0x1f2>
 800eb64:	f640 517d 	movw	r1, #3453	@ 0xd7d
 800eb68:	481b      	ldr	r0, [pc, #108]	@ (800ebd8 <UART_AdvFeatureConfig+0x25c>)
 800eb6a:	f7f7 f8d7 	bl	8005d1c <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	681b      	ldr	r3, [r3, #0]
 800eb72:	685b      	ldr	r3, [r3, #4]
 800eb74:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	681b      	ldr	r3, [r3, #0]
 800eb80:	430a      	orrs	r2, r1
 800eb82:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eb88:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800eb8c:	d130      	bne.n	800ebf0 <UART_AdvFeatureConfig+0x274>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d013      	beq.n	800ebbe <UART_AdvFeatureConfig+0x242>
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800eb9a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800eb9e:	d00e      	beq.n	800ebbe <UART_AdvFeatureConfig+0x242>
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800eba4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800eba8:	d009      	beq.n	800ebbe <UART_AdvFeatureConfig+0x242>
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ebae:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800ebb2:	d004      	beq.n	800ebbe <UART_AdvFeatureConfig+0x242>
 800ebb4:	f640 5182 	movw	r1, #3458	@ 0xd82
 800ebb8:	4807      	ldr	r0, [pc, #28]	@ (800ebd8 <UART_AdvFeatureConfig+0x25c>)
 800ebba:	f7f7 f8af 	bl	8005d1c <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	685b      	ldr	r3, [r3, #4]
 800ebc4:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	430a      	orrs	r2, r1
 800ebd2:	605a      	str	r2, [r3, #4]
 800ebd4:	e00c      	b.n	800ebf0 <UART_AdvFeatureConfig+0x274>
 800ebd6:	bf00      	nop
 800ebd8:	08010c2c 	.word	0x08010c2c
 800ebdc:	40013800 	.word	0x40013800
 800ebe0:	40004400 	.word	0x40004400
 800ebe4:	40004800 	.word	0x40004800
 800ebe8:	40004c00 	.word	0x40004c00
 800ebec:	40005000 	.word	0x40005000
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ebf4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d018      	beq.n	800ec2e <UART_AdvFeatureConfig+0x2b2>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d009      	beq.n	800ec18 <UART_AdvFeatureConfig+0x29c>
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ec08:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800ec0c:	d004      	beq.n	800ec18 <UART_AdvFeatureConfig+0x29c>
 800ec0e:	f640 518a 	movw	r1, #3466	@ 0xd8a
 800ec12:	4809      	ldr	r0, [pc, #36]	@ (800ec38 <UART_AdvFeatureConfig+0x2bc>)
 800ec14:	f7f7 f882 	bl	8005d1c <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	685b      	ldr	r3, [r3, #4]
 800ec1e:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	681b      	ldr	r3, [r3, #0]
 800ec2a:	430a      	orrs	r2, r1
 800ec2c:	605a      	str	r2, [r3, #4]
  }
}
 800ec2e:	bf00      	nop
 800ec30:	3708      	adds	r7, #8
 800ec32:	46bd      	mov	sp, r7
 800ec34:	bd80      	pop	{r7, pc}
 800ec36:	bf00      	nop
 800ec38:	08010c2c 	.word	0x08010c2c

0800ec3c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ec3c:	b580      	push	{r7, lr}
 800ec3e:	b098      	sub	sp, #96	@ 0x60
 800ec40:	af02      	add	r7, sp, #8
 800ec42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	2200      	movs	r2, #0
 800ec48:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ec4c:	f7f7 fe90 	bl	8006970 <HAL_GetTick>
 800ec50:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	681b      	ldr	r3, [r3, #0]
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	f003 0308 	and.w	r3, r3, #8
 800ec5c:	2b08      	cmp	r3, #8
 800ec5e:	d12e      	bne.n	800ecbe <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ec60:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ec64:	9300      	str	r3, [sp, #0]
 800ec66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ec68:	2200      	movs	r2, #0
 800ec6a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800ec6e:	6878      	ldr	r0, [r7, #4]
 800ec70:	f000 f88c 	bl	800ed8c <UART_WaitOnFlagUntilTimeout>
 800ec74:	4603      	mov	r3, r0
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d021      	beq.n	800ecbe <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	681b      	ldr	r3, [r3, #0]
 800ec7e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ec82:	e853 3f00 	ldrex	r3, [r3]
 800ec86:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ec88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ec8a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ec8e:	653b      	str	r3, [r7, #80]	@ 0x50
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	681b      	ldr	r3, [r3, #0]
 800ec94:	461a      	mov	r2, r3
 800ec96:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ec98:	647b      	str	r3, [r7, #68]	@ 0x44
 800ec9a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec9c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ec9e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800eca0:	e841 2300 	strex	r3, r2, [r1]
 800eca4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800eca6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	d1e6      	bne.n	800ec7a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	2220      	movs	r2, #32
 800ecb0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	2200      	movs	r2, #0
 800ecb6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ecba:	2303      	movs	r3, #3
 800ecbc:	e062      	b.n	800ed84 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	681b      	ldr	r3, [r3, #0]
 800ecc4:	f003 0304 	and.w	r3, r3, #4
 800ecc8:	2b04      	cmp	r3, #4
 800ecca:	d149      	bne.n	800ed60 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800eccc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ecd0:	9300      	str	r3, [sp, #0]
 800ecd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ecd4:	2200      	movs	r2, #0
 800ecd6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800ecda:	6878      	ldr	r0, [r7, #4]
 800ecdc:	f000 f856 	bl	800ed8c <UART_WaitOnFlagUntilTimeout>
 800ece0:	4603      	mov	r3, r0
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d03c      	beq.n	800ed60 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ecec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ecee:	e853 3f00 	ldrex	r3, [r3]
 800ecf2:	623b      	str	r3, [r7, #32]
   return(result);
 800ecf4:	6a3b      	ldr	r3, [r7, #32]
 800ecf6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ecfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	461a      	mov	r2, r3
 800ed02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ed04:	633b      	str	r3, [r7, #48]	@ 0x30
 800ed06:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed08:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ed0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ed0c:	e841 2300 	strex	r3, r2, [r1]
 800ed10:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ed12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d1e6      	bne.n	800ece6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	3308      	adds	r3, #8
 800ed1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed20:	693b      	ldr	r3, [r7, #16]
 800ed22:	e853 3f00 	ldrex	r3, [r3]
 800ed26:	60fb      	str	r3, [r7, #12]
   return(result);
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	f023 0301 	bic.w	r3, r3, #1
 800ed2e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	3308      	adds	r3, #8
 800ed36:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ed38:	61fa      	str	r2, [r7, #28]
 800ed3a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed3c:	69b9      	ldr	r1, [r7, #24]
 800ed3e:	69fa      	ldr	r2, [r7, #28]
 800ed40:	e841 2300 	strex	r3, r2, [r1]
 800ed44:	617b      	str	r3, [r7, #20]
   return(result);
 800ed46:	697b      	ldr	r3, [r7, #20]
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d1e5      	bne.n	800ed18 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	2220      	movs	r2, #32
 800ed50:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	2200      	movs	r2, #0
 800ed58:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ed5c:	2303      	movs	r3, #3
 800ed5e:	e011      	b.n	800ed84 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	2220      	movs	r2, #32
 800ed64:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	2220      	movs	r2, #32
 800ed6a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	2200      	movs	r2, #0
 800ed72:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	2200      	movs	r2, #0
 800ed78:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	2200      	movs	r2, #0
 800ed7e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800ed82:	2300      	movs	r3, #0
}
 800ed84:	4618      	mov	r0, r3
 800ed86:	3758      	adds	r7, #88	@ 0x58
 800ed88:	46bd      	mov	sp, r7
 800ed8a:	bd80      	pop	{r7, pc}

0800ed8c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ed8c:	b580      	push	{r7, lr}
 800ed8e:	b084      	sub	sp, #16
 800ed90:	af00      	add	r7, sp, #0
 800ed92:	60f8      	str	r0, [r7, #12]
 800ed94:	60b9      	str	r1, [r7, #8]
 800ed96:	603b      	str	r3, [r7, #0]
 800ed98:	4613      	mov	r3, r2
 800ed9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ed9c:	e04f      	b.n	800ee3e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ed9e:	69bb      	ldr	r3, [r7, #24]
 800eda0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eda4:	d04b      	beq.n	800ee3e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800eda6:	f7f7 fde3 	bl	8006970 <HAL_GetTick>
 800edaa:	4602      	mov	r2, r0
 800edac:	683b      	ldr	r3, [r7, #0]
 800edae:	1ad3      	subs	r3, r2, r3
 800edb0:	69ba      	ldr	r2, [r7, #24]
 800edb2:	429a      	cmp	r2, r3
 800edb4:	d302      	bcc.n	800edbc <UART_WaitOnFlagUntilTimeout+0x30>
 800edb6:	69bb      	ldr	r3, [r7, #24]
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d101      	bne.n	800edc0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800edbc:	2303      	movs	r3, #3
 800edbe:	e04e      	b.n	800ee5e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	681b      	ldr	r3, [r3, #0]
 800edc4:	681b      	ldr	r3, [r3, #0]
 800edc6:	f003 0304 	and.w	r3, r3, #4
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d037      	beq.n	800ee3e <UART_WaitOnFlagUntilTimeout+0xb2>
 800edce:	68bb      	ldr	r3, [r7, #8]
 800edd0:	2b80      	cmp	r3, #128	@ 0x80
 800edd2:	d034      	beq.n	800ee3e <UART_WaitOnFlagUntilTimeout+0xb2>
 800edd4:	68bb      	ldr	r3, [r7, #8]
 800edd6:	2b40      	cmp	r3, #64	@ 0x40
 800edd8:	d031      	beq.n	800ee3e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	681b      	ldr	r3, [r3, #0]
 800edde:	69db      	ldr	r3, [r3, #28]
 800ede0:	f003 0308 	and.w	r3, r3, #8
 800ede4:	2b08      	cmp	r3, #8
 800ede6:	d110      	bne.n	800ee0a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ede8:	68fb      	ldr	r3, [r7, #12]
 800edea:	681b      	ldr	r3, [r3, #0]
 800edec:	2208      	movs	r2, #8
 800edee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800edf0:	68f8      	ldr	r0, [r7, #12]
 800edf2:	f000 f838 	bl	800ee66 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800edf6:	68fb      	ldr	r3, [r7, #12]
 800edf8:	2208      	movs	r2, #8
 800edfa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	2200      	movs	r2, #0
 800ee02:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800ee06:	2301      	movs	r3, #1
 800ee08:	e029      	b.n	800ee5e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ee0a:	68fb      	ldr	r3, [r7, #12]
 800ee0c:	681b      	ldr	r3, [r3, #0]
 800ee0e:	69db      	ldr	r3, [r3, #28]
 800ee10:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ee14:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ee18:	d111      	bne.n	800ee3e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ee1a:	68fb      	ldr	r3, [r7, #12]
 800ee1c:	681b      	ldr	r3, [r3, #0]
 800ee1e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ee22:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ee24:	68f8      	ldr	r0, [r7, #12]
 800ee26:	f000 f81e 	bl	800ee66 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ee2a:	68fb      	ldr	r3, [r7, #12]
 800ee2c:	2220      	movs	r2, #32
 800ee2e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ee32:	68fb      	ldr	r3, [r7, #12]
 800ee34:	2200      	movs	r2, #0
 800ee36:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800ee3a:	2303      	movs	r3, #3
 800ee3c:	e00f      	b.n	800ee5e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ee3e:	68fb      	ldr	r3, [r7, #12]
 800ee40:	681b      	ldr	r3, [r3, #0]
 800ee42:	69da      	ldr	r2, [r3, #28]
 800ee44:	68bb      	ldr	r3, [r7, #8]
 800ee46:	4013      	ands	r3, r2
 800ee48:	68ba      	ldr	r2, [r7, #8]
 800ee4a:	429a      	cmp	r2, r3
 800ee4c:	bf0c      	ite	eq
 800ee4e:	2301      	moveq	r3, #1
 800ee50:	2300      	movne	r3, #0
 800ee52:	b2db      	uxtb	r3, r3
 800ee54:	461a      	mov	r2, r3
 800ee56:	79fb      	ldrb	r3, [r7, #7]
 800ee58:	429a      	cmp	r2, r3
 800ee5a:	d0a0      	beq.n	800ed9e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ee5c:	2300      	movs	r3, #0
}
 800ee5e:	4618      	mov	r0, r3
 800ee60:	3710      	adds	r7, #16
 800ee62:	46bd      	mov	sp, r7
 800ee64:	bd80      	pop	{r7, pc}

0800ee66 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ee66:	b480      	push	{r7}
 800ee68:	b095      	sub	sp, #84	@ 0x54
 800ee6a:	af00      	add	r7, sp, #0
 800ee6c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ee76:	e853 3f00 	ldrex	r3, [r3]
 800ee7a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ee7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee7e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ee82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	681b      	ldr	r3, [r3, #0]
 800ee88:	461a      	mov	r2, r3
 800ee8a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ee8c:	643b      	str	r3, [r7, #64]	@ 0x40
 800ee8e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee90:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ee92:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ee94:	e841 2300 	strex	r3, r2, [r1]
 800ee98:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ee9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d1e6      	bne.n	800ee6e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	681b      	ldr	r3, [r3, #0]
 800eea4:	3308      	adds	r3, #8
 800eea6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eea8:	6a3b      	ldr	r3, [r7, #32]
 800eeaa:	e853 3f00 	ldrex	r3, [r3]
 800eeae:	61fb      	str	r3, [r7, #28]
   return(result);
 800eeb0:	69fb      	ldr	r3, [r7, #28]
 800eeb2:	f023 0301 	bic.w	r3, r3, #1
 800eeb6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	681b      	ldr	r3, [r3, #0]
 800eebc:	3308      	adds	r3, #8
 800eebe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800eec0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800eec2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eec4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800eec6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800eec8:	e841 2300 	strex	r3, r2, [r1]
 800eecc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800eece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d1e5      	bne.n	800eea0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800eed8:	2b01      	cmp	r3, #1
 800eeda:	d118      	bne.n	800ef0e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	e853 3f00 	ldrex	r3, [r3]
 800eee8:	60bb      	str	r3, [r7, #8]
   return(result);
 800eeea:	68bb      	ldr	r3, [r7, #8]
 800eeec:	f023 0310 	bic.w	r3, r3, #16
 800eef0:	647b      	str	r3, [r7, #68]	@ 0x44
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	681b      	ldr	r3, [r3, #0]
 800eef6:	461a      	mov	r2, r3
 800eef8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800eefa:	61bb      	str	r3, [r7, #24]
 800eefc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eefe:	6979      	ldr	r1, [r7, #20]
 800ef00:	69ba      	ldr	r2, [r7, #24]
 800ef02:	e841 2300 	strex	r3, r2, [r1]
 800ef06:	613b      	str	r3, [r7, #16]
   return(result);
 800ef08:	693b      	ldr	r3, [r7, #16]
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	d1e6      	bne.n	800eedc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	2220      	movs	r2, #32
 800ef12:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	2200      	movs	r2, #0
 800ef1a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	2200      	movs	r2, #0
 800ef20:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800ef22:	bf00      	nop
 800ef24:	3754      	adds	r7, #84	@ 0x54
 800ef26:	46bd      	mov	sp, r7
 800ef28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef2c:	4770      	bx	lr
	...

0800ef30 <calloc>:
 800ef30:	4b02      	ldr	r3, [pc, #8]	@ (800ef3c <calloc+0xc>)
 800ef32:	460a      	mov	r2, r1
 800ef34:	4601      	mov	r1, r0
 800ef36:	6818      	ldr	r0, [r3, #0]
 800ef38:	f000 b802 	b.w	800ef40 <_calloc_r>
 800ef3c:	2000002c 	.word	0x2000002c

0800ef40 <_calloc_r>:
 800ef40:	b570      	push	{r4, r5, r6, lr}
 800ef42:	fba1 5402 	umull	r5, r4, r1, r2
 800ef46:	b934      	cbnz	r4, 800ef56 <_calloc_r+0x16>
 800ef48:	4629      	mov	r1, r5
 800ef4a:	f000 f83f 	bl	800efcc <_malloc_r>
 800ef4e:	4606      	mov	r6, r0
 800ef50:	b928      	cbnz	r0, 800ef5e <_calloc_r+0x1e>
 800ef52:	4630      	mov	r0, r6
 800ef54:	bd70      	pop	{r4, r5, r6, pc}
 800ef56:	220c      	movs	r2, #12
 800ef58:	6002      	str	r2, [r0, #0]
 800ef5a:	2600      	movs	r6, #0
 800ef5c:	e7f9      	b.n	800ef52 <_calloc_r+0x12>
 800ef5e:	462a      	mov	r2, r5
 800ef60:	4621      	mov	r1, r4
 800ef62:	f000 fbb9 	bl	800f6d8 <memset>
 800ef66:	e7f4      	b.n	800ef52 <_calloc_r+0x12>

0800ef68 <malloc>:
 800ef68:	4b02      	ldr	r3, [pc, #8]	@ (800ef74 <malloc+0xc>)
 800ef6a:	4601      	mov	r1, r0
 800ef6c:	6818      	ldr	r0, [r3, #0]
 800ef6e:	f000 b82d 	b.w	800efcc <_malloc_r>
 800ef72:	bf00      	nop
 800ef74:	2000002c 	.word	0x2000002c

0800ef78 <free>:
 800ef78:	4b02      	ldr	r3, [pc, #8]	@ (800ef84 <free+0xc>)
 800ef7a:	4601      	mov	r1, r0
 800ef7c:	6818      	ldr	r0, [r3, #0]
 800ef7e:	f000 bc45 	b.w	800f80c <_free_r>
 800ef82:	bf00      	nop
 800ef84:	2000002c 	.word	0x2000002c

0800ef88 <sbrk_aligned>:
 800ef88:	b570      	push	{r4, r5, r6, lr}
 800ef8a:	4e0f      	ldr	r6, [pc, #60]	@ (800efc8 <sbrk_aligned+0x40>)
 800ef8c:	460c      	mov	r4, r1
 800ef8e:	6831      	ldr	r1, [r6, #0]
 800ef90:	4605      	mov	r5, r0
 800ef92:	b911      	cbnz	r1, 800ef9a <sbrk_aligned+0x12>
 800ef94:	f000 fbdc 	bl	800f750 <_sbrk_r>
 800ef98:	6030      	str	r0, [r6, #0]
 800ef9a:	4621      	mov	r1, r4
 800ef9c:	4628      	mov	r0, r5
 800ef9e:	f000 fbd7 	bl	800f750 <_sbrk_r>
 800efa2:	1c43      	adds	r3, r0, #1
 800efa4:	d103      	bne.n	800efae <sbrk_aligned+0x26>
 800efa6:	f04f 34ff 	mov.w	r4, #4294967295
 800efaa:	4620      	mov	r0, r4
 800efac:	bd70      	pop	{r4, r5, r6, pc}
 800efae:	1cc4      	adds	r4, r0, #3
 800efb0:	f024 0403 	bic.w	r4, r4, #3
 800efb4:	42a0      	cmp	r0, r4
 800efb6:	d0f8      	beq.n	800efaa <sbrk_aligned+0x22>
 800efb8:	1a21      	subs	r1, r4, r0
 800efba:	4628      	mov	r0, r5
 800efbc:	f000 fbc8 	bl	800f750 <_sbrk_r>
 800efc0:	3001      	adds	r0, #1
 800efc2:	d1f2      	bne.n	800efaa <sbrk_aligned+0x22>
 800efc4:	e7ef      	b.n	800efa6 <sbrk_aligned+0x1e>
 800efc6:	bf00      	nop
 800efc8:	20001140 	.word	0x20001140

0800efcc <_malloc_r>:
 800efcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800efd0:	1ccd      	adds	r5, r1, #3
 800efd2:	f025 0503 	bic.w	r5, r5, #3
 800efd6:	3508      	adds	r5, #8
 800efd8:	2d0c      	cmp	r5, #12
 800efda:	bf38      	it	cc
 800efdc:	250c      	movcc	r5, #12
 800efde:	2d00      	cmp	r5, #0
 800efe0:	4606      	mov	r6, r0
 800efe2:	db01      	blt.n	800efe8 <_malloc_r+0x1c>
 800efe4:	42a9      	cmp	r1, r5
 800efe6:	d904      	bls.n	800eff2 <_malloc_r+0x26>
 800efe8:	230c      	movs	r3, #12
 800efea:	6033      	str	r3, [r6, #0]
 800efec:	2000      	movs	r0, #0
 800efee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eff2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f0c8 <_malloc_r+0xfc>
 800eff6:	f000 f869 	bl	800f0cc <__malloc_lock>
 800effa:	f8d8 3000 	ldr.w	r3, [r8]
 800effe:	461c      	mov	r4, r3
 800f000:	bb44      	cbnz	r4, 800f054 <_malloc_r+0x88>
 800f002:	4629      	mov	r1, r5
 800f004:	4630      	mov	r0, r6
 800f006:	f7ff ffbf 	bl	800ef88 <sbrk_aligned>
 800f00a:	1c43      	adds	r3, r0, #1
 800f00c:	4604      	mov	r4, r0
 800f00e:	d158      	bne.n	800f0c2 <_malloc_r+0xf6>
 800f010:	f8d8 4000 	ldr.w	r4, [r8]
 800f014:	4627      	mov	r7, r4
 800f016:	2f00      	cmp	r7, #0
 800f018:	d143      	bne.n	800f0a2 <_malloc_r+0xd6>
 800f01a:	2c00      	cmp	r4, #0
 800f01c:	d04b      	beq.n	800f0b6 <_malloc_r+0xea>
 800f01e:	6823      	ldr	r3, [r4, #0]
 800f020:	4639      	mov	r1, r7
 800f022:	4630      	mov	r0, r6
 800f024:	eb04 0903 	add.w	r9, r4, r3
 800f028:	f000 fb92 	bl	800f750 <_sbrk_r>
 800f02c:	4581      	cmp	r9, r0
 800f02e:	d142      	bne.n	800f0b6 <_malloc_r+0xea>
 800f030:	6821      	ldr	r1, [r4, #0]
 800f032:	1a6d      	subs	r5, r5, r1
 800f034:	4629      	mov	r1, r5
 800f036:	4630      	mov	r0, r6
 800f038:	f7ff ffa6 	bl	800ef88 <sbrk_aligned>
 800f03c:	3001      	adds	r0, #1
 800f03e:	d03a      	beq.n	800f0b6 <_malloc_r+0xea>
 800f040:	6823      	ldr	r3, [r4, #0]
 800f042:	442b      	add	r3, r5
 800f044:	6023      	str	r3, [r4, #0]
 800f046:	f8d8 3000 	ldr.w	r3, [r8]
 800f04a:	685a      	ldr	r2, [r3, #4]
 800f04c:	bb62      	cbnz	r2, 800f0a8 <_malloc_r+0xdc>
 800f04e:	f8c8 7000 	str.w	r7, [r8]
 800f052:	e00f      	b.n	800f074 <_malloc_r+0xa8>
 800f054:	6822      	ldr	r2, [r4, #0]
 800f056:	1b52      	subs	r2, r2, r5
 800f058:	d420      	bmi.n	800f09c <_malloc_r+0xd0>
 800f05a:	2a0b      	cmp	r2, #11
 800f05c:	d917      	bls.n	800f08e <_malloc_r+0xc2>
 800f05e:	1961      	adds	r1, r4, r5
 800f060:	42a3      	cmp	r3, r4
 800f062:	6025      	str	r5, [r4, #0]
 800f064:	bf18      	it	ne
 800f066:	6059      	strne	r1, [r3, #4]
 800f068:	6863      	ldr	r3, [r4, #4]
 800f06a:	bf08      	it	eq
 800f06c:	f8c8 1000 	streq.w	r1, [r8]
 800f070:	5162      	str	r2, [r4, r5]
 800f072:	604b      	str	r3, [r1, #4]
 800f074:	4630      	mov	r0, r6
 800f076:	f000 f82f 	bl	800f0d8 <__malloc_unlock>
 800f07a:	f104 000b 	add.w	r0, r4, #11
 800f07e:	1d23      	adds	r3, r4, #4
 800f080:	f020 0007 	bic.w	r0, r0, #7
 800f084:	1ac2      	subs	r2, r0, r3
 800f086:	bf1c      	itt	ne
 800f088:	1a1b      	subne	r3, r3, r0
 800f08a:	50a3      	strne	r3, [r4, r2]
 800f08c:	e7af      	b.n	800efee <_malloc_r+0x22>
 800f08e:	6862      	ldr	r2, [r4, #4]
 800f090:	42a3      	cmp	r3, r4
 800f092:	bf0c      	ite	eq
 800f094:	f8c8 2000 	streq.w	r2, [r8]
 800f098:	605a      	strne	r2, [r3, #4]
 800f09a:	e7eb      	b.n	800f074 <_malloc_r+0xa8>
 800f09c:	4623      	mov	r3, r4
 800f09e:	6864      	ldr	r4, [r4, #4]
 800f0a0:	e7ae      	b.n	800f000 <_malloc_r+0x34>
 800f0a2:	463c      	mov	r4, r7
 800f0a4:	687f      	ldr	r7, [r7, #4]
 800f0a6:	e7b6      	b.n	800f016 <_malloc_r+0x4a>
 800f0a8:	461a      	mov	r2, r3
 800f0aa:	685b      	ldr	r3, [r3, #4]
 800f0ac:	42a3      	cmp	r3, r4
 800f0ae:	d1fb      	bne.n	800f0a8 <_malloc_r+0xdc>
 800f0b0:	2300      	movs	r3, #0
 800f0b2:	6053      	str	r3, [r2, #4]
 800f0b4:	e7de      	b.n	800f074 <_malloc_r+0xa8>
 800f0b6:	230c      	movs	r3, #12
 800f0b8:	6033      	str	r3, [r6, #0]
 800f0ba:	4630      	mov	r0, r6
 800f0bc:	f000 f80c 	bl	800f0d8 <__malloc_unlock>
 800f0c0:	e794      	b.n	800efec <_malloc_r+0x20>
 800f0c2:	6005      	str	r5, [r0, #0]
 800f0c4:	e7d6      	b.n	800f074 <_malloc_r+0xa8>
 800f0c6:	bf00      	nop
 800f0c8:	20001144 	.word	0x20001144

0800f0cc <__malloc_lock>:
 800f0cc:	4801      	ldr	r0, [pc, #4]	@ (800f0d4 <__malloc_lock+0x8>)
 800f0ce:	f000 bb8c 	b.w	800f7ea <__retarget_lock_acquire_recursive>
 800f0d2:	bf00      	nop
 800f0d4:	20001288 	.word	0x20001288

0800f0d8 <__malloc_unlock>:
 800f0d8:	4801      	ldr	r0, [pc, #4]	@ (800f0e0 <__malloc_unlock+0x8>)
 800f0da:	f000 bb87 	b.w	800f7ec <__retarget_lock_release_recursive>
 800f0de:	bf00      	nop
 800f0e0:	20001288 	.word	0x20001288

0800f0e4 <std>:
 800f0e4:	2300      	movs	r3, #0
 800f0e6:	b510      	push	{r4, lr}
 800f0e8:	4604      	mov	r4, r0
 800f0ea:	e9c0 3300 	strd	r3, r3, [r0]
 800f0ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f0f2:	6083      	str	r3, [r0, #8]
 800f0f4:	8181      	strh	r1, [r0, #12]
 800f0f6:	6643      	str	r3, [r0, #100]	@ 0x64
 800f0f8:	81c2      	strh	r2, [r0, #14]
 800f0fa:	6183      	str	r3, [r0, #24]
 800f0fc:	4619      	mov	r1, r3
 800f0fe:	2208      	movs	r2, #8
 800f100:	305c      	adds	r0, #92	@ 0x5c
 800f102:	f000 fae9 	bl	800f6d8 <memset>
 800f106:	4b0d      	ldr	r3, [pc, #52]	@ (800f13c <std+0x58>)
 800f108:	6263      	str	r3, [r4, #36]	@ 0x24
 800f10a:	4b0d      	ldr	r3, [pc, #52]	@ (800f140 <std+0x5c>)
 800f10c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800f10e:	4b0d      	ldr	r3, [pc, #52]	@ (800f144 <std+0x60>)
 800f110:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800f112:	4b0d      	ldr	r3, [pc, #52]	@ (800f148 <std+0x64>)
 800f114:	6323      	str	r3, [r4, #48]	@ 0x30
 800f116:	4b0d      	ldr	r3, [pc, #52]	@ (800f14c <std+0x68>)
 800f118:	6224      	str	r4, [r4, #32]
 800f11a:	429c      	cmp	r4, r3
 800f11c:	d006      	beq.n	800f12c <std+0x48>
 800f11e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800f122:	4294      	cmp	r4, r2
 800f124:	d002      	beq.n	800f12c <std+0x48>
 800f126:	33d0      	adds	r3, #208	@ 0xd0
 800f128:	429c      	cmp	r4, r3
 800f12a:	d105      	bne.n	800f138 <std+0x54>
 800f12c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800f130:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f134:	f000 bb58 	b.w	800f7e8 <__retarget_lock_init_recursive>
 800f138:	bd10      	pop	{r4, pc}
 800f13a:	bf00      	nop
 800f13c:	0800f4b1 	.word	0x0800f4b1
 800f140:	0800f4d3 	.word	0x0800f4d3
 800f144:	0800f50b 	.word	0x0800f50b
 800f148:	0800f52f 	.word	0x0800f52f
 800f14c:	20001148 	.word	0x20001148

0800f150 <stdio_exit_handler>:
 800f150:	4a02      	ldr	r2, [pc, #8]	@ (800f15c <stdio_exit_handler+0xc>)
 800f152:	4903      	ldr	r1, [pc, #12]	@ (800f160 <stdio_exit_handler+0x10>)
 800f154:	4803      	ldr	r0, [pc, #12]	@ (800f164 <stdio_exit_handler+0x14>)
 800f156:	f000 b869 	b.w	800f22c <_fwalk_sglue>
 800f15a:	bf00      	nop
 800f15c:	20000020 	.word	0x20000020
 800f160:	080101f5 	.word	0x080101f5
 800f164:	20000030 	.word	0x20000030

0800f168 <cleanup_stdio>:
 800f168:	6841      	ldr	r1, [r0, #4]
 800f16a:	4b0c      	ldr	r3, [pc, #48]	@ (800f19c <cleanup_stdio+0x34>)
 800f16c:	4299      	cmp	r1, r3
 800f16e:	b510      	push	{r4, lr}
 800f170:	4604      	mov	r4, r0
 800f172:	d001      	beq.n	800f178 <cleanup_stdio+0x10>
 800f174:	f001 f83e 	bl	80101f4 <_fflush_r>
 800f178:	68a1      	ldr	r1, [r4, #8]
 800f17a:	4b09      	ldr	r3, [pc, #36]	@ (800f1a0 <cleanup_stdio+0x38>)
 800f17c:	4299      	cmp	r1, r3
 800f17e:	d002      	beq.n	800f186 <cleanup_stdio+0x1e>
 800f180:	4620      	mov	r0, r4
 800f182:	f001 f837 	bl	80101f4 <_fflush_r>
 800f186:	68e1      	ldr	r1, [r4, #12]
 800f188:	4b06      	ldr	r3, [pc, #24]	@ (800f1a4 <cleanup_stdio+0x3c>)
 800f18a:	4299      	cmp	r1, r3
 800f18c:	d004      	beq.n	800f198 <cleanup_stdio+0x30>
 800f18e:	4620      	mov	r0, r4
 800f190:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f194:	f001 b82e 	b.w	80101f4 <_fflush_r>
 800f198:	bd10      	pop	{r4, pc}
 800f19a:	bf00      	nop
 800f19c:	20001148 	.word	0x20001148
 800f1a0:	200011b0 	.word	0x200011b0
 800f1a4:	20001218 	.word	0x20001218

0800f1a8 <global_stdio_init.part.0>:
 800f1a8:	b510      	push	{r4, lr}
 800f1aa:	4b0b      	ldr	r3, [pc, #44]	@ (800f1d8 <global_stdio_init.part.0+0x30>)
 800f1ac:	4c0b      	ldr	r4, [pc, #44]	@ (800f1dc <global_stdio_init.part.0+0x34>)
 800f1ae:	4a0c      	ldr	r2, [pc, #48]	@ (800f1e0 <global_stdio_init.part.0+0x38>)
 800f1b0:	601a      	str	r2, [r3, #0]
 800f1b2:	4620      	mov	r0, r4
 800f1b4:	2200      	movs	r2, #0
 800f1b6:	2104      	movs	r1, #4
 800f1b8:	f7ff ff94 	bl	800f0e4 <std>
 800f1bc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800f1c0:	2201      	movs	r2, #1
 800f1c2:	2109      	movs	r1, #9
 800f1c4:	f7ff ff8e 	bl	800f0e4 <std>
 800f1c8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800f1cc:	2202      	movs	r2, #2
 800f1ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f1d2:	2112      	movs	r1, #18
 800f1d4:	f7ff bf86 	b.w	800f0e4 <std>
 800f1d8:	20001280 	.word	0x20001280
 800f1dc:	20001148 	.word	0x20001148
 800f1e0:	0800f151 	.word	0x0800f151

0800f1e4 <__sfp_lock_acquire>:
 800f1e4:	4801      	ldr	r0, [pc, #4]	@ (800f1ec <__sfp_lock_acquire+0x8>)
 800f1e6:	f000 bb00 	b.w	800f7ea <__retarget_lock_acquire_recursive>
 800f1ea:	bf00      	nop
 800f1ec:	20001289 	.word	0x20001289

0800f1f0 <__sfp_lock_release>:
 800f1f0:	4801      	ldr	r0, [pc, #4]	@ (800f1f8 <__sfp_lock_release+0x8>)
 800f1f2:	f000 bafb 	b.w	800f7ec <__retarget_lock_release_recursive>
 800f1f6:	bf00      	nop
 800f1f8:	20001289 	.word	0x20001289

0800f1fc <__sinit>:
 800f1fc:	b510      	push	{r4, lr}
 800f1fe:	4604      	mov	r4, r0
 800f200:	f7ff fff0 	bl	800f1e4 <__sfp_lock_acquire>
 800f204:	6a23      	ldr	r3, [r4, #32]
 800f206:	b11b      	cbz	r3, 800f210 <__sinit+0x14>
 800f208:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f20c:	f7ff bff0 	b.w	800f1f0 <__sfp_lock_release>
 800f210:	4b04      	ldr	r3, [pc, #16]	@ (800f224 <__sinit+0x28>)
 800f212:	6223      	str	r3, [r4, #32]
 800f214:	4b04      	ldr	r3, [pc, #16]	@ (800f228 <__sinit+0x2c>)
 800f216:	681b      	ldr	r3, [r3, #0]
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d1f5      	bne.n	800f208 <__sinit+0xc>
 800f21c:	f7ff ffc4 	bl	800f1a8 <global_stdio_init.part.0>
 800f220:	e7f2      	b.n	800f208 <__sinit+0xc>
 800f222:	bf00      	nop
 800f224:	0800f169 	.word	0x0800f169
 800f228:	20001280 	.word	0x20001280

0800f22c <_fwalk_sglue>:
 800f22c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f230:	4607      	mov	r7, r0
 800f232:	4688      	mov	r8, r1
 800f234:	4614      	mov	r4, r2
 800f236:	2600      	movs	r6, #0
 800f238:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f23c:	f1b9 0901 	subs.w	r9, r9, #1
 800f240:	d505      	bpl.n	800f24e <_fwalk_sglue+0x22>
 800f242:	6824      	ldr	r4, [r4, #0]
 800f244:	2c00      	cmp	r4, #0
 800f246:	d1f7      	bne.n	800f238 <_fwalk_sglue+0xc>
 800f248:	4630      	mov	r0, r6
 800f24a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f24e:	89ab      	ldrh	r3, [r5, #12]
 800f250:	2b01      	cmp	r3, #1
 800f252:	d907      	bls.n	800f264 <_fwalk_sglue+0x38>
 800f254:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f258:	3301      	adds	r3, #1
 800f25a:	d003      	beq.n	800f264 <_fwalk_sglue+0x38>
 800f25c:	4629      	mov	r1, r5
 800f25e:	4638      	mov	r0, r7
 800f260:	47c0      	blx	r8
 800f262:	4306      	orrs	r6, r0
 800f264:	3568      	adds	r5, #104	@ 0x68
 800f266:	e7e9      	b.n	800f23c <_fwalk_sglue+0x10>

0800f268 <iprintf>:
 800f268:	b40f      	push	{r0, r1, r2, r3}
 800f26a:	b507      	push	{r0, r1, r2, lr}
 800f26c:	4906      	ldr	r1, [pc, #24]	@ (800f288 <iprintf+0x20>)
 800f26e:	ab04      	add	r3, sp, #16
 800f270:	6808      	ldr	r0, [r1, #0]
 800f272:	f853 2b04 	ldr.w	r2, [r3], #4
 800f276:	6881      	ldr	r1, [r0, #8]
 800f278:	9301      	str	r3, [sp, #4]
 800f27a:	f000 fc93 	bl	800fba4 <_vfiprintf_r>
 800f27e:	b003      	add	sp, #12
 800f280:	f85d eb04 	ldr.w	lr, [sp], #4
 800f284:	b004      	add	sp, #16
 800f286:	4770      	bx	lr
 800f288:	2000002c 	.word	0x2000002c

0800f28c <_puts_r>:
 800f28c:	6a03      	ldr	r3, [r0, #32]
 800f28e:	b570      	push	{r4, r5, r6, lr}
 800f290:	6884      	ldr	r4, [r0, #8]
 800f292:	4605      	mov	r5, r0
 800f294:	460e      	mov	r6, r1
 800f296:	b90b      	cbnz	r3, 800f29c <_puts_r+0x10>
 800f298:	f7ff ffb0 	bl	800f1fc <__sinit>
 800f29c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f29e:	07db      	lsls	r3, r3, #31
 800f2a0:	d405      	bmi.n	800f2ae <_puts_r+0x22>
 800f2a2:	89a3      	ldrh	r3, [r4, #12]
 800f2a4:	0598      	lsls	r0, r3, #22
 800f2a6:	d402      	bmi.n	800f2ae <_puts_r+0x22>
 800f2a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f2aa:	f000 fa9e 	bl	800f7ea <__retarget_lock_acquire_recursive>
 800f2ae:	89a3      	ldrh	r3, [r4, #12]
 800f2b0:	0719      	lsls	r1, r3, #28
 800f2b2:	d502      	bpl.n	800f2ba <_puts_r+0x2e>
 800f2b4:	6923      	ldr	r3, [r4, #16]
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d135      	bne.n	800f326 <_puts_r+0x9a>
 800f2ba:	4621      	mov	r1, r4
 800f2bc:	4628      	mov	r0, r5
 800f2be:	f000 f9b5 	bl	800f62c <__swsetup_r>
 800f2c2:	b380      	cbz	r0, 800f326 <_puts_r+0x9a>
 800f2c4:	f04f 35ff 	mov.w	r5, #4294967295
 800f2c8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f2ca:	07da      	lsls	r2, r3, #31
 800f2cc:	d405      	bmi.n	800f2da <_puts_r+0x4e>
 800f2ce:	89a3      	ldrh	r3, [r4, #12]
 800f2d0:	059b      	lsls	r3, r3, #22
 800f2d2:	d402      	bmi.n	800f2da <_puts_r+0x4e>
 800f2d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f2d6:	f000 fa89 	bl	800f7ec <__retarget_lock_release_recursive>
 800f2da:	4628      	mov	r0, r5
 800f2dc:	bd70      	pop	{r4, r5, r6, pc}
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	da04      	bge.n	800f2ec <_puts_r+0x60>
 800f2e2:	69a2      	ldr	r2, [r4, #24]
 800f2e4:	429a      	cmp	r2, r3
 800f2e6:	dc17      	bgt.n	800f318 <_puts_r+0x8c>
 800f2e8:	290a      	cmp	r1, #10
 800f2ea:	d015      	beq.n	800f318 <_puts_r+0x8c>
 800f2ec:	6823      	ldr	r3, [r4, #0]
 800f2ee:	1c5a      	adds	r2, r3, #1
 800f2f0:	6022      	str	r2, [r4, #0]
 800f2f2:	7019      	strb	r1, [r3, #0]
 800f2f4:	68a3      	ldr	r3, [r4, #8]
 800f2f6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f2fa:	3b01      	subs	r3, #1
 800f2fc:	60a3      	str	r3, [r4, #8]
 800f2fe:	2900      	cmp	r1, #0
 800f300:	d1ed      	bne.n	800f2de <_puts_r+0x52>
 800f302:	2b00      	cmp	r3, #0
 800f304:	da11      	bge.n	800f32a <_puts_r+0x9e>
 800f306:	4622      	mov	r2, r4
 800f308:	210a      	movs	r1, #10
 800f30a:	4628      	mov	r0, r5
 800f30c:	f000 f950 	bl	800f5b0 <__swbuf_r>
 800f310:	3001      	adds	r0, #1
 800f312:	d0d7      	beq.n	800f2c4 <_puts_r+0x38>
 800f314:	250a      	movs	r5, #10
 800f316:	e7d7      	b.n	800f2c8 <_puts_r+0x3c>
 800f318:	4622      	mov	r2, r4
 800f31a:	4628      	mov	r0, r5
 800f31c:	f000 f948 	bl	800f5b0 <__swbuf_r>
 800f320:	3001      	adds	r0, #1
 800f322:	d1e7      	bne.n	800f2f4 <_puts_r+0x68>
 800f324:	e7ce      	b.n	800f2c4 <_puts_r+0x38>
 800f326:	3e01      	subs	r6, #1
 800f328:	e7e4      	b.n	800f2f4 <_puts_r+0x68>
 800f32a:	6823      	ldr	r3, [r4, #0]
 800f32c:	1c5a      	adds	r2, r3, #1
 800f32e:	6022      	str	r2, [r4, #0]
 800f330:	220a      	movs	r2, #10
 800f332:	701a      	strb	r2, [r3, #0]
 800f334:	e7ee      	b.n	800f314 <_puts_r+0x88>
	...

0800f338 <puts>:
 800f338:	4b02      	ldr	r3, [pc, #8]	@ (800f344 <puts+0xc>)
 800f33a:	4601      	mov	r1, r0
 800f33c:	6818      	ldr	r0, [r3, #0]
 800f33e:	f7ff bfa5 	b.w	800f28c <_puts_r>
 800f342:	bf00      	nop
 800f344:	2000002c 	.word	0x2000002c

0800f348 <setvbuf>:
 800f348:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f34c:	461d      	mov	r5, r3
 800f34e:	4b57      	ldr	r3, [pc, #348]	@ (800f4ac <setvbuf+0x164>)
 800f350:	681f      	ldr	r7, [r3, #0]
 800f352:	4604      	mov	r4, r0
 800f354:	460e      	mov	r6, r1
 800f356:	4690      	mov	r8, r2
 800f358:	b127      	cbz	r7, 800f364 <setvbuf+0x1c>
 800f35a:	6a3b      	ldr	r3, [r7, #32]
 800f35c:	b913      	cbnz	r3, 800f364 <setvbuf+0x1c>
 800f35e:	4638      	mov	r0, r7
 800f360:	f7ff ff4c 	bl	800f1fc <__sinit>
 800f364:	f1b8 0f02 	cmp.w	r8, #2
 800f368:	d006      	beq.n	800f378 <setvbuf+0x30>
 800f36a:	f1b8 0f01 	cmp.w	r8, #1
 800f36e:	f200 809a 	bhi.w	800f4a6 <setvbuf+0x15e>
 800f372:	2d00      	cmp	r5, #0
 800f374:	f2c0 8097 	blt.w	800f4a6 <setvbuf+0x15e>
 800f378:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f37a:	07d9      	lsls	r1, r3, #31
 800f37c:	d405      	bmi.n	800f38a <setvbuf+0x42>
 800f37e:	89a3      	ldrh	r3, [r4, #12]
 800f380:	059a      	lsls	r2, r3, #22
 800f382:	d402      	bmi.n	800f38a <setvbuf+0x42>
 800f384:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f386:	f000 fa30 	bl	800f7ea <__retarget_lock_acquire_recursive>
 800f38a:	4621      	mov	r1, r4
 800f38c:	4638      	mov	r0, r7
 800f38e:	f000 ff31 	bl	80101f4 <_fflush_r>
 800f392:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f394:	b141      	cbz	r1, 800f3a8 <setvbuf+0x60>
 800f396:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f39a:	4299      	cmp	r1, r3
 800f39c:	d002      	beq.n	800f3a4 <setvbuf+0x5c>
 800f39e:	4638      	mov	r0, r7
 800f3a0:	f000 fa34 	bl	800f80c <_free_r>
 800f3a4:	2300      	movs	r3, #0
 800f3a6:	6363      	str	r3, [r4, #52]	@ 0x34
 800f3a8:	2300      	movs	r3, #0
 800f3aa:	61a3      	str	r3, [r4, #24]
 800f3ac:	6063      	str	r3, [r4, #4]
 800f3ae:	89a3      	ldrh	r3, [r4, #12]
 800f3b0:	061b      	lsls	r3, r3, #24
 800f3b2:	d503      	bpl.n	800f3bc <setvbuf+0x74>
 800f3b4:	6921      	ldr	r1, [r4, #16]
 800f3b6:	4638      	mov	r0, r7
 800f3b8:	f000 fa28 	bl	800f80c <_free_r>
 800f3bc:	89a3      	ldrh	r3, [r4, #12]
 800f3be:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 800f3c2:	f023 0303 	bic.w	r3, r3, #3
 800f3c6:	f1b8 0f02 	cmp.w	r8, #2
 800f3ca:	81a3      	strh	r3, [r4, #12]
 800f3cc:	d061      	beq.n	800f492 <setvbuf+0x14a>
 800f3ce:	ab01      	add	r3, sp, #4
 800f3d0:	466a      	mov	r2, sp
 800f3d2:	4621      	mov	r1, r4
 800f3d4:	4638      	mov	r0, r7
 800f3d6:	f000 ff35 	bl	8010244 <__swhatbuf_r>
 800f3da:	89a3      	ldrh	r3, [r4, #12]
 800f3dc:	4318      	orrs	r0, r3
 800f3de:	81a0      	strh	r0, [r4, #12]
 800f3e0:	bb2d      	cbnz	r5, 800f42e <setvbuf+0xe6>
 800f3e2:	9d00      	ldr	r5, [sp, #0]
 800f3e4:	4628      	mov	r0, r5
 800f3e6:	f7ff fdbf 	bl	800ef68 <malloc>
 800f3ea:	4606      	mov	r6, r0
 800f3ec:	2800      	cmp	r0, #0
 800f3ee:	d152      	bne.n	800f496 <setvbuf+0x14e>
 800f3f0:	f8dd 9000 	ldr.w	r9, [sp]
 800f3f4:	45a9      	cmp	r9, r5
 800f3f6:	d140      	bne.n	800f47a <setvbuf+0x132>
 800f3f8:	f04f 35ff 	mov.w	r5, #4294967295
 800f3fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f400:	f043 0202 	orr.w	r2, r3, #2
 800f404:	81a2      	strh	r2, [r4, #12]
 800f406:	2200      	movs	r2, #0
 800f408:	60a2      	str	r2, [r4, #8]
 800f40a:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 800f40e:	6022      	str	r2, [r4, #0]
 800f410:	6122      	str	r2, [r4, #16]
 800f412:	2201      	movs	r2, #1
 800f414:	6162      	str	r2, [r4, #20]
 800f416:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f418:	07d6      	lsls	r6, r2, #31
 800f41a:	d404      	bmi.n	800f426 <setvbuf+0xde>
 800f41c:	0598      	lsls	r0, r3, #22
 800f41e:	d402      	bmi.n	800f426 <setvbuf+0xde>
 800f420:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f422:	f000 f9e3 	bl	800f7ec <__retarget_lock_release_recursive>
 800f426:	4628      	mov	r0, r5
 800f428:	b003      	add	sp, #12
 800f42a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f42e:	2e00      	cmp	r6, #0
 800f430:	d0d8      	beq.n	800f3e4 <setvbuf+0x9c>
 800f432:	6a3b      	ldr	r3, [r7, #32]
 800f434:	b913      	cbnz	r3, 800f43c <setvbuf+0xf4>
 800f436:	4638      	mov	r0, r7
 800f438:	f7ff fee0 	bl	800f1fc <__sinit>
 800f43c:	f1b8 0f01 	cmp.w	r8, #1
 800f440:	bf08      	it	eq
 800f442:	89a3      	ldrheq	r3, [r4, #12]
 800f444:	6026      	str	r6, [r4, #0]
 800f446:	bf04      	itt	eq
 800f448:	f043 0301 	orreq.w	r3, r3, #1
 800f44c:	81a3      	strheq	r3, [r4, #12]
 800f44e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f452:	f013 0208 	ands.w	r2, r3, #8
 800f456:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800f45a:	d01e      	beq.n	800f49a <setvbuf+0x152>
 800f45c:	07d9      	lsls	r1, r3, #31
 800f45e:	bf41      	itttt	mi
 800f460:	2200      	movmi	r2, #0
 800f462:	426d      	negmi	r5, r5
 800f464:	60a2      	strmi	r2, [r4, #8]
 800f466:	61a5      	strmi	r5, [r4, #24]
 800f468:	bf58      	it	pl
 800f46a:	60a5      	strpl	r5, [r4, #8]
 800f46c:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f46e:	07d2      	lsls	r2, r2, #31
 800f470:	d401      	bmi.n	800f476 <setvbuf+0x12e>
 800f472:	059b      	lsls	r3, r3, #22
 800f474:	d513      	bpl.n	800f49e <setvbuf+0x156>
 800f476:	2500      	movs	r5, #0
 800f478:	e7d5      	b.n	800f426 <setvbuf+0xde>
 800f47a:	4648      	mov	r0, r9
 800f47c:	f7ff fd74 	bl	800ef68 <malloc>
 800f480:	4606      	mov	r6, r0
 800f482:	2800      	cmp	r0, #0
 800f484:	d0b8      	beq.n	800f3f8 <setvbuf+0xb0>
 800f486:	89a3      	ldrh	r3, [r4, #12]
 800f488:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f48c:	81a3      	strh	r3, [r4, #12]
 800f48e:	464d      	mov	r5, r9
 800f490:	e7cf      	b.n	800f432 <setvbuf+0xea>
 800f492:	2500      	movs	r5, #0
 800f494:	e7b2      	b.n	800f3fc <setvbuf+0xb4>
 800f496:	46a9      	mov	r9, r5
 800f498:	e7f5      	b.n	800f486 <setvbuf+0x13e>
 800f49a:	60a2      	str	r2, [r4, #8]
 800f49c:	e7e6      	b.n	800f46c <setvbuf+0x124>
 800f49e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f4a0:	f000 f9a4 	bl	800f7ec <__retarget_lock_release_recursive>
 800f4a4:	e7e7      	b.n	800f476 <setvbuf+0x12e>
 800f4a6:	f04f 35ff 	mov.w	r5, #4294967295
 800f4aa:	e7bc      	b.n	800f426 <setvbuf+0xde>
 800f4ac:	2000002c 	.word	0x2000002c

0800f4b0 <__sread>:
 800f4b0:	b510      	push	{r4, lr}
 800f4b2:	460c      	mov	r4, r1
 800f4b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f4b8:	f000 f938 	bl	800f72c <_read_r>
 800f4bc:	2800      	cmp	r0, #0
 800f4be:	bfab      	itete	ge
 800f4c0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800f4c2:	89a3      	ldrhlt	r3, [r4, #12]
 800f4c4:	181b      	addge	r3, r3, r0
 800f4c6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800f4ca:	bfac      	ite	ge
 800f4cc:	6563      	strge	r3, [r4, #84]	@ 0x54
 800f4ce:	81a3      	strhlt	r3, [r4, #12]
 800f4d0:	bd10      	pop	{r4, pc}

0800f4d2 <__swrite>:
 800f4d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f4d6:	461f      	mov	r7, r3
 800f4d8:	898b      	ldrh	r3, [r1, #12]
 800f4da:	05db      	lsls	r3, r3, #23
 800f4dc:	4605      	mov	r5, r0
 800f4de:	460c      	mov	r4, r1
 800f4e0:	4616      	mov	r6, r2
 800f4e2:	d505      	bpl.n	800f4f0 <__swrite+0x1e>
 800f4e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f4e8:	2302      	movs	r3, #2
 800f4ea:	2200      	movs	r2, #0
 800f4ec:	f000 f90c 	bl	800f708 <_lseek_r>
 800f4f0:	89a3      	ldrh	r3, [r4, #12]
 800f4f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f4f6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f4fa:	81a3      	strh	r3, [r4, #12]
 800f4fc:	4632      	mov	r2, r6
 800f4fe:	463b      	mov	r3, r7
 800f500:	4628      	mov	r0, r5
 800f502:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f506:	f000 b933 	b.w	800f770 <_write_r>

0800f50a <__sseek>:
 800f50a:	b510      	push	{r4, lr}
 800f50c:	460c      	mov	r4, r1
 800f50e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f512:	f000 f8f9 	bl	800f708 <_lseek_r>
 800f516:	1c43      	adds	r3, r0, #1
 800f518:	89a3      	ldrh	r3, [r4, #12]
 800f51a:	bf15      	itete	ne
 800f51c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800f51e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800f522:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800f526:	81a3      	strheq	r3, [r4, #12]
 800f528:	bf18      	it	ne
 800f52a:	81a3      	strhne	r3, [r4, #12]
 800f52c:	bd10      	pop	{r4, pc}

0800f52e <__sclose>:
 800f52e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f532:	f000 b8d9 	b.w	800f6e8 <_close_r>

0800f536 <_vsniprintf_r>:
 800f536:	b530      	push	{r4, r5, lr}
 800f538:	4614      	mov	r4, r2
 800f53a:	2c00      	cmp	r4, #0
 800f53c:	b09b      	sub	sp, #108	@ 0x6c
 800f53e:	4605      	mov	r5, r0
 800f540:	461a      	mov	r2, r3
 800f542:	da05      	bge.n	800f550 <_vsniprintf_r+0x1a>
 800f544:	238b      	movs	r3, #139	@ 0x8b
 800f546:	6003      	str	r3, [r0, #0]
 800f548:	f04f 30ff 	mov.w	r0, #4294967295
 800f54c:	b01b      	add	sp, #108	@ 0x6c
 800f54e:	bd30      	pop	{r4, r5, pc}
 800f550:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800f554:	f8ad 300c 	strh.w	r3, [sp, #12]
 800f558:	f04f 0300 	mov.w	r3, #0
 800f55c:	9319      	str	r3, [sp, #100]	@ 0x64
 800f55e:	bf14      	ite	ne
 800f560:	f104 33ff 	addne.w	r3, r4, #4294967295
 800f564:	4623      	moveq	r3, r4
 800f566:	9302      	str	r3, [sp, #8]
 800f568:	9305      	str	r3, [sp, #20]
 800f56a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f56e:	9100      	str	r1, [sp, #0]
 800f570:	9104      	str	r1, [sp, #16]
 800f572:	f8ad 300e 	strh.w	r3, [sp, #14]
 800f576:	4669      	mov	r1, sp
 800f578:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800f57a:	f000 f9ed 	bl	800f958 <_svfiprintf_r>
 800f57e:	1c43      	adds	r3, r0, #1
 800f580:	bfbc      	itt	lt
 800f582:	238b      	movlt	r3, #139	@ 0x8b
 800f584:	602b      	strlt	r3, [r5, #0]
 800f586:	2c00      	cmp	r4, #0
 800f588:	d0e0      	beq.n	800f54c <_vsniprintf_r+0x16>
 800f58a:	9b00      	ldr	r3, [sp, #0]
 800f58c:	2200      	movs	r2, #0
 800f58e:	701a      	strb	r2, [r3, #0]
 800f590:	e7dc      	b.n	800f54c <_vsniprintf_r+0x16>
	...

0800f594 <vsniprintf>:
 800f594:	b507      	push	{r0, r1, r2, lr}
 800f596:	9300      	str	r3, [sp, #0]
 800f598:	4613      	mov	r3, r2
 800f59a:	460a      	mov	r2, r1
 800f59c:	4601      	mov	r1, r0
 800f59e:	4803      	ldr	r0, [pc, #12]	@ (800f5ac <vsniprintf+0x18>)
 800f5a0:	6800      	ldr	r0, [r0, #0]
 800f5a2:	f7ff ffc8 	bl	800f536 <_vsniprintf_r>
 800f5a6:	b003      	add	sp, #12
 800f5a8:	f85d fb04 	ldr.w	pc, [sp], #4
 800f5ac:	2000002c 	.word	0x2000002c

0800f5b0 <__swbuf_r>:
 800f5b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5b2:	460e      	mov	r6, r1
 800f5b4:	4614      	mov	r4, r2
 800f5b6:	4605      	mov	r5, r0
 800f5b8:	b118      	cbz	r0, 800f5c2 <__swbuf_r+0x12>
 800f5ba:	6a03      	ldr	r3, [r0, #32]
 800f5bc:	b90b      	cbnz	r3, 800f5c2 <__swbuf_r+0x12>
 800f5be:	f7ff fe1d 	bl	800f1fc <__sinit>
 800f5c2:	69a3      	ldr	r3, [r4, #24]
 800f5c4:	60a3      	str	r3, [r4, #8]
 800f5c6:	89a3      	ldrh	r3, [r4, #12]
 800f5c8:	071a      	lsls	r2, r3, #28
 800f5ca:	d501      	bpl.n	800f5d0 <__swbuf_r+0x20>
 800f5cc:	6923      	ldr	r3, [r4, #16]
 800f5ce:	b943      	cbnz	r3, 800f5e2 <__swbuf_r+0x32>
 800f5d0:	4621      	mov	r1, r4
 800f5d2:	4628      	mov	r0, r5
 800f5d4:	f000 f82a 	bl	800f62c <__swsetup_r>
 800f5d8:	b118      	cbz	r0, 800f5e2 <__swbuf_r+0x32>
 800f5da:	f04f 37ff 	mov.w	r7, #4294967295
 800f5de:	4638      	mov	r0, r7
 800f5e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f5e2:	6823      	ldr	r3, [r4, #0]
 800f5e4:	6922      	ldr	r2, [r4, #16]
 800f5e6:	1a98      	subs	r0, r3, r2
 800f5e8:	6963      	ldr	r3, [r4, #20]
 800f5ea:	b2f6      	uxtb	r6, r6
 800f5ec:	4283      	cmp	r3, r0
 800f5ee:	4637      	mov	r7, r6
 800f5f0:	dc05      	bgt.n	800f5fe <__swbuf_r+0x4e>
 800f5f2:	4621      	mov	r1, r4
 800f5f4:	4628      	mov	r0, r5
 800f5f6:	f000 fdfd 	bl	80101f4 <_fflush_r>
 800f5fa:	2800      	cmp	r0, #0
 800f5fc:	d1ed      	bne.n	800f5da <__swbuf_r+0x2a>
 800f5fe:	68a3      	ldr	r3, [r4, #8]
 800f600:	3b01      	subs	r3, #1
 800f602:	60a3      	str	r3, [r4, #8]
 800f604:	6823      	ldr	r3, [r4, #0]
 800f606:	1c5a      	adds	r2, r3, #1
 800f608:	6022      	str	r2, [r4, #0]
 800f60a:	701e      	strb	r6, [r3, #0]
 800f60c:	6962      	ldr	r2, [r4, #20]
 800f60e:	1c43      	adds	r3, r0, #1
 800f610:	429a      	cmp	r2, r3
 800f612:	d004      	beq.n	800f61e <__swbuf_r+0x6e>
 800f614:	89a3      	ldrh	r3, [r4, #12]
 800f616:	07db      	lsls	r3, r3, #31
 800f618:	d5e1      	bpl.n	800f5de <__swbuf_r+0x2e>
 800f61a:	2e0a      	cmp	r6, #10
 800f61c:	d1df      	bne.n	800f5de <__swbuf_r+0x2e>
 800f61e:	4621      	mov	r1, r4
 800f620:	4628      	mov	r0, r5
 800f622:	f000 fde7 	bl	80101f4 <_fflush_r>
 800f626:	2800      	cmp	r0, #0
 800f628:	d0d9      	beq.n	800f5de <__swbuf_r+0x2e>
 800f62a:	e7d6      	b.n	800f5da <__swbuf_r+0x2a>

0800f62c <__swsetup_r>:
 800f62c:	b538      	push	{r3, r4, r5, lr}
 800f62e:	4b29      	ldr	r3, [pc, #164]	@ (800f6d4 <__swsetup_r+0xa8>)
 800f630:	4605      	mov	r5, r0
 800f632:	6818      	ldr	r0, [r3, #0]
 800f634:	460c      	mov	r4, r1
 800f636:	b118      	cbz	r0, 800f640 <__swsetup_r+0x14>
 800f638:	6a03      	ldr	r3, [r0, #32]
 800f63a:	b90b      	cbnz	r3, 800f640 <__swsetup_r+0x14>
 800f63c:	f7ff fdde 	bl	800f1fc <__sinit>
 800f640:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f644:	0719      	lsls	r1, r3, #28
 800f646:	d422      	bmi.n	800f68e <__swsetup_r+0x62>
 800f648:	06da      	lsls	r2, r3, #27
 800f64a:	d407      	bmi.n	800f65c <__swsetup_r+0x30>
 800f64c:	2209      	movs	r2, #9
 800f64e:	602a      	str	r2, [r5, #0]
 800f650:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f654:	81a3      	strh	r3, [r4, #12]
 800f656:	f04f 30ff 	mov.w	r0, #4294967295
 800f65a:	e033      	b.n	800f6c4 <__swsetup_r+0x98>
 800f65c:	0758      	lsls	r0, r3, #29
 800f65e:	d512      	bpl.n	800f686 <__swsetup_r+0x5a>
 800f660:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f662:	b141      	cbz	r1, 800f676 <__swsetup_r+0x4a>
 800f664:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f668:	4299      	cmp	r1, r3
 800f66a:	d002      	beq.n	800f672 <__swsetup_r+0x46>
 800f66c:	4628      	mov	r0, r5
 800f66e:	f000 f8cd 	bl	800f80c <_free_r>
 800f672:	2300      	movs	r3, #0
 800f674:	6363      	str	r3, [r4, #52]	@ 0x34
 800f676:	89a3      	ldrh	r3, [r4, #12]
 800f678:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f67c:	81a3      	strh	r3, [r4, #12]
 800f67e:	2300      	movs	r3, #0
 800f680:	6063      	str	r3, [r4, #4]
 800f682:	6923      	ldr	r3, [r4, #16]
 800f684:	6023      	str	r3, [r4, #0]
 800f686:	89a3      	ldrh	r3, [r4, #12]
 800f688:	f043 0308 	orr.w	r3, r3, #8
 800f68c:	81a3      	strh	r3, [r4, #12]
 800f68e:	6923      	ldr	r3, [r4, #16]
 800f690:	b94b      	cbnz	r3, 800f6a6 <__swsetup_r+0x7a>
 800f692:	89a3      	ldrh	r3, [r4, #12]
 800f694:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f698:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f69c:	d003      	beq.n	800f6a6 <__swsetup_r+0x7a>
 800f69e:	4621      	mov	r1, r4
 800f6a0:	4628      	mov	r0, r5
 800f6a2:	f000 fdf5 	bl	8010290 <__smakebuf_r>
 800f6a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f6aa:	f013 0201 	ands.w	r2, r3, #1
 800f6ae:	d00a      	beq.n	800f6c6 <__swsetup_r+0x9a>
 800f6b0:	2200      	movs	r2, #0
 800f6b2:	60a2      	str	r2, [r4, #8]
 800f6b4:	6962      	ldr	r2, [r4, #20]
 800f6b6:	4252      	negs	r2, r2
 800f6b8:	61a2      	str	r2, [r4, #24]
 800f6ba:	6922      	ldr	r2, [r4, #16]
 800f6bc:	b942      	cbnz	r2, 800f6d0 <__swsetup_r+0xa4>
 800f6be:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f6c2:	d1c5      	bne.n	800f650 <__swsetup_r+0x24>
 800f6c4:	bd38      	pop	{r3, r4, r5, pc}
 800f6c6:	0799      	lsls	r1, r3, #30
 800f6c8:	bf58      	it	pl
 800f6ca:	6962      	ldrpl	r2, [r4, #20]
 800f6cc:	60a2      	str	r2, [r4, #8]
 800f6ce:	e7f4      	b.n	800f6ba <__swsetup_r+0x8e>
 800f6d0:	2000      	movs	r0, #0
 800f6d2:	e7f7      	b.n	800f6c4 <__swsetup_r+0x98>
 800f6d4:	2000002c 	.word	0x2000002c

0800f6d8 <memset>:
 800f6d8:	4402      	add	r2, r0
 800f6da:	4603      	mov	r3, r0
 800f6dc:	4293      	cmp	r3, r2
 800f6de:	d100      	bne.n	800f6e2 <memset+0xa>
 800f6e0:	4770      	bx	lr
 800f6e2:	f803 1b01 	strb.w	r1, [r3], #1
 800f6e6:	e7f9      	b.n	800f6dc <memset+0x4>

0800f6e8 <_close_r>:
 800f6e8:	b538      	push	{r3, r4, r5, lr}
 800f6ea:	4d06      	ldr	r5, [pc, #24]	@ (800f704 <_close_r+0x1c>)
 800f6ec:	2300      	movs	r3, #0
 800f6ee:	4604      	mov	r4, r0
 800f6f0:	4608      	mov	r0, r1
 800f6f2:	602b      	str	r3, [r5, #0]
 800f6f4:	f7f6 fcc6 	bl	8006084 <_close>
 800f6f8:	1c43      	adds	r3, r0, #1
 800f6fa:	d102      	bne.n	800f702 <_close_r+0x1a>
 800f6fc:	682b      	ldr	r3, [r5, #0]
 800f6fe:	b103      	cbz	r3, 800f702 <_close_r+0x1a>
 800f700:	6023      	str	r3, [r4, #0]
 800f702:	bd38      	pop	{r3, r4, r5, pc}
 800f704:	20001284 	.word	0x20001284

0800f708 <_lseek_r>:
 800f708:	b538      	push	{r3, r4, r5, lr}
 800f70a:	4d07      	ldr	r5, [pc, #28]	@ (800f728 <_lseek_r+0x20>)
 800f70c:	4604      	mov	r4, r0
 800f70e:	4608      	mov	r0, r1
 800f710:	4611      	mov	r1, r2
 800f712:	2200      	movs	r2, #0
 800f714:	602a      	str	r2, [r5, #0]
 800f716:	461a      	mov	r2, r3
 800f718:	f7f6 fcdb 	bl	80060d2 <_lseek>
 800f71c:	1c43      	adds	r3, r0, #1
 800f71e:	d102      	bne.n	800f726 <_lseek_r+0x1e>
 800f720:	682b      	ldr	r3, [r5, #0]
 800f722:	b103      	cbz	r3, 800f726 <_lseek_r+0x1e>
 800f724:	6023      	str	r3, [r4, #0]
 800f726:	bd38      	pop	{r3, r4, r5, pc}
 800f728:	20001284 	.word	0x20001284

0800f72c <_read_r>:
 800f72c:	b538      	push	{r3, r4, r5, lr}
 800f72e:	4d07      	ldr	r5, [pc, #28]	@ (800f74c <_read_r+0x20>)
 800f730:	4604      	mov	r4, r0
 800f732:	4608      	mov	r0, r1
 800f734:	4611      	mov	r1, r2
 800f736:	2200      	movs	r2, #0
 800f738:	602a      	str	r2, [r5, #0]
 800f73a:	461a      	mov	r2, r3
 800f73c:	f7f6 fc85 	bl	800604a <_read>
 800f740:	1c43      	adds	r3, r0, #1
 800f742:	d102      	bne.n	800f74a <_read_r+0x1e>
 800f744:	682b      	ldr	r3, [r5, #0]
 800f746:	b103      	cbz	r3, 800f74a <_read_r+0x1e>
 800f748:	6023      	str	r3, [r4, #0]
 800f74a:	bd38      	pop	{r3, r4, r5, pc}
 800f74c:	20001284 	.word	0x20001284

0800f750 <_sbrk_r>:
 800f750:	b538      	push	{r3, r4, r5, lr}
 800f752:	4d06      	ldr	r5, [pc, #24]	@ (800f76c <_sbrk_r+0x1c>)
 800f754:	2300      	movs	r3, #0
 800f756:	4604      	mov	r4, r0
 800f758:	4608      	mov	r0, r1
 800f75a:	602b      	str	r3, [r5, #0]
 800f75c:	f7f6 fcc6 	bl	80060ec <_sbrk>
 800f760:	1c43      	adds	r3, r0, #1
 800f762:	d102      	bne.n	800f76a <_sbrk_r+0x1a>
 800f764:	682b      	ldr	r3, [r5, #0]
 800f766:	b103      	cbz	r3, 800f76a <_sbrk_r+0x1a>
 800f768:	6023      	str	r3, [r4, #0]
 800f76a:	bd38      	pop	{r3, r4, r5, pc}
 800f76c:	20001284 	.word	0x20001284

0800f770 <_write_r>:
 800f770:	b538      	push	{r3, r4, r5, lr}
 800f772:	4d07      	ldr	r5, [pc, #28]	@ (800f790 <_write_r+0x20>)
 800f774:	4604      	mov	r4, r0
 800f776:	4608      	mov	r0, r1
 800f778:	4611      	mov	r1, r2
 800f77a:	2200      	movs	r2, #0
 800f77c:	602a      	str	r2, [r5, #0]
 800f77e:	461a      	mov	r2, r3
 800f780:	f7f2 fef8 	bl	8002574 <_write>
 800f784:	1c43      	adds	r3, r0, #1
 800f786:	d102      	bne.n	800f78e <_write_r+0x1e>
 800f788:	682b      	ldr	r3, [r5, #0]
 800f78a:	b103      	cbz	r3, 800f78e <_write_r+0x1e>
 800f78c:	6023      	str	r3, [r4, #0]
 800f78e:	bd38      	pop	{r3, r4, r5, pc}
 800f790:	20001284 	.word	0x20001284

0800f794 <__errno>:
 800f794:	4b01      	ldr	r3, [pc, #4]	@ (800f79c <__errno+0x8>)
 800f796:	6818      	ldr	r0, [r3, #0]
 800f798:	4770      	bx	lr
 800f79a:	bf00      	nop
 800f79c:	2000002c 	.word	0x2000002c

0800f7a0 <__libc_init_array>:
 800f7a0:	b570      	push	{r4, r5, r6, lr}
 800f7a2:	4d0d      	ldr	r5, [pc, #52]	@ (800f7d8 <__libc_init_array+0x38>)
 800f7a4:	4c0d      	ldr	r4, [pc, #52]	@ (800f7dc <__libc_init_array+0x3c>)
 800f7a6:	1b64      	subs	r4, r4, r5
 800f7a8:	10a4      	asrs	r4, r4, #2
 800f7aa:	2600      	movs	r6, #0
 800f7ac:	42a6      	cmp	r6, r4
 800f7ae:	d109      	bne.n	800f7c4 <__libc_init_array+0x24>
 800f7b0:	4d0b      	ldr	r5, [pc, #44]	@ (800f7e0 <__libc_init_array+0x40>)
 800f7b2:	4c0c      	ldr	r4, [pc, #48]	@ (800f7e4 <__libc_init_array+0x44>)
 800f7b4:	f000 fe1a 	bl	80103ec <_init>
 800f7b8:	1b64      	subs	r4, r4, r5
 800f7ba:	10a4      	asrs	r4, r4, #2
 800f7bc:	2600      	movs	r6, #0
 800f7be:	42a6      	cmp	r6, r4
 800f7c0:	d105      	bne.n	800f7ce <__libc_init_array+0x2e>
 800f7c2:	bd70      	pop	{r4, r5, r6, pc}
 800f7c4:	f855 3b04 	ldr.w	r3, [r5], #4
 800f7c8:	4798      	blx	r3
 800f7ca:	3601      	adds	r6, #1
 800f7cc:	e7ee      	b.n	800f7ac <__libc_init_array+0xc>
 800f7ce:	f855 3b04 	ldr.w	r3, [r5], #4
 800f7d2:	4798      	blx	r3
 800f7d4:	3601      	adds	r6, #1
 800f7d6:	e7f2      	b.n	800f7be <__libc_init_array+0x1e>
 800f7d8:	08010d6c 	.word	0x08010d6c
 800f7dc:	08010d6c 	.word	0x08010d6c
 800f7e0:	08010d6c 	.word	0x08010d6c
 800f7e4:	08010d70 	.word	0x08010d70

0800f7e8 <__retarget_lock_init_recursive>:
 800f7e8:	4770      	bx	lr

0800f7ea <__retarget_lock_acquire_recursive>:
 800f7ea:	4770      	bx	lr

0800f7ec <__retarget_lock_release_recursive>:
 800f7ec:	4770      	bx	lr

0800f7ee <memcpy>:
 800f7ee:	440a      	add	r2, r1
 800f7f0:	4291      	cmp	r1, r2
 800f7f2:	f100 33ff 	add.w	r3, r0, #4294967295
 800f7f6:	d100      	bne.n	800f7fa <memcpy+0xc>
 800f7f8:	4770      	bx	lr
 800f7fa:	b510      	push	{r4, lr}
 800f7fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f800:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f804:	4291      	cmp	r1, r2
 800f806:	d1f9      	bne.n	800f7fc <memcpy+0xe>
 800f808:	bd10      	pop	{r4, pc}
	...

0800f80c <_free_r>:
 800f80c:	b538      	push	{r3, r4, r5, lr}
 800f80e:	4605      	mov	r5, r0
 800f810:	2900      	cmp	r1, #0
 800f812:	d041      	beq.n	800f898 <_free_r+0x8c>
 800f814:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f818:	1f0c      	subs	r4, r1, #4
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	bfb8      	it	lt
 800f81e:	18e4      	addlt	r4, r4, r3
 800f820:	f7ff fc54 	bl	800f0cc <__malloc_lock>
 800f824:	4a1d      	ldr	r2, [pc, #116]	@ (800f89c <_free_r+0x90>)
 800f826:	6813      	ldr	r3, [r2, #0]
 800f828:	b933      	cbnz	r3, 800f838 <_free_r+0x2c>
 800f82a:	6063      	str	r3, [r4, #4]
 800f82c:	6014      	str	r4, [r2, #0]
 800f82e:	4628      	mov	r0, r5
 800f830:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f834:	f7ff bc50 	b.w	800f0d8 <__malloc_unlock>
 800f838:	42a3      	cmp	r3, r4
 800f83a:	d908      	bls.n	800f84e <_free_r+0x42>
 800f83c:	6820      	ldr	r0, [r4, #0]
 800f83e:	1821      	adds	r1, r4, r0
 800f840:	428b      	cmp	r3, r1
 800f842:	bf01      	itttt	eq
 800f844:	6819      	ldreq	r1, [r3, #0]
 800f846:	685b      	ldreq	r3, [r3, #4]
 800f848:	1809      	addeq	r1, r1, r0
 800f84a:	6021      	streq	r1, [r4, #0]
 800f84c:	e7ed      	b.n	800f82a <_free_r+0x1e>
 800f84e:	461a      	mov	r2, r3
 800f850:	685b      	ldr	r3, [r3, #4]
 800f852:	b10b      	cbz	r3, 800f858 <_free_r+0x4c>
 800f854:	42a3      	cmp	r3, r4
 800f856:	d9fa      	bls.n	800f84e <_free_r+0x42>
 800f858:	6811      	ldr	r1, [r2, #0]
 800f85a:	1850      	adds	r0, r2, r1
 800f85c:	42a0      	cmp	r0, r4
 800f85e:	d10b      	bne.n	800f878 <_free_r+0x6c>
 800f860:	6820      	ldr	r0, [r4, #0]
 800f862:	4401      	add	r1, r0
 800f864:	1850      	adds	r0, r2, r1
 800f866:	4283      	cmp	r3, r0
 800f868:	6011      	str	r1, [r2, #0]
 800f86a:	d1e0      	bne.n	800f82e <_free_r+0x22>
 800f86c:	6818      	ldr	r0, [r3, #0]
 800f86e:	685b      	ldr	r3, [r3, #4]
 800f870:	6053      	str	r3, [r2, #4]
 800f872:	4408      	add	r0, r1
 800f874:	6010      	str	r0, [r2, #0]
 800f876:	e7da      	b.n	800f82e <_free_r+0x22>
 800f878:	d902      	bls.n	800f880 <_free_r+0x74>
 800f87a:	230c      	movs	r3, #12
 800f87c:	602b      	str	r3, [r5, #0]
 800f87e:	e7d6      	b.n	800f82e <_free_r+0x22>
 800f880:	6820      	ldr	r0, [r4, #0]
 800f882:	1821      	adds	r1, r4, r0
 800f884:	428b      	cmp	r3, r1
 800f886:	bf04      	itt	eq
 800f888:	6819      	ldreq	r1, [r3, #0]
 800f88a:	685b      	ldreq	r3, [r3, #4]
 800f88c:	6063      	str	r3, [r4, #4]
 800f88e:	bf04      	itt	eq
 800f890:	1809      	addeq	r1, r1, r0
 800f892:	6021      	streq	r1, [r4, #0]
 800f894:	6054      	str	r4, [r2, #4]
 800f896:	e7ca      	b.n	800f82e <_free_r+0x22>
 800f898:	bd38      	pop	{r3, r4, r5, pc}
 800f89a:	bf00      	nop
 800f89c:	20001144 	.word	0x20001144

0800f8a0 <__ssputs_r>:
 800f8a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f8a4:	688e      	ldr	r6, [r1, #8]
 800f8a6:	461f      	mov	r7, r3
 800f8a8:	42be      	cmp	r6, r7
 800f8aa:	680b      	ldr	r3, [r1, #0]
 800f8ac:	4682      	mov	sl, r0
 800f8ae:	460c      	mov	r4, r1
 800f8b0:	4690      	mov	r8, r2
 800f8b2:	d82d      	bhi.n	800f910 <__ssputs_r+0x70>
 800f8b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f8b8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800f8bc:	d026      	beq.n	800f90c <__ssputs_r+0x6c>
 800f8be:	6965      	ldr	r5, [r4, #20]
 800f8c0:	6909      	ldr	r1, [r1, #16]
 800f8c2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f8c6:	eba3 0901 	sub.w	r9, r3, r1
 800f8ca:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f8ce:	1c7b      	adds	r3, r7, #1
 800f8d0:	444b      	add	r3, r9
 800f8d2:	106d      	asrs	r5, r5, #1
 800f8d4:	429d      	cmp	r5, r3
 800f8d6:	bf38      	it	cc
 800f8d8:	461d      	movcc	r5, r3
 800f8da:	0553      	lsls	r3, r2, #21
 800f8dc:	d527      	bpl.n	800f92e <__ssputs_r+0x8e>
 800f8de:	4629      	mov	r1, r5
 800f8e0:	f7ff fb74 	bl	800efcc <_malloc_r>
 800f8e4:	4606      	mov	r6, r0
 800f8e6:	b360      	cbz	r0, 800f942 <__ssputs_r+0xa2>
 800f8e8:	6921      	ldr	r1, [r4, #16]
 800f8ea:	464a      	mov	r2, r9
 800f8ec:	f7ff ff7f 	bl	800f7ee <memcpy>
 800f8f0:	89a3      	ldrh	r3, [r4, #12]
 800f8f2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800f8f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f8fa:	81a3      	strh	r3, [r4, #12]
 800f8fc:	6126      	str	r6, [r4, #16]
 800f8fe:	6165      	str	r5, [r4, #20]
 800f900:	444e      	add	r6, r9
 800f902:	eba5 0509 	sub.w	r5, r5, r9
 800f906:	6026      	str	r6, [r4, #0]
 800f908:	60a5      	str	r5, [r4, #8]
 800f90a:	463e      	mov	r6, r7
 800f90c:	42be      	cmp	r6, r7
 800f90e:	d900      	bls.n	800f912 <__ssputs_r+0x72>
 800f910:	463e      	mov	r6, r7
 800f912:	6820      	ldr	r0, [r4, #0]
 800f914:	4632      	mov	r2, r6
 800f916:	4641      	mov	r1, r8
 800f918:	f000 fcf6 	bl	8010308 <memmove>
 800f91c:	68a3      	ldr	r3, [r4, #8]
 800f91e:	1b9b      	subs	r3, r3, r6
 800f920:	60a3      	str	r3, [r4, #8]
 800f922:	6823      	ldr	r3, [r4, #0]
 800f924:	4433      	add	r3, r6
 800f926:	6023      	str	r3, [r4, #0]
 800f928:	2000      	movs	r0, #0
 800f92a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f92e:	462a      	mov	r2, r5
 800f930:	f000 fd26 	bl	8010380 <_realloc_r>
 800f934:	4606      	mov	r6, r0
 800f936:	2800      	cmp	r0, #0
 800f938:	d1e0      	bne.n	800f8fc <__ssputs_r+0x5c>
 800f93a:	6921      	ldr	r1, [r4, #16]
 800f93c:	4650      	mov	r0, sl
 800f93e:	f7ff ff65 	bl	800f80c <_free_r>
 800f942:	230c      	movs	r3, #12
 800f944:	f8ca 3000 	str.w	r3, [sl]
 800f948:	89a3      	ldrh	r3, [r4, #12]
 800f94a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f94e:	81a3      	strh	r3, [r4, #12]
 800f950:	f04f 30ff 	mov.w	r0, #4294967295
 800f954:	e7e9      	b.n	800f92a <__ssputs_r+0x8a>
	...

0800f958 <_svfiprintf_r>:
 800f958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f95c:	4698      	mov	r8, r3
 800f95e:	898b      	ldrh	r3, [r1, #12]
 800f960:	061b      	lsls	r3, r3, #24
 800f962:	b09d      	sub	sp, #116	@ 0x74
 800f964:	4607      	mov	r7, r0
 800f966:	460d      	mov	r5, r1
 800f968:	4614      	mov	r4, r2
 800f96a:	d510      	bpl.n	800f98e <_svfiprintf_r+0x36>
 800f96c:	690b      	ldr	r3, [r1, #16]
 800f96e:	b973      	cbnz	r3, 800f98e <_svfiprintf_r+0x36>
 800f970:	2140      	movs	r1, #64	@ 0x40
 800f972:	f7ff fb2b 	bl	800efcc <_malloc_r>
 800f976:	6028      	str	r0, [r5, #0]
 800f978:	6128      	str	r0, [r5, #16]
 800f97a:	b930      	cbnz	r0, 800f98a <_svfiprintf_r+0x32>
 800f97c:	230c      	movs	r3, #12
 800f97e:	603b      	str	r3, [r7, #0]
 800f980:	f04f 30ff 	mov.w	r0, #4294967295
 800f984:	b01d      	add	sp, #116	@ 0x74
 800f986:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f98a:	2340      	movs	r3, #64	@ 0x40
 800f98c:	616b      	str	r3, [r5, #20]
 800f98e:	2300      	movs	r3, #0
 800f990:	9309      	str	r3, [sp, #36]	@ 0x24
 800f992:	2320      	movs	r3, #32
 800f994:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f998:	f8cd 800c 	str.w	r8, [sp, #12]
 800f99c:	2330      	movs	r3, #48	@ 0x30
 800f99e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800fb3c <_svfiprintf_r+0x1e4>
 800f9a2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f9a6:	f04f 0901 	mov.w	r9, #1
 800f9aa:	4623      	mov	r3, r4
 800f9ac:	469a      	mov	sl, r3
 800f9ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f9b2:	b10a      	cbz	r2, 800f9b8 <_svfiprintf_r+0x60>
 800f9b4:	2a25      	cmp	r2, #37	@ 0x25
 800f9b6:	d1f9      	bne.n	800f9ac <_svfiprintf_r+0x54>
 800f9b8:	ebba 0b04 	subs.w	fp, sl, r4
 800f9bc:	d00b      	beq.n	800f9d6 <_svfiprintf_r+0x7e>
 800f9be:	465b      	mov	r3, fp
 800f9c0:	4622      	mov	r2, r4
 800f9c2:	4629      	mov	r1, r5
 800f9c4:	4638      	mov	r0, r7
 800f9c6:	f7ff ff6b 	bl	800f8a0 <__ssputs_r>
 800f9ca:	3001      	adds	r0, #1
 800f9cc:	f000 80a7 	beq.w	800fb1e <_svfiprintf_r+0x1c6>
 800f9d0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f9d2:	445a      	add	r2, fp
 800f9d4:	9209      	str	r2, [sp, #36]	@ 0x24
 800f9d6:	f89a 3000 	ldrb.w	r3, [sl]
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	f000 809f 	beq.w	800fb1e <_svfiprintf_r+0x1c6>
 800f9e0:	2300      	movs	r3, #0
 800f9e2:	f04f 32ff 	mov.w	r2, #4294967295
 800f9e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f9ea:	f10a 0a01 	add.w	sl, sl, #1
 800f9ee:	9304      	str	r3, [sp, #16]
 800f9f0:	9307      	str	r3, [sp, #28]
 800f9f2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f9f6:	931a      	str	r3, [sp, #104]	@ 0x68
 800f9f8:	4654      	mov	r4, sl
 800f9fa:	2205      	movs	r2, #5
 800f9fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fa00:	484e      	ldr	r0, [pc, #312]	@ (800fb3c <_svfiprintf_r+0x1e4>)
 800fa02:	f7f0 fbe5 	bl	80001d0 <memchr>
 800fa06:	9a04      	ldr	r2, [sp, #16]
 800fa08:	b9d8      	cbnz	r0, 800fa42 <_svfiprintf_r+0xea>
 800fa0a:	06d0      	lsls	r0, r2, #27
 800fa0c:	bf44      	itt	mi
 800fa0e:	2320      	movmi	r3, #32
 800fa10:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fa14:	0711      	lsls	r1, r2, #28
 800fa16:	bf44      	itt	mi
 800fa18:	232b      	movmi	r3, #43	@ 0x2b
 800fa1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fa1e:	f89a 3000 	ldrb.w	r3, [sl]
 800fa22:	2b2a      	cmp	r3, #42	@ 0x2a
 800fa24:	d015      	beq.n	800fa52 <_svfiprintf_r+0xfa>
 800fa26:	9a07      	ldr	r2, [sp, #28]
 800fa28:	4654      	mov	r4, sl
 800fa2a:	2000      	movs	r0, #0
 800fa2c:	f04f 0c0a 	mov.w	ip, #10
 800fa30:	4621      	mov	r1, r4
 800fa32:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fa36:	3b30      	subs	r3, #48	@ 0x30
 800fa38:	2b09      	cmp	r3, #9
 800fa3a:	d94b      	bls.n	800fad4 <_svfiprintf_r+0x17c>
 800fa3c:	b1b0      	cbz	r0, 800fa6c <_svfiprintf_r+0x114>
 800fa3e:	9207      	str	r2, [sp, #28]
 800fa40:	e014      	b.n	800fa6c <_svfiprintf_r+0x114>
 800fa42:	eba0 0308 	sub.w	r3, r0, r8
 800fa46:	fa09 f303 	lsl.w	r3, r9, r3
 800fa4a:	4313      	orrs	r3, r2
 800fa4c:	9304      	str	r3, [sp, #16]
 800fa4e:	46a2      	mov	sl, r4
 800fa50:	e7d2      	b.n	800f9f8 <_svfiprintf_r+0xa0>
 800fa52:	9b03      	ldr	r3, [sp, #12]
 800fa54:	1d19      	adds	r1, r3, #4
 800fa56:	681b      	ldr	r3, [r3, #0]
 800fa58:	9103      	str	r1, [sp, #12]
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	bfbb      	ittet	lt
 800fa5e:	425b      	neglt	r3, r3
 800fa60:	f042 0202 	orrlt.w	r2, r2, #2
 800fa64:	9307      	strge	r3, [sp, #28]
 800fa66:	9307      	strlt	r3, [sp, #28]
 800fa68:	bfb8      	it	lt
 800fa6a:	9204      	strlt	r2, [sp, #16]
 800fa6c:	7823      	ldrb	r3, [r4, #0]
 800fa6e:	2b2e      	cmp	r3, #46	@ 0x2e
 800fa70:	d10a      	bne.n	800fa88 <_svfiprintf_r+0x130>
 800fa72:	7863      	ldrb	r3, [r4, #1]
 800fa74:	2b2a      	cmp	r3, #42	@ 0x2a
 800fa76:	d132      	bne.n	800fade <_svfiprintf_r+0x186>
 800fa78:	9b03      	ldr	r3, [sp, #12]
 800fa7a:	1d1a      	adds	r2, r3, #4
 800fa7c:	681b      	ldr	r3, [r3, #0]
 800fa7e:	9203      	str	r2, [sp, #12]
 800fa80:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800fa84:	3402      	adds	r4, #2
 800fa86:	9305      	str	r3, [sp, #20]
 800fa88:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800fb4c <_svfiprintf_r+0x1f4>
 800fa8c:	7821      	ldrb	r1, [r4, #0]
 800fa8e:	2203      	movs	r2, #3
 800fa90:	4650      	mov	r0, sl
 800fa92:	f7f0 fb9d 	bl	80001d0 <memchr>
 800fa96:	b138      	cbz	r0, 800faa8 <_svfiprintf_r+0x150>
 800fa98:	9b04      	ldr	r3, [sp, #16]
 800fa9a:	eba0 000a 	sub.w	r0, r0, sl
 800fa9e:	2240      	movs	r2, #64	@ 0x40
 800faa0:	4082      	lsls	r2, r0
 800faa2:	4313      	orrs	r3, r2
 800faa4:	3401      	adds	r4, #1
 800faa6:	9304      	str	r3, [sp, #16]
 800faa8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800faac:	4824      	ldr	r0, [pc, #144]	@ (800fb40 <_svfiprintf_r+0x1e8>)
 800faae:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800fab2:	2206      	movs	r2, #6
 800fab4:	f7f0 fb8c 	bl	80001d0 <memchr>
 800fab8:	2800      	cmp	r0, #0
 800faba:	d036      	beq.n	800fb2a <_svfiprintf_r+0x1d2>
 800fabc:	4b21      	ldr	r3, [pc, #132]	@ (800fb44 <_svfiprintf_r+0x1ec>)
 800fabe:	bb1b      	cbnz	r3, 800fb08 <_svfiprintf_r+0x1b0>
 800fac0:	9b03      	ldr	r3, [sp, #12]
 800fac2:	3307      	adds	r3, #7
 800fac4:	f023 0307 	bic.w	r3, r3, #7
 800fac8:	3308      	adds	r3, #8
 800faca:	9303      	str	r3, [sp, #12]
 800facc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800face:	4433      	add	r3, r6
 800fad0:	9309      	str	r3, [sp, #36]	@ 0x24
 800fad2:	e76a      	b.n	800f9aa <_svfiprintf_r+0x52>
 800fad4:	fb0c 3202 	mla	r2, ip, r2, r3
 800fad8:	460c      	mov	r4, r1
 800fada:	2001      	movs	r0, #1
 800fadc:	e7a8      	b.n	800fa30 <_svfiprintf_r+0xd8>
 800fade:	2300      	movs	r3, #0
 800fae0:	3401      	adds	r4, #1
 800fae2:	9305      	str	r3, [sp, #20]
 800fae4:	4619      	mov	r1, r3
 800fae6:	f04f 0c0a 	mov.w	ip, #10
 800faea:	4620      	mov	r0, r4
 800faec:	f810 2b01 	ldrb.w	r2, [r0], #1
 800faf0:	3a30      	subs	r2, #48	@ 0x30
 800faf2:	2a09      	cmp	r2, #9
 800faf4:	d903      	bls.n	800fafe <_svfiprintf_r+0x1a6>
 800faf6:	2b00      	cmp	r3, #0
 800faf8:	d0c6      	beq.n	800fa88 <_svfiprintf_r+0x130>
 800fafa:	9105      	str	r1, [sp, #20]
 800fafc:	e7c4      	b.n	800fa88 <_svfiprintf_r+0x130>
 800fafe:	fb0c 2101 	mla	r1, ip, r1, r2
 800fb02:	4604      	mov	r4, r0
 800fb04:	2301      	movs	r3, #1
 800fb06:	e7f0      	b.n	800faea <_svfiprintf_r+0x192>
 800fb08:	ab03      	add	r3, sp, #12
 800fb0a:	9300      	str	r3, [sp, #0]
 800fb0c:	462a      	mov	r2, r5
 800fb0e:	4b0e      	ldr	r3, [pc, #56]	@ (800fb48 <_svfiprintf_r+0x1f0>)
 800fb10:	a904      	add	r1, sp, #16
 800fb12:	4638      	mov	r0, r7
 800fb14:	f3af 8000 	nop.w
 800fb18:	1c42      	adds	r2, r0, #1
 800fb1a:	4606      	mov	r6, r0
 800fb1c:	d1d6      	bne.n	800facc <_svfiprintf_r+0x174>
 800fb1e:	89ab      	ldrh	r3, [r5, #12]
 800fb20:	065b      	lsls	r3, r3, #25
 800fb22:	f53f af2d 	bmi.w	800f980 <_svfiprintf_r+0x28>
 800fb26:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fb28:	e72c      	b.n	800f984 <_svfiprintf_r+0x2c>
 800fb2a:	ab03      	add	r3, sp, #12
 800fb2c:	9300      	str	r3, [sp, #0]
 800fb2e:	462a      	mov	r2, r5
 800fb30:	4b05      	ldr	r3, [pc, #20]	@ (800fb48 <_svfiprintf_r+0x1f0>)
 800fb32:	a904      	add	r1, sp, #16
 800fb34:	4638      	mov	r0, r7
 800fb36:	f000 f9bb 	bl	800feb0 <_printf_i>
 800fb3a:	e7ed      	b.n	800fb18 <_svfiprintf_r+0x1c0>
 800fb3c:	08010d30 	.word	0x08010d30
 800fb40:	08010d3a 	.word	0x08010d3a
 800fb44:	00000000 	.word	0x00000000
 800fb48:	0800f8a1 	.word	0x0800f8a1
 800fb4c:	08010d36 	.word	0x08010d36

0800fb50 <__sfputc_r>:
 800fb50:	6893      	ldr	r3, [r2, #8]
 800fb52:	3b01      	subs	r3, #1
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	b410      	push	{r4}
 800fb58:	6093      	str	r3, [r2, #8]
 800fb5a:	da08      	bge.n	800fb6e <__sfputc_r+0x1e>
 800fb5c:	6994      	ldr	r4, [r2, #24]
 800fb5e:	42a3      	cmp	r3, r4
 800fb60:	db01      	blt.n	800fb66 <__sfputc_r+0x16>
 800fb62:	290a      	cmp	r1, #10
 800fb64:	d103      	bne.n	800fb6e <__sfputc_r+0x1e>
 800fb66:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fb6a:	f7ff bd21 	b.w	800f5b0 <__swbuf_r>
 800fb6e:	6813      	ldr	r3, [r2, #0]
 800fb70:	1c58      	adds	r0, r3, #1
 800fb72:	6010      	str	r0, [r2, #0]
 800fb74:	7019      	strb	r1, [r3, #0]
 800fb76:	4608      	mov	r0, r1
 800fb78:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fb7c:	4770      	bx	lr

0800fb7e <__sfputs_r>:
 800fb7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb80:	4606      	mov	r6, r0
 800fb82:	460f      	mov	r7, r1
 800fb84:	4614      	mov	r4, r2
 800fb86:	18d5      	adds	r5, r2, r3
 800fb88:	42ac      	cmp	r4, r5
 800fb8a:	d101      	bne.n	800fb90 <__sfputs_r+0x12>
 800fb8c:	2000      	movs	r0, #0
 800fb8e:	e007      	b.n	800fba0 <__sfputs_r+0x22>
 800fb90:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fb94:	463a      	mov	r2, r7
 800fb96:	4630      	mov	r0, r6
 800fb98:	f7ff ffda 	bl	800fb50 <__sfputc_r>
 800fb9c:	1c43      	adds	r3, r0, #1
 800fb9e:	d1f3      	bne.n	800fb88 <__sfputs_r+0xa>
 800fba0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800fba4 <_vfiprintf_r>:
 800fba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fba8:	460d      	mov	r5, r1
 800fbaa:	b09d      	sub	sp, #116	@ 0x74
 800fbac:	4614      	mov	r4, r2
 800fbae:	4698      	mov	r8, r3
 800fbb0:	4606      	mov	r6, r0
 800fbb2:	b118      	cbz	r0, 800fbbc <_vfiprintf_r+0x18>
 800fbb4:	6a03      	ldr	r3, [r0, #32]
 800fbb6:	b90b      	cbnz	r3, 800fbbc <_vfiprintf_r+0x18>
 800fbb8:	f7ff fb20 	bl	800f1fc <__sinit>
 800fbbc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fbbe:	07d9      	lsls	r1, r3, #31
 800fbc0:	d405      	bmi.n	800fbce <_vfiprintf_r+0x2a>
 800fbc2:	89ab      	ldrh	r3, [r5, #12]
 800fbc4:	059a      	lsls	r2, r3, #22
 800fbc6:	d402      	bmi.n	800fbce <_vfiprintf_r+0x2a>
 800fbc8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fbca:	f7ff fe0e 	bl	800f7ea <__retarget_lock_acquire_recursive>
 800fbce:	89ab      	ldrh	r3, [r5, #12]
 800fbd0:	071b      	lsls	r3, r3, #28
 800fbd2:	d501      	bpl.n	800fbd8 <_vfiprintf_r+0x34>
 800fbd4:	692b      	ldr	r3, [r5, #16]
 800fbd6:	b99b      	cbnz	r3, 800fc00 <_vfiprintf_r+0x5c>
 800fbd8:	4629      	mov	r1, r5
 800fbda:	4630      	mov	r0, r6
 800fbdc:	f7ff fd26 	bl	800f62c <__swsetup_r>
 800fbe0:	b170      	cbz	r0, 800fc00 <_vfiprintf_r+0x5c>
 800fbe2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fbe4:	07dc      	lsls	r4, r3, #31
 800fbe6:	d504      	bpl.n	800fbf2 <_vfiprintf_r+0x4e>
 800fbe8:	f04f 30ff 	mov.w	r0, #4294967295
 800fbec:	b01d      	add	sp, #116	@ 0x74
 800fbee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fbf2:	89ab      	ldrh	r3, [r5, #12]
 800fbf4:	0598      	lsls	r0, r3, #22
 800fbf6:	d4f7      	bmi.n	800fbe8 <_vfiprintf_r+0x44>
 800fbf8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fbfa:	f7ff fdf7 	bl	800f7ec <__retarget_lock_release_recursive>
 800fbfe:	e7f3      	b.n	800fbe8 <_vfiprintf_r+0x44>
 800fc00:	2300      	movs	r3, #0
 800fc02:	9309      	str	r3, [sp, #36]	@ 0x24
 800fc04:	2320      	movs	r3, #32
 800fc06:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800fc0a:	f8cd 800c 	str.w	r8, [sp, #12]
 800fc0e:	2330      	movs	r3, #48	@ 0x30
 800fc10:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800fdc0 <_vfiprintf_r+0x21c>
 800fc14:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800fc18:	f04f 0901 	mov.w	r9, #1
 800fc1c:	4623      	mov	r3, r4
 800fc1e:	469a      	mov	sl, r3
 800fc20:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fc24:	b10a      	cbz	r2, 800fc2a <_vfiprintf_r+0x86>
 800fc26:	2a25      	cmp	r2, #37	@ 0x25
 800fc28:	d1f9      	bne.n	800fc1e <_vfiprintf_r+0x7a>
 800fc2a:	ebba 0b04 	subs.w	fp, sl, r4
 800fc2e:	d00b      	beq.n	800fc48 <_vfiprintf_r+0xa4>
 800fc30:	465b      	mov	r3, fp
 800fc32:	4622      	mov	r2, r4
 800fc34:	4629      	mov	r1, r5
 800fc36:	4630      	mov	r0, r6
 800fc38:	f7ff ffa1 	bl	800fb7e <__sfputs_r>
 800fc3c:	3001      	adds	r0, #1
 800fc3e:	f000 80a7 	beq.w	800fd90 <_vfiprintf_r+0x1ec>
 800fc42:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fc44:	445a      	add	r2, fp
 800fc46:	9209      	str	r2, [sp, #36]	@ 0x24
 800fc48:	f89a 3000 	ldrb.w	r3, [sl]
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	f000 809f 	beq.w	800fd90 <_vfiprintf_r+0x1ec>
 800fc52:	2300      	movs	r3, #0
 800fc54:	f04f 32ff 	mov.w	r2, #4294967295
 800fc58:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fc5c:	f10a 0a01 	add.w	sl, sl, #1
 800fc60:	9304      	str	r3, [sp, #16]
 800fc62:	9307      	str	r3, [sp, #28]
 800fc64:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800fc68:	931a      	str	r3, [sp, #104]	@ 0x68
 800fc6a:	4654      	mov	r4, sl
 800fc6c:	2205      	movs	r2, #5
 800fc6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fc72:	4853      	ldr	r0, [pc, #332]	@ (800fdc0 <_vfiprintf_r+0x21c>)
 800fc74:	f7f0 faac 	bl	80001d0 <memchr>
 800fc78:	9a04      	ldr	r2, [sp, #16]
 800fc7a:	b9d8      	cbnz	r0, 800fcb4 <_vfiprintf_r+0x110>
 800fc7c:	06d1      	lsls	r1, r2, #27
 800fc7e:	bf44      	itt	mi
 800fc80:	2320      	movmi	r3, #32
 800fc82:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fc86:	0713      	lsls	r3, r2, #28
 800fc88:	bf44      	itt	mi
 800fc8a:	232b      	movmi	r3, #43	@ 0x2b
 800fc8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fc90:	f89a 3000 	ldrb.w	r3, [sl]
 800fc94:	2b2a      	cmp	r3, #42	@ 0x2a
 800fc96:	d015      	beq.n	800fcc4 <_vfiprintf_r+0x120>
 800fc98:	9a07      	ldr	r2, [sp, #28]
 800fc9a:	4654      	mov	r4, sl
 800fc9c:	2000      	movs	r0, #0
 800fc9e:	f04f 0c0a 	mov.w	ip, #10
 800fca2:	4621      	mov	r1, r4
 800fca4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fca8:	3b30      	subs	r3, #48	@ 0x30
 800fcaa:	2b09      	cmp	r3, #9
 800fcac:	d94b      	bls.n	800fd46 <_vfiprintf_r+0x1a2>
 800fcae:	b1b0      	cbz	r0, 800fcde <_vfiprintf_r+0x13a>
 800fcb0:	9207      	str	r2, [sp, #28]
 800fcb2:	e014      	b.n	800fcde <_vfiprintf_r+0x13a>
 800fcb4:	eba0 0308 	sub.w	r3, r0, r8
 800fcb8:	fa09 f303 	lsl.w	r3, r9, r3
 800fcbc:	4313      	orrs	r3, r2
 800fcbe:	9304      	str	r3, [sp, #16]
 800fcc0:	46a2      	mov	sl, r4
 800fcc2:	e7d2      	b.n	800fc6a <_vfiprintf_r+0xc6>
 800fcc4:	9b03      	ldr	r3, [sp, #12]
 800fcc6:	1d19      	adds	r1, r3, #4
 800fcc8:	681b      	ldr	r3, [r3, #0]
 800fcca:	9103      	str	r1, [sp, #12]
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	bfbb      	ittet	lt
 800fcd0:	425b      	neglt	r3, r3
 800fcd2:	f042 0202 	orrlt.w	r2, r2, #2
 800fcd6:	9307      	strge	r3, [sp, #28]
 800fcd8:	9307      	strlt	r3, [sp, #28]
 800fcda:	bfb8      	it	lt
 800fcdc:	9204      	strlt	r2, [sp, #16]
 800fcde:	7823      	ldrb	r3, [r4, #0]
 800fce0:	2b2e      	cmp	r3, #46	@ 0x2e
 800fce2:	d10a      	bne.n	800fcfa <_vfiprintf_r+0x156>
 800fce4:	7863      	ldrb	r3, [r4, #1]
 800fce6:	2b2a      	cmp	r3, #42	@ 0x2a
 800fce8:	d132      	bne.n	800fd50 <_vfiprintf_r+0x1ac>
 800fcea:	9b03      	ldr	r3, [sp, #12]
 800fcec:	1d1a      	adds	r2, r3, #4
 800fcee:	681b      	ldr	r3, [r3, #0]
 800fcf0:	9203      	str	r2, [sp, #12]
 800fcf2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800fcf6:	3402      	adds	r4, #2
 800fcf8:	9305      	str	r3, [sp, #20]
 800fcfa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800fdd0 <_vfiprintf_r+0x22c>
 800fcfe:	7821      	ldrb	r1, [r4, #0]
 800fd00:	2203      	movs	r2, #3
 800fd02:	4650      	mov	r0, sl
 800fd04:	f7f0 fa64 	bl	80001d0 <memchr>
 800fd08:	b138      	cbz	r0, 800fd1a <_vfiprintf_r+0x176>
 800fd0a:	9b04      	ldr	r3, [sp, #16]
 800fd0c:	eba0 000a 	sub.w	r0, r0, sl
 800fd10:	2240      	movs	r2, #64	@ 0x40
 800fd12:	4082      	lsls	r2, r0
 800fd14:	4313      	orrs	r3, r2
 800fd16:	3401      	adds	r4, #1
 800fd18:	9304      	str	r3, [sp, #16]
 800fd1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fd1e:	4829      	ldr	r0, [pc, #164]	@ (800fdc4 <_vfiprintf_r+0x220>)
 800fd20:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800fd24:	2206      	movs	r2, #6
 800fd26:	f7f0 fa53 	bl	80001d0 <memchr>
 800fd2a:	2800      	cmp	r0, #0
 800fd2c:	d03f      	beq.n	800fdae <_vfiprintf_r+0x20a>
 800fd2e:	4b26      	ldr	r3, [pc, #152]	@ (800fdc8 <_vfiprintf_r+0x224>)
 800fd30:	bb1b      	cbnz	r3, 800fd7a <_vfiprintf_r+0x1d6>
 800fd32:	9b03      	ldr	r3, [sp, #12]
 800fd34:	3307      	adds	r3, #7
 800fd36:	f023 0307 	bic.w	r3, r3, #7
 800fd3a:	3308      	adds	r3, #8
 800fd3c:	9303      	str	r3, [sp, #12]
 800fd3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fd40:	443b      	add	r3, r7
 800fd42:	9309      	str	r3, [sp, #36]	@ 0x24
 800fd44:	e76a      	b.n	800fc1c <_vfiprintf_r+0x78>
 800fd46:	fb0c 3202 	mla	r2, ip, r2, r3
 800fd4a:	460c      	mov	r4, r1
 800fd4c:	2001      	movs	r0, #1
 800fd4e:	e7a8      	b.n	800fca2 <_vfiprintf_r+0xfe>
 800fd50:	2300      	movs	r3, #0
 800fd52:	3401      	adds	r4, #1
 800fd54:	9305      	str	r3, [sp, #20]
 800fd56:	4619      	mov	r1, r3
 800fd58:	f04f 0c0a 	mov.w	ip, #10
 800fd5c:	4620      	mov	r0, r4
 800fd5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fd62:	3a30      	subs	r2, #48	@ 0x30
 800fd64:	2a09      	cmp	r2, #9
 800fd66:	d903      	bls.n	800fd70 <_vfiprintf_r+0x1cc>
 800fd68:	2b00      	cmp	r3, #0
 800fd6a:	d0c6      	beq.n	800fcfa <_vfiprintf_r+0x156>
 800fd6c:	9105      	str	r1, [sp, #20]
 800fd6e:	e7c4      	b.n	800fcfa <_vfiprintf_r+0x156>
 800fd70:	fb0c 2101 	mla	r1, ip, r1, r2
 800fd74:	4604      	mov	r4, r0
 800fd76:	2301      	movs	r3, #1
 800fd78:	e7f0      	b.n	800fd5c <_vfiprintf_r+0x1b8>
 800fd7a:	ab03      	add	r3, sp, #12
 800fd7c:	9300      	str	r3, [sp, #0]
 800fd7e:	462a      	mov	r2, r5
 800fd80:	4b12      	ldr	r3, [pc, #72]	@ (800fdcc <_vfiprintf_r+0x228>)
 800fd82:	a904      	add	r1, sp, #16
 800fd84:	4630      	mov	r0, r6
 800fd86:	f3af 8000 	nop.w
 800fd8a:	4607      	mov	r7, r0
 800fd8c:	1c78      	adds	r0, r7, #1
 800fd8e:	d1d6      	bne.n	800fd3e <_vfiprintf_r+0x19a>
 800fd90:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fd92:	07d9      	lsls	r1, r3, #31
 800fd94:	d405      	bmi.n	800fda2 <_vfiprintf_r+0x1fe>
 800fd96:	89ab      	ldrh	r3, [r5, #12]
 800fd98:	059a      	lsls	r2, r3, #22
 800fd9a:	d402      	bmi.n	800fda2 <_vfiprintf_r+0x1fe>
 800fd9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fd9e:	f7ff fd25 	bl	800f7ec <__retarget_lock_release_recursive>
 800fda2:	89ab      	ldrh	r3, [r5, #12]
 800fda4:	065b      	lsls	r3, r3, #25
 800fda6:	f53f af1f 	bmi.w	800fbe8 <_vfiprintf_r+0x44>
 800fdaa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fdac:	e71e      	b.n	800fbec <_vfiprintf_r+0x48>
 800fdae:	ab03      	add	r3, sp, #12
 800fdb0:	9300      	str	r3, [sp, #0]
 800fdb2:	462a      	mov	r2, r5
 800fdb4:	4b05      	ldr	r3, [pc, #20]	@ (800fdcc <_vfiprintf_r+0x228>)
 800fdb6:	a904      	add	r1, sp, #16
 800fdb8:	4630      	mov	r0, r6
 800fdba:	f000 f879 	bl	800feb0 <_printf_i>
 800fdbe:	e7e4      	b.n	800fd8a <_vfiprintf_r+0x1e6>
 800fdc0:	08010d30 	.word	0x08010d30
 800fdc4:	08010d3a 	.word	0x08010d3a
 800fdc8:	00000000 	.word	0x00000000
 800fdcc:	0800fb7f 	.word	0x0800fb7f
 800fdd0:	08010d36 	.word	0x08010d36

0800fdd4 <_printf_common>:
 800fdd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fdd8:	4616      	mov	r6, r2
 800fdda:	4698      	mov	r8, r3
 800fddc:	688a      	ldr	r2, [r1, #8]
 800fdde:	690b      	ldr	r3, [r1, #16]
 800fde0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800fde4:	4293      	cmp	r3, r2
 800fde6:	bfb8      	it	lt
 800fde8:	4613      	movlt	r3, r2
 800fdea:	6033      	str	r3, [r6, #0]
 800fdec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800fdf0:	4607      	mov	r7, r0
 800fdf2:	460c      	mov	r4, r1
 800fdf4:	b10a      	cbz	r2, 800fdfa <_printf_common+0x26>
 800fdf6:	3301      	adds	r3, #1
 800fdf8:	6033      	str	r3, [r6, #0]
 800fdfa:	6823      	ldr	r3, [r4, #0]
 800fdfc:	0699      	lsls	r1, r3, #26
 800fdfe:	bf42      	ittt	mi
 800fe00:	6833      	ldrmi	r3, [r6, #0]
 800fe02:	3302      	addmi	r3, #2
 800fe04:	6033      	strmi	r3, [r6, #0]
 800fe06:	6825      	ldr	r5, [r4, #0]
 800fe08:	f015 0506 	ands.w	r5, r5, #6
 800fe0c:	d106      	bne.n	800fe1c <_printf_common+0x48>
 800fe0e:	f104 0a19 	add.w	sl, r4, #25
 800fe12:	68e3      	ldr	r3, [r4, #12]
 800fe14:	6832      	ldr	r2, [r6, #0]
 800fe16:	1a9b      	subs	r3, r3, r2
 800fe18:	42ab      	cmp	r3, r5
 800fe1a:	dc26      	bgt.n	800fe6a <_printf_common+0x96>
 800fe1c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800fe20:	6822      	ldr	r2, [r4, #0]
 800fe22:	3b00      	subs	r3, #0
 800fe24:	bf18      	it	ne
 800fe26:	2301      	movne	r3, #1
 800fe28:	0692      	lsls	r2, r2, #26
 800fe2a:	d42b      	bmi.n	800fe84 <_printf_common+0xb0>
 800fe2c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800fe30:	4641      	mov	r1, r8
 800fe32:	4638      	mov	r0, r7
 800fe34:	47c8      	blx	r9
 800fe36:	3001      	adds	r0, #1
 800fe38:	d01e      	beq.n	800fe78 <_printf_common+0xa4>
 800fe3a:	6823      	ldr	r3, [r4, #0]
 800fe3c:	6922      	ldr	r2, [r4, #16]
 800fe3e:	f003 0306 	and.w	r3, r3, #6
 800fe42:	2b04      	cmp	r3, #4
 800fe44:	bf02      	ittt	eq
 800fe46:	68e5      	ldreq	r5, [r4, #12]
 800fe48:	6833      	ldreq	r3, [r6, #0]
 800fe4a:	1aed      	subeq	r5, r5, r3
 800fe4c:	68a3      	ldr	r3, [r4, #8]
 800fe4e:	bf0c      	ite	eq
 800fe50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fe54:	2500      	movne	r5, #0
 800fe56:	4293      	cmp	r3, r2
 800fe58:	bfc4      	itt	gt
 800fe5a:	1a9b      	subgt	r3, r3, r2
 800fe5c:	18ed      	addgt	r5, r5, r3
 800fe5e:	2600      	movs	r6, #0
 800fe60:	341a      	adds	r4, #26
 800fe62:	42b5      	cmp	r5, r6
 800fe64:	d11a      	bne.n	800fe9c <_printf_common+0xc8>
 800fe66:	2000      	movs	r0, #0
 800fe68:	e008      	b.n	800fe7c <_printf_common+0xa8>
 800fe6a:	2301      	movs	r3, #1
 800fe6c:	4652      	mov	r2, sl
 800fe6e:	4641      	mov	r1, r8
 800fe70:	4638      	mov	r0, r7
 800fe72:	47c8      	blx	r9
 800fe74:	3001      	adds	r0, #1
 800fe76:	d103      	bne.n	800fe80 <_printf_common+0xac>
 800fe78:	f04f 30ff 	mov.w	r0, #4294967295
 800fe7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fe80:	3501      	adds	r5, #1
 800fe82:	e7c6      	b.n	800fe12 <_printf_common+0x3e>
 800fe84:	18e1      	adds	r1, r4, r3
 800fe86:	1c5a      	adds	r2, r3, #1
 800fe88:	2030      	movs	r0, #48	@ 0x30
 800fe8a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800fe8e:	4422      	add	r2, r4
 800fe90:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800fe94:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800fe98:	3302      	adds	r3, #2
 800fe9a:	e7c7      	b.n	800fe2c <_printf_common+0x58>
 800fe9c:	2301      	movs	r3, #1
 800fe9e:	4622      	mov	r2, r4
 800fea0:	4641      	mov	r1, r8
 800fea2:	4638      	mov	r0, r7
 800fea4:	47c8      	blx	r9
 800fea6:	3001      	adds	r0, #1
 800fea8:	d0e6      	beq.n	800fe78 <_printf_common+0xa4>
 800feaa:	3601      	adds	r6, #1
 800feac:	e7d9      	b.n	800fe62 <_printf_common+0x8e>
	...

0800feb0 <_printf_i>:
 800feb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800feb4:	7e0f      	ldrb	r7, [r1, #24]
 800feb6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800feb8:	2f78      	cmp	r7, #120	@ 0x78
 800feba:	4691      	mov	r9, r2
 800febc:	4680      	mov	r8, r0
 800febe:	460c      	mov	r4, r1
 800fec0:	469a      	mov	sl, r3
 800fec2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800fec6:	d807      	bhi.n	800fed8 <_printf_i+0x28>
 800fec8:	2f62      	cmp	r7, #98	@ 0x62
 800feca:	d80a      	bhi.n	800fee2 <_printf_i+0x32>
 800fecc:	2f00      	cmp	r7, #0
 800fece:	f000 80d1 	beq.w	8010074 <_printf_i+0x1c4>
 800fed2:	2f58      	cmp	r7, #88	@ 0x58
 800fed4:	f000 80b8 	beq.w	8010048 <_printf_i+0x198>
 800fed8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800fedc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800fee0:	e03a      	b.n	800ff58 <_printf_i+0xa8>
 800fee2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800fee6:	2b15      	cmp	r3, #21
 800fee8:	d8f6      	bhi.n	800fed8 <_printf_i+0x28>
 800feea:	a101      	add	r1, pc, #4	@ (adr r1, 800fef0 <_printf_i+0x40>)
 800feec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fef0:	0800ff49 	.word	0x0800ff49
 800fef4:	0800ff5d 	.word	0x0800ff5d
 800fef8:	0800fed9 	.word	0x0800fed9
 800fefc:	0800fed9 	.word	0x0800fed9
 800ff00:	0800fed9 	.word	0x0800fed9
 800ff04:	0800fed9 	.word	0x0800fed9
 800ff08:	0800ff5d 	.word	0x0800ff5d
 800ff0c:	0800fed9 	.word	0x0800fed9
 800ff10:	0800fed9 	.word	0x0800fed9
 800ff14:	0800fed9 	.word	0x0800fed9
 800ff18:	0800fed9 	.word	0x0800fed9
 800ff1c:	0801005b 	.word	0x0801005b
 800ff20:	0800ff87 	.word	0x0800ff87
 800ff24:	08010015 	.word	0x08010015
 800ff28:	0800fed9 	.word	0x0800fed9
 800ff2c:	0800fed9 	.word	0x0800fed9
 800ff30:	0801007d 	.word	0x0801007d
 800ff34:	0800fed9 	.word	0x0800fed9
 800ff38:	0800ff87 	.word	0x0800ff87
 800ff3c:	0800fed9 	.word	0x0800fed9
 800ff40:	0800fed9 	.word	0x0800fed9
 800ff44:	0801001d 	.word	0x0801001d
 800ff48:	6833      	ldr	r3, [r6, #0]
 800ff4a:	1d1a      	adds	r2, r3, #4
 800ff4c:	681b      	ldr	r3, [r3, #0]
 800ff4e:	6032      	str	r2, [r6, #0]
 800ff50:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ff54:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ff58:	2301      	movs	r3, #1
 800ff5a:	e09c      	b.n	8010096 <_printf_i+0x1e6>
 800ff5c:	6833      	ldr	r3, [r6, #0]
 800ff5e:	6820      	ldr	r0, [r4, #0]
 800ff60:	1d19      	adds	r1, r3, #4
 800ff62:	6031      	str	r1, [r6, #0]
 800ff64:	0606      	lsls	r6, r0, #24
 800ff66:	d501      	bpl.n	800ff6c <_printf_i+0xbc>
 800ff68:	681d      	ldr	r5, [r3, #0]
 800ff6a:	e003      	b.n	800ff74 <_printf_i+0xc4>
 800ff6c:	0645      	lsls	r5, r0, #25
 800ff6e:	d5fb      	bpl.n	800ff68 <_printf_i+0xb8>
 800ff70:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ff74:	2d00      	cmp	r5, #0
 800ff76:	da03      	bge.n	800ff80 <_printf_i+0xd0>
 800ff78:	232d      	movs	r3, #45	@ 0x2d
 800ff7a:	426d      	negs	r5, r5
 800ff7c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ff80:	4858      	ldr	r0, [pc, #352]	@ (80100e4 <_printf_i+0x234>)
 800ff82:	230a      	movs	r3, #10
 800ff84:	e011      	b.n	800ffaa <_printf_i+0xfa>
 800ff86:	6821      	ldr	r1, [r4, #0]
 800ff88:	6833      	ldr	r3, [r6, #0]
 800ff8a:	0608      	lsls	r0, r1, #24
 800ff8c:	f853 5b04 	ldr.w	r5, [r3], #4
 800ff90:	d402      	bmi.n	800ff98 <_printf_i+0xe8>
 800ff92:	0649      	lsls	r1, r1, #25
 800ff94:	bf48      	it	mi
 800ff96:	b2ad      	uxthmi	r5, r5
 800ff98:	2f6f      	cmp	r7, #111	@ 0x6f
 800ff9a:	4852      	ldr	r0, [pc, #328]	@ (80100e4 <_printf_i+0x234>)
 800ff9c:	6033      	str	r3, [r6, #0]
 800ff9e:	bf14      	ite	ne
 800ffa0:	230a      	movne	r3, #10
 800ffa2:	2308      	moveq	r3, #8
 800ffa4:	2100      	movs	r1, #0
 800ffa6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ffaa:	6866      	ldr	r6, [r4, #4]
 800ffac:	60a6      	str	r6, [r4, #8]
 800ffae:	2e00      	cmp	r6, #0
 800ffb0:	db05      	blt.n	800ffbe <_printf_i+0x10e>
 800ffb2:	6821      	ldr	r1, [r4, #0]
 800ffb4:	432e      	orrs	r6, r5
 800ffb6:	f021 0104 	bic.w	r1, r1, #4
 800ffba:	6021      	str	r1, [r4, #0]
 800ffbc:	d04b      	beq.n	8010056 <_printf_i+0x1a6>
 800ffbe:	4616      	mov	r6, r2
 800ffc0:	fbb5 f1f3 	udiv	r1, r5, r3
 800ffc4:	fb03 5711 	mls	r7, r3, r1, r5
 800ffc8:	5dc7      	ldrb	r7, [r0, r7]
 800ffca:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ffce:	462f      	mov	r7, r5
 800ffd0:	42bb      	cmp	r3, r7
 800ffd2:	460d      	mov	r5, r1
 800ffd4:	d9f4      	bls.n	800ffc0 <_printf_i+0x110>
 800ffd6:	2b08      	cmp	r3, #8
 800ffd8:	d10b      	bne.n	800fff2 <_printf_i+0x142>
 800ffda:	6823      	ldr	r3, [r4, #0]
 800ffdc:	07df      	lsls	r7, r3, #31
 800ffde:	d508      	bpl.n	800fff2 <_printf_i+0x142>
 800ffe0:	6923      	ldr	r3, [r4, #16]
 800ffe2:	6861      	ldr	r1, [r4, #4]
 800ffe4:	4299      	cmp	r1, r3
 800ffe6:	bfde      	ittt	le
 800ffe8:	2330      	movle	r3, #48	@ 0x30
 800ffea:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ffee:	f106 36ff 	addle.w	r6, r6, #4294967295
 800fff2:	1b92      	subs	r2, r2, r6
 800fff4:	6122      	str	r2, [r4, #16]
 800fff6:	f8cd a000 	str.w	sl, [sp]
 800fffa:	464b      	mov	r3, r9
 800fffc:	aa03      	add	r2, sp, #12
 800fffe:	4621      	mov	r1, r4
 8010000:	4640      	mov	r0, r8
 8010002:	f7ff fee7 	bl	800fdd4 <_printf_common>
 8010006:	3001      	adds	r0, #1
 8010008:	d14a      	bne.n	80100a0 <_printf_i+0x1f0>
 801000a:	f04f 30ff 	mov.w	r0, #4294967295
 801000e:	b004      	add	sp, #16
 8010010:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010014:	6823      	ldr	r3, [r4, #0]
 8010016:	f043 0320 	orr.w	r3, r3, #32
 801001a:	6023      	str	r3, [r4, #0]
 801001c:	4832      	ldr	r0, [pc, #200]	@ (80100e8 <_printf_i+0x238>)
 801001e:	2778      	movs	r7, #120	@ 0x78
 8010020:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8010024:	6823      	ldr	r3, [r4, #0]
 8010026:	6831      	ldr	r1, [r6, #0]
 8010028:	061f      	lsls	r7, r3, #24
 801002a:	f851 5b04 	ldr.w	r5, [r1], #4
 801002e:	d402      	bmi.n	8010036 <_printf_i+0x186>
 8010030:	065f      	lsls	r7, r3, #25
 8010032:	bf48      	it	mi
 8010034:	b2ad      	uxthmi	r5, r5
 8010036:	6031      	str	r1, [r6, #0]
 8010038:	07d9      	lsls	r1, r3, #31
 801003a:	bf44      	itt	mi
 801003c:	f043 0320 	orrmi.w	r3, r3, #32
 8010040:	6023      	strmi	r3, [r4, #0]
 8010042:	b11d      	cbz	r5, 801004c <_printf_i+0x19c>
 8010044:	2310      	movs	r3, #16
 8010046:	e7ad      	b.n	800ffa4 <_printf_i+0xf4>
 8010048:	4826      	ldr	r0, [pc, #152]	@ (80100e4 <_printf_i+0x234>)
 801004a:	e7e9      	b.n	8010020 <_printf_i+0x170>
 801004c:	6823      	ldr	r3, [r4, #0]
 801004e:	f023 0320 	bic.w	r3, r3, #32
 8010052:	6023      	str	r3, [r4, #0]
 8010054:	e7f6      	b.n	8010044 <_printf_i+0x194>
 8010056:	4616      	mov	r6, r2
 8010058:	e7bd      	b.n	800ffd6 <_printf_i+0x126>
 801005a:	6833      	ldr	r3, [r6, #0]
 801005c:	6825      	ldr	r5, [r4, #0]
 801005e:	6961      	ldr	r1, [r4, #20]
 8010060:	1d18      	adds	r0, r3, #4
 8010062:	6030      	str	r0, [r6, #0]
 8010064:	062e      	lsls	r6, r5, #24
 8010066:	681b      	ldr	r3, [r3, #0]
 8010068:	d501      	bpl.n	801006e <_printf_i+0x1be>
 801006a:	6019      	str	r1, [r3, #0]
 801006c:	e002      	b.n	8010074 <_printf_i+0x1c4>
 801006e:	0668      	lsls	r0, r5, #25
 8010070:	d5fb      	bpl.n	801006a <_printf_i+0x1ba>
 8010072:	8019      	strh	r1, [r3, #0]
 8010074:	2300      	movs	r3, #0
 8010076:	6123      	str	r3, [r4, #16]
 8010078:	4616      	mov	r6, r2
 801007a:	e7bc      	b.n	800fff6 <_printf_i+0x146>
 801007c:	6833      	ldr	r3, [r6, #0]
 801007e:	1d1a      	adds	r2, r3, #4
 8010080:	6032      	str	r2, [r6, #0]
 8010082:	681e      	ldr	r6, [r3, #0]
 8010084:	6862      	ldr	r2, [r4, #4]
 8010086:	2100      	movs	r1, #0
 8010088:	4630      	mov	r0, r6
 801008a:	f7f0 f8a1 	bl	80001d0 <memchr>
 801008e:	b108      	cbz	r0, 8010094 <_printf_i+0x1e4>
 8010090:	1b80      	subs	r0, r0, r6
 8010092:	6060      	str	r0, [r4, #4]
 8010094:	6863      	ldr	r3, [r4, #4]
 8010096:	6123      	str	r3, [r4, #16]
 8010098:	2300      	movs	r3, #0
 801009a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801009e:	e7aa      	b.n	800fff6 <_printf_i+0x146>
 80100a0:	6923      	ldr	r3, [r4, #16]
 80100a2:	4632      	mov	r2, r6
 80100a4:	4649      	mov	r1, r9
 80100a6:	4640      	mov	r0, r8
 80100a8:	47d0      	blx	sl
 80100aa:	3001      	adds	r0, #1
 80100ac:	d0ad      	beq.n	801000a <_printf_i+0x15a>
 80100ae:	6823      	ldr	r3, [r4, #0]
 80100b0:	079b      	lsls	r3, r3, #30
 80100b2:	d413      	bmi.n	80100dc <_printf_i+0x22c>
 80100b4:	68e0      	ldr	r0, [r4, #12]
 80100b6:	9b03      	ldr	r3, [sp, #12]
 80100b8:	4298      	cmp	r0, r3
 80100ba:	bfb8      	it	lt
 80100bc:	4618      	movlt	r0, r3
 80100be:	e7a6      	b.n	801000e <_printf_i+0x15e>
 80100c0:	2301      	movs	r3, #1
 80100c2:	4632      	mov	r2, r6
 80100c4:	4649      	mov	r1, r9
 80100c6:	4640      	mov	r0, r8
 80100c8:	47d0      	blx	sl
 80100ca:	3001      	adds	r0, #1
 80100cc:	d09d      	beq.n	801000a <_printf_i+0x15a>
 80100ce:	3501      	adds	r5, #1
 80100d0:	68e3      	ldr	r3, [r4, #12]
 80100d2:	9903      	ldr	r1, [sp, #12]
 80100d4:	1a5b      	subs	r3, r3, r1
 80100d6:	42ab      	cmp	r3, r5
 80100d8:	dcf2      	bgt.n	80100c0 <_printf_i+0x210>
 80100da:	e7eb      	b.n	80100b4 <_printf_i+0x204>
 80100dc:	2500      	movs	r5, #0
 80100de:	f104 0619 	add.w	r6, r4, #25
 80100e2:	e7f5      	b.n	80100d0 <_printf_i+0x220>
 80100e4:	08010d41 	.word	0x08010d41
 80100e8:	08010d52 	.word	0x08010d52

080100ec <__sflush_r>:
 80100ec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80100f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80100f4:	0716      	lsls	r6, r2, #28
 80100f6:	4605      	mov	r5, r0
 80100f8:	460c      	mov	r4, r1
 80100fa:	d454      	bmi.n	80101a6 <__sflush_r+0xba>
 80100fc:	684b      	ldr	r3, [r1, #4]
 80100fe:	2b00      	cmp	r3, #0
 8010100:	dc02      	bgt.n	8010108 <__sflush_r+0x1c>
 8010102:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8010104:	2b00      	cmp	r3, #0
 8010106:	dd48      	ble.n	801019a <__sflush_r+0xae>
 8010108:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801010a:	2e00      	cmp	r6, #0
 801010c:	d045      	beq.n	801019a <__sflush_r+0xae>
 801010e:	2300      	movs	r3, #0
 8010110:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8010114:	682f      	ldr	r7, [r5, #0]
 8010116:	6a21      	ldr	r1, [r4, #32]
 8010118:	602b      	str	r3, [r5, #0]
 801011a:	d030      	beq.n	801017e <__sflush_r+0x92>
 801011c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801011e:	89a3      	ldrh	r3, [r4, #12]
 8010120:	0759      	lsls	r1, r3, #29
 8010122:	d505      	bpl.n	8010130 <__sflush_r+0x44>
 8010124:	6863      	ldr	r3, [r4, #4]
 8010126:	1ad2      	subs	r2, r2, r3
 8010128:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801012a:	b10b      	cbz	r3, 8010130 <__sflush_r+0x44>
 801012c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801012e:	1ad2      	subs	r2, r2, r3
 8010130:	2300      	movs	r3, #0
 8010132:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010134:	6a21      	ldr	r1, [r4, #32]
 8010136:	4628      	mov	r0, r5
 8010138:	47b0      	blx	r6
 801013a:	1c43      	adds	r3, r0, #1
 801013c:	89a3      	ldrh	r3, [r4, #12]
 801013e:	d106      	bne.n	801014e <__sflush_r+0x62>
 8010140:	6829      	ldr	r1, [r5, #0]
 8010142:	291d      	cmp	r1, #29
 8010144:	d82b      	bhi.n	801019e <__sflush_r+0xb2>
 8010146:	4a2a      	ldr	r2, [pc, #168]	@ (80101f0 <__sflush_r+0x104>)
 8010148:	40ca      	lsrs	r2, r1
 801014a:	07d6      	lsls	r6, r2, #31
 801014c:	d527      	bpl.n	801019e <__sflush_r+0xb2>
 801014e:	2200      	movs	r2, #0
 8010150:	6062      	str	r2, [r4, #4]
 8010152:	04d9      	lsls	r1, r3, #19
 8010154:	6922      	ldr	r2, [r4, #16]
 8010156:	6022      	str	r2, [r4, #0]
 8010158:	d504      	bpl.n	8010164 <__sflush_r+0x78>
 801015a:	1c42      	adds	r2, r0, #1
 801015c:	d101      	bne.n	8010162 <__sflush_r+0x76>
 801015e:	682b      	ldr	r3, [r5, #0]
 8010160:	b903      	cbnz	r3, 8010164 <__sflush_r+0x78>
 8010162:	6560      	str	r0, [r4, #84]	@ 0x54
 8010164:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010166:	602f      	str	r7, [r5, #0]
 8010168:	b1b9      	cbz	r1, 801019a <__sflush_r+0xae>
 801016a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801016e:	4299      	cmp	r1, r3
 8010170:	d002      	beq.n	8010178 <__sflush_r+0x8c>
 8010172:	4628      	mov	r0, r5
 8010174:	f7ff fb4a 	bl	800f80c <_free_r>
 8010178:	2300      	movs	r3, #0
 801017a:	6363      	str	r3, [r4, #52]	@ 0x34
 801017c:	e00d      	b.n	801019a <__sflush_r+0xae>
 801017e:	2301      	movs	r3, #1
 8010180:	4628      	mov	r0, r5
 8010182:	47b0      	blx	r6
 8010184:	4602      	mov	r2, r0
 8010186:	1c50      	adds	r0, r2, #1
 8010188:	d1c9      	bne.n	801011e <__sflush_r+0x32>
 801018a:	682b      	ldr	r3, [r5, #0]
 801018c:	2b00      	cmp	r3, #0
 801018e:	d0c6      	beq.n	801011e <__sflush_r+0x32>
 8010190:	2b1d      	cmp	r3, #29
 8010192:	d001      	beq.n	8010198 <__sflush_r+0xac>
 8010194:	2b16      	cmp	r3, #22
 8010196:	d11e      	bne.n	80101d6 <__sflush_r+0xea>
 8010198:	602f      	str	r7, [r5, #0]
 801019a:	2000      	movs	r0, #0
 801019c:	e022      	b.n	80101e4 <__sflush_r+0xf8>
 801019e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80101a2:	b21b      	sxth	r3, r3
 80101a4:	e01b      	b.n	80101de <__sflush_r+0xf2>
 80101a6:	690f      	ldr	r7, [r1, #16]
 80101a8:	2f00      	cmp	r7, #0
 80101aa:	d0f6      	beq.n	801019a <__sflush_r+0xae>
 80101ac:	0793      	lsls	r3, r2, #30
 80101ae:	680e      	ldr	r6, [r1, #0]
 80101b0:	bf08      	it	eq
 80101b2:	694b      	ldreq	r3, [r1, #20]
 80101b4:	600f      	str	r7, [r1, #0]
 80101b6:	bf18      	it	ne
 80101b8:	2300      	movne	r3, #0
 80101ba:	eba6 0807 	sub.w	r8, r6, r7
 80101be:	608b      	str	r3, [r1, #8]
 80101c0:	f1b8 0f00 	cmp.w	r8, #0
 80101c4:	dde9      	ble.n	801019a <__sflush_r+0xae>
 80101c6:	6a21      	ldr	r1, [r4, #32]
 80101c8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80101ca:	4643      	mov	r3, r8
 80101cc:	463a      	mov	r2, r7
 80101ce:	4628      	mov	r0, r5
 80101d0:	47b0      	blx	r6
 80101d2:	2800      	cmp	r0, #0
 80101d4:	dc08      	bgt.n	80101e8 <__sflush_r+0xfc>
 80101d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80101da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80101de:	81a3      	strh	r3, [r4, #12]
 80101e0:	f04f 30ff 	mov.w	r0, #4294967295
 80101e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80101e8:	4407      	add	r7, r0
 80101ea:	eba8 0800 	sub.w	r8, r8, r0
 80101ee:	e7e7      	b.n	80101c0 <__sflush_r+0xd4>
 80101f0:	20400001 	.word	0x20400001

080101f4 <_fflush_r>:
 80101f4:	b538      	push	{r3, r4, r5, lr}
 80101f6:	690b      	ldr	r3, [r1, #16]
 80101f8:	4605      	mov	r5, r0
 80101fa:	460c      	mov	r4, r1
 80101fc:	b913      	cbnz	r3, 8010204 <_fflush_r+0x10>
 80101fe:	2500      	movs	r5, #0
 8010200:	4628      	mov	r0, r5
 8010202:	bd38      	pop	{r3, r4, r5, pc}
 8010204:	b118      	cbz	r0, 801020e <_fflush_r+0x1a>
 8010206:	6a03      	ldr	r3, [r0, #32]
 8010208:	b90b      	cbnz	r3, 801020e <_fflush_r+0x1a>
 801020a:	f7fe fff7 	bl	800f1fc <__sinit>
 801020e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010212:	2b00      	cmp	r3, #0
 8010214:	d0f3      	beq.n	80101fe <_fflush_r+0xa>
 8010216:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8010218:	07d0      	lsls	r0, r2, #31
 801021a:	d404      	bmi.n	8010226 <_fflush_r+0x32>
 801021c:	0599      	lsls	r1, r3, #22
 801021e:	d402      	bmi.n	8010226 <_fflush_r+0x32>
 8010220:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010222:	f7ff fae2 	bl	800f7ea <__retarget_lock_acquire_recursive>
 8010226:	4628      	mov	r0, r5
 8010228:	4621      	mov	r1, r4
 801022a:	f7ff ff5f 	bl	80100ec <__sflush_r>
 801022e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010230:	07da      	lsls	r2, r3, #31
 8010232:	4605      	mov	r5, r0
 8010234:	d4e4      	bmi.n	8010200 <_fflush_r+0xc>
 8010236:	89a3      	ldrh	r3, [r4, #12]
 8010238:	059b      	lsls	r3, r3, #22
 801023a:	d4e1      	bmi.n	8010200 <_fflush_r+0xc>
 801023c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801023e:	f7ff fad5 	bl	800f7ec <__retarget_lock_release_recursive>
 8010242:	e7dd      	b.n	8010200 <_fflush_r+0xc>

08010244 <__swhatbuf_r>:
 8010244:	b570      	push	{r4, r5, r6, lr}
 8010246:	460c      	mov	r4, r1
 8010248:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801024c:	2900      	cmp	r1, #0
 801024e:	b096      	sub	sp, #88	@ 0x58
 8010250:	4615      	mov	r5, r2
 8010252:	461e      	mov	r6, r3
 8010254:	da0d      	bge.n	8010272 <__swhatbuf_r+0x2e>
 8010256:	89a3      	ldrh	r3, [r4, #12]
 8010258:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801025c:	f04f 0100 	mov.w	r1, #0
 8010260:	bf14      	ite	ne
 8010262:	2340      	movne	r3, #64	@ 0x40
 8010264:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8010268:	2000      	movs	r0, #0
 801026a:	6031      	str	r1, [r6, #0]
 801026c:	602b      	str	r3, [r5, #0]
 801026e:	b016      	add	sp, #88	@ 0x58
 8010270:	bd70      	pop	{r4, r5, r6, pc}
 8010272:	466a      	mov	r2, sp
 8010274:	f000 f862 	bl	801033c <_fstat_r>
 8010278:	2800      	cmp	r0, #0
 801027a:	dbec      	blt.n	8010256 <__swhatbuf_r+0x12>
 801027c:	9901      	ldr	r1, [sp, #4]
 801027e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8010282:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8010286:	4259      	negs	r1, r3
 8010288:	4159      	adcs	r1, r3
 801028a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801028e:	e7eb      	b.n	8010268 <__swhatbuf_r+0x24>

08010290 <__smakebuf_r>:
 8010290:	898b      	ldrh	r3, [r1, #12]
 8010292:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010294:	079d      	lsls	r5, r3, #30
 8010296:	4606      	mov	r6, r0
 8010298:	460c      	mov	r4, r1
 801029a:	d507      	bpl.n	80102ac <__smakebuf_r+0x1c>
 801029c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80102a0:	6023      	str	r3, [r4, #0]
 80102a2:	6123      	str	r3, [r4, #16]
 80102a4:	2301      	movs	r3, #1
 80102a6:	6163      	str	r3, [r4, #20]
 80102a8:	b003      	add	sp, #12
 80102aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80102ac:	ab01      	add	r3, sp, #4
 80102ae:	466a      	mov	r2, sp
 80102b0:	f7ff ffc8 	bl	8010244 <__swhatbuf_r>
 80102b4:	9f00      	ldr	r7, [sp, #0]
 80102b6:	4605      	mov	r5, r0
 80102b8:	4639      	mov	r1, r7
 80102ba:	4630      	mov	r0, r6
 80102bc:	f7fe fe86 	bl	800efcc <_malloc_r>
 80102c0:	b948      	cbnz	r0, 80102d6 <__smakebuf_r+0x46>
 80102c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80102c6:	059a      	lsls	r2, r3, #22
 80102c8:	d4ee      	bmi.n	80102a8 <__smakebuf_r+0x18>
 80102ca:	f023 0303 	bic.w	r3, r3, #3
 80102ce:	f043 0302 	orr.w	r3, r3, #2
 80102d2:	81a3      	strh	r3, [r4, #12]
 80102d4:	e7e2      	b.n	801029c <__smakebuf_r+0xc>
 80102d6:	89a3      	ldrh	r3, [r4, #12]
 80102d8:	6020      	str	r0, [r4, #0]
 80102da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80102de:	81a3      	strh	r3, [r4, #12]
 80102e0:	9b01      	ldr	r3, [sp, #4]
 80102e2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80102e6:	b15b      	cbz	r3, 8010300 <__smakebuf_r+0x70>
 80102e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80102ec:	4630      	mov	r0, r6
 80102ee:	f000 f837 	bl	8010360 <_isatty_r>
 80102f2:	b128      	cbz	r0, 8010300 <__smakebuf_r+0x70>
 80102f4:	89a3      	ldrh	r3, [r4, #12]
 80102f6:	f023 0303 	bic.w	r3, r3, #3
 80102fa:	f043 0301 	orr.w	r3, r3, #1
 80102fe:	81a3      	strh	r3, [r4, #12]
 8010300:	89a3      	ldrh	r3, [r4, #12]
 8010302:	431d      	orrs	r5, r3
 8010304:	81a5      	strh	r5, [r4, #12]
 8010306:	e7cf      	b.n	80102a8 <__smakebuf_r+0x18>

08010308 <memmove>:
 8010308:	4288      	cmp	r0, r1
 801030a:	b510      	push	{r4, lr}
 801030c:	eb01 0402 	add.w	r4, r1, r2
 8010310:	d902      	bls.n	8010318 <memmove+0x10>
 8010312:	4284      	cmp	r4, r0
 8010314:	4623      	mov	r3, r4
 8010316:	d807      	bhi.n	8010328 <memmove+0x20>
 8010318:	1e43      	subs	r3, r0, #1
 801031a:	42a1      	cmp	r1, r4
 801031c:	d008      	beq.n	8010330 <memmove+0x28>
 801031e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010322:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010326:	e7f8      	b.n	801031a <memmove+0x12>
 8010328:	4402      	add	r2, r0
 801032a:	4601      	mov	r1, r0
 801032c:	428a      	cmp	r2, r1
 801032e:	d100      	bne.n	8010332 <memmove+0x2a>
 8010330:	bd10      	pop	{r4, pc}
 8010332:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010336:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801033a:	e7f7      	b.n	801032c <memmove+0x24>

0801033c <_fstat_r>:
 801033c:	b538      	push	{r3, r4, r5, lr}
 801033e:	4d07      	ldr	r5, [pc, #28]	@ (801035c <_fstat_r+0x20>)
 8010340:	2300      	movs	r3, #0
 8010342:	4604      	mov	r4, r0
 8010344:	4608      	mov	r0, r1
 8010346:	4611      	mov	r1, r2
 8010348:	602b      	str	r3, [r5, #0]
 801034a:	f7f5 fea7 	bl	800609c <_fstat>
 801034e:	1c43      	adds	r3, r0, #1
 8010350:	d102      	bne.n	8010358 <_fstat_r+0x1c>
 8010352:	682b      	ldr	r3, [r5, #0]
 8010354:	b103      	cbz	r3, 8010358 <_fstat_r+0x1c>
 8010356:	6023      	str	r3, [r4, #0]
 8010358:	bd38      	pop	{r3, r4, r5, pc}
 801035a:	bf00      	nop
 801035c:	20001284 	.word	0x20001284

08010360 <_isatty_r>:
 8010360:	b538      	push	{r3, r4, r5, lr}
 8010362:	4d06      	ldr	r5, [pc, #24]	@ (801037c <_isatty_r+0x1c>)
 8010364:	2300      	movs	r3, #0
 8010366:	4604      	mov	r4, r0
 8010368:	4608      	mov	r0, r1
 801036a:	602b      	str	r3, [r5, #0]
 801036c:	f7f5 fea6 	bl	80060bc <_isatty>
 8010370:	1c43      	adds	r3, r0, #1
 8010372:	d102      	bne.n	801037a <_isatty_r+0x1a>
 8010374:	682b      	ldr	r3, [r5, #0]
 8010376:	b103      	cbz	r3, 801037a <_isatty_r+0x1a>
 8010378:	6023      	str	r3, [r4, #0]
 801037a:	bd38      	pop	{r3, r4, r5, pc}
 801037c:	20001284 	.word	0x20001284

08010380 <_realloc_r>:
 8010380:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010384:	4607      	mov	r7, r0
 8010386:	4614      	mov	r4, r2
 8010388:	460d      	mov	r5, r1
 801038a:	b921      	cbnz	r1, 8010396 <_realloc_r+0x16>
 801038c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010390:	4611      	mov	r1, r2
 8010392:	f7fe be1b 	b.w	800efcc <_malloc_r>
 8010396:	b92a      	cbnz	r2, 80103a4 <_realloc_r+0x24>
 8010398:	f7ff fa38 	bl	800f80c <_free_r>
 801039c:	4625      	mov	r5, r4
 801039e:	4628      	mov	r0, r5
 80103a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80103a4:	f000 f81a 	bl	80103dc <_malloc_usable_size_r>
 80103a8:	4284      	cmp	r4, r0
 80103aa:	4606      	mov	r6, r0
 80103ac:	d802      	bhi.n	80103b4 <_realloc_r+0x34>
 80103ae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80103b2:	d8f4      	bhi.n	801039e <_realloc_r+0x1e>
 80103b4:	4621      	mov	r1, r4
 80103b6:	4638      	mov	r0, r7
 80103b8:	f7fe fe08 	bl	800efcc <_malloc_r>
 80103bc:	4680      	mov	r8, r0
 80103be:	b908      	cbnz	r0, 80103c4 <_realloc_r+0x44>
 80103c0:	4645      	mov	r5, r8
 80103c2:	e7ec      	b.n	801039e <_realloc_r+0x1e>
 80103c4:	42b4      	cmp	r4, r6
 80103c6:	4622      	mov	r2, r4
 80103c8:	4629      	mov	r1, r5
 80103ca:	bf28      	it	cs
 80103cc:	4632      	movcs	r2, r6
 80103ce:	f7ff fa0e 	bl	800f7ee <memcpy>
 80103d2:	4629      	mov	r1, r5
 80103d4:	4638      	mov	r0, r7
 80103d6:	f7ff fa19 	bl	800f80c <_free_r>
 80103da:	e7f1      	b.n	80103c0 <_realloc_r+0x40>

080103dc <_malloc_usable_size_r>:
 80103dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80103e0:	1f18      	subs	r0, r3, #4
 80103e2:	2b00      	cmp	r3, #0
 80103e4:	bfbc      	itt	lt
 80103e6:	580b      	ldrlt	r3, [r1, r0]
 80103e8:	18c0      	addlt	r0, r0, r3
 80103ea:	4770      	bx	lr

080103ec <_init>:
 80103ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80103ee:	bf00      	nop
 80103f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80103f2:	bc08      	pop	{r3}
 80103f4:	469e      	mov	lr, r3
 80103f6:	4770      	bx	lr

080103f8 <_fini>:
 80103f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80103fa:	bf00      	nop
 80103fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80103fe:	bc08      	pop	{r3}
 8010400:	469e      	mov	lr, r3
 8010402:	4770      	bx	lr
