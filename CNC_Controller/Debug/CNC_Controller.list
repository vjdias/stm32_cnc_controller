
CNC_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f0dc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000968  0800f26c  0800f26c  0001026c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fbd4  0800fbd4  0001107c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800fbd4  0800fbd4  00010bd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fbdc  0800fbdc  0001107c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fbdc  0800fbdc  00010bdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800fbe0  0800fbe0  00010be0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  0800fbe4  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011d4  20000080  0800fc60  00011080  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001254  0800fc60  00011254  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001107c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020864  00000000  00000000  000110ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000579e  00000000  00000000  00031910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d80  00000000  00000000  000370b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001676  00000000  00000000  00038e30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029c47  00000000  00000000  0003a4a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028421  00000000  00000000  000640ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fa690  00000000  00000000  0008c50e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00186b9e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008148  00000000  00000000  00186be4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  0018ed2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f254 	.word	0x0800f254

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	0800f254 	.word	0x0800f254

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <has_header_tail>:
	return 0;
}

// Validação genérica de header/tail
static inline int has_header_tail(const uint8_t *raw, uint32_t len,
		uint8_t header, uint8_t tail) {
 800059c:	b480      	push	{r7}
 800059e:	b085      	sub	sp, #20
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	60f8      	str	r0, [r7, #12]
 80005a4:	60b9      	str	r1, [r7, #8]
 80005a6:	4611      	mov	r1, r2
 80005a8:	461a      	mov	r2, r3
 80005aa:	460b      	mov	r3, r1
 80005ac:	71fb      	strb	r3, [r7, #7]
 80005ae:	4613      	mov	r3, r2
 80005b0:	71bb      	strb	r3, [r7, #6]
	return raw && len >= 2 && raw[0] == header && raw[len - 1] == tail;
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d011      	beq.n	80005dc <has_header_tail+0x40>
 80005b8:	68bb      	ldr	r3, [r7, #8]
 80005ba:	2b01      	cmp	r3, #1
 80005bc:	d90e      	bls.n	80005dc <has_header_tail+0x40>
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	781b      	ldrb	r3, [r3, #0]
 80005c2:	79fa      	ldrb	r2, [r7, #7]
 80005c4:	429a      	cmp	r2, r3
 80005c6:	d109      	bne.n	80005dc <has_header_tail+0x40>
 80005c8:	68bb      	ldr	r3, [r7, #8]
 80005ca:	3b01      	subs	r3, #1
 80005cc:	68fa      	ldr	r2, [r7, #12]
 80005ce:	4413      	add	r3, r2
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	79ba      	ldrb	r2, [r7, #6]
 80005d4:	429a      	cmp	r2, r3
 80005d6:	d101      	bne.n	80005dc <has_header_tail+0x40>
 80005d8:	2301      	movs	r3, #1
 80005da:	e000      	b.n	80005de <has_header_tail+0x42>
 80005dc:	2300      	movs	r3, #0
}
 80005de:	4618      	mov	r0, r3
 80005e0:	3714      	adds	r7, #20
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr

080005ea <be16_read>:

// Leituras/escritas big-endian (formato no fio)
static inline uint16_t be16_read(const uint8_t *p) {
 80005ea:	b480      	push	{r7}
 80005ec:	b083      	sub	sp, #12
 80005ee:	af00      	add	r7, sp, #0
 80005f0:	6078      	str	r0, [r7, #4]
	return (uint16_t) ((((uint16_t) p[0]) << 8) | p[1]);
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	b21b      	sxth	r3, r3
 80005f8:	021b      	lsls	r3, r3, #8
 80005fa:	b21a      	sxth	r2, r3
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	3301      	adds	r3, #1
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	b21b      	sxth	r3, r3
 8000604:	4313      	orrs	r3, r2
 8000606:	b21b      	sxth	r3, r3
 8000608:	b29b      	uxth	r3, r3
}
 800060a:	4618      	mov	r0, r3
 800060c:	370c      	adds	r7, #12
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr

08000616 <frame_expect_req>:
// =====================
// Validadores de frame
// =====================
// Garante comprimento mínimo, header/tail corretos e tipo esperado
static inline int frame_expect_req(const uint8_t *raw, uint32_t len,
		req_msg_type_t type, uint32_t min_len) {
 8000616:	b580      	push	{r7, lr}
 8000618:	b084      	sub	sp, #16
 800061a:	af00      	add	r7, sp, #0
 800061c:	60f8      	str	r0, [r7, #12]
 800061e:	60b9      	str	r1, [r7, #8]
 8000620:	603b      	str	r3, [r7, #0]
 8000622:	4613      	mov	r3, r2
 8000624:	71fb      	strb	r3, [r7, #7]
	if (!raw || len < min_len)
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	2b00      	cmp	r3, #0
 800062a:	d003      	beq.n	8000634 <frame_expect_req+0x1e>
 800062c:	68ba      	ldr	r2, [r7, #8]
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	429a      	cmp	r2, r3
 8000632:	d202      	bcs.n	800063a <frame_expect_req+0x24>
		return PROTO_ERR_ARG;
 8000634:	f04f 33ff 	mov.w	r3, #4294967295
 8000638:	e012      	b.n	8000660 <frame_expect_req+0x4a>
	if (!has_header_tail(raw, len, REQ_HEADER, REQ_TAIL)
 800063a:	2355      	movs	r3, #85	@ 0x55
 800063c:	22aa      	movs	r2, #170	@ 0xaa
 800063e:	68b9      	ldr	r1, [r7, #8]
 8000640:	68f8      	ldr	r0, [r7, #12]
 8000642:	f7ff ffab 	bl	800059c <has_header_tail>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d005      	beq.n	8000658 <frame_expect_req+0x42>
			|| raw[1] != (uint8_t) type)
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	3301      	adds	r3, #1
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	79fa      	ldrb	r2, [r7, #7]
 8000654:	429a      	cmp	r2, r3
 8000656:	d002      	beq.n	800065e <frame_expect_req+0x48>
		return PROTO_ERR_FRAME;
 8000658:	f06f 0301 	mvn.w	r3, #1
 800065c:	e000      	b.n	8000660 <frame_expect_req+0x4a>
	return PROTO_OK;
 800065e:	2300      	movs	r3, #0
}
 8000660:	4618      	mov	r0, r3
 8000662:	3710      	adds	r7, #16
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}

08000668 <led_ctrl_req_decoder>:
// [7]=paridade (XOR dos bytes 1..6), [8]=0x55

#define LED_CTRL_PARITY_LAST_INDEX 6u
#define LED_CTRL_PARITY_INDEX 7u

int led_ctrl_req_decoder(const uint8_t *raw, uint32_t len, led_ctrl_req_t *out) {
 8000668:	b580      	push	{r7, lr}
 800066a:	b086      	sub	sp, #24
 800066c:	af00      	add	r7, sp, #0
 800066e:	60f8      	str	r0, [r7, #12]
 8000670:	60b9      	str	r1, [r7, #8]
 8000672:	607a      	str	r2, [r7, #4]
    if (!raw || !out)
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	2b00      	cmp	r3, #0
 8000678:	d002      	beq.n	8000680 <led_ctrl_req_decoder+0x18>
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	2b00      	cmp	r3, #0
 800067e:	d102      	bne.n	8000686 <led_ctrl_req_decoder+0x1e>
        return PROTO_ERR_ARG;
 8000680:	f04f 33ff 	mov.w	r3, #4294967295
 8000684:	e02a      	b.n	80006dc <led_ctrl_req_decoder+0x74>
    if (len > LED_CTRL_REQ_PADDED_TOTAL_LEN)
 8000686:	68bb      	ldr	r3, [r7, #8]
 8000688:	2b2a      	cmp	r3, #42	@ 0x2a
 800068a:	d902      	bls.n	8000692 <led_ctrl_req_decoder+0x2a>
        return PROTO_ERR_RANGE;
 800068c:	f06f 0303 	mvn.w	r3, #3
 8000690:	e024      	b.n	80006dc <led_ctrl_req_decoder+0x74>
    int st = frame_expect_req(raw, len, REQ_LED_CTRL, LED_CTRL_REQ_TOTAL_LEN);
 8000692:	2309      	movs	r3, #9
 8000694:	2207      	movs	r2, #7
 8000696:	68b9      	ldr	r1, [r7, #8]
 8000698:	68f8      	ldr	r0, [r7, #12]
 800069a:	f7ff ffbc 	bl	8000616 <frame_expect_req>
 800069e:	6178      	str	r0, [r7, #20]
    if (st != PROTO_OK)
 80006a0:	697b      	ldr	r3, [r7, #20]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <led_ctrl_req_decoder+0x42>
        return st;
 80006a6:	697b      	ldr	r3, [r7, #20]
 80006a8:	e018      	b.n	80006dc <led_ctrl_req_decoder+0x74>
    out->frameId = raw[2];
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	3302      	adds	r3, #2
 80006ae:	781a      	ldrb	r2, [r3, #0]
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	701a      	strb	r2, [r3, #0]
    out->ledMask = raw[3];
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	3303      	adds	r3, #3
 80006b8:	781a      	ldrb	r2, [r3, #0]
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	705a      	strb	r2, [r3, #1]
    out->channel[0].mode = raw[4];
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	3304      	adds	r3, #4
 80006c2:	781a      	ldrb	r2, [r3, #0]
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	709a      	strb	r2, [r3, #2]
    out->channel[0].frequency = be16_read(raw + 5);
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	3305      	adds	r3, #5
 80006cc:	4618      	mov	r0, r3
 80006ce:	f7ff ff8c 	bl	80005ea <be16_read>
 80006d2:	4603      	mov	r3, r0
 80006d4:	461a      	mov	r2, r3
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	809a      	strh	r2, [r3, #4]
    return PROTO_OK;
 80006da:	2300      	movs	r3, #0
}
 80006dc:	4618      	mov	r0, r3
 80006de:	3718      	adds	r7, #24
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}

080006e4 <has_header_tail>:
		uint8_t header, uint8_t tail) {
 80006e4:	b480      	push	{r7}
 80006e6:	b085      	sub	sp, #20
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	60f8      	str	r0, [r7, #12]
 80006ec:	60b9      	str	r1, [r7, #8]
 80006ee:	4611      	mov	r1, r2
 80006f0:	461a      	mov	r2, r3
 80006f2:	460b      	mov	r3, r1
 80006f4:	71fb      	strb	r3, [r7, #7]
 80006f6:	4613      	mov	r3, r2
 80006f8:	71bb      	strb	r3, [r7, #6]
	return raw && len >= 2 && raw[0] == header && raw[len - 1] == tail;
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d011      	beq.n	8000724 <has_header_tail+0x40>
 8000700:	68bb      	ldr	r3, [r7, #8]
 8000702:	2b01      	cmp	r3, #1
 8000704:	d90e      	bls.n	8000724 <has_header_tail+0x40>
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	79fa      	ldrb	r2, [r7, #7]
 800070c:	429a      	cmp	r2, r3
 800070e:	d109      	bne.n	8000724 <has_header_tail+0x40>
 8000710:	68bb      	ldr	r3, [r7, #8]
 8000712:	3b01      	subs	r3, #1
 8000714:	68fa      	ldr	r2, [r7, #12]
 8000716:	4413      	add	r3, r2
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	79ba      	ldrb	r2, [r7, #6]
 800071c:	429a      	cmp	r2, r3
 800071e:	d101      	bne.n	8000724 <has_header_tail+0x40>
 8000720:	2301      	movs	r3, #1
 8000722:	e000      	b.n	8000726 <has_header_tail+0x42>
 8000724:	2300      	movs	r3, #0
}
 8000726:	4618      	mov	r0, r3
 8000728:	3714      	adds	r7, #20
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr

08000732 <frame_expect_req>:
		req_msg_type_t type, uint32_t min_len) {
 8000732:	b580      	push	{r7, lr}
 8000734:	b084      	sub	sp, #16
 8000736:	af00      	add	r7, sp, #0
 8000738:	60f8      	str	r0, [r7, #12]
 800073a:	60b9      	str	r1, [r7, #8]
 800073c:	603b      	str	r3, [r7, #0]
 800073e:	4613      	mov	r3, r2
 8000740:	71fb      	strb	r3, [r7, #7]
	if (!raw || len < min_len)
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	2b00      	cmp	r3, #0
 8000746:	d003      	beq.n	8000750 <frame_expect_req+0x1e>
 8000748:	68ba      	ldr	r2, [r7, #8]
 800074a:	683b      	ldr	r3, [r7, #0]
 800074c:	429a      	cmp	r2, r3
 800074e:	d202      	bcs.n	8000756 <frame_expect_req+0x24>
		return PROTO_ERR_ARG;
 8000750:	f04f 33ff 	mov.w	r3, #4294967295
 8000754:	e012      	b.n	800077c <frame_expect_req+0x4a>
	if (!has_header_tail(raw, len, REQ_HEADER, REQ_TAIL)
 8000756:	2355      	movs	r3, #85	@ 0x55
 8000758:	22aa      	movs	r2, #170	@ 0xaa
 800075a:	68b9      	ldr	r1, [r7, #8]
 800075c:	68f8      	ldr	r0, [r7, #12]
 800075e:	f7ff ffc1 	bl	80006e4 <has_header_tail>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d005      	beq.n	8000774 <frame_expect_req+0x42>
			|| raw[1] != (uint8_t) type)
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	3301      	adds	r3, #1
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	79fa      	ldrb	r2, [r7, #7]
 8000770:	429a      	cmp	r2, r3
 8000772:	d002      	beq.n	800077a <frame_expect_req+0x48>
		return PROTO_ERR_FRAME;
 8000774:	f06f 0301 	mvn.w	r3, #1
 8000778:	e000      	b.n	800077c <frame_expect_req+0x4a>
	return PROTO_OK;
 800077a:	2300      	movs	r3, #0
}
 800077c:	4618      	mov	r0, r3
 800077e:	3710      	adds	r7, #16
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}

08000784 <move_end_req_decoder>:
#include "Protocol/Requests/move_end_request.h"

int move_end_req_decoder(const uint8_t *raw, uint32_t len, move_end_req_t *out) {
 8000784:	b580      	push	{r7, lr}
 8000786:	b086      	sub	sp, #24
 8000788:	af00      	add	r7, sp, #0
 800078a:	60f8      	str	r0, [r7, #12]
 800078c:	60b9      	str	r1, [r7, #8]
 800078e:	607a      	str	r2, [r7, #4]
	if (!raw || !out)
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	2b00      	cmp	r3, #0
 8000794:	d002      	beq.n	800079c <move_end_req_decoder+0x18>
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	2b00      	cmp	r3, #0
 800079a:	d102      	bne.n	80007a2 <move_end_req_decoder+0x1e>
		return PROTO_ERR_ARG;
 800079c:	f04f 33ff 	mov.w	r3, #4294967295
 80007a0:	e011      	b.n	80007c6 <move_end_req_decoder+0x42>
	int st = frame_expect_req(raw, len, REQ_MOVE_END, 4);
 80007a2:	2304      	movs	r3, #4
 80007a4:	2206      	movs	r2, #6
 80007a6:	68b9      	ldr	r1, [r7, #8]
 80007a8:	68f8      	ldr	r0, [r7, #12]
 80007aa:	f7ff ffc2 	bl	8000732 <frame_expect_req>
 80007ae:	6178      	str	r0, [r7, #20]
	if (st != PROTO_OK)
 80007b0:	697b      	ldr	r3, [r7, #20]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <move_end_req_decoder+0x36>
		return st;
 80007b6:	697b      	ldr	r3, [r7, #20]
 80007b8:	e005      	b.n	80007c6 <move_end_req_decoder+0x42>
	out->frameId = raw[2];
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	3302      	adds	r3, #2
 80007be:	781a      	ldrb	r2, [r3, #0]
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	701a      	strb	r2, [r3, #0]
	return PROTO_OK;
 80007c4:	2300      	movs	r3, #0
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	3718      	adds	r7, #24
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}

080007ce <has_header_tail>:
		uint8_t header, uint8_t tail) {
 80007ce:	b480      	push	{r7}
 80007d0:	b085      	sub	sp, #20
 80007d2:	af00      	add	r7, sp, #0
 80007d4:	60f8      	str	r0, [r7, #12]
 80007d6:	60b9      	str	r1, [r7, #8]
 80007d8:	4611      	mov	r1, r2
 80007da:	461a      	mov	r2, r3
 80007dc:	460b      	mov	r3, r1
 80007de:	71fb      	strb	r3, [r7, #7]
 80007e0:	4613      	mov	r3, r2
 80007e2:	71bb      	strb	r3, [r7, #6]
	return raw && len >= 2 && raw[0] == header && raw[len - 1] == tail;
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d011      	beq.n	800080e <has_header_tail+0x40>
 80007ea:	68bb      	ldr	r3, [r7, #8]
 80007ec:	2b01      	cmp	r3, #1
 80007ee:	d90e      	bls.n	800080e <has_header_tail+0x40>
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	79fa      	ldrb	r2, [r7, #7]
 80007f6:	429a      	cmp	r2, r3
 80007f8:	d109      	bne.n	800080e <has_header_tail+0x40>
 80007fa:	68bb      	ldr	r3, [r7, #8]
 80007fc:	3b01      	subs	r3, #1
 80007fe:	68fa      	ldr	r2, [r7, #12]
 8000800:	4413      	add	r3, r2
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	79ba      	ldrb	r2, [r7, #6]
 8000806:	429a      	cmp	r2, r3
 8000808:	d101      	bne.n	800080e <has_header_tail+0x40>
 800080a:	2301      	movs	r3, #1
 800080c:	e000      	b.n	8000810 <has_header_tail+0x42>
 800080e:	2300      	movs	r3, #0
}
 8000810:	4618      	mov	r0, r3
 8000812:	3714      	adds	r7, #20
 8000814:	46bd      	mov	sp, r7
 8000816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081a:	4770      	bx	lr

0800081c <be16_read>:
static inline uint16_t be16_read(const uint8_t *p) {
 800081c:	b480      	push	{r7}
 800081e:	b083      	sub	sp, #12
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
	return (uint16_t) ((((uint16_t) p[0]) << 8) | p[1]);
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	b21b      	sxth	r3, r3
 800082a:	021b      	lsls	r3, r3, #8
 800082c:	b21a      	sxth	r2, r3
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	3301      	adds	r3, #1
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	b21b      	sxth	r3, r3
 8000836:	4313      	orrs	r3, r2
 8000838:	b21b      	sxth	r3, r3
 800083a:	b29b      	uxth	r3, r3
}
 800083c:	4618      	mov	r0, r3
 800083e:	370c      	adds	r7, #12
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr

08000848 <be32_read>:
static inline uint32_t be32_read(const uint8_t *p) {
 8000848:	b480      	push	{r7}
 800084a:	b083      	sub	sp, #12
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
	return (((uint32_t) p[0] << 24) | ((uint32_t) p[1] << 16)
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	061a      	lsls	r2, r3, #24
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	3301      	adds	r3, #1
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	041b      	lsls	r3, r3, #16
 800085e:	431a      	orrs	r2, r3
			| ((uint32_t) p[2] << 8) | (uint32_t) p[3]);
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	3302      	adds	r3, #2
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	021b      	lsls	r3, r3, #8
 8000868:	4313      	orrs	r3, r2
 800086a:	687a      	ldr	r2, [r7, #4]
 800086c:	3203      	adds	r2, #3
 800086e:	7812      	ldrb	r2, [r2, #0]
 8000870:	4313      	orrs	r3, r2
}
 8000872:	4618      	mov	r0, r3
 8000874:	370c      	adds	r7, #12
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr

0800087e <frame_expect_req>:
		req_msg_type_t type, uint32_t min_len) {
 800087e:	b580      	push	{r7, lr}
 8000880:	b084      	sub	sp, #16
 8000882:	af00      	add	r7, sp, #0
 8000884:	60f8      	str	r0, [r7, #12]
 8000886:	60b9      	str	r1, [r7, #8]
 8000888:	603b      	str	r3, [r7, #0]
 800088a:	4613      	mov	r3, r2
 800088c:	71fb      	strb	r3, [r7, #7]
	if (!raw || len < min_len)
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d003      	beq.n	800089c <frame_expect_req+0x1e>
 8000894:	68ba      	ldr	r2, [r7, #8]
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	429a      	cmp	r2, r3
 800089a:	d202      	bcs.n	80008a2 <frame_expect_req+0x24>
		return PROTO_ERR_ARG;
 800089c:	f04f 33ff 	mov.w	r3, #4294967295
 80008a0:	e012      	b.n	80008c8 <frame_expect_req+0x4a>
	if (!has_header_tail(raw, len, REQ_HEADER, REQ_TAIL)
 80008a2:	2355      	movs	r3, #85	@ 0x55
 80008a4:	22aa      	movs	r2, #170	@ 0xaa
 80008a6:	68b9      	ldr	r1, [r7, #8]
 80008a8:	68f8      	ldr	r0, [r7, #12]
 80008aa:	f7ff ff90 	bl	80007ce <has_header_tail>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d005      	beq.n	80008c0 <frame_expect_req+0x42>
			|| raw[1] != (uint8_t) type)
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	3301      	adds	r3, #1
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	79fa      	ldrb	r2, [r7, #7]
 80008bc:	429a      	cmp	r2, r3
 80008be:	d002      	beq.n	80008c6 <frame_expect_req+0x48>
		return PROTO_ERR_FRAME;
 80008c0:	f06f 0301 	mvn.w	r3, #1
 80008c4:	e000      	b.n	80008c8 <frame_expect_req+0x4a>
	return PROTO_OK;
 80008c6:	2300      	movs	r3, #0
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	3710      	adds	r7, #16
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}

080008d0 <move_queue_add_req_decoder>:
#include "Protocol/Requests/move_queue_add_request.h"

int move_queue_add_req_decoder(const uint8_t *raw, uint32_t len,
		move_queue_add_req_t *out) {
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b086      	sub	sp, #24
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	60f8      	str	r0, [r7, #12]
 80008d8:	60b9      	str	r1, [r7, #8]
 80008da:	607a      	str	r2, [r7, #4]
	if (!raw || !out)
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d002      	beq.n	80008e8 <move_queue_add_req_decoder+0x18>
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d102      	bne.n	80008ee <move_queue_add_req_decoder+0x1e>
		return PROTO_ERR_ARG;
 80008e8:	f04f 33ff 	mov.w	r3, #4294967295
 80008ec:	e09a      	b.n	8000a24 <move_queue_add_req_decoder+0x154>
	int st = frame_expect_req(raw, len, REQ_MOVE_QUEUE_ADD, 42);
 80008ee:	232a      	movs	r3, #42	@ 0x2a
 80008f0:	2201      	movs	r2, #1
 80008f2:	68b9      	ldr	r1, [r7, #8]
 80008f4:	68f8      	ldr	r0, [r7, #12]
 80008f6:	f7ff ffc2 	bl	800087e <frame_expect_req>
 80008fa:	6178      	str	r0, [r7, #20]
	if (st != PROTO_OK)
 80008fc:	697b      	ldr	r3, [r7, #20]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <move_queue_add_req_decoder+0x36>
		return st;
 8000902:	697b      	ldr	r3, [r7, #20]
 8000904:	e08e      	b.n	8000a24 <move_queue_add_req_decoder+0x154>
	out->frameId = raw[2];
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	3302      	adds	r3, #2
 800090a:	781a      	ldrb	r2, [r3, #0]
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	701a      	strb	r2, [r3, #0]
	out->dirMask = raw[3];
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	3303      	adds	r3, #3
 8000914:	781a      	ldrb	r2, [r3, #0]
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	705a      	strb	r2, [r3, #1]
	out->vx = be16_read(&raw[4]);
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	3304      	adds	r3, #4
 800091e:	4618      	mov	r0, r3
 8000920:	f7ff ff7c 	bl	800081c <be16_read>
 8000924:	4603      	mov	r3, r0
 8000926:	461a      	mov	r2, r3
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	805a      	strh	r2, [r3, #2]
	out->sx = be32_read(&raw[6]);
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	3306      	adds	r3, #6
 8000930:	4618      	mov	r0, r3
 8000932:	f7ff ff89 	bl	8000848 <be32_read>
 8000936:	4602      	mov	r2, r0
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	605a      	str	r2, [r3, #4]
	out->vy = be16_read(&raw[10]);
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	330a      	adds	r3, #10
 8000940:	4618      	mov	r0, r3
 8000942:	f7ff ff6b 	bl	800081c <be16_read>
 8000946:	4603      	mov	r3, r0
 8000948:	461a      	mov	r2, r3
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	811a      	strh	r2, [r3, #8]
	out->sy = be32_read(&raw[12]);
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	330c      	adds	r3, #12
 8000952:	4618      	mov	r0, r3
 8000954:	f7ff ff78 	bl	8000848 <be32_read>
 8000958:	4602      	mov	r2, r0
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	60da      	str	r2, [r3, #12]
	out->vz = be16_read(&raw[16]);
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	3310      	adds	r3, #16
 8000962:	4618      	mov	r0, r3
 8000964:	f7ff ff5a 	bl	800081c <be16_read>
 8000968:	4603      	mov	r3, r0
 800096a:	461a      	mov	r2, r3
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	821a      	strh	r2, [r3, #16]
	out->sz = be32_read(&raw[18]);
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	3312      	adds	r3, #18
 8000974:	4618      	mov	r0, r3
 8000976:	f7ff ff67 	bl	8000848 <be32_read>
 800097a:	4602      	mov	r2, r0
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	615a      	str	r2, [r3, #20]
	out->kp_x = be16_read(&raw[22]);
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	3316      	adds	r3, #22
 8000984:	4618      	mov	r0, r3
 8000986:	f7ff ff49 	bl	800081c <be16_read>
 800098a:	4603      	mov	r3, r0
 800098c:	461a      	mov	r2, r3
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	831a      	strh	r2, [r3, #24]
	out->ki_x = be16_read(&raw[24]);
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	3318      	adds	r3, #24
 8000996:	4618      	mov	r0, r3
 8000998:	f7ff ff40 	bl	800081c <be16_read>
 800099c:	4603      	mov	r3, r0
 800099e:	461a      	mov	r2, r3
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	835a      	strh	r2, [r3, #26]
	out->kd_x = be16_read(&raw[26]);
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	331a      	adds	r3, #26
 80009a8:	4618      	mov	r0, r3
 80009aa:	f7ff ff37 	bl	800081c <be16_read>
 80009ae:	4603      	mov	r3, r0
 80009b0:	461a      	mov	r2, r3
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	839a      	strh	r2, [r3, #28]
	out->kp_y = be16_read(&raw[28]);
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	331c      	adds	r3, #28
 80009ba:	4618      	mov	r0, r3
 80009bc:	f7ff ff2e 	bl	800081c <be16_read>
 80009c0:	4603      	mov	r3, r0
 80009c2:	461a      	mov	r2, r3
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	83da      	strh	r2, [r3, #30]
	out->ki_y = be16_read(&raw[30]);
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	331e      	adds	r3, #30
 80009cc:	4618      	mov	r0, r3
 80009ce:	f7ff ff25 	bl	800081c <be16_read>
 80009d2:	4603      	mov	r3, r0
 80009d4:	461a      	mov	r2, r3
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	841a      	strh	r2, [r3, #32]
	out->kd_y = be16_read(&raw[32]);
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	3320      	adds	r3, #32
 80009de:	4618      	mov	r0, r3
 80009e0:	f7ff ff1c 	bl	800081c <be16_read>
 80009e4:	4603      	mov	r3, r0
 80009e6:	461a      	mov	r2, r3
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	845a      	strh	r2, [r3, #34]	@ 0x22
	out->kp_z = be16_read(&raw[34]);
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	3322      	adds	r3, #34	@ 0x22
 80009f0:	4618      	mov	r0, r3
 80009f2:	f7ff ff13 	bl	800081c <be16_read>
 80009f6:	4603      	mov	r3, r0
 80009f8:	461a      	mov	r2, r3
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	849a      	strh	r2, [r3, #36]	@ 0x24
	out->ki_z = be16_read(&raw[36]);
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	3324      	adds	r3, #36	@ 0x24
 8000a02:	4618      	mov	r0, r3
 8000a04:	f7ff ff0a 	bl	800081c <be16_read>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	461a      	mov	r2, r3
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	84da      	strh	r2, [r3, #38]	@ 0x26
	out->kd_z = be16_read(&raw[38]);
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	3326      	adds	r3, #38	@ 0x26
 8000a14:	4618      	mov	r0, r3
 8000a16:	f7ff ff01 	bl	800081c <be16_read>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	461a      	mov	r2, r3
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	851a      	strh	r2, [r3, #40]	@ 0x28
	return PROTO_OK;
 8000a22:	2300      	movs	r3, #0
}
 8000a24:	4618      	mov	r0, r3
 8000a26:	3718      	adds	r7, #24
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}

08000a2c <has_header_tail>:
		uint8_t header, uint8_t tail) {
 8000a2c:	b480      	push	{r7}
 8000a2e:	b085      	sub	sp, #20
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	60f8      	str	r0, [r7, #12]
 8000a34:	60b9      	str	r1, [r7, #8]
 8000a36:	4611      	mov	r1, r2
 8000a38:	461a      	mov	r2, r3
 8000a3a:	460b      	mov	r3, r1
 8000a3c:	71fb      	strb	r3, [r7, #7]
 8000a3e:	4613      	mov	r3, r2
 8000a40:	71bb      	strb	r3, [r7, #6]
	return raw && len >= 2 && raw[0] == header && raw[len - 1] == tail;
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d011      	beq.n	8000a6c <has_header_tail+0x40>
 8000a48:	68bb      	ldr	r3, [r7, #8]
 8000a4a:	2b01      	cmp	r3, #1
 8000a4c:	d90e      	bls.n	8000a6c <has_header_tail+0x40>
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	79fa      	ldrb	r2, [r7, #7]
 8000a54:	429a      	cmp	r2, r3
 8000a56:	d109      	bne.n	8000a6c <has_header_tail+0x40>
 8000a58:	68bb      	ldr	r3, [r7, #8]
 8000a5a:	3b01      	subs	r3, #1
 8000a5c:	68fa      	ldr	r2, [r7, #12]
 8000a5e:	4413      	add	r3, r2
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	79ba      	ldrb	r2, [r7, #6]
 8000a64:	429a      	cmp	r2, r3
 8000a66:	d101      	bne.n	8000a6c <has_header_tail+0x40>
 8000a68:	2301      	movs	r3, #1
 8000a6a:	e000      	b.n	8000a6e <has_header_tail+0x42>
 8000a6c:	2300      	movs	r3, #0
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	3714      	adds	r7, #20
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr

08000a7a <frame_expect_req>:
		req_msg_type_t type, uint32_t min_len) {
 8000a7a:	b580      	push	{r7, lr}
 8000a7c:	b084      	sub	sp, #16
 8000a7e:	af00      	add	r7, sp, #0
 8000a80:	60f8      	str	r0, [r7, #12]
 8000a82:	60b9      	str	r1, [r7, #8]
 8000a84:	603b      	str	r3, [r7, #0]
 8000a86:	4613      	mov	r3, r2
 8000a88:	71fb      	strb	r3, [r7, #7]
	if (!raw || len < min_len)
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d003      	beq.n	8000a98 <frame_expect_req+0x1e>
 8000a90:	68ba      	ldr	r2, [r7, #8]
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	429a      	cmp	r2, r3
 8000a96:	d202      	bcs.n	8000a9e <frame_expect_req+0x24>
		return PROTO_ERR_ARG;
 8000a98:	f04f 33ff 	mov.w	r3, #4294967295
 8000a9c:	e012      	b.n	8000ac4 <frame_expect_req+0x4a>
	if (!has_header_tail(raw, len, REQ_HEADER, REQ_TAIL)
 8000a9e:	2355      	movs	r3, #85	@ 0x55
 8000aa0:	22aa      	movs	r2, #170	@ 0xaa
 8000aa2:	68b9      	ldr	r1, [r7, #8]
 8000aa4:	68f8      	ldr	r0, [r7, #12]
 8000aa6:	f7ff ffc1 	bl	8000a2c <has_header_tail>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d005      	beq.n	8000abc <frame_expect_req+0x42>
			|| raw[1] != (uint8_t) type)
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	3301      	adds	r3, #1
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	79fa      	ldrb	r2, [r7, #7]
 8000ab8:	429a      	cmp	r2, r3
 8000aba:	d002      	beq.n	8000ac2 <frame_expect_req+0x48>
		return PROTO_ERR_FRAME;
 8000abc:	f06f 0301 	mvn.w	r3, #1
 8000ac0:	e000      	b.n	8000ac4 <frame_expect_req+0x4a>
	return PROTO_OK;
 8000ac2:	2300      	movs	r3, #0
}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	3710      	adds	r7, #16
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}

08000acc <move_queue_status_req_decoder>:
#include "Protocol/Requests/move_queue_status_request.h"

int move_queue_status_req_decoder(const uint8_t *raw, uint32_t len,
		move_queue_status_req_t *out) {
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b086      	sub	sp, #24
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	60f8      	str	r0, [r7, #12]
 8000ad4:	60b9      	str	r1, [r7, #8]
 8000ad6:	607a      	str	r2, [r7, #4]
	if (!raw || !out)
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d002      	beq.n	8000ae4 <move_queue_status_req_decoder+0x18>
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d102      	bne.n	8000aea <move_queue_status_req_decoder+0x1e>
		return PROTO_ERR_ARG;
 8000ae4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ae8:	e011      	b.n	8000b0e <move_queue_status_req_decoder+0x42>
	int st = frame_expect_req(raw, len, REQ_MOVE_QUEUE_STATUS, 4);
 8000aea:	2304      	movs	r3, #4
 8000aec:	2202      	movs	r2, #2
 8000aee:	68b9      	ldr	r1, [r7, #8]
 8000af0:	68f8      	ldr	r0, [r7, #12]
 8000af2:	f7ff ffc2 	bl	8000a7a <frame_expect_req>
 8000af6:	6178      	str	r0, [r7, #20]
	if (st != PROTO_OK)
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <move_queue_status_req_decoder+0x36>
		return st;
 8000afe:	697b      	ldr	r3, [r7, #20]
 8000b00:	e005      	b.n	8000b0e <move_queue_status_req_decoder+0x42>
	out->frameId = raw[2];
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	3302      	adds	r3, #2
 8000b06:	781a      	ldrb	r2, [r3, #0]
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	701a      	strb	r2, [r3, #0]
	return PROTO_OK;
 8000b0c:	2300      	movs	r3, #0
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	3718      	adds	r7, #24
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}

08000b16 <has_header_tail>:
		uint8_t header, uint8_t tail) {
 8000b16:	b480      	push	{r7}
 8000b18:	b085      	sub	sp, #20
 8000b1a:	af00      	add	r7, sp, #0
 8000b1c:	60f8      	str	r0, [r7, #12]
 8000b1e:	60b9      	str	r1, [r7, #8]
 8000b20:	4611      	mov	r1, r2
 8000b22:	461a      	mov	r2, r3
 8000b24:	460b      	mov	r3, r1
 8000b26:	71fb      	strb	r3, [r7, #7]
 8000b28:	4613      	mov	r3, r2
 8000b2a:	71bb      	strb	r3, [r7, #6]
	return raw && len >= 2 && raw[0] == header && raw[len - 1] == tail;
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d011      	beq.n	8000b56 <has_header_tail+0x40>
 8000b32:	68bb      	ldr	r3, [r7, #8]
 8000b34:	2b01      	cmp	r3, #1
 8000b36:	d90e      	bls.n	8000b56 <has_header_tail+0x40>
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	79fa      	ldrb	r2, [r7, #7]
 8000b3e:	429a      	cmp	r2, r3
 8000b40:	d109      	bne.n	8000b56 <has_header_tail+0x40>
 8000b42:	68bb      	ldr	r3, [r7, #8]
 8000b44:	3b01      	subs	r3, #1
 8000b46:	68fa      	ldr	r2, [r7, #12]
 8000b48:	4413      	add	r3, r2
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	79ba      	ldrb	r2, [r7, #6]
 8000b4e:	429a      	cmp	r2, r3
 8000b50:	d101      	bne.n	8000b56 <has_header_tail+0x40>
 8000b52:	2301      	movs	r3, #1
 8000b54:	e000      	b.n	8000b58 <has_header_tail+0x42>
 8000b56:	2300      	movs	r3, #0
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	3714      	adds	r7, #20
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr

08000b64 <frame_expect_req>:
		req_msg_type_t type, uint32_t min_len) {
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b084      	sub	sp, #16
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	60f8      	str	r0, [r7, #12]
 8000b6c:	60b9      	str	r1, [r7, #8]
 8000b6e:	603b      	str	r3, [r7, #0]
 8000b70:	4613      	mov	r3, r2
 8000b72:	71fb      	strb	r3, [r7, #7]
	if (!raw || len < min_len)
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d003      	beq.n	8000b82 <frame_expect_req+0x1e>
 8000b7a:	68ba      	ldr	r2, [r7, #8]
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	429a      	cmp	r2, r3
 8000b80:	d202      	bcs.n	8000b88 <frame_expect_req+0x24>
		return PROTO_ERR_ARG;
 8000b82:	f04f 33ff 	mov.w	r3, #4294967295
 8000b86:	e012      	b.n	8000bae <frame_expect_req+0x4a>
	if (!has_header_tail(raw, len, REQ_HEADER, REQ_TAIL)
 8000b88:	2355      	movs	r3, #85	@ 0x55
 8000b8a:	22aa      	movs	r2, #170	@ 0xaa
 8000b8c:	68b9      	ldr	r1, [r7, #8]
 8000b8e:	68f8      	ldr	r0, [r7, #12]
 8000b90:	f7ff ffc1 	bl	8000b16 <has_header_tail>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d005      	beq.n	8000ba6 <frame_expect_req+0x42>
			|| raw[1] != (uint8_t) type)
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	3301      	adds	r3, #1
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	79fa      	ldrb	r2, [r7, #7]
 8000ba2:	429a      	cmp	r2, r3
 8000ba4:	d002      	beq.n	8000bac <frame_expect_req+0x48>
		return PROTO_ERR_FRAME;
 8000ba6:	f06f 0301 	mvn.w	r3, #1
 8000baa:	e000      	b.n	8000bae <frame_expect_req+0x4a>
	return PROTO_OK;
 8000bac:	2300      	movs	r3, #0
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3710      	adds	r7, #16
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}

08000bb6 <start_move_req_decoder>:
#include "Protocol/Requests/start_move_request.h"

int start_move_req_decoder(const uint8_t *raw, uint32_t len,
		start_move_req_t *out) {
 8000bb6:	b580      	push	{r7, lr}
 8000bb8:	b086      	sub	sp, #24
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	60f8      	str	r0, [r7, #12]
 8000bbe:	60b9      	str	r1, [r7, #8]
 8000bc0:	607a      	str	r2, [r7, #4]
	if (!raw || !out)
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d002      	beq.n	8000bce <start_move_req_decoder+0x18>
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d102      	bne.n	8000bd4 <start_move_req_decoder+0x1e>
		return PROTO_ERR_ARG;
 8000bce:	f04f 33ff 	mov.w	r3, #4294967295
 8000bd2:	e011      	b.n	8000bf8 <start_move_req_decoder+0x42>
	int st = frame_expect_req(raw, len, REQ_START_MOVE, 4);
 8000bd4:	2304      	movs	r3, #4
 8000bd6:	2203      	movs	r2, #3
 8000bd8:	68b9      	ldr	r1, [r7, #8]
 8000bda:	68f8      	ldr	r0, [r7, #12]
 8000bdc:	f7ff ffc2 	bl	8000b64 <frame_expect_req>
 8000be0:	6178      	str	r0, [r7, #20]
	if (st != PROTO_OK)
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <start_move_req_decoder+0x36>
		return st;
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	e005      	b.n	8000bf8 <start_move_req_decoder+0x42>
	out->frameId = raw[2];
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	3302      	adds	r3, #2
 8000bf0:	781a      	ldrb	r2, [r3, #0]
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	701a      	strb	r2, [r3, #0]
	return PROTO_OK;
 8000bf6:	2300      	movs	r3, #0
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	3718      	adds	r7, #24
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}

08000c00 <xor_reduce_bytes>:
// =====================
// Conjunto genérico de auxiliares
// =====================

// XOR sobre bytes (paridade byte a byte)
static inline uint8_t xor_reduce_bytes(const uint8_t *p, uint32_t n) {
 8000c00:	b480      	push	{r7}
 8000c02:	b085      	sub	sp, #20
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
 8000c08:	6039      	str	r1, [r7, #0]
	uint8_t x = 0;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	73fb      	strb	r3, [r7, #15]
	for (uint32_t i = 0; i < n; ++i)
 8000c0e:	2300      	movs	r3, #0
 8000c10:	60bb      	str	r3, [r7, #8]
 8000c12:	e009      	b.n	8000c28 <xor_reduce_bytes+0x28>
		x ^= p[i];
 8000c14:	687a      	ldr	r2, [r7, #4]
 8000c16:	68bb      	ldr	r3, [r7, #8]
 8000c18:	4413      	add	r3, r2
 8000c1a:	781a      	ldrb	r2, [r3, #0]
 8000c1c:	7bfb      	ldrb	r3, [r7, #15]
 8000c1e:	4053      	eors	r3, r2
 8000c20:	73fb      	strb	r3, [r7, #15]
	for (uint32_t i = 0; i < n; ++i)
 8000c22:	68bb      	ldr	r3, [r7, #8]
 8000c24:	3301      	adds	r3, #1
 8000c26:	60bb      	str	r3, [r7, #8]
 8000c28:	68ba      	ldr	r2, [r7, #8]
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	429a      	cmp	r2, r3
 8000c2e:	d3f1      	bcc.n	8000c14 <xor_reduce_bytes+0x14>
	return x;
 8000c30:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	3714      	adds	r7, #20
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr

08000c3e <set_parity_byte>:
	if (!raw)
		return 0;
	return xor_reduce_bytes(raw + start, count) == raw[parity_index];
}
static inline int set_parity_byte(uint8_t *raw, uint32_t start, uint32_t count,
		uint32_t parity_index) {
 8000c3e:	b590      	push	{r4, r7, lr}
 8000c40:	b085      	sub	sp, #20
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	60f8      	str	r0, [r7, #12]
 8000c46:	60b9      	str	r1, [r7, #8]
 8000c48:	607a      	str	r2, [r7, #4]
 8000c4a:	603b      	str	r3, [r7, #0]
	if (!raw)
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d102      	bne.n	8000c58 <set_parity_byte+0x1a>
		return -1;
 8000c52:	f04f 33ff 	mov.w	r3, #4294967295
 8000c56:	e00b      	b.n	8000c70 <set_parity_byte+0x32>
	raw[parity_index] = xor_reduce_bytes(raw + start, count);
 8000c58:	68fa      	ldr	r2, [r7, #12]
 8000c5a:	68bb      	ldr	r3, [r7, #8]
 8000c5c:	18d0      	adds	r0, r2, r3
 8000c5e:	68fa      	ldr	r2, [r7, #12]
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	18d4      	adds	r4, r2, r3
 8000c64:	6879      	ldr	r1, [r7, #4]
 8000c66:	f7ff ffcb 	bl	8000c00 <xor_reduce_bytes>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	7023      	strb	r3, [r4, #0]
	return 0;
 8000c6e:	2300      	movs	r3, #0
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	3714      	adds	r7, #20
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd90      	pop	{r4, r7, pc}

08000c78 <resp_init>:
// =====================
static inline void req_init(uint8_t *raw, req_msg_type_t type) {
	raw[0] = REQ_HEADER;
	raw[1] = (uint8_t) type;
}
static inline void resp_init(uint8_t *raw, resp_msg_type_t type) {
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
 8000c80:	460b      	mov	r3, r1
 8000c82:	70fb      	strb	r3, [r7, #3]
	raw[0] = RESP_HEADER;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	22ab      	movs	r2, #171	@ 0xab
 8000c88:	701a      	strb	r2, [r3, #0]
	raw[1] = (uint8_t) type;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	3301      	adds	r3, #1
 8000c8e:	78fa      	ldrb	r2, [r7, #3]
 8000c90:	701a      	strb	r2, [r3, #0]
}
 8000c92:	bf00      	nop
 8000c94:	370c      	adds	r7, #12
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr

08000c9e <resp_set_tail>:
static inline void req_set_tail(uint8_t *raw, uint32_t tail_index) {
	raw[tail_index] = REQ_TAIL;
}
static inline void resp_set_tail(uint8_t *raw, uint32_t tail_index) {
 8000c9e:	b480      	push	{r7}
 8000ca0:	b083      	sub	sp, #12
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	6078      	str	r0, [r7, #4]
 8000ca6:	6039      	str	r1, [r7, #0]
	raw[tail_index] = RESP_TAIL;
 8000ca8:	687a      	ldr	r2, [r7, #4]
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	4413      	add	r3, r2
 8000cae:	2254      	movs	r2, #84	@ 0x54
 8000cb0:	701a      	strb	r2, [r3, #0]
}
 8000cb2:	bf00      	nop
 8000cb4:	370c      	adds	r7, #12
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr

08000cbe <parity_set_byte_1N>:
// =====================
// Wrappers de paridade (intervalo 1..N)
// =====================
// Assume que a paridade cobre os bytes do índice 1 (tipo) até last_index inclusive
static inline int parity_set_byte_1N(uint8_t *raw, uint32_t last_index,
		uint32_t parity_index) {
 8000cbe:	b580      	push	{r7, lr}
 8000cc0:	b084      	sub	sp, #16
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	60f8      	str	r0, [r7, #12]
 8000cc6:	60b9      	str	r1, [r7, #8]
 8000cc8:	607a      	str	r2, [r7, #4]
	return set_parity_byte(raw, 1, last_index, parity_index);
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	68ba      	ldr	r2, [r7, #8]
 8000cce:	2101      	movs	r1, #1
 8000cd0:	68f8      	ldr	r0, [r7, #12]
 8000cd2:	f7ff ffb4 	bl	8000c3e <set_parity_byte>
 8000cd6:	4603      	mov	r3, r0
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	3710      	adds	r7, #16
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <led_ctrl_resp_encoder>:
uint8_t led_ctrl_resp_calc_parity(const led_ctrl_resp_t *in) {
	uint8_t b[4] = { RESP_LED_CTRL, in ? in->frameId : 0, in ? in->ledMask : 0,
			in ? in->status : 0 };
	return xor_reduce_bytes(b, 4);
}
int led_ctrl_resp_encoder(const led_ctrl_resp_t *in, uint8_t *raw, uint32_t len) {
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b084      	sub	sp, #16
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	60f8      	str	r0, [r7, #12]
 8000ce8:	60b9      	str	r1, [r7, #8]
 8000cea:	607a      	str	r2, [r7, #4]
	if (!raw || !in || len < 7)
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d005      	beq.n	8000cfe <led_ctrl_resp_encoder+0x1e>
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d002      	beq.n	8000cfe <led_ctrl_resp_encoder+0x1e>
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	2b06      	cmp	r3, #6
 8000cfc:	d802      	bhi.n	8000d04 <led_ctrl_resp_encoder+0x24>
		return PROTO_ERR_ARG;
 8000cfe:	f04f 33ff 	mov.w	r3, #4294967295
 8000d02:	e01c      	b.n	8000d3e <led_ctrl_resp_encoder+0x5e>
	resp_init(raw, RESP_LED_CTRL);
 8000d04:	2107      	movs	r1, #7
 8000d06:	68b8      	ldr	r0, [r7, #8]
 8000d08:	f7ff ffb6 	bl	8000c78 <resp_init>
	raw[2] = in->frameId;
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	3302      	adds	r3, #2
 8000d10:	68fa      	ldr	r2, [r7, #12]
 8000d12:	7812      	ldrb	r2, [r2, #0]
 8000d14:	701a      	strb	r2, [r3, #0]
	raw[3] = in->ledMask;
 8000d16:	68bb      	ldr	r3, [r7, #8]
 8000d18:	3303      	adds	r3, #3
 8000d1a:	68fa      	ldr	r2, [r7, #12]
 8000d1c:	7852      	ldrb	r2, [r2, #1]
 8000d1e:	701a      	strb	r2, [r3, #0]
	raw[4] = in->status;
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	3304      	adds	r3, #4
 8000d24:	68fa      	ldr	r2, [r7, #12]
 8000d26:	7892      	ldrb	r2, [r2, #2]
 8000d28:	701a      	strb	r2, [r3, #0]
	parity_set_byte_1N(raw, 4, 5);
 8000d2a:	2205      	movs	r2, #5
 8000d2c:	2104      	movs	r1, #4
 8000d2e:	68b8      	ldr	r0, [r7, #8]
 8000d30:	f7ff ffc5 	bl	8000cbe <parity_set_byte_1N>
	resp_set_tail(raw, 6);
 8000d34:	2106      	movs	r1, #6
 8000d36:	68b8      	ldr	r0, [r7, #8]
 8000d38:	f7ff ffb1 	bl	8000c9e <resp_set_tail>
	return PROTO_OK;
 8000d3c:	2300      	movs	r3, #0
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3710      	adds	r7, #16
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}

08000d46 <resp_init>:
static inline void resp_init(uint8_t *raw, resp_msg_type_t type) {
 8000d46:	b480      	push	{r7}
 8000d48:	b083      	sub	sp, #12
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	6078      	str	r0, [r7, #4]
 8000d4e:	460b      	mov	r3, r1
 8000d50:	70fb      	strb	r3, [r7, #3]
	raw[0] = RESP_HEADER;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	22ab      	movs	r2, #171	@ 0xab
 8000d56:	701a      	strb	r2, [r3, #0]
	raw[1] = (uint8_t) type;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	78fa      	ldrb	r2, [r7, #3]
 8000d5e:	701a      	strb	r2, [r3, #0]
}
 8000d60:	bf00      	nop
 8000d62:	370c      	adds	r7, #12
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr

08000d6c <resp_set_tail>:
static inline void resp_set_tail(uint8_t *raw, uint32_t tail_index) {
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
 8000d74:	6039      	str	r1, [r7, #0]
	raw[tail_index] = RESP_TAIL;
 8000d76:	687a      	ldr	r2, [r7, #4]
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	4413      	add	r3, r2
 8000d7c:	2254      	movs	r2, #84	@ 0x54
 8000d7e:	701a      	strb	r2, [r3, #0]
}
 8000d80:	bf00      	nop
 8000d82:	370c      	adds	r7, #12
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr

08000d8c <move_end_resp_encoder>:
	if (st != PROTO_OK)
		return st;
	out->frameId = raw[2];
	return PROTO_OK;
}
int move_end_resp_encoder(const move_end_resp_t *in, uint8_t *raw, uint32_t len) {
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b084      	sub	sp, #16
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	60f8      	str	r0, [r7, #12]
 8000d94:	60b9      	str	r1, [r7, #8]
 8000d96:	607a      	str	r2, [r7, #4]
	if (!raw || !in || len < 4)
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d005      	beq.n	8000daa <move_end_resp_encoder+0x1e>
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d002      	beq.n	8000daa <move_end_resp_encoder+0x1e>
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	2b03      	cmp	r3, #3
 8000da8:	d802      	bhi.n	8000db0 <move_end_resp_encoder+0x24>
		return PROTO_ERR_ARG;
 8000daa:	f04f 33ff 	mov.w	r3, #4294967295
 8000dae:	e00d      	b.n	8000dcc <move_end_resp_encoder+0x40>
	resp_init(raw, RESP_MOVE_END);
 8000db0:	2106      	movs	r1, #6
 8000db2:	68b8      	ldr	r0, [r7, #8]
 8000db4:	f7ff ffc7 	bl	8000d46 <resp_init>
	raw[2] = in->frameId;
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	3302      	adds	r3, #2
 8000dbc:	68fa      	ldr	r2, [r7, #12]
 8000dbe:	7812      	ldrb	r2, [r2, #0]
 8000dc0:	701a      	strb	r2, [r3, #0]
	resp_set_tail(raw, 3);
 8000dc2:	2103      	movs	r1, #3
 8000dc4:	68b8      	ldr	r0, [r7, #8]
 8000dc6:	f7ff ffd1 	bl	8000d6c <resp_set_tail>
	return PROTO_OK;
 8000dca:	2300      	movs	r3, #0
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	3710      	adds	r7, #16
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <xor_bit_reduce_bytes>:
static inline uint8_t xor_bit_reduce_bytes(const uint8_t *p, uint32_t n) {
 8000dd4:	b480      	push	{r7}
 8000dd6:	b085      	sub	sp, #20
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
 8000ddc:	6039      	str	r1, [r7, #0]
	uint8_t x = 0;
 8000dde:	2300      	movs	r3, #0
 8000de0:	73fb      	strb	r3, [r7, #15]
	for (uint32_t i = 0; i < n; ++i)
 8000de2:	2300      	movs	r3, #0
 8000de4:	60bb      	str	r3, [r7, #8]
 8000de6:	e009      	b.n	8000dfc <xor_bit_reduce_bytes+0x28>
		x ^= p[i];
 8000de8:	687a      	ldr	r2, [r7, #4]
 8000dea:	68bb      	ldr	r3, [r7, #8]
 8000dec:	4413      	add	r3, r2
 8000dee:	781a      	ldrb	r2, [r3, #0]
 8000df0:	7bfb      	ldrb	r3, [r7, #15]
 8000df2:	4053      	eors	r3, r2
 8000df4:	73fb      	strb	r3, [r7, #15]
	for (uint32_t i = 0; i < n; ++i)
 8000df6:	68bb      	ldr	r3, [r7, #8]
 8000df8:	3301      	adds	r3, #1
 8000dfa:	60bb      	str	r3, [r7, #8]
 8000dfc:	68ba      	ldr	r2, [r7, #8]
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	429a      	cmp	r2, r3
 8000e02:	d3f1      	bcc.n	8000de8 <xor_bit_reduce_bytes+0x14>
	x ^= (uint8_t) (x >> 4);
 8000e04:	7bfb      	ldrb	r3, [r7, #15]
 8000e06:	091b      	lsrs	r3, r3, #4
 8000e08:	b2da      	uxtb	r2, r3
 8000e0a:	7bfb      	ldrb	r3, [r7, #15]
 8000e0c:	4053      	eors	r3, r2
 8000e0e:	73fb      	strb	r3, [r7, #15]
	x ^= (uint8_t) (x >> 2);
 8000e10:	7bfb      	ldrb	r3, [r7, #15]
 8000e12:	089b      	lsrs	r3, r3, #2
 8000e14:	b2da      	uxtb	r2, r3
 8000e16:	7bfb      	ldrb	r3, [r7, #15]
 8000e18:	4053      	eors	r3, r2
 8000e1a:	73fb      	strb	r3, [r7, #15]
	x ^= (uint8_t) (x >> 1);
 8000e1c:	7bfb      	ldrb	r3, [r7, #15]
 8000e1e:	085b      	lsrs	r3, r3, #1
 8000e20:	b2da      	uxtb	r2, r3
 8000e22:	7bfb      	ldrb	r3, [r7, #15]
 8000e24:	4053      	eors	r3, r2
 8000e26:	73fb      	strb	r3, [r7, #15]
	return (uint8_t) (x & 0x1);
 8000e28:	7bfb      	ldrb	r3, [r7, #15]
 8000e2a:	f003 0301 	and.w	r3, r3, #1
 8000e2e:	b2db      	uxtb	r3, r3
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	3714      	adds	r7, #20
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr

08000e3c <set_parity_bit>:
		uint32_t parity_index) {
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	60f8      	str	r0, [r7, #12]
 8000e44:	60b9      	str	r1, [r7, #8]
 8000e46:	607a      	str	r2, [r7, #4]
 8000e48:	603b      	str	r3, [r7, #0]
	if (!raw)
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d102      	bne.n	8000e56 <set_parity_bit+0x1a>
		return -1;
 8000e50:	f04f 33ff 	mov.w	r3, #4294967295
 8000e54:	e010      	b.n	8000e78 <set_parity_bit+0x3c>
	raw[parity_index] = (uint8_t) (xor_bit_reduce_bytes(raw + start, count)
 8000e56:	68fa      	ldr	r2, [r7, #12]
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	4413      	add	r3, r2
 8000e5c:	6879      	ldr	r1, [r7, #4]
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f7ff ffb8 	bl	8000dd4 <xor_bit_reduce_bytes>
 8000e64:	4603      	mov	r3, r0
 8000e66:	4619      	mov	r1, r3
 8000e68:	68fa      	ldr	r2, [r7, #12]
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	4413      	add	r3, r2
 8000e6e:	f001 0201 	and.w	r2, r1, #1
 8000e72:	b2d2      	uxtb	r2, r2
 8000e74:	701a      	strb	r2, [r3, #0]
	return 0;
 8000e76:	2300      	movs	r3, #0
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	3710      	adds	r7, #16
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}

08000e80 <resp_init>:
static inline void resp_init(uint8_t *raw, resp_msg_type_t type) {
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
 8000e88:	460b      	mov	r3, r1
 8000e8a:	70fb      	strb	r3, [r7, #3]
	raw[0] = RESP_HEADER;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	22ab      	movs	r2, #171	@ 0xab
 8000e90:	701a      	strb	r2, [r3, #0]
	raw[1] = (uint8_t) type;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	3301      	adds	r3, #1
 8000e96:	78fa      	ldrb	r2, [r7, #3]
 8000e98:	701a      	strb	r2, [r3, #0]
}
 8000e9a:	bf00      	nop
 8000e9c:	370c      	adds	r7, #12
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr

08000ea6 <resp_set_tail>:
static inline void resp_set_tail(uint8_t *raw, uint32_t tail_index) {
 8000ea6:	b480      	push	{r7}
 8000ea8:	b083      	sub	sp, #12
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	6078      	str	r0, [r7, #4]
 8000eae:	6039      	str	r1, [r7, #0]
	raw[tail_index] = RESP_TAIL;
 8000eb0:	687a      	ldr	r2, [r7, #4]
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	4413      	add	r3, r2
 8000eb6:	2254      	movs	r2, #84	@ 0x54
 8000eb8:	701a      	strb	r2, [r3, #0]
}
 8000eba:	bf00      	nop
 8000ebc:	370c      	adds	r7, #12
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr

08000ec6 <parity_set_bit_1N>:
static inline int parity_check_byte_1N(const uint8_t *raw, uint32_t last_index,
		uint32_t parity_index) {
	return check_parity_byte(raw, 1, last_index, parity_index);
}
static inline int parity_set_bit_1N(uint8_t *raw, uint32_t last_index,
		uint32_t parity_index) {
 8000ec6:	b580      	push	{r7, lr}
 8000ec8:	b084      	sub	sp, #16
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	60f8      	str	r0, [r7, #12]
 8000ece:	60b9      	str	r1, [r7, #8]
 8000ed0:	607a      	str	r2, [r7, #4]
	return set_parity_bit(raw, 1, last_index, parity_index);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	68ba      	ldr	r2, [r7, #8]
 8000ed6:	2101      	movs	r1, #1
 8000ed8:	68f8      	ldr	r0, [r7, #12]
 8000eda:	f7ff ffaf 	bl	8000e3c <set_parity_bit>
 8000ede:	4603      	mov	r3, r0
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3710      	adds	r7, #16
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <move_queue_add_ack_resp_encoder>:
	uint8_t b[3] = { RESP_MOVE_QUEUE_ADD_ACK, in ? in->frameId : 0,
			in ? in->status : 0 };
	return xor_bit_reduce_bytes(b, 3);
}
int move_queue_add_ack_resp_encoder(const move_queue_add_ack_resp_t *in,
		uint8_t *raw, uint32_t len) {
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	60f8      	str	r0, [r7, #12]
 8000ef0:	60b9      	str	r1, [r7, #8]
 8000ef2:	607a      	str	r2, [r7, #4]
	if (!raw || !in || len < 6)
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d005      	beq.n	8000f06 <move_queue_add_ack_resp_encoder+0x1e>
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d002      	beq.n	8000f06 <move_queue_add_ack_resp_encoder+0x1e>
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2b05      	cmp	r3, #5
 8000f04:	d802      	bhi.n	8000f0c <move_queue_add_ack_resp_encoder+0x24>
		return PROTO_ERR_ARG;
 8000f06:	f04f 33ff 	mov.w	r3, #4294967295
 8000f0a:	e017      	b.n	8000f3c <move_queue_add_ack_resp_encoder+0x54>
	resp_init(raw, RESP_MOVE_QUEUE_ADD_ACK);
 8000f0c:	2101      	movs	r1, #1
 8000f0e:	68b8      	ldr	r0, [r7, #8]
 8000f10:	f7ff ffb6 	bl	8000e80 <resp_init>
	raw[2] = in->frameId;
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	3302      	adds	r3, #2
 8000f18:	68fa      	ldr	r2, [r7, #12]
 8000f1a:	7812      	ldrb	r2, [r2, #0]
 8000f1c:	701a      	strb	r2, [r3, #0]
	raw[3] = in->status;
 8000f1e:	68bb      	ldr	r3, [r7, #8]
 8000f20:	3303      	adds	r3, #3
 8000f22:	68fa      	ldr	r2, [r7, #12]
 8000f24:	7852      	ldrb	r2, [r2, #1]
 8000f26:	701a      	strb	r2, [r3, #0]
	parity_set_bit_1N(raw, 3, 4);
 8000f28:	2204      	movs	r2, #4
 8000f2a:	2103      	movs	r1, #3
 8000f2c:	68b8      	ldr	r0, [r7, #8]
 8000f2e:	f7ff ffca 	bl	8000ec6 <parity_set_bit_1N>
	resp_set_tail(raw, 5);
 8000f32:	2105      	movs	r1, #5
 8000f34:	68b8      	ldr	r0, [r7, #8]
 8000f36:	f7ff ffb6 	bl	8000ea6 <resp_set_tail>
	return PROTO_OK;
 8000f3a:	2300      	movs	r3, #0
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3710      	adds	r7, #16
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}

08000f44 <xor_bit_reduce_bytes>:
static inline uint8_t xor_bit_reduce_bytes(const uint8_t *p, uint32_t n) {
 8000f44:	b480      	push	{r7}
 8000f46:	b085      	sub	sp, #20
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	6039      	str	r1, [r7, #0]
	uint8_t x = 0;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	73fb      	strb	r3, [r7, #15]
	for (uint32_t i = 0; i < n; ++i)
 8000f52:	2300      	movs	r3, #0
 8000f54:	60bb      	str	r3, [r7, #8]
 8000f56:	e009      	b.n	8000f6c <xor_bit_reduce_bytes+0x28>
		x ^= p[i];
 8000f58:	687a      	ldr	r2, [r7, #4]
 8000f5a:	68bb      	ldr	r3, [r7, #8]
 8000f5c:	4413      	add	r3, r2
 8000f5e:	781a      	ldrb	r2, [r3, #0]
 8000f60:	7bfb      	ldrb	r3, [r7, #15]
 8000f62:	4053      	eors	r3, r2
 8000f64:	73fb      	strb	r3, [r7, #15]
	for (uint32_t i = 0; i < n; ++i)
 8000f66:	68bb      	ldr	r3, [r7, #8]
 8000f68:	3301      	adds	r3, #1
 8000f6a:	60bb      	str	r3, [r7, #8]
 8000f6c:	68ba      	ldr	r2, [r7, #8]
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	429a      	cmp	r2, r3
 8000f72:	d3f1      	bcc.n	8000f58 <xor_bit_reduce_bytes+0x14>
	x ^= (uint8_t) (x >> 4);
 8000f74:	7bfb      	ldrb	r3, [r7, #15]
 8000f76:	091b      	lsrs	r3, r3, #4
 8000f78:	b2da      	uxtb	r2, r3
 8000f7a:	7bfb      	ldrb	r3, [r7, #15]
 8000f7c:	4053      	eors	r3, r2
 8000f7e:	73fb      	strb	r3, [r7, #15]
	x ^= (uint8_t) (x >> 2);
 8000f80:	7bfb      	ldrb	r3, [r7, #15]
 8000f82:	089b      	lsrs	r3, r3, #2
 8000f84:	b2da      	uxtb	r2, r3
 8000f86:	7bfb      	ldrb	r3, [r7, #15]
 8000f88:	4053      	eors	r3, r2
 8000f8a:	73fb      	strb	r3, [r7, #15]
	x ^= (uint8_t) (x >> 1);
 8000f8c:	7bfb      	ldrb	r3, [r7, #15]
 8000f8e:	085b      	lsrs	r3, r3, #1
 8000f90:	b2da      	uxtb	r2, r3
 8000f92:	7bfb      	ldrb	r3, [r7, #15]
 8000f94:	4053      	eors	r3, r2
 8000f96:	73fb      	strb	r3, [r7, #15]
	return (uint8_t) (x & 0x1);
 8000f98:	7bfb      	ldrb	r3, [r7, #15]
 8000f9a:	f003 0301 	and.w	r3, r3, #1
 8000f9e:	b2db      	uxtb	r3, r3
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3714      	adds	r7, #20
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr

08000fac <set_parity_bit>:
		uint32_t parity_index) {
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	60f8      	str	r0, [r7, #12]
 8000fb4:	60b9      	str	r1, [r7, #8]
 8000fb6:	607a      	str	r2, [r7, #4]
 8000fb8:	603b      	str	r3, [r7, #0]
	if (!raw)
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d102      	bne.n	8000fc6 <set_parity_bit+0x1a>
		return -1;
 8000fc0:	f04f 33ff 	mov.w	r3, #4294967295
 8000fc4:	e010      	b.n	8000fe8 <set_parity_bit+0x3c>
	raw[parity_index] = (uint8_t) (xor_bit_reduce_bytes(raw + start, count)
 8000fc6:	68fa      	ldr	r2, [r7, #12]
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	4413      	add	r3, r2
 8000fcc:	6879      	ldr	r1, [r7, #4]
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f7ff ffb8 	bl	8000f44 <xor_bit_reduce_bytes>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	68fa      	ldr	r2, [r7, #12]
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	4413      	add	r3, r2
 8000fde:	f001 0201 	and.w	r2, r1, #1
 8000fe2:	b2d2      	uxtb	r2, r2
 8000fe4:	701a      	strb	r2, [r3, #0]
	return 0;
 8000fe6:	2300      	movs	r3, #0
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3710      	adds	r7, #16
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}

08000ff0 <resp_init>:
static inline void resp_init(uint8_t *raw, resp_msg_type_t type) {
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	70fb      	strb	r3, [r7, #3]
	raw[0] = RESP_HEADER;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	22ab      	movs	r2, #171	@ 0xab
 8001000:	701a      	strb	r2, [r3, #0]
	raw[1] = (uint8_t) type;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	3301      	adds	r3, #1
 8001006:	78fa      	ldrb	r2, [r7, #3]
 8001008:	701a      	strb	r2, [r3, #0]
}
 800100a:	bf00      	nop
 800100c:	370c      	adds	r7, #12
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr

08001016 <resp_set_tail>:
static inline void resp_set_tail(uint8_t *raw, uint32_t tail_index) {
 8001016:	b480      	push	{r7}
 8001018:	b083      	sub	sp, #12
 800101a:	af00      	add	r7, sp, #0
 800101c:	6078      	str	r0, [r7, #4]
 800101e:	6039      	str	r1, [r7, #0]
	raw[tail_index] = RESP_TAIL;
 8001020:	687a      	ldr	r2, [r7, #4]
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	4413      	add	r3, r2
 8001026:	2254      	movs	r2, #84	@ 0x54
 8001028:	701a      	strb	r2, [r3, #0]
}
 800102a:	bf00      	nop
 800102c:	370c      	adds	r7, #12
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr

08001036 <parity_set_bit_1N>:
		uint32_t parity_index) {
 8001036:	b580      	push	{r7, lr}
 8001038:	b084      	sub	sp, #16
 800103a:	af00      	add	r7, sp, #0
 800103c:	60f8      	str	r0, [r7, #12]
 800103e:	60b9      	str	r1, [r7, #8]
 8001040:	607a      	str	r2, [r7, #4]
	return set_parity_bit(raw, 1, last_index, parity_index);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	68ba      	ldr	r2, [r7, #8]
 8001046:	2101      	movs	r1, #1
 8001048:	68f8      	ldr	r0, [r7, #12]
 800104a:	f7ff ffaf 	bl	8000fac <set_parity_bit>
 800104e:	4603      	mov	r3, r0
}
 8001050:	4618      	mov	r0, r3
 8001052:	3710      	adds	r7, #16
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}

08001058 <move_queue_status_resp_encoder>:
			in ? in->pidErrZ : 0, in ? in->pctX : 0, in ? in->pctY : 0,
			in ? in->pctZ : 0 };
	return xor_bit_reduce_bytes(b, 9);
}
int move_queue_status_resp_encoder(const move_queue_status_resp_t *in,
		uint8_t *raw, uint32_t len) {
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	60f8      	str	r0, [r7, #12]
 8001060:	60b9      	str	r1, [r7, #8]
 8001062:	607a      	str	r2, [r7, #4]
	if (!raw || !in || len < 12)
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d005      	beq.n	8001076 <move_queue_status_resp_encoder+0x1e>
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d002      	beq.n	8001076 <move_queue_status_resp_encoder+0x1e>
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2b0b      	cmp	r3, #11
 8001074:	d802      	bhi.n	800107c <move_queue_status_resp_encoder+0x24>
		return PROTO_ERR_ARG;
 8001076:	f04f 33ff 	mov.w	r3, #4294967295
 800107a:	e035      	b.n	80010e8 <move_queue_status_resp_encoder+0x90>
	resp_init(raw, RESP_MOVE_QUEUE_STATUS);
 800107c:	2102      	movs	r1, #2
 800107e:	68b8      	ldr	r0, [r7, #8]
 8001080:	f7ff ffb6 	bl	8000ff0 <resp_init>
	raw[2] = in->frameId;
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	3302      	adds	r3, #2
 8001088:	68fa      	ldr	r2, [r7, #12]
 800108a:	7812      	ldrb	r2, [r2, #0]
 800108c:	701a      	strb	r2, [r3, #0]
	raw[3] = in->status;
 800108e:	68bb      	ldr	r3, [r7, #8]
 8001090:	3303      	adds	r3, #3
 8001092:	68fa      	ldr	r2, [r7, #12]
 8001094:	7852      	ldrb	r2, [r2, #1]
 8001096:	701a      	strb	r2, [r3, #0]
	raw[4] = in->pidErrX;
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	3304      	adds	r3, #4
 800109c:	68fa      	ldr	r2, [r7, #12]
 800109e:	7892      	ldrb	r2, [r2, #2]
 80010a0:	701a      	strb	r2, [r3, #0]
	raw[5] = in->pidErrY;
 80010a2:	68bb      	ldr	r3, [r7, #8]
 80010a4:	3305      	adds	r3, #5
 80010a6:	68fa      	ldr	r2, [r7, #12]
 80010a8:	78d2      	ldrb	r2, [r2, #3]
 80010aa:	701a      	strb	r2, [r3, #0]
	raw[6] = in->pidErrZ;
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	3306      	adds	r3, #6
 80010b0:	68fa      	ldr	r2, [r7, #12]
 80010b2:	7912      	ldrb	r2, [r2, #4]
 80010b4:	701a      	strb	r2, [r3, #0]
	raw[7] = in->pctX;
 80010b6:	68bb      	ldr	r3, [r7, #8]
 80010b8:	3307      	adds	r3, #7
 80010ba:	68fa      	ldr	r2, [r7, #12]
 80010bc:	7952      	ldrb	r2, [r2, #5]
 80010be:	701a      	strb	r2, [r3, #0]
	raw[8] = in->pctY;
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	3308      	adds	r3, #8
 80010c4:	68fa      	ldr	r2, [r7, #12]
 80010c6:	7992      	ldrb	r2, [r2, #6]
 80010c8:	701a      	strb	r2, [r3, #0]
	raw[9] = in->pctZ;
 80010ca:	68bb      	ldr	r3, [r7, #8]
 80010cc:	3309      	adds	r3, #9
 80010ce:	68fa      	ldr	r2, [r7, #12]
 80010d0:	79d2      	ldrb	r2, [r2, #7]
 80010d2:	701a      	strb	r2, [r3, #0]
	parity_set_bit_1N(raw, 9, 10);
 80010d4:	220a      	movs	r2, #10
 80010d6:	2109      	movs	r1, #9
 80010d8:	68b8      	ldr	r0, [r7, #8]
 80010da:	f7ff ffac 	bl	8001036 <parity_set_bit_1N>
	resp_set_tail(raw, 11);
 80010de:	210b      	movs	r1, #11
 80010e0:	68b8      	ldr	r0, [r7, #8]
 80010e2:	f7ff ff98 	bl	8001016 <resp_set_tail>
	return PROTO_OK;
 80010e6:	2300      	movs	r3, #0
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	3710      	adds	r7, #16
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <resp_init>:
static inline void resp_init(uint8_t *raw, resp_msg_type_t type) {
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	460b      	mov	r3, r1
 80010fa:	70fb      	strb	r3, [r7, #3]
	raw[0] = RESP_HEADER;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	22ab      	movs	r2, #171	@ 0xab
 8001100:	701a      	strb	r2, [r3, #0]
	raw[1] = (uint8_t) type;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	3301      	adds	r3, #1
 8001106:	78fa      	ldrb	r2, [r7, #3]
 8001108:	701a      	strb	r2, [r3, #0]
}
 800110a:	bf00      	nop
 800110c:	370c      	adds	r7, #12
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr

08001116 <resp_set_tail>:
static inline void resp_set_tail(uint8_t *raw, uint32_t tail_index) {
 8001116:	b480      	push	{r7}
 8001118:	b083      	sub	sp, #12
 800111a:	af00      	add	r7, sp, #0
 800111c:	6078      	str	r0, [r7, #4]
 800111e:	6039      	str	r1, [r7, #0]
	raw[tail_index] = RESP_TAIL;
 8001120:	687a      	ldr	r2, [r7, #4]
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	4413      	add	r3, r2
 8001126:	2254      	movs	r2, #84	@ 0x54
 8001128:	701a      	strb	r2, [r3, #0]
}
 800112a:	bf00      	nop
 800112c:	370c      	adds	r7, #12
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr

08001136 <start_move_resp_encoder>:
		return st;
	out->frameId = raw[2];
	return PROTO_OK;
}
int start_move_resp_encoder(const start_move_resp_t *in, uint8_t *raw,
		uint32_t len) {
 8001136:	b580      	push	{r7, lr}
 8001138:	b084      	sub	sp, #16
 800113a:	af00      	add	r7, sp, #0
 800113c:	60f8      	str	r0, [r7, #12]
 800113e:	60b9      	str	r1, [r7, #8]
 8001140:	607a      	str	r2, [r7, #4]
	if (!raw || !in || len < 4)
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d005      	beq.n	8001154 <start_move_resp_encoder+0x1e>
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d002      	beq.n	8001154 <start_move_resp_encoder+0x1e>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2b03      	cmp	r3, #3
 8001152:	d802      	bhi.n	800115a <start_move_resp_encoder+0x24>
		return PROTO_ERR_ARG;
 8001154:	f04f 33ff 	mov.w	r3, #4294967295
 8001158:	e00d      	b.n	8001176 <start_move_resp_encoder+0x40>
	resp_init(raw, RESP_START_MOVE);
 800115a:	2103      	movs	r1, #3
 800115c:	68b8      	ldr	r0, [r7, #8]
 800115e:	f7ff ffc7 	bl	80010f0 <resp_init>
	raw[2] = in->frameId;
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	3302      	adds	r3, #2
 8001166:	68fa      	ldr	r2, [r7, #12]
 8001168:	7812      	ldrb	r2, [r2, #0]
 800116a:	701a      	strb	r2, [r3, #0]
	resp_set_tail(raw, 3);
 800116c:	2103      	movs	r1, #3
 800116e:	68b8      	ldr	r0, [r7, #8]
 8001170:	f7ff ffd1 	bl	8001116 <resp_set_tail>
	return PROTO_OK;
 8001174:	2300      	movs	r3, #0
}
 8001176:	4618      	mov	r0, r3
 8001178:	3710      	adds	r7, #16
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}

0800117e <resp_fifo_create>:
struct response_fifo_s {
    node_t *head, *tail;
    int count;
};

response_fifo_t* resp_fifo_create(void) {
 800117e:	b580      	push	{r7, lr}
 8001180:	af00      	add	r7, sp, #0
    return (response_fifo_t*)calloc(1, sizeof(response_fifo_t));
 8001182:	210c      	movs	r1, #12
 8001184:	2001      	movs	r0, #1
 8001186:	f00c fe07 	bl	800dd98 <calloc>
 800118a:	4603      	mov	r3, r0
}
 800118c:	4618      	mov	r0, r3
 800118e:	bd80      	pop	{r7, pc}

08001190 <resp_fifo_push>:
        free(n);
    }
    free(q);
}

int resp_fifo_push(response_fifo_t *q, const uint8_t *frame, uint32_t len) {
 8001190:	b580      	push	{r7, lr}
 8001192:	b086      	sub	sp, #24
 8001194:	af00      	add	r7, sp, #0
 8001196:	60f8      	str	r0, [r7, #12]
 8001198:	60b9      	str	r1, [r7, #8]
 800119a:	607a      	str	r2, [r7, #4]
    if (!q || !frame || len == 0) return PROTO_ERR_ARG;
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d005      	beq.n	80011ae <resp_fifo_push+0x1e>
 80011a2:	68bb      	ldr	r3, [r7, #8]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d002      	beq.n	80011ae <resp_fifo_push+0x1e>
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d102      	bne.n	80011b4 <resp_fifo_push+0x24>
 80011ae:	f04f 33ff 	mov.w	r3, #4294967295
 80011b2:	e03d      	b.n	8001230 <resp_fifo_push+0xa0>
    node_t *n = (node_t*)malloc(sizeof(*n));
 80011b4:	200c      	movs	r0, #12
 80011b6:	f00c fe0b 	bl	800ddd0 <malloc>
 80011ba:	4603      	mov	r3, r0
 80011bc:	617b      	str	r3, [r7, #20]
    if (!n) return PROTO_ERR_ALLOC;
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d102      	bne.n	80011ca <resp_fifo_push+0x3a>
 80011c4:	f06f 0302 	mvn.w	r3, #2
 80011c8:	e032      	b.n	8001230 <resp_fifo_push+0xa0>
    n->buf = (uint8_t*)malloc(len);
 80011ca:	6878      	ldr	r0, [r7, #4]
 80011cc:	f00c fe00 	bl	800ddd0 <malloc>
 80011d0:	4603      	mov	r3, r0
 80011d2:	461a      	mov	r2, r3
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	601a      	str	r2, [r3, #0]
    if (!n->buf) { free(n); return PROTO_ERR_ALLOC; }
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d105      	bne.n	80011ec <resp_fifo_push+0x5c>
 80011e0:	6978      	ldr	r0, [r7, #20]
 80011e2:	f00c fdfd 	bl	800dde0 <free>
 80011e6:	f06f 0302 	mvn.w	r3, #2
 80011ea:	e021      	b.n	8001230 <resp_fifo_push+0xa0>
    memcpy(n->buf, frame, len);
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	687a      	ldr	r2, [r7, #4]
 80011f2:	68b9      	ldr	r1, [r7, #8]
 80011f4:	4618      	mov	r0, r3
 80011f6:	f00d fa2e 	bl	800e656 <memcpy>
    n->len = len;
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	687a      	ldr	r2, [r7, #4]
 80011fe:	605a      	str	r2, [r3, #4]
    n->next = NULL;
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	2200      	movs	r2, #0
 8001204:	609a      	str	r2, [r3, #8]
    if (q->tail) q->tail->next = n; else q->head = n;
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d004      	beq.n	8001218 <resp_fifo_push+0x88>
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	697a      	ldr	r2, [r7, #20]
 8001214:	609a      	str	r2, [r3, #8]
 8001216:	e002      	b.n	800121e <resp_fifo_push+0x8e>
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	697a      	ldr	r2, [r7, #20]
 800121c:	601a      	str	r2, [r3, #0]
    q->tail = n;
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	697a      	ldr	r2, [r7, #20]
 8001222:	605a      	str	r2, [r3, #4]
    q->count++;
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	689b      	ldr	r3, [r3, #8]
 8001228:	1c5a      	adds	r2, r3, #1
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	609a      	str	r2, [r3, #8]
    return PROTO_OK;
 800122e:	2300      	movs	r3, #0
}
 8001230:	4618      	mov	r0, r3
 8001232:	3718      	adds	r7, #24
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}

08001238 <resp_fifo_pop>:

int resp_fifo_pop(response_fifo_t *q, uint8_t *out, uint32_t max_len) {
 8001238:	b580      	push	{r7, lr}
 800123a:	b086      	sub	sp, #24
 800123c:	af00      	add	r7, sp, #0
 800123e:	60f8      	str	r0, [r7, #12]
 8001240:	60b9      	str	r1, [r7, #8]
 8001242:	607a      	str	r2, [r7, #4]
    if (!q || !q->head || !out) return 0;
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d006      	beq.n	8001258 <resp_fifo_pop+0x20>
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d002      	beq.n	8001258 <resp_fifo_pop+0x20>
 8001252:	68bb      	ldr	r3, [r7, #8]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d101      	bne.n	800125c <resp_fifo_pop+0x24>
 8001258:	2300      	movs	r3, #0
 800125a:	e02e      	b.n	80012ba <resp_fifo_pop+0x82>
    node_t *n = q->head;
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	617b      	str	r3, [r7, #20]
    if (n->len > max_len) return PROTO_ERR_RANGE;
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	687a      	ldr	r2, [r7, #4]
 8001268:	429a      	cmp	r2, r3
 800126a:	d202      	bcs.n	8001272 <resp_fifo_pop+0x3a>
 800126c:	f06f 0303 	mvn.w	r3, #3
 8001270:	e023      	b.n	80012ba <resp_fifo_pop+0x82>
    memcpy(out, n->buf, n->len);
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	6819      	ldr	r1, [r3, #0]
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	461a      	mov	r2, r3
 800127c:	68b8      	ldr	r0, [r7, #8]
 800127e:	f00d f9ea 	bl	800e656 <memcpy>
    int ret = (int)n->len;
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	613b      	str	r3, [r7, #16]
    q->head = n->next;
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	689a      	ldr	r2, [r3, #8]
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	601a      	str	r2, [r3, #0]
    if (!q->head) q->tail = NULL;
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d102      	bne.n	800129e <resp_fifo_pop+0x66>
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	2200      	movs	r2, #0
 800129c:	605a      	str	r2, [r3, #4]
    q->count--;
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	1e5a      	subs	r2, r3, #1
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	609a      	str	r2, [r3, #8]
    free(n->buf);
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4618      	mov	r0, r3
 80012ae:	f00c fd97 	bl	800dde0 <free>
    free(n);
 80012b2:	6978      	ldr	r0, [r7, #20]
 80012b4:	f00c fd94 	bl	800dde0 <free>
    return ret;
 80012b8:	693b      	ldr	r3, [r7, #16]
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3718      	adds	r7, #24
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
	...

080012c4 <router_init>:
int resp_fifo_count(const response_fifo_t *q) { return q ? q->count : 0; }

// ---------- Router mínimo ----------
static router_handlers_t g_handlers;  // cópia local dos handlers

void router_init(router_t *r, response_fifo_t *resp_fifo, const router_handlers_t *h) {
 80012c4:	b5b0      	push	{r4, r5, r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	60f8      	str	r0, [r7, #12]
 80012cc:	60b9      	str	r1, [r7, #8]
 80012ce:	607a      	str	r2, [r7, #4]
    if (!r) return;
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d01a      	beq.n	800130c <router_init+0x48>
    memset(r, 0, sizeof(*r));
 80012d6:	2248      	movs	r2, #72	@ 0x48
 80012d8:	2100      	movs	r1, #0
 80012da:	68f8      	ldr	r0, [r7, #12]
 80012dc:	f00d f930 	bl	800e540 <memset>
    r->resp = resp_fifo;
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	68ba      	ldr	r2, [r7, #8]
 80012e4:	645a      	str	r2, [r3, #68]	@ 0x44
    memset(&g_handlers, 0, sizeof g_handlers);
 80012e6:	2224      	movs	r2, #36	@ 0x24
 80012e8:	2100      	movs	r1, #0
 80012ea:	480a      	ldr	r0, [pc, #40]	@ (8001314 <router_init+0x50>)
 80012ec:	f00d f928 	bl	800e540 <memset>
    if (h) g_handlers = *h;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d00b      	beq.n	800130e <router_init+0x4a>
 80012f6:	4a07      	ldr	r2, [pc, #28]	@ (8001314 <router_init+0x50>)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	4614      	mov	r4, r2
 80012fc:	461d      	mov	r5, r3
 80012fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001300:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001302:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001304:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001306:	682b      	ldr	r3, [r5, #0]
 8001308:	6023      	str	r3, [r4, #0]
 800130a:	e000      	b.n	800130e <router_init+0x4a>
    if (!r) return;
 800130c:	bf00      	nop
}
 800130e:	3710      	adds	r7, #16
 8001310:	46bd      	mov	sp, r7
 8001312:	bdb0      	pop	{r4, r5, r7, pc}
 8001314:	2000009c 	.word	0x2000009c

08001318 <dispatch>:

static void dispatch(router_t *r, const uint8_t *f, uint32_t len) {
 8001318:	b580      	push	{r7, lr}
 800131a:	b086      	sub	sp, #24
 800131c:	af00      	add	r7, sp, #0
 800131e:	60f8      	str	r0, [r7, #12]
 8001320:	60b9      	str	r1, [r7, #8]
 8001322:	607a      	str	r2, [r7, #4]
    if (!r || !f || len < 4) return;
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	2b00      	cmp	r3, #0
 8001328:	f000 80c0 	beq.w	80014ac <dispatch+0x194>
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	2b00      	cmp	r3, #0
 8001330:	f000 80bc 	beq.w	80014ac <dispatch+0x194>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2b03      	cmp	r3, #3
 8001338:	f240 80b8 	bls.w	80014ac <dispatch+0x194>
    uint8_t type = f[1];
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	3301      	adds	r3, #1
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	75fb      	strb	r3, [r7, #23]

    // Helper pra reduzir ruído
    #define CALL(h) do{ if (g_handlers.h) g_handlers.h(r, f, len); }while(0)

    switch (type) {
 8001344:	7dfb      	ldrb	r3, [r7, #23]
 8001346:	2b20      	cmp	r3, #32
 8001348:	dc4a      	bgt.n	80013e0 <dispatch+0xc8>
 800134a:	2b00      	cmp	r3, #0
 800134c:	f340 80b0 	ble.w	80014b0 <dispatch+0x198>
 8001350:	3b01      	subs	r3, #1
 8001352:	2b1f      	cmp	r3, #31
 8001354:	f200 80ac 	bhi.w	80014b0 <dispatch+0x198>
 8001358:	a201      	add	r2, pc, #4	@ (adr r2, 8001360 <dispatch+0x48>)
 800135a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800135e:	bf00      	nop
 8001360:	080013e7 	.word	0x080013e7
 8001364:	080013fd 	.word	0x080013fd
 8001368:	08001413 	.word	0x08001413
 800136c:	08001429 	.word	0x08001429
 8001370:	0800143f 	.word	0x0800143f
 8001374:	08001455 	.word	0x08001455
 8001378:	0800146b 	.word	0x0800146b
 800137c:	080014b1 	.word	0x080014b1
 8001380:	080014b1 	.word	0x080014b1
 8001384:	080014b1 	.word	0x080014b1
 8001388:	080014b1 	.word	0x080014b1
 800138c:	080014b1 	.word	0x080014b1
 8001390:	080014b1 	.word	0x080014b1
 8001394:	080014b1 	.word	0x080014b1
 8001398:	080014b1 	.word	0x080014b1
 800139c:	080014b1 	.word	0x080014b1
 80013a0:	080014b1 	.word	0x080014b1
 80013a4:	080014b1 	.word	0x080014b1
 80013a8:	080014b1 	.word	0x080014b1
 80013ac:	080014b1 	.word	0x080014b1
 80013b0:	080014b1 	.word	0x080014b1
 80013b4:	080014b1 	.word	0x080014b1
 80013b8:	080014b1 	.word	0x080014b1
 80013bc:	080014b1 	.word	0x080014b1
 80013c0:	080014b1 	.word	0x080014b1
 80013c4:	080014b1 	.word	0x080014b1
 80013c8:	080014b1 	.word	0x080014b1
 80013cc:	080014b1 	.word	0x080014b1
 80013d0:	080014b1 	.word	0x080014b1
 80013d4:	080014b1 	.word	0x080014b1
 80013d8:	080014b1 	.word	0x080014b1
 80013dc:	08001481 	.word	0x08001481
 80013e0:	2b68      	cmp	r3, #104	@ 0x68
 80013e2:	d058      	beq.n	8001496 <dispatch+0x17e>
        case REQ_MOVE_PROBE_LEVEL:   CALL(on_move_probe_level);   break;
        case REQ_MOVE_END:           CALL(on_move_end);           break;
        case REQ_LED_CTRL:           CALL(on_led_ctrl);           break;
        case REQ_FPGA_STATUS:        CALL(on_fpga_status);        break;
        case REQ_TEST_HELLO:         CALL(on_test_hello);         break;
        default: /* desconhecido */  break;
 80013e4:	e064      	b.n	80014b0 <dispatch+0x198>
        case REQ_MOVE_QUEUE_ADD:     CALL(on_move_queue_add);     break;
 80013e6:	4b3d      	ldr	r3, [pc, #244]	@ (80014dc <dispatch+0x1c4>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d062      	beq.n	80014b4 <dispatch+0x19c>
 80013ee:	4b3b      	ldr	r3, [pc, #236]	@ (80014dc <dispatch+0x1c4>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	687a      	ldr	r2, [r7, #4]
 80013f4:	68b9      	ldr	r1, [r7, #8]
 80013f6:	68f8      	ldr	r0, [r7, #12]
 80013f8:	4798      	blx	r3
 80013fa:	e05b      	b.n	80014b4 <dispatch+0x19c>
        case REQ_MOVE_QUEUE_STATUS:  CALL(on_move_queue_status);  break;
 80013fc:	4b37      	ldr	r3, [pc, #220]	@ (80014dc <dispatch+0x1c4>)
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d059      	beq.n	80014b8 <dispatch+0x1a0>
 8001404:	4b35      	ldr	r3, [pc, #212]	@ (80014dc <dispatch+0x1c4>)
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	687a      	ldr	r2, [r7, #4]
 800140a:	68b9      	ldr	r1, [r7, #8]
 800140c:	68f8      	ldr	r0, [r7, #12]
 800140e:	4798      	blx	r3
 8001410:	e052      	b.n	80014b8 <dispatch+0x1a0>
        case REQ_START_MOVE:         CALL(on_start_move);         break;
 8001412:	4b32      	ldr	r3, [pc, #200]	@ (80014dc <dispatch+0x1c4>)
 8001414:	689b      	ldr	r3, [r3, #8]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d050      	beq.n	80014bc <dispatch+0x1a4>
 800141a:	4b30      	ldr	r3, [pc, #192]	@ (80014dc <dispatch+0x1c4>)
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	687a      	ldr	r2, [r7, #4]
 8001420:	68b9      	ldr	r1, [r7, #8]
 8001422:	68f8      	ldr	r0, [r7, #12]
 8001424:	4798      	blx	r3
 8001426:	e049      	b.n	80014bc <dispatch+0x1a4>
        case REQ_MOVE_HOME:          CALL(on_move_home);          break;
 8001428:	4b2c      	ldr	r3, [pc, #176]	@ (80014dc <dispatch+0x1c4>)
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d047      	beq.n	80014c0 <dispatch+0x1a8>
 8001430:	4b2a      	ldr	r3, [pc, #168]	@ (80014dc <dispatch+0x1c4>)
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	687a      	ldr	r2, [r7, #4]
 8001436:	68b9      	ldr	r1, [r7, #8]
 8001438:	68f8      	ldr	r0, [r7, #12]
 800143a:	4798      	blx	r3
 800143c:	e040      	b.n	80014c0 <dispatch+0x1a8>
        case REQ_MOVE_PROBE_LEVEL:   CALL(on_move_probe_level);   break;
 800143e:	4b27      	ldr	r3, [pc, #156]	@ (80014dc <dispatch+0x1c4>)
 8001440:	691b      	ldr	r3, [r3, #16]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d03e      	beq.n	80014c4 <dispatch+0x1ac>
 8001446:	4b25      	ldr	r3, [pc, #148]	@ (80014dc <dispatch+0x1c4>)
 8001448:	691b      	ldr	r3, [r3, #16]
 800144a:	687a      	ldr	r2, [r7, #4]
 800144c:	68b9      	ldr	r1, [r7, #8]
 800144e:	68f8      	ldr	r0, [r7, #12]
 8001450:	4798      	blx	r3
 8001452:	e037      	b.n	80014c4 <dispatch+0x1ac>
        case REQ_MOVE_END:           CALL(on_move_end);           break;
 8001454:	4b21      	ldr	r3, [pc, #132]	@ (80014dc <dispatch+0x1c4>)
 8001456:	695b      	ldr	r3, [r3, #20]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d035      	beq.n	80014c8 <dispatch+0x1b0>
 800145c:	4b1f      	ldr	r3, [pc, #124]	@ (80014dc <dispatch+0x1c4>)
 800145e:	695b      	ldr	r3, [r3, #20]
 8001460:	687a      	ldr	r2, [r7, #4]
 8001462:	68b9      	ldr	r1, [r7, #8]
 8001464:	68f8      	ldr	r0, [r7, #12]
 8001466:	4798      	blx	r3
 8001468:	e02e      	b.n	80014c8 <dispatch+0x1b0>
        case REQ_LED_CTRL:           CALL(on_led_ctrl);           break;
 800146a:	4b1c      	ldr	r3, [pc, #112]	@ (80014dc <dispatch+0x1c4>)
 800146c:	699b      	ldr	r3, [r3, #24]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d02c      	beq.n	80014cc <dispatch+0x1b4>
 8001472:	4b1a      	ldr	r3, [pc, #104]	@ (80014dc <dispatch+0x1c4>)
 8001474:	699b      	ldr	r3, [r3, #24]
 8001476:	687a      	ldr	r2, [r7, #4]
 8001478:	68b9      	ldr	r1, [r7, #8]
 800147a:	68f8      	ldr	r0, [r7, #12]
 800147c:	4798      	blx	r3
 800147e:	e025      	b.n	80014cc <dispatch+0x1b4>
        case REQ_FPGA_STATUS:        CALL(on_fpga_status);        break;
 8001480:	4b16      	ldr	r3, [pc, #88]	@ (80014dc <dispatch+0x1c4>)
 8001482:	69db      	ldr	r3, [r3, #28]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d023      	beq.n	80014d0 <dispatch+0x1b8>
 8001488:	4b14      	ldr	r3, [pc, #80]	@ (80014dc <dispatch+0x1c4>)
 800148a:	69db      	ldr	r3, [r3, #28]
 800148c:	687a      	ldr	r2, [r7, #4]
 800148e:	68b9      	ldr	r1, [r7, #8]
 8001490:	68f8      	ldr	r0, [r7, #12]
 8001492:	4798      	blx	r3
 8001494:	e01c      	b.n	80014d0 <dispatch+0x1b8>
        case REQ_TEST_HELLO:         CALL(on_test_hello);         break;
 8001496:	4b11      	ldr	r3, [pc, #68]	@ (80014dc <dispatch+0x1c4>)
 8001498:	6a1b      	ldr	r3, [r3, #32]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d01a      	beq.n	80014d4 <dispatch+0x1bc>
 800149e:	4b0f      	ldr	r3, [pc, #60]	@ (80014dc <dispatch+0x1c4>)
 80014a0:	6a1b      	ldr	r3, [r3, #32]
 80014a2:	687a      	ldr	r2, [r7, #4]
 80014a4:	68b9      	ldr	r1, [r7, #8]
 80014a6:	68f8      	ldr	r0, [r7, #12]
 80014a8:	4798      	blx	r3
 80014aa:	e013      	b.n	80014d4 <dispatch+0x1bc>
    if (!r || !f || len < 4) return;
 80014ac:	bf00      	nop
 80014ae:	e012      	b.n	80014d6 <dispatch+0x1be>
        default: /* desconhecido */  break;
 80014b0:	bf00      	nop
 80014b2:	e010      	b.n	80014d6 <dispatch+0x1be>
        case REQ_MOVE_QUEUE_ADD:     CALL(on_move_queue_add);     break;
 80014b4:	bf00      	nop
 80014b6:	e00e      	b.n	80014d6 <dispatch+0x1be>
        case REQ_MOVE_QUEUE_STATUS:  CALL(on_move_queue_status);  break;
 80014b8:	bf00      	nop
 80014ba:	e00c      	b.n	80014d6 <dispatch+0x1be>
        case REQ_START_MOVE:         CALL(on_start_move);         break;
 80014bc:	bf00      	nop
 80014be:	e00a      	b.n	80014d6 <dispatch+0x1be>
        case REQ_MOVE_HOME:          CALL(on_move_home);          break;
 80014c0:	bf00      	nop
 80014c2:	e008      	b.n	80014d6 <dispatch+0x1be>
        case REQ_MOVE_PROBE_LEVEL:   CALL(on_move_probe_level);   break;
 80014c4:	bf00      	nop
 80014c6:	e006      	b.n	80014d6 <dispatch+0x1be>
        case REQ_MOVE_END:           CALL(on_move_end);           break;
 80014c8:	bf00      	nop
 80014ca:	e004      	b.n	80014d6 <dispatch+0x1be>
        case REQ_LED_CTRL:           CALL(on_led_ctrl);           break;
 80014cc:	bf00      	nop
 80014ce:	e002      	b.n	80014d6 <dispatch+0x1be>
        case REQ_FPGA_STATUS:        CALL(on_fpga_status);        break;
 80014d0:	bf00      	nop
 80014d2:	e000      	b.n	80014d6 <dispatch+0x1be>
        case REQ_TEST_HELLO:         CALL(on_test_hello);         break;
 80014d4:	bf00      	nop
    }
    #undef CALL
}
 80014d6:	3718      	adds	r7, #24
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	2000009c 	.word	0x2000009c

080014e0 <router_feed_bytes>:

// Como o app já entrega um frame completo, basta validar header/tail e despachar.
void router_feed_bytes(router_t *r, const uint8_t *data, uint32_t len) {
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	60f8      	str	r0, [r7, #12]
 80014e8:	60b9      	str	r1, [r7, #8]
 80014ea:	607a      	str	r2, [r7, #4]
    if (!r || !data || len < 4) return;
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d016      	beq.n	8001520 <router_feed_bytes+0x40>
 80014f2:	68bb      	ldr	r3, [r7, #8]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d013      	beq.n	8001520 <router_feed_bytes+0x40>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2b03      	cmp	r3, #3
 80014fc:	d910      	bls.n	8001520 <router_feed_bytes+0x40>
    if (data[0] != REQ_HEADER) return;
 80014fe:	68bb      	ldr	r3, [r7, #8]
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	2baa      	cmp	r3, #170	@ 0xaa
 8001504:	d10e      	bne.n	8001524 <router_feed_bytes+0x44>
    if (data[len - 1] != REQ_TAIL) return;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	3b01      	subs	r3, #1
 800150a:	68ba      	ldr	r2, [r7, #8]
 800150c:	4413      	add	r3, r2
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	2b55      	cmp	r3, #85	@ 0x55
 8001512:	d109      	bne.n	8001528 <router_feed_bytes+0x48>
    dispatch(r, data, len);
 8001514:	687a      	ldr	r2, [r7, #4]
 8001516:	68b9      	ldr	r1, [r7, #8]
 8001518:	68f8      	ldr	r0, [r7, #12]
 800151a:	f7ff fefd 	bl	8001318 <dispatch>
 800151e:	e004      	b.n	800152a <router_feed_bytes+0x4a>
    if (!r || !data || len < 4) return;
 8001520:	bf00      	nop
 8001522:	e002      	b.n	800152a <router_feed_bytes+0x4a>
    if (data[0] != REQ_HEADER) return;
 8001524:	bf00      	nop
 8001526:	e000      	b.n	800152a <router_feed_bytes+0x4a>
    if (data[len - 1] != REQ_TAIL) return;
 8001528:	bf00      	nop
}
 800152a:	3710      	adds	r7, #16
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}

08001530 <home_service_init>:

LOG_SVC_DEFINE(LOG_SVC_HOME, "home");

static home_status_t g_home;

void home_service_init(void) {
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af04      	add	r7, sp, #16
	g_home.axis_done_mask = 0;
 8001536:	4b0b      	ldr	r3, [pc, #44]	@ (8001564 <home_service_init+0x34>)
 8001538:	2200      	movs	r2, #0
 800153a:	701a      	strb	r2, [r3, #0]
	g_home.error_flags = 0;
 800153c:	4b09      	ldr	r3, [pc, #36]	@ (8001564 <home_service_init+0x34>)
 800153e:	2200      	movs	r2, #0
 8001540:	705a      	strb	r2, [r3, #1]

	LOGT_THIS(LOG_STATE_START, PROTO_OK, "init", "ok");
 8001542:	4a09      	ldr	r2, [pc, #36]	@ (8001568 <home_service_init+0x38>)
 8001544:	4b09      	ldr	r3, [pc, #36]	@ (800156c <home_service_init+0x3c>)
 8001546:	9302      	str	r3, [sp, #8]
 8001548:	4b09      	ldr	r3, [pc, #36]	@ (8001570 <home_service_init+0x40>)
 800154a:	9301      	str	r3, [sp, #4]
 800154c:	4b09      	ldr	r3, [pc, #36]	@ (8001574 <home_service_init+0x44>)
 800154e:	9300      	str	r3, [sp, #0]
 8001550:	4613      	mov	r3, r2
 8001552:	2200      	movs	r2, #0
 8001554:	2100      	movs	r1, #0
 8001556:	2003      	movs	r0, #3
 8001558:	f000 fd3a 	bl	8001fd0 <log_event_auto>
}
 800155c:	bf00      	nop
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	200000c0 	.word	0x200000c0
 8001568:	0800f26c 	.word	0x0800f26c
 800156c:	0800f274 	.word	0x0800f274
 8001570:	0800f278 	.word	0x0800f278
 8001574:	0800f27c 	.word	0x0800f27c

08001578 <home_on_move_home>:
const home_status_t* home_status_get(void) {
	return &g_home;
}

void home_on_move_home(const uint8_t *frame, uint32_t len) {
 8001578:	b580      	push	{r7, lr}
 800157a:	b086      	sub	sp, #24
 800157c:	af04      	add	r7, sp, #16
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	6039      	str	r1, [r7, #0]
	(void) frame;
	(void) len; /* implementar FSM de homing */

	LOGT_THIS(LOG_STATE_RECEIVED, PROTO_OK, "move_home", "not_implemented");
 8001582:	4a08      	ldr	r2, [pc, #32]	@ (80015a4 <home_on_move_home+0x2c>)
 8001584:	4b08      	ldr	r3, [pc, #32]	@ (80015a8 <home_on_move_home+0x30>)
 8001586:	9302      	str	r3, [sp, #8]
 8001588:	4b08      	ldr	r3, [pc, #32]	@ (80015ac <home_on_move_home+0x34>)
 800158a:	9301      	str	r3, [sp, #4]
 800158c:	4b08      	ldr	r3, [pc, #32]	@ (80015b0 <home_on_move_home+0x38>)
 800158e:	9300      	str	r3, [sp, #0]
 8001590:	4613      	mov	r3, r2
 8001592:	2200      	movs	r2, #0
 8001594:	2101      	movs	r1, #1
 8001596:	2003      	movs	r0, #3
 8001598:	f000 fd1a 	bl	8001fd0 <log_event_auto>
}
 800159c:	bf00      	nop
 800159e:	3708      	adds	r7, #8
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	0800f26c 	.word	0x0800f26c
 80015a8:	0800f284 	.word	0x0800f284
 80015ac:	0800f278 	.word	0x0800f278
 80015b0:	0800f294 	.word	0x0800f294

080015b4 <led_gpio_config_output>:
#else
#define LED_GPIO_ON_LEVEL  GPIO_PIN_RESET
#define LED_GPIO_OFF_LEVEL GPIO_PIN_SET
#endif

static void led_gpio_config_output(const led_channel_state_t *led) {
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b088      	sub	sp, #32
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
    if (!led)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d019      	beq.n	80015f6 <led_gpio_config_output+0x42>
        return;
    GPIO_InitTypeDef gi = {0};
 80015c2:	f107 030c 	add.w	r3, r7, #12
 80015c6:	2200      	movs	r2, #0
 80015c8:	601a      	str	r2, [r3, #0]
 80015ca:	605a      	str	r2, [r3, #4]
 80015cc:	609a      	str	r2, [r3, #8]
 80015ce:	60da      	str	r2, [r3, #12]
 80015d0:	611a      	str	r2, [r3, #16]
    gi.Pin = led->pin;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	889b      	ldrh	r3, [r3, #4]
 80015d6:	60fb      	str	r3, [r7, #12]
    gi.Mode = GPIO_MODE_OUTPUT_PP;
 80015d8:	2301      	movs	r3, #1
 80015da:	613b      	str	r3, [r7, #16]
    gi.Pull = GPIO_NOPULL;
 80015dc:	2300      	movs	r3, #0
 80015de:	617b      	str	r3, [r7, #20]
    gi.Speed = GPIO_SPEED_FREQ_LOW;
 80015e0:	2300      	movs	r3, #0
 80015e2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(led->port, &gi);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f107 020c 	add.w	r2, r7, #12
 80015ec:	4611      	mov	r1, r2
 80015ee:	4618      	mov	r0, r3
 80015f0:	f004 fd84 	bl	80060fc <HAL_GPIO_Init>
 80015f4:	e000      	b.n	80015f8 <led_gpio_config_output+0x44>
        return;
 80015f6:	bf00      	nop
}
 80015f8:	3720      	adds	r7, #32
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}

080015fe <led_gpio_config_pwm>:

static void led_gpio_config_pwm(const led_channel_state_t *led) {
 80015fe:	b580      	push	{r7, lr}
 8001600:	b088      	sub	sp, #32
 8001602:	af00      	add	r7, sp, #0
 8001604:	6078      	str	r0, [r7, #4]
    if (!led)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d01c      	beq.n	8001646 <led_gpio_config_pwm+0x48>
        return;
    GPIO_InitTypeDef gi = {0};
 800160c:	f107 030c 	add.w	r3, r7, #12
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]
 8001614:	605a      	str	r2, [r3, #4]
 8001616:	609a      	str	r2, [r3, #8]
 8001618:	60da      	str	r2, [r3, #12]
 800161a:	611a      	str	r2, [r3, #16]
    gi.Pin = led->pin;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	889b      	ldrh	r3, [r3, #4]
 8001620:	60fb      	str	r3, [r7, #12]
    gi.Mode = GPIO_MODE_AF_PP;
 8001622:	2302      	movs	r3, #2
 8001624:	613b      	str	r3, [r7, #16]
    gi.Pull = GPIO_NOPULL;
 8001626:	2300      	movs	r3, #0
 8001628:	617b      	str	r3, [r7, #20]
    gi.Speed = GPIO_SPEED_FREQ_LOW;
 800162a:	2300      	movs	r3, #0
 800162c:	61bb      	str	r3, [r7, #24]
    gi.Alternate = led->alternate;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(led->port, &gi);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f107 020c 	add.w	r2, r7, #12
 800163c:	4611      	mov	r1, r2
 800163e:	4618      	mov	r0, r3
 8001640:	f004 fd5c 	bl	80060fc <HAL_GPIO_Init>
 8001644:	e000      	b.n	8001648 <led_gpio_config_pwm+0x4a>
        return;
 8001646:	bf00      	nop
}
 8001648:	3720      	adds	r7, #32
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
	...

08001650 <led_push_response>:
 *    resposta; em caso negativo, registra o erro e abandona o envio para evitar
 *    inserir dados inválidos na fila.
 *  - Após a codificação, confere o resultado de app_resp_push para sinalizar e
 *    logar falhas na fila de saída (por exemplo, quando estiver cheia).
 */
static void led_push_response(uint8_t frame_id, uint8_t mask, uint8_t status) {
 8001650:	b580      	push	{r7, lr}
 8001652:	b088      	sub	sp, #32
 8001654:	af02      	add	r7, sp, #8
 8001656:	4603      	mov	r3, r0
 8001658:	71fb      	strb	r3, [r7, #7]
 800165a:	460b      	mov	r3, r1
 800165c:	71bb      	strb	r3, [r7, #6]
 800165e:	4613      	mov	r3, r2
 8001660:	717b      	strb	r3, [r7, #5]
    uint8_t raw[7];
    led_ctrl_resp_t resp = { frame_id, mask, status };
 8001662:	79fb      	ldrb	r3, [r7, #7]
 8001664:	733b      	strb	r3, [r7, #12]
 8001666:	79bb      	ldrb	r3, [r7, #6]
 8001668:	737b      	strb	r3, [r7, #13]
 800166a:	797b      	ldrb	r3, [r7, #5]
 800166c:	73bb      	strb	r3, [r7, #14]
    if (led_ctrl_resp_encoder(&resp, raw, sizeof raw) != PROTO_OK) {
 800166e:	f107 0110 	add.w	r1, r7, #16
 8001672:	f107 030c 	add.w	r3, r7, #12
 8001676:	2207      	movs	r2, #7
 8001678:	4618      	mov	r0, r3
 800167a:	f7ff fb31 	bl	8000ce0 <led_ctrl_resp_encoder>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d00c      	beq.n	800169e <led_push_response+0x4e>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_FRAME, "resp", "failed to encode led ack");
 8001684:	4a12      	ldr	r2, [pc, #72]	@ (80016d0 <led_push_response+0x80>)
 8001686:	4b13      	ldr	r3, [pc, #76]	@ (80016d4 <led_push_response+0x84>)
 8001688:	9301      	str	r3, [sp, #4]
 800168a:	4b13      	ldr	r3, [pc, #76]	@ (80016d8 <led_push_response+0x88>)
 800168c:	9300      	str	r3, [sp, #0]
 800168e:	4613      	mov	r3, r2
 8001690:	f06f 0201 	mvn.w	r2, #1
 8001694:	2164      	movs	r1, #100	@ 0x64
 8001696:	2001      	movs	r0, #1
 8001698:	f000 fc9a 	bl	8001fd0 <log_event_auto>
 800169c:	e014      	b.n	80016c8 <led_push_response+0x78>
        return;
    }
    if (app_resp_push(raw, (uint32_t)sizeof raw) != PROTO_OK) {
 800169e:	f107 0310 	add.w	r3, r7, #16
 80016a2:	2107      	movs	r1, #7
 80016a4:	4618      	mov	r0, r3
 80016a6:	f002 fe89 	bl	80043bc <app_resp_push>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d00b      	beq.n	80016c8 <led_push_response+0x78>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_RANGE, "resp", "failed to queue led ack");
 80016b0:	4a07      	ldr	r2, [pc, #28]	@ (80016d0 <led_push_response+0x80>)
 80016b2:	4b0a      	ldr	r3, [pc, #40]	@ (80016dc <led_push_response+0x8c>)
 80016b4:	9301      	str	r3, [sp, #4]
 80016b6:	4b08      	ldr	r3, [pc, #32]	@ (80016d8 <led_push_response+0x88>)
 80016b8:	9300      	str	r3, [sp, #0]
 80016ba:	4613      	mov	r3, r2
 80016bc:	f06f 0203 	mvn.w	r2, #3
 80016c0:	2164      	movs	r1, #100	@ 0x64
 80016c2:	2001      	movs	r0, #1
 80016c4:	f000 fc84 	bl	8001fd0 <log_event_auto>
    }
}
 80016c8:	3718      	adds	r7, #24
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	0800f2a0 	.word	0x0800f2a0
 80016d4:	0800f2a4 	.word	0x0800f2a4
 80016d8:	0800f2c0 	.word	0x0800f2c0
 80016dc:	0800f2c8 	.word	0x0800f2c8

080016e0 <led_timer_get_clock>:

static uint32_t led_timer_get_clock(void) {
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
    uint32_t clk = HAL_RCC_GetPCLK2Freq();
 80016e6:	f006 fcc1 	bl	800806c <HAL_RCC_GetPCLK2Freq>
 80016ea:	6078      	str	r0, [r7, #4]
#if defined(RCC_CFGR_PPRE2) && defined(RCC_CFGR_PPRE2_DIV1)
    uint32_t presc = (RCC->CFGR & RCC_CFGR_PPRE2);
 80016ec:	4b09      	ldr	r3, [pc, #36]	@ (8001714 <led_timer_get_clock+0x34>)
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 80016f4:	603b      	str	r3, [r7, #0]
    if (presc != RCC_CFGR_PPRE2_DIV1 && presc != 0u) {
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d005      	beq.n	8001708 <led_timer_get_clock+0x28>
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d002      	beq.n	8001708 <led_timer_get_clock+0x28>
        clk *= 2u;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	005b      	lsls	r3, r3, #1
 8001706:	607b      	str	r3, [r7, #4]
    }
#endif
    return clk;
 8001708:	687b      	ldr	r3, [r7, #4]
}
 800170a:	4618      	mov	r0, r3
 800170c:	3708      	adds	r7, #8
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	40021000 	.word	0x40021000

08001718 <led_compute_period_ticks>:
 * ~1,22 kHz (80 MHz / 65 536). Para atingir frequências como 1 Hz ou 0,2 Hz
 * é necessário reduzir o clock efetivo do TIM15 via prescaler (por exemplo,
 * PSC = 7999 → divisor efetivo 8 000 → f_min ≈ 0,15 Hz).
 */

static uint32_t led_compute_period_ticks(uint16_t freq_centi_hz) {
 8001718:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800171c:	b094      	sub	sp, #80	@ 0x50
 800171e:	af00      	add	r7, sp, #0
 8001720:	4603      	mov	r3, r0
 8001722:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    if (freq_centi_hz == 0u)
 8001724:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001726:	2b00      	cmp	r3, #0
 8001728:	d101      	bne.n	800172e <led_compute_period_ticks+0x16>
        return 0u;
 800172a:	2300      	movs	r3, #0
 800172c:	e066      	b.n	80017fc <led_compute_period_ticks+0xe4>

    uint32_t timer_clk = led_timer_get_clock();
 800172e:	f7ff ffd7 	bl	80016e0 <led_timer_get_clock>
 8001732:	6478      	str	r0, [r7, #68]	@ 0x44
    uint32_t prescaler = (uint32_t)htim15.Init.Prescaler + 1u;
 8001734:	4b34      	ldr	r3, [pc, #208]	@ (8001808 <led_compute_period_ticks+0xf0>)
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	3301      	adds	r3, #1
 800173a:	643b      	str	r3, [r7, #64]	@ 0x40
    if (prescaler == 0u)
 800173c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800173e:	2b00      	cmp	r3, #0
 8001740:	d101      	bne.n	8001746 <led_compute_period_ticks+0x2e>
        return 0u;
 8001742:	2300      	movs	r3, #0
 8001744:	e05a      	b.n	80017fc <led_compute_period_ticks+0xe4>

    uint32_t clk_per_second = timer_clk / prescaler;
 8001746:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001748:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800174a:	fbb2 f3f3 	udiv	r3, r2, r3
 800174e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (clk_per_second == 0u)
 8001750:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001752:	2b00      	cmp	r3, #0
 8001754:	d101      	bne.n	800175a <led_compute_period_ticks+0x42>
        return 0u;
 8001756:	2300      	movs	r3, #0
 8001758:	e050      	b.n	80017fc <led_compute_period_ticks+0xe4>

    uint64_t scaled_clock = (uint64_t)clk_per_second * 100u;
 800175a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800175c:	2200      	movs	r2, #0
 800175e:	4698      	mov	r8, r3
 8001760:	4691      	mov	r9, r2
 8001762:	4642      	mov	r2, r8
 8001764:	464b      	mov	r3, r9
 8001766:	1891      	adds	r1, r2, r2
 8001768:	60b9      	str	r1, [r7, #8]
 800176a:	415b      	adcs	r3, r3
 800176c:	60fb      	str	r3, [r7, #12]
 800176e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001772:	eb12 0408 	adds.w	r4, r2, r8
 8001776:	eb43 0509 	adc.w	r5, r3, r9
 800177a:	f04f 0200 	mov.w	r2, #0
 800177e:	f04f 0300 	mov.w	r3, #0
 8001782:	016b      	lsls	r3, r5, #5
 8001784:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8001788:	0162      	lsls	r2, r4, #5
 800178a:	eb14 0a02 	adds.w	sl, r4, r2
 800178e:	eb45 0b03 	adc.w	fp, r5, r3
 8001792:	eb1a 0308 	adds.w	r3, sl, r8
 8001796:	603b      	str	r3, [r7, #0]
 8001798:	eb4b 0309 	adc.w	r3, fp, r9
 800179c:	607b      	str	r3, [r7, #4]
 800179e:	e9d7 3400 	ldrd	r3, r4, [r7]
 80017a2:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30
    uint64_t ticks = (scaled_clock + ((uint64_t)freq_centi_hz / 2u)) / (uint64_t)freq_centi_hz;
 80017a6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80017a8:	085b      	lsrs	r3, r3, #1
 80017aa:	b29b      	uxth	r3, r3
 80017ac:	b29b      	uxth	r3, r3
 80017ae:	2200      	movs	r2, #0
 80017b0:	623b      	str	r3, [r7, #32]
 80017b2:	627a      	str	r2, [r7, #36]	@ 0x24
 80017b4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80017b8:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80017bc:	4621      	mov	r1, r4
 80017be:	1889      	adds	r1, r1, r2
 80017c0:	61b9      	str	r1, [r7, #24]
 80017c2:	4629      	mov	r1, r5
 80017c4:	eb43 0101 	adc.w	r1, r3, r1
 80017c8:	61f9      	str	r1, [r7, #28]
 80017ca:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80017cc:	2200      	movs	r2, #0
 80017ce:	613b      	str	r3, [r7, #16]
 80017d0:	617a      	str	r2, [r7, #20]
 80017d2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80017d6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80017da:	f7fe fd49 	bl	8000270 <__aeabi_uldivmod>
 80017de:	4602      	mov	r2, r0
 80017e0:	460b      	mov	r3, r1
 80017e2:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    if (ticks > 0xFFFFFFFFu)
 80017e6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d305      	bcc.n	80017fa <led_compute_period_ticks+0xe2>
        ticks = 0xFFFFFFFFu;
 80017ee:	f04f 32ff 	mov.w	r2, #4294967295
 80017f2:	f04f 0300 	mov.w	r3, #0
 80017f6:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    return (uint32_t)ticks;
 80017fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3750      	adds	r7, #80	@ 0x50
 8001800:	46bd      	mov	sp, r7
 8001802:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001806:	bf00      	nop
 8001808:	20001030 	.word	0x20001030

0800180c <led_apply_pwm>:

static void led_apply_pwm(uint32_t period_ticks, uint32_t pulse_ticks) {
 800180c:	b580      	push	{r7, lr}
 800180e:	b084      	sub	sp, #16
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	6039      	str	r1, [r7, #0]
    if (period_ticks == 0u)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d101      	bne.n	8001820 <led_apply_pwm+0x14>
        period_ticks = 1u;
 800181c:	2301      	movs	r3, #1
 800181e:	607b      	str	r3, [r7, #4]
    if (pulse_ticks > period_ticks)
 8001820:	683a      	ldr	r2, [r7, #0]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	429a      	cmp	r2, r3
 8001826:	d901      	bls.n	800182c <led_apply_pwm+0x20>
        pulse_ticks = period_ticks;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	603b      	str	r3, [r7, #0]

    uint32_t arr = (period_ticks > 0u) ? (period_ticks - 1u) : 0u;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d002      	beq.n	8001838 <led_apply_pwm+0x2c>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	3b01      	subs	r3, #1
 8001836:	e000      	b.n	800183a <led_apply_pwm+0x2e>
 8001838:	2300      	movs	r3, #0
 800183a:	60fb      	str	r3, [r7, #12]
    __HAL_TIM_SET_AUTORELOAD(&htim15, arr);
 800183c:	4b0a      	ldr	r3, [pc, #40]	@ (8001868 <led_apply_pwm+0x5c>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	68fa      	ldr	r2, [r7, #12]
 8001842:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001844:	4a08      	ldr	r2, [pc, #32]	@ (8001868 <led_apply_pwm+0x5c>)
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	60d3      	str	r3, [r2, #12]
    __HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, pulse_ticks);
 800184a:	4b07      	ldr	r3, [pc, #28]	@ (8001868 <led_apply_pwm+0x5c>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	683a      	ldr	r2, [r7, #0]
 8001850:	635a      	str	r2, [r3, #52]	@ 0x34
    HAL_TIM_GenerateEvent(&htim15, TIM_EVENTSOURCE_UPDATE);
 8001852:	2101      	movs	r1, #1
 8001854:	4804      	ldr	r0, [pc, #16]	@ (8001868 <led_apply_pwm+0x5c>)
 8001856:	f009 ff7b 	bl	800b750 <HAL_TIM_GenerateEvent>
    htim15.Init.Period = arr;
 800185a:	4a03      	ldr	r2, [pc, #12]	@ (8001868 <led_apply_pwm+0x5c>)
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	60d3      	str	r3, [r2, #12]
}
 8001860:	bf00      	nop
 8001862:	3710      	adds	r7, #16
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	20001030 	.word	0x20001030

0800186c <led_force_off>:

static void led_force_off(led_channel_state_t *led) {
 800186c:	b580      	push	{r7, lr}
 800186e:	b088      	sub	sp, #32
 8001870:	af04      	add	r7, sp, #16
 8001872:	6078      	str	r0, [r7, #4]
    if (!led)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d029      	beq.n	80018ce <led_force_off+0x62>
        return;
    HAL_StatusTypeDef st = led_pwm_stop();
 800187a:	f000 f913 	bl	8001aa4 <led_pwm_stop>
 800187e:	4603      	mov	r3, r0
 8001880:	73fb      	strb	r3, [r7, #15]
    if (st != HAL_OK) {
 8001882:	7bfb      	ldrb	r3, [r7, #15]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d00d      	beq.n	80018a4 <led_force_off+0x38>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_RANGE, "timer", "falha ao parar PWM do TIM15 (%d)", (int)st);
 8001888:	4a13      	ldr	r2, [pc, #76]	@ (80018d8 <led_force_off+0x6c>)
 800188a:	7bfb      	ldrb	r3, [r7, #15]
 800188c:	9302      	str	r3, [sp, #8]
 800188e:	4b13      	ldr	r3, [pc, #76]	@ (80018dc <led_force_off+0x70>)
 8001890:	9301      	str	r3, [sp, #4]
 8001892:	4b13      	ldr	r3, [pc, #76]	@ (80018e0 <led_force_off+0x74>)
 8001894:	9300      	str	r3, [sp, #0]
 8001896:	4613      	mov	r3, r2
 8001898:	f06f 0203 	mvn.w	r2, #3
 800189c:	2164      	movs	r1, #100	@ 0x64
 800189e:	2001      	movs	r0, #1
 80018a0:	f000 fb96 	bl	8001fd0 <log_event_auto>
    }
    led_gpio_config_output(led);
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	f7ff fe85 	bl	80015b4 <led_gpio_config_output>
    HAL_GPIO_WritePin(led->port, led->pin, LED_GPIO_OFF_LEVEL);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6818      	ldr	r0, [r3, #0]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	889b      	ldrh	r3, [r3, #4]
 80018b2:	2200      	movs	r2, #0
 80018b4:	4619      	mov	r1, r3
 80018b6:	f004 fecd 	bl	8006654 <HAL_GPIO_WritePin>
    led->mode = LED_MODE_OFF;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2200      	movs	r2, #0
 80018be:	731a      	strb	r2, [r3, #12]
    led->frequency_centi_hz = 0u;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2200      	movs	r2, #0
 80018c4:	81da      	strh	r2, [r3, #14]
    led->is_on = 0u;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2200      	movs	r2, #0
 80018ca:	735a      	strb	r2, [r3, #13]
 80018cc:	e000      	b.n	80018d0 <led_force_off+0x64>
        return;
 80018ce:	bf00      	nop
}
 80018d0:	3710      	adds	r7, #16
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	0800f2a0 	.word	0x0800f2a0
 80018dc:	0800f2e0 	.word	0x0800f2e0
 80018e0:	0800f304 	.word	0x0800f304

080018e4 <led_force_on>:

static void led_force_on(led_channel_state_t *led) {
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b088      	sub	sp, #32
 80018e8:	af04      	add	r7, sp, #16
 80018ea:	6078      	str	r0, [r7, #4]
    if (!led)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d029      	beq.n	8001946 <led_force_on+0x62>
        return;
    HAL_StatusTypeDef st = led_pwm_stop();
 80018f2:	f000 f8d7 	bl	8001aa4 <led_pwm_stop>
 80018f6:	4603      	mov	r3, r0
 80018f8:	73fb      	strb	r3, [r7, #15]
    if (st != HAL_OK) {
 80018fa:	7bfb      	ldrb	r3, [r7, #15]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d00d      	beq.n	800191c <led_force_on+0x38>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_RANGE, "timer", "falha ao parar PWM do TIM15 (%d)", (int)st);
 8001900:	4a13      	ldr	r2, [pc, #76]	@ (8001950 <led_force_on+0x6c>)
 8001902:	7bfb      	ldrb	r3, [r7, #15]
 8001904:	9302      	str	r3, [sp, #8]
 8001906:	4b13      	ldr	r3, [pc, #76]	@ (8001954 <led_force_on+0x70>)
 8001908:	9301      	str	r3, [sp, #4]
 800190a:	4b13      	ldr	r3, [pc, #76]	@ (8001958 <led_force_on+0x74>)
 800190c:	9300      	str	r3, [sp, #0]
 800190e:	4613      	mov	r3, r2
 8001910:	f06f 0203 	mvn.w	r2, #3
 8001914:	2164      	movs	r1, #100	@ 0x64
 8001916:	2001      	movs	r0, #1
 8001918:	f000 fb5a 	bl	8001fd0 <log_event_auto>
    }
    led_gpio_config_output(led);
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	f7ff fe49 	bl	80015b4 <led_gpio_config_output>
    HAL_GPIO_WritePin(led->port, led->pin, LED_GPIO_ON_LEVEL);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6818      	ldr	r0, [r3, #0]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	889b      	ldrh	r3, [r3, #4]
 800192a:	2201      	movs	r2, #1
 800192c:	4619      	mov	r1, r3
 800192e:	f004 fe91 	bl	8006654 <HAL_GPIO_WritePin>
    led->mode = LED_MODE_ON;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2201      	movs	r2, #1
 8001936:	731a      	strb	r2, [r3, #12]
    led->frequency_centi_hz = 0u;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2200      	movs	r2, #0
 800193c:	81da      	strh	r2, [r3, #14]
    led->is_on = 1u;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2201      	movs	r2, #1
 8001942:	735a      	strb	r2, [r3, #13]
 8001944:	e000      	b.n	8001948 <led_force_on+0x64>
        return;
 8001946:	bf00      	nop
}
 8001948:	3710      	adds	r7, #16
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	0800f2a0 	.word	0x0800f2a0
 8001954:	0800f2e0 	.word	0x0800f2e0
 8001958:	0800f304 	.word	0x0800f304

0800195c <led_force_blink>:

static void led_force_blink(led_channel_state_t *led, uint16_t freq_centi_hz) {
 800195c:	b580      	push	{r7, lr}
 800195e:	b086      	sub	sp, #24
 8001960:	af02      	add	r7, sp, #8
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	460b      	mov	r3, r1
 8001966:	807b      	strh	r3, [r7, #2]
    if (!led || freq_centi_hz == 0u)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d03c      	beq.n	80019e8 <led_force_blink+0x8c>
 800196e:	887b      	ldrh	r3, [r7, #2]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d039      	beq.n	80019e8 <led_force_blink+0x8c>
        return;
    uint32_t period_ticks = led_compute_period_ticks(freq_centi_hz);
 8001974:	887b      	ldrh	r3, [r7, #2]
 8001976:	4618      	mov	r0, r3
 8001978:	f7ff fece 	bl	8001718 <led_compute_period_ticks>
 800197c:	60f8      	str	r0, [r7, #12]
    if (period_ticks < 2u)
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	2b01      	cmp	r3, #1
 8001982:	d801      	bhi.n	8001988 <led_force_blink+0x2c>
        period_ticks = 2u;
 8001984:	2302      	movs	r3, #2
 8001986:	60fb      	str	r3, [r7, #12]
    if (period_ticks > (uint32_t)0x10000u)
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800198e:	d902      	bls.n	8001996 <led_force_blink+0x3a>
        period_ticks = 0x10000u;
 8001990:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001994:	60fb      	str	r3, [r7, #12]

    uint32_t pulse_ticks = period_ticks / 2u;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	085b      	lsrs	r3, r3, #1
 800199a:	60bb      	str	r3, [r7, #8]
    led_gpio_config_pwm(led);
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	f7ff fe2e 	bl	80015fe <led_gpio_config_pwm>
    led_apply_pwm(period_ticks, pulse_ticks);
 80019a2:	68b9      	ldr	r1, [r7, #8]
 80019a4:	68f8      	ldr	r0, [r7, #12]
 80019a6:	f7ff ff31 	bl	800180c <led_apply_pwm>
    if (led_pwm_start() != HAL_OK) {
 80019aa:	f000 f85d 	bl	8001a68 <led_pwm_start>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d00f      	beq.n	80019d4 <led_force_blink+0x78>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_RANGE, "timer", "falha ao iniciar PWM do TIM15");
 80019b4:	4a0e      	ldr	r2, [pc, #56]	@ (80019f0 <led_force_blink+0x94>)
 80019b6:	4b0f      	ldr	r3, [pc, #60]	@ (80019f4 <led_force_blink+0x98>)
 80019b8:	9301      	str	r3, [sp, #4]
 80019ba:	4b0f      	ldr	r3, [pc, #60]	@ (80019f8 <led_force_blink+0x9c>)
 80019bc:	9300      	str	r3, [sp, #0]
 80019be:	4613      	mov	r3, r2
 80019c0:	f06f 0203 	mvn.w	r2, #3
 80019c4:	2164      	movs	r1, #100	@ 0x64
 80019c6:	2001      	movs	r0, #1
 80019c8:	f000 fb02 	bl	8001fd0 <log_event_auto>
        led_force_off(led);
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	f7ff ff4d 	bl	800186c <led_force_off>
        return;
 80019d2:	e00a      	b.n	80019ea <led_force_blink+0x8e>
    }
    led->mode = LED_MODE_BLINK;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2202      	movs	r2, #2
 80019d8:	731a      	strb	r2, [r3, #12]
    led->frequency_centi_hz = freq_centi_hz;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	887a      	ldrh	r2, [r7, #2]
 80019de:	81da      	strh	r2, [r3, #14]
    led->is_on = 0u;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2200      	movs	r2, #0
 80019e4:	735a      	strb	r2, [r3, #13]
 80019e6:	e000      	b.n	80019ea <led_force_blink+0x8e>
        return;
 80019e8:	bf00      	nop
}
 80019ea:	3710      	adds	r7, #16
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	0800f2a0 	.word	0x0800f2a0
 80019f4:	0800f30c 	.word	0x0800f30c
 80019f8:	0800f304 	.word	0x0800f304

080019fc <led_apply_config>:

static void led_apply_config(led_channel_state_t *led, uint8_t mode, uint16_t freq_centi_hz) {
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	460b      	mov	r3, r1
 8001a06:	70fb      	strb	r3, [r7, #3]
 8001a08:	4613      	mov	r3, r2
 8001a0a:	803b      	strh	r3, [r7, #0]
    if (!led)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d026      	beq.n	8001a60 <led_apply_config+0x64>
        return;

    if (mode > LED_MODE_BLINK)
 8001a12:	78fb      	ldrb	r3, [r7, #3]
 8001a14:	2b02      	cmp	r3, #2
 8001a16:	d901      	bls.n	8001a1c <led_apply_config+0x20>
        mode = LED_MODE_OFF;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	70fb      	strb	r3, [r7, #3]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001a1c:	f3ef 8310 	mrs	r3, PRIMASK
 8001a20:	60bb      	str	r3, [r7, #8]
  return(result);
 8001a22:	68bb      	ldr	r3, [r7, #8]

    uint32_t primask = __get_PRIMASK();
 8001a24:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8001a26:	b672      	cpsid	i
}
 8001a28:	bf00      	nop
    __disable_irq();

    if (mode == LED_MODE_ON) {
 8001a2a:	78fb      	ldrb	r3, [r7, #3]
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d103      	bne.n	8001a38 <led_apply_config+0x3c>
        led_force_on(led);
 8001a30:	6878      	ldr	r0, [r7, #4]
 8001a32:	f7ff ff57 	bl	80018e4 <led_force_on>
 8001a36:	e00e      	b.n	8001a56 <led_apply_config+0x5a>
    } else if (mode == LED_MODE_BLINK && freq_centi_hz > 0u) {
 8001a38:	78fb      	ldrb	r3, [r7, #3]
 8001a3a:	2b02      	cmp	r3, #2
 8001a3c:	d108      	bne.n	8001a50 <led_apply_config+0x54>
 8001a3e:	883b      	ldrh	r3, [r7, #0]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d005      	beq.n	8001a50 <led_apply_config+0x54>
        led_force_blink(led, freq_centi_hz);
 8001a44:	883b      	ldrh	r3, [r7, #0]
 8001a46:	4619      	mov	r1, r3
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f7ff ff87 	bl	800195c <led_force_blink>
 8001a4e:	e002      	b.n	8001a56 <led_apply_config+0x5a>
    } else {
        led_force_off(led);
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	f7ff ff0b 	bl	800186c <led_force_off>
    }

    if (primask == 0u) {
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d102      	bne.n	8001a62 <led_apply_config+0x66>
  __ASM volatile ("cpsie i" : : : "memory");
 8001a5c:	b662      	cpsie	i
}
 8001a5e:	e000      	b.n	8001a62 <led_apply_config+0x66>
        return;
 8001a60:	bf00      	nop
        __enable_irq();
    }
}
 8001a62:	3710      	adds	r7, #16
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}

08001a68 <led_pwm_start>:

static HAL_StatusTypeDef led_pwm_start(void) {
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
    if (g_pwm_running)
 8001a6e:	4b0b      	ldr	r3, [pc, #44]	@ (8001a9c <led_pwm_start+0x34>)
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <led_pwm_start+0x12>
        return HAL_OK;
 8001a76:	2300      	movs	r3, #0
 8001a78:	e00c      	b.n	8001a94 <led_pwm_start+0x2c>

    HAL_StatusTypeDef st = HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 8001a7a:	2100      	movs	r1, #0
 8001a7c:	4808      	ldr	r0, [pc, #32]	@ (8001aa0 <led_pwm_start+0x38>)
 8001a7e:	f008 fdad 	bl	800a5dc <HAL_TIM_PWM_Start>
 8001a82:	4603      	mov	r3, r0
 8001a84:	71fb      	strb	r3, [r7, #7]
#if defined(TIM_CHANNEL_1N)
    if (st == HAL_OK) {
        st = HAL_TIMEx_PWMN_Start(&htim15, TIM_CHANNEL_1);
    }
#endif
    if (st == HAL_OK) {
 8001a86:	79fb      	ldrb	r3, [r7, #7]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d102      	bne.n	8001a92 <led_pwm_start+0x2a>
        g_pwm_running = 1u;
 8001a8c:	4b03      	ldr	r3, [pc, #12]	@ (8001a9c <led_pwm_start+0x34>)
 8001a8e:	2201      	movs	r2, #1
 8001a90:	701a      	strb	r2, [r3, #0]
    }
    return st;
 8001a92:	79fb      	ldrb	r3, [r7, #7]
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3708      	adds	r7, #8
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	200000c2 	.word	0x200000c2
 8001aa0:	20001030 	.word	0x20001030

08001aa4 <led_pwm_stop>:

static HAL_StatusTypeDef led_pwm_stop(void) {
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
    if (!g_pwm_running)
 8001aaa:	4b17      	ldr	r3, [pc, #92]	@ (8001b08 <led_pwm_stop+0x64>)
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d101      	bne.n	8001ab6 <led_pwm_stop+0x12>
        return HAL_OK;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	e024      	b.n	8001b00 <led_pwm_stop+0x5c>

    HAL_StatusTypeDef st = HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_1);
 8001ab6:	2100      	movs	r1, #0
 8001ab8:	4814      	ldr	r0, [pc, #80]	@ (8001b0c <led_pwm_stop+0x68>)
 8001aba:	f008 ff3f 	bl	800a93c <HAL_TIM_PWM_Stop>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	71fb      	strb	r3, [r7, #7]
#if defined(TIM_CHANNEL_1N)
    if (st == HAL_OK) {
        st = HAL_TIMEx_PWMN_Stop(&htim15, TIM_CHANNEL_1);
    }
#endif
    if (st == HAL_OK) {
 8001ac2:	79fb      	ldrb	r3, [r7, #7]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d11a      	bne.n	8001afe <led_pwm_stop+0x5a>
        __HAL_TIM_DISABLE(&htim15);
 8001ac8:	4b10      	ldr	r3, [pc, #64]	@ (8001b0c <led_pwm_stop+0x68>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	6a1a      	ldr	r2, [r3, #32]
 8001ace:	f241 1311 	movw	r3, #4369	@ 0x1111
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d10f      	bne.n	8001af8 <led_pwm_stop+0x54>
 8001ad8:	4b0c      	ldr	r3, [pc, #48]	@ (8001b0c <led_pwm_stop+0x68>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	6a1a      	ldr	r2, [r3, #32]
 8001ade:	f240 4344 	movw	r3, #1092	@ 0x444
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d107      	bne.n	8001af8 <led_pwm_stop+0x54>
 8001ae8:	4b08      	ldr	r3, [pc, #32]	@ (8001b0c <led_pwm_stop+0x68>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	4b07      	ldr	r3, [pc, #28]	@ (8001b0c <led_pwm_stop+0x68>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f022 0201 	bic.w	r2, r2, #1
 8001af6:	601a      	str	r2, [r3, #0]
        g_pwm_running = 0u;
 8001af8:	4b03      	ldr	r3, [pc, #12]	@ (8001b08 <led_pwm_stop+0x64>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	701a      	strb	r2, [r3, #0]
    }
    return st;
 8001afe:	79fb      	ldrb	r3, [r7, #7]
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3708      	adds	r7, #8
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	200000c2 	.word	0x200000c2
 8001b0c:	20001030 	.word	0x20001030

08001b10 <led_service_init>:

void led_service_init(void) {
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b08a      	sub	sp, #40	@ 0x28
 8001b14:	af02      	add	r7, sp, #8
    g_pwm_running = 0u;
 8001b16:	4b42      	ldr	r3, [pc, #264]	@ (8001c20 <led_service_init+0x110>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	701a      	strb	r2, [r3, #0]

    for (uint32_t i = 0; i < LED_CTRL_CHANNEL_COUNT; ++i) {
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	61fb      	str	r3, [r7, #28]
 8001b20:	e02d      	b.n	8001b7e <led_service_init+0x6e>
        led_gpio_config_output(&g_leds[i]);
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	011b      	lsls	r3, r3, #4
 8001b26:	4a3f      	ldr	r2, [pc, #252]	@ (8001c24 <led_service_init+0x114>)
 8001b28:	4413      	add	r3, r2
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7ff fd42 	bl	80015b4 <led_gpio_config_output>
        HAL_GPIO_WritePin(g_leds[i].port, g_leds[i].pin, LED_GPIO_OFF_LEVEL);
 8001b30:	4a3c      	ldr	r2, [pc, #240]	@ (8001c24 <led_service_init+0x114>)
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	011b      	lsls	r3, r3, #4
 8001b36:	4413      	add	r3, r2
 8001b38:	6818      	ldr	r0, [r3, #0]
 8001b3a:	4a3a      	ldr	r2, [pc, #232]	@ (8001c24 <led_service_init+0x114>)
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	011b      	lsls	r3, r3, #4
 8001b40:	4413      	add	r3, r2
 8001b42:	3304      	adds	r3, #4
 8001b44:	881b      	ldrh	r3, [r3, #0]
 8001b46:	2200      	movs	r2, #0
 8001b48:	4619      	mov	r1, r3
 8001b4a:	f004 fd83 	bl	8006654 <HAL_GPIO_WritePin>
        g_leds[i].mode = LED_MODE_OFF;
 8001b4e:	4a35      	ldr	r2, [pc, #212]	@ (8001c24 <led_service_init+0x114>)
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	011b      	lsls	r3, r3, #4
 8001b54:	4413      	add	r3, r2
 8001b56:	330c      	adds	r3, #12
 8001b58:	2200      	movs	r2, #0
 8001b5a:	701a      	strb	r2, [r3, #0]
        g_leds[i].frequency_centi_hz = 0u;
 8001b5c:	4a31      	ldr	r2, [pc, #196]	@ (8001c24 <led_service_init+0x114>)
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	011b      	lsls	r3, r3, #4
 8001b62:	4413      	add	r3, r2
 8001b64:	330e      	adds	r3, #14
 8001b66:	2200      	movs	r2, #0
 8001b68:	801a      	strh	r2, [r3, #0]
        g_leds[i].is_on = 0u;
 8001b6a:	4a2e      	ldr	r2, [pc, #184]	@ (8001c24 <led_service_init+0x114>)
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	011b      	lsls	r3, r3, #4
 8001b70:	4413      	add	r3, r2
 8001b72:	330d      	adds	r3, #13
 8001b74:	2200      	movs	r2, #0
 8001b76:	701a      	strb	r2, [r3, #0]
    for (uint32_t i = 0; i < LED_CTRL_CHANNEL_COUNT; ++i) {
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	3301      	adds	r3, #1
 8001b7c:	61fb      	str	r3, [r7, #28]
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d0ce      	beq.n	8001b22 <led_service_init+0x12>
    }

    if (htim15.Instance != TIM15) {
 8001b84:	4b28      	ldr	r3, [pc, #160]	@ (8001c28 <led_service_init+0x118>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a28      	ldr	r2, [pc, #160]	@ (8001c2c <led_service_init+0x11c>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d001      	beq.n	8001b92 <led_service_init+0x82>
        MX_TIM15_Init();
 8001b8e:	f003 fb41 	bl	8005214 <MX_TIM15_Init>
    }

    if (HAL_TIM_PWM_Init(&htim15) != HAL_OK) {
 8001b92:	4825      	ldr	r0, [pc, #148]	@ (8001c28 <led_service_init+0x118>)
 8001b94:	f008 fc0e 	bl	800a3b4 <HAL_TIM_PWM_Init>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d00c      	beq.n	8001bb8 <led_service_init+0xa8>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_RANGE, "timer", "falha ao inicializar PWM do TIM15");
 8001b9e:	4a24      	ldr	r2, [pc, #144]	@ (8001c30 <led_service_init+0x120>)
 8001ba0:	4b24      	ldr	r3, [pc, #144]	@ (8001c34 <led_service_init+0x124>)
 8001ba2:	9301      	str	r3, [sp, #4]
 8001ba4:	4b24      	ldr	r3, [pc, #144]	@ (8001c38 <led_service_init+0x128>)
 8001ba6:	9300      	str	r3, [sp, #0]
 8001ba8:	4613      	mov	r3, r2
 8001baa:	f06f 0203 	mvn.w	r2, #3
 8001bae:	2164      	movs	r1, #100	@ 0x64
 8001bb0:	2001      	movs	r0, #1
 8001bb2:	f000 fa0d 	bl	8001fd0 <log_event_auto>
        return;
 8001bb6:	e02f      	b.n	8001c18 <led_service_init+0x108>
    }

    TIM_OC_InitTypeDef oc = {0};
 8001bb8:	463b      	mov	r3, r7
 8001bba:	2200      	movs	r2, #0
 8001bbc:	601a      	str	r2, [r3, #0]
 8001bbe:	605a      	str	r2, [r3, #4]
 8001bc0:	609a      	str	r2, [r3, #8]
 8001bc2:	60da      	str	r2, [r3, #12]
 8001bc4:	611a      	str	r2, [r3, #16]
 8001bc6:	615a      	str	r2, [r3, #20]
 8001bc8:	619a      	str	r2, [r3, #24]
    oc.OCMode = TIM_OCMODE_PWM1;
 8001bca:	2360      	movs	r3, #96	@ 0x60
 8001bcc:	603b      	str	r3, [r7, #0]
#if LED_ACTIVE_HIGH
    oc.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	60bb      	str	r3, [r7, #8]
    oc.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	60fb      	str	r3, [r7, #12]
#else
    oc.OCPolarity = TIM_OCPOLARITY_LOW;
    oc.OCNPolarity = TIM_OCNPOLARITY_LOW;
#endif
    oc.OCFastMode = TIM_OCFAST_DISABLE;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	613b      	str	r3, [r7, #16]
    oc.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	617b      	str	r3, [r7, #20]
    oc.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001bde:	2300      	movs	r3, #0
 8001be0:	61bb      	str	r3, [r7, #24]
    oc.Pulse = 0u;
 8001be2:	2300      	movs	r3, #0
 8001be4:	607b      	str	r3, [r7, #4]

    if (HAL_TIM_PWM_ConfigChannel(&htim15, &oc, TIM_CHANNEL_1) != HAL_OK) {
 8001be6:	463b      	mov	r3, r7
 8001be8:	2200      	movs	r2, #0
 8001bea:	4619      	mov	r1, r3
 8001bec:	480e      	ldr	r0, [pc, #56]	@ (8001c28 <led_service_init+0x118>)
 8001bee:	f009 fb61 	bl	800b2b4 <HAL_TIM_PWM_ConfigChannel>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d00c      	beq.n	8001c12 <led_service_init+0x102>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_RANGE, "timer", "falha ao configurar canal PWM do TIM15");
 8001bf8:	4a0d      	ldr	r2, [pc, #52]	@ (8001c30 <led_service_init+0x120>)
 8001bfa:	4b10      	ldr	r3, [pc, #64]	@ (8001c3c <led_service_init+0x12c>)
 8001bfc:	9301      	str	r3, [sp, #4]
 8001bfe:	4b0e      	ldr	r3, [pc, #56]	@ (8001c38 <led_service_init+0x128>)
 8001c00:	9300      	str	r3, [sp, #0]
 8001c02:	4613      	mov	r3, r2
 8001c04:	f06f 0203 	mvn.w	r2, #3
 8001c08:	2164      	movs	r1, #100	@ 0x64
 8001c0a:	2001      	movs	r0, #1
 8001c0c:	f000 f9e0 	bl	8001fd0 <log_event_auto>
        return;
 8001c10:	e002      	b.n	8001c18 <led_service_init+0x108>
    }

    led_force_off(&g_leds[0]);
 8001c12:	4804      	ldr	r0, [pc, #16]	@ (8001c24 <led_service_init+0x114>)
 8001c14:	f7ff fe2a 	bl	800186c <led_force_off>
}
 8001c18:	3720      	adds	r7, #32
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	200000c2 	.word	0x200000c2
 8001c24:	20000000 	.word	0x20000000
 8001c28:	20001030 	.word	0x20001030
 8001c2c:	40014000 	.word	0x40014000
 8001c30:	0800f2a0 	.word	0x0800f2a0
 8001c34:	0800f32c 	.word	0x0800f32c
 8001c38:	0800f304 	.word	0x0800f304
 8001c3c:	0800f350 	.word	0x0800f350

08001c40 <led_on_led_ctrl>:

void led_on_led_ctrl(const uint8_t *frame, uint32_t len) {
 8001c40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c42:	b097      	sub	sp, #92	@ 0x5c
 8001c44:	af0a      	add	r7, sp, #40	@ 0x28
 8001c46:	6178      	str	r0, [r7, #20]
 8001c48:	6139      	str	r1, [r7, #16]
    led_ctrl_req_t req;
    if (!frame)
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	f000 80d2 	beq.w	8001df6 <led_on_led_ctrl+0x1b6>
        return;
    if (len < LED_CTRL_REQ_TOTAL_LEN || len > LED_CTRL_REQ_PADDED_TOTAL_LEN) {
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	2b08      	cmp	r3, #8
 8001c56:	d902      	bls.n	8001c5e <led_on_led_ctrl+0x1e>
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	2b2a      	cmp	r3, #42	@ 0x2a
 8001c5c:	d90e      	bls.n	8001c7c <led_on_led_ctrl+0x3c>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_RANGE, "len", "invalid led frame len=%lu", (unsigned long)len);
 8001c5e:	4a68      	ldr	r2, [pc, #416]	@ (8001e00 <led_on_led_ctrl+0x1c0>)
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	9302      	str	r3, [sp, #8]
 8001c64:	4b67      	ldr	r3, [pc, #412]	@ (8001e04 <led_on_led_ctrl+0x1c4>)
 8001c66:	9301      	str	r3, [sp, #4]
 8001c68:	4b67      	ldr	r3, [pc, #412]	@ (8001e08 <led_on_led_ctrl+0x1c8>)
 8001c6a:	9300      	str	r3, [sp, #0]
 8001c6c:	4613      	mov	r3, r2
 8001c6e:	f06f 0203 	mvn.w	r2, #3
 8001c72:	2164      	movs	r1, #100	@ 0x64
 8001c74:	2001      	movs	r0, #1
 8001c76:	f000 f9ab 	bl	8001fd0 <log_event_auto>
        return;
 8001c7a:	e0bd      	b.n	8001df8 <led_on_led_ctrl+0x1b8>
    }
    proto_result_t decode_status = led_ctrl_req_decoder(frame, len, &req);
 8001c7c:	f107 031c 	add.w	r3, r7, #28
 8001c80:	461a      	mov	r2, r3
 8001c82:	6939      	ldr	r1, [r7, #16]
 8001c84:	6978      	ldr	r0, [r7, #20]
 8001c86:	f7fe fcef 	bl	8000668 <led_ctrl_req_decoder>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (decode_status != PROTO_OK) {
 8001c90:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d00f      	beq.n	8001cb8 <led_on_led_ctrl+0x78>
        LOGA_THIS(LOG_STATE_ERROR, decode_status, "decode", "failed to decode led request (%d)", (int)decode_status);
 8001c98:	f997 2027 	ldrsb.w	r2, [r7, #39]	@ 0x27
 8001c9c:	4958      	ldr	r1, [pc, #352]	@ (8001e00 <led_on_led_ctrl+0x1c0>)
 8001c9e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001ca2:	9302      	str	r3, [sp, #8]
 8001ca4:	4b59      	ldr	r3, [pc, #356]	@ (8001e0c <led_on_led_ctrl+0x1cc>)
 8001ca6:	9301      	str	r3, [sp, #4]
 8001ca8:	4b59      	ldr	r3, [pc, #356]	@ (8001e10 <led_on_led_ctrl+0x1d0>)
 8001caa:	9300      	str	r3, [sp, #0]
 8001cac:	460b      	mov	r3, r1
 8001cae:	2164      	movs	r1, #100	@ 0x64
 8001cb0:	2001      	movs	r0, #1
 8001cb2:	f000 f98d 	bl	8001fd0 <log_event_auto>
        return;
 8001cb6:	e09f      	b.n	8001df8 <led_on_led_ctrl+0x1b8>
    }

    const uint8_t requested_mask = req.ledMask;
 8001cb8:	7f7b      	ldrb	r3, [r7, #29]
 8001cba:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    const uint8_t valid_mask = LED_MASK_LED1;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    uint8_t ack_mask = 0u;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    uint8_t status = PROTO_OK;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

    for (uint32_t i = 0; i < LED_CTRL_CHANNEL_COUNT; ++i) {
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001cd4:	e02d      	b.n	8001d32 <led_on_led_ctrl+0xf2>
        uint8_t mask_bit = LED_MASK_LED1;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        if ((requested_mask & mask_bit) == 0u) {
 8001cdc:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8001ce0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d01e      	beq.n	8001d2a <led_on_led_ctrl+0xea>
            continue;
        }
        ack_mask |= mask_bit;
 8001cec:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8001cf0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        led_apply_config(&g_leds[i], req.channel[i].mode, req.channel[i].frequency);
 8001cfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cfc:	011b      	lsls	r3, r3, #4
 8001cfe:	4a45      	ldr	r2, [pc, #276]	@ (8001e14 <led_on_led_ctrl+0x1d4>)
 8001d00:	1898      	adds	r0, r3, r2
 8001d02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	3320      	adds	r3, #32
 8001d08:	f107 0210 	add.w	r2, r7, #16
 8001d0c:	4413      	add	r3, r2
 8001d0e:	f813 1c12 	ldrb.w	r1, [r3, #-18]
 8001d12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	3320      	adds	r3, #32
 8001d18:	f107 0210 	add.w	r2, r7, #16
 8001d1c:	4413      	add	r3, r2
 8001d1e:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8001d22:	461a      	mov	r2, r3
 8001d24:	f7ff fe6a 	bl	80019fc <led_apply_config>
 8001d28:	e000      	b.n	8001d2c <led_on_led_ctrl+0xec>
            continue;
 8001d2a:	bf00      	nop
    for (uint32_t i = 0; i < LED_CTRL_CHANNEL_COUNT; ++i) {
 8001d2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d2e:	3301      	adds	r3, #1
 8001d30:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001d32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d0ce      	beq.n	8001cd6 <led_on_led_ctrl+0x96>
    }

    if ((requested_mask & (uint8_t)~valid_mask) != 0u) {
 8001d38:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001d3c:	43db      	mvns	r3, r3
 8001d3e:	b2da      	uxtb	r2, r3
 8001d40:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001d44:	4013      	ands	r3, r2
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d003      	beq.n	8001d54 <led_on_led_ctrl+0x114>
        status = PROTO_WARN;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8001d52:	e00a      	b.n	8001d6a <led_on_led_ctrl+0x12a>
    } else if (ack_mask == 0u && requested_mask != 0u) {
 8001d54:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d106      	bne.n	8001d6a <led_on_led_ctrl+0x12a>
 8001d5c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d002      	beq.n	8001d6a <led_on_led_ctrl+0x12a>
        status = PROTO_WARN;
 8001d64:	2301      	movs	r3, #1
 8001d66:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    }

    led_push_response(req.frameId, ack_mask, status);
 8001d6a:	7f3b      	ldrb	r3, [r7, #28]
 8001d6c:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8001d70:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7ff fc6b 	bl	8001650 <led_push_response>

    LOGA_THIS(LOG_STATE_APPLIED, status, "applied",
 8001d7a:	f897 402e 	ldrb.w	r4, [r7, #46]	@ 0x2e
 8001d7e:	4e20      	ldr	r6, [pc, #128]	@ (8001e00 <led_on_led_ctrl+0x1c0>)
 8001d80:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8001d84:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8001d88:	4b22      	ldr	r3, [pc, #136]	@ (8001e14 <led_on_led_ctrl+0x1d4>)
 8001d8a:	7b1b      	ldrb	r3, [r3, #12]
 8001d8c:	60fb      	str	r3, [r7, #12]
 8001d8e:	4b21      	ldr	r3, [pc, #132]	@ (8001e14 <led_on_led_ctrl+0x1d4>)
 8001d90:	89db      	ldrh	r3, [r3, #14]
 8001d92:	4821      	ldr	r0, [pc, #132]	@ (8001e18 <led_on_led_ctrl+0x1d8>)
 8001d94:	fba0 0303 	umull	r0, r3, r0, r3
 8001d98:	095b      	lsrs	r3, r3, #5
 8001d9a:	b29b      	uxth	r3, r3
 8001d9c:	60bb      	str	r3, [r7, #8]
 8001d9e:	4b1d      	ldr	r3, [pc, #116]	@ (8001e14 <led_on_led_ctrl+0x1d4>)
 8001da0:	89db      	ldrh	r3, [r3, #14]
 8001da2:	481d      	ldr	r0, [pc, #116]	@ (8001e18 <led_on_led_ctrl+0x1d8>)
 8001da4:	fba0 5003 	umull	r5, r0, r0, r3
 8001da8:	0940      	lsrs	r0, r0, #5
 8001daa:	2564      	movs	r5, #100	@ 0x64
 8001dac:	fb05 f000 	mul.w	r0, r5, r0
 8001db0:	1a1b      	subs	r3, r3, r0
 8001db2:	b29b      	uxth	r3, r3
 8001db4:	461d      	mov	r5, r3
 8001db6:	4b17      	ldr	r3, [pc, #92]	@ (8001e14 <led_on_led_ctrl+0x1d4>)
 8001db8:	7b5b      	ldrb	r3, [r3, #13]
 8001dba:	607b      	str	r3, [r7, #4]
 8001dbc:	4b17      	ldr	r3, [pc, #92]	@ (8001e1c <led_on_led_ctrl+0x1dc>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	4815      	ldr	r0, [pc, #84]	@ (8001e1c <led_on_led_ctrl+0x1dc>)
 8001dc6:	6800      	ldr	r0, [r0, #0]
 8001dc8:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 8001dca:	9009      	str	r0, [sp, #36]	@ 0x24
 8001dcc:	9308      	str	r3, [sp, #32]
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	9007      	str	r0, [sp, #28]
 8001dd2:	9506      	str	r5, [sp, #24]
 8001dd4:	68b8      	ldr	r0, [r7, #8]
 8001dd6:	9005      	str	r0, [sp, #20]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	9304      	str	r3, [sp, #16]
 8001ddc:	9103      	str	r1, [sp, #12]
 8001dde:	9202      	str	r2, [sp, #8]
 8001de0:	4b0f      	ldr	r3, [pc, #60]	@ (8001e20 <led_on_led_ctrl+0x1e0>)
 8001de2:	9301      	str	r3, [sp, #4]
 8001de4:	4b0f      	ldr	r3, [pc, #60]	@ (8001e24 <led_on_led_ctrl+0x1e4>)
 8001de6:	9300      	str	r3, [sp, #0]
 8001de8:	4633      	mov	r3, r6
 8001dea:	4622      	mov	r2, r4
 8001dec:	2102      	movs	r1, #2
 8001dee:	2001      	movs	r0, #1
 8001df0:	f000 f8ee 	bl	8001fd0 <log_event_auto>
 8001df4:	e000      	b.n	8001df8 <led_on_led_ctrl+0x1b8>
        return;
 8001df6:	bf00      	nop
              (unsigned long)(g_leds[0].frequency_centi_hz / 100u),
              (unsigned long)(g_leds[0].frequency_centi_hz % 100u),
              g_leds[0].is_on,
              (unsigned long)(__HAL_TIM_GET_AUTORELOAD(&htim15) + 1u),
              (unsigned long)__HAL_TIM_GET_COMPARE(&htim15, TIM_CHANNEL_1));
 8001df8:	3734      	adds	r7, #52	@ 0x34
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	0800f2a0 	.word	0x0800f2a0
 8001e04:	0800f378 	.word	0x0800f378
 8001e08:	0800f394 	.word	0x0800f394
 8001e0c:	0800f398 	.word	0x0800f398
 8001e10:	0800f3bc 	.word	0x0800f3bc
 8001e14:	20000000 	.word	0x20000000
 8001e18:	51eb851f 	.word	0x51eb851f
 8001e1c:	20001030 	.word	0x20001030
 8001e20:	0800f3c4 	.word	0x0800f3c4
 8001e24:	0800f414 	.word	0x0800f414

08001e28 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001e30:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001e34:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8001e38:	f003 0301 	and.w	r3, r3, #1
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d013      	beq.n	8001e68 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001e40:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001e44:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8001e48:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d00b      	beq.n	8001e68 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001e50:	e000      	b.n	8001e54 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001e52:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001e54:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d0f9      	beq.n	8001e52 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001e5e:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	b2d2      	uxtb	r2, r2
 8001e66:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001e68:	687b      	ldr	r3, [r7, #4]
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	370c      	adds	r7, #12
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
	...

08001e78 <log_service_init>:
#include <stdarg.h>
#include <string.h>
#include "usart.h"
#include "stm32l4xx.h"  // ITM_SendChar/CoreDebug/DBGMCU/TPI

void log_service_init(void){
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
    // Garante stdout sem buffer para que o printf descarregue imediatamente na UART.
    setvbuf(stdout, NULL, _IONBF, 0);
 8001e7c:	4b04      	ldr	r3, [pc, #16]	@ (8001e90 <log_service_init+0x18>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	6898      	ldr	r0, [r3, #8]
 8001e82:	2300      	movs	r3, #0
 8001e84:	2202      	movs	r2, #2
 8001e86:	2100      	movs	r1, #0
 8001e88:	f00c f992 	bl	800e1b0 <setvbuf>
}
 8001e8c:	bf00      	nop
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	2000002c 	.word	0x2000002c

08001e94 <log_event_ids>:

void log_poll(void){
    // No-op: a transmissão é síncrona via _write/HAL_UART_Transmit.
}

void log_event_ids(uint8_t service_id, uint8_t state_id, int32_t status){
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	603a      	str	r2, [r7, #0]
 8001e9e:	71fb      	strb	r3, [r7, #7]
 8001ea0:	460b      	mov	r3, r1
 8001ea2:	71bb      	strb	r3, [r7, #6]
    printf("L:svc=%u,state=%u,status=%ld\r\n", (unsigned)service_id, (unsigned)state_id, (long)status);
 8001ea4:	79f9      	ldrb	r1, [r7, #7]
 8001ea6:	79ba      	ldrb	r2, [r7, #6]
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	4803      	ldr	r0, [pc, #12]	@ (8001eb8 <log_event_ids+0x24>)
 8001eac:	f00c f910 	bl	800e0d0 <iprintf>
}
 8001eb0:	bf00      	nop
 8001eb2:	3708      	adds	r7, #8
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	0800f41c 	.word	0x0800f41c

08001ebc <log_event_names>:

void log_event_names(const char* service_name, const char* state_name, const char* status_text){
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b084      	sub	sp, #16
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	60f8      	str	r0, [r7, #12]
 8001ec4:	60b9      	str	r1, [r7, #8]
 8001ec6:	607a      	str	r2, [r7, #4]
    if(!service_name) service_name = "?";
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d101      	bne.n	8001ed2 <log_event_names+0x16>
 8001ece:	4b0b      	ldr	r3, [pc, #44]	@ (8001efc <log_event_names+0x40>)
 8001ed0:	60fb      	str	r3, [r7, #12]
    if(!state_name) state_name = "?";
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d101      	bne.n	8001edc <log_event_names+0x20>
 8001ed8:	4b08      	ldr	r3, [pc, #32]	@ (8001efc <log_event_names+0x40>)
 8001eda:	60bb      	str	r3, [r7, #8]
    if(!status_text) status_text = "?";
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d101      	bne.n	8001ee6 <log_event_names+0x2a>
 8001ee2:	4b06      	ldr	r3, [pc, #24]	@ (8001efc <log_event_names+0x40>)
 8001ee4:	607b      	str	r3, [r7, #4]
    printf("LOG:service=%s,state=%s,status=%s\r\n", service_name, state_name, status_text);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	68ba      	ldr	r2, [r7, #8]
 8001eea:	68f9      	ldr	r1, [r7, #12]
 8001eec:	4804      	ldr	r0, [pc, #16]	@ (8001f00 <log_event_names+0x44>)
 8001eee:	f00c f8ef 	bl	800e0d0 <iprintf>
}
 8001ef2:	bf00      	nop
 8001ef4:	3710      	adds	r7, #16
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	0800f43c 	.word	0x0800f43c
 8001f00:	0800f440 	.word	0x0800f440

08001f04 <log_swo_enabled>:

// Verifica em tempo de execução se o SWO/ITM está habilitado (porta 0).
static inline int log_swo_enabled(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
    return ((CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk) &&
 8001f08:	4b11      	ldr	r3, [pc, #68]	@ (8001f50 <log_swo_enabled+0x4c>)
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
            (DBGMCU->CR & DBGMCU_CR_TRACE_IOEN) &&
            (ITM->TCR & ITM_TCR_ITMENA_Msk) &&
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d017      	beq.n	8001f44 <log_swo_enabled+0x40>
            (DBGMCU->CR & DBGMCU_CR_TRACE_IOEN) &&
 8001f14:	4b0f      	ldr	r3, [pc, #60]	@ (8001f54 <log_swo_enabled+0x50>)
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f003 0320 	and.w	r3, r3, #32
    return ((CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk) &&
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d011      	beq.n	8001f44 <log_swo_enabled+0x40>
            (ITM->TCR & ITM_TCR_ITMENA_Msk) &&
 8001f20:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001f24:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8001f28:	f003 0301 	and.w	r3, r3, #1
            (DBGMCU->CR & DBGMCU_CR_TRACE_IOEN) &&
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d009      	beq.n	8001f44 <log_swo_enabled+0x40>
            (ITM->TER & (1UL << 0)));
 8001f30:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001f34:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8001f38:	f003 0301 	and.w	r3, r3, #1
            (ITM->TCR & ITM_TCR_ITMENA_Msk) &&
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d001      	beq.n	8001f44 <log_swo_enabled+0x40>
 8001f40:	2301      	movs	r3, #1
 8001f42:	e000      	b.n	8001f46 <log_swo_enabled+0x42>
 8001f44:	2300      	movs	r3, #0
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr
 8001f50:	e000edf0 	.word	0xe000edf0
 8001f54:	e0042000 	.word	0xe0042000

08001f58 <_write>:

// Retarget de printf: usa SWO quando disponível; senão, USART1.
int _write(int fd, char *ptr, int len)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b086      	sub	sp, #24
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	60f8      	str	r0, [r7, #12]
 8001f60:	60b9      	str	r1, [r7, #8]
 8001f62:	607a      	str	r2, [r7, #4]
    if (fd != 1 && fd != 2)
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d005      	beq.n	8001f76 <_write+0x1e>
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	2b02      	cmp	r3, #2
 8001f6e:	d002      	beq.n	8001f76 <_write+0x1e>
        return -1;
 8001f70:	f04f 33ff 	mov.w	r3, #4294967295
 8001f74:	e026      	b.n	8001fc4 <_write+0x6c>

    if (log_swo_enabled()) {
 8001f76:	f7ff ffc5 	bl	8001f04 <log_swo_enabled>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d012      	beq.n	8001fa6 <_write+0x4e>
        for (int i = 0; i < len; ++i) {
 8001f80:	2300      	movs	r3, #0
 8001f82:	617b      	str	r3, [r7, #20]
 8001f84:	e009      	b.n	8001f9a <_write+0x42>
            ITM_SendChar((uint32_t)ptr[i]);
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	68ba      	ldr	r2, [r7, #8]
 8001f8a:	4413      	add	r3, r2
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f7ff ff4a 	bl	8001e28 <ITM_SendChar>
        for (int i = 0; i < len; ++i) {
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	3301      	adds	r3, #1
 8001f98:	617b      	str	r3, [r7, #20]
 8001f9a:	697a      	ldr	r2, [r7, #20]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	dbf1      	blt.n	8001f86 <_write+0x2e>
        }
        return len;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	e00e      	b.n	8001fc4 <_write+0x6c>
    }

    // Fallback: UART1 síncrona
    if (HAL_UART_Transmit(&huart1, (uint8_t *)ptr, (uint16_t)len, HAL_MAX_DELAY) == HAL_OK)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	b29a      	uxth	r2, r3
 8001faa:	f04f 33ff 	mov.w	r3, #4294967295
 8001fae:	68b9      	ldr	r1, [r7, #8]
 8001fb0:	4806      	ldr	r0, [pc, #24]	@ (8001fcc <_write+0x74>)
 8001fb2:	f00b f82f 	bl	800d014 <HAL_UART_Transmit>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d101      	bne.n	8001fc0 <_write+0x68>
        return len;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	e001      	b.n	8001fc4 <_write+0x6c>
    return -1;
 8001fc0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3718      	adds	r7, #24
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	2000107c 	.word	0x2000107c

08001fd0 <log_event_auto>:

void log_event_auto(log_service_id_t service_id, log_state_id_t state_id, int32_t status,
                    const char* service_name, const char* state_name,
                    const char* fmt, ...){
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b0a8      	sub	sp, #160	@ 0xa0
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	60ba      	str	r2, [r7, #8]
 8001fd8:	607b      	str	r3, [r7, #4]
 8001fda:	4603      	mov	r3, r0
 8001fdc:	73fb      	strb	r3, [r7, #15]
 8001fde:	460b      	mov	r3, r1
 8001fe0:	73bb      	strb	r3, [r7, #14]
    (void)service_id;
    (void)state_id;
    (void)status;

    char text[128];
    if(fmt && fmt[0]){
 8001fe2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d010      	beq.n	800200c <log_event_auto+0x3c>
 8001fea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d00b      	beq.n	800200c <log_event_auto+0x3c>
        va_list ap;
        va_start(ap, fmt);
 8001ff4:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8001ff8:	617b      	str	r3, [r7, #20]
        (void)vsnprintf(text, sizeof text, fmt, ap);
 8001ffa:	f107 0018 	add.w	r0, r7, #24
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002004:	2180      	movs	r1, #128	@ 0x80
 8002006:	f00c f9f9 	bl	800e3fc <vsniprintf>
    if(fmt && fmt[0]){
 800200a:	e003      	b.n	8002014 <log_event_auto+0x44>
        va_end(ap);
    }else{
        text[0] = '?';
 800200c:	233f      	movs	r3, #63	@ 0x3f
 800200e:	763b      	strb	r3, [r7, #24]
        text[1] = '\0';
 8002010:	2300      	movs	r3, #0
 8002012:	767b      	strb	r3, [r7, #25]
    }
    const char* svc = service_name ? service_name : "?";
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d001      	beq.n	800201e <log_event_auto+0x4e>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	e000      	b.n	8002020 <log_event_auto+0x50>
 800201e:	4b0d      	ldr	r3, [pc, #52]	@ (8002054 <log_event_auto+0x84>)
 8002020:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    const char* stn = state_name ? state_name : "?";
 8002024:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002028:	2b00      	cmp	r3, #0
 800202a:	d002      	beq.n	8002032 <log_event_auto+0x62>
 800202c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002030:	e000      	b.n	8002034 <log_event_auto+0x64>
 8002032:	4b08      	ldr	r3, [pc, #32]	@ (8002054 <log_event_auto+0x84>)
 8002034:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    printf("LOG:service=%s,state=%s,status=%s\r\n", svc, stn, text);
 8002038:	f107 0318 	add.w	r3, r7, #24
 800203c:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8002040:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 8002044:	4804      	ldr	r0, [pc, #16]	@ (8002058 <log_event_auto+0x88>)
 8002046:	f00c f843 	bl	800e0d0 <iprintf>
}
 800204a:	bf00      	nop
 800204c:	37a0      	adds	r7, #160	@ 0xa0
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	0800f43c 	.word	0x0800f43c
 8002058:	0800f440 	.word	0x0800f440

0800205c <gpio_bsrr_set>:
    { GPIOB, GPIO_PIN_1, GPIOA, GPIO_PIN_2, GPIOD, GPIO_PIN_14,
      MOTION_ENCODER_TYPE_TIM, &htim5, NULL, 32u },
};

static inline void gpio_bsrr_set(GPIO_TypeDef *port, uint16_t pin)
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
 8002064:	460b      	mov	r3, r1
 8002066:	807b      	strh	r3, [r7, #2]
    if (!port) return;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d003      	beq.n	8002076 <gpio_bsrr_set+0x1a>
    port->BSRR = pin;
 800206e:	887a      	ldrh	r2, [r7, #2]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	619a      	str	r2, [r3, #24]
 8002074:	e000      	b.n	8002078 <gpio_bsrr_set+0x1c>
    if (!port) return;
 8002076:	bf00      	nop
}
 8002078:	370c      	adds	r7, #12
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr

08002082 <gpio_bsrr_reset>:
static inline void gpio_bsrr_reset(GPIO_TypeDef *port, uint16_t pin)
{
 8002082:	b480      	push	{r7}
 8002084:	b083      	sub	sp, #12
 8002086:	af00      	add	r7, sp, #0
 8002088:	6078      	str	r0, [r7, #4]
 800208a:	460b      	mov	r3, r1
 800208c:	807b      	strh	r3, [r7, #2]
    if (!port) return;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d004      	beq.n	800209e <gpio_bsrr_reset+0x1c>
    port->BSRR = ((uint32_t)pin) << 16u;
 8002094:	887b      	ldrh	r3, [r7, #2]
 8002096:	041a      	lsls	r2, r3, #16
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	619a      	str	r2, [r3, #24]
 800209c:	e000      	b.n	80020a0 <gpio_bsrr_reset+0x1e>
    if (!port) return;
 800209e:	bf00      	nop
}
 80020a0:	370c      	adds	r7, #12
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr
	...

080020ac <motion_hw_init>:

void motion_hw_init(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
    // Garante STEP baixo e drivers desabilitados
    for (uint8_t i = 0; i < MOTION_AXIS_COUNT; ++i) {
 80020b2:	2300      	movs	r3, #0
 80020b4:	71fb      	strb	r3, [r7, #7]
 80020b6:	e02b      	b.n	8002110 <motion_hw_init+0x64>
        gpio_bsrr_reset(g_axis[i].step_port, g_axis[i].step_pin);
 80020b8:	79fa      	ldrb	r2, [r7, #7]
 80020ba:	493d      	ldr	r1, [pc, #244]	@ (80021b0 <motion_hw_init+0x104>)
 80020bc:	4613      	mov	r3, r2
 80020be:	00db      	lsls	r3, r3, #3
 80020c0:	4413      	add	r3, r2
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	440b      	add	r3, r1
 80020c6:	6818      	ldr	r0, [r3, #0]
 80020c8:	79fa      	ldrb	r2, [r7, #7]
 80020ca:	4939      	ldr	r1, [pc, #228]	@ (80021b0 <motion_hw_init+0x104>)
 80020cc:	4613      	mov	r3, r2
 80020ce:	00db      	lsls	r3, r3, #3
 80020d0:	4413      	add	r3, r2
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	440b      	add	r3, r1
 80020d6:	3304      	adds	r3, #4
 80020d8:	881b      	ldrh	r3, [r3, #0]
 80020da:	4619      	mov	r1, r3
 80020dc:	f7ff ffd1 	bl	8002082 <gpio_bsrr_reset>
        // Enable ativo em baixo: mantém alto (desabilitado)
        gpio_bsrr_set(g_axis[i].ena_port, g_axis[i].ena_pin);
 80020e0:	79fa      	ldrb	r2, [r7, #7]
 80020e2:	4933      	ldr	r1, [pc, #204]	@ (80021b0 <motion_hw_init+0x104>)
 80020e4:	4613      	mov	r3, r2
 80020e6:	00db      	lsls	r3, r3, #3
 80020e8:	4413      	add	r3, r2
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	440b      	add	r3, r1
 80020ee:	3310      	adds	r3, #16
 80020f0:	6818      	ldr	r0, [r3, #0]
 80020f2:	79fa      	ldrb	r2, [r7, #7]
 80020f4:	492e      	ldr	r1, [pc, #184]	@ (80021b0 <motion_hw_init+0x104>)
 80020f6:	4613      	mov	r3, r2
 80020f8:	00db      	lsls	r3, r3, #3
 80020fa:	4413      	add	r3, r2
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	440b      	add	r3, r1
 8002100:	3314      	adds	r3, #20
 8002102:	881b      	ldrh	r3, [r3, #0]
 8002104:	4619      	mov	r1, r3
 8002106:	f7ff ffa9 	bl	800205c <gpio_bsrr_set>
    for (uint8_t i = 0; i < MOTION_AXIS_COUNT; ++i) {
 800210a:	79fb      	ldrb	r3, [r7, #7]
 800210c:	3301      	adds	r3, #1
 800210e:	71fb      	strb	r3, [r7, #7]
 8002110:	79fb      	ldrb	r3, [r7, #7]
 8002112:	2b02      	cmp	r3, #2
 8002114:	d9d0      	bls.n	80020b8 <motion_hw_init+0xc>
    }

    // Zera contadores e inicia encoders conforme o tipo de periférico
    for (uint8_t i = 0; i < MOTION_AXIS_COUNT; ++i) {
 8002116:	2300      	movs	r3, #0
 8002118:	71bb      	strb	r3, [r7, #6]
 800211a:	e034      	b.n	8002186 <motion_hw_init+0xda>
        const motion_axis_hw_t *axis = &g_axis[i];
 800211c:	79ba      	ldrb	r2, [r7, #6]
 800211e:	4613      	mov	r3, r2
 8002120:	00db      	lsls	r3, r3, #3
 8002122:	4413      	add	r3, r2
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	4a22      	ldr	r2, [pc, #136]	@ (80021b0 <motion_hw_init+0x104>)
 8002128:	4413      	add	r3, r2
 800212a:	603b      	str	r3, [r7, #0]
        if (axis->encoder_type == MOTION_ENCODER_TYPE_TIM) {
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	7d9b      	ldrb	r3, [r3, #22]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d110      	bne.n	8002156 <motion_hw_init+0xaa>
            __HAL_TIM_SET_COUNTER(axis->tim, 0u);
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	699b      	ldr	r3, [r3, #24]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	2200      	movs	r2, #0
 800213c:	625a      	str	r2, [r3, #36]	@ 0x24
            if (HAL_TIM_Encoder_Start(axis->tim, TIM_CHANNEL_ALL) != HAL_OK) {
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	699b      	ldr	r3, [r3, #24]
 8002142:	213c      	movs	r1, #60	@ 0x3c
 8002144:	4618      	mov	r0, r3
 8002146:	f008 feef 	bl	800af28 <HAL_TIM_Encoder_Start>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d017      	beq.n	8002180 <motion_hw_init+0xd4>
                Error_Handler();
 8002150:	f002 fd00 	bl	8004b54 <Error_Handler>
 8002154:	e014      	b.n	8002180 <motion_hw_init+0xd4>
            }
        } else if (axis->encoder_type == MOTION_ENCODER_TYPE_LPTIM) {
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	7d9b      	ldrb	r3, [r3, #22]
 800215a:	2b01      	cmp	r3, #1
 800215c:	d110      	bne.n	8002180 <motion_hw_init+0xd4>
            (void)HAL_LPTIM_Encoder_Stop(axis->lptim);
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	69db      	ldr	r3, [r3, #28]
 8002162:	4618      	mov	r0, r3
 8002164:	f004 fd70 	bl	8006c48 <HAL_LPTIM_Encoder_Stop>
            if (HAL_LPTIM_Encoder_Start(axis->lptim, LPTIM_ENCODER_PERIOD) != HAL_OK) {
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	69db      	ldr	r3, [r3, #28]
 800216c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002170:	4618      	mov	r0, r3
 8002172:	f004 fcdf 	bl	8006b34 <HAL_LPTIM_Encoder_Start>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d001      	beq.n	8002180 <motion_hw_init+0xd4>
                Error_Handler();
 800217c:	f002 fcea 	bl	8004b54 <Error_Handler>
    for (uint8_t i = 0; i < MOTION_AXIS_COUNT; ++i) {
 8002180:	79bb      	ldrb	r3, [r7, #6]
 8002182:	3301      	adds	r3, #1
 8002184:	71bb      	strb	r3, [r7, #6]
 8002186:	79bb      	ldrb	r3, [r7, #6]
 8002188:	2b02      	cmp	r3, #2
 800218a:	d9c7      	bls.n	800211c <motion_hw_init+0x70>
#endif
        }
    }

    // Mantém os EN dos eixos Y (1) e Z (2) ativados (nível baixo) conforme solicitado
    gpio_bsrr_reset(g_axis[1].ena_port, g_axis[1].ena_pin);
 800218c:	4b09      	ldr	r3, [pc, #36]	@ (80021b4 <motion_hw_init+0x108>)
 800218e:	2220      	movs	r2, #32
 8002190:	4611      	mov	r1, r2
 8002192:	4618      	mov	r0, r3
 8002194:	f7ff ff75 	bl	8002082 <gpio_bsrr_reset>
    gpio_bsrr_reset(g_axis[2].ena_port, g_axis[2].ena_pin);
 8002198:	4b07      	ldr	r3, [pc, #28]	@ (80021b8 <motion_hw_init+0x10c>)
 800219a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800219e:	4611      	mov	r1, r2
 80021a0:	4618      	mov	r0, r3
 80021a2:	f7ff ff6e 	bl	8002082 <gpio_bsrr_reset>
}
 80021a6:	bf00      	nop
 80021a8:	3708      	adds	r7, #8
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	0800fae4 	.word	0x0800fae4
 80021b4:	48000800 	.word	0x48000800
 80021b8:	48000c00 	.word	0x48000c00

080021bc <motion_hw_set_dir>:

void motion_hw_set_dir(uint8_t axis, uint8_t dir)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	4603      	mov	r3, r0
 80021c4:	460a      	mov	r2, r1
 80021c6:	71fb      	strb	r3, [r7, #7]
 80021c8:	4613      	mov	r3, r2
 80021ca:	71bb      	strb	r3, [r7, #6]
    if (axis >= MOTION_AXIS_COUNT) return;
 80021cc:	79fb      	ldrb	r3, [r7, #7]
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d82e      	bhi.n	8002230 <motion_hw_set_dir+0x74>
    if (dir) gpio_bsrr_set(g_axis[axis].dir_port, g_axis[axis].dir_pin);
 80021d2:	79bb      	ldrb	r3, [r7, #6]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d015      	beq.n	8002204 <motion_hw_set_dir+0x48>
 80021d8:	79fa      	ldrb	r2, [r7, #7]
 80021da:	4917      	ldr	r1, [pc, #92]	@ (8002238 <motion_hw_set_dir+0x7c>)
 80021dc:	4613      	mov	r3, r2
 80021de:	00db      	lsls	r3, r3, #3
 80021e0:	4413      	add	r3, r2
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	440b      	add	r3, r1
 80021e6:	3308      	adds	r3, #8
 80021e8:	6818      	ldr	r0, [r3, #0]
 80021ea:	79fa      	ldrb	r2, [r7, #7]
 80021ec:	4912      	ldr	r1, [pc, #72]	@ (8002238 <motion_hw_set_dir+0x7c>)
 80021ee:	4613      	mov	r3, r2
 80021f0:	00db      	lsls	r3, r3, #3
 80021f2:	4413      	add	r3, r2
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	440b      	add	r3, r1
 80021f8:	330c      	adds	r3, #12
 80021fa:	881b      	ldrh	r3, [r3, #0]
 80021fc:	4619      	mov	r1, r3
 80021fe:	f7ff ff2d 	bl	800205c <gpio_bsrr_set>
 8002202:	e016      	b.n	8002232 <motion_hw_set_dir+0x76>
    else     gpio_bsrr_reset(g_axis[axis].dir_port, g_axis[axis].dir_pin);
 8002204:	79fa      	ldrb	r2, [r7, #7]
 8002206:	490c      	ldr	r1, [pc, #48]	@ (8002238 <motion_hw_set_dir+0x7c>)
 8002208:	4613      	mov	r3, r2
 800220a:	00db      	lsls	r3, r3, #3
 800220c:	4413      	add	r3, r2
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	440b      	add	r3, r1
 8002212:	3308      	adds	r3, #8
 8002214:	6818      	ldr	r0, [r3, #0]
 8002216:	79fa      	ldrb	r2, [r7, #7]
 8002218:	4907      	ldr	r1, [pc, #28]	@ (8002238 <motion_hw_set_dir+0x7c>)
 800221a:	4613      	mov	r3, r2
 800221c:	00db      	lsls	r3, r3, #3
 800221e:	4413      	add	r3, r2
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	440b      	add	r3, r1
 8002224:	330c      	adds	r3, #12
 8002226:	881b      	ldrh	r3, [r3, #0]
 8002228:	4619      	mov	r1, r3
 800222a:	f7ff ff2a 	bl	8002082 <gpio_bsrr_reset>
 800222e:	e000      	b.n	8002232 <motion_hw_set_dir+0x76>
    if (axis >= MOTION_AXIS_COUNT) return;
 8002230:	bf00      	nop
}
 8002232:	3708      	adds	r7, #8
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	0800fae4 	.word	0x0800fae4

0800223c <motion_hw_enable>:

void motion_hw_enable(uint8_t axis, uint8_t enable)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
 8002242:	4603      	mov	r3, r0
 8002244:	460a      	mov	r2, r1
 8002246:	71fb      	strb	r3, [r7, #7]
 8002248:	4613      	mov	r3, r2
 800224a:	71bb      	strb	r3, [r7, #6]
    if (axis >= MOTION_AXIS_COUNT) return;
 800224c:	79fb      	ldrb	r3, [r7, #7]
 800224e:	2b02      	cmp	r3, #2
 8002250:	d82e      	bhi.n	80022b0 <motion_hw_enable+0x74>
    // Enable ativo em baixo: enable=1 -> força baixo
    if (enable) gpio_bsrr_reset(g_axis[axis].ena_port, g_axis[axis].ena_pin);
 8002252:	79bb      	ldrb	r3, [r7, #6]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d015      	beq.n	8002284 <motion_hw_enable+0x48>
 8002258:	79fa      	ldrb	r2, [r7, #7]
 800225a:	4917      	ldr	r1, [pc, #92]	@ (80022b8 <motion_hw_enable+0x7c>)
 800225c:	4613      	mov	r3, r2
 800225e:	00db      	lsls	r3, r3, #3
 8002260:	4413      	add	r3, r2
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	440b      	add	r3, r1
 8002266:	3310      	adds	r3, #16
 8002268:	6818      	ldr	r0, [r3, #0]
 800226a:	79fa      	ldrb	r2, [r7, #7]
 800226c:	4912      	ldr	r1, [pc, #72]	@ (80022b8 <motion_hw_enable+0x7c>)
 800226e:	4613      	mov	r3, r2
 8002270:	00db      	lsls	r3, r3, #3
 8002272:	4413      	add	r3, r2
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	440b      	add	r3, r1
 8002278:	3314      	adds	r3, #20
 800227a:	881b      	ldrh	r3, [r3, #0]
 800227c:	4619      	mov	r1, r3
 800227e:	f7ff ff00 	bl	8002082 <gpio_bsrr_reset>
 8002282:	e016      	b.n	80022b2 <motion_hw_enable+0x76>
    else        gpio_bsrr_set(g_axis[axis].ena_port, g_axis[axis].ena_pin);
 8002284:	79fa      	ldrb	r2, [r7, #7]
 8002286:	490c      	ldr	r1, [pc, #48]	@ (80022b8 <motion_hw_enable+0x7c>)
 8002288:	4613      	mov	r3, r2
 800228a:	00db      	lsls	r3, r3, #3
 800228c:	4413      	add	r3, r2
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	440b      	add	r3, r1
 8002292:	3310      	adds	r3, #16
 8002294:	6818      	ldr	r0, [r3, #0]
 8002296:	79fa      	ldrb	r2, [r7, #7]
 8002298:	4907      	ldr	r1, [pc, #28]	@ (80022b8 <motion_hw_enable+0x7c>)
 800229a:	4613      	mov	r3, r2
 800229c:	00db      	lsls	r3, r3, #3
 800229e:	4413      	add	r3, r2
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	440b      	add	r3, r1
 80022a4:	3314      	adds	r3, #20
 80022a6:	881b      	ldrh	r3, [r3, #0]
 80022a8:	4619      	mov	r1, r3
 80022aa:	f7ff fed7 	bl	800205c <gpio_bsrr_set>
 80022ae:	e000      	b.n	80022b2 <motion_hw_enable+0x76>
    if (axis >= MOTION_AXIS_COUNT) return;
 80022b0:	bf00      	nop
}
 80022b2:	3708      	adds	r7, #8
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	0800fae4 	.word	0x0800fae4

080022bc <motion_hw_step_high>:

void motion_hw_step_high(uint8_t axis)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	4603      	mov	r3, r0
 80022c4:	71fb      	strb	r3, [r7, #7]
    if (axis >= MOTION_AXIS_COUNT) return;
 80022c6:	79fb      	ldrb	r3, [r7, #7]
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	d814      	bhi.n	80022f6 <motion_hw_step_high+0x3a>
    gpio_bsrr_set(g_axis[axis].step_port, g_axis[axis].step_pin);
 80022cc:	79fa      	ldrb	r2, [r7, #7]
 80022ce:	490c      	ldr	r1, [pc, #48]	@ (8002300 <motion_hw_step_high+0x44>)
 80022d0:	4613      	mov	r3, r2
 80022d2:	00db      	lsls	r3, r3, #3
 80022d4:	4413      	add	r3, r2
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	440b      	add	r3, r1
 80022da:	6818      	ldr	r0, [r3, #0]
 80022dc:	79fa      	ldrb	r2, [r7, #7]
 80022de:	4908      	ldr	r1, [pc, #32]	@ (8002300 <motion_hw_step_high+0x44>)
 80022e0:	4613      	mov	r3, r2
 80022e2:	00db      	lsls	r3, r3, #3
 80022e4:	4413      	add	r3, r2
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	440b      	add	r3, r1
 80022ea:	3304      	adds	r3, #4
 80022ec:	881b      	ldrh	r3, [r3, #0]
 80022ee:	4619      	mov	r1, r3
 80022f0:	f7ff feb4 	bl	800205c <gpio_bsrr_set>
 80022f4:	e000      	b.n	80022f8 <motion_hw_step_high+0x3c>
    if (axis >= MOTION_AXIS_COUNT) return;
 80022f6:	bf00      	nop
}
 80022f8:	3708      	adds	r7, #8
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	0800fae4 	.word	0x0800fae4

08002304 <motion_hw_step_low>:
void motion_hw_step_low(uint8_t axis)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
 800230a:	4603      	mov	r3, r0
 800230c:	71fb      	strb	r3, [r7, #7]
    if (axis >= MOTION_AXIS_COUNT) return;
 800230e:	79fb      	ldrb	r3, [r7, #7]
 8002310:	2b02      	cmp	r3, #2
 8002312:	d814      	bhi.n	800233e <motion_hw_step_low+0x3a>
    gpio_bsrr_reset(g_axis[axis].step_port, g_axis[axis].step_pin);
 8002314:	79fa      	ldrb	r2, [r7, #7]
 8002316:	490c      	ldr	r1, [pc, #48]	@ (8002348 <motion_hw_step_low+0x44>)
 8002318:	4613      	mov	r3, r2
 800231a:	00db      	lsls	r3, r3, #3
 800231c:	4413      	add	r3, r2
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	440b      	add	r3, r1
 8002322:	6818      	ldr	r0, [r3, #0]
 8002324:	79fa      	ldrb	r2, [r7, #7]
 8002326:	4908      	ldr	r1, [pc, #32]	@ (8002348 <motion_hw_step_low+0x44>)
 8002328:	4613      	mov	r3, r2
 800232a:	00db      	lsls	r3, r3, #3
 800232c:	4413      	add	r3, r2
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	440b      	add	r3, r1
 8002332:	3304      	adds	r3, #4
 8002334:	881b      	ldrh	r3, [r3, #0]
 8002336:	4619      	mov	r1, r3
 8002338:	f7ff fea3 	bl	8002082 <gpio_bsrr_reset>
 800233c:	e000      	b.n	8002340 <motion_hw_step_low+0x3c>
    if (axis >= MOTION_AXIS_COUNT) return;
 800233e:	bf00      	nop
}
 8002340:	3708      	adds	r7, #8
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	0800fae4 	.word	0x0800fae4

0800234c <motion_hw_encoder_read_raw>:

uint32_t motion_hw_encoder_read_raw(uint8_t axis)
{
 800234c:	b480      	push	{r7}
 800234e:	b085      	sub	sp, #20
 8002350:	af00      	add	r7, sp, #0
 8002352:	4603      	mov	r3, r0
 8002354:	71fb      	strb	r3, [r7, #7]
    if (axis >= MOTION_AXIS_COUNT) return 0;
 8002356:	79fb      	ldrb	r3, [r7, #7]
 8002358:	2b02      	cmp	r3, #2
 800235a:	d901      	bls.n	8002360 <motion_hw_encoder_read_raw+0x14>
 800235c:	2300      	movs	r3, #0
 800235e:	e015      	b.n	800238c <motion_hw_encoder_read_raw+0x40>
    const motion_axis_hw_t *hw = &g_axis[axis];
 8002360:	79fa      	ldrb	r2, [r7, #7]
 8002362:	4613      	mov	r3, r2
 8002364:	00db      	lsls	r3, r3, #3
 8002366:	4413      	add	r3, r2
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	4a0b      	ldr	r2, [pc, #44]	@ (8002398 <motion_hw_encoder_read_raw+0x4c>)
 800236c:	4413      	add	r3, r2
 800236e:	60fb      	str	r3, [r7, #12]
    if (hw->encoder_type == MOTION_ENCODER_TYPE_TIM) {
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	7d9b      	ldrb	r3, [r3, #22]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d104      	bne.n	8002382 <motion_hw_encoder_read_raw+0x36>
        return (uint32_t)__HAL_TIM_GET_COUNTER(hw->tim);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	699b      	ldr	r3, [r3, #24]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002380:	e004      	b.n	800238c <motion_hw_encoder_read_raw+0x40>
    } else {
        return (uint32_t)(hw->lptim->Instance->CNT & 0xFFFFu);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	69db      	ldr	r3, [r3, #28]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	69db      	ldr	r3, [r3, #28]
 800238a:	b29b      	uxth	r3, r3
    }
}
 800238c:	4618      	mov	r0, r3
 800238e:	3714      	adds	r7, #20
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr
 8002398:	0800fae4 	.word	0x0800fae4

0800239c <motion_hw_encoder_bits>:

uint8_t motion_hw_encoder_bits(uint8_t axis)
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	4603      	mov	r3, r0
 80023a4:	71fb      	strb	r3, [r7, #7]
    if (axis >= MOTION_AXIS_COUNT) return 0u;
 80023a6:	79fb      	ldrb	r3, [r7, #7]
 80023a8:	2b02      	cmp	r3, #2
 80023aa:	d901      	bls.n	80023b0 <motion_hw_encoder_bits+0x14>
 80023ac:	2300      	movs	r3, #0
 80023ae:	e008      	b.n	80023c2 <motion_hw_encoder_bits+0x26>
    return g_axis[axis].counter_bits;
 80023b0:	79fa      	ldrb	r2, [r7, #7]
 80023b2:	4907      	ldr	r1, [pc, #28]	@ (80023d0 <motion_hw_encoder_bits+0x34>)
 80023b4:	4613      	mov	r3, r2
 80023b6:	00db      	lsls	r3, r3, #3
 80023b8:	4413      	add	r3, r2
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	440b      	add	r3, r1
 80023be:	3320      	adds	r3, #32
 80023c0:	781b      	ldrb	r3, [r3, #0]
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	370c      	adds	r7, #12
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	0800fae4 	.word	0x0800fae4

080023d4 <motion_lock>:
static volatile uint8_t g_demo_speed_idx = 1u; /* default ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â°ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¹ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â 10k steps/s */

/* =======================
 *  Helpers de lock
 * ======================= */
static inline uint32_t motion_lock(void) {
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80023da:	f3ef 8310 	mrs	r3, PRIMASK
 80023de:	603b      	str	r3, [r7, #0]
  return(result);
 80023e0:	683b      	ldr	r3, [r7, #0]
    uint32_t primask = __get_PRIMASK();
 80023e2:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 80023e4:	b672      	cpsid	i
}
 80023e6:	bf00      	nop
    __disable_irq();
    return primask;
 80023e8:	687b      	ldr	r3, [r7, #4]
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	370c      	adds	r7, #12
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr

080023f6 <motion_unlock>:
static inline void motion_unlock(uint32_t primask) {
 80023f6:	b480      	push	{r7}
 80023f8:	b085      	sub	sp, #20
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	6078      	str	r0, [r7, #4]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	f383 8810 	msr	PRIMASK, r3
}
 8002408:	bf00      	nop
    __set_PRIMASK(primask);
}
 800240a:	bf00      	nop
 800240c:	3714      	adds	r7, #20
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr

08002416 <motion_total_for_axis>:

/* =======================
 *  Helpers de acesso por eixo
 * ======================= */
static inline uint32_t motion_total_for_axis(const move_queue_add_req_t *req, uint8_t axis) {
 8002416:	b480      	push	{r7}
 8002418:	b083      	sub	sp, #12
 800241a:	af00      	add	r7, sp, #0
 800241c:	6078      	str	r0, [r7, #4]
 800241e:	460b      	mov	r3, r1
 8002420:	70fb      	strb	r3, [r7, #3]
    switch (axis) {
 8002422:	78fb      	ldrb	r3, [r7, #3]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d002      	beq.n	800242e <motion_total_for_axis+0x18>
 8002428:	2b01      	cmp	r3, #1
 800242a:	d003      	beq.n	8002434 <motion_total_for_axis+0x1e>
 800242c:	e005      	b.n	800243a <motion_total_for_axis+0x24>
        case AXIS_X: return req->sx;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	e004      	b.n	800243e <motion_total_for_axis+0x28>
        case AXIS_Y: return req->sy;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	e001      	b.n	800243e <motion_total_for_axis+0x28>
        case AXIS_Z:
        default:     return req->sz;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	695b      	ldr	r3, [r3, #20]
    }
}
 800243e:	4618      	mov	r0, r3
 8002440:	370c      	adds	r7, #12
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr

0800244a <motion_velocity_for_axis>:

static inline uint16_t motion_velocity_for_axis(const move_queue_add_req_t *req, uint8_t axis) {
 800244a:	b480      	push	{r7}
 800244c:	b083      	sub	sp, #12
 800244e:	af00      	add	r7, sp, #0
 8002450:	6078      	str	r0, [r7, #4]
 8002452:	460b      	mov	r3, r1
 8002454:	70fb      	strb	r3, [r7, #3]
    switch (axis) {
 8002456:	78fb      	ldrb	r3, [r7, #3]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d002      	beq.n	8002462 <motion_velocity_for_axis+0x18>
 800245c:	2b01      	cmp	r3, #1
 800245e:	d003      	beq.n	8002468 <motion_velocity_for_axis+0x1e>
 8002460:	e005      	b.n	800246e <motion_velocity_for_axis+0x24>
        case AXIS_X: return req->vx;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	885b      	ldrh	r3, [r3, #2]
 8002466:	e004      	b.n	8002472 <motion_velocity_for_axis+0x28>
        case AXIS_Y: return req->vy;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	891b      	ldrh	r3, [r3, #8]
 800246c:	e001      	b.n	8002472 <motion_velocity_for_axis+0x28>
        case AXIS_Z:
        default:     return req->vz;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	8a1b      	ldrh	r3, [r3, #16]
    }
}
 8002472:	4618      	mov	r0, r3
 8002474:	370c      	adds	r7, #12
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr

0800247e <motion_kp_for_axis>:

static inline uint16_t motion_kp_for_axis(const move_queue_add_req_t *req, uint8_t axis) {
 800247e:	b480      	push	{r7}
 8002480:	b083      	sub	sp, #12
 8002482:	af00      	add	r7, sp, #0
 8002484:	6078      	str	r0, [r7, #4]
 8002486:	460b      	mov	r3, r1
 8002488:	70fb      	strb	r3, [r7, #3]
    switch (axis) {
 800248a:	78fb      	ldrb	r3, [r7, #3]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d002      	beq.n	8002496 <motion_kp_for_axis+0x18>
 8002490:	2b01      	cmp	r3, #1
 8002492:	d003      	beq.n	800249c <motion_kp_for_axis+0x1e>
 8002494:	e005      	b.n	80024a2 <motion_kp_for_axis+0x24>
        case AXIS_X: return req->kp_x;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	8b1b      	ldrh	r3, [r3, #24]
 800249a:	e004      	b.n	80024a6 <motion_kp_for_axis+0x28>
        case AXIS_Y: return req->kp_y;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	8bdb      	ldrh	r3, [r3, #30]
 80024a0:	e001      	b.n	80024a6 <motion_kp_for_axis+0x28>
        case AXIS_Z:
        default:     return req->kp_z;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
    }
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	370c      	adds	r7, #12
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr

080024b2 <motion_ki_for_axis>:

static inline uint16_t motion_ki_for_axis(const move_queue_add_req_t *req, uint8_t axis) {
 80024b2:	b480      	push	{r7}
 80024b4:	b083      	sub	sp, #12
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	6078      	str	r0, [r7, #4]
 80024ba:	460b      	mov	r3, r1
 80024bc:	70fb      	strb	r3, [r7, #3]
    switch (axis) {
 80024be:	78fb      	ldrb	r3, [r7, #3]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d002      	beq.n	80024ca <motion_ki_for_axis+0x18>
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d003      	beq.n	80024d0 <motion_ki_for_axis+0x1e>
 80024c8:	e005      	b.n	80024d6 <motion_ki_for_axis+0x24>
        case AXIS_X: return req->ki_x;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	8b5b      	ldrh	r3, [r3, #26]
 80024ce:	e004      	b.n	80024da <motion_ki_for_axis+0x28>
        case AXIS_Y: return req->ki_y;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	8c1b      	ldrh	r3, [r3, #32]
 80024d4:	e001      	b.n	80024da <motion_ki_for_axis+0x28>
        case AXIS_Z:
        default:     return req->ki_z;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
    }
}
 80024da:	4618      	mov	r0, r3
 80024dc:	370c      	adds	r7, #12
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr

080024e6 <motion_kd_for_axis>:

static inline uint16_t motion_kd_for_axis(const move_queue_add_req_t *req, uint8_t axis) {
 80024e6:	b480      	push	{r7}
 80024e8:	b083      	sub	sp, #12
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	6078      	str	r0, [r7, #4]
 80024ee:	460b      	mov	r3, r1
 80024f0:	70fb      	strb	r3, [r7, #3]
    switch (axis) {
 80024f2:	78fb      	ldrb	r3, [r7, #3]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d002      	beq.n	80024fe <motion_kd_for_axis+0x18>
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d003      	beq.n	8002504 <motion_kd_for_axis+0x1e>
 80024fc:	e005      	b.n	800250a <motion_kd_for_axis+0x24>
        case AXIS_X: return req->kd_x;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	8b9b      	ldrh	r3, [r3, #28]
 8002502:	e004      	b.n	800250e <motion_kd_for_axis+0x28>
        case AXIS_Y: return req->kd_y;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8002508:	e001      	b.n	800250e <motion_kd_for_axis+0x28>
        case AXIS_Z:
        default:     return req->kd_z;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    }
}
 800250e:	4618      	mov	r0, r3
 8002510:	370c      	adds	r7, #12
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr

0800251a <motion_clamp_error>:

static inline int8_t motion_clamp_error(int32_t value) {
 800251a:	b480      	push	{r7}
 800251c:	b083      	sub	sp, #12
 800251e:	af00      	add	r7, sp, #0
 8002520:	6078      	str	r0, [r7, #4]
    if (value > 127)  return 127;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2b7f      	cmp	r3, #127	@ 0x7f
 8002526:	dd01      	ble.n	800252c <motion_clamp_error+0x12>
 8002528:	237f      	movs	r3, #127	@ 0x7f
 800252a:	e008      	b.n	800253e <motion_clamp_error+0x24>
    if (value < -128) return -128;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	f113 0f80 	cmn.w	r3, #128	@ 0x80
 8002532:	da02      	bge.n	800253a <motion_clamp_error+0x20>
 8002534:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 8002538:	e001      	b.n	800253e <motion_clamp_error+0x24>
    return (int8_t)value;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	b25b      	sxtb	r3, r3
}
 800253e:	4618      	mov	r0, r3
 8002540:	370c      	adds	r7, #12
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
	...

0800254c <motion_refresh_status_locked>:

/* =======================
 *  Status e fila
 * ======================= */
static void motion_refresh_status_locked(void) {
 800254c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002550:	b0a3      	sub	sp, #140	@ 0x8c
 8002552:	af00      	add	r7, sp, #0
    g_status.queue_depth = (uint8_t)(g_queue_count + (g_has_active_segment ? 1u : 0u));
 8002554:	4b9a      	ldr	r3, [pc, #616]	@ (80027c0 <motion_refresh_status_locked+0x274>)
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	b2db      	uxtb	r3, r3
 800255a:	2b00      	cmp	r3, #0
 800255c:	d001      	beq.n	8002562 <motion_refresh_status_locked+0x16>
 800255e:	2201      	movs	r2, #1
 8002560:	e000      	b.n	8002564 <motion_refresh_status_locked+0x18>
 8002562:	2200      	movs	r2, #0
 8002564:	4b97      	ldr	r3, [pc, #604]	@ (80027c4 <motion_refresh_status_locked+0x278>)
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	4413      	add	r3, r2
 800256a:	b2db      	uxtb	r3, r3
 800256c:	4a96      	ldr	r2, [pc, #600]	@ (80027c8 <motion_refresh_status_locked+0x27c>)
 800256e:	7053      	strb	r3, [r2, #1]

    for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8002570:	2300      	movs	r3, #0
 8002572:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8002576:	e118      	b.n	80027aa <motion_refresh_status_locked+0x25e>
        const motion_axis_state_t *ax = &g_axis_state[axis];
 8002578:	f897 2087 	ldrb.w	r2, [r7, #135]	@ 0x87
 800257c:	4613      	mov	r3, r2
 800257e:	00db      	lsls	r3, r3, #3
 8002580:	1a9b      	subs	r3, r3, r2
 8002582:	00db      	lsls	r3, r3, #3
 8002584:	4a91      	ldr	r2, [pc, #580]	@ (80027cc <motion_refresh_status_locked+0x280>)
 8002586:	4413      	add	r3, r2
 8002588:	677b      	str	r3, [r7, #116]	@ 0x74
        uint32_t total = ax->total_steps;
 800258a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	673b      	str	r3, [r7, #112]	@ 0x70
        uint32_t emitted = ax->emitted_steps;
 8002590:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	66fb      	str	r3, [r7, #108]	@ 0x6c
        uint8_t pct = 0u;
 8002596:	2300      	movs	r3, #0
 8002598:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86

        if (g_has_active_segment && total > 0u) {
 800259c:	4b88      	ldr	r3, [pc, #544]	@ (80027c0 <motion_refresh_status_locked+0x274>)
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d049      	beq.n	800263a <motion_refresh_status_locked+0xee>
 80025a6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d046      	beq.n	800263a <motion_refresh_status_locked+0xee>
            uint64_t scaled = (uint64_t)emitted * 100u;
 80025ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80025ae:	2200      	movs	r2, #0
 80025b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80025b2:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80025b4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80025b8:	1891      	adds	r1, r2, r2
 80025ba:	6239      	str	r1, [r7, #32]
 80025bc:	415b      	adcs	r3, r3
 80025be:	627b      	str	r3, [r7, #36]	@ 0x24
 80025c0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80025c4:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80025c6:	eb12 0801 	adds.w	r8, r2, r1
 80025ca:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80025cc:	eb43 0901 	adc.w	r9, r3, r1
 80025d0:	f04f 0200 	mov.w	r2, #0
 80025d4:	f04f 0300 	mov.w	r3, #0
 80025d8:	ea4f 1349 	mov.w	r3, r9, lsl #5
 80025dc:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 80025e0:	ea4f 1248 	mov.w	r2, r8, lsl #5
 80025e4:	eb18 0102 	adds.w	r1, r8, r2
 80025e8:	6439      	str	r1, [r7, #64]	@ 0x40
 80025ea:	eb49 0303 	adc.w	r3, r9, r3
 80025ee:	647b      	str	r3, [r7, #68]	@ 0x44
 80025f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80025f2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 80025f6:	4602      	mov	r2, r0
 80025f8:	189b      	adds	r3, r3, r2
 80025fa:	61bb      	str	r3, [r7, #24]
 80025fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80025fe:	460a      	mov	r2, r1
 8002600:	4153      	adcs	r3, r2
 8002602:	61fb      	str	r3, [r7, #28]
 8002604:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002608:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
            pct = (uint8_t)(scaled / total);
 800260c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800260e:	2200      	movs	r2, #0
 8002610:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002612:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002614:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002618:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 800261c:	f7fd fe28 	bl	8000270 <__aeabi_uldivmod>
 8002620:	4602      	mov	r2, r0
 8002622:	460b      	mov	r3, r1
 8002624:	4613      	mov	r3, r2
 8002626:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
            if (pct > 100u) pct = 100u;
 800262a:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 800262e:	2b64      	cmp	r3, #100	@ 0x64
 8002630:	d954      	bls.n	80026dc <motion_refresh_status_locked+0x190>
 8002632:	2364      	movs	r3, #100	@ 0x64
 8002634:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
        if (g_has_active_segment && total > 0u) {
 8002638:	e050      	b.n	80026dc <motion_refresh_status_locked+0x190>
        } else if (total == 0u && g_has_active_segment) {
 800263a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800263c:	2b00      	cmp	r3, #0
 800263e:	d108      	bne.n	8002652 <motion_refresh_status_locked+0x106>
 8002640:	4b5f      	ldr	r3, [pc, #380]	@ (80027c0 <motion_refresh_status_locked+0x274>)
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	b2db      	uxtb	r3, r3
 8002646:	2b00      	cmp	r3, #0
 8002648:	d003      	beq.n	8002652 <motion_refresh_status_locked+0x106>
            pct = 100u;
 800264a:	2364      	movs	r3, #100	@ 0x64
 800264c:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 8002650:	e045      	b.n	80026de <motion_refresh_status_locked+0x192>
        } else if (!g_has_active_segment && total > 0u) {
 8002652:	4b5b      	ldr	r3, [pc, #364]	@ (80027c0 <motion_refresh_status_locked+0x274>)
 8002654:	781b      	ldrb	r3, [r3, #0]
 8002656:	b2db      	uxtb	r3, r3
 8002658:	2b00      	cmp	r3, #0
 800265a:	d140      	bne.n	80026de <motion_refresh_status_locked+0x192>
 800265c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800265e:	2b00      	cmp	r3, #0
 8002660:	d03d      	beq.n	80026de <motion_refresh_status_locked+0x192>
            pct = (emitted >= total) ? 100u : (uint8_t)(((uint64_t)emitted * 100u) / total);
 8002662:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002664:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002666:	429a      	cmp	r2, r3
 8002668:	d234      	bcs.n	80026d4 <motion_refresh_status_locked+0x188>
 800266a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800266c:	2200      	movs	r2, #0
 800266e:	469a      	mov	sl, r3
 8002670:	4693      	mov	fp, r2
 8002672:	4652      	mov	r2, sl
 8002674:	465b      	mov	r3, fp
 8002676:	1891      	adds	r1, r2, r2
 8002678:	6139      	str	r1, [r7, #16]
 800267a:	415b      	adcs	r3, r3
 800267c:	617b      	str	r3, [r7, #20]
 800267e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002682:	eb12 040a 	adds.w	r4, r2, sl
 8002686:	eb43 050b 	adc.w	r5, r3, fp
 800268a:	f04f 0200 	mov.w	r2, #0
 800268e:	f04f 0300 	mov.w	r3, #0
 8002692:	016b      	lsls	r3, r5, #5
 8002694:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8002698:	0162      	lsls	r2, r4, #5
 800269a:	18a1      	adds	r1, r4, r2
 800269c:	60b9      	str	r1, [r7, #8]
 800269e:	eb45 0303 	adc.w	r3, r5, r3
 80026a2:	60fb      	str	r3, [r7, #12]
 80026a4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80026a8:	460b      	mov	r3, r1
 80026aa:	eb13 030a 	adds.w	r3, r3, sl
 80026ae:	633b      	str	r3, [r7, #48]	@ 0x30
 80026b0:	4613      	mov	r3, r2
 80026b2:	eb43 030b 	adc.w	r3, r3, fp
 80026b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80026b8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80026ba:	2200      	movs	r2, #0
 80026bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80026be:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80026c0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80026c4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80026c8:	f7fd fdd2 	bl	8000270 <__aeabi_uldivmod>
 80026cc:	4602      	mov	r2, r0
 80026ce:	460b      	mov	r3, r1
 80026d0:	b2d3      	uxtb	r3, r2
 80026d2:	e000      	b.n	80026d6 <motion_refresh_status_locked+0x18a>
 80026d4:	2364      	movs	r3, #100	@ 0x64
 80026d6:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 80026da:	e000      	b.n	80026de <motion_refresh_status_locked+0x192>
        if (g_has_active_segment && total > 0u) {
 80026dc:	bf00      	nop
        }

        int64_t actual_counts = g_encoder_position[axis] - g_encoder_origin[axis];
 80026de:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80026e2:	4a3b      	ldr	r2, [pc, #236]	@ (80027d0 <motion_refresh_status_locked+0x284>)
 80026e4:	00db      	lsls	r3, r3, #3
 80026e6:	4413      	add	r3, r2
 80026e8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80026ec:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80026f0:	4a38      	ldr	r2, [pc, #224]	@ (80027d4 <motion_refresh_status_locked+0x288>)
 80026f2:	00db      	lsls	r3, r3, #3
 80026f4:	4413      	add	r3, r2
 80026f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026fa:	1a86      	subs	r6, r0, r2
 80026fc:	603e      	str	r6, [r7, #0]
 80026fe:	eb61 0303 	sbc.w	r3, r1, r3
 8002702:	607b      	str	r3, [r7, #4]
 8002704:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002708:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
        if (actual_counts > (int64_t)INT32_MAX) actual_counts = INT32_MAX;
 800270c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8002710:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8002714:	f173 0300 	sbcs.w	r3, r3, #0
 8002718:	db06      	blt.n	8002728 <motion_refresh_status_locked+0x1dc>
 800271a:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800271e:	f04f 0300 	mov.w	r3, #0
 8002722:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
 8002726:	e00c      	b.n	8002742 <motion_refresh_status_locked+0x1f6>
        else if (actual_counts < (int64_t)INT32_MIN) actual_counts = INT32_MIN;
 8002728:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 800272c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8002730:	f173 33ff 	sbcs.w	r3, r3, #4294967295
 8002734:	da05      	bge.n	8002742 <motion_refresh_status_locked+0x1f6>
 8002736:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800273a:	f04f 33ff 	mov.w	r3, #4294967295
 800273e:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78

        int32_t desired_counts = (int32_t)ax->target_steps;
 8002742:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	65fb      	str	r3, [r7, #92]	@ 0x5c
        int32_t err = desired_counts - (int32_t)actual_counts;
 8002748:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800274a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800274c:	1a9b      	subs	r3, r3, r2
 800274e:	65bb      	str	r3, [r7, #88]	@ 0x58
        int8_t  err8 = motion_clamp_error(err);
 8002750:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8002752:	f7ff fee2 	bl	800251a <motion_clamp_error>
 8002756:	4603      	mov	r3, r0
 8002758:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

        switch (axis) {
 800275c:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8002760:	2b00      	cmp	r3, #0
 8002762:	d002      	beq.n	800276a <motion_refresh_status_locked+0x21e>
 8002764:	2b01      	cmp	r3, #1
 8002766:	d009      	beq.n	800277c <motion_refresh_status_locked+0x230>
 8002768:	e011      	b.n	800278e <motion_refresh_status_locked+0x242>
            case AXIS_X: g_status.pctX = pct; g_status.pidErrX = err8; break;
 800276a:	4a17      	ldr	r2, [pc, #92]	@ (80027c8 <motion_refresh_status_locked+0x27c>)
 800276c:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 8002770:	7093      	strb	r3, [r2, #2]
 8002772:	4a15      	ldr	r2, [pc, #84]	@ (80027c8 <motion_refresh_status_locked+0x27c>)
 8002774:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8002778:	7153      	strb	r3, [r2, #5]
 800277a:	e011      	b.n	80027a0 <motion_refresh_status_locked+0x254>
            case AXIS_Y: g_status.pctY = pct; g_status.pidErrY = err8; break;
 800277c:	4a12      	ldr	r2, [pc, #72]	@ (80027c8 <motion_refresh_status_locked+0x27c>)
 800277e:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 8002782:	70d3      	strb	r3, [r2, #3]
 8002784:	4a10      	ldr	r2, [pc, #64]	@ (80027c8 <motion_refresh_status_locked+0x27c>)
 8002786:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800278a:	7193      	strb	r3, [r2, #6]
 800278c:	e008      	b.n	80027a0 <motion_refresh_status_locked+0x254>
            case AXIS_Z:
            default:     g_status.pctZ = pct; g_status.pidErrZ = err8; break;
 800278e:	4a0e      	ldr	r2, [pc, #56]	@ (80027c8 <motion_refresh_status_locked+0x27c>)
 8002790:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 8002794:	7113      	strb	r3, [r2, #4]
 8002796:	4a0c      	ldr	r2, [pc, #48]	@ (80027c8 <motion_refresh_status_locked+0x27c>)
 8002798:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800279c:	71d3      	strb	r3, [r2, #7]
 800279e:	bf00      	nop
    for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 80027a0:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80027a4:	3301      	adds	r3, #1
 80027a6:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 80027aa:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	f67f aee2 	bls.w	8002578 <motion_refresh_status_locked+0x2c>
        }
    }
}
 80027b4:	bf00      	nop
 80027b6:	bf00      	nop
 80027b8:	378c      	adds	r7, #140	@ 0x8c
 80027ba:	46bd      	mov	sp, r7
 80027bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80027c0:	20000174 	.word	0x20000174
 80027c4:	20000c7a 	.word	0x20000c7a
 80027c8:	200000c4 	.word	0x200000c4
 80027cc:	200000cc 	.word	0x200000cc
 80027d0:	20000c80 	.word	0x20000c80
 80027d4:	20000ca8 	.word	0x20000ca8

080027d8 <motion_stop_all_axes_locked>:


static void motion_stop_all_axes_locked(void) {
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
    for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 80027de:	2300      	movs	r3, #0
 80027e0:	71fb      	strb	r3, [r7, #7]
 80027e2:	e045      	b.n	8002870 <motion_stop_all_axes_locked+0x98>
        motion_hw_step_low(axis);
 80027e4:	79fb      	ldrb	r3, [r7, #7]
 80027e6:	4618      	mov	r0, r3
 80027e8:	f7ff fd8c 	bl	8002304 <motion_hw_step_low>
        motion_hw_enable(axis, 0u);
 80027ec:	79fb      	ldrb	r3, [r7, #7]
 80027ee:	2100      	movs	r1, #0
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7ff fd23 	bl	800223c <motion_hw_enable>

        motion_axis_state_t *ax = &g_axis_state[axis];
 80027f6:	79fa      	ldrb	r2, [r7, #7]
 80027f8:	4613      	mov	r3, r2
 80027fa:	00db      	lsls	r3, r3, #3
 80027fc:	1a9b      	subs	r3, r3, r2
 80027fe:	00db      	lsls	r3, r3, #3
 8002800:	4a1f      	ldr	r2, [pc, #124]	@ (8002880 <motion_stop_all_axes_locked+0xa8>)
 8002802:	4413      	add	r3, r2
 8002804:	603b      	str	r3, [r7, #0]
        ax->total_steps       = 0u;
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	2200      	movs	r2, #0
 800280a:	601a      	str	r2, [r3, #0]
        ax->target_steps      = 0u;
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	2200      	movs	r2, #0
 8002810:	605a      	str	r2, [r3, #4]
        ax->emitted_steps     = 0u;
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	2200      	movs	r2, #0
 8002816:	609a      	str	r2, [r3, #8]

        ax->velocity_per_tick = 0u;
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	2200      	movs	r2, #0
 800281c:	819a      	strh	r2, [r3, #12]
        ax->kp = 0u; ax->ki = 0u; ax->kd = 0u;
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	2200      	movs	r2, #0
 8002822:	81da      	strh	r2, [r3, #14]
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	2200      	movs	r2, #0
 8002828:	821a      	strh	r2, [r3, #16]
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	2200      	movs	r2, #0
 800282e:	825a      	strh	r2, [r3, #18]

        /* limpa controle de pulso/guardas */
        ax->step_high         = 0u;
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	2200      	movs	r2, #0
 8002834:	751a      	strb	r2, [r3, #20]
        ax->step_low          = 0u;
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	2200      	movs	r2, #0
 800283a:	755a      	strb	r2, [r3, #21]
        ax->en_settle_ticks   = 0u;
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	2200      	movs	r2, #0
 8002840:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        ax->dir_settle_ticks  = 0u;
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	2200      	movs	r2, #0
 8002848:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* limpa DDA/rampa */
        ax->dda_accum_q16     = 0u;
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	2200      	movs	r2, #0
 8002850:	619a      	str	r2, [r3, #24]
        ax->dda_inc_q16       = 0u;
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	2200      	movs	r2, #0
 8002856:	61da      	str	r2, [r3, #28]
        ax->v_target_sps      = 0u;
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	2200      	movs	r2, #0
 800285c:	621a      	str	r2, [r3, #32]
        ax->v_actual_sps      = 0u;
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	2200      	movs	r2, #0
 8002862:	625a      	str	r2, [r3, #36]	@ 0x24
        ax->accel_sps2        = 0u;
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	2200      	movs	r2, #0
 8002868:	629a      	str	r2, [r3, #40]	@ 0x28
    for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 800286a:	79fb      	ldrb	r3, [r7, #7]
 800286c:	3301      	adds	r3, #1
 800286e:	71fb      	strb	r3, [r7, #7]
 8002870:	79fb      	ldrb	r3, [r7, #7]
 8002872:	2b02      	cmp	r3, #2
 8002874:	d9b6      	bls.n	80027e4 <motion_stop_all_axes_locked+0xc>
    }
}
 8002876:	bf00      	nop
 8002878:	bf00      	nop
 800287a:	3708      	adds	r7, #8
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}
 8002880:	200000cc 	.word	0x200000cc

08002884 <motion_queue_clear_locked>:


static void motion_queue_clear_locked(void) {
 8002884:	b480      	push	{r7}
 8002886:	af00      	add	r7, sp, #0
    g_queue_head = 0u;
 8002888:	4b06      	ldr	r3, [pc, #24]	@ (80028a4 <motion_queue_clear_locked+0x20>)
 800288a:	2200      	movs	r2, #0
 800288c:	701a      	strb	r2, [r3, #0]
    g_queue_tail = 0u;
 800288e:	4b06      	ldr	r3, [pc, #24]	@ (80028a8 <motion_queue_clear_locked+0x24>)
 8002890:	2200      	movs	r2, #0
 8002892:	701a      	strb	r2, [r3, #0]
    g_queue_count = 0u;
 8002894:	4b05      	ldr	r3, [pc, #20]	@ (80028ac <motion_queue_clear_locked+0x28>)
 8002896:	2200      	movs	r2, #0
 8002898:	701a      	strb	r2, [r3, #0]
}
 800289a:	bf00      	nop
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr
 80028a4:	20000c78 	.word	0x20000c78
 80028a8:	20000c79 	.word	0x20000c79
 80028ac:	20000c7a 	.word	0x20000c7a

080028b0 <motion_queue_push_locked>:

static proto_result_t motion_queue_push_locked(const move_queue_add_req_t *req) {
 80028b0:	b5b0      	push	{r4, r5, r7, lr}
 80028b2:	b082      	sub	sp, #8
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
    if (g_queue_count >= MOTION_QUEUE_CAPACITY)
 80028b8:	4b17      	ldr	r3, [pc, #92]	@ (8002918 <motion_queue_push_locked+0x68>)
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	2b3f      	cmp	r3, #63	@ 0x3f
 80028be:	d902      	bls.n	80028c6 <motion_queue_push_locked+0x16>
        return PROTO_ERR_RANGE;
 80028c0:	f06f 0303 	mvn.w	r3, #3
 80028c4:	e024      	b.n	8002910 <motion_queue_push_locked+0x60>
    g_queue[g_queue_tail].req = *req;
 80028c6:	4b15      	ldr	r3, [pc, #84]	@ (800291c <motion_queue_push_locked+0x6c>)
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	4619      	mov	r1, r3
 80028cc:	4a14      	ldr	r2, [pc, #80]	@ (8002920 <motion_queue_push_locked+0x70>)
 80028ce:	232c      	movs	r3, #44	@ 0x2c
 80028d0:	fb01 f303 	mul.w	r3, r1, r3
 80028d4:	441a      	add	r2, r3
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4614      	mov	r4, r2
 80028da:	461d      	mov	r5, r3
 80028dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028e4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80028e8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    g_queue_tail = (uint8_t)((g_queue_tail + 1u) % MOTION_QUEUE_CAPACITY);
 80028ec:	4b0b      	ldr	r3, [pc, #44]	@ (800291c <motion_queue_push_locked+0x6c>)
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	3301      	adds	r3, #1
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80028f8:	b2da      	uxtb	r2, r3
 80028fa:	4b08      	ldr	r3, [pc, #32]	@ (800291c <motion_queue_push_locked+0x6c>)
 80028fc:	701a      	strb	r2, [r3, #0]
    ++g_queue_count;
 80028fe:	4b06      	ldr	r3, [pc, #24]	@ (8002918 <motion_queue_push_locked+0x68>)
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	3301      	adds	r3, #1
 8002904:	b2da      	uxtb	r2, r3
 8002906:	4b04      	ldr	r3, [pc, #16]	@ (8002918 <motion_queue_push_locked+0x68>)
 8002908:	701a      	strb	r2, [r3, #0]
    motion_refresh_status_locked();
 800290a:	f7ff fe1f 	bl	800254c <motion_refresh_status_locked>
    return PROTO_OK;
 800290e:	2300      	movs	r3, #0
}
 8002910:	4618      	mov	r0, r3
 8002912:	3708      	adds	r7, #8
 8002914:	46bd      	mov	sp, r7
 8002916:	bdb0      	pop	{r4, r5, r7, pc}
 8002918:	20000c7a 	.word	0x20000c7a
 800291c:	20000c79 	.word	0x20000c79
 8002920:	20000178 	.word	0x20000178

08002924 <motion_queue_pop_locked>:

static int motion_queue_pop_locked(move_queue_add_req_t *out) {
 8002924:	b4b0      	push	{r4, r5, r7}
 8002926:	b083      	sub	sp, #12
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
    if (g_queue_count == 0u) return 0;
 800292c:	4b18      	ldr	r3, [pc, #96]	@ (8002990 <motion_queue_pop_locked+0x6c>)
 800292e:	781b      	ldrb	r3, [r3, #0]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d101      	bne.n	8002938 <motion_queue_pop_locked+0x14>
 8002934:	2300      	movs	r3, #0
 8002936:	e025      	b.n	8002984 <motion_queue_pop_locked+0x60>
    if (out) *out = g_queue[g_queue_head].req;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d012      	beq.n	8002964 <motion_queue_pop_locked+0x40>
 800293e:	4b15      	ldr	r3, [pc, #84]	@ (8002994 <motion_queue_pop_locked+0x70>)
 8002940:	781b      	ldrb	r3, [r3, #0]
 8002942:	4618      	mov	r0, r3
 8002944:	6879      	ldr	r1, [r7, #4]
 8002946:	4a14      	ldr	r2, [pc, #80]	@ (8002998 <motion_queue_pop_locked+0x74>)
 8002948:	232c      	movs	r3, #44	@ 0x2c
 800294a:	fb00 f303 	mul.w	r3, r0, r3
 800294e:	4413      	add	r3, r2
 8002950:	460c      	mov	r4, r1
 8002952:	461d      	mov	r5, r3
 8002954:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002956:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002958:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800295a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800295c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002960:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    g_queue_head = (uint8_t)((g_queue_head + 1u) % MOTION_QUEUE_CAPACITY);
 8002964:	4b0b      	ldr	r3, [pc, #44]	@ (8002994 <motion_queue_pop_locked+0x70>)
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	3301      	adds	r3, #1
 800296a:	b2db      	uxtb	r3, r3
 800296c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002970:	b2da      	uxtb	r2, r3
 8002972:	4b08      	ldr	r3, [pc, #32]	@ (8002994 <motion_queue_pop_locked+0x70>)
 8002974:	701a      	strb	r2, [r3, #0]
    --g_queue_count;
 8002976:	4b06      	ldr	r3, [pc, #24]	@ (8002990 <motion_queue_pop_locked+0x6c>)
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	3b01      	subs	r3, #1
 800297c:	b2da      	uxtb	r2, r3
 800297e:	4b04      	ldr	r3, [pc, #16]	@ (8002990 <motion_queue_pop_locked+0x6c>)
 8002980:	701a      	strb	r2, [r3, #0]
    return 1;
 8002982:	2301      	movs	r3, #1
}
 8002984:	4618      	mov	r0, r3
 8002986:	370c      	adds	r7, #12
 8002988:	46bd      	mov	sp, r7
 800298a:	bcb0      	pop	{r4, r5, r7}
 800298c:	4770      	bx	lr
 800298e:	bf00      	nop
 8002990:	20000c7a 	.word	0x20000c7a
 8002994:	20000c78 	.word	0x20000c78
 8002998:	20000178 	.word	0x20000178

0800299c <motion_begin_segment_locked>:

/* =======================
 *  InÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â­cio de segmento
 * ======================= */
static void motion_begin_segment_locked(const move_queue_add_req_t *seg) {
 800299c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80029a0:	b08e      	sub	sp, #56	@ 0x38
 80029a2:	af06      	add	r7, sp, #24
 80029a4:	6078      	str	r0, [r7, #4]
    if (!seg) return;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	f000 80ec 	beq.w	8002b86 <motion_begin_segment_locked+0x1ea>

    g_has_active_segment = 1u;
 80029ae:	4b78      	ldr	r3, [pc, #480]	@ (8002b90 <motion_begin_segment_locked+0x1f4>)
 80029b0:	2201      	movs	r2, #1
 80029b2:	701a      	strb	r2, [r3, #0]
    for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 80029b4:	2300      	movs	r3, #0
 80029b6:	77fb      	strb	r3, [r7, #31]
 80029b8:	e0b6      	b.n	8002b28 <motion_begin_segment_locked+0x18c>
        motion_axis_state_t *ax = &g_axis_state[axis];
 80029ba:	7ffa      	ldrb	r2, [r7, #31]
 80029bc:	4613      	mov	r3, r2
 80029be:	00db      	lsls	r3, r3, #3
 80029c0:	1a9b      	subs	r3, r3, r2
 80029c2:	00db      	lsls	r3, r3, #3
 80029c4:	4a73      	ldr	r2, [pc, #460]	@ (8002b94 <motion_begin_segment_locked+0x1f8>)
 80029c6:	4413      	add	r3, r2
 80029c8:	61bb      	str	r3, [r7, #24]
        uint32_t total   = motion_total_for_axis(seg, axis);
 80029ca:	7ffb      	ldrb	r3, [r7, #31]
 80029cc:	4619      	mov	r1, r3
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f7ff fd21 	bl	8002416 <motion_total_for_axis>
 80029d4:	6178      	str	r0, [r7, #20]
        uint16_t velTick = motion_velocity_for_axis(seg, axis);
 80029d6:	7ffb      	ldrb	r3, [r7, #31]
 80029d8:	4619      	mov	r1, r3
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f7ff fd35 	bl	800244a <motion_velocity_for_axis>
 80029e0:	4603      	mov	r3, r0
 80029e2:	827b      	strh	r3, [r7, #18]

        ax->total_steps       = total;
 80029e4:	69bb      	ldr	r3, [r7, #24]
 80029e6:	697a      	ldr	r2, [r7, #20]
 80029e8:	601a      	str	r2, [r3, #0]
        ax->target_steps      = 0u;
 80029ea:	69bb      	ldr	r3, [r7, #24]
 80029ec:	2200      	movs	r2, #0
 80029ee:	605a      	str	r2, [r3, #4]
        ax->emitted_steps     = 0u;
 80029f0:	69bb      	ldr	r3, [r7, #24]
 80029f2:	2200      	movs	r2, #0
 80029f4:	609a      	str	r2, [r3, #8]

        ax->velocity_per_tick = velTick;
 80029f6:	69bb      	ldr	r3, [r7, #24]
 80029f8:	8a7a      	ldrh	r2, [r7, #18]
 80029fa:	819a      	strh	r2, [r3, #12]
        ax->kp = motion_kp_for_axis(seg, axis);
 80029fc:	7ffb      	ldrb	r3, [r7, #31]
 80029fe:	4619      	mov	r1, r3
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	f7ff fd3c 	bl	800247e <motion_kp_for_axis>
 8002a06:	4603      	mov	r3, r0
 8002a08:	461a      	mov	r2, r3
 8002a0a:	69bb      	ldr	r3, [r7, #24]
 8002a0c:	81da      	strh	r2, [r3, #14]
        ax->ki = motion_ki_for_axis(seg, axis);
 8002a0e:	7ffb      	ldrb	r3, [r7, #31]
 8002a10:	4619      	mov	r1, r3
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f7ff fd4d 	bl	80024b2 <motion_ki_for_axis>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	69bb      	ldr	r3, [r7, #24]
 8002a1e:	821a      	strh	r2, [r3, #16]
        ax->kd = motion_kd_for_axis(seg, axis);
 8002a20:	7ffb      	ldrb	r3, [r7, #31]
 8002a22:	4619      	mov	r1, r3
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f7ff fd5e 	bl	80024e6 <motion_kd_for_axis>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	69bb      	ldr	r3, [r7, #24]
 8002a30:	825a      	strh	r2, [r3, #18]

        /* guardas para atender DIR/ENABLE timings do TMC5160 */
        ax->step_high         = 0u;
 8002a32:	69bb      	ldr	r3, [r7, #24]
 8002a34:	2200      	movs	r2, #0
 8002a36:	751a      	strb	r2, [r3, #20]
        ax->step_low          = 0u; /* tLOW inicia zerado; serÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ aplicado apÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â³s o 1ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Âº pulso */
 8002a38:	69bb      	ldr	r3, [r7, #24]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	755a      	strb	r2, [r3, #21]
        ax->en_settle_ticks   = (total > 0u) ? MOTION_ENABLE_SETTLE_TICKS : 0u;
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d001      	beq.n	8002a48 <motion_begin_segment_locked+0xac>
 8002a44:	2202      	movs	r2, #2
 8002a46:	e000      	b.n	8002a4a <motion_begin_segment_locked+0xae>
 8002a48:	2200      	movs	r2, #0
 8002a4a:	69bb      	ldr	r3, [r7, #24]
 8002a4c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        ax->dir_settle_ticks  = MOTION_DIR_SETUP_TICKS;
 8002a50:	69bb      	ldr	r3, [r7, #24]
 8002a52:	2201      	movs	r2, #1
 8002a54:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* zera DDA/rampa (nÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â£o atrapalha caminho de fila) */
        ax->dda_accum_q16     = 0u;
 8002a58:	69bb      	ldr	r3, [r7, #24]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	619a      	str	r2, [r3, #24]
        ax->dda_inc_q16       = 0u;
 8002a5e:	69bb      	ldr	r3, [r7, #24]
 8002a60:	2200      	movs	r2, #0
 8002a62:	61da      	str	r2, [r3, #28]
        ax->queue_accum_q16   = 0u;
 8002a64:	69bb      	ldr	r3, [r7, #24]
 8002a66:	2200      	movs	r2, #0
 8002a68:	62da      	str	r2, [r3, #44]	@ 0x2c
        /* queue_inc_q16: incremento fracionÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡rio (Q16) por tick do TIM6 para distribuir alvo */
        {
            uint32_t v_sps = ((uint32_t)velTick) * 1000u; /* steps/s desejados */
 8002a6a:	8a7b      	ldrh	r3, [r7, #18]
 8002a6c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002a70:	fb02 f303 	mul.w	r3, r2, r3
 8002a74:	60fb      	str	r3, [r7, #12]
            if (v_sps == 0u) ax->queue_inc_q16 = Q16_1; /* ritmo mÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ximo respeitando guardas */
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d104      	bne.n	8002a86 <motion_begin_segment_locked+0xea>
 8002a7c:	69bb      	ldr	r3, [r7, #24]
 8002a7e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002a82:	631a      	str	r2, [r3, #48]	@ 0x30
 8002a84:	e013      	b.n	8002aae <motion_begin_segment_locked+0x112>
            else              ax->queue_inc_q16 = Q16_DIV_UINT(v_sps, MOTION_TIM6_HZ);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	461c      	mov	r4, r3
 8002a8c:	4615      	mov	r5, r2
 8002a8e:	ea4f 4914 	mov.w	r9, r4, lsr #16
 8002a92:	ea4f 4804 	mov.w	r8, r4, lsl #16
 8002a96:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8002a9a:	f04f 0300 	mov.w	r3, #0
 8002a9e:	4640      	mov	r0, r8
 8002aa0:	4649      	mov	r1, r9
 8002aa2:	f7fd fbe5 	bl	8000270 <__aeabi_uldivmod>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	460b      	mov	r3, r1
 8002aaa:	69bb      	ldr	r3, [r7, #24]
 8002aac:	631a      	str	r2, [r3, #48]	@ 0x30
        }
        ax->v_target_sps      = ((uint32_t)velTick) * 1000u;  /* steps/s alvo (derivado do seu campo) */
 8002aae:	8a7b      	ldrh	r3, [r7, #18]
 8002ab0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002ab4:	fb03 f202 	mul.w	r2, r3, r2
 8002ab8:	69bb      	ldr	r3, [r7, #24]
 8002aba:	621a      	str	r2, [r3, #32]
        ax->v_actual_sps      = 0u;
 8002abc:	69bb      	ldr	r3, [r7, #24]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	625a      	str	r2, [r3, #36]	@ 0x24
        ax->accel_sps2        = DEMO_ACCEL_SPS2;
 8002ac2:	69bb      	ldr	r3, [r7, #24]
 8002ac4:	4a34      	ldr	r2, [pc, #208]	@ (8002b98 <motion_begin_segment_locked+0x1fc>)
 8002ac6:	629a      	str	r2, [r3, #40]	@ 0x28

        motion_hw_step_low(axis);
 8002ac8:	7ffb      	ldrb	r3, [r7, #31]
 8002aca:	4618      	mov	r0, r3
 8002acc:	f7ff fc1a 	bl	8002304 <motion_hw_step_low>
        motion_hw_set_dir(axis, (uint8_t)((seg->dirMask >> axis) & 0x1u));
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	785b      	ldrb	r3, [r3, #1]
 8002ad4:	461a      	mov	r2, r3
 8002ad6:	7ffb      	ldrb	r3, [r7, #31]
 8002ad8:	fa42 f303 	asr.w	r3, r2, r3
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	f003 0301 	and.w	r3, r3, #1
 8002ae2:	b2da      	uxtb	r2, r3
 8002ae4:	7ffb      	ldrb	r3, [r7, #31]
 8002ae6:	4611      	mov	r1, r2
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f7ff fb67 	bl	80021bc <motion_hw_set_dir>

        if (total > 0u) motion_hw_enable(axis, 1u);
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d005      	beq.n	8002b00 <motion_begin_segment_locked+0x164>
 8002af4:	7ffb      	ldrb	r3, [r7, #31]
 8002af6:	2101      	movs	r1, #1
 8002af8:	4618      	mov	r0, r3
 8002afa:	f7ff fb9f 	bl	800223c <motion_hw_enable>
 8002afe:	e004      	b.n	8002b0a <motion_begin_segment_locked+0x16e>
        else            motion_hw_enable(axis, 0u);
 8002b00:	7ffb      	ldrb	r3, [r7, #31]
 8002b02:	2100      	movs	r1, #0
 8002b04:	4618      	mov	r0, r3
 8002b06:	f7ff fb99 	bl	800223c <motion_hw_enable>

        g_encoder_origin[axis] = g_encoder_position[axis];
 8002b0a:	7ffb      	ldrb	r3, [r7, #31]
 8002b0c:	7ff9      	ldrb	r1, [r7, #31]
 8002b0e:	4a23      	ldr	r2, [pc, #140]	@ (8002b9c <motion_begin_segment_locked+0x200>)
 8002b10:	00db      	lsls	r3, r3, #3
 8002b12:	4413      	add	r3, r2
 8002b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b18:	4821      	ldr	r0, [pc, #132]	@ (8002ba0 <motion_begin_segment_locked+0x204>)
 8002b1a:	00c9      	lsls	r1, r1, #3
 8002b1c:	4401      	add	r1, r0
 8002b1e:	e9c1 2300 	strd	r2, r3, [r1]
    for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8002b22:	7ffb      	ldrb	r3, [r7, #31]
 8002b24:	3301      	adds	r3, #1
 8002b26:	77fb      	strb	r3, [r7, #31]
 8002b28:	7ffb      	ldrb	r3, [r7, #31]
 8002b2a:	2b02      	cmp	r3, #2
 8002b2c:	f67f af45 	bls.w	80029ba <motion_begin_segment_locked+0x1e>
    }
#if MOTION_DEBUG_FLOW
    printf("[FLOW begin_segment id=%u dirMask=0x%02X V(x,y,z)=(%u,%u,%u) S(x,y,z)=(%lu,%lu,%lu) ]\r\n",
           (unsigned)seg->frameId,
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	781b      	ldrb	r3, [r3, #0]
    printf("[FLOW begin_segment id=%u dirMask=0x%02X V(x,y,z)=(%u,%u,%u) S(x,y,z)=(%lu,%lu,%lu) ]\r\n",
 8002b34:	4698      	mov	r8, r3
           (unsigned)seg->dirMask,
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	785b      	ldrb	r3, [r3, #1]
    printf("[FLOW begin_segment id=%u dirMask=0x%02X V(x,y,z)=(%u,%u,%u) S(x,y,z)=(%lu,%lu,%lu) ]\r\n",
 8002b3a:	4699      	mov	r9, r3
           (unsigned)seg->vx, (unsigned)seg->vy, (unsigned)seg->vz,
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	885b      	ldrh	r3, [r3, #2]
    printf("[FLOW begin_segment id=%u dirMask=0x%02X V(x,y,z)=(%u,%u,%u) S(x,y,z)=(%lu,%lu,%lu) ]\r\n",
 8002b40:	469a      	mov	sl, r3
           (unsigned)seg->vx, (unsigned)seg->vy, (unsigned)seg->vz,
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	891b      	ldrh	r3, [r3, #8]
    printf("[FLOW begin_segment id=%u dirMask=0x%02X V(x,y,z)=(%u,%u,%u) S(x,y,z)=(%lu,%lu,%lu) ]\r\n",
 8002b46:	461e      	mov	r6, r3
           (unsigned)seg->vx, (unsigned)seg->vy, (unsigned)seg->vz,
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	8a1b      	ldrh	r3, [r3, #16]
    printf("[FLOW begin_segment id=%u dirMask=0x%02X V(x,y,z)=(%u,%u,%u) S(x,y,z)=(%lu,%lu,%lu) ]\r\n",
 8002b4c:	603b      	str	r3, [r7, #0]
           (unsigned long)motion_total_for_axis(seg, AXIS_X),
 8002b4e:	2100      	movs	r1, #0
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	f7ff fc60 	bl	8002416 <motion_total_for_axis>
 8002b56:	4604      	mov	r4, r0
           (unsigned long)motion_total_for_axis(seg, AXIS_Y),
 8002b58:	2101      	movs	r1, #1
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f7ff fc5b 	bl	8002416 <motion_total_for_axis>
 8002b60:	4605      	mov	r5, r0
           (unsigned long)motion_total_for_axis(seg, AXIS_Z));
 8002b62:	2102      	movs	r1, #2
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	f7ff fc56 	bl	8002416 <motion_total_for_axis>
 8002b6a:	4603      	mov	r3, r0
    printf("[FLOW begin_segment id=%u dirMask=0x%02X V(x,y,z)=(%u,%u,%u) S(x,y,z)=(%lu,%lu,%lu) ]\r\n",
 8002b6c:	9304      	str	r3, [sp, #16]
 8002b6e:	9503      	str	r5, [sp, #12]
 8002b70:	9402      	str	r4, [sp, #8]
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	9301      	str	r3, [sp, #4]
 8002b76:	9600      	str	r6, [sp, #0]
 8002b78:	4653      	mov	r3, sl
 8002b7a:	464a      	mov	r2, r9
 8002b7c:	4641      	mov	r1, r8
 8002b7e:	4809      	ldr	r0, [pc, #36]	@ (8002ba4 <motion_begin_segment_locked+0x208>)
 8002b80:	f00b faa6 	bl	800e0d0 <iprintf>
 8002b84:	e000      	b.n	8002b88 <motion_begin_segment_locked+0x1ec>
    if (!seg) return;
 8002b86:	bf00      	nop
#endif
}
 8002b88:	3720      	adds	r7, #32
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b90:	20000174 	.word	0x20000174
 8002b94:	200000cc 	.word	0x200000cc
 8002b98:	00030d40 	.word	0x00030d40
 8002b9c:	20000c80 	.word	0x20000c80
 8002ba0:	20000ca8 	.word	0x20000ca8
 8002ba4:	0800f46c 	.word	0x0800f46c

08002ba8 <motion_try_start_next_locked>:

static uint8_t motion_try_start_next_locked(void) {
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b08c      	sub	sp, #48	@ 0x30
 8002bac:	af00      	add	r7, sp, #0
    move_queue_add_req_t next;
    if (!motion_queue_pop_locked(&next))
 8002bae:	1d3b      	adds	r3, r7, #4
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f7ff feb7 	bl	8002924 <motion_queue_pop_locked>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d101      	bne.n	8002bc0 <motion_try_start_next_locked+0x18>
        return 0u;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	e010      	b.n	8002be2 <motion_try_start_next_locked+0x3a>
    motion_begin_segment_locked(&next);
 8002bc0:	1d3b      	adds	r3, r7, #4
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f7ff feea 	bl	800299c <motion_begin_segment_locked>
    g_active_frame_id = next.frameId;
 8002bc8:	793a      	ldrb	r2, [r7, #4]
 8002bca:	4b08      	ldr	r3, [pc, #32]	@ (8002bec <motion_try_start_next_locked+0x44>)
 8002bcc:	701a      	strb	r2, [r3, #0]
#if MOTION_DEBUG_FLOW
    printf("[FLOW pop_next id=%u remaining=%u]\\r\\n", (unsigned)g_active_frame_id, (unsigned)g_queue_count);
 8002bce:	4b07      	ldr	r3, [pc, #28]	@ (8002bec <motion_try_start_next_locked+0x44>)
 8002bd0:	781b      	ldrb	r3, [r3, #0]
 8002bd2:	4619      	mov	r1, r3
 8002bd4:	4b06      	ldr	r3, [pc, #24]	@ (8002bf0 <motion_try_start_next_locked+0x48>)
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	461a      	mov	r2, r3
 8002bda:	4806      	ldr	r0, [pc, #24]	@ (8002bf4 <motion_try_start_next_locked+0x4c>)
 8002bdc:	f00b fa78 	bl	800e0d0 <iprintf>
#endif
    return 1u;
 8002be0:	2301      	movs	r3, #1
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3730      	adds	r7, #48	@ 0x30
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	20000c7b 	.word	0x20000c7b
 8002bf0:	20000c7a 	.word	0x20000c7a
 8002bf4:	0800f4c4 	.word	0x0800f4c4

08002bf8 <motion_update_encoders>:

/* =======================
 *  Encoders
 * ======================= */
static void motion_update_encoders(void) {
 8002bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002bfc:	b08b      	sub	sp, #44	@ 0x2c
 8002bfe:	af02      	add	r7, sp, #8
    for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8002c00:	2300      	movs	r3, #0
 8002c02:	77fb      	strb	r3, [r7, #31]
 8002c04:	e085      	b.n	8002d12 <motion_update_encoders+0x11a>
        uint32_t now = motion_hw_encoder_read_raw(axis);
 8002c06:	7ffb      	ldrb	r3, [r7, #31]
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f7ff fb9f 	bl	800234c <motion_hw_encoder_read_raw>
 8002c0e:	61b8      	str	r0, [r7, #24]
        uint8_t bits = motion_hw_encoder_bits(axis);
 8002c10:	7ffb      	ldrb	r3, [r7, #31]
 8002c12:	4618      	mov	r0, r3
 8002c14:	f7ff fbc2 	bl	800239c <motion_hw_encoder_bits>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	75fb      	strb	r3, [r7, #23]
        if (bits == 16u) {
 8002c1c:	7dfb      	ldrb	r3, [r7, #23]
 8002c1e:	2b10      	cmp	r3, #16
 8002c20:	d13d      	bne.n	8002c9e <motion_update_encoders+0xa6>
            uint16_t prev = (uint16_t)g_encoder_last_raw[axis];
 8002c22:	7ffb      	ldrb	r3, [r7, #31]
 8002c24:	4a40      	ldr	r2, [pc, #256]	@ (8002d28 <motion_update_encoders+0x130>)
 8002c26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c2a:	81fb      	strh	r3, [r7, #14]
            int16_t delta = (int16_t)((uint16_t)now - prev);
 8002c2c:	69bb      	ldr	r3, [r7, #24]
 8002c2e:	b29a      	uxth	r2, r3
 8002c30:	89fb      	ldrh	r3, [r7, #14]
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	b29b      	uxth	r3, r3
 8002c36:	81bb      	strh	r3, [r7, #12]
            g_encoder_last_raw[axis] = (uint16_t)now;
 8002c38:	69bb      	ldr	r3, [r7, #24]
 8002c3a:	b29a      	uxth	r2, r3
 8002c3c:	7ffb      	ldrb	r3, [r7, #31]
 8002c3e:	4611      	mov	r1, r2
 8002c40:	4a39      	ldr	r2, [pc, #228]	@ (8002d28 <motion_update_encoders+0x130>)
 8002c42:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            g_encoder_position[axis] += delta;
 8002c46:	7ffb      	ldrb	r3, [r7, #31]
 8002c48:	4a38      	ldr	r2, [pc, #224]	@ (8002d2c <motion_update_encoders+0x134>)
 8002c4a:	00db      	lsls	r3, r3, #3
 8002c4c:	4413      	add	r3, r2
 8002c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c52:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8002c56:	17c8      	asrs	r0, r1, #31
 8002c58:	460c      	mov	r4, r1
 8002c5a:	4605      	mov	r5, r0
 8002c5c:	7ff9      	ldrb	r1, [r7, #31]
 8002c5e:	eb12 0a04 	adds.w	sl, r2, r4
 8002c62:	eb43 0b05 	adc.w	fp, r3, r5
 8002c66:	4a31      	ldr	r2, [pc, #196]	@ (8002d2c <motion_update_encoders+0x134>)
 8002c68:	00cb      	lsls	r3, r1, #3
 8002c6a:	4413      	add	r3, r2
 8002c6c:	e9c3 ab00 	strd	sl, fp, [r3]
#if MOTION_DEBUG_ENCODERS
            if (delta != 0) {
 8002c70:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d049      	beq.n	8002d0c <motion_update_encoders+0x114>
                printf("[ENC axis=%u raw=%u delta=%d abs=%ld rel=%ld]\r\n",
 8002c78:	7ff9      	ldrb	r1, [r7, #31]
 8002c7a:	f9b7 000c 	ldrsh.w	r0, [r7, #12]
 8002c7e:	7ffb      	ldrb	r3, [r7, #31]
                       (unsigned)axis,
                       (unsigned)now,
                       (int)delta,
                       (long)g_enc_abs32[axis],
 8002c80:	4a2b      	ldr	r2, [pc, #172]	@ (8002d30 <motion_update_encoders+0x138>)
 8002c82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
                printf("[ENC axis=%u raw=%u delta=%d abs=%ld rel=%ld]\r\n",
 8002c86:	7ffa      	ldrb	r2, [r7, #31]
                       (long)g_enc_rel32[axis]);
 8002c88:	4e2a      	ldr	r6, [pc, #168]	@ (8002d34 <motion_update_encoders+0x13c>)
 8002c8a:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
                printf("[ENC axis=%u raw=%u delta=%d abs=%ld rel=%ld]\r\n",
 8002c8e:	9201      	str	r2, [sp, #4]
 8002c90:	9300      	str	r3, [sp, #0]
 8002c92:	4603      	mov	r3, r0
 8002c94:	69ba      	ldr	r2, [r7, #24]
 8002c96:	4828      	ldr	r0, [pc, #160]	@ (8002d38 <motion_update_encoders+0x140>)
 8002c98:	f00b fa1a 	bl	800e0d0 <iprintf>
 8002c9c:	e036      	b.n	8002d0c <motion_update_encoders+0x114>
            }
#endif
        } else {
            int32_t delta = (int32_t)(now - g_encoder_last_raw[axis]);
 8002c9e:	7ffb      	ldrb	r3, [r7, #31]
 8002ca0:	4a21      	ldr	r2, [pc, #132]	@ (8002d28 <motion_update_encoders+0x130>)
 8002ca2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ca6:	69ba      	ldr	r2, [r7, #24]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	613b      	str	r3, [r7, #16]
            g_encoder_last_raw[axis] = now;
 8002cac:	7ffb      	ldrb	r3, [r7, #31]
 8002cae:	491e      	ldr	r1, [pc, #120]	@ (8002d28 <motion_update_encoders+0x130>)
 8002cb0:	69ba      	ldr	r2, [r7, #24]
 8002cb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            g_encoder_position[axis] += delta;
 8002cb6:	7ffb      	ldrb	r3, [r7, #31]
 8002cb8:	4a1c      	ldr	r2, [pc, #112]	@ (8002d2c <motion_update_encoders+0x134>)
 8002cba:	00db      	lsls	r3, r3, #3
 8002cbc:	4413      	add	r3, r2
 8002cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cc2:	6939      	ldr	r1, [r7, #16]
 8002cc4:	17c8      	asrs	r0, r1, #31
 8002cc6:	4688      	mov	r8, r1
 8002cc8:	4681      	mov	r9, r0
 8002cca:	7ff9      	ldrb	r1, [r7, #31]
 8002ccc:	eb12 0008 	adds.w	r0, r2, r8
 8002cd0:	6038      	str	r0, [r7, #0]
 8002cd2:	eb43 0309 	adc.w	r3, r3, r9
 8002cd6:	607b      	str	r3, [r7, #4]
 8002cd8:	4a14      	ldr	r2, [pc, #80]	@ (8002d2c <motion_update_encoders+0x134>)
 8002cda:	00cb      	lsls	r3, r1, #3
 8002cdc:	4413      	add	r3, r2
 8002cde:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002ce2:	e9c3 1200 	strd	r1, r2, [r3]
#if MOTION_DEBUG_ENCODERS
            if (delta != 0) {
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d00f      	beq.n	8002d0c <motion_update_encoders+0x114>
                printf("[ENC axis=%u raw=%lu delta=%ld abs=%ld rel=%ld]\r\n",
 8002cec:	7ff9      	ldrb	r1, [r7, #31]
 8002cee:	7ffb      	ldrb	r3, [r7, #31]
                       (unsigned)axis,
                       (unsigned long)now,
                       (long)delta,
                       (long)g_enc_abs32[axis],
 8002cf0:	4a0f      	ldr	r2, [pc, #60]	@ (8002d30 <motion_update_encoders+0x138>)
 8002cf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
                printf("[ENC axis=%u raw=%lu delta=%ld abs=%ld rel=%ld]\r\n",
 8002cf6:	7ffa      	ldrb	r2, [r7, #31]
                       (long)g_enc_rel32[axis]);
 8002cf8:	480e      	ldr	r0, [pc, #56]	@ (8002d34 <motion_update_encoders+0x13c>)
 8002cfa:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
                printf("[ENC axis=%u raw=%lu delta=%ld abs=%ld rel=%ld]\r\n",
 8002cfe:	9201      	str	r2, [sp, #4]
 8002d00:	9300      	str	r3, [sp, #0]
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	69ba      	ldr	r2, [r7, #24]
 8002d06:	480d      	ldr	r0, [pc, #52]	@ (8002d3c <motion_update_encoders+0x144>)
 8002d08:	f00b f9e2 	bl	800e0d0 <iprintf>
    for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8002d0c:	7ffb      	ldrb	r3, [r7, #31]
 8002d0e:	3301      	adds	r3, #1
 8002d10:	77fb      	strb	r3, [r7, #31]
 8002d12:	7ffb      	ldrb	r3, [r7, #31]
 8002d14:	2b02      	cmp	r3, #2
 8002d16:	f67f af76 	bls.w	8002c06 <motion_update_encoders+0xe>
            }
#endif
        }
    }
}
 8002d1a:	bf00      	nop
 8002d1c:	bf00      	nop
 8002d1e:	3724      	adds	r7, #36	@ 0x24
 8002d20:	46bd      	mov	sp, r7
 8002d22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d26:	bf00      	nop
 8002d28:	20000c98 	.word	0x20000c98
 8002d2c:	20000c80 	.word	0x20000c80
 8002d30:	20000cc0 	.word	0x20000cc0
 8002d34:	20000ccc 	.word	0x20000ccc
 8002d38:	0800f4ec 	.word	0x0800f4ec
 8002d3c:	0800f51c 	.word	0x0800f51c

08002d40 <motion_send_queue_add_ack>:

/* =======================
 *  Envio de respostas
 * ======================= */
static void motion_send_queue_add_ack(uint8_t frame_id, uint8_t status) {
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b088      	sub	sp, #32
 8002d44:	af02      	add	r7, sp, #8
 8002d46:	4603      	mov	r3, r0
 8002d48:	460a      	mov	r2, r1
 8002d4a:	71fb      	strb	r3, [r7, #7]
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	71bb      	strb	r3, [r7, #6]
    uint8_t raw[6];
    move_queue_add_ack_resp_t resp = { frame_id, status };
 8002d50:	79fb      	ldrb	r3, [r7, #7]
 8002d52:	733b      	strb	r3, [r7, #12]
 8002d54:	79bb      	ldrb	r3, [r7, #6]
 8002d56:	737b      	strb	r3, [r7, #13]
    if (move_queue_add_ack_resp_encoder(&resp, raw, sizeof raw) != PROTO_OK) {
 8002d58:	f107 0110 	add.w	r1, r7, #16
 8002d5c:	f107 030c 	add.w	r3, r7, #12
 8002d60:	2206      	movs	r2, #6
 8002d62:	4618      	mov	r0, r3
 8002d64:	f7fe f8c0 	bl	8000ee8 <move_queue_add_ack_resp_encoder>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d00c      	beq.n	8002d88 <motion_send_queue_add_ack+0x48>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_FRAME, "ack", "encode_fail");
 8002d6e:	4a12      	ldr	r2, [pc, #72]	@ (8002db8 <motion_send_queue_add_ack+0x78>)
 8002d70:	4b12      	ldr	r3, [pc, #72]	@ (8002dbc <motion_send_queue_add_ack+0x7c>)
 8002d72:	9301      	str	r3, [sp, #4]
 8002d74:	4b12      	ldr	r3, [pc, #72]	@ (8002dc0 <motion_send_queue_add_ack+0x80>)
 8002d76:	9300      	str	r3, [sp, #0]
 8002d78:	4613      	mov	r3, r2
 8002d7a:	f06f 0201 	mvn.w	r2, #1
 8002d7e:	2164      	movs	r1, #100	@ 0x64
 8002d80:	2002      	movs	r0, #2
 8002d82:	f7ff f925 	bl	8001fd0 <log_event_auto>
 8002d86:	e014      	b.n	8002db2 <motion_send_queue_add_ack+0x72>
        return;
    }
    if (app_resp_push(raw, (uint32_t)sizeof raw) != PROTO_OK) {
 8002d88:	f107 0310 	add.w	r3, r7, #16
 8002d8c:	2106      	movs	r1, #6
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f001 fb14 	bl	80043bc <app_resp_push>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d00b      	beq.n	8002db2 <motion_send_queue_add_ack+0x72>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_RANGE, "ack", "queue_full");
 8002d9a:	4a07      	ldr	r2, [pc, #28]	@ (8002db8 <motion_send_queue_add_ack+0x78>)
 8002d9c:	4b09      	ldr	r3, [pc, #36]	@ (8002dc4 <motion_send_queue_add_ack+0x84>)
 8002d9e:	9301      	str	r3, [sp, #4]
 8002da0:	4b07      	ldr	r3, [pc, #28]	@ (8002dc0 <motion_send_queue_add_ack+0x80>)
 8002da2:	9300      	str	r3, [sp, #0]
 8002da4:	4613      	mov	r3, r2
 8002da6:	f06f 0203 	mvn.w	r2, #3
 8002daa:	2164      	movs	r1, #100	@ 0x64
 8002dac:	2002      	movs	r0, #2
 8002dae:	f7ff f90f 	bl	8001fd0 <log_event_auto>
    }
}
 8002db2:	3718      	adds	r7, #24
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}
 8002db8:	0800f464 	.word	0x0800f464
 8002dbc:	0800f550 	.word	0x0800f550
 8002dc0:	0800f55c 	.word	0x0800f55c
 8002dc4:	0800f560 	.word	0x0800f560

08002dc8 <motion_send_queue_status_response>:

static void motion_send_queue_status_response(uint8_t frame_id) {
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b08a      	sub	sp, #40	@ 0x28
 8002dcc:	af02      	add	r7, sp, #8
 8002dce:	4603      	mov	r3, r0
 8002dd0:	71fb      	strb	r3, [r7, #7]
    uint8_t raw[12];
    move_queue_status_resp_t resp = {
 8002dd2:	79fb      	ldrb	r3, [r7, #7]
 8002dd4:	733b      	strb	r3, [r7, #12]
        .frameId = frame_id,
        .status  = (uint8_t)g_status.state,
 8002dd6:	4b27      	ldr	r3, [pc, #156]	@ (8002e74 <motion_send_queue_status_response+0xac>)
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	b2db      	uxtb	r3, r3
    move_queue_status_resp_t resp = {
 8002ddc:	737b      	strb	r3, [r7, #13]
        .pidErrX = (uint8_t)g_status.pidErrX,
 8002dde:	4b25      	ldr	r3, [pc, #148]	@ (8002e74 <motion_send_queue_status_response+0xac>)
 8002de0:	795b      	ldrb	r3, [r3, #5]
 8002de2:	b25b      	sxtb	r3, r3
 8002de4:	b2db      	uxtb	r3, r3
    move_queue_status_resp_t resp = {
 8002de6:	73bb      	strb	r3, [r7, #14]
        .pidErrY = (uint8_t)g_status.pidErrY,
 8002de8:	4b22      	ldr	r3, [pc, #136]	@ (8002e74 <motion_send_queue_status_response+0xac>)
 8002dea:	799b      	ldrb	r3, [r3, #6]
 8002dec:	b25b      	sxtb	r3, r3
 8002dee:	b2db      	uxtb	r3, r3
    move_queue_status_resp_t resp = {
 8002df0:	73fb      	strb	r3, [r7, #15]
        .pidErrZ = (uint8_t)g_status.pidErrZ,
 8002df2:	4b20      	ldr	r3, [pc, #128]	@ (8002e74 <motion_send_queue_status_response+0xac>)
 8002df4:	79db      	ldrb	r3, [r3, #7]
 8002df6:	b25b      	sxtb	r3, r3
 8002df8:	b2db      	uxtb	r3, r3
    move_queue_status_resp_t resp = {
 8002dfa:	743b      	strb	r3, [r7, #16]
        .pctX    = g_status.pctX,
 8002dfc:	4b1d      	ldr	r3, [pc, #116]	@ (8002e74 <motion_send_queue_status_response+0xac>)
 8002dfe:	789b      	ldrb	r3, [r3, #2]
 8002e00:	b2db      	uxtb	r3, r3
    move_queue_status_resp_t resp = {
 8002e02:	747b      	strb	r3, [r7, #17]
        .pctY    = g_status.pctY,
 8002e04:	4b1b      	ldr	r3, [pc, #108]	@ (8002e74 <motion_send_queue_status_response+0xac>)
 8002e06:	78db      	ldrb	r3, [r3, #3]
 8002e08:	b2db      	uxtb	r3, r3
    move_queue_status_resp_t resp = {
 8002e0a:	74bb      	strb	r3, [r7, #18]
        .pctZ    = g_status.pctZ,
 8002e0c:	4b19      	ldr	r3, [pc, #100]	@ (8002e74 <motion_send_queue_status_response+0xac>)
 8002e0e:	791b      	ldrb	r3, [r3, #4]
 8002e10:	b2db      	uxtb	r3, r3
    move_queue_status_resp_t resp = {
 8002e12:	74fb      	strb	r3, [r7, #19]
    };
    if (move_queue_status_resp_encoder(&resp, raw, sizeof raw) != PROTO_OK) {
 8002e14:	f107 0114 	add.w	r1, r7, #20
 8002e18:	f107 030c 	add.w	r3, r7, #12
 8002e1c:	220c      	movs	r2, #12
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f7fe f91a 	bl	8001058 <move_queue_status_resp_encoder>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d00c      	beq.n	8002e44 <motion_send_queue_status_response+0x7c>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_FRAME, "status", "encode_fail");
 8002e2a:	4a13      	ldr	r2, [pc, #76]	@ (8002e78 <motion_send_queue_status_response+0xb0>)
 8002e2c:	4b13      	ldr	r3, [pc, #76]	@ (8002e7c <motion_send_queue_status_response+0xb4>)
 8002e2e:	9301      	str	r3, [sp, #4]
 8002e30:	4b13      	ldr	r3, [pc, #76]	@ (8002e80 <motion_send_queue_status_response+0xb8>)
 8002e32:	9300      	str	r3, [sp, #0]
 8002e34:	4613      	mov	r3, r2
 8002e36:	f06f 0201 	mvn.w	r2, #1
 8002e3a:	2164      	movs	r1, #100	@ 0x64
 8002e3c:	2002      	movs	r0, #2
 8002e3e:	f7ff f8c7 	bl	8001fd0 <log_event_auto>
 8002e42:	e014      	b.n	8002e6e <motion_send_queue_status_response+0xa6>
        return;
    }
    if (app_resp_push(raw, (uint32_t)sizeof raw) != PROTO_OK) {
 8002e44:	f107 0314 	add.w	r3, r7, #20
 8002e48:	210c      	movs	r1, #12
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f001 fab6 	bl	80043bc <app_resp_push>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d00b      	beq.n	8002e6e <motion_send_queue_status_response+0xa6>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_RANGE, "status", "queue_full");
 8002e56:	4a08      	ldr	r2, [pc, #32]	@ (8002e78 <motion_send_queue_status_response+0xb0>)
 8002e58:	4b0a      	ldr	r3, [pc, #40]	@ (8002e84 <motion_send_queue_status_response+0xbc>)
 8002e5a:	9301      	str	r3, [sp, #4]
 8002e5c:	4b08      	ldr	r3, [pc, #32]	@ (8002e80 <motion_send_queue_status_response+0xb8>)
 8002e5e:	9300      	str	r3, [sp, #0]
 8002e60:	4613      	mov	r3, r2
 8002e62:	f06f 0203 	mvn.w	r2, #3
 8002e66:	2164      	movs	r1, #100	@ 0x64
 8002e68:	2002      	movs	r0, #2
 8002e6a:	f7ff f8b1 	bl	8001fd0 <log_event_auto>
    }
}
 8002e6e:	3720      	adds	r7, #32
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}
 8002e74:	200000c4 	.word	0x200000c4
 8002e78:	0800f464 	.word	0x0800f464
 8002e7c:	0800f550 	.word	0x0800f550
 8002e80:	0800f56c 	.word	0x0800f56c
 8002e84:	0800f560 	.word	0x0800f560

08002e88 <motion_send_start_response>:

static void motion_send_start_response(uint8_t frame_id) {
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b086      	sub	sp, #24
 8002e8c:	af02      	add	r7, sp, #8
 8002e8e:	4603      	mov	r3, r0
 8002e90:	71fb      	strb	r3, [r7, #7]
    uint8_t raw[4];
    start_move_resp_t resp = { frame_id };
 8002e92:	79fb      	ldrb	r3, [r7, #7]
 8002e94:	723b      	strb	r3, [r7, #8]
    if (start_move_resp_encoder(&resp, raw, sizeof raw) != PROTO_OK) return;
 8002e96:	f107 010c 	add.w	r1, r7, #12
 8002e9a:	f107 0308 	add.w	r3, r7, #8
 8002e9e:	2204      	movs	r2, #4
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f7fe f948 	bl	8001136 <start_move_resp_encoder>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d115      	bne.n	8002ed8 <motion_send_start_response+0x50>
    if (app_resp_push(raw, (uint32_t)sizeof raw) != PROTO_OK) {
 8002eac:	f107 030c 	add.w	r3, r7, #12
 8002eb0:	2104      	movs	r1, #4
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f001 fa82 	bl	80043bc <app_resp_push>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d00d      	beq.n	8002eda <motion_send_start_response+0x52>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_RANGE, "start", "resp_queue_full");
 8002ebe:	4a08      	ldr	r2, [pc, #32]	@ (8002ee0 <motion_send_start_response+0x58>)
 8002ec0:	4b08      	ldr	r3, [pc, #32]	@ (8002ee4 <motion_send_start_response+0x5c>)
 8002ec2:	9301      	str	r3, [sp, #4]
 8002ec4:	4b08      	ldr	r3, [pc, #32]	@ (8002ee8 <motion_send_start_response+0x60>)
 8002ec6:	9300      	str	r3, [sp, #0]
 8002ec8:	4613      	mov	r3, r2
 8002eca:	f06f 0203 	mvn.w	r2, #3
 8002ece:	2164      	movs	r1, #100	@ 0x64
 8002ed0:	2002      	movs	r0, #2
 8002ed2:	f7ff f87d 	bl	8001fd0 <log_event_auto>
 8002ed6:	e000      	b.n	8002eda <motion_send_start_response+0x52>
    if (start_move_resp_encoder(&resp, raw, sizeof raw) != PROTO_OK) return;
 8002ed8:	bf00      	nop
    }
}
 8002eda:	3710      	adds	r7, #16
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	0800f464 	.word	0x0800f464
 8002ee4:	0800f574 	.word	0x0800f574
 8002ee8:	0800f584 	.word	0x0800f584

08002eec <motion_send_move_end_response>:

static void motion_send_move_end_response(uint8_t frame_id) {
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b086      	sub	sp, #24
 8002ef0:	af02      	add	r7, sp, #8
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	71fb      	strb	r3, [r7, #7]
    uint8_t raw[4];
    move_end_resp_t resp = { frame_id };
 8002ef6:	79fb      	ldrb	r3, [r7, #7]
 8002ef8:	723b      	strb	r3, [r7, #8]
    if (move_end_resp_encoder(&resp, raw, sizeof raw) != PROTO_OK) return;
 8002efa:	f107 010c 	add.w	r1, r7, #12
 8002efe:	f107 0308 	add.w	r3, r7, #8
 8002f02:	2204      	movs	r2, #4
 8002f04:	4618      	mov	r0, r3
 8002f06:	f7fd ff41 	bl	8000d8c <move_end_resp_encoder>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d115      	bne.n	8002f3c <motion_send_move_end_response+0x50>
    if (app_resp_push(raw, (uint32_t)sizeof raw) != PROTO_OK) {
 8002f10:	f107 030c 	add.w	r3, r7, #12
 8002f14:	2104      	movs	r1, #4
 8002f16:	4618      	mov	r0, r3
 8002f18:	f001 fa50 	bl	80043bc <app_resp_push>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d00d      	beq.n	8002f3e <motion_send_move_end_response+0x52>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_RANGE, "move_end", "resp_queue_full");
 8002f22:	4a08      	ldr	r2, [pc, #32]	@ (8002f44 <motion_send_move_end_response+0x58>)
 8002f24:	4b08      	ldr	r3, [pc, #32]	@ (8002f48 <motion_send_move_end_response+0x5c>)
 8002f26:	9301      	str	r3, [sp, #4]
 8002f28:	4b08      	ldr	r3, [pc, #32]	@ (8002f4c <motion_send_move_end_response+0x60>)
 8002f2a:	9300      	str	r3, [sp, #0]
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	f06f 0203 	mvn.w	r2, #3
 8002f32:	2164      	movs	r1, #100	@ 0x64
 8002f34:	2002      	movs	r0, #2
 8002f36:	f7ff f84b 	bl	8001fd0 <log_event_auto>
 8002f3a:	e000      	b.n	8002f3e <motion_send_move_end_response+0x52>
    if (move_end_resp_encoder(&resp, raw, sizeof raw) != PROTO_OK) return;
 8002f3c:	bf00      	nop
    }
}
 8002f3e:	3710      	adds	r7, #16
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	0800f464 	.word	0x0800f464
 8002f48:	0800f574 	.word	0x0800f574
 8002f4c:	0800f58c 	.word	0x0800f58c

08002f50 <motion_service_init>:


/* =======================
 *  Init
 * ======================= */
void motion_service_init(void) {
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b088      	sub	sp, #32
 8002f54:	af04      	add	r7, sp, #16
    uint32_t primask = motion_lock();
 8002f56:	f7ff fa3d 	bl	80023d4 <motion_lock>
 8002f5a:	60b8      	str	r0, [r7, #8]

    memset(&g_status, 0, sizeof g_status);
 8002f5c:	2208      	movs	r2, #8
 8002f5e:	2100      	movs	r1, #0
 8002f60:	483c      	ldr	r0, [pc, #240]	@ (8003054 <motion_service_init+0x104>)
 8002f62:	f00b faed 	bl	800e540 <memset>
    memset(g_axis_state, 0, sizeof g_axis_state);
 8002f66:	22a8      	movs	r2, #168	@ 0xa8
 8002f68:	2100      	movs	r1, #0
 8002f6a:	483b      	ldr	r0, [pc, #236]	@ (8003058 <motion_service_init+0x108>)
 8002f6c:	f00b fae8 	bl	800e540 <memset>
    memset(g_queue, 0, sizeof g_queue);
 8002f70:	f44f 6230 	mov.w	r2, #2816	@ 0xb00
 8002f74:	2100      	movs	r1, #0
 8002f76:	4839      	ldr	r0, [pc, #228]	@ (800305c <motion_service_init+0x10c>)
 8002f78:	f00b fae2 	bl	800e540 <memset>
    memset(g_encoder_position, 0, sizeof g_encoder_position);
 8002f7c:	2218      	movs	r2, #24
 8002f7e:	2100      	movs	r1, #0
 8002f80:	4837      	ldr	r0, [pc, #220]	@ (8003060 <motion_service_init+0x110>)
 8002f82:	f00b fadd 	bl	800e540 <memset>
    memset(g_encoder_last_raw, 0, sizeof g_encoder_last_raw);
 8002f86:	220c      	movs	r2, #12
 8002f88:	2100      	movs	r1, #0
 8002f8a:	4836      	ldr	r0, [pc, #216]	@ (8003064 <motion_service_init+0x114>)
 8002f8c:	f00b fad8 	bl	800e540 <memset>
    memset(g_encoder_origin, 0, sizeof g_encoder_origin);
 8002f90:	2218      	movs	r2, #24
 8002f92:	2100      	movs	r1, #0
 8002f94:	4834      	ldr	r0, [pc, #208]	@ (8003068 <motion_service_init+0x118>)
 8002f96:	f00b fad3 	bl	800e540 <memset>

    g_status.state = MOTION_IDLE;
 8002f9a:	4b2e      	ldr	r3, [pc, #184]	@ (8003054 <motion_service_init+0x104>)
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	701a      	strb	r2, [r3, #0]
    g_queue_head = g_queue_tail = g_queue_count = 0u;
 8002fa0:	4b32      	ldr	r3, [pc, #200]	@ (800306c <motion_service_init+0x11c>)
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	701a      	strb	r2, [r3, #0]
 8002fa6:	4b31      	ldr	r3, [pc, #196]	@ (800306c <motion_service_init+0x11c>)
 8002fa8:	781a      	ldrb	r2, [r3, #0]
 8002faa:	4b31      	ldr	r3, [pc, #196]	@ (8003070 <motion_service_init+0x120>)
 8002fac:	701a      	strb	r2, [r3, #0]
 8002fae:	4b30      	ldr	r3, [pc, #192]	@ (8003070 <motion_service_init+0x120>)
 8002fb0:	781a      	ldrb	r2, [r3, #0]
 8002fb2:	4b30      	ldr	r3, [pc, #192]	@ (8003074 <motion_service_init+0x124>)
 8002fb4:	701a      	strb	r2, [r3, #0]
    g_has_active_segment = 0u;
 8002fb6:	4b30      	ldr	r3, [pc, #192]	@ (8003078 <motion_service_init+0x128>)
 8002fb8:	2200      	movs	r2, #0
 8002fba:	701a      	strb	r2, [r3, #0]

    motion_stop_all_axes_locked();
 8002fbc:	f7ff fc0c 	bl	80027d8 <motion_stop_all_axes_locked>
    motion_refresh_status_locked();
 8002fc0:	f7ff fac4 	bl	800254c <motion_refresh_status_locked>
    motion_unlock(primask);
 8002fc4:	68b8      	ldr	r0, [r7, #8]
 8002fc6:	f7ff fa16 	bl	80023f6 <motion_unlock>

    motion_hw_init();
 8002fca:	f7ff f86f 	bl	80020ac <motion_hw_init>

    for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8002fce:	2300      	movs	r3, #0
 8002fd0:	73fb      	strb	r3, [r7, #15]
 8002fd2:	e01a      	b.n	800300a <motion_service_init+0xba>
        uint32_t raw = motion_hw_encoder_read_raw(axis);
 8002fd4:	7bfb      	ldrb	r3, [r7, #15]
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f7ff f9b8 	bl	800234c <motion_hw_encoder_read_raw>
 8002fdc:	6078      	str	r0, [r7, #4]
        if (motion_hw_encoder_bits(axis) == 16u) {
 8002fde:	7bfb      	ldrb	r3, [r7, #15]
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f7ff f9db 	bl	800239c <motion_hw_encoder_bits>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b10      	cmp	r3, #16
 8002fea:	d106      	bne.n	8002ffa <motion_service_init+0xaa>
            g_encoder_last_raw[axis] = raw & 0xFFFFu;
 8002fec:	7bfb      	ldrb	r3, [r7, #15]
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	b292      	uxth	r2, r2
 8002ff2:	491c      	ldr	r1, [pc, #112]	@ (8003064 <motion_service_init+0x114>)
 8002ff4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8002ff8:	e004      	b.n	8003004 <motion_service_init+0xb4>
        } else {
            g_encoder_last_raw[axis] = raw;
 8002ffa:	7bfb      	ldrb	r3, [r7, #15]
 8002ffc:	4919      	ldr	r1, [pc, #100]	@ (8003064 <motion_service_init+0x114>)
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8003004:	7bfb      	ldrb	r3, [r7, #15]
 8003006:	3301      	adds	r3, #1
 8003008:	73fb      	strb	r3, [r7, #15]
 800300a:	7bfb      	ldrb	r3, [r7, #15]
 800300c:	2b02      	cmp	r3, #2
 800300e:	d9e1      	bls.n	8002fd4 <motion_service_init+0x84>
        }
    }

    if (HAL_TIM_Base_Start_IT(&htim6) != HAL_OK) Error_Handler();
 8003010:	481a      	ldr	r0, [pc, #104]	@ (800307c <motion_service_init+0x12c>)
 8003012:	f007 f89b 	bl	800a14c <HAL_TIM_Base_Start_IT>
 8003016:	4603      	mov	r3, r0
 8003018:	2b00      	cmp	r3, #0
 800301a:	d001      	beq.n	8003020 <motion_service_init+0xd0>
 800301c:	f001 fd9a 	bl	8004b54 <Error_Handler>
    if (HAL_TIM_Base_Start_IT(&htim7) != HAL_OK) Error_Handler();
 8003020:	4817      	ldr	r0, [pc, #92]	@ (8003080 <motion_service_init+0x130>)
 8003022:	f007 f893 	bl	800a14c <HAL_TIM_Base_Start_IT>
 8003026:	4603      	mov	r3, r0
 8003028:	2b00      	cmp	r3, #0
 800302a:	d001      	beq.n	8003030 <motion_service_init+0xe0>
 800302c:	f001 fd92 	bl	8004b54 <Error_Handler>

    LOGT_THIS(LOG_STATE_START, PROTO_OK, "init", "timers_ready");
 8003030:	4a14      	ldr	r2, [pc, #80]	@ (8003084 <motion_service_init+0x134>)
 8003032:	4b15      	ldr	r3, [pc, #84]	@ (8003088 <motion_service_init+0x138>)
 8003034:	9302      	str	r3, [sp, #8]
 8003036:	4b15      	ldr	r3, [pc, #84]	@ (800308c <motion_service_init+0x13c>)
 8003038:	9301      	str	r3, [sp, #4]
 800303a:	4b15      	ldr	r3, [pc, #84]	@ (8003090 <motion_service_init+0x140>)
 800303c:	9300      	str	r3, [sp, #0]
 800303e:	4613      	mov	r3, r2
 8003040:	2200      	movs	r2, #0
 8003042:	2100      	movs	r1, #0
 8003044:	2002      	movs	r0, #2
 8003046:	f7fe ffc3 	bl	8001fd0 <log_event_auto>
}
 800304a:	bf00      	nop
 800304c:	3710      	adds	r7, #16
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	200000c4 	.word	0x200000c4
 8003058:	200000cc 	.word	0x200000cc
 800305c:	20000178 	.word	0x20000178
 8003060:	20000c80 	.word	0x20000c80
 8003064:	20000c98 	.word	0x20000c98
 8003068:	20000ca8 	.word	0x20000ca8
 800306c:	20000c7a 	.word	0x20000c7a
 8003070:	20000c79 	.word	0x20000c79
 8003074:	20000c78 	.word	0x20000c78
 8003078:	20000174 	.word	0x20000174
 800307c:	20000f98 	.word	0x20000f98
 8003080:	20000fe4 	.word	0x20000fe4
 8003084:	0800f464 	.word	0x0800f464
 8003088:	0800f598 	.word	0x0800f598
 800308c:	0800f5a8 	.word	0x0800f5a8
 8003090:	0800f5ac 	.word	0x0800f5ac

08003094 <motion_on_tim6_tick>:
 *  - fecha largura de pulso
 *  - DEMO: DDA suave
 *  - Fila: caminho original
 * ======================= */
void motion_on_tim6_tick(void)
{
 8003094:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003096:	b091      	sub	sp, #68	@ 0x44
 8003098:	af06      	add	r7, sp, #24
    if (g_status.state != MOTION_RUNNING || !g_has_active_segment)
 800309a:	4b86      	ldr	r3, [pc, #536]	@ (80032b4 <motion_on_tim6_tick+0x220>)
 800309c:	781b      	ldrb	r3, [r3, #0]
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	2b02      	cmp	r3, #2
 80030a2:	f040 81df 	bne.w	8003464 <motion_on_tim6_tick+0x3d0>
 80030a6:	4b84      	ldr	r3, [pc, #528]	@ (80032b8 <motion_on_tim6_tick+0x224>)
 80030a8:	781b      	ldrb	r3, [r3, #0]
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	f000 81d9 	beq.w	8003464 <motion_on_tim6_tick+0x3d0>
        return;

    /* 1) Fecha pulsos altos pendentes (garante largura do STEP) */
    for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 80030b2:	2300      	movs	r3, #0
 80030b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80030b8:	e02e      	b.n	8003118 <motion_on_tim6_tick+0x84>
        motion_axis_state_t *ax = &g_axis_state[axis];
 80030ba:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80030be:	4613      	mov	r3, r2
 80030c0:	00db      	lsls	r3, r3, #3
 80030c2:	1a9b      	subs	r3, r3, r2
 80030c4:	00db      	lsls	r3, r3, #3
 80030c6:	4a7d      	ldr	r2, [pc, #500]	@ (80032bc <motion_on_tim6_tick+0x228>)
 80030c8:	4413      	add	r3, r2
 80030ca:	60fb      	str	r3, [r7, #12]
        if (ax->step_high) {
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	7d1b      	ldrb	r3, [r3, #20]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d012      	beq.n	80030fa <motion_on_tim6_tick+0x66>
            if (--ax->step_high == 0u) {
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	7d1b      	ldrb	r3, [r3, #20]
 80030d8:	3b01      	subs	r3, #1
 80030da:	b2da      	uxtb	r2, r3
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	751a      	strb	r2, [r3, #20]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	7d1b      	ldrb	r3, [r3, #20]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d112      	bne.n	800310e <motion_on_tim6_tick+0x7a>
                motion_hw_step_low(axis);
 80030e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80030ec:	4618      	mov	r0, r3
 80030ee:	f7ff f909 	bl	8002304 <motion_hw_step_low>
                /* Inicia tempo mÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â­nimo em BAIXO antes de permitir novo STEP */
                ax->step_low = MOTION_STEP_LOW_TICKS; /* Para voltar ao comportamento anterior, defina MOTION_STEP_LOW_TICKS=0u */
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2201      	movs	r2, #1
 80030f6:	755a      	strb	r2, [r3, #21]
 80030f8:	e009      	b.n	800310e <motion_on_tim6_tick+0x7a>
            }
        } else if (ax->step_low) {
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	7d5b      	ldrb	r3, [r3, #21]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d005      	beq.n	800310e <motion_on_tim6_tick+0x7a>
            /* Conta o perÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â­odo obrigatÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â³rio em BAIXO (tLOW) */
            --ax->step_low;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	7d5b      	ldrb	r3, [r3, #21]
 8003106:	3b01      	subs	r3, #1
 8003108:	b2da      	uxtb	r2, r3
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	755a      	strb	r2, [r3, #21]
    for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 800310e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003112:	3301      	adds	r3, #1
 8003114:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003118:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800311c:	2b02      	cmp	r3, #2
 800311e:	d9cc      	bls.n	80030ba <motion_on_tim6_tick+0x26>
        }
    }

    /* 2) DEMO: DDA a 50 kHz -> distribuiÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â§ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â£o uniforme de passos */
    if (g_demo_continuous) {
 8003120:	4b67      	ldr	r3, [pc, #412]	@ (80032c0 <motion_on_tim6_tick+0x22c>)
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	b2db      	uxtb	r3, r3
 8003126:	2b00      	cmp	r3, #0
 8003128:	f000 808b 	beq.w	8003242 <motion_on_tim6_tick+0x1ae>
        for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 800312c:	2300      	movs	r3, #0
 800312e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8003132:	e080      	b.n	8003236 <motion_on_tim6_tick+0x1a2>
            motion_axis_state_t *ax = &g_axis_state[axis];
 8003134:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8003138:	4613      	mov	r3, r2
 800313a:	00db      	lsls	r3, r3, #3
 800313c:	1a9b      	subs	r3, r3, r2
 800313e:	00db      	lsls	r3, r3, #3
 8003140:	4a5e      	ldr	r2, [pc, #376]	@ (80032bc <motion_on_tim6_tick+0x228>)
 8003142:	4413      	add	r3, r2
 8003144:	61bb      	str	r3, [r7, #24]

            if (ax->emitted_steps >= ax->total_steps) continue;
 8003146:	69bb      	ldr	r3, [r7, #24]
 8003148:	689a      	ldr	r2, [r3, #8]
 800314a:	69bb      	ldr	r3, [r7, #24]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	429a      	cmp	r2, r3
 8003150:	d267      	bcs.n	8003222 <motion_on_tim6_tick+0x18e>

            /* guardas de ENABLE e DIR (atendem setup/hold do TMC5160) */
            if (ax->en_settle_ticks)  { ax->en_settle_ticks--;  continue; }
 8003152:	69bb      	ldr	r3, [r7, #24]
 8003154:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003158:	2b00      	cmp	r3, #0
 800315a:	d008      	beq.n	800316e <motion_on_tim6_tick+0xda>
 800315c:	69bb      	ldr	r3, [r7, #24]
 800315e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003162:	3b01      	subs	r3, #1
 8003164:	b2da      	uxtb	r2, r3
 8003166:	69bb      	ldr	r3, [r7, #24]
 8003168:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 800316c:	e05e      	b.n	800322c <motion_on_tim6_tick+0x198>
            if (ax->dir_settle_ticks) { ax->dir_settle_ticks--; continue; }
 800316e:	69bb      	ldr	r3, [r7, #24]
 8003170:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003174:	2b00      	cmp	r3, #0
 8003176:	d008      	beq.n	800318a <motion_on_tim6_tick+0xf6>
 8003178:	69bb      	ldr	r3, [r7, #24]
 800317a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800317e:	3b01      	subs	r3, #1
 8003180:	b2da      	uxtb	r2, r3
 8003182:	69bb      	ldr	r3, [r7, #24]
 8003184:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8003188:	e050      	b.n	800322c <motion_on_tim6_tick+0x198>

            if (ax->step_high) continue; /* ainda segurando pulso ALTO */
 800318a:	69bb      	ldr	r3, [r7, #24]
 800318c:	7d1b      	ldrb	r3, [r3, #20]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d149      	bne.n	8003226 <motion_on_tim6_tick+0x192>
            if (ax->step_low)  continue; /* aguardando tLOW mÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â­nimo antes de novo STEP */
 8003192:	69bb      	ldr	r3, [r7, #24]
 8003194:	7d5b      	ldrb	r3, [r3, #21]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d147      	bne.n	800322a <motion_on_tim6_tick+0x196>

            /* DDA: acumula fase e emite STEP ao cruzar 1.0 */
            ax->dda_accum_q16 += ax->dda_inc_q16;
 800319a:	69bb      	ldr	r3, [r7, #24]
 800319c:	699a      	ldr	r2, [r3, #24]
 800319e:	69bb      	ldr	r3, [r7, #24]
 80031a0:	69db      	ldr	r3, [r3, #28]
 80031a2:	441a      	add	r2, r3
 80031a4:	69bb      	ldr	r3, [r7, #24]
 80031a6:	619a      	str	r2, [r3, #24]
            if (ax->dda_accum_q16 >= Q16_1) {
 80031a8:	69bb      	ldr	r3, [r7, #24]
 80031aa:	699b      	ldr	r3, [r3, #24]
 80031ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031b0:	d33c      	bcc.n	800322c <motion_on_tim6_tick+0x198>
                ax->dda_accum_q16 -= Q16_1;
 80031b2:	69bb      	ldr	r3, [r7, #24]
 80031b4:	699b      	ldr	r3, [r3, #24]
 80031b6:	f5a3 3280 	sub.w	r2, r3, #65536	@ 0x10000
 80031ba:	69bb      	ldr	r3, [r7, #24]
 80031bc:	619a      	str	r2, [r3, #24]

                motion_hw_step_high(axis);
 80031be:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80031c2:	4618      	mov	r0, r3
 80031c4:	f7ff f87a 	bl	80022bc <motion_hw_step_high>
                ax->step_high = MOTION_STEP_HIGH_TICKS;
 80031c8:	69bb      	ldr	r3, [r7, #24]
 80031ca:	2201      	movs	r2, #1
 80031cc:	751a      	strb	r2, [r3, #20]
                ++ax->emitted_steps;
 80031ce:	69bb      	ldr	r3, [r7, #24]
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	1c5a      	adds	r2, r3, #1
 80031d4:	69bb      	ldr	r3, [r7, #24]
 80031d6:	609a      	str	r2, [r3, #8]
#if MOTION_DEBUG_FLOW
                if ((++g_step_print_count[axis] % MOTION_DEBUG_STEP_DECIM) == 1u) {
 80031d8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80031dc:	4a39      	ldr	r2, [pc, #228]	@ (80032c4 <motion_on_tim6_tick+0x230>)
 80031de:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80031e2:	3201      	adds	r2, #1
 80031e4:	4937      	ldr	r1, [pc, #220]	@ (80032c4 <motion_on_tim6_tick+0x230>)
 80031e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80031ea:	4a36      	ldr	r2, [pc, #216]	@ (80032c4 <motion_on_tim6_tick+0x230>)
 80031ec:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80031f0:	4b35      	ldr	r3, [pc, #212]	@ (80032c8 <motion_on_tim6_tick+0x234>)
 80031f2:	fba3 1302 	umull	r1, r3, r3, r2
 80031f6:	095b      	lsrs	r3, r3, #5
 80031f8:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80031fc:	fb01 f303 	mul.w	r3, r1, r3
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	2b01      	cmp	r3, #1
 8003204:	d112      	bne.n	800322c <motion_on_tim6_tick+0x198>
                    printf("[STEP axis=%u emitted=%lu target=%lu total=%lu]\r\n",
 8003206:	f897 1026 	ldrb.w	r1, [r7, #38]	@ 0x26
                           (unsigned)axis,
                           (unsigned long)ax->emitted_steps,
 800320a:	69bb      	ldr	r3, [r7, #24]
 800320c:	689a      	ldr	r2, [r3, #8]
                           (unsigned long)ax->target_steps,
 800320e:	69bb      	ldr	r3, [r7, #24]
 8003210:	6858      	ldr	r0, [r3, #4]
                           (unsigned long)ax->total_steps);
 8003212:	69bb      	ldr	r3, [r7, #24]
 8003214:	681b      	ldr	r3, [r3, #0]
                    printf("[STEP axis=%u emitted=%lu target=%lu total=%lu]\r\n",
 8003216:	9300      	str	r3, [sp, #0]
 8003218:	4603      	mov	r3, r0
 800321a:	482c      	ldr	r0, [pc, #176]	@ (80032cc <motion_on_tim6_tick+0x238>)
 800321c:	f00a ff58 	bl	800e0d0 <iprintf>
 8003220:	e004      	b.n	800322c <motion_on_tim6_tick+0x198>
            if (ax->emitted_steps >= ax->total_steps) continue;
 8003222:	bf00      	nop
 8003224:	e002      	b.n	800322c <motion_on_tim6_tick+0x198>
            if (ax->step_high) continue; /* ainda segurando pulso ALTO */
 8003226:	bf00      	nop
 8003228:	e000      	b.n	800322c <motion_on_tim6_tick+0x198>
            if (ax->step_low)  continue; /* aguardando tLOW mÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â­nimo antes de novo STEP */
 800322a:	bf00      	nop
        for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 800322c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003230:	3301      	adds	r3, #1
 8003232:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8003236:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800323a:	2b02      	cmp	r3, #2
 800323c:	f67f af7a 	bls.w	8003134 <motion_on_tim6_tick+0xa0>
 8003240:	e0a3      	b.n	800338a <motion_on_tim6_tick+0x2f6>
            }
        }
    }
    else {
        /* 3) Caminho original (fila): preservado */
        for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8003242:	2300      	movs	r3, #0
 8003244:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8003248:	e09a      	b.n	8003380 <motion_on_tim6_tick+0x2ec>
            motion_axis_state_t *ax = &g_axis_state[axis];
 800324a:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 800324e:	4613      	mov	r3, r2
 8003250:	00db      	lsls	r3, r3, #3
 8003252:	1a9b      	subs	r3, r3, r2
 8003254:	00db      	lsls	r3, r3, #3
 8003256:	4a19      	ldr	r2, [pc, #100]	@ (80032bc <motion_on_tim6_tick+0x228>)
 8003258:	4413      	add	r3, r2
 800325a:	61fb      	str	r3, [r7, #28]

            if (ax->step_high) continue;
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	7d1b      	ldrb	r3, [r3, #20]
 8003260:	2b00      	cmp	r3, #0
 8003262:	f040 8083 	bne.w	800336c <motion_on_tim6_tick+0x2d8>
            if (ax->step_low)  continue; /* aguardando tLOW mÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â­nimo antes de novo STEP */
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	7d5b      	ldrb	r3, [r3, #21]
 800326a:	2b00      	cmp	r3, #0
 800326c:	f040 8080 	bne.w	8003370 <motion_on_tim6_tick+0x2dc>
            if (ax->emitted_steps >= ax->total_steps) continue;
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	689a      	ldr	r2, [r3, #8]
 8003274:	69fb      	ldr	r3, [r7, #28]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	429a      	cmp	r2, r3
 800327a:	d27b      	bcs.n	8003374 <motion_on_tim6_tick+0x2e0>

            if (ax->en_settle_ticks)  { ax->en_settle_ticks--;  continue; }
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003282:	2b00      	cmp	r3, #0
 8003284:	d008      	beq.n	8003298 <motion_on_tim6_tick+0x204>
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800328c:	3b01      	subs	r3, #1
 800328e:	b2da      	uxtb	r2, r3
 8003290:	69fb      	ldr	r3, [r7, #28]
 8003292:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 8003296:	e06e      	b.n	8003376 <motion_on_tim6_tick+0x2e2>
            if (ax->dir_settle_ticks) { ax->dir_settle_ticks--; continue; }
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d016      	beq.n	80032d0 <motion_on_tim6_tick+0x23c>
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80032a8:	3b01      	subs	r3, #1
 80032aa:	b2da      	uxtb	r2, r3
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80032b2:	e060      	b.n	8003376 <motion_on_tim6_tick+0x2e2>
 80032b4:	200000c4 	.word	0x200000c4
 80032b8:	20000174 	.word	0x20000174
 80032bc:	200000cc 	.word	0x200000cc
 80032c0:	20000ce4 	.word	0x20000ce4
 80032c4:	20000cd8 	.word	0x20000cd8
 80032c8:	10624dd3 	.word	0x10624dd3
 80032cc:	0800f5b4 	.word	0x0800f5b4

            /* DDA (fila): acumula fase e emite STEP no cruzamento de 1.0 */
            ax->dda_accum_q16 += ax->dda_inc_q16;
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	699a      	ldr	r2, [r3, #24]
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	69db      	ldr	r3, [r3, #28]
 80032d8:	441a      	add	r2, r3
 80032da:	69fb      	ldr	r3, [r7, #28]
 80032dc:	619a      	str	r2, [r3, #24]
            if (ax->dda_accum_q16 >= Q16_1) {
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	699b      	ldr	r3, [r3, #24]
 80032e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032e6:	d346      	bcc.n	8003376 <motion_on_tim6_tick+0x2e2>
                ax->dda_accum_q16 -= Q16_1;
 80032e8:	69fb      	ldr	r3, [r7, #28]
 80032ea:	699b      	ldr	r3, [r3, #24]
 80032ec:	f5a3 3280 	sub.w	r2, r3, #65536	@ 0x10000
 80032f0:	69fb      	ldr	r3, [r7, #28]
 80032f2:	619a      	str	r2, [r3, #24]
                if (ax->emitted_steps < ax->total_steps) {
 80032f4:	69fb      	ldr	r3, [r7, #28]
 80032f6:	689a      	ldr	r2, [r3, #8]
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d23a      	bcs.n	8003376 <motion_on_tim6_tick+0x2e2>
                    motion_hw_step_high(axis);
 8003300:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003304:	4618      	mov	r0, r3
 8003306:	f7fe ffd9 	bl	80022bc <motion_hw_step_high>
                    ax->step_high = MOTION_STEP_HIGH_TICKS;
 800330a:	69fb      	ldr	r3, [r7, #28]
 800330c:	2201      	movs	r2, #1
 800330e:	751a      	strb	r2, [r3, #20]
                    ++ax->emitted_steps;
 8003310:	69fb      	ldr	r3, [r7, #28]
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	1c5a      	adds	r2, r3, #1
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	609a      	str	r2, [r3, #8]
                    ax->target_steps = ax->emitted_steps;
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	689a      	ldr	r2, [r3, #8]
 800331e:	69fb      	ldr	r3, [r7, #28]
 8003320:	605a      	str	r2, [r3, #4]
#if MOTION_DEBUG_FLOW
                    if ((++g_step_print_count[axis] % MOTION_DEBUG_STEP_DECIM) == 1u) {
 8003322:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003326:	4a51      	ldr	r2, [pc, #324]	@ (800346c <motion_on_tim6_tick+0x3d8>)
 8003328:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800332c:	3201      	adds	r2, #1
 800332e:	494f      	ldr	r1, [pc, #316]	@ (800346c <motion_on_tim6_tick+0x3d8>)
 8003330:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8003334:	4a4d      	ldr	r2, [pc, #308]	@ (800346c <motion_on_tim6_tick+0x3d8>)
 8003336:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800333a:	4b4d      	ldr	r3, [pc, #308]	@ (8003470 <motion_on_tim6_tick+0x3dc>)
 800333c:	fba3 1302 	umull	r1, r3, r3, r2
 8003340:	095b      	lsrs	r3, r3, #5
 8003342:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8003346:	fb01 f303 	mul.w	r3, r1, r3
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	2b01      	cmp	r3, #1
 800334e:	d112      	bne.n	8003376 <motion_on_tim6_tick+0x2e2>
                        printf("[STEP axis=%u emitted=%lu target=%lu total=%lu]\\r\\n",
 8003350:	f897 1025 	ldrb.w	r1, [r7, #37]	@ 0x25
                               (unsigned)axis,
                               (unsigned long)ax->emitted_steps,
 8003354:	69fb      	ldr	r3, [r7, #28]
 8003356:	689a      	ldr	r2, [r3, #8]
                               (unsigned long)ax->target_steps,
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	6858      	ldr	r0, [r3, #4]
                               (unsigned long)ax->total_steps);
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	681b      	ldr	r3, [r3, #0]
                        printf("[STEP axis=%u emitted=%lu target=%lu total=%lu]\\r\\n",
 8003360:	9300      	str	r3, [sp, #0]
 8003362:	4603      	mov	r3, r0
 8003364:	4843      	ldr	r0, [pc, #268]	@ (8003474 <motion_on_tim6_tick+0x3e0>)
 8003366:	f00a feb3 	bl	800e0d0 <iprintf>
 800336a:	e004      	b.n	8003376 <motion_on_tim6_tick+0x2e2>
            if (ax->step_high) continue;
 800336c:	bf00      	nop
 800336e:	e002      	b.n	8003376 <motion_on_tim6_tick+0x2e2>
            if (ax->step_low)  continue; /* aguardando tLOW mÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â­nimo antes de novo STEP */
 8003370:	bf00      	nop
 8003372:	e000      	b.n	8003376 <motion_on_tim6_tick+0x2e2>
            if (ax->emitted_steps >= ax->total_steps) continue;
 8003374:	bf00      	nop
        for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8003376:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800337a:	3301      	adds	r3, #1
 800337c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8003380:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003384:	2b02      	cmp	r3, #2
 8003386:	f67f af60 	bls.w	800324a <motion_on_tim6_tick+0x1b6>
#endif
                }
            }
        }
    }
    uint32_t primask = motion_lock();
 800338a:	f7ff f823 	bl	80023d4 <motion_lock>
 800338e:	6178      	str	r0, [r7, #20]
    if (g_has_active_segment) {
 8003390:	4b39      	ldr	r3, [pc, #228]	@ (8003478 <motion_on_tim6_tick+0x3e4>)
 8003392:	781b      	ldrb	r3, [r3, #0]
 8003394:	b2db      	uxtb	r3, r3
 8003396:	2b00      	cmp	r3, #0
 8003398:	d060      	beq.n	800345c <motion_on_tim6_tick+0x3c8>
        uint8_t confirm = 1u;
 800339a:	2301      	movs	r3, #1
 800339c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 80033a0:	2300      	movs	r3, #0
 80033a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80033a6:	e01b      	b.n	80033e0 <motion_on_tim6_tick+0x34c>
            const motion_axis_state_t *ax = &g_axis_state[axis];
 80033a8:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80033ac:	4613      	mov	r3, r2
 80033ae:	00db      	lsls	r3, r3, #3
 80033b0:	1a9b      	subs	r3, r3, r2
 80033b2:	00db      	lsls	r3, r3, #3
 80033b4:	4a31      	ldr	r2, [pc, #196]	@ (800347c <motion_on_tim6_tick+0x3e8>)
 80033b6:	4413      	add	r3, r2
 80033b8:	613b      	str	r3, [r7, #16]
            if (ax->emitted_steps < ax->total_steps || ax->step_high) {
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	689a      	ldr	r2, [r3, #8]
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d303      	bcc.n	80033ce <motion_on_tim6_tick+0x33a>
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	7d1b      	ldrb	r3, [r3, #20]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d003      	beq.n	80033d6 <motion_on_tim6_tick+0x342>
                confirm = 0u; break;
 80033ce:	2300      	movs	r3, #0
 80033d0:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 80033d4:	e008      	b.n	80033e8 <motion_on_tim6_tick+0x354>
        for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 80033d6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80033da:	3301      	adds	r3, #1
 80033dc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80033e0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80033e4:	2b02      	cmp	r3, #2
 80033e6:	d9df      	bls.n	80033a8 <motion_on_tim6_tick+0x314>
            }
        }
        if (confirm) {
 80033e8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d035      	beq.n	800345c <motion_on_tim6_tick+0x3c8>
            if (motion_try_start_next_locked()) {
 80033f0:	f7ff fbda 	bl	8002ba8 <motion_try_start_next_locked>
 80033f4:	4603      	mov	r3, r0
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d006      	beq.n	8003408 <motion_on_tim6_tick+0x374>
                g_status.state = MOTION_RUNNING;
 80033fa:	4b21      	ldr	r3, [pc, #132]	@ (8003480 <motion_on_tim6_tick+0x3ec>)
 80033fc:	2202      	movs	r2, #2
 80033fe:	701a      	strb	r2, [r3, #0]
#if MOTION_DEBUG_FLOW
                printf("[FLOW next_segment started]\r\n");
 8003400:	4820      	ldr	r0, [pc, #128]	@ (8003484 <motion_on_tim6_tick+0x3f0>)
 8003402:	f00a fecd 	bl	800e1a0 <puts>
 8003406:	e027      	b.n	8003458 <motion_on_tim6_tick+0x3c4>
#endif
            } else {
                g_has_active_segment = 0u;
 8003408:	4b1b      	ldr	r3, [pc, #108]	@ (8003478 <motion_on_tim6_tick+0x3e4>)
 800340a:	2200      	movs	r2, #0
 800340c:	701a      	strb	r2, [r3, #0]
                motion_stop_all_axes_locked();
 800340e:	f7ff f9e3 	bl	80027d8 <motion_stop_all_axes_locked>
                g_status.state = MOTION_DONE;
 8003412:	4b1b      	ldr	r3, [pc, #108]	@ (8003480 <motion_on_tim6_tick+0x3ec>)
 8003414:	2205      	movs	r2, #5
 8003416:	701a      	strb	r2, [r3, #0]
#if MOTION_DEBUG_ENCODERS
                printf("[ENC DONE abs=(%ld,%ld,%ld) rel=(%ld,%ld,%ld) target=(%lu,%lu,%lu)]\r\n",
                       (long)g_enc_abs32[AXIS_X],
 8003418:	4b1b      	ldr	r3, [pc, #108]	@ (8003488 <motion_on_tim6_tick+0x3f4>)
 800341a:	681e      	ldr	r6, [r3, #0]
                       (long)g_enc_abs32[AXIS_Y],
 800341c:	4b1a      	ldr	r3, [pc, #104]	@ (8003488 <motion_on_tim6_tick+0x3f4>)
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	607b      	str	r3, [r7, #4]
                       (long)g_enc_abs32[AXIS_Z],
 8003422:	4b19      	ldr	r3, [pc, #100]	@ (8003488 <motion_on_tim6_tick+0x3f4>)
 8003424:	6899      	ldr	r1, [r3, #8]
 8003426:	6039      	str	r1, [r7, #0]
                       (long)g_enc_rel32[AXIS_X],
 8003428:	4b18      	ldr	r3, [pc, #96]	@ (800348c <motion_on_tim6_tick+0x3f8>)
 800342a:	681b      	ldr	r3, [r3, #0]
                       (long)g_enc_rel32[AXIS_Y],
 800342c:	4a17      	ldr	r2, [pc, #92]	@ (800348c <motion_on_tim6_tick+0x3f8>)
 800342e:	6852      	ldr	r2, [r2, #4]
                       (long)g_enc_rel32[AXIS_Z],
 8003430:	4916      	ldr	r1, [pc, #88]	@ (800348c <motion_on_tim6_tick+0x3f8>)
 8003432:	6889      	ldr	r1, [r1, #8]
                       (unsigned long)g_axis_state[AXIS_X].total_steps,
 8003434:	4811      	ldr	r0, [pc, #68]	@ (800347c <motion_on_tim6_tick+0x3e8>)
 8003436:	6800      	ldr	r0, [r0, #0]
                       (unsigned long)g_axis_state[AXIS_Y].total_steps,
 8003438:	4c10      	ldr	r4, [pc, #64]	@ (800347c <motion_on_tim6_tick+0x3e8>)
 800343a:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
                       (unsigned long)g_axis_state[AXIS_Z].total_steps);
 800343c:	4d0f      	ldr	r5, [pc, #60]	@ (800347c <motion_on_tim6_tick+0x3e8>)
 800343e:	6f2d      	ldr	r5, [r5, #112]	@ 0x70
                printf("[ENC DONE abs=(%ld,%ld,%ld) rel=(%ld,%ld,%ld) target=(%lu,%lu,%lu)]\r\n",
 8003440:	9505      	str	r5, [sp, #20]
 8003442:	9404      	str	r4, [sp, #16]
 8003444:	9003      	str	r0, [sp, #12]
 8003446:	9102      	str	r1, [sp, #8]
 8003448:	9201      	str	r2, [sp, #4]
 800344a:	9300      	str	r3, [sp, #0]
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	4631      	mov	r1, r6
 8003452:	480f      	ldr	r0, [pc, #60]	@ (8003490 <motion_on_tim6_tick+0x3fc>)
 8003454:	f00a fe3c 	bl	800e0d0 <iprintf>
#endif
            }
            motion_refresh_status_locked();
 8003458:	f7ff f878 	bl	800254c <motion_refresh_status_locked>
        }
    }
    motion_unlock(primask);
 800345c:	6978      	ldr	r0, [r7, #20]
 800345e:	f7fe ffca 	bl	80023f6 <motion_unlock>
 8003462:	e000      	b.n	8003466 <motion_on_tim6_tick+0x3d2>
        return;
 8003464:	bf00      	nop
}
 8003466:	372c      	adds	r7, #44	@ 0x2c
 8003468:	46bd      	mov	sp, r7
 800346a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800346c:	20000cd8 	.word	0x20000cd8
 8003470:	10624dd3 	.word	0x10624dd3
 8003474:	0800f5e8 	.word	0x0800f5e8
 8003478:	20000174 	.word	0x20000174
 800347c:	200000cc 	.word	0x200000cc
 8003480:	200000c4 	.word	0x200000c4
 8003484:	0800f61c 	.word	0x0800f61c
 8003488:	20000cc0 	.word	0x20000cc0
 800348c:	20000ccc 	.word	0x20000ccc
 8003490:	0800f63c 	.word	0x0800f63c

08003494 <motion_on_tim7_tick>:
 *  - Atualiza encoders
 *  - DEMO: rampa e dda_inc
 *  - Fila: sua lÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â³gica original de target_steps
 * ======================= */
void motion_on_tim7_tick(void)
{
 8003494:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003498:	b08a      	sub	sp, #40	@ 0x28
 800349a:	af00      	add	r7, sp, #0
    motion_update_encoders();
 800349c:	f7ff fbac 	bl	8002bf8 <motion_update_encoders>

    // Atualiza sombras 32-bit para SWV/Data Trace (4 bytes por amostra)
    for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 80034a0:	2300      	movs	r3, #0
 80034a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80034a6:	e027      	b.n	80034f8 <motion_on_tim7_tick+0x64>
        g_enc_abs32[axis] = (int32_t)g_encoder_position[axis];
 80034a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80034ac:	4a78      	ldr	r2, [pc, #480]	@ (8003690 <motion_on_tim7_tick+0x1fc>)
 80034ae:	00db      	lsls	r3, r3, #3
 80034b0:	4413      	add	r3, r2
 80034b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034b6:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 80034ba:	4b76      	ldr	r3, [pc, #472]	@ (8003694 <motion_on_tim7_tick+0x200>)
 80034bc:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
        g_enc_rel32[axis] = (int32_t)(g_encoder_position[axis] - g_encoder_origin[axis]);
 80034c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80034c4:	4a72      	ldr	r2, [pc, #456]	@ (8003690 <motion_on_tim7_tick+0x1fc>)
 80034c6:	00db      	lsls	r3, r3, #3
 80034c8:	4413      	add	r3, r2
 80034ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ce:	4611      	mov	r1, r2
 80034d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80034d4:	4a70      	ldr	r2, [pc, #448]	@ (8003698 <motion_on_tim7_tick+0x204>)
 80034d6:	00db      	lsls	r3, r3, #3
 80034d8:	4413      	add	r3, r2
 80034da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034de:	4613      	mov	r3, r2
 80034e0:	1aca      	subs	r2, r1, r3
 80034e2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80034e6:	4611      	mov	r1, r2
 80034e8:	4a6c      	ldr	r2, [pc, #432]	@ (800369c <motion_on_tim7_tick+0x208>)
 80034ea:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 80034ee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80034f2:	3301      	adds	r3, #1
 80034f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80034f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80034fc:	2b02      	cmp	r3, #2
 80034fe:	d9d3      	bls.n	80034a8 <motion_on_tim7_tick+0x14>
    }

    /* DEMO: aplica rampa e calcula incremento do DDA */
    if (g_status.state == MOTION_RUNNING && g_has_active_segment && g_demo_continuous) {
 8003500:	4b67      	ldr	r3, [pc, #412]	@ (80036a0 <motion_on_tim7_tick+0x20c>)
 8003502:	781b      	ldrb	r3, [r3, #0]
 8003504:	b2db      	uxtb	r3, r3
 8003506:	2b02      	cmp	r3, #2
 8003508:	d173      	bne.n	80035f2 <motion_on_tim7_tick+0x15e>
 800350a:	4b66      	ldr	r3, [pc, #408]	@ (80036a4 <motion_on_tim7_tick+0x210>)
 800350c:	781b      	ldrb	r3, [r3, #0]
 800350e:	b2db      	uxtb	r3, r3
 8003510:	2b00      	cmp	r3, #0
 8003512:	d06e      	beq.n	80035f2 <motion_on_tim7_tick+0x15e>
 8003514:	4b64      	ldr	r3, [pc, #400]	@ (80036a8 <motion_on_tim7_tick+0x214>)
 8003516:	781b      	ldrb	r3, [r3, #0]
 8003518:	b2db      	uxtb	r3, r3
 800351a:	2b00      	cmp	r3, #0
 800351c:	d069      	beq.n	80035f2 <motion_on_tim7_tick+0x15e>
        for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 800351e:	2300      	movs	r3, #0
 8003520:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8003524:	e061      	b.n	80035ea <motion_on_tim7_tick+0x156>
            motion_axis_state_t *ax = &g_axis_state[axis];
 8003526:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800352a:	4613      	mov	r3, r2
 800352c:	00db      	lsls	r3, r3, #3
 800352e:	1a9b      	subs	r3, r3, r2
 8003530:	00db      	lsls	r3, r3, #3
 8003532:	4a5e      	ldr	r2, [pc, #376]	@ (80036ac <motion_on_tim7_tick+0x218>)
 8003534:	4413      	add	r3, r2
 8003536:	623b      	str	r3, [r7, #32]
            if (ax->emitted_steps >= ax->total_steps) continue;
 8003538:	6a3b      	ldr	r3, [r7, #32]
 800353a:	689a      	ldr	r2, [r3, #8]
 800353c:	6a3b      	ldr	r3, [r7, #32]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	429a      	cmp	r2, r3
 8003542:	d24c      	bcs.n	80035de <motion_on_tim7_tick+0x14a>

            /* dv = a/1000 (steps/s por tick de 1 ms) */
            uint32_t dv = ax->accel_sps2 / 1000u;
 8003544:	6a3b      	ldr	r3, [r7, #32]
 8003546:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003548:	4a59      	ldr	r2, [pc, #356]	@ (80036b0 <motion_on_tim7_tick+0x21c>)
 800354a:	fba2 2303 	umull	r2, r3, r2, r3
 800354e:	099b      	lsrs	r3, r3, #6
 8003550:	61fb      	str	r3, [r7, #28]
            if (ax->v_actual_sps < ax->v_target_sps) {
 8003552:	6a3b      	ldr	r3, [r7, #32]
 8003554:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003556:	6a3b      	ldr	r3, [r7, #32]
 8003558:	6a1b      	ldr	r3, [r3, #32]
 800355a:	429a      	cmp	r2, r3
 800355c:	d20d      	bcs.n	800357a <motion_on_tim7_tick+0xe6>
                uint32_t v = ax->v_actual_sps + dv;
 800355e:	6a3b      	ldr	r3, [r7, #32]
 8003560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003562:	69fa      	ldr	r2, [r7, #28]
 8003564:	4413      	add	r3, r2
 8003566:	617b      	str	r3, [r7, #20]
                ax->v_actual_sps = (v > ax->v_target_sps) ? ax->v_target_sps : v;
 8003568:	6a3b      	ldr	r3, [r7, #32]
 800356a:	6a1a      	ldr	r2, [r3, #32]
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	429a      	cmp	r2, r3
 8003570:	bf28      	it	cs
 8003572:	461a      	movcs	r2, r3
 8003574:	6a3b      	ldr	r3, [r7, #32]
 8003576:	625a      	str	r2, [r3, #36]	@ 0x24
 8003578:	e019      	b.n	80035ae <motion_on_tim7_tick+0x11a>
            } else if (ax->v_actual_sps > ax->v_target_sps) {
 800357a:	6a3b      	ldr	r3, [r7, #32]
 800357c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800357e:	6a3b      	ldr	r3, [r7, #32]
 8003580:	6a1b      	ldr	r3, [r3, #32]
 8003582:	429a      	cmp	r2, r3
 8003584:	d913      	bls.n	80035ae <motion_on_tim7_tick+0x11a>
                uint32_t v = (ax->v_actual_sps > dv) ? ax->v_actual_sps - dv : 0u;
 8003586:	6a3b      	ldr	r3, [r7, #32]
 8003588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800358a:	69fa      	ldr	r2, [r7, #28]
 800358c:	429a      	cmp	r2, r3
 800358e:	d204      	bcs.n	800359a <motion_on_tim7_tick+0x106>
 8003590:	6a3b      	ldr	r3, [r7, #32]
 8003592:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003594:	69fb      	ldr	r3, [r7, #28]
 8003596:	1ad3      	subs	r3, r2, r3
 8003598:	e000      	b.n	800359c <motion_on_tim7_tick+0x108>
 800359a:	2300      	movs	r3, #0
 800359c:	61bb      	str	r3, [r7, #24]
                ax->v_actual_sps = (v < ax->v_target_sps) ? ax->v_target_sps : v;
 800359e:	6a3b      	ldr	r3, [r7, #32]
 80035a0:	6a1a      	ldr	r2, [r3, #32]
 80035a2:	69bb      	ldr	r3, [r7, #24]
 80035a4:	429a      	cmp	r2, r3
 80035a6:	bf38      	it	cc
 80035a8:	461a      	movcc	r2, r3
 80035aa:	6a3b      	ldr	r3, [r7, #32]
 80035ac:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            ax->dda_inc_q16 = Q16_DIV_UINT(ax->v_actual_sps, MOTION_TIM6_HZ);
 80035ae:	6a3b      	ldr	r3, [r7, #32]
 80035b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035b2:	2200      	movs	r2, #0
 80035b4:	4698      	mov	r8, r3
 80035b6:	4691      	mov	r9, r2
 80035b8:	ea4f 4318 	mov.w	r3, r8, lsr #16
 80035bc:	607b      	str	r3, [r7, #4]
 80035be:	ea4f 4308 	mov.w	r3, r8, lsl #16
 80035c2:	603b      	str	r3, [r7, #0]
 80035c4:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80035c8:	f04f 0300 	mov.w	r3, #0
 80035cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80035d0:	f7fc fe4e 	bl	8000270 <__aeabi_uldivmod>
 80035d4:	4602      	mov	r2, r0
 80035d6:	460b      	mov	r3, r1
 80035d8:	6a3b      	ldr	r3, [r7, #32]
 80035da:	61da      	str	r2, [r3, #28]
 80035dc:	e000      	b.n	80035e0 <motion_on_tim7_tick+0x14c>
            if (ax->emitted_steps >= ax->total_steps) continue;
 80035de:	bf00      	nop
        for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 80035e0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80035e4:	3301      	adds	r3, #1
 80035e6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80035ea:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80035ee:	2b02      	cmp	r3, #2
 80035f0:	d999      	bls.n	8003526 <motion_on_tim7_tick+0x92>
        }
    }
    /* Caminho da fila: define incremento DDA a partir de velocity_per_tick */
    if (g_status.state == MOTION_RUNNING && g_has_active_segment && !g_demo_continuous) {
 80035f2:	4b2b      	ldr	r3, [pc, #172]	@ (80036a0 <motion_on_tim7_tick+0x20c>)
 80035f4:	781b      	ldrb	r3, [r3, #0]
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	2b02      	cmp	r3, #2
 80035fa:	d143      	bne.n	8003684 <motion_on_tim7_tick+0x1f0>
 80035fc:	4b29      	ldr	r3, [pc, #164]	@ (80036a4 <motion_on_tim7_tick+0x210>)
 80035fe:	781b      	ldrb	r3, [r3, #0]
 8003600:	b2db      	uxtb	r3, r3
 8003602:	2b00      	cmp	r3, #0
 8003604:	d03e      	beq.n	8003684 <motion_on_tim7_tick+0x1f0>
 8003606:	4b28      	ldr	r3, [pc, #160]	@ (80036a8 <motion_on_tim7_tick+0x214>)
 8003608:	781b      	ldrb	r3, [r3, #0]
 800360a:	b2db      	uxtb	r3, r3
 800360c:	2b00      	cmp	r3, #0
 800360e:	d139      	bne.n	8003684 <motion_on_tim7_tick+0x1f0>
        for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8003610:	2300      	movs	r3, #0
 8003612:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8003616:	e031      	b.n	800367c <motion_on_tim7_tick+0x1e8>
            motion_axis_state_t *ax = &g_axis_state[axis];
 8003618:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 800361c:	4613      	mov	r3, r2
 800361e:	00db      	lsls	r3, r3, #3
 8003620:	1a9b      	subs	r3, r3, r2
 8003622:	00db      	lsls	r3, r3, #3
 8003624:	4a21      	ldr	r2, [pc, #132]	@ (80036ac <motion_on_tim7_tick+0x218>)
 8003626:	4413      	add	r3, r2
 8003628:	613b      	str	r3, [r7, #16]
            if (ax->emitted_steps >= ax->total_steps) continue;
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	689a      	ldr	r2, [r3, #8]
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	429a      	cmp	r2, r3
 8003634:	d21c      	bcs.n	8003670 <motion_on_tim7_tick+0x1dc>
            uint32_t v_sps = ((uint32_t)ax->velocity_per_tick) * 1000u;
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	899b      	ldrh	r3, [r3, #12]
 800363a:	461a      	mov	r2, r3
 800363c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003640:	fb02 f303 	mul.w	r3, r2, r3
 8003644:	60fb      	str	r3, [r7, #12]
            ax->dda_inc_q16 = Q16_DIV_UINT(v_sps, MOTION_TIM6_HZ);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2200      	movs	r2, #0
 800364a:	461c      	mov	r4, r3
 800364c:	4615      	mov	r5, r2
 800364e:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 8003652:	ea4f 4a04 	mov.w	sl, r4, lsl #16
 8003656:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800365a:	f04f 0300 	mov.w	r3, #0
 800365e:	4650      	mov	r0, sl
 8003660:	4659      	mov	r1, fp
 8003662:	f7fc fe05 	bl	8000270 <__aeabi_uldivmod>
 8003666:	4602      	mov	r2, r0
 8003668:	460b      	mov	r3, r1
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	61da      	str	r2, [r3, #28]
 800366e:	e000      	b.n	8003672 <motion_on_tim7_tick+0x1de>
            if (ax->emitted_steps >= ax->total_steps) continue;
 8003670:	bf00      	nop
        for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8003672:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003676:	3301      	adds	r3, #1
 8003678:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800367c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003680:	2b02      	cmp	r3, #2
 8003682:	d9c9      	bls.n	8003618 <motion_on_tim7_tick+0x184>
        }
    }
    
}
 8003684:	bf00      	nop
 8003686:	3728      	adds	r7, #40	@ 0x28
 8003688:	46bd      	mov	sp, r7
 800368a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800368e:	bf00      	nop
 8003690:	20000c80 	.word	0x20000c80
 8003694:	20000cc0 	.word	0x20000cc0
 8003698:	20000ca8 	.word	0x20000ca8
 800369c:	20000ccc 	.word	0x20000ccc
 80036a0:	200000c4 	.word	0x200000c4
 80036a4:	20000174 	.word	0x20000174
 80036a8:	20000ce4 	.word	0x20000ce4
 80036ac:	200000cc 	.word	0x200000cc
 80036b0:	10624dd3 	.word	0x10624dd3

080036b4 <motion_on_move_queue_add>:

/* =======================
 *  Handlers de protocolo
 * ======================= */
void motion_on_move_queue_add(const uint8_t *frame, uint32_t len) {
 80036b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036b6:	b097      	sub	sp, #92	@ 0x5c
 80036b8:	af06      	add	r7, sp, #24
 80036ba:	6078      	str	r0, [r7, #4]
 80036bc:	6039      	str	r1, [r7, #0]

    move_queue_add_req_t req;
    uint8_t ack_status = MOTION_ACK_INVALID;
 80036be:	2301      	movs	r3, #1
 80036c0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    uint8_t frame_id = 0u;
 80036c4:	2300      	movs	r3, #0
 80036c6:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e

    if (!frame) return;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	f000 80a3 	beq.w	8003818 <motion_on_move_queue_add+0x164>
    proto_result_t decode_status = move_queue_add_req_decoder(frame, len, &req);
 80036d2:	f107 0308 	add.w	r3, r7, #8
 80036d6:	461a      	mov	r2, r3
 80036d8:	6839      	ldr	r1, [r7, #0]
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f7fd f8f8 	bl	80008d0 <move_queue_add_req_decoder>
 80036e0:	4603      	mov	r3, r0
 80036e2:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
    if (decode_status != PROTO_OK) {
 80036e6:	f997 303d 	ldrsb.w	r3, [r7, #61]	@ 0x3d
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d014      	beq.n	8003718 <motion_on_move_queue_add+0x64>
        motion_send_queue_add_ack(frame_id, ack_status);
 80036ee:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 80036f2:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80036f6:	4611      	mov	r1, r2
 80036f8:	4618      	mov	r0, r3
 80036fa:	f7ff fb21 	bl	8002d40 <motion_send_queue_add_ack>
        LOGA_THIS(LOG_STATE_ERROR, decode_status, "queue_add", "decode_fail");
 80036fe:	f997 203d 	ldrsb.w	r2, [r7, #61]	@ 0x3d
 8003702:	4947      	ldr	r1, [pc, #284]	@ (8003820 <motion_on_move_queue_add+0x16c>)
 8003704:	4b47      	ldr	r3, [pc, #284]	@ (8003824 <motion_on_move_queue_add+0x170>)
 8003706:	9301      	str	r3, [sp, #4]
 8003708:	4b47      	ldr	r3, [pc, #284]	@ (8003828 <motion_on_move_queue_add+0x174>)
 800370a:	9300      	str	r3, [sp, #0]
 800370c:	460b      	mov	r3, r1
 800370e:	2164      	movs	r1, #100	@ 0x64
 8003710:	2002      	movs	r0, #2
 8003712:	f7fe fc5d 	bl	8001fd0 <log_event_auto>
        return;
 8003716:	e080      	b.n	800381a <motion_on_move_queue_add+0x166>
    }
    frame_id = req.frameId;
 8003718:	7a3b      	ldrb	r3, [r7, #8]
 800371a:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e

    /* Bloqueia enfileiramento em condiÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â§ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â£o de E-STOP */
    if (!safety_is_safe()) {
 800371e:	f000 fc0d 	bl	8003f3c <safety_is_safe>
 8003722:	4603      	mov	r3, r0
 8003724:	2b00      	cmp	r3, #0
 8003726:	d114      	bne.n	8003752 <motion_on_move_queue_add+0x9e>
        motion_send_queue_add_ack(frame_id, ack_status);
 8003728:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800372c:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8003730:	4611      	mov	r1, r2
 8003732:	4618      	mov	r0, r3
 8003734:	f7ff fb04 	bl	8002d40 <motion_send_queue_add_ack>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_RANGE, "queue_add", "blocked_safety");
 8003738:	4a39      	ldr	r2, [pc, #228]	@ (8003820 <motion_on_move_queue_add+0x16c>)
 800373a:	4b3c      	ldr	r3, [pc, #240]	@ (800382c <motion_on_move_queue_add+0x178>)
 800373c:	9301      	str	r3, [sp, #4]
 800373e:	4b3a      	ldr	r3, [pc, #232]	@ (8003828 <motion_on_move_queue_add+0x174>)
 8003740:	9300      	str	r3, [sp, #0]
 8003742:	4613      	mov	r3, r2
 8003744:	f06f 0203 	mvn.w	r2, #3
 8003748:	2164      	movs	r1, #100	@ 0x64
 800374a:	2002      	movs	r0, #2
 800374c:	f7fe fc40 	bl	8001fd0 <log_event_auto>
        return;
 8003750:	e063      	b.n	800381a <motion_on_move_queue_add+0x166>
    }

    uint32_t primask = motion_lock();
 8003752:	f7fe fe3f 	bl	80023d4 <motion_lock>
 8003756:	63b8      	str	r0, [r7, #56]	@ 0x38
    proto_result_t push_status = motion_queue_push_locked(&req);
 8003758:	f107 0308 	add.w	r3, r7, #8
 800375c:	4618      	mov	r0, r3
 800375e:	f7ff f8a7 	bl	80028b0 <motion_queue_push_locked>
 8003762:	4603      	mov	r3, r0
 8003764:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if (push_status == PROTO_OK) {
 8003768:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800376c:	2b00      	cmp	r3, #0
 800376e:	d12e      	bne.n	80037ce <motion_on_move_queue_add+0x11a>
        ack_status = MOTION_ACK_OK;
 8003770:	2300      	movs	r3, #0
 8003772:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        if (g_status.state == MOTION_IDLE || g_status.state == MOTION_DONE)
 8003776:	4b2e      	ldr	r3, [pc, #184]	@ (8003830 <motion_on_move_queue_add+0x17c>)
 8003778:	781b      	ldrb	r3, [r3, #0]
 800377a:	b2db      	uxtb	r3, r3
 800377c:	2b00      	cmp	r3, #0
 800377e:	d004      	beq.n	800378a <motion_on_move_queue_add+0xd6>
 8003780:	4b2b      	ldr	r3, [pc, #172]	@ (8003830 <motion_on_move_queue_add+0x17c>)
 8003782:	781b      	ldrb	r3, [r3, #0]
 8003784:	b2db      	uxtb	r3, r3
 8003786:	2b05      	cmp	r3, #5
 8003788:	d102      	bne.n	8003790 <motion_on_move_queue_add+0xdc>
            g_status.state = MOTION_QUEUED;
 800378a:	4b29      	ldr	r3, [pc, #164]	@ (8003830 <motion_on_move_queue_add+0x17c>)
 800378c:	2201      	movs	r2, #1
 800378e:	701a      	strb	r2, [r3, #0]
        motion_refresh_status_locked();
 8003790:	f7fe fedc 	bl	800254c <motion_refresh_status_locked>
#if MOTION_DEBUG_FLOW
        printf("[FLOW queue_add ok id=%u dir=0x%02X V=(%u,%u,%u) S=(%lu,%lu,%lu) depth=%u]\r\n",
 8003794:	f897 003e 	ldrb.w	r0, [r7, #62]	@ 0x3e
               (unsigned)frame_id,
               (unsigned)req.dirMask,
 8003798:	7a7b      	ldrb	r3, [r7, #9]
        printf("[FLOW queue_add ok id=%u dir=0x%02X V=(%u,%u,%u) S=(%lu,%lu,%lu) depth=%u]\r\n",
 800379a:	469c      	mov	ip, r3
               (unsigned)req.vx, (unsigned)req.vy, (unsigned)req.vz,
 800379c:	897b      	ldrh	r3, [r7, #10]
        printf("[FLOW queue_add ok id=%u dir=0x%02X V=(%u,%u,%u) S=(%lu,%lu,%lu) depth=%u]\r\n",
 800379e:	469e      	mov	lr, r3
               (unsigned)req.vx, (unsigned)req.vy, (unsigned)req.vz,
 80037a0:	8a3b      	ldrh	r3, [r7, #16]
        printf("[FLOW queue_add ok id=%u dir=0x%02X V=(%u,%u,%u) S=(%lu,%lu,%lu) depth=%u]\r\n",
 80037a2:	461d      	mov	r5, r3
               (unsigned)req.vx, (unsigned)req.vy, (unsigned)req.vz,
 80037a4:	8b3b      	ldrh	r3, [r7, #24]
        printf("[FLOW queue_add ok id=%u dir=0x%02X V=(%u,%u,%u) S=(%lu,%lu,%lu) depth=%u]\r\n",
 80037a6:	461e      	mov	r6, r3
               (unsigned long)req.sx, (unsigned long)req.sy, (unsigned long)req.sz,
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	697a      	ldr	r2, [r7, #20]
 80037ac:	69f9      	ldr	r1, [r7, #28]
               (unsigned)g_status.queue_depth);
 80037ae:	4c20      	ldr	r4, [pc, #128]	@ (8003830 <motion_on_move_queue_add+0x17c>)
 80037b0:	7864      	ldrb	r4, [r4, #1]
 80037b2:	b2e4      	uxtb	r4, r4
        printf("[FLOW queue_add ok id=%u dir=0x%02X V=(%u,%u,%u) S=(%lu,%lu,%lu) depth=%u]\r\n",
 80037b4:	9405      	str	r4, [sp, #20]
 80037b6:	9104      	str	r1, [sp, #16]
 80037b8:	9203      	str	r2, [sp, #12]
 80037ba:	9302      	str	r3, [sp, #8]
 80037bc:	9601      	str	r6, [sp, #4]
 80037be:	9500      	str	r5, [sp, #0]
 80037c0:	4673      	mov	r3, lr
 80037c2:	4662      	mov	r2, ip
 80037c4:	4601      	mov	r1, r0
 80037c6:	481b      	ldr	r0, [pc, #108]	@ (8003834 <motion_on_move_queue_add+0x180>)
 80037c8:	f00a fc82 	bl	800e0d0 <iprintf>
 80037cc:	e002      	b.n	80037d4 <motion_on_move_queue_add+0x120>
#endif
    } else {
        ack_status = MOTION_ACK_QUEUE_FULL;
 80037ce:	2302      	movs	r3, #2
 80037d0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    }
    motion_unlock(primask);
 80037d4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80037d6:	f7fe fe0e 	bl	80023f6 <motion_unlock>

    motion_send_queue_add_ack(frame_id, ack_status);
 80037da:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 80037de:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80037e2:	4611      	mov	r1, r2
 80037e4:	4618      	mov	r0, r3
 80037e6:	f7ff faab 	bl	8002d40 <motion_send_queue_add_ack>
    LOGA_THIS(LOG_STATE_RECEIVED, ack_status, "queue_add",
 80037ea:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 80037ee:	480c      	ldr	r0, [pc, #48]	@ (8003820 <motion_on_move_queue_add+0x16c>)
 80037f0:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80037f4:	7a79      	ldrb	r1, [r7, #9]
 80037f6:	460c      	mov	r4, r1
 80037f8:	490d      	ldr	r1, [pc, #52]	@ (8003830 <motion_on_move_queue_add+0x17c>)
 80037fa:	7849      	ldrb	r1, [r1, #1]
 80037fc:	b2c9      	uxtb	r1, r1
 80037fe:	9104      	str	r1, [sp, #16]
 8003800:	9403      	str	r4, [sp, #12]
 8003802:	9302      	str	r3, [sp, #8]
 8003804:	4b0c      	ldr	r3, [pc, #48]	@ (8003838 <motion_on_move_queue_add+0x184>)
 8003806:	9301      	str	r3, [sp, #4]
 8003808:	4b07      	ldr	r3, [pc, #28]	@ (8003828 <motion_on_move_queue_add+0x174>)
 800380a:	9300      	str	r3, [sp, #0]
 800380c:	4603      	mov	r3, r0
 800380e:	2101      	movs	r1, #1
 8003810:	2002      	movs	r0, #2
 8003812:	f7fe fbdd 	bl	8001fd0 <log_event_auto>
 8003816:	e000      	b.n	800381a <motion_on_move_queue_add+0x166>
    if (!frame) return;
 8003818:	bf00      	nop
              "frame=%u dirMask=0x%02X queue=%u",
              (unsigned)frame_id, (unsigned)req.dirMask, (unsigned)g_status.queue_depth);
}
 800381a:	3744      	adds	r7, #68	@ 0x44
 800381c:	46bd      	mov	sp, r7
 800381e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003820:	0800f464 	.word	0x0800f464
 8003824:	0800f684 	.word	0x0800f684
 8003828:	0800f690 	.word	0x0800f690
 800382c:	0800f69c 	.word	0x0800f69c
 8003830:	200000c4 	.word	0x200000c4
 8003834:	0800f6ac 	.word	0x0800f6ac
 8003838:	0800f6fc 	.word	0x0800f6fc

0800383c <motion_on_move_queue_status>:

void motion_on_move_queue_status(const uint8_t *frame, uint32_t len) {
 800383c:	b5b0      	push	{r4, r5, r7, lr}
 800383e:	b08c      	sub	sp, #48	@ 0x30
 8003840:	af08      	add	r7, sp, #32
 8003842:	6078      	str	r0, [r7, #4]
 8003844:	6039      	str	r1, [r7, #0]
    move_queue_status_req_t req;
    if (move_queue_status_req_decoder(frame, len, &req) != PROTO_OK) {
 8003846:	f107 0308 	add.w	r3, r7, #8
 800384a:	461a      	mov	r2, r3
 800384c:	6839      	ldr	r1, [r7, #0]
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f7fd f93c 	bl	8000acc <move_queue_status_req_decoder>
 8003854:	4603      	mov	r3, r0
 8003856:	2b00      	cmp	r3, #0
 8003858:	d00c      	beq.n	8003874 <motion_on_move_queue_status+0x38>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_FRAME, "queue_status", "decode_fail");
 800385a:	4a1f      	ldr	r2, [pc, #124]	@ (80038d8 <motion_on_move_queue_status+0x9c>)
 800385c:	4b1f      	ldr	r3, [pc, #124]	@ (80038dc <motion_on_move_queue_status+0xa0>)
 800385e:	9301      	str	r3, [sp, #4]
 8003860:	4b1f      	ldr	r3, [pc, #124]	@ (80038e0 <motion_on_move_queue_status+0xa4>)
 8003862:	9300      	str	r3, [sp, #0]
 8003864:	4613      	mov	r3, r2
 8003866:	f06f 0201 	mvn.w	r2, #1
 800386a:	2164      	movs	r1, #100	@ 0x64
 800386c:	2002      	movs	r0, #2
 800386e:	f7fe fbaf 	bl	8001fd0 <log_event_auto>
 8003872:	e02e      	b.n	80038d2 <motion_on_move_queue_status+0x96>
        return;
    }
    uint32_t primask = motion_lock();
 8003874:	f7fe fdae 	bl	80023d4 <motion_lock>
 8003878:	60f8      	str	r0, [r7, #12]
    motion_refresh_status_locked();
 800387a:	f7fe fe67 	bl	800254c <motion_refresh_status_locked>
    motion_unlock(primask);
 800387e:	68f8      	ldr	r0, [r7, #12]
 8003880:	f7fe fdb9 	bl	80023f6 <motion_unlock>

    motion_send_queue_status_response(req.frameId);
 8003884:	7a3b      	ldrb	r3, [r7, #8]
 8003886:	4618      	mov	r0, r3
 8003888:	f7ff fa9e 	bl	8002dc8 <motion_send_queue_status_response>
    LOGA_THIS(LOG_STATE_RECEIVED, PROTO_OK, "queue_status",
 800388c:	4a12      	ldr	r2, [pc, #72]	@ (80038d8 <motion_on_move_queue_status+0x9c>)
 800388e:	4b15      	ldr	r3, [pc, #84]	@ (80038e4 <motion_on_move_queue_status+0xa8>)
 8003890:	781b      	ldrb	r3, [r3, #0]
 8003892:	b2db      	uxtb	r3, r3
 8003894:	4619      	mov	r1, r3
 8003896:	4b13      	ldr	r3, [pc, #76]	@ (80038e4 <motion_on_move_queue_status+0xa8>)
 8003898:	785b      	ldrb	r3, [r3, #1]
 800389a:	b2db      	uxtb	r3, r3
 800389c:	4618      	mov	r0, r3
 800389e:	4b11      	ldr	r3, [pc, #68]	@ (80038e4 <motion_on_move_queue_status+0xa8>)
 80038a0:	789b      	ldrb	r3, [r3, #2]
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	461c      	mov	r4, r3
 80038a6:	4b0f      	ldr	r3, [pc, #60]	@ (80038e4 <motion_on_move_queue_status+0xa8>)
 80038a8:	78db      	ldrb	r3, [r3, #3]
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	461d      	mov	r5, r3
 80038ae:	4b0d      	ldr	r3, [pc, #52]	@ (80038e4 <motion_on_move_queue_status+0xa8>)
 80038b0:	791b      	ldrb	r3, [r3, #4]
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	9306      	str	r3, [sp, #24]
 80038b6:	9505      	str	r5, [sp, #20]
 80038b8:	9404      	str	r4, [sp, #16]
 80038ba:	9003      	str	r0, [sp, #12]
 80038bc:	9102      	str	r1, [sp, #8]
 80038be:	4b0a      	ldr	r3, [pc, #40]	@ (80038e8 <motion_on_move_queue_status+0xac>)
 80038c0:	9301      	str	r3, [sp, #4]
 80038c2:	4b07      	ldr	r3, [pc, #28]	@ (80038e0 <motion_on_move_queue_status+0xa4>)
 80038c4:	9300      	str	r3, [sp, #0]
 80038c6:	4613      	mov	r3, r2
 80038c8:	2200      	movs	r2, #0
 80038ca:	2101      	movs	r1, #1
 80038cc:	2002      	movs	r0, #2
 80038ce:	f7fe fb7f 	bl	8001fd0 <log_event_auto>
              "state=%u depth=%u pct=(%u,%u,%u)",
              (unsigned)g_status.state, (unsigned)g_status.queue_depth,
              (unsigned)g_status.pctX, (unsigned)g_status.pctY, (unsigned)g_status.pctZ);
}
 80038d2:	3710      	adds	r7, #16
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bdb0      	pop	{r4, r5, r7, pc}
 80038d8:	0800f464 	.word	0x0800f464
 80038dc:	0800f684 	.word	0x0800f684
 80038e0:	0800f720 	.word	0x0800f720
 80038e4:	200000c4 	.word	0x200000c4
 80038e8:	0800f730 	.word	0x0800f730

080038ec <motion_on_start_move>:

void motion_on_start_move(const uint8_t *frame, uint32_t len) {
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b08a      	sub	sp, #40	@ 0x28
 80038f0:	af02      	add	r7, sp, #8
 80038f2:	6078      	str	r0, [r7, #4]
 80038f4:	6039      	str	r1, [r7, #0]
    start_move_req_t req;
    if (start_move_req_decoder(frame, len, &req) != PROTO_OK) {
 80038f6:	f107 030c 	add.w	r3, r7, #12
 80038fa:	461a      	mov	r2, r3
 80038fc:	6839      	ldr	r1, [r7, #0]
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f7fd f959 	bl	8000bb6 <start_move_req_decoder>
 8003904:	4603      	mov	r3, r0
 8003906:	2b00      	cmp	r3, #0
 8003908:	d00c      	beq.n	8003924 <motion_on_start_move+0x38>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_FRAME, "start_move", "decode_fail");
 800390a:	4a4b      	ldr	r2, [pc, #300]	@ (8003a38 <motion_on_start_move+0x14c>)
 800390c:	4b4b      	ldr	r3, [pc, #300]	@ (8003a3c <motion_on_start_move+0x150>)
 800390e:	9301      	str	r3, [sp, #4]
 8003910:	4b4b      	ldr	r3, [pc, #300]	@ (8003a40 <motion_on_start_move+0x154>)
 8003912:	9300      	str	r3, [sp, #0]
 8003914:	4613      	mov	r3, r2
 8003916:	f06f 0201 	mvn.w	r2, #1
 800391a:	2164      	movs	r1, #100	@ 0x64
 800391c:	2002      	movs	r0, #2
 800391e:	f7fe fb57 	bl	8001fd0 <log_event_auto>
 8003922:	e085      	b.n	8003a30 <motion_on_start_move+0x144>
        return;
    }
    uint8_t started = 0u;
 8003924:	2300      	movs	r3, #0
 8003926:	77fb      	strb	r3, [r7, #31]
    uint32_t primask = motion_lock();
 8003928:	f7fe fd54 	bl	80023d4 <motion_lock>
 800392c:	61b8      	str	r0, [r7, #24]

#if MOTION_DEBUG_FLOW
    {
        uint8_t depth = (uint8_t)(g_queue_count + (g_has_active_segment ? 1u : 0u));
 800392e:	4b45      	ldr	r3, [pc, #276]	@ (8003a44 <motion_on_start_move+0x158>)
 8003930:	781b      	ldrb	r3, [r3, #0]
 8003932:	b2db      	uxtb	r3, r3
 8003934:	2b00      	cmp	r3, #0
 8003936:	d001      	beq.n	800393c <motion_on_start_move+0x50>
 8003938:	2201      	movs	r2, #1
 800393a:	e000      	b.n	800393e <motion_on_start_move+0x52>
 800393c:	2200      	movs	r2, #0
 800393e:	4b42      	ldr	r3, [pc, #264]	@ (8003a48 <motion_on_start_move+0x15c>)
 8003940:	781b      	ldrb	r3, [r3, #0]
 8003942:	4413      	add	r3, r2
 8003944:	75fb      	strb	r3, [r7, #23]
        printf("[FLOW start_move request depth=%u active=%u ids=(",
 8003946:	7dfb      	ldrb	r3, [r7, #23]
 8003948:	4a40      	ldr	r2, [pc, #256]	@ (8003a4c <motion_on_start_move+0x160>)
 800394a:	7812      	ldrb	r2, [r2, #0]
 800394c:	4619      	mov	r1, r3
 800394e:	4840      	ldr	r0, [pc, #256]	@ (8003a50 <motion_on_start_move+0x164>)
 8003950:	f00a fbbe 	bl	800e0d0 <iprintf>
               (unsigned)depth, (unsigned)g_active_frame_id);
        for (uint8_t i = 0; i < g_queue_count; ++i) {
 8003954:	2300      	movs	r3, #0
 8003956:	77bb      	strb	r3, [r7, #30]
 8003958:	e01c      	b.n	8003994 <motion_on_start_move+0xa8>
            uint8_t idxq = (uint8_t)((g_queue_head + i) % MOTION_QUEUE_CAPACITY);
 800395a:	4b3e      	ldr	r3, [pc, #248]	@ (8003a54 <motion_on_start_move+0x168>)
 800395c:	781a      	ldrb	r2, [r3, #0]
 800395e:	7fbb      	ldrb	r3, [r7, #30]
 8003960:	4413      	add	r3, r2
 8003962:	b2db      	uxtb	r3, r3
 8003964:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003968:	75bb      	strb	r3, [r7, #22]
            unsigned id = (unsigned)g_queue[idxq].req.frameId;
 800396a:	7dbb      	ldrb	r3, [r7, #22]
 800396c:	4a3a      	ldr	r2, [pc, #232]	@ (8003a58 <motion_on_start_move+0x16c>)
 800396e:	212c      	movs	r1, #44	@ 0x2c
 8003970:	fb01 f303 	mul.w	r3, r1, r3
 8003974:	4413      	add	r3, r2
 8003976:	781b      	ldrb	r3, [r3, #0]
 8003978:	613b      	str	r3, [r7, #16]
            printf(i ? ",%u" : "%u", id);
 800397a:	7fbb      	ldrb	r3, [r7, #30]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d001      	beq.n	8003984 <motion_on_start_move+0x98>
 8003980:	4b36      	ldr	r3, [pc, #216]	@ (8003a5c <motion_on_start_move+0x170>)
 8003982:	e000      	b.n	8003986 <motion_on_start_move+0x9a>
 8003984:	4b36      	ldr	r3, [pc, #216]	@ (8003a60 <motion_on_start_move+0x174>)
 8003986:	6939      	ldr	r1, [r7, #16]
 8003988:	4618      	mov	r0, r3
 800398a:	f00a fba1 	bl	800e0d0 <iprintf>
        for (uint8_t i = 0; i < g_queue_count; ++i) {
 800398e:	7fbb      	ldrb	r3, [r7, #30]
 8003990:	3301      	adds	r3, #1
 8003992:	77bb      	strb	r3, [r7, #30]
 8003994:	4b2c      	ldr	r3, [pc, #176]	@ (8003a48 <motion_on_start_move+0x15c>)
 8003996:	781b      	ldrb	r3, [r3, #0]
 8003998:	7fba      	ldrb	r2, [r7, #30]
 800399a:	429a      	cmp	r2, r3
 800399c:	d3dd      	bcc.n	800395a <motion_on_start_move+0x6e>
        }
        printf(") ]\r\n");
 800399e:	4831      	ldr	r0, [pc, #196]	@ (8003a64 <motion_on_start_move+0x178>)
 80039a0:	f00a fbfe 	bl	800e1a0 <puts>
    }
#endif

    if (!safety_is_safe()) {
 80039a4:	f000 faca 	bl	8003f3c <safety_is_safe>
 80039a8:	4603      	mov	r3, r0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d102      	bne.n	80039b4 <motion_on_start_move+0xc8>
        started = 0u;
 80039ae:	2300      	movs	r3, #0
 80039b0:	77fb      	strb	r3, [r7, #31]
 80039b2:	e014      	b.n	80039de <motion_on_start_move+0xf2>
    } else if (!g_has_active_segment) {
 80039b4:	4b23      	ldr	r3, [pc, #140]	@ (8003a44 <motion_on_start_move+0x158>)
 80039b6:	781b      	ldrb	r3, [r3, #0]
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d10a      	bne.n	80039d4 <motion_on_start_move+0xe8>
        if (motion_try_start_next_locked()) {
 80039be:	f7ff f8f3 	bl	8002ba8 <motion_try_start_next_locked>
 80039c2:	4603      	mov	r3, r0
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d00a      	beq.n	80039de <motion_on_start_move+0xf2>
            g_status.state = MOTION_RUNNING;
 80039c8:	4b27      	ldr	r3, [pc, #156]	@ (8003a68 <motion_on_start_move+0x17c>)
 80039ca:	2202      	movs	r2, #2
 80039cc:	701a      	strb	r2, [r3, #0]
            started = 1u;
 80039ce:	2301      	movs	r3, #1
 80039d0:	77fb      	strb	r3, [r7, #31]
 80039d2:	e004      	b.n	80039de <motion_on_start_move+0xf2>
        }
    } else {
        g_status.state = MOTION_RUNNING;
 80039d4:	4b24      	ldr	r3, [pc, #144]	@ (8003a68 <motion_on_start_move+0x17c>)
 80039d6:	2202      	movs	r2, #2
 80039d8:	701a      	strb	r2, [r3, #0]
        started = 1u;
 80039da:	2301      	movs	r3, #1
 80039dc:	77fb      	strb	r3, [r7, #31]
    }

    motion_refresh_status_locked();
 80039de:	f7fe fdb5 	bl	800254c <motion_refresh_status_locked>
    motion_unlock(primask);
 80039e2:	69b8      	ldr	r0, [r7, #24]
 80039e4:	f7fe fd07 	bl	80023f6 <motion_unlock>

    /* Guarda de robustez: garante que os timers base estÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â£o habilitados
       mesmo apÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â³s um possÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â­vel E-STOP anterior (que os tenha parado). */
    (void)HAL_TIM_Base_Start_IT(&htim6);
 80039e8:	4820      	ldr	r0, [pc, #128]	@ (8003a6c <motion_on_start_move+0x180>)
 80039ea:	f006 fbaf 	bl	800a14c <HAL_TIM_Base_Start_IT>
    (void)HAL_TIM_Base_Start_IT(&htim7);
 80039ee:	4820      	ldr	r0, [pc, #128]	@ (8003a70 <motion_on_start_move+0x184>)
 80039f0:	f006 fbac 	bl	800a14c <HAL_TIM_Base_Start_IT>

    motion_send_start_response(req.frameId);
 80039f4:	7b3b      	ldrb	r3, [r7, #12]
 80039f6:	4618      	mov	r0, r3
 80039f8:	f7ff fa46 	bl	8002e88 <motion_send_start_response>
    LOGA_THIS(LOG_STATE_APPLIED, PROTO_OK, "start_move", started ? "running" : "ignored");
 80039fc:	4a0e      	ldr	r2, [pc, #56]	@ (8003a38 <motion_on_start_move+0x14c>)
 80039fe:	7ffb      	ldrb	r3, [r7, #31]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d001      	beq.n	8003a08 <motion_on_start_move+0x11c>
 8003a04:	4b1b      	ldr	r3, [pc, #108]	@ (8003a74 <motion_on_start_move+0x188>)
 8003a06:	e000      	b.n	8003a0a <motion_on_start_move+0x11e>
 8003a08:	4b1b      	ldr	r3, [pc, #108]	@ (8003a78 <motion_on_start_move+0x18c>)
 8003a0a:	9301      	str	r3, [sp, #4]
 8003a0c:	4b0c      	ldr	r3, [pc, #48]	@ (8003a40 <motion_on_start_move+0x154>)
 8003a0e:	9300      	str	r3, [sp, #0]
 8003a10:	4613      	mov	r3, r2
 8003a12:	2200      	movs	r2, #0
 8003a14:	2102      	movs	r1, #2
 8003a16:	2002      	movs	r0, #2
 8003a18:	f7fe fada 	bl	8001fd0 <log_event_auto>
#if MOTION_DEBUG_FLOW
    printf("[FLOW start_move %s]\r\n", started ? "running" : "ignored");
 8003a1c:	7ffb      	ldrb	r3, [r7, #31]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d001      	beq.n	8003a26 <motion_on_start_move+0x13a>
 8003a22:	4b14      	ldr	r3, [pc, #80]	@ (8003a74 <motion_on_start_move+0x188>)
 8003a24:	e000      	b.n	8003a28 <motion_on_start_move+0x13c>
 8003a26:	4b14      	ldr	r3, [pc, #80]	@ (8003a78 <motion_on_start_move+0x18c>)
 8003a28:	4619      	mov	r1, r3
 8003a2a:	4814      	ldr	r0, [pc, #80]	@ (8003a7c <motion_on_start_move+0x190>)
 8003a2c:	f00a fb50 	bl	800e0d0 <iprintf>
#endif
}
 8003a30:	3720      	adds	r7, #32
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	0800f464 	.word	0x0800f464
 8003a3c:	0800f684 	.word	0x0800f684
 8003a40:	0800f754 	.word	0x0800f754
 8003a44:	20000174 	.word	0x20000174
 8003a48:	20000c7a 	.word	0x20000c7a
 8003a4c:	20000c7b 	.word	0x20000c7b
 8003a50:	0800f760 	.word	0x0800f760
 8003a54:	20000c78 	.word	0x20000c78
 8003a58:	20000178 	.word	0x20000178
 8003a5c:	0800f794 	.word	0x0800f794
 8003a60:	0800f798 	.word	0x0800f798
 8003a64:	0800f79c 	.word	0x0800f79c
 8003a68:	200000c4 	.word	0x200000c4
 8003a6c:	20000f98 	.word	0x20000f98
 8003a70:	20000fe4 	.word	0x20000fe4
 8003a74:	0800f7a4 	.word	0x0800f7a4
 8003a78:	0800f7ac 	.word	0x0800f7ac
 8003a7c:	0800f7b4 	.word	0x0800f7b4

08003a80 <motion_on_move_end>:

void motion_on_move_end(const uint8_t *frame, uint32_t len) {
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b088      	sub	sp, #32
 8003a84:	af04      	add	r7, sp, #16
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	6039      	str	r1, [r7, #0]
    move_end_req_t req;
    if (move_end_req_decoder(frame, len, &req) != PROTO_OK) {
 8003a8a:	f107 0308 	add.w	r3, r7, #8
 8003a8e:	461a      	mov	r2, r3
 8003a90:	6839      	ldr	r1, [r7, #0]
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f7fc fe76 	bl	8000784 <move_end_req_decoder>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d00c      	beq.n	8003ab8 <motion_on_move_end+0x38>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_FRAME, "move_end", "decode_fail");
 8003a9e:	4a1f      	ldr	r2, [pc, #124]	@ (8003b1c <motion_on_move_end+0x9c>)
 8003aa0:	4b1f      	ldr	r3, [pc, #124]	@ (8003b20 <motion_on_move_end+0xa0>)
 8003aa2:	9301      	str	r3, [sp, #4]
 8003aa4:	4b1f      	ldr	r3, [pc, #124]	@ (8003b24 <motion_on_move_end+0xa4>)
 8003aa6:	9300      	str	r3, [sp, #0]
 8003aa8:	4613      	mov	r3, r2
 8003aaa:	f06f 0201 	mvn.w	r2, #1
 8003aae:	2164      	movs	r1, #100	@ 0x64
 8003ab0:	2002      	movs	r0, #2
 8003ab2:	f7fe fa8d 	bl	8001fd0 <log_event_auto>
 8003ab6:	e02d      	b.n	8003b14 <motion_on_move_end+0x94>
        return;
    }
    uint32_t primask = motion_lock();
 8003ab8:	f7fe fc8c 	bl	80023d4 <motion_lock>
 8003abc:	60f8      	str	r0, [r7, #12]
    motion_stop_all_axes_locked();
 8003abe:	f7fe fe8b 	bl	80027d8 <motion_stop_all_axes_locked>
    motion_queue_clear_locked();
 8003ac2:	f7fe fedf 	bl	8002884 <motion_queue_clear_locked>
    g_has_active_segment = 0u;
 8003ac6:	4b18      	ldr	r3, [pc, #96]	@ (8003b28 <motion_on_move_end+0xa8>)
 8003ac8:	2200      	movs	r2, #0
 8003aca:	701a      	strb	r2, [r3, #0]
    g_status.state = MOTION_STOPPING;
 8003acc:	4b17      	ldr	r3, [pc, #92]	@ (8003b2c <motion_on_move_end+0xac>)
 8003ace:	2204      	movs	r2, #4
 8003ad0:	701a      	strb	r2, [r3, #0]
    motion_refresh_status_locked();
 8003ad2:	f7fe fd3b 	bl	800254c <motion_refresh_status_locked>
    motion_unlock(primask);
 8003ad6:	68f8      	ldr	r0, [r7, #12]
 8003ad8:	f7fe fc8d 	bl	80023f6 <motion_unlock>

    motion_send_move_end_response(req.frameId);
 8003adc:	7a3b      	ldrb	r3, [r7, #8]
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f7ff fa04 	bl	8002eec <motion_send_move_end_response>

    primask = motion_lock();
 8003ae4:	f7fe fc76 	bl	80023d4 <motion_lock>
 8003ae8:	60f8      	str	r0, [r7, #12]
    g_status.state = MOTION_IDLE;
 8003aea:	4b10      	ldr	r3, [pc, #64]	@ (8003b2c <motion_on_move_end+0xac>)
 8003aec:	2200      	movs	r2, #0
 8003aee:	701a      	strb	r2, [r3, #0]
    motion_refresh_status_locked();
 8003af0:	f7fe fd2c 	bl	800254c <motion_refresh_status_locked>
    motion_unlock(primask);
 8003af4:	68f8      	ldr	r0, [r7, #12]
 8003af6:	f7fe fc7e 	bl	80023f6 <motion_unlock>

    LOGT_THIS(LOG_STATE_APPLIED, PROTO_OK, "move_end", "stopped");
 8003afa:	4a08      	ldr	r2, [pc, #32]	@ (8003b1c <motion_on_move_end+0x9c>)
 8003afc:	4b0c      	ldr	r3, [pc, #48]	@ (8003b30 <motion_on_move_end+0xb0>)
 8003afe:	9302      	str	r3, [sp, #8]
 8003b00:	4b0c      	ldr	r3, [pc, #48]	@ (8003b34 <motion_on_move_end+0xb4>)
 8003b02:	9301      	str	r3, [sp, #4]
 8003b04:	4b07      	ldr	r3, [pc, #28]	@ (8003b24 <motion_on_move_end+0xa4>)
 8003b06:	9300      	str	r3, [sp, #0]
 8003b08:	4613      	mov	r3, r2
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	2102      	movs	r1, #2
 8003b0e:	2002      	movs	r0, #2
 8003b10:	f7fe fa5e 	bl	8001fd0 <log_event_auto>
}
 8003b14:	3710      	adds	r7, #16
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	0800f464 	.word	0x0800f464
 8003b20:	0800f684 	.word	0x0800f684
 8003b24:	0800f58c 	.word	0x0800f58c
 8003b28:	20000174 	.word	0x20000174
 8003b2c:	200000c4 	.word	0x200000c4
 8003b30:	0800f7cc 	.word	0x0800f7cc
 8003b34:	0800f5a8 	.word	0x0800f5a8

08003b38 <motion_demo_set_continuous>:
    motion_unlock(primask);
}

/* Liga/desliga gerador contÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â­nuo de passos (ignora a fila) */
void motion_demo_set_continuous(uint8_t enable)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b086      	sub	sp, #24
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	4603      	mov	r3, r0
 8003b40:	71fb      	strb	r3, [r7, #7]
    uint32_t primask = motion_lock();
 8003b42:	f7fe fc47 	bl	80023d4 <motion_lock>
 8003b46:	6138      	str	r0, [r7, #16]
    g_demo_continuous = (enable ? 1u : 0u);
 8003b48:	79fb      	ldrb	r3, [r7, #7]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d001      	beq.n	8003b52 <motion_demo_set_continuous+0x1a>
 8003b4e:	2201      	movs	r2, #1
 8003b50:	e000      	b.n	8003b54 <motion_demo_set_continuous+0x1c>
 8003b52:	2200      	movs	r2, #0
 8003b54:	4b42      	ldr	r3, [pc, #264]	@ (8003c60 <motion_demo_set_continuous+0x128>)
 8003b56:	701a      	strb	r2, [r3, #0]

    if (g_demo_continuous) {
 8003b58:	4b41      	ldr	r3, [pc, #260]	@ (8003c60 <motion_demo_set_continuous+0x128>)
 8003b5a:	781b      	ldrb	r3, [r3, #0]
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d06a      	beq.n	8003c38 <motion_demo_set_continuous+0x100>
        g_has_active_segment = 1u;
 8003b62:	4b40      	ldr	r3, [pc, #256]	@ (8003c64 <motion_demo_set_continuous+0x12c>)
 8003b64:	2201      	movs	r2, #1
 8003b66:	701a      	strb	r2, [r3, #0]

        for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8003b68:	2300      	movs	r3, #0
 8003b6a:	75fb      	strb	r3, [r7, #23]
 8003b6c:	e05b      	b.n	8003c26 <motion_demo_set_continuous+0xee>
            motion_axis_state_t *ax = &g_axis_state[axis];
 8003b6e:	7dfa      	ldrb	r2, [r7, #23]
 8003b70:	4613      	mov	r3, r2
 8003b72:	00db      	lsls	r3, r3, #3
 8003b74:	1a9b      	subs	r3, r3, r2
 8003b76:	00db      	lsls	r3, r3, #3
 8003b78:	4a3b      	ldr	r2, [pc, #236]	@ (8003c68 <motion_demo_set_continuous+0x130>)
 8003b7a:	4413      	add	r3, r2
 8003b7c:	60fb      	str	r3, [r7, #12]

            ax->total_steps       = 0xFFFFFFFFu; /* efetivamente contÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â­nuo */
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	f04f 32ff 	mov.w	r2, #4294967295
 8003b84:	601a      	str	r2, [r3, #0]
            ax->target_steps      = 0u;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	605a      	str	r2, [r3, #4]
            ax->emitted_steps     = 0u;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	609a      	str	r2, [r3, #8]

            /* tabela em "k steps/s" (~1 kHz) -> converte para steps/s */
            uint16_t vtab         = g_demo_speed_table[g_demo_speed_idx & 0x3u];
 8003b92:	4b36      	ldr	r3, [pc, #216]	@ (8003c6c <motion_demo_set_continuous+0x134>)
 8003b94:	781b      	ldrb	r3, [r3, #0]
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	f003 0303 	and.w	r3, r3, #3
 8003b9c:	4a34      	ldr	r2, [pc, #208]	@ (8003c70 <motion_demo_set_continuous+0x138>)
 8003b9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003ba2:	817b      	strh	r3, [r7, #10]
            ax->velocity_per_tick = vtab;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	897a      	ldrh	r2, [r7, #10]
 8003ba8:	819a      	strh	r2, [r3, #12]
            ax->v_target_sps      = ((uint32_t)vtab) * 1000u;
 8003baa:	897b      	ldrh	r3, [r7, #10]
 8003bac:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003bb0:	fb03 f202 	mul.w	r2, r3, r2
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	621a      	str	r2, [r3, #32]
            ax->v_actual_sps      = 0u;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	625a      	str	r2, [r3, #36]	@ 0x24
            ax->accel_sps2        = DEMO_ACCEL_SPS2;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	4a2c      	ldr	r2, [pc, #176]	@ (8003c74 <motion_demo_set_continuous+0x13c>)
 8003bc2:	629a      	str	r2, [r3, #40]	@ 0x28

            ax->dda_accum_q16     = 0u;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	619a      	str	r2, [r3, #24]
            ax->dda_inc_q16       = 0u;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	61da      	str	r2, [r3, #28]

            ax->step_high         = 0u;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	751a      	strb	r2, [r3, #20]
            ax->step_low          = 0u; /* tLOW inicia zerado; serÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ aplicado nos pulsos subsequentes */
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	755a      	strb	r2, [r3, #21]
            ax->en_settle_ticks   = MOTION_ENABLE_SETTLE_TICKS;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2202      	movs	r2, #2
 8003be0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
            ax->dir_settle_ticks  = MOTION_DIR_SETUP_TICKS;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2201      	movs	r2, #1
 8003be8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            motion_hw_step_low(axis);
 8003bec:	7dfb      	ldrb	r3, [r7, #23]
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f7fe fb88 	bl	8002304 <motion_hw_step_low>
            motion_hw_set_dir(axis, 1u);     /* forward */
 8003bf4:	7dfb      	ldrb	r3, [r7, #23]
 8003bf6:	2101      	movs	r1, #1
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f7fe fadf 	bl	80021bc <motion_hw_set_dir>
            motion_hw_enable(axis, 1u);      /* ativo em baixo no TMC5160 */
 8003bfe:	7dfb      	ldrb	r3, [r7, #23]
 8003c00:	2101      	movs	r1, #1
 8003c02:	4618      	mov	r0, r3
 8003c04:	f7fe fb1a 	bl	800223c <motion_hw_enable>
            g_encoder_origin[axis] = g_encoder_position[axis];
 8003c08:	7dfb      	ldrb	r3, [r7, #23]
 8003c0a:	7df9      	ldrb	r1, [r7, #23]
 8003c0c:	4a1a      	ldr	r2, [pc, #104]	@ (8003c78 <motion_demo_set_continuous+0x140>)
 8003c0e:	00db      	lsls	r3, r3, #3
 8003c10:	4413      	add	r3, r2
 8003c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c16:	4819      	ldr	r0, [pc, #100]	@ (8003c7c <motion_demo_set_continuous+0x144>)
 8003c18:	00c9      	lsls	r1, r1, #3
 8003c1a:	4401      	add	r1, r0
 8003c1c:	e9c1 2300 	strd	r2, r3, [r1]
        for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8003c20:	7dfb      	ldrb	r3, [r7, #23]
 8003c22:	3301      	adds	r3, #1
 8003c24:	75fb      	strb	r3, [r7, #23]
 8003c26:	7dfb      	ldrb	r3, [r7, #23]
 8003c28:	2b02      	cmp	r3, #2
 8003c2a:	d9a0      	bls.n	8003b6e <motion_demo_set_continuous+0x36>
        }
        g_status.state = MOTION_RUNNING;
 8003c2c:	4b14      	ldr	r3, [pc, #80]	@ (8003c80 <motion_demo_set_continuous+0x148>)
 8003c2e:	2202      	movs	r2, #2
 8003c30:	701a      	strb	r2, [r3, #0]
        motion_refresh_status_locked();
 8003c32:	f7fe fc8b 	bl	800254c <motion_refresh_status_locked>
 8003c36:	e00b      	b.n	8003c50 <motion_demo_set_continuous+0x118>
    } else {
        motion_stop_all_axes_locked();
 8003c38:	f7fe fdce 	bl	80027d8 <motion_stop_all_axes_locked>
        motion_queue_clear_locked();
 8003c3c:	f7fe fe22 	bl	8002884 <motion_queue_clear_locked>
        g_has_active_segment = 0u;
 8003c40:	4b08      	ldr	r3, [pc, #32]	@ (8003c64 <motion_demo_set_continuous+0x12c>)
 8003c42:	2200      	movs	r2, #0
 8003c44:	701a      	strb	r2, [r3, #0]
        g_status.state = MOTION_IDLE;
 8003c46:	4b0e      	ldr	r3, [pc, #56]	@ (8003c80 <motion_demo_set_continuous+0x148>)
 8003c48:	2200      	movs	r2, #0
 8003c4a:	701a      	strb	r2, [r3, #0]
        motion_refresh_status_locked();
 8003c4c:	f7fe fc7e 	bl	800254c <motion_refresh_status_locked>
    }
    motion_unlock(primask);
 8003c50:	6938      	ldr	r0, [r7, #16]
 8003c52:	f7fe fbd0 	bl	80023f6 <motion_unlock>
}
 8003c56:	bf00      	nop
 8003c58:	3718      	adds	r7, #24
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	bf00      	nop
 8003c60:	20000ce4 	.word	0x20000ce4
 8003c64:	20000174 	.word	0x20000174
 8003c68:	200000cc 	.word	0x200000cc
 8003c6c:	20000010 	.word	0x20000010
 8003c70:	0800fb50 	.word	0x0800fb50
 8003c74:	00030d40 	.word	0x00030d40
 8003c78:	20000c80 	.word	0x20000c80
 8003c7c:	20000ca8 	.word	0x20000ca8
 8003c80:	200000c4 	.word	0x200000c4

08003c84 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b082      	sub	sp, #8
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
    if (!htim) return;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d00f      	beq.n	8003cb2 <HAL_TIM_PeriodElapsedCallback+0x2e>
    if (htim->Instance == TIM6) {
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a09      	ldr	r2, [pc, #36]	@ (8003cbc <HAL_TIM_PeriodElapsedCallback+0x38>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d102      	bne.n	8003ca2 <HAL_TIM_PeriodElapsedCallback+0x1e>
        motion_on_tim6_tick();
 8003c9c:	f7ff f9fa 	bl	8003094 <motion_on_tim6_tick>
 8003ca0:	e008      	b.n	8003cb4 <HAL_TIM_PeriodElapsedCallback+0x30>
    } else if (htim->Instance == TIM7) {
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a06      	ldr	r2, [pc, #24]	@ (8003cc0 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d103      	bne.n	8003cb4 <HAL_TIM_PeriodElapsedCallback+0x30>
        motion_on_tim7_tick();
 8003cac:	f7ff fbf2 	bl	8003494 <motion_on_tim7_tick>
 8003cb0:	e000      	b.n	8003cb4 <HAL_TIM_PeriodElapsedCallback+0x30>
    if (!htim) return;
 8003cb2:	bf00      	nop
    } else {
        (void)htim;
    }
}
 8003cb4:	3708      	adds	r7, #8
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	40001000 	.word	0x40001000
 8003cc0:	40001400 	.word	0x40001400

08003cc4 <motion_emergency_stop>:


/* ===== API pÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Âºblica auxiliar ===== */
void motion_emergency_stop(void)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b082      	sub	sp, #8
 8003cc8:	af00      	add	r7, sp, #0
    uint32_t primask = motion_lock();
 8003cca:	f7fe fb83 	bl	80023d4 <motion_lock>
 8003cce:	6078      	str	r0, [r7, #4]

    g_demo_continuous = 0u;
 8003cd0:	4b10      	ldr	r3, [pc, #64]	@ (8003d14 <motion_emergency_stop+0x50>)
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	701a      	strb	r2, [r3, #0]
    motion_stop_all_axes_locked();
 8003cd6:	f7fe fd7f 	bl	80027d8 <motion_stop_all_axes_locked>
    motion_queue_clear_locked();
 8003cda:	f7fe fdd3 	bl	8002884 <motion_queue_clear_locked>
    g_has_active_segment = 0u;
 8003cde:	4b0e      	ldr	r3, [pc, #56]	@ (8003d18 <motion_emergency_stop+0x54>)
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	701a      	strb	r2, [r3, #0]

    g_status.state = MOTION_STOPPING;
 8003ce4:	4b0d      	ldr	r3, [pc, #52]	@ (8003d1c <motion_emergency_stop+0x58>)
 8003ce6:	2204      	movs	r2, #4
 8003ce8:	701a      	strb	r2, [r3, #0]
    motion_refresh_status_locked();
 8003cea:	f7fe fc2f 	bl	800254c <motion_refresh_status_locked>
    motion_unlock(primask);
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f7fe fb81 	bl	80023f6 <motion_unlock>

    primask = motion_lock();
 8003cf4:	f7fe fb6e 	bl	80023d4 <motion_lock>
 8003cf8:	6078      	str	r0, [r7, #4]
    g_status.state = MOTION_IDLE;
 8003cfa:	4b08      	ldr	r3, [pc, #32]	@ (8003d1c <motion_emergency_stop+0x58>)
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	701a      	strb	r2, [r3, #0]
    motion_refresh_status_locked();
 8003d00:	f7fe fc24 	bl	800254c <motion_refresh_status_locked>
    motion_unlock(primask);
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	f7fe fb76 	bl	80023f6 <motion_unlock>
}
 8003d0a:	bf00      	nop
 8003d0c:	3708      	adds	r7, #8
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	bf00      	nop
 8003d14:	20000ce4 	.word	0x20000ce4
 8003d18:	20000174 	.word	0x20000174
 8003d1c:	200000c4 	.word	0x200000c4

08003d20 <motion_demo_is_active>:

uint8_t motion_demo_is_active(void)
{
 8003d20:	b480      	push	{r7}
 8003d22:	af00      	add	r7, sp, #0
    return g_demo_continuous ? 1u : 0u;
 8003d24:	4b06      	ldr	r3, [pc, #24]	@ (8003d40 <motion_demo_is_active+0x20>)
 8003d26:	781b      	ldrb	r3, [r3, #0]
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d001      	beq.n	8003d32 <motion_demo_is_active+0x12>
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e000      	b.n	8003d34 <motion_demo_is_active+0x14>
 8003d32:	2300      	movs	r3, #0
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr
 8003d3e:	bf00      	nop
 8003d40:	20000ce4 	.word	0x20000ce4

08003d44 <motion_demo_cycle_speed>:

void motion_demo_cycle_speed(void)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b082      	sub	sp, #8
 8003d48:	af00      	add	r7, sp, #0
    /* AvanÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â§a ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â­ndice (0..3) */
    g_demo_speed_idx = (uint8_t)((g_demo_speed_idx + 1u) & 0x3u);
 8003d4a:	4b21      	ldr	r3, [pc, #132]	@ (8003dd0 <motion_demo_cycle_speed+0x8c>)
 8003d4c:	781b      	ldrb	r3, [r3, #0]
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	3301      	adds	r3, #1
 8003d52:	b2db      	uxtb	r3, r3
 8003d54:	f003 0303 	and.w	r3, r3, #3
 8003d58:	b2da      	uxtb	r2, r3
 8003d5a:	4b1d      	ldr	r3, [pc, #116]	@ (8003dd0 <motion_demo_cycle_speed+0x8c>)
 8003d5c:	701a      	strb	r2, [r3, #0]

    /* Se demo estÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ ativo, atualiza v_target_sps imediatamente (rampa cuida do resto) */
    if (g_demo_continuous) {
 8003d5e:	4b1d      	ldr	r3, [pc, #116]	@ (8003dd4 <motion_demo_cycle_speed+0x90>)
 8003d60:	781b      	ldrb	r3, [r3, #0]
 8003d62:	b2db      	uxtb	r3, r3
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d02f      	beq.n	8003dc8 <motion_demo_cycle_speed+0x84>
        uint16_t vtab = g_demo_speed_table[g_demo_speed_idx & 0x3u];
 8003d68:	4b19      	ldr	r3, [pc, #100]	@ (8003dd0 <motion_demo_cycle_speed+0x8c>)
 8003d6a:	781b      	ldrb	r3, [r3, #0]
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	f003 0303 	and.w	r3, r3, #3
 8003d72:	4a19      	ldr	r2, [pc, #100]	@ (8003dd8 <motion_demo_cycle_speed+0x94>)
 8003d74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003d78:	80bb      	strh	r3, [r7, #4]
        uint32_t primask = motion_lock();
 8003d7a:	f7fe fb2b 	bl	80023d4 <motion_lock>
 8003d7e:	6038      	str	r0, [r7, #0]
        for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8003d80:	2300      	movs	r3, #0
 8003d82:	71fb      	strb	r3, [r7, #7]
 8003d84:	e01a      	b.n	8003dbc <motion_demo_cycle_speed+0x78>
            g_axis_state[axis].velocity_per_tick = vtab;
 8003d86:	79fa      	ldrb	r2, [r7, #7]
 8003d88:	4914      	ldr	r1, [pc, #80]	@ (8003ddc <motion_demo_cycle_speed+0x98>)
 8003d8a:	4613      	mov	r3, r2
 8003d8c:	00db      	lsls	r3, r3, #3
 8003d8e:	1a9b      	subs	r3, r3, r2
 8003d90:	00db      	lsls	r3, r3, #3
 8003d92:	440b      	add	r3, r1
 8003d94:	330c      	adds	r3, #12
 8003d96:	88ba      	ldrh	r2, [r7, #4]
 8003d98:	801a      	strh	r2, [r3, #0]
            g_axis_state[axis].v_target_sps      = ((uint32_t)vtab) * 1000u;
 8003d9a:	88bb      	ldrh	r3, [r7, #4]
 8003d9c:	79fa      	ldrb	r2, [r7, #7]
 8003d9e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003da2:	fb03 f101 	mul.w	r1, r3, r1
 8003da6:	480d      	ldr	r0, [pc, #52]	@ (8003ddc <motion_demo_cycle_speed+0x98>)
 8003da8:	4613      	mov	r3, r2
 8003daa:	00db      	lsls	r3, r3, #3
 8003dac:	1a9b      	subs	r3, r3, r2
 8003dae:	00db      	lsls	r3, r3, #3
 8003db0:	4403      	add	r3, r0
 8003db2:	3320      	adds	r3, #32
 8003db4:	6019      	str	r1, [r3, #0]
        for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8003db6:	79fb      	ldrb	r3, [r7, #7]
 8003db8:	3301      	adds	r3, #1
 8003dba:	71fb      	strb	r3, [r7, #7]
 8003dbc:	79fb      	ldrb	r3, [r7, #7]
 8003dbe:	2b02      	cmp	r3, #2
 8003dc0:	d9e1      	bls.n	8003d86 <motion_demo_cycle_speed+0x42>
            /* dda_inc serÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ recalculado no prÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â³ximo tick do TIM7 conforme v_actual */
        }
        motion_unlock(primask);
 8003dc2:	6838      	ldr	r0, [r7, #0]
 8003dc4:	f7fe fb17 	bl	80023f6 <motion_unlock>
    }
}
 8003dc8:	bf00      	nop
 8003dca:	3708      	adds	r7, #8
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}
 8003dd0:	20000010 	.word	0x20000010
 8003dd4:	20000ce4 	.word	0x20000ce4
 8003dd8:	0800fb50 	.word	0x0800fb50
 8003ddc:	200000cc 	.word	0x200000cc

08003de0 <probe_service_init>:

LOG_SVC_DEFINE(LOG_SVC_PROBE, "probe");

static probe_status_t g_probe;

void probe_service_init(void) {
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b084      	sub	sp, #16
 8003de4:	af04      	add	r7, sp, #16
	g_probe.axis_done_mask = 0;
 8003de6:	4b0e      	ldr	r3, [pc, #56]	@ (8003e20 <probe_service_init+0x40>)
 8003de8:	2200      	movs	r2, #0
 8003dea:	701a      	strb	r2, [r3, #0]
	g_probe.error_flags = 0;
 8003dec:	4b0c      	ldr	r3, [pc, #48]	@ (8003e20 <probe_service_init+0x40>)
 8003dee:	2200      	movs	r2, #0
 8003df0:	705a      	strb	r2, [r3, #1]
	g_probe.latched_pos_x = g_probe.latched_pos_y = g_probe.latched_pos_z = 0;
 8003df2:	2300      	movs	r3, #0
 8003df4:	4a0a      	ldr	r2, [pc, #40]	@ (8003e20 <probe_service_init+0x40>)
 8003df6:	60d3      	str	r3, [r2, #12]
 8003df8:	4a09      	ldr	r2, [pc, #36]	@ (8003e20 <probe_service_init+0x40>)
 8003dfa:	6093      	str	r3, [r2, #8]
 8003dfc:	4a08      	ldr	r2, [pc, #32]	@ (8003e20 <probe_service_init+0x40>)
 8003dfe:	6053      	str	r3, [r2, #4]

	LOGT_THIS(LOG_STATE_START, PROTO_OK, "init", "ok");
 8003e00:	4a08      	ldr	r2, [pc, #32]	@ (8003e24 <probe_service_init+0x44>)
 8003e02:	4b09      	ldr	r3, [pc, #36]	@ (8003e28 <probe_service_init+0x48>)
 8003e04:	9302      	str	r3, [sp, #8]
 8003e06:	4b09      	ldr	r3, [pc, #36]	@ (8003e2c <probe_service_init+0x4c>)
 8003e08:	9301      	str	r3, [sp, #4]
 8003e0a:	4b09      	ldr	r3, [pc, #36]	@ (8003e30 <probe_service_init+0x50>)
 8003e0c:	9300      	str	r3, [sp, #0]
 8003e0e:	4613      	mov	r3, r2
 8003e10:	2200      	movs	r2, #0
 8003e12:	2100      	movs	r1, #0
 8003e14:	2004      	movs	r0, #4
 8003e16:	f7fe f8db 	bl	8001fd0 <log_event_auto>
}
 8003e1a:	bf00      	nop
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}
 8003e20:	20000ce8 	.word	0x20000ce8
 8003e24:	0800f7d4 	.word	0x0800f7d4
 8003e28:	0800f7dc 	.word	0x0800f7dc
 8003e2c:	0800f7e0 	.word	0x0800f7e0
 8003e30:	0800f7e4 	.word	0x0800f7e4

08003e34 <probe_on_move_probe_level>:
const probe_status_t* probe_status_get(void) {
	return &g_probe;
}

void probe_on_move_probe_level(const uint8_t *frame, uint32_t len) {
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b086      	sub	sp, #24
 8003e38:	af04      	add	r7, sp, #16
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	6039      	str	r1, [r7, #0]
	(void) frame;
	(void) len; /* implementar FSM de probe */

	LOGT_THIS(LOG_STATE_RECEIVED, PROTO_OK, "move_probe_level", "not_implemented");
 8003e3e:	4a08      	ldr	r2, [pc, #32]	@ (8003e60 <probe_on_move_probe_level+0x2c>)
 8003e40:	4b08      	ldr	r3, [pc, #32]	@ (8003e64 <probe_on_move_probe_level+0x30>)
 8003e42:	9302      	str	r3, [sp, #8]
 8003e44:	4b08      	ldr	r3, [pc, #32]	@ (8003e68 <probe_on_move_probe_level+0x34>)
 8003e46:	9301      	str	r3, [sp, #4]
 8003e48:	4b08      	ldr	r3, [pc, #32]	@ (8003e6c <probe_on_move_probe_level+0x38>)
 8003e4a:	9300      	str	r3, [sp, #0]
 8003e4c:	4613      	mov	r3, r2
 8003e4e:	2200      	movs	r2, #0
 8003e50:	2101      	movs	r1, #1
 8003e52:	2004      	movs	r0, #4
 8003e54:	f7fe f8bc 	bl	8001fd0 <log_event_auto>
}
 8003e58:	bf00      	nop
 8003e5a:	3708      	adds	r7, #8
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}
 8003e60:	0800f7d4 	.word	0x0800f7d4
 8003e64:	0800f7ec 	.word	0x0800f7ec
 8003e68:	0800f7e0 	.word	0x0800f7e0
 8003e6c:	0800f7fc 	.word	0x0800f7fc

08003e70 <safety_service_init>:

LOG_SVC_DEFINE(LOG_SVC_SAFETY, "safety");

static volatile safety_state_t g_state = SAFETY_NORMAL;

void safety_service_init(void) {
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b084      	sub	sp, #16
 8003e74:	af04      	add	r7, sp, #16
	g_state = SAFETY_NORMAL;
 8003e76:	4b09      	ldr	r3, [pc, #36]	@ (8003e9c <safety_service_init+0x2c>)
 8003e78:	2200      	movs	r2, #0
 8003e7a:	701a      	strb	r2, [r3, #0]

	LOGT_THIS(LOG_STATE_START, PROTO_OK, "init", "normal");
 8003e7c:	4a08      	ldr	r2, [pc, #32]	@ (8003ea0 <safety_service_init+0x30>)
 8003e7e:	4b09      	ldr	r3, [pc, #36]	@ (8003ea4 <safety_service_init+0x34>)
 8003e80:	9302      	str	r3, [sp, #8]
 8003e82:	4b09      	ldr	r3, [pc, #36]	@ (8003ea8 <safety_service_init+0x38>)
 8003e84:	9301      	str	r3, [sp, #4]
 8003e86:	4b09      	ldr	r3, [pc, #36]	@ (8003eac <safety_service_init+0x3c>)
 8003e88:	9300      	str	r3, [sp, #0]
 8003e8a:	4613      	mov	r3, r2
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	2100      	movs	r1, #0
 8003e90:	2005      	movs	r0, #5
 8003e92:	f7fe f89d 	bl	8001fd0 <log_event_auto>
}
 8003e96:	bf00      	nop
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}
 8003e9c:	20000cf8 	.word	0x20000cf8
 8003ea0:	0800f810 	.word	0x0800f810
 8003ea4:	0800f818 	.word	0x0800f818
 8003ea8:	0800f820 	.word	0x0800f820
 8003eac:	0800f824 	.word	0x0800f824

08003eb0 <safety_estop_assert>:
void safety_estop_assert(void) {
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b084      	sub	sp, #16
 8003eb4:	af04      	add	r7, sp, #16
	g_state = SAFETY_ESTOP;
 8003eb6:	4b09      	ldr	r3, [pc, #36]	@ (8003edc <safety_estop_assert+0x2c>)
 8003eb8:	2201      	movs	r2, #1
 8003eba:	701a      	strb	r2, [r3, #0]

	LOGT_THIS(LOG_STATE_ESTOP_ASSERT, PROTO_OK, "estop", "assert");
 8003ebc:	4a08      	ldr	r2, [pc, #32]	@ (8003ee0 <safety_estop_assert+0x30>)
 8003ebe:	4b09      	ldr	r3, [pc, #36]	@ (8003ee4 <safety_estop_assert+0x34>)
 8003ec0:	9302      	str	r3, [sp, #8]
 8003ec2:	4b09      	ldr	r3, [pc, #36]	@ (8003ee8 <safety_estop_assert+0x38>)
 8003ec4:	9301      	str	r3, [sp, #4]
 8003ec6:	4b09      	ldr	r3, [pc, #36]	@ (8003eec <safety_estop_assert+0x3c>)
 8003ec8:	9300      	str	r3, [sp, #0]
 8003eca:	4613      	mov	r3, r2
 8003ecc:	2200      	movs	r2, #0
 8003ece:	210a      	movs	r1, #10
 8003ed0:	2005      	movs	r0, #5
 8003ed2:	f7fe f87d 	bl	8001fd0 <log_event_auto>
}
 8003ed6:	bf00      	nop
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}
 8003edc:	20000cf8 	.word	0x20000cf8
 8003ee0:	0800f810 	.word	0x0800f810
 8003ee4:	0800f82c 	.word	0x0800f82c
 8003ee8:	0800f820 	.word	0x0800f820
 8003eec:	0800f834 	.word	0x0800f834

08003ef0 <safety_estop_release>:
void safety_estop_release(void) {
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b084      	sub	sp, #16
 8003ef4:	af04      	add	r7, sp, #16
	if (g_state == SAFETY_ESTOP)
 8003ef6:	4b0c      	ldr	r3, [pc, #48]	@ (8003f28 <safety_estop_release+0x38>)
 8003ef8:	781b      	ldrb	r3, [r3, #0]
 8003efa:	b2db      	uxtb	r3, r3
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d102      	bne.n	8003f06 <safety_estop_release+0x16>
		g_state = SAFETY_RECOVERY_WAIT;
 8003f00:	4b09      	ldr	r3, [pc, #36]	@ (8003f28 <safety_estop_release+0x38>)
 8003f02:	2202      	movs	r2, #2
 8003f04:	701a      	strb	r2, [r3, #0]

	LOGT_THIS(LOG_STATE_ESTOP_RELEASE, PROTO_OK, "estop", "release");
 8003f06:	4a09      	ldr	r2, [pc, #36]	@ (8003f2c <safety_estop_release+0x3c>)
 8003f08:	4b09      	ldr	r3, [pc, #36]	@ (8003f30 <safety_estop_release+0x40>)
 8003f0a:	9302      	str	r3, [sp, #8]
 8003f0c:	4b09      	ldr	r3, [pc, #36]	@ (8003f34 <safety_estop_release+0x44>)
 8003f0e:	9301      	str	r3, [sp, #4]
 8003f10:	4b09      	ldr	r3, [pc, #36]	@ (8003f38 <safety_estop_release+0x48>)
 8003f12:	9300      	str	r3, [sp, #0]
 8003f14:	4613      	mov	r3, r2
 8003f16:	2200      	movs	r2, #0
 8003f18:	210b      	movs	r1, #11
 8003f1a:	2005      	movs	r0, #5
 8003f1c:	f7fe f858 	bl	8001fd0 <log_event_auto>
}
 8003f20:	bf00      	nop
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}
 8003f26:	bf00      	nop
 8003f28:	20000cf8 	.word	0x20000cf8
 8003f2c:	0800f810 	.word	0x0800f810
 8003f30:	0800f83c 	.word	0x0800f83c
 8003f34:	0800f820 	.word	0x0800f820
 8003f38:	0800f834 	.word	0x0800f834

08003f3c <safety_is_safe>:
int safety_is_safe(void) {
 8003f3c:	b480      	push	{r7}
 8003f3e:	af00      	add	r7, sp, #0
	return g_state == SAFETY_NORMAL;
 8003f40:	4b06      	ldr	r3, [pc, #24]	@ (8003f5c <safety_is_safe+0x20>)
 8003f42:	781b      	ldrb	r3, [r3, #0]
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	bf0c      	ite	eq
 8003f4a:	2301      	moveq	r3, #1
 8003f4c:	2300      	movne	r3, #0
 8003f4e:	b2db      	uxtb	r3, r3
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	46bd      	mov	sp, r7
 8003f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f58:	4770      	bx	lr
 8003f5a:	bf00      	nop
 8003f5c:	20000cf8 	.word	0x20000cf8

08003f60 <h_move_queue_add>:
#include "Services/Probe/probe_service.h"
#include "Services/Led/led_service.h"
#include "Services/Test/test_spi_service.h"

// Funções estáticas de adaptação compatíveis com os callbacks do roteador
static void h_move_queue_add(router_t *r, const uint8_t *f, uint32_t l) {
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b084      	sub	sp, #16
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	60f8      	str	r0, [r7, #12]
 8003f68:	60b9      	str	r1, [r7, #8]
 8003f6a:	607a      	str	r2, [r7, #4]
	(void) r;
	motion_on_move_queue_add(f, l);
 8003f6c:	6879      	ldr	r1, [r7, #4]
 8003f6e:	68b8      	ldr	r0, [r7, #8]
 8003f70:	f7ff fba0 	bl	80036b4 <motion_on_move_queue_add>
}
 8003f74:	bf00      	nop
 8003f76:	3710      	adds	r7, #16
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}

08003f7c <h_move_queue_status>:
static void h_move_queue_status(router_t *r, const uint8_t *f, uint32_t l) {
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b084      	sub	sp, #16
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	60f8      	str	r0, [r7, #12]
 8003f84:	60b9      	str	r1, [r7, #8]
 8003f86:	607a      	str	r2, [r7, #4]
	(void) r;
	motion_on_move_queue_status(f, l);
 8003f88:	6879      	ldr	r1, [r7, #4]
 8003f8a:	68b8      	ldr	r0, [r7, #8]
 8003f8c:	f7ff fc56 	bl	800383c <motion_on_move_queue_status>
}
 8003f90:	bf00      	nop
 8003f92:	3710      	adds	r7, #16
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}

08003f98 <h_start_move>:
static void h_start_move(router_t *r, const uint8_t *f, uint32_t l) {
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b084      	sub	sp, #16
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	60f8      	str	r0, [r7, #12]
 8003fa0:	60b9      	str	r1, [r7, #8]
 8003fa2:	607a      	str	r2, [r7, #4]
	(void) r;
	motion_on_start_move(f, l);
 8003fa4:	6879      	ldr	r1, [r7, #4]
 8003fa6:	68b8      	ldr	r0, [r7, #8]
 8003fa8:	f7ff fca0 	bl	80038ec <motion_on_start_move>
}
 8003fac:	bf00      	nop
 8003fae:	3710      	adds	r7, #16
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}

08003fb4 <h_move_home>:
static void h_move_home(router_t *r, const uint8_t *f, uint32_t l) {
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b084      	sub	sp, #16
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	60f8      	str	r0, [r7, #12]
 8003fbc:	60b9      	str	r1, [r7, #8]
 8003fbe:	607a      	str	r2, [r7, #4]
	(void) r;
	home_on_move_home(f, l);
 8003fc0:	6879      	ldr	r1, [r7, #4]
 8003fc2:	68b8      	ldr	r0, [r7, #8]
 8003fc4:	f7fd fad8 	bl	8001578 <home_on_move_home>
}
 8003fc8:	bf00      	nop
 8003fca:	3710      	adds	r7, #16
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}

08003fd0 <h_move_probe_level>:
static void h_move_probe_level(router_t *r, const uint8_t *f, uint32_t l) {
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b084      	sub	sp, #16
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	60f8      	str	r0, [r7, #12]
 8003fd8:	60b9      	str	r1, [r7, #8]
 8003fda:	607a      	str	r2, [r7, #4]
	(void) r;
	probe_on_move_probe_level(f, l);
 8003fdc:	6879      	ldr	r1, [r7, #4]
 8003fde:	68b8      	ldr	r0, [r7, #8]
 8003fe0:	f7ff ff28 	bl	8003e34 <probe_on_move_probe_level>
}
 8003fe4:	bf00      	nop
 8003fe6:	3710      	adds	r7, #16
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}

08003fec <h_move_end>:
static void h_move_end(router_t *r, const uint8_t *f, uint32_t l) {
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b084      	sub	sp, #16
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	60f8      	str	r0, [r7, #12]
 8003ff4:	60b9      	str	r1, [r7, #8]
 8003ff6:	607a      	str	r2, [r7, #4]
	(void) r;
	motion_on_move_end(f, l);
 8003ff8:	6879      	ldr	r1, [r7, #4]
 8003ffa:	68b8      	ldr	r0, [r7, #8]
 8003ffc:	f7ff fd40 	bl	8003a80 <motion_on_move_end>
}
 8004000:	bf00      	nop
 8004002:	3710      	adds	r7, #16
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}

08004008 <h_led_ctrl>:
static void h_led_ctrl(router_t *r, const uint8_t *f, uint32_t l) {
 8004008:	b580      	push	{r7, lr}
 800400a:	b084      	sub	sp, #16
 800400c:	af00      	add	r7, sp, #0
 800400e:	60f8      	str	r0, [r7, #12]
 8004010:	60b9      	str	r1, [r7, #8]
 8004012:	607a      	str	r2, [r7, #4]
	(void) r;
	led_on_led_ctrl(f, l);
 8004014:	6879      	ldr	r1, [r7, #4]
 8004016:	68b8      	ldr	r0, [r7, #8]
 8004018:	f7fd fe12 	bl	8001c40 <led_on_led_ctrl>
}
 800401c:	bf00      	nop
 800401e:	3710      	adds	r7, #16
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}

08004024 <h_fpga_status>:
static void h_fpga_status(router_t *r, const uint8_t *f, uint32_t l) {
 8004024:	b480      	push	{r7}
 8004026:	b085      	sub	sp, #20
 8004028:	af00      	add	r7, sp, #0
 800402a:	60f8      	str	r0, [r7, #12]
 800402c:	60b9      	str	r1, [r7, #8]
 800402e:	607a      	str	r2, [r7, #4]
	(void) r;
	(void) f;
	(void) l; /* opcional */
}
 8004030:	bf00      	nop
 8004032:	3714      	adds	r7, #20
 8004034:	46bd      	mov	sp, r7
 8004036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403a:	4770      	bx	lr

0800403c <h_test_hello>:

static void h_test_hello(router_t *r, const uint8_t *f, uint32_t l) {
 800403c:	b480      	push	{r7}
 800403e:	b085      	sub	sp, #20
 8004040:	af00      	add	r7, sp, #0
 8004042:	60f8      	str	r0, [r7, #12]
 8004044:	60b9      	str	r1, [r7, #8]
 8004046:	607a      	str	r2, [r7, #4]
	(void) r;
	//test_spi_on_hello(f, l);
}
 8004048:	bf00      	nop
 800404a:	3714      	adds	r7, #20
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr

08004054 <services_register_handlers>:

void services_register_handlers(router_handlers_t *h) {
 8004054:	b480      	push	{r7}
 8004056:	b083      	sub	sp, #12
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
	if (!h)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d01b      	beq.n	800409a <services_register_handlers+0x46>
		return;
	h->on_move_queue_add = h_move_queue_add;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4a10      	ldr	r2, [pc, #64]	@ (80040a8 <services_register_handlers+0x54>)
 8004066:	601a      	str	r2, [r3, #0]
	h->on_move_queue_status = h_move_queue_status;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	4a10      	ldr	r2, [pc, #64]	@ (80040ac <services_register_handlers+0x58>)
 800406c:	605a      	str	r2, [r3, #4]
	h->on_start_move = h_start_move;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4a0f      	ldr	r2, [pc, #60]	@ (80040b0 <services_register_handlers+0x5c>)
 8004072:	609a      	str	r2, [r3, #8]
	h->on_move_home = h_move_home;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	4a0f      	ldr	r2, [pc, #60]	@ (80040b4 <services_register_handlers+0x60>)
 8004078:	60da      	str	r2, [r3, #12]
	h->on_move_probe_level = h_move_probe_level;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4a0e      	ldr	r2, [pc, #56]	@ (80040b8 <services_register_handlers+0x64>)
 800407e:	611a      	str	r2, [r3, #16]
	h->on_move_end = h_move_end;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	4a0e      	ldr	r2, [pc, #56]	@ (80040bc <services_register_handlers+0x68>)
 8004084:	615a      	str	r2, [r3, #20]
	h->on_led_ctrl = h_led_ctrl;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	4a0d      	ldr	r2, [pc, #52]	@ (80040c0 <services_register_handlers+0x6c>)
 800408a:	619a      	str	r2, [r3, #24]
	h->on_fpga_status = h_fpga_status;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	4a0d      	ldr	r2, [pc, #52]	@ (80040c4 <services_register_handlers+0x70>)
 8004090:	61da      	str	r2, [r3, #28]
	h->on_test_hello = h_test_hello;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	4a0c      	ldr	r2, [pc, #48]	@ (80040c8 <services_register_handlers+0x74>)
 8004096:	621a      	str	r2, [r3, #32]
 8004098:	e000      	b.n	800409c <services_register_handlers+0x48>
		return;
 800409a:	bf00      	nop
}
 800409c:	370c      	adds	r7, #12
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr
 80040a6:	bf00      	nop
 80040a8:	08003f61 	.word	0x08003f61
 80040ac:	08003f7d 	.word	0x08003f7d
 80040b0:	08003f99 	.word	0x08003f99
 80040b4:	08003fb5 	.word	0x08003fb5
 80040b8:	08003fd1 	.word	0x08003fd1
 80040bc:	08003fed 	.word	0x08003fed
 80040c0:	08004009 	.word	0x08004009
 80040c4:	08004025 	.word	0x08004025
 80040c8:	0800403d 	.word	0x0800403d

080040cc <tx_fill_left_zero_right_filler>:
/**
 * @brief Preenche o buffer de TX com 22×0x00 à esquerda e 20×SPI_FILL_BYTE à direita.
 * @param dst Ponteiro para o buffer de TX (tamanho = 42).
 */
static inline void tx_fill_left_zero_right_filler(uint8_t *dst)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b082      	sub	sp, #8
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
    memset(&dst[0],                 0x00,           RESP_LEFT_PAD_LEN); /* 22×0x00  */
 80040d4:	2216      	movs	r2, #22
 80040d6:	2100      	movs	r1, #0
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	f00a fa31 	bl	800e540 <memset>
    memset(&dst[RESP_LEFT_PAD_LEN], SPI_FILL_BYTE,  RESP_RIGHT_LEN);    /* 20×filler */
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	3316      	adds	r3, #22
 80040e2:	2214      	movs	r2, #20
 80040e4:	21a5      	movs	r1, #165	@ 0xa5
 80040e6:	4618      	mov	r0, r3
 80040e8:	f00a fa2a 	bl	800e540 <memset>
}
 80040ec:	bf00      	nop
 80040ee:	3708      	adds	r7, #8
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}

080040f4 <is_fill42>:
 * @param buf Buffer de entrada (tamanho = 42).
 * @param val Valor esperado em todos os bytes.
 * @return 1 se todos os bytes são 'val', 0 caso contrário.
 */
static int is_fill42(const uint8_t *buf, uint8_t val)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b085      	sub	sp, #20
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	460b      	mov	r3, r1
 80040fe:	70fb      	strb	r3, [r7, #3]
    for (uint32_t i = 0; i < APP_SPI_DMA_BUF_LEN; ++i)
 8004100:	2300      	movs	r3, #0
 8004102:	60fb      	str	r3, [r7, #12]
 8004104:	e00b      	b.n	800411e <is_fill42+0x2a>
        if (buf[i] != val) return 0;
 8004106:	687a      	ldr	r2, [r7, #4]
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	4413      	add	r3, r2
 800410c:	781b      	ldrb	r3, [r3, #0]
 800410e:	78fa      	ldrb	r2, [r7, #3]
 8004110:	429a      	cmp	r2, r3
 8004112:	d001      	beq.n	8004118 <is_fill42+0x24>
 8004114:	2300      	movs	r3, #0
 8004116:	e006      	b.n	8004126 <is_fill42+0x32>
    for (uint32_t i = 0; i < APP_SPI_DMA_BUF_LEN; ++i)
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	3301      	adds	r3, #1
 800411c:	60fb      	str	r3, [r7, #12]
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2b29      	cmp	r3, #41	@ 0x29
 8004122:	d9f0      	bls.n	8004106 <is_fill42+0x12>
    return 1;
 8004124:	2301      	movs	r3, #1
}
 8004126:	4618      	mov	r0, r3
 8004128:	3714      	adds	r7, #20
 800412a:	46bd      	mov	sp, r7
 800412c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004130:	4770      	bx	lr

08004132 <find_frame>:
 * @param off  (out) Offset de início do quadro (REQ_HEADER).
 * @param len  (out) Comprimento do quadro (inclui REQ_TAIL).
 * @return 1 se encontrou, 0 caso contrário.
 */
static int find_frame(const uint8_t *buf, uint16_t *off, uint16_t *len)
{
 8004132:	b480      	push	{r7}
 8004134:	b087      	sub	sp, #28
 8004136:	af00      	add	r7, sp, #0
 8004138:	60f8      	str	r0, [r7, #12]
 800413a:	60b9      	str	r1, [r7, #8]
 800413c:	607a      	str	r2, [r7, #4]
    uint16_t i = 0;
 800413e:	2300      	movs	r3, #0
 8004140:	82fb      	strh	r3, [r7, #22]
    while (i < APP_SPI_DMA_BUF_LEN && buf[i] != REQ_HEADER) i++;
 8004142:	e002      	b.n	800414a <find_frame+0x18>
 8004144:	8afb      	ldrh	r3, [r7, #22]
 8004146:	3301      	adds	r3, #1
 8004148:	82fb      	strh	r3, [r7, #22]
 800414a:	8afb      	ldrh	r3, [r7, #22]
 800414c:	2b29      	cmp	r3, #41	@ 0x29
 800414e:	d805      	bhi.n	800415c <find_frame+0x2a>
 8004150:	8afb      	ldrh	r3, [r7, #22]
 8004152:	68fa      	ldr	r2, [r7, #12]
 8004154:	4413      	add	r3, r2
 8004156:	781b      	ldrb	r3, [r3, #0]
 8004158:	2baa      	cmp	r3, #170	@ 0xaa
 800415a:	d1f3      	bne.n	8004144 <find_frame+0x12>
    if (i >= APP_SPI_DMA_BUF_LEN) return 0;
 800415c:	8afb      	ldrh	r3, [r7, #22]
 800415e:	2b29      	cmp	r3, #41	@ 0x29
 8004160:	d901      	bls.n	8004166 <find_frame+0x34>
 8004162:	2300      	movs	r3, #0
 8004164:	e01d      	b.n	80041a2 <find_frame+0x70>

    for (uint16_t j = (uint16_t)(i + 1); j < APP_SPI_DMA_BUF_LEN; ++j) {
 8004166:	8afb      	ldrh	r3, [r7, #22]
 8004168:	3301      	adds	r3, #1
 800416a:	82bb      	strh	r3, [r7, #20]
 800416c:	e015      	b.n	800419a <find_frame+0x68>
        if (buf[j] == REQ_TAIL) {
 800416e:	8abb      	ldrh	r3, [r7, #20]
 8004170:	68fa      	ldr	r2, [r7, #12]
 8004172:	4413      	add	r3, r2
 8004174:	781b      	ldrb	r3, [r3, #0]
 8004176:	2b55      	cmp	r3, #85	@ 0x55
 8004178:	d10c      	bne.n	8004194 <find_frame+0x62>
            *off = i;
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	8afa      	ldrh	r2, [r7, #22]
 800417e:	801a      	strh	r2, [r3, #0]
            *len = (uint16_t)(j - i + 1u);
 8004180:	8aba      	ldrh	r2, [r7, #20]
 8004182:	8afb      	ldrh	r3, [r7, #22]
 8004184:	1ad3      	subs	r3, r2, r3
 8004186:	b29b      	uxth	r3, r3
 8004188:	3301      	adds	r3, #1
 800418a:	b29a      	uxth	r2, r3
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	801a      	strh	r2, [r3, #0]
            return 1;
 8004190:	2301      	movs	r3, #1
 8004192:	e006      	b.n	80041a2 <find_frame+0x70>
    for (uint16_t j = (uint16_t)(i + 1); j < APP_SPI_DMA_BUF_LEN; ++j) {
 8004194:	8abb      	ldrh	r3, [r7, #20]
 8004196:	3301      	adds	r3, #1
 8004198:	82bb      	strh	r3, [r7, #20]
 800419a:	8abb      	ldrh	r3, [r7, #20]
 800419c:	2b29      	cmp	r3, #41	@ 0x29
 800419e:	d9e6      	bls.n	800416e <find_frame+0x3c>
        }
    }
    return 0;
 80041a0:	2300      	movs	r3, #0
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	371c      	adds	r7, #28
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr
	...

080041b0 <prepare_next_tx>:
 *      * Se n > 20, trunca para os 20 últimos bytes.
 *  - SEM resposta:
 *      * 22×0x00 + 20×SPI_FILL_BYTE (poll).
 */
static void prepare_next_tx(void)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b08e      	sub	sp, #56	@ 0x38
 80041b4:	af00      	add	r7, sp, #0
    uint8_t tmp[APP_SPI_DMA_BUF_LEN];
    int n = 0;
 80041b6:	2300      	movs	r3, #0
 80041b8:	637b      	str	r3, [r7, #52]	@ 0x34

    if (!g_resp_fifo) {
 80041ba:	4b21      	ldr	r3, [pc, #132]	@ (8004240 <prepare_next_tx+0x90>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d106      	bne.n	80041d0 <prepare_next_tx+0x20>
        /* Sem fila -> 22×0x00 + 20×filler */
        tx_fill_left_zero_right_filler(g_spi_tx_dma_buf);
 80041c2:	4820      	ldr	r0, [pc, #128]	@ (8004244 <prepare_next_tx+0x94>)
 80041c4:	f7ff ff82 	bl	80040cc <tx_fill_left_zero_right_filler>
        g_state = APP_SPI_READY;
 80041c8:	4b1f      	ldr	r3, [pc, #124]	@ (8004248 <prepare_next_tx+0x98>)
 80041ca:	2200      	movs	r2, #0
 80041cc:	701a      	strb	r2, [r3, #0]
 80041ce:	e034      	b.n	800423a <prepare_next_tx+0x8a>
        return;
    }

    n = resp_fifo_pop(g_resp_fifo, tmp, (int)APP_SPI_DMA_BUF_LEN);
 80041d0:	4b1b      	ldr	r3, [pc, #108]	@ (8004240 <prepare_next_tx+0x90>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	1d39      	adds	r1, r7, #4
 80041d6:	222a      	movs	r2, #42	@ 0x2a
 80041d8:	4618      	mov	r0, r3
 80041da:	f7fd f82d 	bl	8001238 <resp_fifo_pop>
 80041de:	6378      	str	r0, [r7, #52]	@ 0x34
    if (n > 0) {
 80041e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	dd23      	ble.n	800422e <prepare_next_tx+0x7e>
        /* Zera TODO o frame para evitar A5 antes do payload */
        memset(g_spi_tx_dma_buf, 0x00, APP_SPI_DMA_BUF_LEN);
 80041e6:	222a      	movs	r2, #42	@ 0x2a
 80041e8:	2100      	movs	r1, #0
 80041ea:	4816      	ldr	r0, [pc, #88]	@ (8004244 <prepare_next_tx+0x94>)
 80041ec:	f00a f9a8 	bl	800e540 <memset>

        /* Copia o payload alinhado à direita (trunca se necessário) */
        uint16_t to_copy = (uint16_t)((n > (int)RESP_RIGHT_LEN) ? RESP_RIGHT_LEN : n);
 80041f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041f2:	2b14      	cmp	r3, #20
 80041f4:	dc02      	bgt.n	80041fc <prepare_next_tx+0x4c>
 80041f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041f8:	b29b      	uxth	r3, r3
 80041fa:	e000      	b.n	80041fe <prepare_next_tx+0x4e>
 80041fc:	2314      	movs	r3, #20
 80041fe:	867b      	strh	r3, [r7, #50]	@ 0x32
        uint16_t dst_off = (uint16_t)(APP_SPI_DMA_BUF_LEN - to_copy); /* 42 - to_copy */
 8004200:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8004202:	f1c3 032a 	rsb	r3, r3, #42	@ 0x2a
 8004206:	863b      	strh	r3, [r7, #48]	@ 0x30
        uint16_t src_off = (uint16_t)(n - to_copy);                   /* últimos 'to_copy' bytes */
 8004208:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800420a:	b29a      	uxth	r2, r3
 800420c:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800420e:	1ad3      	subs	r3, r2, r3
 8004210:	85fb      	strh	r3, [r7, #46]	@ 0x2e

        memcpy(&g_spi_tx_dma_buf[dst_off], &tmp[src_off], to_copy);
 8004212:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8004214:	4a0b      	ldr	r2, [pc, #44]	@ (8004244 <prepare_next_tx+0x94>)
 8004216:	1898      	adds	r0, r3, r2
 8004218:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800421a:	1d3a      	adds	r2, r7, #4
 800421c:	4413      	add	r3, r2
 800421e:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 8004220:	4619      	mov	r1, r3
 8004222:	f00a fa18 	bl	800e656 <memcpy>
        g_state = APP_SPI_PENDING;
 8004226:	4b08      	ldr	r3, [pc, #32]	@ (8004248 <prepare_next_tx+0x98>)
 8004228:	2202      	movs	r2, #2
 800422a:	701a      	strb	r2, [r3, #0]
 800422c:	e005      	b.n	800423a <prepare_next_tx+0x8a>
    } else {
        /* Sem resposta -> mantém contrato visual: 22×0x00 + 20×filler */
        tx_fill_left_zero_right_filler(g_spi_tx_dma_buf);
 800422e:	4805      	ldr	r0, [pc, #20]	@ (8004244 <prepare_next_tx+0x94>)
 8004230:	f7ff ff4c 	bl	80040cc <tx_fill_left_zero_right_filler>
        g_state = APP_SPI_READY;
 8004234:	4b04      	ldr	r3, [pc, #16]	@ (8004248 <prepare_next_tx+0x98>)
 8004236:	2200      	movs	r2, #0
 8004238:	701a      	strb	r2, [r3, #0]
    }
}
 800423a:	3738      	adds	r7, #56	@ 0x38
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}
 8004240:	20000d68 	.word	0x20000d68
 8004244:	20000d98 	.word	0x20000d98
 8004248:	20000dc4 	.word	0x20000dc4

0800424c <restart_spi_dma>:
/**
 * @brief Reinicia uma transação SPI por DMA (não bloqueante).
 * Seta g_state=BUSY em caso de sucesso; seta g_spi_error_flag em erro.
 */
static void restart_spi_dma(void)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	af00      	add	r7, sp, #0
    if (HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY) {
 8004250:	480d      	ldr	r0, [pc, #52]	@ (8004288 <restart_spi_dma+0x3c>)
 8004252:	f005 fbb9 	bl	80099c8 <HAL_SPI_GetState>
 8004256:	4603      	mov	r3, r0
 8004258:	2b01      	cmp	r3, #1
 800425a:	d003      	beq.n	8004264 <restart_spi_dma+0x18>
        g_spi_error_flag = 1u;
 800425c:	4b0b      	ldr	r3, [pc, #44]	@ (800428c <restart_spi_dma+0x40>)
 800425e:	2201      	movs	r2, #1
 8004260:	701a      	strb	r2, [r3, #0]
        return;
 8004262:	e00f      	b.n	8004284 <restart_spi_dma+0x38>
    }

    if (HAL_SPI_TransmitReceive_DMA(&hspi2,
 8004264:	232a      	movs	r3, #42	@ 0x2a
 8004266:	4a0a      	ldr	r2, [pc, #40]	@ (8004290 <restart_spi_dma+0x44>)
 8004268:	490a      	ldr	r1, [pc, #40]	@ (8004294 <restart_spi_dma+0x48>)
 800426a:	4807      	ldr	r0, [pc, #28]	@ (8004288 <restart_spi_dma+0x3c>)
 800426c:	f005 f8ea 	bl	8009444 <HAL_SPI_TransmitReceive_DMA>
 8004270:	4603      	mov	r3, r0
 8004272:	2b00      	cmp	r3, #0
 8004274:	d003      	beq.n	800427e <restart_spi_dma+0x32>
            g_spi_tx_dma_buf, g_spi_rx_dma_buf,
            (uint16_t)APP_SPI_DMA_BUF_LEN) != HAL_OK) {
        g_spi_error_flag = 1u;
 8004276:	4b05      	ldr	r3, [pc, #20]	@ (800428c <restart_spi_dma+0x40>)
 8004278:	2201      	movs	r2, #1
 800427a:	701a      	strb	r2, [r3, #0]
        return;
 800427c:	e002      	b.n	8004284 <restart_spi_dma+0x38>
    }

    g_state = APP_SPI_BUSY;
 800427e:	4b06      	ldr	r3, [pc, #24]	@ (8004298 <restart_spi_dma+0x4c>)
 8004280:	2201      	movs	r2, #1
 8004282:	701a      	strb	r2, [r3, #0]
}
 8004284:	bd80      	pop	{r7, pc}
 8004286:	bf00      	nop
 8004288:	20000e08 	.word	0x20000e08
 800428c:	20000dc3 	.word	0x20000dc3
 8004290:	20000d6c 	.word	0x20000d6c
 8004294:	20000d98 	.word	0x20000d98
 8004298:	20000dc4 	.word	0x20000dc4

0800429c <app_init>:
/**
 * @brief Inicializa roteador, fila de respostas e a primeira rodada DMA.
 * Preenche o primeiro TX como 22×0x00 + 20×filler.
 */
void app_init(void)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	af00      	add	r7, sp, #0
    /* Registra serviços no router (o projeto deve prover os handlers) */
    memset(&g_handlers, 0, sizeof g_handlers);
 80042a0:	2224      	movs	r2, #36	@ 0x24
 80042a2:	2100      	movs	r1, #0
 80042a4:	4813      	ldr	r0, [pc, #76]	@ (80042f4 <app_init+0x58>)
 80042a6:	f00a f94b 	bl	800e540 <memset>
    services_register_handlers(&g_handlers);
 80042aa:	4812      	ldr	r0, [pc, #72]	@ (80042f4 <app_init+0x58>)
 80042ac:	f7ff fed2 	bl	8004054 <services_register_handlers>

    /* Inicializa serviços (ordem: log/diag, safety, periféricos simples, motion) */
#if LOG_ENABLE
    log_service_init();
 80042b0:	f7fd fde2 	bl	8001e78 <log_service_init>
#endif
    safety_service_init();
 80042b4:	f7ff fddc 	bl	8003e70 <safety_service_init>
    led_service_init();
 80042b8:	f7fd fc2a 	bl	8001b10 <led_service_init>
    home_service_init();
 80042bc:	f7fd f938 	bl	8001530 <home_service_init>
    probe_service_init();
 80042c0:	f7ff fd8e 	bl	8003de0 <probe_service_init>
    motion_service_init();
 80042c4:	f7fe fe44 	bl	8002f50 <motion_service_init>

    g_resp_fifo = resp_fifo_create();
 80042c8:	f7fc ff59 	bl	800117e <resp_fifo_create>
 80042cc:	4603      	mov	r3, r0
 80042ce:	4a0a      	ldr	r2, [pc, #40]	@ (80042f8 <app_init+0x5c>)
 80042d0:	6013      	str	r3, [r2, #0]
    router_init(&g_router, g_resp_fifo, &g_handlers);
 80042d2:	4b09      	ldr	r3, [pc, #36]	@ (80042f8 <app_init+0x5c>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a07      	ldr	r2, [pc, #28]	@ (80042f4 <app_init+0x58>)
 80042d8:	4619      	mov	r1, r3
 80042da:	4808      	ldr	r0, [pc, #32]	@ (80042fc <app_init+0x60>)
 80042dc:	f7fc fff2 	bl	80012c4 <router_init>

    /* Primeiro frame: 22×0x00 + 20×filler (evita A5 no início quando não há resposta) */
    tx_fill_left_zero_right_filler(g_spi_tx_dma_buf);
 80042e0:	4807      	ldr	r0, [pc, #28]	@ (8004300 <app_init+0x64>)
 80042e2:	f7ff fef3 	bl	80040cc <tx_fill_left_zero_right_filler>

    restart_spi_dma();
 80042e6:	f7ff ffb1 	bl	800424c <restart_spi_dma>
    g_state = APP_SPI_READY;
 80042ea:	4b06      	ldr	r3, [pc, #24]	@ (8004304 <app_init+0x68>)
 80042ec:	2200      	movs	r2, #0
 80042ee:	701a      	strb	r2, [r3, #0]
}
 80042f0:	bf00      	nop
 80042f2:	bd80      	pop	{r7, pc}
 80042f4:	20000d44 	.word	0x20000d44
 80042f8:	20000d68 	.word	0x20000d68
 80042fc:	20000cfc 	.word	0x20000cfc
 8004300:	20000d98 	.word	0x20000d98
 8004304:	20000dc4 	.word	0x20000dc4

08004308 <app_poll>:
/**
 * @brief Loop de serviço: processa RX (quando há rodada concluída),
 *        prepara o próximo TX e rearma o DMA.
 */
void app_poll(void)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b082      	sub	sp, #8
 800430c:	af00      	add	r7, sp, #0
    /* Só processa quando um round DMA foi concluído pelo HAL */
    if (!g_spi_round_done) return;
 800430e:	4b19      	ldr	r3, [pc, #100]	@ (8004374 <app_poll+0x6c>)
 8004310:	781b      	ldrb	r3, [r3, #0]
 8004312:	b2db      	uxtb	r3, r3
 8004314:	2b00      	cmp	r3, #0
 8004316:	d028      	beq.n	800436a <app_poll+0x62>
    g_spi_round_done = 0u;
 8004318:	4b16      	ldr	r3, [pc, #88]	@ (8004374 <app_poll+0x6c>)
 800431a:	2200      	movs	r2, #0
 800431c:	701a      	strb	r2, [r3, #0]

    /* 1) Interpretar o RX atual */
    if (is_fill42(g_spi_rx_dma_buf, SPI_POLL_BYTE)) {
 800431e:	213c      	movs	r1, #60	@ 0x3c
 8004320:	4815      	ldr	r0, [pc, #84]	@ (8004378 <app_poll+0x70>)
 8004322:	f7ff fee7 	bl	80040f4 <is_fill42>
 8004326:	4603      	mov	r3, r0
 8004328:	2b00      	cmp	r3, #0
 800432a:	d119      	bne.n	8004360 <app_poll+0x58>
        /* 42×0x3C => cliente apenas leu respostas; não alimenta router */
    } else {
        /* Tenta extrair [REQ_HEADER ... REQ_TAIL] e empurra para o router */
        uint16_t off = 0, len = 0;
 800432c:	2300      	movs	r3, #0
 800432e:	80fb      	strh	r3, [r7, #6]
 8004330:	2300      	movs	r3, #0
 8004332:	80bb      	strh	r3, [r7, #4]
        if (find_frame(g_spi_rx_dma_buf, &off, &len)) {
 8004334:	1d3a      	adds	r2, r7, #4
 8004336:	1dbb      	adds	r3, r7, #6
 8004338:	4619      	mov	r1, r3
 800433a:	480f      	ldr	r0, [pc, #60]	@ (8004378 <app_poll+0x70>)
 800433c:	f7ff fef9 	bl	8004132 <find_frame>
 8004340:	4603      	mov	r3, r0
 8004342:	2b00      	cmp	r3, #0
 8004344:	d009      	beq.n	800435a <app_poll+0x52>
            router_feed_bytes(&g_router, &g_spi_rx_dma_buf[off], len);
 8004346:	88fb      	ldrh	r3, [r7, #6]
 8004348:	461a      	mov	r2, r3
 800434a:	4b0b      	ldr	r3, [pc, #44]	@ (8004378 <app_poll+0x70>)
 800434c:	4413      	add	r3, r2
 800434e:	88ba      	ldrh	r2, [r7, #4]
 8004350:	4619      	mov	r1, r3
 8004352:	480a      	ldr	r0, [pc, #40]	@ (800437c <app_poll+0x74>)
 8004354:	f7fd f8c4 	bl	80014e0 <router_feed_bytes>
 8004358:	e002      	b.n	8004360 <app_poll+0x58>
        } else {
            /* Quadro inválido/parcial ou outro padrão -> marca erro leve */
            g_spi_error_flag = 1u;
 800435a:	4b09      	ldr	r3, [pc, #36]	@ (8004380 <app_poll+0x78>)
 800435c:	2201      	movs	r2, #1
 800435e:	701a      	strb	r2, [r3, #0]
        }
    }

    /* 2) Preparar TX (resposta à direita ou 22×0x00 + 20×filler) */
    prepare_next_tx();
 8004360:	f7ff ff26 	bl	80041b0 <prepare_next_tx>

    /* 3) Reiniciar DMA para o próximo round */
    restart_spi_dma();
 8004364:	f7ff ff72 	bl	800424c <restart_spi_dma>
 8004368:	e000      	b.n	800436c <app_poll+0x64>
    if (!g_spi_round_done) return;
 800436a:	bf00      	nop
}
 800436c:	3708      	adds	r7, #8
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}
 8004372:	bf00      	nop
 8004374:	20000dc2 	.word	0x20000dc2
 8004378:	20000d6c 	.word	0x20000d6c
 800437c:	20000cfc 	.word	0x20000cfc
 8004380:	20000dc3 	.word	0x20000dc3

08004384 <app_spi_isr_txrx_done>:
/**
 * @brief Callback para “transfer complete” do SPI+DMA.
 * Apenas sinaliza o loop principal (app_poll) via g_spi_round_done.
 */
void app_spi_isr_txrx_done(SPI_HandleTypeDef *hspi)
{
 8004384:	b480      	push	{r7}
 8004386:	b083      	sub	sp, #12
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
    if (!hspi) return;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d008      	beq.n	80043a4 <app_spi_isr_txrx_done+0x20>
    if (hspi->Instance != APP_SPI_INSTANCE) return;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a07      	ldr	r2, [pc, #28]	@ (80043b4 <app_spi_isr_txrx_done+0x30>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d105      	bne.n	80043a8 <app_spi_isr_txrx_done+0x24>
    g_spi_round_done = 1u;
 800439c:	4b06      	ldr	r3, [pc, #24]	@ (80043b8 <app_spi_isr_txrx_done+0x34>)
 800439e:	2201      	movs	r2, #1
 80043a0:	701a      	strb	r2, [r3, #0]
 80043a2:	e002      	b.n	80043aa <app_spi_isr_txrx_done+0x26>
    if (!hspi) return;
 80043a4:	bf00      	nop
 80043a6:	e000      	b.n	80043aa <app_spi_isr_txrx_done+0x26>
    if (hspi->Instance != APP_SPI_INSTANCE) return;
 80043a8:	bf00      	nop
}
 80043aa:	370c      	adds	r7, #12
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr
 80043b4:	40003800 	.word	0x40003800
 80043b8:	20000dc2 	.word	0x20000dc2

080043bc <app_resp_push>:
 * @param frame Buffer com a resposta (número de bytes = len).
 * @param len   Tamanho da resposta (até 20 bytes). >20 retorna erro.
 * @return 0 em sucesso; PROTO_ERR_ARG ou PROTO_ERR_RANGE em erro.
 */
int app_resp_push(const uint8_t *frame, uint32_t len)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b082      	sub	sp, #8
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
 80043c4:	6039      	str	r1, [r7, #0]
    if (!g_resp_fifo || !frame || len == 0u) {
 80043c6:	4b0f      	ldr	r3, [pc, #60]	@ (8004404 <app_resp_push+0x48>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d005      	beq.n	80043da <app_resp_push+0x1e>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d002      	beq.n	80043da <app_resp_push+0x1e>
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d102      	bne.n	80043e0 <app_resp_push+0x24>
        return PROTO_ERR_ARG;
 80043da:	f04f 33ff 	mov.w	r3, #4294967295
 80043de:	e00d      	b.n	80043fc <app_resp_push+0x40>
    }
    if (len > RESP_RIGHT_LEN) {
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	2b14      	cmp	r3, #20
 80043e4:	d902      	bls.n	80043ec <app_resp_push+0x30>
        return PROTO_ERR_RANGE; /* impede >20 bytes */
 80043e6:	f06f 0303 	mvn.w	r3, #3
 80043ea:	e007      	b.n	80043fc <app_resp_push+0x40>
    }
    return resp_fifo_push(g_resp_fifo, frame, len);
 80043ec:	4b05      	ldr	r3, [pc, #20]	@ (8004404 <app_resp_push+0x48>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	683a      	ldr	r2, [r7, #0]
 80043f2:	6879      	ldr	r1, [r7, #4]
 80043f4:	4618      	mov	r0, r3
 80043f6:	f7fc fecb 	bl	8001190 <resp_fifo_push>
 80043fa:	4603      	mov	r3, r0
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	3708      	adds	r7, #8
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}
 8004404:	20000d68 	.word	0x20000d68

08004408 <configure_encoder_timer>:
 * A estrutura gerada pelo CubeMX usa TI1 por padrão. Esta função sobrescreve a
 * configuração para capturar os dois canais do encoder, mantendo todos os
 * filtros e *prescalers* em 0/1 para preservar a resolução máxima.
 */
static void configure_encoder_timer(TIM_HandleTypeDef *htim)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b08e      	sub	sp, #56	@ 0x38
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
    TIM_Encoder_InitTypeDef config = {0};
 8004410:	f107 0314 	add.w	r3, r7, #20
 8004414:	2224      	movs	r2, #36	@ 0x24
 8004416:	2100      	movs	r1, #0
 8004418:	4618      	mov	r0, r3
 800441a:	f00a f891 	bl	800e540 <memset>
    TIM_MasterConfigTypeDef master = {0};
 800441e:	f107 0308 	add.w	r3, r7, #8
 8004422:	2200      	movs	r2, #0
 8004424:	601a      	str	r2, [r3, #0]
 8004426:	605a      	str	r2, [r3, #4]
 8004428:	609a      	str	r2, [r3, #8]

    config.EncoderMode = TIM_ENCODERMODE_TI12;
 800442a:	2303      	movs	r3, #3
 800442c:	617b      	str	r3, [r7, #20]
    config.IC1Polarity = TIM_ICPOLARITY_RISING;
 800442e:	2300      	movs	r3, #0
 8004430:	61bb      	str	r3, [r7, #24]
    config.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004432:	2301      	movs	r3, #1
 8004434:	61fb      	str	r3, [r7, #28]
    config.IC1Prescaler = TIM_ICPSC_DIV1;
 8004436:	2300      	movs	r3, #0
 8004438:	623b      	str	r3, [r7, #32]
    config.IC1Filter = 0;
 800443a:	2300      	movs	r3, #0
 800443c:	627b      	str	r3, [r7, #36]	@ 0x24
    config.IC2Polarity = TIM_ICPOLARITY_RISING;
 800443e:	2300      	movs	r3, #0
 8004440:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004442:	2301      	movs	r3, #1
 8004444:	62fb      	str	r3, [r7, #44]	@ 0x2c
    config.IC2Prescaler = TIM_ICPSC_DIV1;
 8004446:	2300      	movs	r3, #0
 8004448:	633b      	str	r3, [r7, #48]	@ 0x30
    config.IC2Filter = 0;
 800444a:	2300      	movs	r3, #0
 800444c:	637b      	str	r3, [r7, #52]	@ 0x34

    if (HAL_TIM_Encoder_Init(htim, &config) != HAL_OK)
 800444e:	f107 0314 	add.w	r3, r7, #20
 8004452:	4619      	mov	r1, r3
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	f006 fba5 	bl	800aba4 <HAL_TIM_Encoder_Init>
 800445a:	4603      	mov	r3, r0
 800445c:	2b00      	cmp	r3, #0
 800445e:	d001      	beq.n	8004464 <configure_encoder_timer+0x5c>
    {
        Error_Handler();
 8004460:	f000 fb78 	bl	8004b54 <Error_Handler>
    }

    master.MasterOutputTrigger = TIM_TRGO_RESET;
 8004464:	2300      	movs	r3, #0
 8004466:	60bb      	str	r3, [r7, #8]
    master.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004468:	2300      	movs	r3, #0
 800446a:	613b      	str	r3, [r7, #16]
    if (HAL_TIMEx_MasterConfigSynchronization(htim, &master) != HAL_OK)
 800446c:	f107 0308 	add.w	r3, r7, #8
 8004470:	4619      	mov	r1, r3
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	f008 fa7a 	bl	800c96c <HAL_TIMEx_MasterConfigSynchronization>
 8004478:	4603      	mov	r3, r0
 800447a:	2b00      	cmp	r3, #0
 800447c:	d001      	beq.n	8004482 <configure_encoder_timer+0x7a>
    {
        Error_Handler();
 800447e:	f000 fb69 	bl	8004b54 <Error_Handler>
    }
}
 8004482:	bf00      	nop
 8004484:	3738      	adds	r7, #56	@ 0x38
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}

0800448a <configure_output>:

/**
 * @brief Ajusta um conjunto de saídas STEP/DIR/ENABLE para modo *push-pull*.
 */
static void configure_output(GPIO_TypeDef *port, uint32_t pins, uint32_t speed)
{
 800448a:	b580      	push	{r7, lr}
 800448c:	b08a      	sub	sp, #40	@ 0x28
 800448e:	af00      	add	r7, sp, #0
 8004490:	60f8      	str	r0, [r7, #12]
 8004492:	60b9      	str	r1, [r7, #8]
 8004494:	607a      	str	r2, [r7, #4]
    GPIO_InitTypeDef init = {0};
 8004496:	f107 0314 	add.w	r3, r7, #20
 800449a:	2200      	movs	r2, #0
 800449c:	601a      	str	r2, [r3, #0]
 800449e:	605a      	str	r2, [r3, #4]
 80044a0:	609a      	str	r2, [r3, #8]
 80044a2:	60da      	str	r2, [r3, #12]
 80044a4:	611a      	str	r2, [r3, #16]
    init.Pin = pins;
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	617b      	str	r3, [r7, #20]
    init.Mode = GPIO_MODE_OUTPUT_PP;
 80044aa:	2301      	movs	r3, #1
 80044ac:	61bb      	str	r3, [r7, #24]
    init.Pull = GPIO_NOPULL;
 80044ae:	2300      	movs	r3, #0
 80044b0:	61fb      	str	r3, [r7, #28]
    init.Speed = speed;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(port, &init);
 80044b6:	f107 0314 	add.w	r3, r7, #20
 80044ba:	4619      	mov	r1, r3
 80044bc:	68f8      	ldr	r0, [r7, #12]
 80044be:	f001 fe1d 	bl	80060fc <HAL_GPIO_Init>
}
 80044c2:	bf00      	nop
 80044c4:	3728      	adds	r7, #40	@ 0x28
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}
	...

080044cc <board_config_apply_motion_gpio>:
//        Error_Handler();
//    }
//}

void board_config_apply_motion_gpio(void)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b086      	sub	sp, #24
 80044d0:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef init = {0};
 80044d2:	1d3b      	adds	r3, r7, #4
 80044d4:	2200      	movs	r2, #0
 80044d6:	601a      	str	r2, [r3, #0]
 80044d8:	605a      	str	r2, [r3, #4]
 80044da:	609a      	str	r2, [r3, #8]
 80044dc:	60da      	str	r2, [r3, #12]
 80044de:	611a      	str	r2, [r3, #16]

    /* Saídas de movimento com tempos de borda compatíveis com STEP/DIR */
    configure_output(GPIOB, GPIO_PIN_4 | GPIO_PIN_0 | GPIO_PIN_1, GPIO_SPEED_FREQ_VERY_HIGH);
 80044e0:	2203      	movs	r2, #3
 80044e2:	2113      	movs	r1, #19
 80044e4:	4825      	ldr	r0, [pc, #148]	@ (800457c <board_config_apply_motion_gpio+0xb0>)
 80044e6:	f7ff ffd0 	bl	800448a <configure_output>
    configure_output(GPIOB, GPIO_PIN_2, GPIO_SPEED_FREQ_VERY_HIGH);
 80044ea:	2203      	movs	r2, #3
 80044ec:	2104      	movs	r1, #4
 80044ee:	4823      	ldr	r0, [pc, #140]	@ (800457c <board_config_apply_motion_gpio+0xb0>)
 80044f0:	f7ff ffcb 	bl	800448a <configure_output>
    configure_output(GPIOA, GPIO_PIN_3 | GPIO_PIN_2, GPIO_SPEED_FREQ_VERY_HIGH);
 80044f4:	2203      	movs	r2, #3
 80044f6:	210c      	movs	r1, #12
 80044f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80044fc:	f7ff ffc5 	bl	800448a <configure_output>
    configure_output(GPIOC, GPIO_PIN_4 | GPIO_PIN_5, GPIO_SPEED_FREQ_LOW);
 8004500:	2200      	movs	r2, #0
 8004502:	2130      	movs	r1, #48	@ 0x30
 8004504:	481e      	ldr	r0, [pc, #120]	@ (8004580 <board_config_apply_motion_gpio+0xb4>)
 8004506:	f7ff ffc0 	bl	800448a <configure_output>
    configure_output(GPIOD, GPIO_PIN_14, GPIO_SPEED_FREQ_LOW);
 800450a:	2200      	movs	r2, #0
 800450c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004510:	481c      	ldr	r0, [pc, #112]	@ (8004584 <board_config_apply_motion_gpio+0xb8>)
 8004512:	f7ff ffba 	bl	800448a <configure_output>

    /* Estados seguros antes de habilitar drivers: ENA alto, STEP/DIR baixos */
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4 | GPIO_PIN_2 | GPIO_PIN_0 | GPIO_PIN_1, GPIO_PIN_RESET);
 8004516:	2200      	movs	r2, #0
 8004518:	2117      	movs	r1, #23
 800451a:	4818      	ldr	r0, [pc, #96]	@ (800457c <board_config_apply_motion_gpio+0xb0>)
 800451c:	f002 f89a 	bl	8006654 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3 | GPIO_PIN_2, GPIO_PIN_RESET);
 8004520:	2200      	movs	r2, #0
 8004522:	210c      	movs	r1, #12
 8004524:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004528:	f002 f894 	bl	8006654 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);     /* EN_X desabilitado (alto) */
 800452c:	2201      	movs	r2, #1
 800452e:	2110      	movs	r1, #16
 8004530:	4813      	ldr	r0, [pc, #76]	@ (8004580 <board_config_apply_motion_gpio+0xb4>)
 8004532:	f002 f88f 	bl	8006654 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);   /* EN_Y habilitado (baixo) */
 8004536:	2200      	movs	r2, #0
 8004538:	2120      	movs	r1, #32
 800453a:	4811      	ldr	r0, [pc, #68]	@ (8004580 <board_config_apply_motion_gpio+0xb4>)
 800453c:	f002 f88a 	bl	8006654 <HAL_GPIO_WritePin>
    // EN_Z (PD14) ativo em nível baixo por solicitação: inicia habilitado
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8004540:	2200      	movs	r2, #0
 8004542:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004546:	480f      	ldr	r0, [pc, #60]	@ (8004584 <board_config_apply_motion_gpio+0xb8>)
 8004548:	f002 f884 	bl	8006654 <HAL_GPIO_WritePin>

    /* Entradas de segurança em *pull-up* com detecção de bordas de ambos os sentidos */
    init.Mode = GPIO_MODE_IT_RISING_FALLING;
 800454c:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8004550:	60bb      	str	r3, [r7, #8]
    init.Pull = GPIO_PULLUP;
 8004552:	2301      	movs	r3, #1
 8004554:	60fb      	str	r3, [r7, #12]
     */
#if 0
    init.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2;  /* PC0/PC1/PC2 como EXTI */
    HAL_GPIO_Init(GPIOC, &init);
#else
    init.Pin = GPIO_PIN_1;                             /* Somente PC1 como EXTI */
 8004556:	2302      	movs	r3, #2
 8004558:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(GPIOC, &init);
 800455a:	1d3b      	adds	r3, r7, #4
 800455c:	4619      	mov	r1, r3
 800455e:	4808      	ldr	r0, [pc, #32]	@ (8004580 <board_config_apply_motion_gpio+0xb4>)
 8004560:	f001 fdcc 	bl	80060fc <HAL_GPIO_Init>
#endif

    init.Pin = GPIO_PIN_13;                            /* EXTI do PC13 permanece */
 8004564:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004568:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(GPIOC, &init);
 800456a:	1d3b      	adds	r3, r7, #4
 800456c:	4619      	mov	r1, r3
 800456e:	4804      	ldr	r0, [pc, #16]	@ (8004580 <board_config_apply_motion_gpio+0xb4>)
 8004570:	f001 fdc4 	bl	80060fc <HAL_GPIO_Init>
}
 8004574:	bf00      	nop
 8004576:	3718      	adds	r7, #24
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}
 800457c:	48000400 	.word	0x48000400
 8004580:	48000800 	.word	0x48000800
 8004584:	48000c00 	.word	0x48000c00

08004588 <board_config_force_encoder_quadrature>:

void board_config_force_encoder_quadrature(void)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	af00      	add	r7, sp, #0
    configure_encoder_timer(&htim3);
 800458c:	4803      	ldr	r0, [pc, #12]	@ (800459c <board_config_force_encoder_quadrature+0x14>)
 800458e:	f7ff ff3b 	bl	8004408 <configure_encoder_timer>
    configure_encoder_timer(&htim5);
 8004592:	4803      	ldr	r0, [pc, #12]	@ (80045a0 <board_config_force_encoder_quadrature+0x18>)
 8004594:	f7ff ff38 	bl	8004408 <configure_encoder_timer>
}
 8004598:	bf00      	nop
 800459a:	bd80      	pop	{r7, pc}
 800459c:	20000f00 	.word	0x20000f00
 80045a0:	20000f4c 	.word	0x20000f4c

080045a4 <board_config_apply_interrupt_priorities>:

void board_config_apply_interrupt_priorities(void)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	af00      	add	r7, sp, #0
    /* EXTI de segurança: interrupções mais altas para abortar movimento */
    HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80045a8:	2200      	movs	r2, #0
 80045aa:	2100      	movs	r1, #0
 80045ac:	2006      	movs	r0, #6
 80045ae:	f001 fa0f 	bl	80059d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80045b2:	2006      	movs	r0, #6
 80045b4:	f001 fa38 	bl	8005a28 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80045b8:	2200      	movs	r2, #0
 80045ba:	2100      	movs	r1, #0
 80045bc:	2007      	movs	r0, #7
 80045be:	f001 fa07 	bl	80059d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80045c2:	2007      	movs	r0, #7
 80045c4:	f001 fa30 	bl	8005a28 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80045c8:	2200      	movs	r2, #0
 80045ca:	2100      	movs	r1, #0
 80045cc:	2008      	movs	r0, #8
 80045ce:	f001 f9ff 	bl	80059d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80045d2:	2008      	movs	r0, #8
 80045d4:	f001 fa28 	bl	8005a28 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80045d8:	2200      	movs	r2, #0
 80045da:	2100      	movs	r1, #0
 80045dc:	2028      	movs	r0, #40	@ 0x28
 80045de:	f001 f9f7 	bl	80059d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80045e2:	2028      	movs	r0, #40	@ 0x28
 80045e4:	f001 fa20 	bl	8005a28 <HAL_NVIC_EnableIRQ>

    /* Temporização do núcleo de movimento (TIM6/TIM7) e transporte SPI */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 80045e8:	2200      	movs	r2, #0
 80045ea:	2101      	movs	r1, #1
 80045ec:	2036      	movs	r0, #54	@ 0x36
 80045ee:	f001 f9ef 	bl	80059d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80045f2:	2036      	movs	r0, #54	@ 0x36
 80045f4:	f001 fa18 	bl	8005a28 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 2, 0);
 80045f8:	2200      	movs	r2, #0
 80045fa:	2102      	movs	r1, #2
 80045fc:	200e      	movs	r0, #14
 80045fe:	f001 f9e7 	bl	80059d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8004602:	200e      	movs	r0, #14
 8004604:	f001 fa10 	bl	8005a28 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 2, 0);
 8004608:	2200      	movs	r2, #0
 800460a:	2102      	movs	r1, #2
 800460c:	200f      	movs	r0, #15
 800460e:	f001 f9df 	bl	80059d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8004612:	200f      	movs	r0, #15
 8004614:	f001 fa08 	bl	8005a28 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(TIM7_IRQn, 3, 0);
 8004618:	2200      	movs	r2, #0
 800461a:	2103      	movs	r1, #3
 800461c:	2037      	movs	r0, #55	@ 0x37
 800461e:	f001 f9d7 	bl	80059d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8004622:	2037      	movs	r0, #55	@ 0x37
 8004624:	f001 fa00 	bl	8005a28 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(USART1_IRQn, 4, 0);
 8004628:	2200      	movs	r2, #0
 800462a:	2104      	movs	r1, #4
 800462c:	2025      	movs	r0, #37	@ 0x25
 800462e:	f001 f9cf 	bl	80059d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004632:	2025      	movs	r0, #37	@ 0x25
 8004634:	f001 f9f8 	bl	8005a28 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8004638:	2200      	movs	r2, #0
 800463a:	2105      	movs	r1, #5
 800463c:	2024      	movs	r0, #36	@ 0x24
 800463e:	f001 f9c7 	bl	80059d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8004642:	2024      	movs	r0, #36	@ 0x24
 8004644:	f001 f9f0 	bl	8005a28 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 6, 0);
 8004648:	2200      	movs	r2, #0
 800464a:	2106      	movs	r1, #6
 800464c:	2018      	movs	r0, #24
 800464e:	f001 f9bf 	bl	80059d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8004652:	2018      	movs	r0, #24
 8004654:	f001 f9e8 	bl	8005a28 <HAL_NVIC_EnableIRQ>
}
 8004658:	bf00      	nop
 800465a:	bd80      	pop	{r7, pc}

0800465c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b082      	sub	sp, #8
 8004660:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004662:	4b10      	ldr	r3, [pc, #64]	@ (80046a4 <MX_DMA_Init+0x48>)
 8004664:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004666:	4a0f      	ldr	r2, [pc, #60]	@ (80046a4 <MX_DMA_Init+0x48>)
 8004668:	f043 0301 	orr.w	r3, r3, #1
 800466c:	6493      	str	r3, [r2, #72]	@ 0x48
 800466e:	4b0d      	ldr	r3, [pc, #52]	@ (80046a4 <MX_DMA_Init+0x48>)
 8004670:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004672:	f003 0301 	and.w	r3, r3, #1
 8004676:	607b      	str	r3, [r7, #4]
 8004678:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800467a:	2200      	movs	r2, #0
 800467c:	2100      	movs	r1, #0
 800467e:	200e      	movs	r0, #14
 8004680:	f001 f9a6 	bl	80059d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8004684:	200e      	movs	r0, #14
 8004686:	f001 f9cf 	bl	8005a28 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800468a:	2200      	movs	r2, #0
 800468c:	2100      	movs	r1, #0
 800468e:	200f      	movs	r0, #15
 8004690:	f001 f99e 	bl	80059d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8004694:	200f      	movs	r0, #15
 8004696:	f001 f9c7 	bl	8005a28 <HAL_NVIC_EnableIRQ>

}
 800469a:	bf00      	nop
 800469c:	3708      	adds	r7, #8
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}
 80046a2:	bf00      	nop
 80046a4:	40021000 	.word	0x40021000

080046a8 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b08c      	sub	sp, #48	@ 0x30
 80046ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046ae:	f107 031c 	add.w	r3, r7, #28
 80046b2:	2200      	movs	r2, #0
 80046b4:	601a      	str	r2, [r3, #0]
 80046b6:	605a      	str	r2, [r3, #4]
 80046b8:	609a      	str	r2, [r3, #8]
 80046ba:	60da      	str	r2, [r3, #12]
 80046bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80046be:	4b4d      	ldr	r3, [pc, #308]	@ (80047f4 <MX_GPIO_Init+0x14c>)
 80046c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046c2:	4a4c      	ldr	r2, [pc, #304]	@ (80047f4 <MX_GPIO_Init+0x14c>)
 80046c4:	f043 0310 	orr.w	r3, r3, #16
 80046c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80046ca:	4b4a      	ldr	r3, [pc, #296]	@ (80047f4 <MX_GPIO_Init+0x14c>)
 80046cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046ce:	f003 0310 	and.w	r3, r3, #16
 80046d2:	61bb      	str	r3, [r7, #24]
 80046d4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80046d6:	4b47      	ldr	r3, [pc, #284]	@ (80047f4 <MX_GPIO_Init+0x14c>)
 80046d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046da:	4a46      	ldr	r2, [pc, #280]	@ (80047f4 <MX_GPIO_Init+0x14c>)
 80046dc:	f043 0304 	orr.w	r3, r3, #4
 80046e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80046e2:	4b44      	ldr	r3, [pc, #272]	@ (80047f4 <MX_GPIO_Init+0x14c>)
 80046e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046e6:	f003 0304 	and.w	r3, r3, #4
 80046ea:	617b      	str	r3, [r7, #20]
 80046ec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80046ee:	4b41      	ldr	r3, [pc, #260]	@ (80047f4 <MX_GPIO_Init+0x14c>)
 80046f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046f2:	4a40      	ldr	r2, [pc, #256]	@ (80047f4 <MX_GPIO_Init+0x14c>)
 80046f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80046f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80046fa:	4b3e      	ldr	r3, [pc, #248]	@ (80047f4 <MX_GPIO_Init+0x14c>)
 80046fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004702:	613b      	str	r3, [r7, #16]
 8004704:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004706:	4b3b      	ldr	r3, [pc, #236]	@ (80047f4 <MX_GPIO_Init+0x14c>)
 8004708:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800470a:	4a3a      	ldr	r2, [pc, #232]	@ (80047f4 <MX_GPIO_Init+0x14c>)
 800470c:	f043 0301 	orr.w	r3, r3, #1
 8004710:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004712:	4b38      	ldr	r3, [pc, #224]	@ (80047f4 <MX_GPIO_Init+0x14c>)
 8004714:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004716:	f003 0301 	and.w	r3, r3, #1
 800471a:	60fb      	str	r3, [r7, #12]
 800471c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800471e:	4b35      	ldr	r3, [pc, #212]	@ (80047f4 <MX_GPIO_Init+0x14c>)
 8004720:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004722:	4a34      	ldr	r2, [pc, #208]	@ (80047f4 <MX_GPIO_Init+0x14c>)
 8004724:	f043 0302 	orr.w	r3, r3, #2
 8004728:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800472a:	4b32      	ldr	r3, [pc, #200]	@ (80047f4 <MX_GPIO_Init+0x14c>)
 800472c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800472e:	f003 0302 	and.w	r3, r3, #2
 8004732:	60bb      	str	r3, [r7, #8]
 8004734:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004736:	4b2f      	ldr	r3, [pc, #188]	@ (80047f4 <MX_GPIO_Init+0x14c>)
 8004738:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800473a:	4a2e      	ldr	r2, [pc, #184]	@ (80047f4 <MX_GPIO_Init+0x14c>)
 800473c:	f043 0308 	orr.w	r3, r3, #8
 8004740:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004742:	4b2c      	ldr	r3, [pc, #176]	@ (80047f4 <MX_GPIO_Init+0x14c>)
 8004744:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004746:	f003 0308 	and.w	r3, r3, #8
 800474a:	607b      	str	r3, [r7, #4]
 800474c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE7 PE8 PE9
                           PE10 PE11 PE12 PE13
                           PE14 PE15 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 800474e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004752:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004754:	2303      	movs	r3, #3
 8004756:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004758:	2300      	movs	r3, #0
 800475a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800475c:	f107 031c 	add.w	r3, r7, #28
 8004760:	4619      	mov	r1, r3
 8004762:	4825      	ldr	r0, [pc, #148]	@ (80047f8 <MX_GPIO_Init+0x150>)
 8004764:	f001 fcca 	bl	80060fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 PC1
                           PC3 PC4 PC5 PC6
                           PC7 PC8 PC9 PC10
                           PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_1
 8004768:	f64f 73fa 	movw	r3, #65530	@ 0xfffa
 800476c:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800476e:	2303      	movs	r3, #3
 8004770:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004772:	2300      	movs	r3, #0
 8004774:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004776:	f107 031c 	add.w	r3, r7, #28
 800477a:	4619      	mov	r1, r3
 800477c:	481f      	ldr	r0, [pc, #124]	@ (80047fc <MX_GPIO_Init+0x154>)
 800477e:	f001 fcbd 	bl	80060fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004782:	2303      	movs	r3, #3
 8004784:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004786:	2303      	movs	r3, #3
 8004788:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800478a:	2300      	movs	r3, #0
 800478c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800478e:	f107 031c 	add.w	r3, r7, #28
 8004792:	4619      	mov	r1, r3
 8004794:	481a      	ldr	r0, [pc, #104]	@ (8004800 <MX_GPIO_Init+0x158>)
 8004796:	f001 fcb1 	bl	80060fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 PA5 PA8
                           PA9 PA10 PA11 PA12
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8
 800479a:	f649 7338 	movw	r3, #40760	@ 0x9f38
 800479e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80047a0:	2303      	movs	r3, #3
 80047a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047a4:	2300      	movs	r3, #0
 80047a6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047a8:	f107 031c 	add.w	r3, r7, #28
 80047ac:	4619      	mov	r1, r3
 80047ae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80047b2:	f001 fca3 	bl	80060fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB14 PB15
                           PB4 PB5 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 80047b6:	f64d 7337 	movw	r3, #57143	@ 0xdf37
 80047ba:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80047bc:	2303      	movs	r3, #3
 80047be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047c0:	2300      	movs	r3, #0
 80047c2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80047c4:	f107 031c 	add.w	r3, r7, #28
 80047c8:	4619      	mov	r1, r3
 80047ca:	480e      	ldr	r0, [pc, #56]	@ (8004804 <MX_GPIO_Init+0x15c>)
 80047cc:	f001 fc96 	bl	80060fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15
                           PD2 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80047d0:	f64f 73e4 	movw	r3, #65508	@ 0xffe4
 80047d4:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80047d6:	2303      	movs	r3, #3
 80047d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047da:	2300      	movs	r3, #0
 80047dc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80047de:	f107 031c 	add.w	r3, r7, #28
 80047e2:	4619      	mov	r1, r3
 80047e4:	4808      	ldr	r0, [pc, #32]	@ (8004808 <MX_GPIO_Init+0x160>)
 80047e6:	f001 fc89 	bl	80060fc <HAL_GPIO_Init>

}
 80047ea:	bf00      	nop
 80047ec:	3730      	adds	r7, #48	@ 0x30
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}
 80047f2:	bf00      	nop
 80047f4:	40021000 	.word	0x40021000
 80047f8:	48001000 	.word	0x48001000
 80047fc:	48000800 	.word	0x48000800
 8004800:	48001c00 	.word	0x48001c00
 8004804:	48000400 	.word	0x48000400
 8004808:	48000c00 	.word	0x48000c00

0800480c <MX_LPTIM1_Init>:

LPTIM_HandleTypeDef hlptim1;

/* LPTIM1 init function */
void MX_LPTIM1_Init(void)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8004810:	4b16      	ldr	r3, [pc, #88]	@ (800486c <MX_LPTIM1_Init+0x60>)
 8004812:	4a17      	ldr	r2, [pc, #92]	@ (8004870 <MX_LPTIM1_Init+0x64>)
 8004814:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8004816:	4b15      	ldr	r3, [pc, #84]	@ (800486c <MX_LPTIM1_Init+0x60>)
 8004818:	2200      	movs	r2, #0
 800481a:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 800481c:	4b13      	ldr	r3, [pc, #76]	@ (800486c <MX_LPTIM1_Init+0x60>)
 800481e:	2200      	movs	r2, #0
 8004820:	609a      	str	r2, [r3, #8]
  hlptim1.Init.UltraLowPowerClock.Polarity = LPTIM_CLOCKPOLARITY_RISING;
 8004822:	4b12      	ldr	r3, [pc, #72]	@ (800486c <MX_LPTIM1_Init+0x60>)
 8004824:	2200      	movs	r2, #0
 8004826:	60da      	str	r2, [r3, #12]
  hlptim1.Init.UltraLowPowerClock.SampleTime = LPTIM_CLOCKSAMPLETIME_DIRECTTRANSITION;
 8004828:	4b10      	ldr	r3, [pc, #64]	@ (800486c <MX_LPTIM1_Init+0x60>)
 800482a:	2200      	movs	r2, #0
 800482c:	611a      	str	r2, [r3, #16]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 800482e:	4b0f      	ldr	r3, [pc, #60]	@ (800486c <MX_LPTIM1_Init+0x60>)
 8004830:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004834:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8004836:	4b0d      	ldr	r3, [pc, #52]	@ (800486c <MX_LPTIM1_Init+0x60>)
 8004838:	2200      	movs	r2, #0
 800483a:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 800483c:	4b0b      	ldr	r3, [pc, #44]	@ (800486c <MX_LPTIM1_Init+0x60>)
 800483e:	2200      	movs	r2, #0
 8004840:	625a      	str	r2, [r3, #36]	@ 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_EXTERNAL;
 8004842:	4b0a      	ldr	r3, [pc, #40]	@ (800486c <MX_LPTIM1_Init+0x60>)
 8004844:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004848:	629a      	str	r2, [r3, #40]	@ 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 800484a:	4b08      	ldr	r3, [pc, #32]	@ (800486c <MX_LPTIM1_Init+0x60>)
 800484c:	2200      	movs	r2, #0
 800484e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8004850:	4b06      	ldr	r3, [pc, #24]	@ (800486c <MX_LPTIM1_Init+0x60>)
 8004852:	2200      	movs	r2, #0
 8004854:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8004856:	4805      	ldr	r0, [pc, #20]	@ (800486c <MX_LPTIM1_Init+0x60>)
 8004858:	f001 ff62 	bl	8006720 <HAL_LPTIM_Init>
 800485c:	4603      	mov	r3, r0
 800485e:	2b00      	cmp	r3, #0
 8004860:	d001      	beq.n	8004866 <MX_LPTIM1_Init+0x5a>
  {
    Error_Handler();
 8004862:	f000 f977 	bl	8004b54 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8004866:	bf00      	nop
 8004868:	bd80      	pop	{r7, pc}
 800486a:	bf00      	nop
 800486c:	20000dc8 	.word	0x20000dc8
 8004870:	40007c00 	.word	0x40007c00

08004874 <HAL_LPTIM_MspInit>:

void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* lptimHandle)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b0ac      	sub	sp, #176	@ 0xb0
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800487c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8004880:	2200      	movs	r2, #0
 8004882:	601a      	str	r2, [r3, #0]
 8004884:	605a      	str	r2, [r3, #4]
 8004886:	609a      	str	r2, [r3, #8]
 8004888:	60da      	str	r2, [r3, #12]
 800488a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800488c:	f107 0314 	add.w	r3, r7, #20
 8004890:	2288      	movs	r2, #136	@ 0x88
 8004892:	2100      	movs	r1, #0
 8004894:	4618      	mov	r0, r3
 8004896:	f009 fe53 	bl	800e540 <memset>
  if(lptimHandle->Instance==LPTIM1)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a25      	ldr	r2, [pc, #148]	@ (8004934 <HAL_LPTIM_MspInit+0xc0>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d143      	bne.n	800492c <HAL_LPTIM_MspInit+0xb8>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 80048a4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80048a8:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_PCLK;
 80048aa:	2300      	movs	r3, #0
 80048ac:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80048ae:	f107 0314 	add.w	r3, r7, #20
 80048b2:	4618      	mov	r0, r3
 80048b4:	f003 fc50 	bl	8008158 <HAL_RCCEx_PeriphCLKConfig>
 80048b8:	4603      	mov	r3, r0
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d001      	beq.n	80048c2 <HAL_LPTIM_MspInit+0x4e>
    {
      Error_Handler();
 80048be:	f000 f949 	bl	8004b54 <Error_Handler>
    }

    /* LPTIM1 clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 80048c2:	4b1d      	ldr	r3, [pc, #116]	@ (8004938 <HAL_LPTIM_MspInit+0xc4>)
 80048c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048c6:	4a1c      	ldr	r2, [pc, #112]	@ (8004938 <HAL_LPTIM_MspInit+0xc4>)
 80048c8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80048cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80048ce:	4b1a      	ldr	r3, [pc, #104]	@ (8004938 <HAL_LPTIM_MspInit+0xc4>)
 80048d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048d2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80048d6:	613b      	str	r3, [r7, #16]
 80048d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80048da:	4b17      	ldr	r3, [pc, #92]	@ (8004938 <HAL_LPTIM_MspInit+0xc4>)
 80048dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048de:	4a16      	ldr	r2, [pc, #88]	@ (8004938 <HAL_LPTIM_MspInit+0xc4>)
 80048e0:	f043 0304 	orr.w	r3, r3, #4
 80048e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80048e6:	4b14      	ldr	r3, [pc, #80]	@ (8004938 <HAL_LPTIM_MspInit+0xc4>)
 80048e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048ea:	f003 0304 	and.w	r3, r3, #4
 80048ee:	60fb      	str	r3, [r7, #12]
 80048f0:	68fb      	ldr	r3, [r7, #12]
    /**LPTIM1 GPIO Configuration
    PC0     ------> LPTIM1_IN1
    PC2     ------> LPTIM1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 80048f2:	2305      	movs	r3, #5
 80048f4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048f8:	2302      	movs	r3, #2
 80048fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048fe:	2300      	movs	r3, #0
 8004900:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004904:	2300      	movs	r3, #0
 8004906:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF1_LPTIM1;
 800490a:	2301      	movs	r3, #1
 800490c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004910:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8004914:	4619      	mov	r1, r3
 8004916:	4809      	ldr	r0, [pc, #36]	@ (800493c <HAL_LPTIM_MspInit+0xc8>)
 8004918:	f001 fbf0 	bl	80060fc <HAL_GPIO_Init>

    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 800491c:	2200      	movs	r2, #0
 800491e:	2100      	movs	r1, #0
 8004920:	2041      	movs	r0, #65	@ 0x41
 8004922:	f001 f855 	bl	80059d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 8004926:	2041      	movs	r0, #65	@ 0x41
 8004928:	f001 f87e 	bl	8005a28 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }
}
 800492c:	bf00      	nop
 800492e:	37b0      	adds	r7, #176	@ 0xb0
 8004930:	46bd      	mov	sp, r7
 8004932:	bd80      	pop	{r7, pc}
 8004934:	40007c00 	.word	0x40007c00
 8004938:	40021000 	.word	0x40021000
 800493c:	48000800 	.word	0x48000800

08004940 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004944:	f000 fedf 	bl	8005706 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004948:	f000 f82a 	bl	80049a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800494c:	f7ff feac 	bl	80046a8 <MX_GPIO_Init>
  MX_DMA_Init();
 8004950:	f7ff fe84 	bl	800465c <MX_DMA_Init>
  MX_SPI2_Init();
 8004954:	f000 f922 	bl	8004b9c <MX_SPI2_Init>
  MX_TIM6_Init();
 8004958:	f000 fbf0 	bl	800513c <MX_TIM6_Init>
  MX_TIM5_Init();
 800495c:	f000 fb98 	bl	8005090 <MX_TIM5_Init>
  MX_TIM7_Init();
 8004960:	f000 fc22 	bl	80051a8 <MX_TIM7_Init>
  MX_TIM3_Init();
 8004964:	f000 fb3e 	bl	8004fe4 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8004968:	f000 fe16 	bl	8005598 <MX_USART1_UART_Init>
  MX_TIM15_Init();
 800496c:	f000 fc52 	bl	8005214 <MX_TIM15_Init>
  MX_LPTIM1_Init();
 8004970:	f7ff ff4c 	bl	800480c <MX_LPTIM1_Init>
  /* USER CODE BEGIN 2 */
    board_config_apply_motion_gpio();
 8004974:	f7ff fdaa 	bl	80044cc <board_config_apply_motion_gpio>
    board_config_force_encoder_quadrature();
 8004978:	f7ff fe06 	bl	8004588 <board_config_force_encoder_quadrature>
    board_config_apply_interrupt_priorities();
 800497c:	f7ff fe12 	bl	80045a4 <board_config_apply_interrupt_priorities>
    app_init();
 8004980:	f7ff fc8c 	bl	800429c <app_init>
    // Inicia timers do laço de passos (TIM6) e controle/status (TIM7)
    HAL_TIM_Base_Start_IT(&htim6);
 8004984:	4804      	ldr	r0, [pc, #16]	@ (8004998 <main+0x58>)
 8004986:	f005 fbe1 	bl	800a14c <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(&htim7);
 800498a:	4804      	ldr	r0, [pc, #16]	@ (800499c <main+0x5c>)
 800498c:	f005 fbde 	bl	800a14c <HAL_TIM_Base_Start_IT>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    //printf("oioioioioioi2\r\n");
    //HAL_Delay(1000);
    app_poll();
 8004990:	f7ff fcba 	bl	8004308 <app_poll>
 8004994:	e7fc      	b.n	8004990 <main+0x50>
 8004996:	bf00      	nop
 8004998:	20000f98 	.word	0x20000f98
 800499c:	20000fe4 	.word	0x20000fe4

080049a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b096      	sub	sp, #88	@ 0x58
 80049a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80049a6:	f107 0314 	add.w	r3, r7, #20
 80049aa:	2244      	movs	r2, #68	@ 0x44
 80049ac:	2100      	movs	r1, #0
 80049ae:	4618      	mov	r0, r3
 80049b0:	f009 fdc6 	bl	800e540 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80049b4:	463b      	mov	r3, r7
 80049b6:	2200      	movs	r2, #0
 80049b8:	601a      	str	r2, [r3, #0]
 80049ba:	605a      	str	r2, [r3, #4]
 80049bc:	609a      	str	r2, [r3, #8]
 80049be:	60da      	str	r2, [r3, #12]
 80049c0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80049c2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80049c6:	f002 fb9f 	bl	8007108 <HAL_PWREx_ControlVoltageScaling>
 80049ca:	4603      	mov	r3, r0
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d001      	beq.n	80049d4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80049d0:	f000 f8c0 	bl	8004b54 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80049d4:	2310      	movs	r3, #16
 80049d6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80049d8:	2301      	movs	r3, #1
 80049da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80049dc:	2300      	movs	r3, #0
 80049de:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80049e0:	2360      	movs	r3, #96	@ 0x60
 80049e2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80049e4:	2302      	movs	r3, #2
 80049e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80049e8:	2301      	movs	r3, #1
 80049ea:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80049ec:	2301      	movs	r3, #1
 80049ee:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80049f0:	2328      	movs	r3, #40	@ 0x28
 80049f2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80049f4:	2307      	movs	r3, #7
 80049f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80049f8:	2302      	movs	r3, #2
 80049fa:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80049fc:	2302      	movs	r3, #2
 80049fe:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004a00:	f107 0314 	add.w	r3, r7, #20
 8004a04:	4618      	mov	r0, r3
 8004a06:	f002 fbe1 	bl	80071cc <HAL_RCC_OscConfig>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d001      	beq.n	8004a14 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8004a10:	f000 f8a0 	bl	8004b54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004a14:	230f      	movs	r3, #15
 8004a16:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004a18:	2303      	movs	r3, #3
 8004a1a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004a20:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004a24:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004a26:	2300      	movs	r3, #0
 8004a28:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004a2a:	463b      	mov	r3, r7
 8004a2c:	2104      	movs	r1, #4
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f003 f8ce 	bl	8007bd0 <HAL_RCC_ClockConfig>
 8004a34:	4603      	mov	r3, r0
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d001      	beq.n	8004a3e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8004a3a:	f000 f88b 	bl	8004b54 <Error_Handler>
  }
}
 8004a3e:	bf00      	nop
 8004a40:	3758      	adds	r7, #88	@ 0x58
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}

08004a46 <HAL_SPI_TxRxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004a46:	b580      	push	{r7, lr}
 8004a48:	b082      	sub	sp, #8
 8004a4a:	af00      	add	r7, sp, #0
 8004a4c:	6078      	str	r0, [r7, #4]
    app_spi_isr_txrx_done(hspi);
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f7ff fc98 	bl	8004384 <app_spi_isr_txrx_done>
}
 8004a54:	bf00      	nop
 8004a56:	3708      	adds	r7, #8
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}

08004a5c <HAL_SPI_ErrorCallback>:

void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b082      	sub	sp, #8
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
    if (hspi == NULL) return;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d013      	beq.n	8004a92 <HAL_SPI_ErrorCallback+0x36>
    if (hspi->Instance != APP_SPI_INSTANCE) return;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a0c      	ldr	r2, [pc, #48]	@ (8004aa0 <HAL_SPI_ErrorCallback+0x44>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d110      	bne.n	8004a96 <HAL_SPI_ErrorCallback+0x3a>

    g_spi_last_error = hspi->ErrorCode;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a78:	4a0a      	ldr	r2, [pc, #40]	@ (8004aa4 <HAL_SPI_ErrorCallback+0x48>)
 8004a7a:	6013      	str	r3, [r2, #0]
    g_spi_error_count++;
 8004a7c:	4b0a      	ldr	r3, [pc, #40]	@ (8004aa8 <HAL_SPI_ErrorCallback+0x4c>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	3301      	adds	r3, #1
 8004a82:	4a09      	ldr	r2, [pc, #36]	@ (8004aa8 <HAL_SPI_ErrorCallback+0x4c>)
 8004a84:	6013      	str	r3, [r2, #0]

    /* Indicação visual simples para diagnóstico */
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8004a86:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004a8a:	4808      	ldr	r0, [pc, #32]	@ (8004aac <HAL_SPI_ErrorCallback+0x50>)
 8004a8c:	f001 fe0e 	bl	80066ac <HAL_GPIO_TogglePin>
 8004a90:	e002      	b.n	8004a98 <HAL_SPI_ErrorCallback+0x3c>
    if (hspi == NULL) return;
 8004a92:	bf00      	nop
 8004a94:	e000      	b.n	8004a98 <HAL_SPI_ErrorCallback+0x3c>
    if (hspi->Instance != APP_SPI_INSTANCE) return;
 8004a96:	bf00      	nop
}
 8004a98:	3708      	adds	r7, #8
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}
 8004a9e:	bf00      	nop
 8004aa0:	40003800 	.word	0x40003800
 8004aa4:	20000e04 	.word	0x20000e04
 8004aa8:	20000e00 	.word	0x20000e00
 8004aac:	48000400 	.word	0x48000400

08004ab0 <HAL_GPIO_EXTI_Callback>:
/* Botões de segurança (EXTI):
 * - B1 (PC13): E-STOP imediato (pressionado = nível baixo)
 * - B2 (PC0): Release/recover + funções extras do demo (pressionado = baixo)
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b082      	sub	sp, #8
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	80fb      	strh	r3, [r7, #6]
    switch (GPIO_Pin) {
 8004aba:	88fb      	ldrh	r3, [r7, #6]
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d019      	beq.n	8004af4 <HAL_GPIO_EXTI_Callback+0x44>
 8004ac0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ac4:	d135      	bne.n	8004b32 <HAL_GPIO_EXTI_Callback+0x82>
    case GPIO_PIN_13: /* B1 - E-STOP */
        if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET) {
 8004ac6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004aca:	481e      	ldr	r0, [pc, #120]	@ (8004b44 <HAL_GPIO_EXTI_Callback+0x94>)
 8004acc:	f001 fda2 	bl	8006614 <HAL_GPIO_ReadPin>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d12f      	bne.n	8004b36 <HAL_GPIO_EXTI_Callback+0x86>
            /* Pressionado: aciona E-STOP e para tudo agora */
            safety_estop_assert();
 8004ad6:	f7ff f9eb 	bl	8003eb0 <safety_estop_assert>
            motion_emergency_stop();
 8004ada:	f7ff f8f3 	bl	8003cc4 <motion_emergency_stop>
            /* Opcionalmente interrompe os timers para cessar qualquer atividade em ISR */
            HAL_TIM_Base_Stop_IT(&htim6);
 8004ade:	481a      	ldr	r0, [pc, #104]	@ (8004b48 <HAL_GPIO_EXTI_Callback+0x98>)
 8004ae0:	f005 fbe8 	bl	800a2b4 <HAL_TIM_Base_Stop_IT>
            HAL_TIM_Base_Stop_IT(&htim7);
 8004ae4:	4819      	ldr	r0, [pc, #100]	@ (8004b4c <HAL_GPIO_EXTI_Callback+0x9c>)
 8004ae6:	f005 fbe5 	bl	800a2b4 <HAL_TIM_Base_Stop_IT>
            /* Se houver PWM em TIM15 (LED/auxiliar), pare também */
            HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_1);
 8004aea:	2100      	movs	r1, #0
 8004aec:	4818      	ldr	r0, [pc, #96]	@ (8004b50 <HAL_GPIO_EXTI_Callback+0xa0>)
 8004aee:	f005 ff25 	bl	800a93c <HAL_TIM_PWM_Stop>
        }
        break;
 8004af2:	e020      	b.n	8004b36 <HAL_GPIO_EXTI_Callback+0x86>
    case GPIO_PIN_0:  /* B2 - Release/Resume + demo speed step */
        if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0) == GPIO_PIN_RESET) {
 8004af4:	2101      	movs	r1, #1
 8004af6:	4813      	ldr	r0, [pc, #76]	@ (8004b44 <HAL_GPIO_EXTI_Callback+0x94>)
 8004af8:	f001 fd8c 	bl	8006614 <HAL_GPIO_ReadPin>
 8004afc:	4603      	mov	r3, r0
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d11b      	bne.n	8004b3a <HAL_GPIO_EXTI_Callback+0x8a>
            /* Libera segurança */
            safety_estop_release();
 8004b02:	f7ff f9f5 	bl	8003ef0 <safety_estop_release>
            /* Garante que os timers base voltem a rodar */
            HAL_TIM_Base_Start_IT(&htim6);
 8004b06:	4810      	ldr	r0, [pc, #64]	@ (8004b48 <HAL_GPIO_EXTI_Callback+0x98>)
 8004b08:	f005 fb20 	bl	800a14c <HAL_TIM_Base_Start_IT>
            HAL_TIM_Base_Start_IT(&htim7);
 8004b0c:	480f      	ldr	r0, [pc, #60]	@ (8004b4c <HAL_GPIO_EXTI_Callback+0x9c>)
 8004b0e:	f005 fb1d 	bl	800a14c <HAL_TIM_Base_Start_IT>
            /* Reativa movimentos conforme contexto */
            if (motion_demo_is_active()) {
 8004b12:	f7ff f905 	bl	8003d20 <motion_demo_is_active>
 8004b16:	4603      	mov	r3, r0
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d002      	beq.n	8004b22 <HAL_GPIO_EXTI_Callback+0x72>
                /* Cicla velocidade no modo demo contínuo */
                motion_demo_cycle_speed();
 8004b1c:	f7ff f912 	bl	8003d44 <motion_demo_cycle_speed>
                motion_demo_set_continuous(1);
                /* Se usa PWM em TIM15 para indicação, retome */
                HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
            }
        }
        break;
 8004b20:	e00b      	b.n	8004b3a <HAL_GPIO_EXTI_Callback+0x8a>
                motion_demo_set_continuous(1);
 8004b22:	2001      	movs	r0, #1
 8004b24:	f7ff f808 	bl	8003b38 <motion_demo_set_continuous>
                HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 8004b28:	2100      	movs	r1, #0
 8004b2a:	4809      	ldr	r0, [pc, #36]	@ (8004b50 <HAL_GPIO_EXTI_Callback+0xa0>)
 8004b2c:	f005 fd56 	bl	800a5dc <HAL_TIM_PWM_Start>
        break;
 8004b30:	e003      	b.n	8004b3a <HAL_GPIO_EXTI_Callback+0x8a>
    case GPIO_PIN_1:
    case GPIO_PIN_2:
    default:
        /* Reservado para sensores PROX/limites; sem ação específica aqui */
        break;
 8004b32:	bf00      	nop
 8004b34:	e002      	b.n	8004b3c <HAL_GPIO_EXTI_Callback+0x8c>
        break;
 8004b36:	bf00      	nop
 8004b38:	e000      	b.n	8004b3c <HAL_GPIO_EXTI_Callback+0x8c>
        break;
 8004b3a:	bf00      	nop
    }
}
 8004b3c:	bf00      	nop
 8004b3e:	3708      	adds	r7, #8
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}
 8004b44:	48000800 	.word	0x48000800
 8004b48:	20000f98 	.word	0x20000f98
 8004b4c:	20000fe4 	.word	0x20000fe4
 8004b50:	20001030 	.word	0x20001030

08004b54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
#if LOG_ENABLE
	log_event_ids(LOG_SVC_APP, LOG_STATE_ERROR, -1);
 8004b58:	f04f 32ff 	mov.w	r2, #4294967295
 8004b5c:	2164      	movs	r1, #100	@ 0x64
 8004b5e:	2000      	movs	r0, #0
 8004b60:	f7fd f998 	bl	8001e94 <log_event_ids>
	log_event_names("app", "error", "Error_Handler");
 8004b64:	4a04      	ldr	r2, [pc, #16]	@ (8004b78 <Error_Handler+0x24>)
 8004b66:	4905      	ldr	r1, [pc, #20]	@ (8004b7c <Error_Handler+0x28>)
 8004b68:	4805      	ldr	r0, [pc, #20]	@ (8004b80 <Error_Handler+0x2c>)
 8004b6a:	f7fd f9a7 	bl	8001ebc <log_event_names>
  __ASM volatile ("cpsid i" : : : "memory");
 8004b6e:	b672      	cpsid	i
}
 8004b70:	bf00      	nop
#endif
	__disable_irq();
	while (1) {
 8004b72:	bf00      	nop
 8004b74:	e7fd      	b.n	8004b72 <Error_Handler+0x1e>
 8004b76:	bf00      	nop
 8004b78:	0800f844 	.word	0x0800f844
 8004b7c:	0800f854 	.word	0x0800f854
 8004b80:	0800f85c 	.word	0x0800f85c

08004b84 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b083      	sub	sp, #12
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
 8004b8c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
	 ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8004b8e:	bf00      	nop
 8004b90:	370c      	adds	r7, #12
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr
	...

08004b9c <MX_SPI2_Init>:
DMA_HandleTypeDef hdma_spi2_rx;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8004ba0:	4b18      	ldr	r3, [pc, #96]	@ (8004c04 <MX_SPI2_Init+0x68>)
 8004ba2:	4a19      	ldr	r2, [pc, #100]	@ (8004c08 <MX_SPI2_Init+0x6c>)
 8004ba4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8004ba6:	4b17      	ldr	r3, [pc, #92]	@ (8004c04 <MX_SPI2_Init+0x68>)
 8004ba8:	2200      	movs	r2, #0
 8004baa:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8004bac:	4b15      	ldr	r3, [pc, #84]	@ (8004c04 <MX_SPI2_Init+0x68>)
 8004bae:	2200      	movs	r2, #0
 8004bb0:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8004bb2:	4b14      	ldr	r3, [pc, #80]	@ (8004c04 <MX_SPI2_Init+0x68>)
 8004bb4:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8004bb8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8004bba:	4b12      	ldr	r3, [pc, #72]	@ (8004c04 <MX_SPI2_Init+0x68>)
 8004bbc:	2202      	movs	r2, #2
 8004bbe:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8004bc0:	4b10      	ldr	r3, [pc, #64]	@ (8004c04 <MX_SPI2_Init+0x68>)
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 8004bc6:	4b0f      	ldr	r3, [pc, #60]	@ (8004c04 <MX_SPI2_Init+0x68>)
 8004bc8:	2200      	movs	r2, #0
 8004bca:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004bcc:	4b0d      	ldr	r3, [pc, #52]	@ (8004c04 <MX_SPI2_Init+0x68>)
 8004bce:	2200      	movs	r2, #0
 8004bd0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8004bd2:	4b0c      	ldr	r3, [pc, #48]	@ (8004c04 <MX_SPI2_Init+0x68>)
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004bd8:	4b0a      	ldr	r3, [pc, #40]	@ (8004c04 <MX_SPI2_Init+0x68>)
 8004bda:	2200      	movs	r2, #0
 8004bdc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8004bde:	4b09      	ldr	r3, [pc, #36]	@ (8004c04 <MX_SPI2_Init+0x68>)
 8004be0:	2207      	movs	r2, #7
 8004be2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004be4:	4b07      	ldr	r3, [pc, #28]	@ (8004c04 <MX_SPI2_Init+0x68>)
 8004be6:	2200      	movs	r2, #0
 8004be8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8004bea:	4b06      	ldr	r3, [pc, #24]	@ (8004c04 <MX_SPI2_Init+0x68>)
 8004bec:	2200      	movs	r2, #0
 8004bee:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8004bf0:	4804      	ldr	r0, [pc, #16]	@ (8004c04 <MX_SPI2_Init+0x68>)
 8004bf2:	f004 fa39 	bl	8009068 <HAL_SPI_Init>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d001      	beq.n	8004c00 <MX_SPI2_Init+0x64>
  {
    Error_Handler();
 8004bfc:	f7ff ffaa 	bl	8004b54 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8004c00:	bf00      	nop
 8004c02:	bd80      	pop	{r7, pc}
 8004c04:	20000e08 	.word	0x20000e08
 8004c08:	40003800 	.word	0x40003800

08004c0c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b08a      	sub	sp, #40	@ 0x28
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c14:	f107 0314 	add.w	r3, r7, #20
 8004c18:	2200      	movs	r2, #0
 8004c1a:	601a      	str	r2, [r3, #0]
 8004c1c:	605a      	str	r2, [r3, #4]
 8004c1e:	609a      	str	r2, [r3, #8]
 8004c20:	60da      	str	r2, [r3, #12]
 8004c22:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a44      	ldr	r2, [pc, #272]	@ (8004d3c <HAL_SPI_MspInit+0x130>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	f040 8082 	bne.w	8004d34 <HAL_SPI_MspInit+0x128>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004c30:	4b43      	ldr	r3, [pc, #268]	@ (8004d40 <HAL_SPI_MspInit+0x134>)
 8004c32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c34:	4a42      	ldr	r2, [pc, #264]	@ (8004d40 <HAL_SPI_MspInit+0x134>)
 8004c36:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004c3a:	6593      	str	r3, [r2, #88]	@ 0x58
 8004c3c:	4b40      	ldr	r3, [pc, #256]	@ (8004d40 <HAL_SPI_MspInit+0x134>)
 8004c3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c40:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c44:	613b      	str	r3, [r7, #16]
 8004c46:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004c48:	4b3d      	ldr	r3, [pc, #244]	@ (8004d40 <HAL_SPI_MspInit+0x134>)
 8004c4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c4c:	4a3c      	ldr	r2, [pc, #240]	@ (8004d40 <HAL_SPI_MspInit+0x134>)
 8004c4e:	f043 0308 	orr.w	r3, r3, #8
 8004c52:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004c54:	4b3a      	ldr	r3, [pc, #232]	@ (8004d40 <HAL_SPI_MspInit+0x134>)
 8004c56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c58:	f003 0308 	and.w	r3, r3, #8
 8004c5c:	60fb      	str	r3, [r7, #12]
 8004c5e:	68fb      	ldr	r3, [r7, #12]
    PD0     ------> SPI2_NSS
    PD1     ------> SPI2_SCK
    PD3     ------> SPI2_MISO
    PD4     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4;
 8004c60:	231b      	movs	r3, #27
 8004c62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c64:	2302      	movs	r3, #2
 8004c66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c6c:	2303      	movs	r3, #3
 8004c6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004c70:	2305      	movs	r3, #5
 8004c72:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004c74:	f107 0314 	add.w	r3, r7, #20
 8004c78:	4619      	mov	r1, r3
 8004c7a:	4832      	ldr	r0, [pc, #200]	@ (8004d44 <HAL_SPI_MspInit+0x138>)
 8004c7c:	f001 fa3e 	bl	80060fc <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 8004c80:	4b31      	ldr	r3, [pc, #196]	@ (8004d48 <HAL_SPI_MspInit+0x13c>)
 8004c82:	4a32      	ldr	r2, [pc, #200]	@ (8004d4c <HAL_SPI_MspInit+0x140>)
 8004c84:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_1;
 8004c86:	4b30      	ldr	r3, [pc, #192]	@ (8004d48 <HAL_SPI_MspInit+0x13c>)
 8004c88:	2201      	movs	r2, #1
 8004c8a:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004c8c:	4b2e      	ldr	r3, [pc, #184]	@ (8004d48 <HAL_SPI_MspInit+0x13c>)
 8004c8e:	2200      	movs	r2, #0
 8004c90:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004c92:	4b2d      	ldr	r3, [pc, #180]	@ (8004d48 <HAL_SPI_MspInit+0x13c>)
 8004c94:	2200      	movs	r2, #0
 8004c96:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004c98:	4b2b      	ldr	r3, [pc, #172]	@ (8004d48 <HAL_SPI_MspInit+0x13c>)
 8004c9a:	2280      	movs	r2, #128	@ 0x80
 8004c9c:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004c9e:	4b2a      	ldr	r3, [pc, #168]	@ (8004d48 <HAL_SPI_MspInit+0x13c>)
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004ca4:	4b28      	ldr	r3, [pc, #160]	@ (8004d48 <HAL_SPI_MspInit+0x13c>)
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8004caa:	4b27      	ldr	r3, [pc, #156]	@ (8004d48 <HAL_SPI_MspInit+0x13c>)
 8004cac:	2220      	movs	r2, #32
 8004cae:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004cb0:	4b25      	ldr	r3, [pc, #148]	@ (8004d48 <HAL_SPI_MspInit+0x13c>)
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8004cb6:	4824      	ldr	r0, [pc, #144]	@ (8004d48 <HAL_SPI_MspInit+0x13c>)
 8004cb8:	f000 feda 	bl	8005a70 <HAL_DMA_Init>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d001      	beq.n	8004cc6 <HAL_SPI_MspInit+0xba>
    {
      Error_Handler();
 8004cc2:	f7ff ff47 	bl	8004b54 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	4a1f      	ldr	r2, [pc, #124]	@ (8004d48 <HAL_SPI_MspInit+0x13c>)
 8004cca:	659a      	str	r2, [r3, #88]	@ 0x58
 8004ccc:	4a1e      	ldr	r2, [pc, #120]	@ (8004d48 <HAL_SPI_MspInit+0x13c>)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 8004cd2:	4b1f      	ldr	r3, [pc, #124]	@ (8004d50 <HAL_SPI_MspInit+0x144>)
 8004cd4:	4a1f      	ldr	r2, [pc, #124]	@ (8004d54 <HAL_SPI_MspInit+0x148>)
 8004cd6:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_1;
 8004cd8:	4b1d      	ldr	r3, [pc, #116]	@ (8004d50 <HAL_SPI_MspInit+0x144>)
 8004cda:	2201      	movs	r2, #1
 8004cdc:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004cde:	4b1c      	ldr	r3, [pc, #112]	@ (8004d50 <HAL_SPI_MspInit+0x144>)
 8004ce0:	2210      	movs	r2, #16
 8004ce2:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004ce4:	4b1a      	ldr	r3, [pc, #104]	@ (8004d50 <HAL_SPI_MspInit+0x144>)
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004cea:	4b19      	ldr	r3, [pc, #100]	@ (8004d50 <HAL_SPI_MspInit+0x144>)
 8004cec:	2280      	movs	r2, #128	@ 0x80
 8004cee:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004cf0:	4b17      	ldr	r3, [pc, #92]	@ (8004d50 <HAL_SPI_MspInit+0x144>)
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004cf6:	4b16      	ldr	r3, [pc, #88]	@ (8004d50 <HAL_SPI_MspInit+0x144>)
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8004cfc:	4b14      	ldr	r3, [pc, #80]	@ (8004d50 <HAL_SPI_MspInit+0x144>)
 8004cfe:	2220      	movs	r2, #32
 8004d00:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004d02:	4b13      	ldr	r3, [pc, #76]	@ (8004d50 <HAL_SPI_MspInit+0x144>)
 8004d04:	2200      	movs	r2, #0
 8004d06:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8004d08:	4811      	ldr	r0, [pc, #68]	@ (8004d50 <HAL_SPI_MspInit+0x144>)
 8004d0a:	f000 feb1 	bl	8005a70 <HAL_DMA_Init>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d001      	beq.n	8004d18 <HAL_SPI_MspInit+0x10c>
    {
      Error_Handler();
 8004d14:	f7ff ff1e 	bl	8004b54 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	4a0d      	ldr	r2, [pc, #52]	@ (8004d50 <HAL_SPI_MspInit+0x144>)
 8004d1c:	655a      	str	r2, [r3, #84]	@ 0x54
 8004d1e:	4a0c      	ldr	r2, [pc, #48]	@ (8004d50 <HAL_SPI_MspInit+0x144>)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8004d24:	2200      	movs	r2, #0
 8004d26:	2100      	movs	r1, #0
 8004d28:	2024      	movs	r0, #36	@ 0x24
 8004d2a:	f000 fe51 	bl	80059d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8004d2e:	2024      	movs	r0, #36	@ 0x24
 8004d30:	f000 fe7a 	bl	8005a28 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8004d34:	bf00      	nop
 8004d36:	3728      	adds	r7, #40	@ 0x28
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}
 8004d3c:	40003800 	.word	0x40003800
 8004d40:	40021000 	.word	0x40021000
 8004d44:	48000c00 	.word	0x48000c00
 8004d48:	20000e6c 	.word	0x20000e6c
 8004d4c:	40020044 	.word	0x40020044
 8004d50:	20000eb4 	.word	0x20000eb4
 8004d54:	40020058 	.word	0x40020058

08004d58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b083      	sub	sp, #12
 8004d5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d5e:	4b0f      	ldr	r3, [pc, #60]	@ (8004d9c <HAL_MspInit+0x44>)
 8004d60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d62:	4a0e      	ldr	r2, [pc, #56]	@ (8004d9c <HAL_MspInit+0x44>)
 8004d64:	f043 0301 	orr.w	r3, r3, #1
 8004d68:	6613      	str	r3, [r2, #96]	@ 0x60
 8004d6a:	4b0c      	ldr	r3, [pc, #48]	@ (8004d9c <HAL_MspInit+0x44>)
 8004d6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d6e:	f003 0301 	and.w	r3, r3, #1
 8004d72:	607b      	str	r3, [r7, #4]
 8004d74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004d76:	4b09      	ldr	r3, [pc, #36]	@ (8004d9c <HAL_MspInit+0x44>)
 8004d78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d7a:	4a08      	ldr	r2, [pc, #32]	@ (8004d9c <HAL_MspInit+0x44>)
 8004d7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d80:	6593      	str	r3, [r2, #88]	@ 0x58
 8004d82:	4b06      	ldr	r3, [pc, #24]	@ (8004d9c <HAL_MspInit+0x44>)
 8004d84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d8a:	603b      	str	r3, [r7, #0]
 8004d8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004d8e:	bf00      	nop
 8004d90:	370c      	adds	r7, #12
 8004d92:	46bd      	mov	sp, r7
 8004d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d98:	4770      	bx	lr
 8004d9a:	bf00      	nop
 8004d9c:	40021000 	.word	0x40021000

08004da0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004da0:	b480      	push	{r7}
 8004da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8004da4:	bf00      	nop
 8004da6:	e7fd      	b.n	8004da4 <NMI_Handler+0x4>

08004da8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004da8:	b480      	push	{r7}
 8004daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004dac:	bf00      	nop
 8004dae:	e7fd      	b.n	8004dac <HardFault_Handler+0x4>

08004db0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004db0:	b480      	push	{r7}
 8004db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004db4:	bf00      	nop
 8004db6:	e7fd      	b.n	8004db4 <MemManage_Handler+0x4>

08004db8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004db8:	b480      	push	{r7}
 8004dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004dbc:	bf00      	nop
 8004dbe:	e7fd      	b.n	8004dbc <BusFault_Handler+0x4>

08004dc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004dc4:	bf00      	nop
 8004dc6:	e7fd      	b.n	8004dc4 <UsageFault_Handler+0x4>

08004dc8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004dcc:	bf00      	nop
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr

08004dd6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004dd6:	b480      	push	{r7}
 8004dd8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004dda:	bf00      	nop
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de2:	4770      	bx	lr

08004de4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004de4:	b480      	push	{r7}
 8004de6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004de8:	bf00      	nop
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr

08004df2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004df2:	b580      	push	{r7, lr}
 8004df4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004df6:	f000 fcdb 	bl	80057b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004dfa:	bf00      	nop
 8004dfc:	bd80      	pop	{r7, pc}
	...

08004e00 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8004e04:	4802      	ldr	r0, [pc, #8]	@ (8004e10 <DMA1_Channel4_IRQHandler+0x10>)
 8004e06:	f001 f89a 	bl	8005f3e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8004e0a:	bf00      	nop
 8004e0c:	bd80      	pop	{r7, pc}
 8004e0e:	bf00      	nop
 8004e10:	20000e6c 	.word	0x20000e6c

08004e14 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8004e18:	4802      	ldr	r0, [pc, #8]	@ (8004e24 <DMA1_Channel5_IRQHandler+0x10>)
 8004e1a:	f001 f890 	bl	8005f3e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8004e1e:	bf00      	nop
 8004e20:	bd80      	pop	{r7, pc}
 8004e22:	bf00      	nop
 8004e24:	20000eb4 	.word	0x20000eb4

08004e28 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8004e2c:	4802      	ldr	r0, [pc, #8]	@ (8004e38 <SPI2_IRQHandler+0x10>)
 8004e2e:	f004 fcad 	bl	800978c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8004e32:	bf00      	nop
 8004e34:	bd80      	pop	{r7, pc}
 8004e36:	bf00      	nop
 8004e38:	20000e08 	.word	0x20000e08

08004e3c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004e40:	4802      	ldr	r0, [pc, #8]	@ (8004e4c <TIM6_DAC_IRQHandler+0x10>)
 8004e42:	f006 f92f 	bl	800b0a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004e46:	bf00      	nop
 8004e48:	bd80      	pop	{r7, pc}
 8004e4a:	bf00      	nop
 8004e4c:	20000f98 	.word	0x20000f98

08004e50 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8004e54:	4802      	ldr	r0, [pc, #8]	@ (8004e60 <TIM7_IRQHandler+0x10>)
 8004e56:	f006 f925 	bl	800b0a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8004e5a:	bf00      	nop
 8004e5c:	bd80      	pop	{r7, pc}
 8004e5e:	bf00      	nop
 8004e60:	20000fe4 	.word	0x20000fe4

08004e64 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 8004e68:	4802      	ldr	r0, [pc, #8]	@ (8004e74 <LPTIM1_IRQHandler+0x10>)
 8004e6a:	f001 ff1f 	bl	8006cac <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 8004e6e:	bf00      	nop
 8004e70:	bd80      	pop	{r7, pc}
 8004e72:	bf00      	nop
 8004e74:	20000dc8 	.word	0x20000dc8

08004e78 <EXTI0_IRQHandler>:

/* USER CODE BEGIN 1 */
void EXTI0_IRQHandler(void)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8004e7c:	2001      	movs	r0, #1
 8004e7e:	f001 fc37 	bl	80066f0 <HAL_GPIO_EXTI_IRQHandler>
}
 8004e82:	bf00      	nop
 8004e84:	bd80      	pop	{r7, pc}

08004e86 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8004e86:	b580      	push	{r7, lr}
 8004e88:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8004e8a:	2002      	movs	r0, #2
 8004e8c:	f001 fc30 	bl	80066f0 <HAL_GPIO_EXTI_IRQHandler>
}
 8004e90:	bf00      	nop
 8004e92:	bd80      	pop	{r7, pc}

08004e94 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8004e98:	2004      	movs	r0, #4
 8004e9a:	f001 fc29 	bl	80066f0 <HAL_GPIO_EXTI_IRQHandler>
}
 8004e9e:	bf00      	nop
 8004ea0:	bd80      	pop	{r7, pc}

08004ea2 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 8004ea2:	b580      	push	{r7, lr}
 8004ea4:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8004ea6:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8004eaa:	f001 fc21 	bl	80066f0 <HAL_GPIO_EXTI_IRQHandler>
}
 8004eae:	bf00      	nop
 8004eb0:	bd80      	pop	{r7, pc}

08004eb2 <_read>:
	_kill(status, -1);
	while (1) {
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 8004eb2:	b580      	push	{r7, lr}
 8004eb4:	b086      	sub	sp, #24
 8004eb6:	af00      	add	r7, sp, #0
 8004eb8:	60f8      	str	r0, [r7, #12]
 8004eba:	60b9      	str	r1, [r7, #8]
 8004ebc:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	617b      	str	r3, [r7, #20]
 8004ec2:	e00a      	b.n	8004eda <_read+0x28>
		*ptr++ = __io_getchar();
 8004ec4:	f3af 8000 	nop.w
 8004ec8:	4601      	mov	r1, r0
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	1c5a      	adds	r2, r3, #1
 8004ece:	60ba      	str	r2, [r7, #8]
 8004ed0:	b2ca      	uxtb	r2, r1
 8004ed2:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	3301      	adds	r3, #1
 8004ed8:	617b      	str	r3, [r7, #20]
 8004eda:	697a      	ldr	r2, [r7, #20]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	429a      	cmp	r2, r3
 8004ee0:	dbf0      	blt.n	8004ec4 <_read+0x12>
	}

	return len;
 8004ee2:	687b      	ldr	r3, [r7, #4]
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	3718      	adds	r7, #24
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}

08004eec <_close>:
		__io_putchar(*ptr++);
	}
	return len;
}

int _close(int file) {
 8004eec:	b480      	push	{r7}
 8004eee:	b083      	sub	sp, #12
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 8004ef4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	370c      	adds	r7, #12
 8004efc:	46bd      	mov	sp, r7
 8004efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f02:	4770      	bx	lr

08004f04 <_fstat>:

int _fstat(int file, struct stat *st) {
 8004f04:	b480      	push	{r7}
 8004f06:	b083      	sub	sp, #12
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
 8004f0c:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004f14:	605a      	str	r2, [r3, #4]
	return 0;
 8004f16:	2300      	movs	r3, #0
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	370c      	adds	r7, #12
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f22:	4770      	bx	lr

08004f24 <_isatty>:

int _isatty(int file) {
 8004f24:	b480      	push	{r7}
 8004f26:	b083      	sub	sp, #12
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 8004f2c:	2301      	movs	r3, #1
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	370c      	adds	r7, #12
 8004f32:	46bd      	mov	sp, r7
 8004f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f38:	4770      	bx	lr

08004f3a <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8004f3a:	b480      	push	{r7}
 8004f3c:	b085      	sub	sp, #20
 8004f3e:	af00      	add	r7, sp, #0
 8004f40:	60f8      	str	r0, [r7, #12]
 8004f42:	60b9      	str	r1, [r7, #8]
 8004f44:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 8004f46:	2300      	movs	r3, #0
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3714      	adds	r7, #20
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f52:	4770      	bx	lr

08004f54 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b086      	sub	sp, #24
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 8004f5c:	4a14      	ldr	r2, [pc, #80]	@ (8004fb0 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 8004f5e:	4b15      	ldr	r3, [pc, #84]	@ (8004fb4 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 8004f60:	1ad3      	subs	r3, r2, r3
 8004f62:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8004f68:	4b13      	ldr	r3, [pc, #76]	@ (8004fb8 <_sbrk+0x64>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d102      	bne.n	8004f76 <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 8004f70:	4b11      	ldr	r3, [pc, #68]	@ (8004fb8 <_sbrk+0x64>)
 8004f72:	4a12      	ldr	r2, [pc, #72]	@ (8004fbc <_sbrk+0x68>)
 8004f74:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 8004f76:	4b10      	ldr	r3, [pc, #64]	@ (8004fb8 <_sbrk+0x64>)
 8004f78:	681a      	ldr	r2, [r3, #0]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	4413      	add	r3, r2
 8004f7e:	693a      	ldr	r2, [r7, #16]
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d207      	bcs.n	8004f94 <_sbrk+0x40>
		errno = ENOMEM;
 8004f84:	f009 fb3a 	bl	800e5fc <__errno>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	220c      	movs	r2, #12
 8004f8c:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 8004f8e:	f04f 33ff 	mov.w	r3, #4294967295
 8004f92:	e009      	b.n	8004fa8 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8004f94:	4b08      	ldr	r3, [pc, #32]	@ (8004fb8 <_sbrk+0x64>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 8004f9a:	4b07      	ldr	r3, [pc, #28]	@ (8004fb8 <_sbrk+0x64>)
 8004f9c:	681a      	ldr	r2, [r3, #0]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	4413      	add	r3, r2
 8004fa2:	4a05      	ldr	r2, [pc, #20]	@ (8004fb8 <_sbrk+0x64>)
 8004fa4:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3718      	adds	r7, #24
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}
 8004fb0:	20018000 	.word	0x20018000
 8004fb4:	00000400 	.word	0x00000400
 8004fb8:	20000efc 	.word	0x20000efc
 8004fbc:	20001258 	.word	0x20001258

08004fc0 <SystemInit>:
/**
 * @brief  Setup the microcontroller system.
 * @retval None
 */

void SystemInit(void) {
 8004fc0:	b480      	push	{r7}
 8004fc2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 20U) | (3UL << 22U)); /* set CP10 and CP11 Full Access */
 8004fc4:	4b06      	ldr	r3, [pc, #24]	@ (8004fe0 <SystemInit+0x20>)
 8004fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fca:	4a05      	ldr	r2, [pc, #20]	@ (8004fe0 <SystemInit+0x20>)
 8004fcc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004fd0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8004fd4:	bf00      	nop
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fdc:	4770      	bx	lr
 8004fde:	bf00      	nop
 8004fe0:	e000ed00 	.word	0xe000ed00

08004fe4 <MX_TIM3_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim15;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b08c      	sub	sp, #48	@ 0x30
 8004fe8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004fea:	f107 030c 	add.w	r3, r7, #12
 8004fee:	2224      	movs	r2, #36	@ 0x24
 8004ff0:	2100      	movs	r1, #0
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f009 faa4 	bl	800e540 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004ff8:	463b      	mov	r3, r7
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	601a      	str	r2, [r3, #0]
 8004ffe:	605a      	str	r2, [r3, #4]
 8005000:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005002:	4b21      	ldr	r3, [pc, #132]	@ (8005088 <MX_TIM3_Init+0xa4>)
 8005004:	4a21      	ldr	r2, [pc, #132]	@ (800508c <MX_TIM3_Init+0xa8>)
 8005006:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8005008:	4b1f      	ldr	r3, [pc, #124]	@ (8005088 <MX_TIM3_Init+0xa4>)
 800500a:	2200      	movs	r2, #0
 800500c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800500e:	4b1e      	ldr	r3, [pc, #120]	@ (8005088 <MX_TIM3_Init+0xa4>)
 8005010:	2200      	movs	r2, #0
 8005012:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8005014:	4b1c      	ldr	r3, [pc, #112]	@ (8005088 <MX_TIM3_Init+0xa4>)
 8005016:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800501a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800501c:	4b1a      	ldr	r3, [pc, #104]	@ (8005088 <MX_TIM3_Init+0xa4>)
 800501e:	2200      	movs	r2, #0
 8005020:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005022:	4b19      	ldr	r3, [pc, #100]	@ (8005088 <MX_TIM3_Init+0xa4>)
 8005024:	2200      	movs	r2, #0
 8005026:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8005028:	2301      	movs	r3, #1
 800502a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800502c:	2300      	movs	r3, #0
 800502e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005030:	2301      	movs	r3, #1
 8005032:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005034:	2300      	movs	r3, #0
 8005036:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8005038:	2300      	movs	r3, #0
 800503a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800503c:	2300      	movs	r3, #0
 800503e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005040:	2301      	movs	r3, #1
 8005042:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005044:	2300      	movs	r3, #0
 8005046:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8005048:	2300      	movs	r3, #0
 800504a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800504c:	f107 030c 	add.w	r3, r7, #12
 8005050:	4619      	mov	r1, r3
 8005052:	480d      	ldr	r0, [pc, #52]	@ (8005088 <MX_TIM3_Init+0xa4>)
 8005054:	f005 fda6 	bl	800aba4 <HAL_TIM_Encoder_Init>
 8005058:	4603      	mov	r3, r0
 800505a:	2b00      	cmp	r3, #0
 800505c:	d001      	beq.n	8005062 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800505e:	f7ff fd79 	bl	8004b54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005062:	2300      	movs	r3, #0
 8005064:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005066:	2300      	movs	r3, #0
 8005068:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800506a:	463b      	mov	r3, r7
 800506c:	4619      	mov	r1, r3
 800506e:	4806      	ldr	r0, [pc, #24]	@ (8005088 <MX_TIM3_Init+0xa4>)
 8005070:	f007 fc7c 	bl	800c96c <HAL_TIMEx_MasterConfigSynchronization>
 8005074:	4603      	mov	r3, r0
 8005076:	2b00      	cmp	r3, #0
 8005078:	d001      	beq.n	800507e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800507a:	f7ff fd6b 	bl	8004b54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800507e:	bf00      	nop
 8005080:	3730      	adds	r7, #48	@ 0x30
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}
 8005086:	bf00      	nop
 8005088:	20000f00 	.word	0x20000f00
 800508c:	40000400 	.word	0x40000400

08005090 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b08c      	sub	sp, #48	@ 0x30
 8005094:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8005096:	f107 030c 	add.w	r3, r7, #12
 800509a:	2224      	movs	r2, #36	@ 0x24
 800509c:	2100      	movs	r1, #0
 800509e:	4618      	mov	r0, r3
 80050a0:	f009 fa4e 	bl	800e540 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80050a4:	463b      	mov	r3, r7
 80050a6:	2200      	movs	r2, #0
 80050a8:	601a      	str	r2, [r3, #0]
 80050aa:	605a      	str	r2, [r3, #4]
 80050ac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80050ae:	4b21      	ldr	r3, [pc, #132]	@ (8005134 <MX_TIM5_Init+0xa4>)
 80050b0:	4a21      	ldr	r2, [pc, #132]	@ (8005138 <MX_TIM5_Init+0xa8>)
 80050b2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80050b4:	4b1f      	ldr	r3, [pc, #124]	@ (8005134 <MX_TIM5_Init+0xa4>)
 80050b6:	2200      	movs	r2, #0
 80050b8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80050ba:	4b1e      	ldr	r3, [pc, #120]	@ (8005134 <MX_TIM5_Init+0xa4>)
 80050bc:	2200      	movs	r2, #0
 80050be:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80050c0:	4b1c      	ldr	r3, [pc, #112]	@ (8005134 <MX_TIM5_Init+0xa4>)
 80050c2:	f04f 32ff 	mov.w	r2, #4294967295
 80050c6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80050c8:	4b1a      	ldr	r3, [pc, #104]	@ (8005134 <MX_TIM5_Init+0xa4>)
 80050ca:	2200      	movs	r2, #0
 80050cc:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80050ce:	4b19      	ldr	r3, [pc, #100]	@ (8005134 <MX_TIM5_Init+0xa4>)
 80050d0:	2200      	movs	r2, #0
 80050d2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80050d4:	2301      	movs	r3, #1
 80050d6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80050d8:	2300      	movs	r3, #0
 80050da:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80050dc:	2301      	movs	r3, #1
 80050de:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80050e0:	2300      	movs	r3, #0
 80050e2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80050e4:	2300      	movs	r3, #0
 80050e6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80050e8:	2300      	movs	r3, #0
 80050ea:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80050ec:	2301      	movs	r3, #1
 80050ee:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80050f0:	2300      	movs	r3, #0
 80050f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80050f4:	2300      	movs	r3, #0
 80050f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 80050f8:	f107 030c 	add.w	r3, r7, #12
 80050fc:	4619      	mov	r1, r3
 80050fe:	480d      	ldr	r0, [pc, #52]	@ (8005134 <MX_TIM5_Init+0xa4>)
 8005100:	f005 fd50 	bl	800aba4 <HAL_TIM_Encoder_Init>
 8005104:	4603      	mov	r3, r0
 8005106:	2b00      	cmp	r3, #0
 8005108:	d001      	beq.n	800510e <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 800510a:	f7ff fd23 	bl	8004b54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800510e:	2300      	movs	r3, #0
 8005110:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005112:	2300      	movs	r3, #0
 8005114:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8005116:	463b      	mov	r3, r7
 8005118:	4619      	mov	r1, r3
 800511a:	4806      	ldr	r0, [pc, #24]	@ (8005134 <MX_TIM5_Init+0xa4>)
 800511c:	f007 fc26 	bl	800c96c <HAL_TIMEx_MasterConfigSynchronization>
 8005120:	4603      	mov	r3, r0
 8005122:	2b00      	cmp	r3, #0
 8005124:	d001      	beq.n	800512a <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8005126:	f7ff fd15 	bl	8004b54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800512a:	bf00      	nop
 800512c:	3730      	adds	r7, #48	@ 0x30
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}
 8005132:	bf00      	nop
 8005134:	20000f4c 	.word	0x20000f4c
 8005138:	40000c00 	.word	0x40000c00

0800513c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b084      	sub	sp, #16
 8005140:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005142:	1d3b      	adds	r3, r7, #4
 8005144:	2200      	movs	r2, #0
 8005146:	601a      	str	r2, [r3, #0]
 8005148:	605a      	str	r2, [r3, #4]
 800514a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800514c:	4b14      	ldr	r3, [pc, #80]	@ (80051a0 <MX_TIM6_Init+0x64>)
 800514e:	4a15      	ldr	r2, [pc, #84]	@ (80051a4 <MX_TIM6_Init+0x68>)
 8005150:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 79;
 8005152:	4b13      	ldr	r3, [pc, #76]	@ (80051a0 <MX_TIM6_Init+0x64>)
 8005154:	224f      	movs	r2, #79	@ 0x4f
 8005156:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005158:	4b11      	ldr	r3, [pc, #68]	@ (80051a0 <MX_TIM6_Init+0x64>)
 800515a:	2200      	movs	r2, #0
 800515c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 19;
 800515e:	4b10      	ldr	r3, [pc, #64]	@ (80051a0 <MX_TIM6_Init+0x64>)
 8005160:	2213      	movs	r2, #19
 8005162:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005164:	4b0e      	ldr	r3, [pc, #56]	@ (80051a0 <MX_TIM6_Init+0x64>)
 8005166:	2280      	movs	r2, #128	@ 0x80
 8005168:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800516a:	480d      	ldr	r0, [pc, #52]	@ (80051a0 <MX_TIM6_Init+0x64>)
 800516c:	f004 fee4 	bl	8009f38 <HAL_TIM_Base_Init>
 8005170:	4603      	mov	r3, r0
 8005172:	2b00      	cmp	r3, #0
 8005174:	d001      	beq.n	800517a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8005176:	f7ff fced 	bl	8004b54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800517a:	2320      	movs	r3, #32
 800517c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800517e:	2300      	movs	r3, #0
 8005180:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8005182:	1d3b      	adds	r3, r7, #4
 8005184:	4619      	mov	r1, r3
 8005186:	4806      	ldr	r0, [pc, #24]	@ (80051a0 <MX_TIM6_Init+0x64>)
 8005188:	f007 fbf0 	bl	800c96c <HAL_TIMEx_MasterConfigSynchronization>
 800518c:	4603      	mov	r3, r0
 800518e:	2b00      	cmp	r3, #0
 8005190:	d001      	beq.n	8005196 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8005192:	f7ff fcdf 	bl	8004b54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8005196:	bf00      	nop
 8005198:	3710      	adds	r7, #16
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}
 800519e:	bf00      	nop
 80051a0:	20000f98 	.word	0x20000f98
 80051a4:	40001000 	.word	0x40001000

080051a8 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b084      	sub	sp, #16
 80051ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80051ae:	1d3b      	adds	r3, r7, #4
 80051b0:	2200      	movs	r2, #0
 80051b2:	601a      	str	r2, [r3, #0]
 80051b4:	605a      	str	r2, [r3, #4]
 80051b6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80051b8:	4b14      	ldr	r3, [pc, #80]	@ (800520c <MX_TIM7_Init+0x64>)
 80051ba:	4a15      	ldr	r2, [pc, #84]	@ (8005210 <MX_TIM7_Init+0x68>)
 80051bc:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 7999;
 80051be:	4b13      	ldr	r3, [pc, #76]	@ (800520c <MX_TIM7_Init+0x64>)
 80051c0:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80051c4:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80051c6:	4b11      	ldr	r3, [pc, #68]	@ (800520c <MX_TIM7_Init+0x64>)
 80051c8:	2200      	movs	r2, #0
 80051ca:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9;
 80051cc:	4b0f      	ldr	r3, [pc, #60]	@ (800520c <MX_TIM7_Init+0x64>)
 80051ce:	2209      	movs	r2, #9
 80051d0:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80051d2:	4b0e      	ldr	r3, [pc, #56]	@ (800520c <MX_TIM7_Init+0x64>)
 80051d4:	2280      	movs	r2, #128	@ 0x80
 80051d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80051d8:	480c      	ldr	r0, [pc, #48]	@ (800520c <MX_TIM7_Init+0x64>)
 80051da:	f004 fead 	bl	8009f38 <HAL_TIM_Base_Init>
 80051de:	4603      	mov	r3, r0
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d001      	beq.n	80051e8 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80051e4:	f7ff fcb6 	bl	8004b54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80051e8:	2300      	movs	r3, #0
 80051ea:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80051ec:	2300      	movs	r3, #0
 80051ee:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80051f0:	1d3b      	adds	r3, r7, #4
 80051f2:	4619      	mov	r1, r3
 80051f4:	4805      	ldr	r0, [pc, #20]	@ (800520c <MX_TIM7_Init+0x64>)
 80051f6:	f007 fbb9 	bl	800c96c <HAL_TIMEx_MasterConfigSynchronization>
 80051fa:	4603      	mov	r3, r0
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d001      	beq.n	8005204 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8005200:	f7ff fca8 	bl	8004b54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8005204:	bf00      	nop
 8005206:	3710      	adds	r7, #16
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}
 800520c:	20000fe4 	.word	0x20000fe4
 8005210:	40001400 	.word	0x40001400

08005214 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b09a      	sub	sp, #104	@ 0x68
 8005218:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800521a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800521e:	2200      	movs	r2, #0
 8005220:	601a      	str	r2, [r3, #0]
 8005222:	605a      	str	r2, [r3, #4]
 8005224:	609a      	str	r2, [r3, #8]
 8005226:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005228:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800522c:	2200      	movs	r2, #0
 800522e:	601a      	str	r2, [r3, #0]
 8005230:	605a      	str	r2, [r3, #4]
 8005232:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005234:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8005238:	2200      	movs	r2, #0
 800523a:	601a      	str	r2, [r3, #0]
 800523c:	605a      	str	r2, [r3, #4]
 800523e:	609a      	str	r2, [r3, #8]
 8005240:	60da      	str	r2, [r3, #12]
 8005242:	611a      	str	r2, [r3, #16]
 8005244:	615a      	str	r2, [r3, #20]
 8005246:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005248:	1d3b      	adds	r3, r7, #4
 800524a:	222c      	movs	r2, #44	@ 0x2c
 800524c:	2100      	movs	r1, #0
 800524e:	4618      	mov	r0, r3
 8005250:	f009 f976 	bl	800e540 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8005254:	4b3e      	ldr	r3, [pc, #248]	@ (8005350 <MX_TIM15_Init+0x13c>)
 8005256:	4a3f      	ldr	r2, [pc, #252]	@ (8005354 <MX_TIM15_Init+0x140>)
 8005258:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 8191;
 800525a:	4b3d      	ldr	r3, [pc, #244]	@ (8005350 <MX_TIM15_Init+0x13c>)
 800525c:	f641 72ff 	movw	r2, #8191	@ 0x1fff
 8005260:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005262:	4b3b      	ldr	r3, [pc, #236]	@ (8005350 <MX_TIM15_Init+0x13c>)
 8005264:	2200      	movs	r2, #0
 8005266:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8005268:	4b39      	ldr	r3, [pc, #228]	@ (8005350 <MX_TIM15_Init+0x13c>)
 800526a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800526e:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005270:	4b37      	ldr	r3, [pc, #220]	@ (8005350 <MX_TIM15_Init+0x13c>)
 8005272:	2200      	movs	r2, #0
 8005274:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8005276:	4b36      	ldr	r3, [pc, #216]	@ (8005350 <MX_TIM15_Init+0x13c>)
 8005278:	2200      	movs	r2, #0
 800527a:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800527c:	4b34      	ldr	r3, [pc, #208]	@ (8005350 <MX_TIM15_Init+0x13c>)
 800527e:	2200      	movs	r2, #0
 8005280:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8005282:	4833      	ldr	r0, [pc, #204]	@ (8005350 <MX_TIM15_Init+0x13c>)
 8005284:	f004 fe58 	bl	8009f38 <HAL_TIM_Base_Init>
 8005288:	4603      	mov	r3, r0
 800528a:	2b00      	cmp	r3, #0
 800528c:	d001      	beq.n	8005292 <MX_TIM15_Init+0x7e>
  {
    Error_Handler();
 800528e:	f7ff fc61 	bl	8004b54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005292:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005296:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8005298:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800529c:	4619      	mov	r1, r3
 800529e:	482c      	ldr	r0, [pc, #176]	@ (8005350 <MX_TIM15_Init+0x13c>)
 80052a0:	f006 fada 	bl	800b858 <HAL_TIM_ConfigClockSource>
 80052a4:	4603      	mov	r3, r0
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d001      	beq.n	80052ae <MX_TIM15_Init+0x9a>
  {
    Error_Handler();
 80052aa:	f7ff fc53 	bl	8004b54 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80052ae:	4828      	ldr	r0, [pc, #160]	@ (8005350 <MX_TIM15_Init+0x13c>)
 80052b0:	f005 f880 	bl	800a3b4 <HAL_TIM_PWM_Init>
 80052b4:	4603      	mov	r3, r0
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d001      	beq.n	80052be <MX_TIM15_Init+0xaa>
  {
    Error_Handler();
 80052ba:	f7ff fc4b 	bl	8004b54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80052be:	2300      	movs	r3, #0
 80052c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80052c2:	2300      	movs	r3, #0
 80052c4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80052c6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80052ca:	4619      	mov	r1, r3
 80052cc:	4820      	ldr	r0, [pc, #128]	@ (8005350 <MX_TIM15_Init+0x13c>)
 80052ce:	f007 fb4d 	bl	800c96c <HAL_TIMEx_MasterConfigSynchronization>
 80052d2:	4603      	mov	r3, r0
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d001      	beq.n	80052dc <MX_TIM15_Init+0xc8>
  {
    Error_Handler();
 80052d8:	f7ff fc3c 	bl	8004b54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80052dc:	2360      	movs	r3, #96	@ 0x60
 80052de:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 80052e0:	2300      	movs	r3, #0
 80052e2:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80052e4:	2300      	movs	r3, #0
 80052e6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80052e8:	2300      	movs	r3, #0
 80052ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80052ec:	2300      	movs	r3, #0
 80052ee:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80052f0:	2300      	movs	r3, #0
 80052f2:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80052f4:	2300      	movs	r3, #0
 80052f6:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80052f8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80052fc:	2200      	movs	r2, #0
 80052fe:	4619      	mov	r1, r3
 8005300:	4813      	ldr	r0, [pc, #76]	@ (8005350 <MX_TIM15_Init+0x13c>)
 8005302:	f005 ffd7 	bl	800b2b4 <HAL_TIM_PWM_ConfigChannel>
 8005306:	4603      	mov	r3, r0
 8005308:	2b00      	cmp	r3, #0
 800530a:	d001      	beq.n	8005310 <MX_TIM15_Init+0xfc>
  {
    Error_Handler();
 800530c:	f7ff fc22 	bl	8004b54 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005310:	2300      	movs	r3, #0
 8005312:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005314:	2300      	movs	r3, #0
 8005316:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005318:	2300      	movs	r3, #0
 800531a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800531c:	2300      	movs	r3, #0
 800531e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005320:	2300      	movs	r3, #0
 8005322:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005324:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005328:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800532a:	2300      	movs	r3, #0
 800532c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 800532e:	1d3b      	adds	r3, r7, #4
 8005330:	4619      	mov	r1, r3
 8005332:	4807      	ldr	r0, [pc, #28]	@ (8005350 <MX_TIM15_Init+0x13c>)
 8005334:	f007 fc70 	bl	800cc18 <HAL_TIMEx_ConfigBreakDeadTime>
 8005338:	4603      	mov	r3, r0
 800533a:	2b00      	cmp	r3, #0
 800533c:	d001      	beq.n	8005342 <MX_TIM15_Init+0x12e>
  {
    Error_Handler();
 800533e:	f7ff fc09 	bl	8004b54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8005342:	4803      	ldr	r0, [pc, #12]	@ (8005350 <MX_TIM15_Init+0x13c>)
 8005344:	f000 f8d2 	bl	80054ec <HAL_TIM_MspPostInit>

}
 8005348:	bf00      	nop
 800534a:	3768      	adds	r7, #104	@ 0x68
 800534c:	46bd      	mov	sp, r7
 800534e:	bd80      	pop	{r7, pc}
 8005350:	20001030 	.word	0x20001030
 8005354:	40014000 	.word	0x40014000

08005358 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b08c      	sub	sp, #48	@ 0x30
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005360:	f107 031c 	add.w	r3, r7, #28
 8005364:	2200      	movs	r2, #0
 8005366:	601a      	str	r2, [r3, #0]
 8005368:	605a      	str	r2, [r3, #4]
 800536a:	609a      	str	r2, [r3, #8]
 800536c:	60da      	str	r2, [r3, #12]
 800536e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a2f      	ldr	r2, [pc, #188]	@ (8005434 <HAL_TIM_Encoder_MspInit+0xdc>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d129      	bne.n	80053ce <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800537a:	4b2f      	ldr	r3, [pc, #188]	@ (8005438 <HAL_TIM_Encoder_MspInit+0xe0>)
 800537c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800537e:	4a2e      	ldr	r2, [pc, #184]	@ (8005438 <HAL_TIM_Encoder_MspInit+0xe0>)
 8005380:	f043 0302 	orr.w	r3, r3, #2
 8005384:	6593      	str	r3, [r2, #88]	@ 0x58
 8005386:	4b2c      	ldr	r3, [pc, #176]	@ (8005438 <HAL_TIM_Encoder_MspInit+0xe0>)
 8005388:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800538a:	f003 0302 	and.w	r3, r3, #2
 800538e:	61bb      	str	r3, [r7, #24]
 8005390:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005392:	4b29      	ldr	r3, [pc, #164]	@ (8005438 <HAL_TIM_Encoder_MspInit+0xe0>)
 8005394:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005396:	4a28      	ldr	r2, [pc, #160]	@ (8005438 <HAL_TIM_Encoder_MspInit+0xe0>)
 8005398:	f043 0301 	orr.w	r3, r3, #1
 800539c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800539e:	4b26      	ldr	r3, [pc, #152]	@ (8005438 <HAL_TIM_Encoder_MspInit+0xe0>)
 80053a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053a2:	f003 0301 	and.w	r3, r3, #1
 80053a6:	617b      	str	r3, [r7, #20]
 80053a8:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80053aa:	23c0      	movs	r3, #192	@ 0xc0
 80053ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053ae:	2302      	movs	r3, #2
 80053b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053b2:	2300      	movs	r3, #0
 80053b4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053b6:	2300      	movs	r3, #0
 80053b8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80053ba:	2302      	movs	r3, #2
 80053bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80053be:	f107 031c 	add.w	r3, r7, #28
 80053c2:	4619      	mov	r1, r3
 80053c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80053c8:	f000 fe98 	bl	80060fc <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 80053cc:	e02d      	b.n	800542a <HAL_TIM_Encoder_MspInit+0xd2>
  else if(tim_encoderHandle->Instance==TIM5)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a1a      	ldr	r2, [pc, #104]	@ (800543c <HAL_TIM_Encoder_MspInit+0xe4>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d128      	bne.n	800542a <HAL_TIM_Encoder_MspInit+0xd2>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80053d8:	4b17      	ldr	r3, [pc, #92]	@ (8005438 <HAL_TIM_Encoder_MspInit+0xe0>)
 80053da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053dc:	4a16      	ldr	r2, [pc, #88]	@ (8005438 <HAL_TIM_Encoder_MspInit+0xe0>)
 80053de:	f043 0308 	orr.w	r3, r3, #8
 80053e2:	6593      	str	r3, [r2, #88]	@ 0x58
 80053e4:	4b14      	ldr	r3, [pc, #80]	@ (8005438 <HAL_TIM_Encoder_MspInit+0xe0>)
 80053e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053e8:	f003 0308 	and.w	r3, r3, #8
 80053ec:	613b      	str	r3, [r7, #16]
 80053ee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80053f0:	4b11      	ldr	r3, [pc, #68]	@ (8005438 <HAL_TIM_Encoder_MspInit+0xe0>)
 80053f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053f4:	4a10      	ldr	r2, [pc, #64]	@ (8005438 <HAL_TIM_Encoder_MspInit+0xe0>)
 80053f6:	f043 0301 	orr.w	r3, r3, #1
 80053fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80053fc:	4b0e      	ldr	r3, [pc, #56]	@ (8005438 <HAL_TIM_Encoder_MspInit+0xe0>)
 80053fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005400:	f003 0301 	and.w	r3, r3, #1
 8005404:	60fb      	str	r3, [r7, #12]
 8005406:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005408:	2303      	movs	r3, #3
 800540a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800540c:	2302      	movs	r3, #2
 800540e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005410:	2300      	movs	r3, #0
 8005412:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005414:	2300      	movs	r3, #0
 8005416:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8005418:	2302      	movs	r3, #2
 800541a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800541c:	f107 031c 	add.w	r3, r7, #28
 8005420:	4619      	mov	r1, r3
 8005422:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005426:	f000 fe69 	bl	80060fc <HAL_GPIO_Init>
}
 800542a:	bf00      	nop
 800542c:	3730      	adds	r7, #48	@ 0x30
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}
 8005432:	bf00      	nop
 8005434:	40000400 	.word	0x40000400
 8005438:	40021000 	.word	0x40021000
 800543c:	40000c00 	.word	0x40000c00

08005440 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b086      	sub	sp, #24
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a23      	ldr	r2, [pc, #140]	@ (80054dc <HAL_TIM_Base_MspInit+0x9c>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d114      	bne.n	800547c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8005452:	4b23      	ldr	r3, [pc, #140]	@ (80054e0 <HAL_TIM_Base_MspInit+0xa0>)
 8005454:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005456:	4a22      	ldr	r2, [pc, #136]	@ (80054e0 <HAL_TIM_Base_MspInit+0xa0>)
 8005458:	f043 0310 	orr.w	r3, r3, #16
 800545c:	6593      	str	r3, [r2, #88]	@ 0x58
 800545e:	4b20      	ldr	r3, [pc, #128]	@ (80054e0 <HAL_TIM_Base_MspInit+0xa0>)
 8005460:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005462:	f003 0310 	and.w	r3, r3, #16
 8005466:	617b      	str	r3, [r7, #20]
 8005468:	697b      	ldr	r3, [r7, #20]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800546a:	2200      	movs	r2, #0
 800546c:	2100      	movs	r1, #0
 800546e:	2036      	movs	r0, #54	@ 0x36
 8005470:	f000 faae 	bl	80059d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005474:	2036      	movs	r0, #54	@ 0x36
 8005476:	f000 fad7 	bl	8005a28 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM15_CLK_ENABLE();
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 800547a:	e02a      	b.n	80054d2 <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM7)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a18      	ldr	r2, [pc, #96]	@ (80054e4 <HAL_TIM_Base_MspInit+0xa4>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d114      	bne.n	80054b0 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8005486:	4b16      	ldr	r3, [pc, #88]	@ (80054e0 <HAL_TIM_Base_MspInit+0xa0>)
 8005488:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800548a:	4a15      	ldr	r2, [pc, #84]	@ (80054e0 <HAL_TIM_Base_MspInit+0xa0>)
 800548c:	f043 0320 	orr.w	r3, r3, #32
 8005490:	6593      	str	r3, [r2, #88]	@ 0x58
 8005492:	4b13      	ldr	r3, [pc, #76]	@ (80054e0 <HAL_TIM_Base_MspInit+0xa0>)
 8005494:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005496:	f003 0320 	and.w	r3, r3, #32
 800549a:	613b      	str	r3, [r7, #16]
 800549c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800549e:	2200      	movs	r2, #0
 80054a0:	2100      	movs	r1, #0
 80054a2:	2037      	movs	r0, #55	@ 0x37
 80054a4:	f000 fa94 	bl	80059d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80054a8:	2037      	movs	r0, #55	@ 0x37
 80054aa:	f000 fabd 	bl	8005a28 <HAL_NVIC_EnableIRQ>
}
 80054ae:	e010      	b.n	80054d2 <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM15)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a0c      	ldr	r2, [pc, #48]	@ (80054e8 <HAL_TIM_Base_MspInit+0xa8>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d10b      	bne.n	80054d2 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80054ba:	4b09      	ldr	r3, [pc, #36]	@ (80054e0 <HAL_TIM_Base_MspInit+0xa0>)
 80054bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054be:	4a08      	ldr	r2, [pc, #32]	@ (80054e0 <HAL_TIM_Base_MspInit+0xa0>)
 80054c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80054c4:	6613      	str	r3, [r2, #96]	@ 0x60
 80054c6:	4b06      	ldr	r3, [pc, #24]	@ (80054e0 <HAL_TIM_Base_MspInit+0xa0>)
 80054c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80054ce:	60fb      	str	r3, [r7, #12]
 80054d0:	68fb      	ldr	r3, [r7, #12]
}
 80054d2:	bf00      	nop
 80054d4:	3718      	adds	r7, #24
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}
 80054da:	bf00      	nop
 80054dc:	40001000 	.word	0x40001000
 80054e0:	40021000 	.word	0x40021000
 80054e4:	40001400 	.word	0x40001400
 80054e8:	40014000 	.word	0x40014000

080054ec <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b08a      	sub	sp, #40	@ 0x28
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80054f4:	f107 0314 	add.w	r3, r7, #20
 80054f8:	2200      	movs	r2, #0
 80054fa:	601a      	str	r2, [r3, #0]
 80054fc:	605a      	str	r2, [r3, #4]
 80054fe:	609a      	str	r2, [r3, #8]
 8005500:	60da      	str	r2, [r3, #12]
 8005502:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM15)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a20      	ldr	r2, [pc, #128]	@ (800558c <HAL_TIM_MspPostInit+0xa0>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d139      	bne.n	8005582 <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM15_MspPostInit 0 */

  /* USER CODE END TIM15_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800550e:	4b20      	ldr	r3, [pc, #128]	@ (8005590 <HAL_TIM_MspPostInit+0xa4>)
 8005510:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005512:	4a1f      	ldr	r2, [pc, #124]	@ (8005590 <HAL_TIM_MspPostInit+0xa4>)
 8005514:	f043 0301 	orr.w	r3, r3, #1
 8005518:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800551a:	4b1d      	ldr	r3, [pc, #116]	@ (8005590 <HAL_TIM_MspPostInit+0xa4>)
 800551c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800551e:	f003 0301 	and.w	r3, r3, #1
 8005522:	613b      	str	r3, [r7, #16]
 8005524:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005526:	4b1a      	ldr	r3, [pc, #104]	@ (8005590 <HAL_TIM_MspPostInit+0xa4>)
 8005528:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800552a:	4a19      	ldr	r2, [pc, #100]	@ (8005590 <HAL_TIM_MspPostInit+0xa4>)
 800552c:	f043 0302 	orr.w	r3, r3, #2
 8005530:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005532:	4b17      	ldr	r3, [pc, #92]	@ (8005590 <HAL_TIM_MspPostInit+0xa4>)
 8005534:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005536:	f003 0302 	and.w	r3, r3, #2
 800553a:	60fb      	str	r3, [r7, #12]
 800553c:	68fb      	ldr	r3, [r7, #12]
    /**TIM15 GPIO Configuration
    PA2     ------> TIM15_CH1
    PB13     ------> TIM15_CH1N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800553e:	2304      	movs	r3, #4
 8005540:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005542:	2302      	movs	r3, #2
 8005544:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005546:	2300      	movs	r3, #0
 8005548:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800554a:	2300      	movs	r3, #0
 800554c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 800554e:	230e      	movs	r3, #14
 8005550:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005552:	f107 0314 	add.w	r3, r7, #20
 8005556:	4619      	mov	r1, r3
 8005558:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800555c:	f000 fdce 	bl	80060fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8005560:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005564:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005566:	2302      	movs	r3, #2
 8005568:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800556a:	2300      	movs	r3, #0
 800556c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800556e:	2300      	movs	r3, #0
 8005570:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8005572:	230e      	movs	r3, #14
 8005574:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005576:	f107 0314 	add.w	r3, r7, #20
 800557a:	4619      	mov	r1, r3
 800557c:	4805      	ldr	r0, [pc, #20]	@ (8005594 <HAL_TIM_MspPostInit+0xa8>)
 800557e:	f000 fdbd 	bl	80060fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8005582:	bf00      	nop
 8005584:	3728      	adds	r7, #40	@ 0x28
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}
 800558a:	bf00      	nop
 800558c:	40014000 	.word	0x40014000
 8005590:	40021000 	.word	0x40021000
 8005594:	48000400 	.word	0x48000400

08005598 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800559c:	4b14      	ldr	r3, [pc, #80]	@ (80055f0 <MX_USART1_UART_Init+0x58>)
 800559e:	4a15      	ldr	r2, [pc, #84]	@ (80055f4 <MX_USART1_UART_Init+0x5c>)
 80055a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80055a2:	4b13      	ldr	r3, [pc, #76]	@ (80055f0 <MX_USART1_UART_Init+0x58>)
 80055a4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80055a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80055aa:	4b11      	ldr	r3, [pc, #68]	@ (80055f0 <MX_USART1_UART_Init+0x58>)
 80055ac:	2200      	movs	r2, #0
 80055ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80055b0:	4b0f      	ldr	r3, [pc, #60]	@ (80055f0 <MX_USART1_UART_Init+0x58>)
 80055b2:	2200      	movs	r2, #0
 80055b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80055b6:	4b0e      	ldr	r3, [pc, #56]	@ (80055f0 <MX_USART1_UART_Init+0x58>)
 80055b8:	2200      	movs	r2, #0
 80055ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80055bc:	4b0c      	ldr	r3, [pc, #48]	@ (80055f0 <MX_USART1_UART_Init+0x58>)
 80055be:	220c      	movs	r2, #12
 80055c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80055c2:	4b0b      	ldr	r3, [pc, #44]	@ (80055f0 <MX_USART1_UART_Init+0x58>)
 80055c4:	2200      	movs	r2, #0
 80055c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80055c8:	4b09      	ldr	r3, [pc, #36]	@ (80055f0 <MX_USART1_UART_Init+0x58>)
 80055ca:	2200      	movs	r2, #0
 80055cc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80055ce:	4b08      	ldr	r3, [pc, #32]	@ (80055f0 <MX_USART1_UART_Init+0x58>)
 80055d0:	2200      	movs	r2, #0
 80055d2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80055d4:	4b06      	ldr	r3, [pc, #24]	@ (80055f0 <MX_USART1_UART_Init+0x58>)
 80055d6:	2200      	movs	r2, #0
 80055d8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80055da:	4805      	ldr	r0, [pc, #20]	@ (80055f0 <MX_USART1_UART_Init+0x58>)
 80055dc:	f007 fc72 	bl	800cec4 <HAL_UART_Init>
 80055e0:	4603      	mov	r3, r0
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d001      	beq.n	80055ea <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80055e6:	f7ff fab5 	bl	8004b54 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80055ea:	bf00      	nop
 80055ec:	bd80      	pop	{r7, pc}
 80055ee:	bf00      	nop
 80055f0:	2000107c 	.word	0x2000107c
 80055f4:	40013800 	.word	0x40013800

080055f8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b0ac      	sub	sp, #176	@ 0xb0
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005600:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8005604:	2200      	movs	r2, #0
 8005606:	601a      	str	r2, [r3, #0]
 8005608:	605a      	str	r2, [r3, #4]
 800560a:	609a      	str	r2, [r3, #8]
 800560c:	60da      	str	r2, [r3, #12]
 800560e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005610:	f107 0314 	add.w	r3, r7, #20
 8005614:	2288      	movs	r2, #136	@ 0x88
 8005616:	2100      	movs	r1, #0
 8005618:	4618      	mov	r0, r3
 800561a:	f008 ff91 	bl	800e540 <memset>
  if(uartHandle->Instance==USART1)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a21      	ldr	r2, [pc, #132]	@ (80056a8 <HAL_UART_MspInit+0xb0>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d13a      	bne.n	800569e <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8005628:	2301      	movs	r3, #1
 800562a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800562c:	2300      	movs	r3, #0
 800562e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005630:	f107 0314 	add.w	r3, r7, #20
 8005634:	4618      	mov	r0, r3
 8005636:	f002 fd8f 	bl	8008158 <HAL_RCCEx_PeriphCLKConfig>
 800563a:	4603      	mov	r3, r0
 800563c:	2b00      	cmp	r3, #0
 800563e:	d001      	beq.n	8005644 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8005640:	f7ff fa88 	bl	8004b54 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005644:	4b19      	ldr	r3, [pc, #100]	@ (80056ac <HAL_UART_MspInit+0xb4>)
 8005646:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005648:	4a18      	ldr	r2, [pc, #96]	@ (80056ac <HAL_UART_MspInit+0xb4>)
 800564a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800564e:	6613      	str	r3, [r2, #96]	@ 0x60
 8005650:	4b16      	ldr	r3, [pc, #88]	@ (80056ac <HAL_UART_MspInit+0xb4>)
 8005652:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005654:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005658:	613b      	str	r3, [r7, #16]
 800565a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800565c:	4b13      	ldr	r3, [pc, #76]	@ (80056ac <HAL_UART_MspInit+0xb4>)
 800565e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005660:	4a12      	ldr	r2, [pc, #72]	@ (80056ac <HAL_UART_MspInit+0xb4>)
 8005662:	f043 0302 	orr.w	r3, r3, #2
 8005666:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005668:	4b10      	ldr	r3, [pc, #64]	@ (80056ac <HAL_UART_MspInit+0xb4>)
 800566a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800566c:	f003 0302 	and.w	r3, r3, #2
 8005670:	60fb      	str	r3, [r7, #12]
 8005672:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005674:	23c0      	movs	r3, #192	@ 0xc0
 8005676:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800567a:	2302      	movs	r3, #2
 800567c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005680:	2300      	movs	r3, #0
 8005682:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005686:	2303      	movs	r3, #3
 8005688:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800568c:	2307      	movs	r3, #7
 800568e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005692:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8005696:	4619      	mov	r1, r3
 8005698:	4805      	ldr	r0, [pc, #20]	@ (80056b0 <HAL_UART_MspInit+0xb8>)
 800569a:	f000 fd2f 	bl	80060fc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800569e:	bf00      	nop
 80056a0:	37b0      	adds	r7, #176	@ 0xb0
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}
 80056a6:	bf00      	nop
 80056a8:	40013800 	.word	0x40013800
 80056ac:	40021000 	.word	0x40021000
 80056b0:	48000400 	.word	0x48000400

080056b4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80056b4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80056ec <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80056b8:	f7ff fc82 	bl	8004fc0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80056bc:	480c      	ldr	r0, [pc, #48]	@ (80056f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80056be:	490d      	ldr	r1, [pc, #52]	@ (80056f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80056c0:	4a0d      	ldr	r2, [pc, #52]	@ (80056f8 <LoopForever+0xe>)
  movs r3, #0
 80056c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80056c4:	e002      	b.n	80056cc <LoopCopyDataInit>

080056c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80056c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80056c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80056ca:	3304      	adds	r3, #4

080056cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80056cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80056ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80056d0:	d3f9      	bcc.n	80056c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80056d2:	4a0a      	ldr	r2, [pc, #40]	@ (80056fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80056d4:	4c0a      	ldr	r4, [pc, #40]	@ (8005700 <LoopForever+0x16>)
  movs r3, #0
 80056d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80056d8:	e001      	b.n	80056de <LoopFillZerobss>

080056da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80056da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80056dc:	3204      	adds	r2, #4

080056de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80056de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80056e0:	d3fb      	bcc.n	80056da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80056e2:	f008 ff91 	bl	800e608 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80056e6:	f7ff f92b 	bl	8004940 <main>

080056ea <LoopForever>:

LoopForever:
    b LoopForever
 80056ea:	e7fe      	b.n	80056ea <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80056ec:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80056f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80056f4:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80056f8:	0800fbe4 	.word	0x0800fbe4
  ldr r2, =_sbss
 80056fc:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8005700:	20001254 	.word	0x20001254

08005704 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005704:	e7fe      	b.n	8005704 <ADC1_2_IRQHandler>

08005706 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005706:	b580      	push	{r7, lr}
 8005708:	b082      	sub	sp, #8
 800570a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800570c:	2300      	movs	r3, #0
 800570e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005710:	2003      	movs	r0, #3
 8005712:	f000 f93d 	bl	8005990 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005716:	200f      	movs	r0, #15
 8005718:	f000 f80e 	bl	8005738 <HAL_InitTick>
 800571c:	4603      	mov	r3, r0
 800571e:	2b00      	cmp	r3, #0
 8005720:	d002      	beq.n	8005728 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8005722:	2301      	movs	r3, #1
 8005724:	71fb      	strb	r3, [r7, #7]
 8005726:	e001      	b.n	800572c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005728:	f7ff fb16 	bl	8004d58 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800572c:	79fb      	ldrb	r3, [r7, #7]
}
 800572e:	4618      	mov	r0, r3
 8005730:	3708      	adds	r7, #8
 8005732:	46bd      	mov	sp, r7
 8005734:	bd80      	pop	{r7, pc}
	...

08005738 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b084      	sub	sp, #16
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005740:	2300      	movs	r3, #0
 8005742:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8005744:	4b17      	ldr	r3, [pc, #92]	@ (80057a4 <HAL_InitTick+0x6c>)
 8005746:	781b      	ldrb	r3, [r3, #0]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d023      	beq.n	8005794 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800574c:	4b16      	ldr	r3, [pc, #88]	@ (80057a8 <HAL_InitTick+0x70>)
 800574e:	681a      	ldr	r2, [r3, #0]
 8005750:	4b14      	ldr	r3, [pc, #80]	@ (80057a4 <HAL_InitTick+0x6c>)
 8005752:	781b      	ldrb	r3, [r3, #0]
 8005754:	4619      	mov	r1, r3
 8005756:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800575a:	fbb3 f3f1 	udiv	r3, r3, r1
 800575e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005762:	4618      	mov	r0, r3
 8005764:	f000 f978 	bl	8005a58 <HAL_SYSTICK_Config>
 8005768:	4603      	mov	r3, r0
 800576a:	2b00      	cmp	r3, #0
 800576c:	d10f      	bne.n	800578e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2b0f      	cmp	r3, #15
 8005772:	d809      	bhi.n	8005788 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005774:	2200      	movs	r2, #0
 8005776:	6879      	ldr	r1, [r7, #4]
 8005778:	f04f 30ff 	mov.w	r0, #4294967295
 800577c:	f000 f928 	bl	80059d0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005780:	4a0a      	ldr	r2, [pc, #40]	@ (80057ac <HAL_InitTick+0x74>)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6013      	str	r3, [r2, #0]
 8005786:	e007      	b.n	8005798 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8005788:	2301      	movs	r3, #1
 800578a:	73fb      	strb	r3, [r7, #15]
 800578c:	e004      	b.n	8005798 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800578e:	2301      	movs	r3, #1
 8005790:	73fb      	strb	r3, [r7, #15]
 8005792:	e001      	b.n	8005798 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005794:	2301      	movs	r3, #1
 8005796:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8005798:	7bfb      	ldrb	r3, [r7, #15]
}
 800579a:	4618      	mov	r0, r3
 800579c:	3710      	adds	r7, #16
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}
 80057a2:	bf00      	nop
 80057a4:	2000001c 	.word	0x2000001c
 80057a8:	20000014 	.word	0x20000014
 80057ac:	20000018 	.word	0x20000018

080057b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80057b0:	b480      	push	{r7}
 80057b2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80057b4:	4b06      	ldr	r3, [pc, #24]	@ (80057d0 <HAL_IncTick+0x20>)
 80057b6:	781b      	ldrb	r3, [r3, #0]
 80057b8:	461a      	mov	r2, r3
 80057ba:	4b06      	ldr	r3, [pc, #24]	@ (80057d4 <HAL_IncTick+0x24>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4413      	add	r3, r2
 80057c0:	4a04      	ldr	r2, [pc, #16]	@ (80057d4 <HAL_IncTick+0x24>)
 80057c2:	6013      	str	r3, [r2, #0]
}
 80057c4:	bf00      	nop
 80057c6:	46bd      	mov	sp, r7
 80057c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057cc:	4770      	bx	lr
 80057ce:	bf00      	nop
 80057d0:	2000001c 	.word	0x2000001c
 80057d4:	20001104 	.word	0x20001104

080057d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80057d8:	b480      	push	{r7}
 80057da:	af00      	add	r7, sp, #0
  return uwTick;
 80057dc:	4b03      	ldr	r3, [pc, #12]	@ (80057ec <HAL_GetTick+0x14>)
 80057de:	681b      	ldr	r3, [r3, #0]
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	46bd      	mov	sp, r7
 80057e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e8:	4770      	bx	lr
 80057ea:	bf00      	nop
 80057ec:	20001104 	.word	0x20001104

080057f0 <__NVIC_SetPriorityGrouping>:
{
 80057f0:	b480      	push	{r7}
 80057f2:	b085      	sub	sp, #20
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	f003 0307 	and.w	r3, r3, #7
 80057fe:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005800:	4b0c      	ldr	r3, [pc, #48]	@ (8005834 <__NVIC_SetPriorityGrouping+0x44>)
 8005802:	68db      	ldr	r3, [r3, #12]
 8005804:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005806:	68ba      	ldr	r2, [r7, #8]
 8005808:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800580c:	4013      	ands	r3, r2
 800580e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005818:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800581c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005820:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005822:	4a04      	ldr	r2, [pc, #16]	@ (8005834 <__NVIC_SetPriorityGrouping+0x44>)
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	60d3      	str	r3, [r2, #12]
}
 8005828:	bf00      	nop
 800582a:	3714      	adds	r7, #20
 800582c:	46bd      	mov	sp, r7
 800582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005832:	4770      	bx	lr
 8005834:	e000ed00 	.word	0xe000ed00

08005838 <__NVIC_GetPriorityGrouping>:
{
 8005838:	b480      	push	{r7}
 800583a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800583c:	4b04      	ldr	r3, [pc, #16]	@ (8005850 <__NVIC_GetPriorityGrouping+0x18>)
 800583e:	68db      	ldr	r3, [r3, #12]
 8005840:	0a1b      	lsrs	r3, r3, #8
 8005842:	f003 0307 	and.w	r3, r3, #7
}
 8005846:	4618      	mov	r0, r3
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr
 8005850:	e000ed00 	.word	0xe000ed00

08005854 <__NVIC_EnableIRQ>:
{
 8005854:	b480      	push	{r7}
 8005856:	b083      	sub	sp, #12
 8005858:	af00      	add	r7, sp, #0
 800585a:	4603      	mov	r3, r0
 800585c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800585e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005862:	2b00      	cmp	r3, #0
 8005864:	db0b      	blt.n	800587e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005866:	79fb      	ldrb	r3, [r7, #7]
 8005868:	f003 021f 	and.w	r2, r3, #31
 800586c:	4907      	ldr	r1, [pc, #28]	@ (800588c <__NVIC_EnableIRQ+0x38>)
 800586e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005872:	095b      	lsrs	r3, r3, #5
 8005874:	2001      	movs	r0, #1
 8005876:	fa00 f202 	lsl.w	r2, r0, r2
 800587a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800587e:	bf00      	nop
 8005880:	370c      	adds	r7, #12
 8005882:	46bd      	mov	sp, r7
 8005884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005888:	4770      	bx	lr
 800588a:	bf00      	nop
 800588c:	e000e100 	.word	0xe000e100

08005890 <__NVIC_SetPriority>:
{
 8005890:	b480      	push	{r7}
 8005892:	b083      	sub	sp, #12
 8005894:	af00      	add	r7, sp, #0
 8005896:	4603      	mov	r3, r0
 8005898:	6039      	str	r1, [r7, #0]
 800589a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800589c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	db0a      	blt.n	80058ba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	b2da      	uxtb	r2, r3
 80058a8:	490c      	ldr	r1, [pc, #48]	@ (80058dc <__NVIC_SetPriority+0x4c>)
 80058aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058ae:	0112      	lsls	r2, r2, #4
 80058b0:	b2d2      	uxtb	r2, r2
 80058b2:	440b      	add	r3, r1
 80058b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80058b8:	e00a      	b.n	80058d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	b2da      	uxtb	r2, r3
 80058be:	4908      	ldr	r1, [pc, #32]	@ (80058e0 <__NVIC_SetPriority+0x50>)
 80058c0:	79fb      	ldrb	r3, [r7, #7]
 80058c2:	f003 030f 	and.w	r3, r3, #15
 80058c6:	3b04      	subs	r3, #4
 80058c8:	0112      	lsls	r2, r2, #4
 80058ca:	b2d2      	uxtb	r2, r2
 80058cc:	440b      	add	r3, r1
 80058ce:	761a      	strb	r2, [r3, #24]
}
 80058d0:	bf00      	nop
 80058d2:	370c      	adds	r7, #12
 80058d4:	46bd      	mov	sp, r7
 80058d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058da:	4770      	bx	lr
 80058dc:	e000e100 	.word	0xe000e100
 80058e0:	e000ed00 	.word	0xe000ed00

080058e4 <NVIC_EncodePriority>:
{
 80058e4:	b480      	push	{r7}
 80058e6:	b089      	sub	sp, #36	@ 0x24
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	60f8      	str	r0, [r7, #12]
 80058ec:	60b9      	str	r1, [r7, #8]
 80058ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	f003 0307 	and.w	r3, r3, #7
 80058f6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80058f8:	69fb      	ldr	r3, [r7, #28]
 80058fa:	f1c3 0307 	rsb	r3, r3, #7
 80058fe:	2b04      	cmp	r3, #4
 8005900:	bf28      	it	cs
 8005902:	2304      	movcs	r3, #4
 8005904:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005906:	69fb      	ldr	r3, [r7, #28]
 8005908:	3304      	adds	r3, #4
 800590a:	2b06      	cmp	r3, #6
 800590c:	d902      	bls.n	8005914 <NVIC_EncodePriority+0x30>
 800590e:	69fb      	ldr	r3, [r7, #28]
 8005910:	3b03      	subs	r3, #3
 8005912:	e000      	b.n	8005916 <NVIC_EncodePriority+0x32>
 8005914:	2300      	movs	r3, #0
 8005916:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005918:	f04f 32ff 	mov.w	r2, #4294967295
 800591c:	69bb      	ldr	r3, [r7, #24]
 800591e:	fa02 f303 	lsl.w	r3, r2, r3
 8005922:	43da      	mvns	r2, r3
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	401a      	ands	r2, r3
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800592c:	f04f 31ff 	mov.w	r1, #4294967295
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	fa01 f303 	lsl.w	r3, r1, r3
 8005936:	43d9      	mvns	r1, r3
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800593c:	4313      	orrs	r3, r2
}
 800593e:	4618      	mov	r0, r3
 8005940:	3724      	adds	r7, #36	@ 0x24
 8005942:	46bd      	mov	sp, r7
 8005944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005948:	4770      	bx	lr
	...

0800594c <SysTick_Config>:
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b082      	sub	sp, #8
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	3b01      	subs	r3, #1
 8005958:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800595c:	d301      	bcc.n	8005962 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800595e:	2301      	movs	r3, #1
 8005960:	e00f      	b.n	8005982 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005962:	4a0a      	ldr	r2, [pc, #40]	@ (800598c <SysTick_Config+0x40>)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	3b01      	subs	r3, #1
 8005968:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800596a:	210f      	movs	r1, #15
 800596c:	f04f 30ff 	mov.w	r0, #4294967295
 8005970:	f7ff ff8e 	bl	8005890 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005974:	4b05      	ldr	r3, [pc, #20]	@ (800598c <SysTick_Config+0x40>)
 8005976:	2200      	movs	r2, #0
 8005978:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800597a:	4b04      	ldr	r3, [pc, #16]	@ (800598c <SysTick_Config+0x40>)
 800597c:	2207      	movs	r2, #7
 800597e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8005980:	2300      	movs	r3, #0
}
 8005982:	4618      	mov	r0, r3
 8005984:	3708      	adds	r7, #8
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}
 800598a:	bf00      	nop
 800598c:	e000e010 	.word	0xe000e010

08005990 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b082      	sub	sp, #8
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2b07      	cmp	r3, #7
 800599c:	d00f      	beq.n	80059be <HAL_NVIC_SetPriorityGrouping+0x2e>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2b06      	cmp	r3, #6
 80059a2:	d00c      	beq.n	80059be <HAL_NVIC_SetPriorityGrouping+0x2e>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2b05      	cmp	r3, #5
 80059a8:	d009      	beq.n	80059be <HAL_NVIC_SetPriorityGrouping+0x2e>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2b04      	cmp	r3, #4
 80059ae:	d006      	beq.n	80059be <HAL_NVIC_SetPriorityGrouping+0x2e>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2b03      	cmp	r3, #3
 80059b4:	d003      	beq.n	80059be <HAL_NVIC_SetPriorityGrouping+0x2e>
 80059b6:	21a6      	movs	r1, #166	@ 0xa6
 80059b8:	4804      	ldr	r0, [pc, #16]	@ (80059cc <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80059ba:	f7ff f8e3 	bl	8004b84 <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f7ff ff16 	bl	80057f0 <__NVIC_SetPriorityGrouping>
}
 80059c4:	bf00      	nop
 80059c6:	3708      	adds	r7, #8
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bd80      	pop	{r7, pc}
 80059cc:	0800f860 	.word	0x0800f860

080059d0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b086      	sub	sp, #24
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	4603      	mov	r3, r0
 80059d8:	60b9      	str	r1, [r7, #8]
 80059da:	607a      	str	r2, [r7, #4]
 80059dc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80059de:	2300      	movs	r3, #0
 80059e0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2b0f      	cmp	r3, #15
 80059e6:	d903      	bls.n	80059f0 <HAL_NVIC_SetPriority+0x20>
 80059e8:	21be      	movs	r1, #190	@ 0xbe
 80059ea:	480e      	ldr	r0, [pc, #56]	@ (8005a24 <HAL_NVIC_SetPriority+0x54>)
 80059ec:	f7ff f8ca 	bl	8004b84 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	2b0f      	cmp	r3, #15
 80059f4:	d903      	bls.n	80059fe <HAL_NVIC_SetPriority+0x2e>
 80059f6:	21bf      	movs	r1, #191	@ 0xbf
 80059f8:	480a      	ldr	r0, [pc, #40]	@ (8005a24 <HAL_NVIC_SetPriority+0x54>)
 80059fa:	f7ff f8c3 	bl	8004b84 <assert_failed>

  prioritygroup = NVIC_GetPriorityGrouping();
 80059fe:	f7ff ff1b 	bl	8005838 <__NVIC_GetPriorityGrouping>
 8005a02:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005a04:	687a      	ldr	r2, [r7, #4]
 8005a06:	68b9      	ldr	r1, [r7, #8]
 8005a08:	6978      	ldr	r0, [r7, #20]
 8005a0a:	f7ff ff6b 	bl	80058e4 <NVIC_EncodePriority>
 8005a0e:	4602      	mov	r2, r0
 8005a10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a14:	4611      	mov	r1, r2
 8005a16:	4618      	mov	r0, r3
 8005a18:	f7ff ff3a 	bl	8005890 <__NVIC_SetPriority>
}
 8005a1c:	bf00      	nop
 8005a1e:	3718      	adds	r7, #24
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}
 8005a24:	0800f860 	.word	0x0800f860

08005a28 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b082      	sub	sp, #8
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	4603      	mov	r3, r0
 8005a30:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8005a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	da03      	bge.n	8005a42 <HAL_NVIC_EnableIRQ+0x1a>
 8005a3a:	21d2      	movs	r1, #210	@ 0xd2
 8005a3c:	4805      	ldr	r0, [pc, #20]	@ (8005a54 <HAL_NVIC_EnableIRQ+0x2c>)
 8005a3e:	f7ff f8a1 	bl	8004b84 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a46:	4618      	mov	r0, r3
 8005a48:	f7ff ff04 	bl	8005854 <__NVIC_EnableIRQ>
}
 8005a4c:	bf00      	nop
 8005a4e:	3708      	adds	r7, #8
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}
 8005a54:	0800f860 	.word	0x0800f860

08005a58 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b082      	sub	sp, #8
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	f7ff ff73 	bl	800594c <SysTick_Config>
 8005a66:	4603      	mov	r3, r0
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	3708      	adds	r7, #8
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}

08005a70 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b084      	sub	sp, #16
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d101      	bne.n	8005a82 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	e19d      	b.n	8005dbe <HAL_DMA_Init+0x34e>
  }

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a79      	ldr	r2, [pc, #484]	@ (8005c6c <HAL_DMA_Init+0x1fc>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d044      	beq.n	8005b16 <HAL_DMA_Init+0xa6>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a77      	ldr	r2, [pc, #476]	@ (8005c70 <HAL_DMA_Init+0x200>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d03f      	beq.n	8005b16 <HAL_DMA_Init+0xa6>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a76      	ldr	r2, [pc, #472]	@ (8005c74 <HAL_DMA_Init+0x204>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d03a      	beq.n	8005b16 <HAL_DMA_Init+0xa6>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a74      	ldr	r2, [pc, #464]	@ (8005c78 <HAL_DMA_Init+0x208>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d035      	beq.n	8005b16 <HAL_DMA_Init+0xa6>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a73      	ldr	r2, [pc, #460]	@ (8005c7c <HAL_DMA_Init+0x20c>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d030      	beq.n	8005b16 <HAL_DMA_Init+0xa6>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a71      	ldr	r2, [pc, #452]	@ (8005c80 <HAL_DMA_Init+0x210>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d02b      	beq.n	8005b16 <HAL_DMA_Init+0xa6>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a70      	ldr	r2, [pc, #448]	@ (8005c84 <HAL_DMA_Init+0x214>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d026      	beq.n	8005b16 <HAL_DMA_Init+0xa6>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a6e      	ldr	r2, [pc, #440]	@ (8005c88 <HAL_DMA_Init+0x218>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d021      	beq.n	8005b16 <HAL_DMA_Init+0xa6>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a6d      	ldr	r2, [pc, #436]	@ (8005c8c <HAL_DMA_Init+0x21c>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d01c      	beq.n	8005b16 <HAL_DMA_Init+0xa6>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a6b      	ldr	r2, [pc, #428]	@ (8005c90 <HAL_DMA_Init+0x220>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d017      	beq.n	8005b16 <HAL_DMA_Init+0xa6>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a6a      	ldr	r2, [pc, #424]	@ (8005c94 <HAL_DMA_Init+0x224>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d012      	beq.n	8005b16 <HAL_DMA_Init+0xa6>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a68      	ldr	r2, [pc, #416]	@ (8005c98 <HAL_DMA_Init+0x228>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d00d      	beq.n	8005b16 <HAL_DMA_Init+0xa6>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a67      	ldr	r2, [pc, #412]	@ (8005c9c <HAL_DMA_Init+0x22c>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d008      	beq.n	8005b16 <HAL_DMA_Init+0xa6>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a65      	ldr	r2, [pc, #404]	@ (8005ca0 <HAL_DMA_Init+0x230>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d003      	beq.n	8005b16 <HAL_DMA_Init+0xa6>
 8005b0e:	21a5      	movs	r1, #165	@ 0xa5
 8005b10:	4864      	ldr	r0, [pc, #400]	@ (8005ca4 <HAL_DMA_Init+0x234>)
 8005b12:	f7ff f837 	bl	8004b84 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	689b      	ldr	r3, [r3, #8]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d00c      	beq.n	8005b38 <HAL_DMA_Init+0xc8>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	689b      	ldr	r3, [r3, #8]
 8005b22:	2b10      	cmp	r3, #16
 8005b24:	d008      	beq.n	8005b38 <HAL_DMA_Init+0xc8>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	689b      	ldr	r3, [r3, #8]
 8005b2a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005b2e:	d003      	beq.n	8005b38 <HAL_DMA_Init+0xc8>
 8005b30:	21a6      	movs	r1, #166	@ 0xa6
 8005b32:	485c      	ldr	r0, [pc, #368]	@ (8005ca4 <HAL_DMA_Init+0x234>)
 8005b34:	f7ff f826 	bl	8004b84 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	68db      	ldr	r3, [r3, #12]
 8005b3c:	2b40      	cmp	r3, #64	@ 0x40
 8005b3e:	d007      	beq.n	8005b50 <HAL_DMA_Init+0xe0>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	68db      	ldr	r3, [r3, #12]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d003      	beq.n	8005b50 <HAL_DMA_Init+0xe0>
 8005b48:	21a7      	movs	r1, #167	@ 0xa7
 8005b4a:	4856      	ldr	r0, [pc, #344]	@ (8005ca4 <HAL_DMA_Init+0x234>)
 8005b4c:	f7ff f81a 	bl	8004b84 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	691b      	ldr	r3, [r3, #16]
 8005b54:	2b80      	cmp	r3, #128	@ 0x80
 8005b56:	d007      	beq.n	8005b68 <HAL_DMA_Init+0xf8>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	691b      	ldr	r3, [r3, #16]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d003      	beq.n	8005b68 <HAL_DMA_Init+0xf8>
 8005b60:	21a8      	movs	r1, #168	@ 0xa8
 8005b62:	4850      	ldr	r0, [pc, #320]	@ (8005ca4 <HAL_DMA_Init+0x234>)
 8005b64:	f7ff f80e 	bl	8004b84 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	695b      	ldr	r3, [r3, #20]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d00d      	beq.n	8005b8c <HAL_DMA_Init+0x11c>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	695b      	ldr	r3, [r3, #20]
 8005b74:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b78:	d008      	beq.n	8005b8c <HAL_DMA_Init+0x11c>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	695b      	ldr	r3, [r3, #20]
 8005b7e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b82:	d003      	beq.n	8005b8c <HAL_DMA_Init+0x11c>
 8005b84:	21a9      	movs	r1, #169	@ 0xa9
 8005b86:	4847      	ldr	r0, [pc, #284]	@ (8005ca4 <HAL_DMA_Init+0x234>)
 8005b88:	f7fe fffc 	bl	8004b84 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	699b      	ldr	r3, [r3, #24]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d00d      	beq.n	8005bb0 <HAL_DMA_Init+0x140>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	699b      	ldr	r3, [r3, #24]
 8005b98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b9c:	d008      	beq.n	8005bb0 <HAL_DMA_Init+0x140>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	699b      	ldr	r3, [r3, #24]
 8005ba2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005ba6:	d003      	beq.n	8005bb0 <HAL_DMA_Init+0x140>
 8005ba8:	21aa      	movs	r1, #170	@ 0xaa
 8005baa:	483e      	ldr	r0, [pc, #248]	@ (8005ca4 <HAL_DMA_Init+0x234>)
 8005bac:	f7fe ffea 	bl	8004b84 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	69db      	ldr	r3, [r3, #28]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d007      	beq.n	8005bc8 <HAL_DMA_Init+0x158>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	69db      	ldr	r3, [r3, #28]
 8005bbc:	2b20      	cmp	r3, #32
 8005bbe:	d003      	beq.n	8005bc8 <HAL_DMA_Init+0x158>
 8005bc0:	21ab      	movs	r1, #171	@ 0xab
 8005bc2:	4838      	ldr	r0, [pc, #224]	@ (8005ca4 <HAL_DMA_Init+0x234>)
 8005bc4:	f7fe ffde 	bl	8004b84 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6a1b      	ldr	r3, [r3, #32]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d012      	beq.n	8005bf6 <HAL_DMA_Init+0x186>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6a1b      	ldr	r3, [r3, #32]
 8005bd4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005bd8:	d00d      	beq.n	8005bf6 <HAL_DMA_Init+0x186>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6a1b      	ldr	r3, [r3, #32]
 8005bde:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005be2:	d008      	beq.n	8005bf6 <HAL_DMA_Init+0x186>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6a1b      	ldr	r3, [r3, #32]
 8005be8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005bec:	d003      	beq.n	8005bf6 <HAL_DMA_Init+0x186>
 8005bee:	21ac      	movs	r1, #172	@ 0xac
 8005bf0:	482c      	ldr	r0, [pc, #176]	@ (8005ca4 <HAL_DMA_Init+0x234>)
 8005bf2:	f7fe ffc7 	bl	8004b84 <assert_failed>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d01f      	beq.n	8005c3e <HAL_DMA_Init+0x1ce>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	2b01      	cmp	r3, #1
 8005c04:	d01b      	beq.n	8005c3e <HAL_DMA_Init+0x1ce>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	2b02      	cmp	r3, #2
 8005c0c:	d017      	beq.n	8005c3e <HAL_DMA_Init+0x1ce>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	2b03      	cmp	r3, #3
 8005c14:	d013      	beq.n	8005c3e <HAL_DMA_Init+0x1ce>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	2b04      	cmp	r3, #4
 8005c1c:	d00f      	beq.n	8005c3e <HAL_DMA_Init+0x1ce>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	2b05      	cmp	r3, #5
 8005c24:	d00b      	beq.n	8005c3e <HAL_DMA_Init+0x1ce>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	2b06      	cmp	r3, #6
 8005c2c:	d007      	beq.n	8005c3e <HAL_DMA_Init+0x1ce>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	2b07      	cmp	r3, #7
 8005c34:	d003      	beq.n	8005c3e <HAL_DMA_Init+0x1ce>
 8005c36:	21ae      	movs	r1, #174	@ 0xae
 8005c38:	481a      	ldr	r0, [pc, #104]	@ (8005ca4 <HAL_DMA_Init+0x234>)
 8005c3a:	f7fe ffa3 	bl	8004b84 <assert_failed>

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	461a      	mov	r2, r3
 8005c44:	4b18      	ldr	r3, [pc, #96]	@ (8005ca8 <HAL_DMA_Init+0x238>)
 8005c46:	429a      	cmp	r2, r3
 8005c48:	d836      	bhi.n	8005cb8 <HAL_DMA_Init+0x248>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	461a      	mov	r2, r3
 8005c50:	4b16      	ldr	r3, [pc, #88]	@ (8005cac <HAL_DMA_Init+0x23c>)
 8005c52:	4413      	add	r3, r2
 8005c54:	4a16      	ldr	r2, [pc, #88]	@ (8005cb0 <HAL_DMA_Init+0x240>)
 8005c56:	fba2 2303 	umull	r2, r3, r2, r3
 8005c5a:	091b      	lsrs	r3, r3, #4
 8005c5c:	009a      	lsls	r2, r3, #2
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	4a13      	ldr	r2, [pc, #76]	@ (8005cb4 <HAL_DMA_Init+0x244>)
 8005c66:	641a      	str	r2, [r3, #64]	@ 0x40
 8005c68:	e035      	b.n	8005cd6 <HAL_DMA_Init+0x266>
 8005c6a:	bf00      	nop
 8005c6c:	40020008 	.word	0x40020008
 8005c70:	4002001c 	.word	0x4002001c
 8005c74:	40020030 	.word	0x40020030
 8005c78:	40020044 	.word	0x40020044
 8005c7c:	40020058 	.word	0x40020058
 8005c80:	4002006c 	.word	0x4002006c
 8005c84:	40020080 	.word	0x40020080
 8005c88:	40020408 	.word	0x40020408
 8005c8c:	4002041c 	.word	0x4002041c
 8005c90:	40020430 	.word	0x40020430
 8005c94:	40020444 	.word	0x40020444
 8005c98:	40020458 	.word	0x40020458
 8005c9c:	4002046c 	.word	0x4002046c
 8005ca0:	40020480 	.word	0x40020480
 8005ca4:	0800f89c 	.word	0x0800f89c
 8005ca8:	40020407 	.word	0x40020407
 8005cac:	bffdfff8 	.word	0xbffdfff8
 8005cb0:	cccccccd 	.word	0xcccccccd
 8005cb4:	40020000 	.word	0x40020000
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	461a      	mov	r2, r3
 8005cbe:	4b42      	ldr	r3, [pc, #264]	@ (8005dc8 <HAL_DMA_Init+0x358>)
 8005cc0:	4413      	add	r3, r2
 8005cc2:	4a42      	ldr	r2, [pc, #264]	@ (8005dcc <HAL_DMA_Init+0x35c>)
 8005cc4:	fba2 2303 	umull	r2, r3, r2, r3
 8005cc8:	091b      	lsrs	r3, r3, #4
 8005cca:	009a      	lsls	r2, r3, #2
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	4a3f      	ldr	r2, [pc, #252]	@ (8005dd0 <HAL_DMA_Init+0x360>)
 8005cd4:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2202      	movs	r2, #2
 8005cda:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8005cec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cf0:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005cfa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	691b      	ldr	r3, [r3, #16]
 8005d00:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005d06:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	699b      	ldr	r3, [r3, #24]
 8005d0c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005d12:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6a1b      	ldr	r3, [r3, #32]
 8005d18:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005d1a:	68fa      	ldr	r2, [r7, #12]
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	68fa      	ldr	r2, [r7, #12]
 8005d26:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	689b      	ldr	r3, [r3, #8]
 8005d2c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005d30:	d039      	beq.n	8005da6 <HAL_DMA_Init+0x336>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d36:	4a27      	ldr	r2, [pc, #156]	@ (8005dd4 <HAL_DMA_Init+0x364>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d11a      	bne.n	8005d72 <HAL_DMA_Init+0x302>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005d3c:	4b26      	ldr	r3, [pc, #152]	@ (8005dd8 <HAL_DMA_Init+0x368>)
 8005d3e:	681a      	ldr	r2, [r3, #0]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d44:	f003 031c 	and.w	r3, r3, #28
 8005d48:	210f      	movs	r1, #15
 8005d4a:	fa01 f303 	lsl.w	r3, r1, r3
 8005d4e:	43db      	mvns	r3, r3
 8005d50:	4921      	ldr	r1, [pc, #132]	@ (8005dd8 <HAL_DMA_Init+0x368>)
 8005d52:	4013      	ands	r3, r2
 8005d54:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005d56:	4b20      	ldr	r3, [pc, #128]	@ (8005dd8 <HAL_DMA_Init+0x368>)
 8005d58:	681a      	ldr	r2, [r3, #0]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6859      	ldr	r1, [r3, #4]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d62:	f003 031c 	and.w	r3, r3, #28
 8005d66:	fa01 f303 	lsl.w	r3, r1, r3
 8005d6a:	491b      	ldr	r1, [pc, #108]	@ (8005dd8 <HAL_DMA_Init+0x368>)
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	600b      	str	r3, [r1, #0]
 8005d70:	e019      	b.n	8005da6 <HAL_DMA_Init+0x336>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005d72:	4b1a      	ldr	r3, [pc, #104]	@ (8005ddc <HAL_DMA_Init+0x36c>)
 8005d74:	681a      	ldr	r2, [r3, #0]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d7a:	f003 031c 	and.w	r3, r3, #28
 8005d7e:	210f      	movs	r1, #15
 8005d80:	fa01 f303 	lsl.w	r3, r1, r3
 8005d84:	43db      	mvns	r3, r3
 8005d86:	4915      	ldr	r1, [pc, #84]	@ (8005ddc <HAL_DMA_Init+0x36c>)
 8005d88:	4013      	ands	r3, r2
 8005d8a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005d8c:	4b13      	ldr	r3, [pc, #76]	@ (8005ddc <HAL_DMA_Init+0x36c>)
 8005d8e:	681a      	ldr	r2, [r3, #0]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6859      	ldr	r1, [r3, #4]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d98:	f003 031c 	and.w	r3, r3, #28
 8005d9c:	fa01 f303 	lsl.w	r3, r1, r3
 8005da0:	490e      	ldr	r1, [pc, #56]	@ (8005ddc <HAL_DMA_Init+0x36c>)
 8005da2:	4313      	orrs	r3, r2
 8005da4:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2200      	movs	r2, #0
 8005daa:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2201      	movs	r2, #1
 8005db0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2200      	movs	r2, #0
 8005db8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005dbc:	2300      	movs	r3, #0
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	3710      	adds	r7, #16
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}
 8005dc6:	bf00      	nop
 8005dc8:	bffdfbf8 	.word	0xbffdfbf8
 8005dcc:	cccccccd 	.word	0xcccccccd
 8005dd0:	40020400 	.word	0x40020400
 8005dd4:	40020000 	.word	0x40020000
 8005dd8:	400200a8 	.word	0x400200a8
 8005ddc:	400204a8 	.word	0x400204a8

08005de0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b086      	sub	sp, #24
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	60f8      	str	r0, [r7, #12]
 8005de8:	60b9      	str	r1, [r7, #8]
 8005dea:	607a      	str	r2, [r7, #4]
 8005dec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005dee:	2300      	movs	r3, #0
 8005df0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d003      	beq.n	8005e00 <HAL_DMA_Start_IT+0x20>
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005dfe:	d304      	bcc.n	8005e0a <HAL_DMA_Start_IT+0x2a>
 8005e00:	f240 11df 	movw	r1, #479	@ 0x1df
 8005e04:	482c      	ldr	r0, [pc, #176]	@ (8005eb8 <HAL_DMA_Start_IT+0xd8>)
 8005e06:	f7fe febd 	bl	8004b84 <assert_failed>

  /* Process locked */
  __HAL_LOCK(hdma);
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005e10:	2b01      	cmp	r3, #1
 8005e12:	d101      	bne.n	8005e18 <HAL_DMA_Start_IT+0x38>
 8005e14:	2302      	movs	r3, #2
 8005e16:	e04b      	b.n	8005eb0 <HAL_DMA_Start_IT+0xd0>
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005e26:	b2db      	uxtb	r3, r3
 8005e28:	2b01      	cmp	r3, #1
 8005e2a:	d13a      	bne.n	8005ea2 <HAL_DMA_Start_IT+0xc2>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2202      	movs	r2, #2
 8005e30:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2200      	movs	r2, #0
 8005e38:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	681a      	ldr	r2, [r3, #0]
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f022 0201 	bic.w	r2, r2, #1
 8005e48:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	687a      	ldr	r2, [r7, #4]
 8005e4e:	68b9      	ldr	r1, [r7, #8]
 8005e50:	68f8      	ldr	r0, [r7, #12]
 8005e52:	f000 f923 	bl	800609c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d008      	beq.n	8005e70 <HAL_DMA_Start_IT+0x90>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	681a      	ldr	r2, [r3, #0]
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f042 020e 	orr.w	r2, r2, #14
 8005e6c:	601a      	str	r2, [r3, #0]
 8005e6e:	e00f      	b.n	8005e90 <HAL_DMA_Start_IT+0xb0>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	681a      	ldr	r2, [r3, #0]
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f022 0204 	bic.w	r2, r2, #4
 8005e7e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	681a      	ldr	r2, [r3, #0]
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f042 020a 	orr.w	r2, r2, #10
 8005e8e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	681a      	ldr	r2, [r3, #0]
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f042 0201 	orr.w	r2, r2, #1
 8005e9e:	601a      	str	r2, [r3, #0]
 8005ea0:	e005      	b.n	8005eae <HAL_DMA_Start_IT+0xce>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005eaa:	2302      	movs	r3, #2
 8005eac:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005eae:	7dfb      	ldrb	r3, [r7, #23]
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	3718      	adds	r7, #24
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}
 8005eb8:	0800f89c 	.word	0x0800f89c

08005ebc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b084      	sub	sp, #16
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005ece:	b2db      	uxtb	r3, r3
 8005ed0:	2b02      	cmp	r3, #2
 8005ed2:	d005      	beq.n	8005ee0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2204      	movs	r2, #4
 8005ed8:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8005eda:	2301      	movs	r3, #1
 8005edc:	73fb      	strb	r3, [r7, #15]
 8005ede:	e029      	b.n	8005f34 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	681a      	ldr	r2, [r3, #0]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f022 020e 	bic.w	r2, r2, #14
 8005eee:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	681a      	ldr	r2, [r3, #0]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f022 0201 	bic.w	r2, r2, #1
 8005efe:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f04:	f003 021c 	and.w	r2, r3, #28
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f0c:	2101      	movs	r1, #1
 8005f0e:	fa01 f202 	lsl.w	r2, r1, r2
 8005f12:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2201      	movs	r2, #1
 8005f18:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d003      	beq.n	8005f34 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f30:	6878      	ldr	r0, [r7, #4]
 8005f32:	4798      	blx	r3
    }
  }
  return status;
 8005f34:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	3710      	adds	r7, #16
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}

08005f3e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005f3e:	b580      	push	{r7, lr}
 8005f40:	b084      	sub	sp, #16
 8005f42:	af00      	add	r7, sp, #0
 8005f44:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f5a:	f003 031c 	and.w	r3, r3, #28
 8005f5e:	2204      	movs	r2, #4
 8005f60:	409a      	lsls	r2, r3
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	4013      	ands	r3, r2
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d026      	beq.n	8005fb8 <HAL_DMA_IRQHandler+0x7a>
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	f003 0304 	and.w	r3, r3, #4
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d021      	beq.n	8005fb8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f003 0320 	and.w	r3, r3, #32
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d107      	bne.n	8005f92 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	681a      	ldr	r2, [r3, #0]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f022 0204 	bic.w	r2, r2, #4
 8005f90:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f96:	f003 021c 	and.w	r2, r3, #28
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f9e:	2104      	movs	r1, #4
 8005fa0:	fa01 f202 	lsl.w	r2, r1, r2
 8005fa4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d071      	beq.n	8006092 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005fb6:	e06c      	b.n	8006092 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fbc:	f003 031c 	and.w	r3, r3, #28
 8005fc0:	2202      	movs	r2, #2
 8005fc2:	409a      	lsls	r2, r3
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	4013      	ands	r3, r2
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d02e      	beq.n	800602a <HAL_DMA_IRQHandler+0xec>
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	f003 0302 	and.w	r3, r3, #2
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d029      	beq.n	800602a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f003 0320 	and.w	r3, r3, #32
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d10b      	bne.n	8005ffc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	681a      	ldr	r2, [r3, #0]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f022 020a 	bic.w	r2, r2, #10
 8005ff2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006000:	f003 021c 	and.w	r2, r3, #28
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006008:	2102      	movs	r1, #2
 800600a:	fa01 f202 	lsl.w	r2, r1, r2
 800600e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2200      	movs	r2, #0
 8006014:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800601c:	2b00      	cmp	r3, #0
 800601e:	d038      	beq.n	8006092 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8006028:	e033      	b.n	8006092 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800602e:	f003 031c 	and.w	r3, r3, #28
 8006032:	2208      	movs	r2, #8
 8006034:	409a      	lsls	r2, r3
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	4013      	ands	r3, r2
 800603a:	2b00      	cmp	r3, #0
 800603c:	d02a      	beq.n	8006094 <HAL_DMA_IRQHandler+0x156>
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	f003 0308 	and.w	r3, r3, #8
 8006044:	2b00      	cmp	r3, #0
 8006046:	d025      	beq.n	8006094 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	681a      	ldr	r2, [r3, #0]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f022 020e 	bic.w	r2, r2, #14
 8006056:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800605c:	f003 021c 	and.w	r2, r3, #28
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006064:	2101      	movs	r1, #1
 8006066:	fa01 f202 	lsl.w	r2, r1, r2
 800606a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2201      	movs	r2, #1
 8006070:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2201      	movs	r2, #1
 8006076:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2200      	movs	r2, #0
 800607e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006086:	2b00      	cmp	r3, #0
 8006088:	d004      	beq.n	8006094 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006092:	bf00      	nop
 8006094:	bf00      	nop
}
 8006096:	3710      	adds	r7, #16
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}

0800609c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800609c:	b480      	push	{r7}
 800609e:	b085      	sub	sp, #20
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	60f8      	str	r0, [r7, #12]
 80060a4:	60b9      	str	r1, [r7, #8]
 80060a6:	607a      	str	r2, [r7, #4]
 80060a8:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060ae:	f003 021c 	and.w	r2, r3, #28
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060b6:	2101      	movs	r1, #1
 80060b8:	fa01 f202 	lsl.w	r2, r1, r2
 80060bc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	683a      	ldr	r2, [r7, #0]
 80060c4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	689b      	ldr	r3, [r3, #8]
 80060ca:	2b10      	cmp	r3, #16
 80060cc:	d108      	bne.n	80060e0 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	687a      	ldr	r2, [r7, #4]
 80060d4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	68ba      	ldr	r2, [r7, #8]
 80060dc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80060de:	e007      	b.n	80060f0 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	68ba      	ldr	r2, [r7, #8]
 80060e6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	687a      	ldr	r2, [r7, #4]
 80060ee:	60da      	str	r2, [r3, #12]
}
 80060f0:	bf00      	nop
 80060f2:	3714      	adds	r7, #20
 80060f4:	46bd      	mov	sp, r7
 80060f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fa:	4770      	bx	lr

080060fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b086      	sub	sp, #24
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
 8006104:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006106:	2300      	movs	r3, #0
 8006108:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8006110:	d01f      	beq.n	8006152 <HAL_GPIO_Init+0x56>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	4a3c      	ldr	r2, [pc, #240]	@ (8006208 <HAL_GPIO_Init+0x10c>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d01b      	beq.n	8006152 <HAL_GPIO_Init+0x56>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	4a3b      	ldr	r2, [pc, #236]	@ (800620c <HAL_GPIO_Init+0x110>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d017      	beq.n	8006152 <HAL_GPIO_Init+0x56>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	4a3a      	ldr	r2, [pc, #232]	@ (8006210 <HAL_GPIO_Init+0x114>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d013      	beq.n	8006152 <HAL_GPIO_Init+0x56>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	4a39      	ldr	r2, [pc, #228]	@ (8006214 <HAL_GPIO_Init+0x118>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d00f      	beq.n	8006152 <HAL_GPIO_Init+0x56>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	4a38      	ldr	r2, [pc, #224]	@ (8006218 <HAL_GPIO_Init+0x11c>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d00b      	beq.n	8006152 <HAL_GPIO_Init+0x56>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	4a37      	ldr	r2, [pc, #220]	@ (800621c <HAL_GPIO_Init+0x120>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d007      	beq.n	8006152 <HAL_GPIO_Init+0x56>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	4a36      	ldr	r2, [pc, #216]	@ (8006220 <HAL_GPIO_Init+0x124>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d003      	beq.n	8006152 <HAL_GPIO_Init+0x56>
 800614a:	21aa      	movs	r1, #170	@ 0xaa
 800614c:	4835      	ldr	r0, [pc, #212]	@ (8006224 <HAL_GPIO_Init+0x128>)
 800614e:	f7fe fd19 	bl	8004b84 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	b29b      	uxth	r3, r3
 8006158:	2b00      	cmp	r3, #0
 800615a:	d004      	beq.n	8006166 <HAL_GPIO_Init+0x6a>
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006164:	d303      	bcc.n	800616e <HAL_GPIO_Init+0x72>
 8006166:	21ab      	movs	r1, #171	@ 0xab
 8006168:	482e      	ldr	r0, [pc, #184]	@ (8006224 <HAL_GPIO_Init+0x128>)
 800616a:	f7fe fd0b 	bl	8004b84 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	685b      	ldr	r3, [r3, #4]
 8006172:	2b00      	cmp	r3, #0
 8006174:	f000 823d 	beq.w	80065f2 <HAL_GPIO_Init+0x4f6>
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	2b01      	cmp	r3, #1
 800617e:	f000 8238 	beq.w	80065f2 <HAL_GPIO_Init+0x4f6>
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	2b11      	cmp	r3, #17
 8006188:	f000 8233 	beq.w	80065f2 <HAL_GPIO_Init+0x4f6>
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	2b02      	cmp	r3, #2
 8006192:	f000 822e 	beq.w	80065f2 <HAL_GPIO_Init+0x4f6>
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	2b12      	cmp	r3, #18
 800619c:	f000 8229 	beq.w	80065f2 <HAL_GPIO_Init+0x4f6>
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	685b      	ldr	r3, [r3, #4]
 80061a4:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 80061a8:	f000 8223 	beq.w	80065f2 <HAL_GPIO_Init+0x4f6>
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 80061b4:	f000 821d 	beq.w	80065f2 <HAL_GPIO_Init+0x4f6>
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	f5b3 1f44 	cmp.w	r3, #3211264	@ 0x310000
 80061c0:	f000 8217 	beq.w	80065f2 <HAL_GPIO_Init+0x4f6>
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	685b      	ldr	r3, [r3, #4]
 80061c8:	f5b3 1f90 	cmp.w	r3, #1179648	@ 0x120000
 80061cc:	f000 8211 	beq.w	80065f2 <HAL_GPIO_Init+0x4f6>
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	685b      	ldr	r3, [r3, #4]
 80061d4:	f5b3 1f08 	cmp.w	r3, #2228224	@ 0x220000
 80061d8:	f000 820b 	beq.w	80065f2 <HAL_GPIO_Init+0x4f6>
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	685b      	ldr	r3, [r3, #4]
 80061e0:	f5b3 1f48 	cmp.w	r3, #3276800	@ 0x320000
 80061e4:	f000 8205 	beq.w	80065f2 <HAL_GPIO_Init+0x4f6>
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	685b      	ldr	r3, [r3, #4]
 80061ec:	2b03      	cmp	r3, #3
 80061ee:	f000 8200 	beq.w	80065f2 <HAL_GPIO_Init+0x4f6>
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	685b      	ldr	r3, [r3, #4]
 80061f6:	2b0b      	cmp	r3, #11
 80061f8:	f000 81fb 	beq.w	80065f2 <HAL_GPIO_Init+0x4f6>
 80061fc:	21ac      	movs	r1, #172	@ 0xac
 80061fe:	4809      	ldr	r0, [pc, #36]	@ (8006224 <HAL_GPIO_Init+0x128>)
 8006200:	f7fe fcc0 	bl	8004b84 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006204:	e1f5      	b.n	80065f2 <HAL_GPIO_Init+0x4f6>
 8006206:	bf00      	nop
 8006208:	48000400 	.word	0x48000400
 800620c:	48000800 	.word	0x48000800
 8006210:	48000c00 	.word	0x48000c00
 8006214:	48001000 	.word	0x48001000
 8006218:	48001400 	.word	0x48001400
 800621c:	48001800 	.word	0x48001800
 8006220:	48001c00 	.word	0x48001c00
 8006224:	0800f8d4 	.word	0x0800f8d4
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	681a      	ldr	r2, [r3, #0]
 800622c:	2101      	movs	r1, #1
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	fa01 f303 	lsl.w	r3, r1, r3
 8006234:	4013      	ands	r3, r2
 8006236:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	2b00      	cmp	r3, #0
 800623c:	f000 81d6 	beq.w	80065ec <HAL_GPIO_Init+0x4f0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	f003 0303 	and.w	r3, r3, #3
 8006248:	2b01      	cmp	r3, #1
 800624a:	d005      	beq.n	8006258 <HAL_GPIO_Init+0x15c>
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	f003 0303 	and.w	r3, r3, #3
 8006254:	2b02      	cmp	r3, #2
 8006256:	d144      	bne.n	80062e2 <HAL_GPIO_Init+0x1e6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	68db      	ldr	r3, [r3, #12]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d00f      	beq.n	8006280 <HAL_GPIO_Init+0x184>
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	68db      	ldr	r3, [r3, #12]
 8006264:	2b01      	cmp	r3, #1
 8006266:	d00b      	beq.n	8006280 <HAL_GPIO_Init+0x184>
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	68db      	ldr	r3, [r3, #12]
 800626c:	2b02      	cmp	r3, #2
 800626e:	d007      	beq.n	8006280 <HAL_GPIO_Init+0x184>
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	68db      	ldr	r3, [r3, #12]
 8006274:	2b03      	cmp	r3, #3
 8006276:	d003      	beq.n	8006280 <HAL_GPIO_Init+0x184>
 8006278:	21bb      	movs	r1, #187	@ 0xbb
 800627a:	489c      	ldr	r0, [pc, #624]	@ (80064ec <HAL_GPIO_Init+0x3f0>)
 800627c:	f7fe fc82 	bl	8004b84 <assert_failed>

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	689b      	ldr	r3, [r3, #8]
 8006284:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	005b      	lsls	r3, r3, #1
 800628a:	2203      	movs	r2, #3
 800628c:	fa02 f303 	lsl.w	r3, r2, r3
 8006290:	43db      	mvns	r3, r3
 8006292:	693a      	ldr	r2, [r7, #16]
 8006294:	4013      	ands	r3, r2
 8006296:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	68da      	ldr	r2, [r3, #12]
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	005b      	lsls	r3, r3, #1
 80062a0:	fa02 f303 	lsl.w	r3, r2, r3
 80062a4:	693a      	ldr	r2, [r7, #16]
 80062a6:	4313      	orrs	r3, r2
 80062a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	693a      	ldr	r2, [r7, #16]
 80062ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80062b6:	2201      	movs	r2, #1
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	fa02 f303 	lsl.w	r3, r2, r3
 80062be:	43db      	mvns	r3, r3
 80062c0:	693a      	ldr	r2, [r7, #16]
 80062c2:	4013      	ands	r3, r2
 80062c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	091b      	lsrs	r3, r3, #4
 80062cc:	f003 0201 	and.w	r2, r3, #1
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	fa02 f303 	lsl.w	r3, r2, r3
 80062d6:	693a      	ldr	r2, [r7, #16]
 80062d8:	4313      	orrs	r3, r2
 80062da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	693a      	ldr	r2, [r7, #16]
 80062e0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	f003 0303 	and.w	r3, r3, #3
 80062ea:	2b03      	cmp	r3, #3
 80062ec:	d118      	bne.n	8006320 <HAL_GPIO_Init+0x224>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80062f4:	2201      	movs	r2, #1
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	fa02 f303 	lsl.w	r3, r2, r3
 80062fc:	43db      	mvns	r3, r3
 80062fe:	693a      	ldr	r2, [r7, #16]
 8006300:	4013      	ands	r3, r2
 8006302:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	08db      	lsrs	r3, r3, #3
 800630a:	f003 0201 	and.w	r2, r3, #1
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	fa02 f303 	lsl.w	r3, r2, r3
 8006314:	693a      	ldr	r2, [r7, #16]
 8006316:	4313      	orrs	r3, r2
 8006318:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	693a      	ldr	r2, [r7, #16]
 800631e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	685b      	ldr	r3, [r3, #4]
 8006324:	f003 0303 	and.w	r3, r3, #3
 8006328:	2b03      	cmp	r3, #3
 800632a:	d027      	beq.n	800637c <HAL_GPIO_Init+0x280>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	689b      	ldr	r3, [r3, #8]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d00b      	beq.n	800634c <HAL_GPIO_Init+0x250>
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	689b      	ldr	r3, [r3, #8]
 8006338:	2b01      	cmp	r3, #1
 800633a:	d007      	beq.n	800634c <HAL_GPIO_Init+0x250>
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	689b      	ldr	r3, [r3, #8]
 8006340:	2b02      	cmp	r3, #2
 8006342:	d003      	beq.n	800634c <HAL_GPIO_Init+0x250>
 8006344:	21dc      	movs	r1, #220	@ 0xdc
 8006346:	4869      	ldr	r0, [pc, #420]	@ (80064ec <HAL_GPIO_Init+0x3f0>)
 8006348:	f7fe fc1c 	bl	8004b84 <assert_failed>

        temp = GPIOx->PUPDR;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	68db      	ldr	r3, [r3, #12]
 8006350:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	005b      	lsls	r3, r3, #1
 8006356:	2203      	movs	r2, #3
 8006358:	fa02 f303 	lsl.w	r3, r2, r3
 800635c:	43db      	mvns	r3, r3
 800635e:	693a      	ldr	r2, [r7, #16]
 8006360:	4013      	ands	r3, r2
 8006362:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	689a      	ldr	r2, [r3, #8]
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	005b      	lsls	r3, r3, #1
 800636c:	fa02 f303 	lsl.w	r3, r2, r3
 8006370:	693a      	ldr	r2, [r7, #16]
 8006372:	4313      	orrs	r3, r2
 8006374:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	693a      	ldr	r2, [r7, #16]
 800637a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	f003 0303 	and.w	r3, r3, #3
 8006384:	2b02      	cmp	r3, #2
 8006386:	d14f      	bne.n	8006428 <HAL_GPIO_Init+0x32c>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800638e:	d01f      	beq.n	80063d0 <HAL_GPIO_Init+0x2d4>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	4a57      	ldr	r2, [pc, #348]	@ (80064f0 <HAL_GPIO_Init+0x3f4>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d01b      	beq.n	80063d0 <HAL_GPIO_Init+0x2d4>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	4a56      	ldr	r2, [pc, #344]	@ (80064f4 <HAL_GPIO_Init+0x3f8>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d017      	beq.n	80063d0 <HAL_GPIO_Init+0x2d4>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	4a55      	ldr	r2, [pc, #340]	@ (80064f8 <HAL_GPIO_Init+0x3fc>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d013      	beq.n	80063d0 <HAL_GPIO_Init+0x2d4>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	4a54      	ldr	r2, [pc, #336]	@ (80064fc <HAL_GPIO_Init+0x400>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d00f      	beq.n	80063d0 <HAL_GPIO_Init+0x2d4>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	4a53      	ldr	r2, [pc, #332]	@ (8006500 <HAL_GPIO_Init+0x404>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d00b      	beq.n	80063d0 <HAL_GPIO_Init+0x2d4>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	4a52      	ldr	r2, [pc, #328]	@ (8006504 <HAL_GPIO_Init+0x408>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d007      	beq.n	80063d0 <HAL_GPIO_Init+0x2d4>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	4a51      	ldr	r2, [pc, #324]	@ (8006508 <HAL_GPIO_Init+0x40c>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d003      	beq.n	80063d0 <HAL_GPIO_Init+0x2d4>
 80063c8:	21e8      	movs	r1, #232	@ 0xe8
 80063ca:	4848      	ldr	r0, [pc, #288]	@ (80064ec <HAL_GPIO_Init+0x3f0>)
 80063cc:	f7fe fbda 	bl	8004b84 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	691b      	ldr	r3, [r3, #16]
 80063d4:	2b0f      	cmp	r3, #15
 80063d6:	d903      	bls.n	80063e0 <HAL_GPIO_Init+0x2e4>
 80063d8:	21e9      	movs	r1, #233	@ 0xe9
 80063da:	4844      	ldr	r0, [pc, #272]	@ (80064ec <HAL_GPIO_Init+0x3f0>)
 80063dc:	f7fe fbd2 	bl	8004b84 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	08da      	lsrs	r2, r3, #3
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	3208      	adds	r2, #8
 80063e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	f003 0307 	and.w	r3, r3, #7
 80063f4:	009b      	lsls	r3, r3, #2
 80063f6:	220f      	movs	r2, #15
 80063f8:	fa02 f303 	lsl.w	r3, r2, r3
 80063fc:	43db      	mvns	r3, r3
 80063fe:	693a      	ldr	r2, [r7, #16]
 8006400:	4013      	ands	r3, r2
 8006402:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	691a      	ldr	r2, [r3, #16]
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	f003 0307 	and.w	r3, r3, #7
 800640e:	009b      	lsls	r3, r3, #2
 8006410:	fa02 f303 	lsl.w	r3, r2, r3
 8006414:	693a      	ldr	r2, [r7, #16]
 8006416:	4313      	orrs	r3, r2
 8006418:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	08da      	lsrs	r2, r3, #3
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	3208      	adds	r2, #8
 8006422:	6939      	ldr	r1, [r7, #16]
 8006424:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	005b      	lsls	r3, r3, #1
 8006432:	2203      	movs	r2, #3
 8006434:	fa02 f303 	lsl.w	r3, r2, r3
 8006438:	43db      	mvns	r3, r3
 800643a:	693a      	ldr	r2, [r7, #16]
 800643c:	4013      	ands	r3, r2
 800643e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	f003 0203 	and.w	r2, r3, #3
 8006448:	697b      	ldr	r3, [r7, #20]
 800644a:	005b      	lsls	r3, r3, #1
 800644c:	fa02 f303 	lsl.w	r3, r2, r3
 8006450:	693a      	ldr	r2, [r7, #16]
 8006452:	4313      	orrs	r3, r2
 8006454:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	693a      	ldr	r2, [r7, #16]
 800645a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006464:	2b00      	cmp	r3, #0
 8006466:	f000 80c1 	beq.w	80065ec <HAL_GPIO_Init+0x4f0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800646a:	4b28      	ldr	r3, [pc, #160]	@ (800650c <HAL_GPIO_Init+0x410>)
 800646c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800646e:	4a27      	ldr	r2, [pc, #156]	@ (800650c <HAL_GPIO_Init+0x410>)
 8006470:	f043 0301 	orr.w	r3, r3, #1
 8006474:	6613      	str	r3, [r2, #96]	@ 0x60
 8006476:	4b25      	ldr	r3, [pc, #148]	@ (800650c <HAL_GPIO_Init+0x410>)
 8006478:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800647a:	f003 0301 	and.w	r3, r3, #1
 800647e:	60bb      	str	r3, [r7, #8]
 8006480:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8006482:	4a23      	ldr	r2, [pc, #140]	@ (8006510 <HAL_GPIO_Init+0x414>)
 8006484:	697b      	ldr	r3, [r7, #20]
 8006486:	089b      	lsrs	r3, r3, #2
 8006488:	3302      	adds	r3, #2
 800648a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800648e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	f003 0303 	and.w	r3, r3, #3
 8006496:	009b      	lsls	r3, r3, #2
 8006498:	220f      	movs	r2, #15
 800649a:	fa02 f303 	lsl.w	r3, r2, r3
 800649e:	43db      	mvns	r3, r3
 80064a0:	693a      	ldr	r2, [r7, #16]
 80064a2:	4013      	ands	r3, r2
 80064a4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80064ac:	d03a      	beq.n	8006524 <HAL_GPIO_Init+0x428>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	4a0f      	ldr	r2, [pc, #60]	@ (80064f0 <HAL_GPIO_Init+0x3f4>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d034      	beq.n	8006520 <HAL_GPIO_Init+0x424>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	4a0e      	ldr	r2, [pc, #56]	@ (80064f4 <HAL_GPIO_Init+0x3f8>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d02e      	beq.n	800651c <HAL_GPIO_Init+0x420>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	4a0d      	ldr	r2, [pc, #52]	@ (80064f8 <HAL_GPIO_Init+0x3fc>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d028      	beq.n	8006518 <HAL_GPIO_Init+0x41c>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	4a0c      	ldr	r2, [pc, #48]	@ (80064fc <HAL_GPIO_Init+0x400>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d022      	beq.n	8006514 <HAL_GPIO_Init+0x418>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	4a0b      	ldr	r2, [pc, #44]	@ (8006500 <HAL_GPIO_Init+0x404>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d007      	beq.n	80064e6 <HAL_GPIO_Init+0x3ea>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	4a0a      	ldr	r2, [pc, #40]	@ (8006504 <HAL_GPIO_Init+0x408>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d101      	bne.n	80064e2 <HAL_GPIO_Init+0x3e6>
 80064de:	2306      	movs	r3, #6
 80064e0:	e021      	b.n	8006526 <HAL_GPIO_Init+0x42a>
 80064e2:	2307      	movs	r3, #7
 80064e4:	e01f      	b.n	8006526 <HAL_GPIO_Init+0x42a>
 80064e6:	2305      	movs	r3, #5
 80064e8:	e01d      	b.n	8006526 <HAL_GPIO_Init+0x42a>
 80064ea:	bf00      	nop
 80064ec:	0800f8d4 	.word	0x0800f8d4
 80064f0:	48000400 	.word	0x48000400
 80064f4:	48000800 	.word	0x48000800
 80064f8:	48000c00 	.word	0x48000c00
 80064fc:	48001000 	.word	0x48001000
 8006500:	48001400 	.word	0x48001400
 8006504:	48001800 	.word	0x48001800
 8006508:	48001c00 	.word	0x48001c00
 800650c:	40021000 	.word	0x40021000
 8006510:	40010000 	.word	0x40010000
 8006514:	2304      	movs	r3, #4
 8006516:	e006      	b.n	8006526 <HAL_GPIO_Init+0x42a>
 8006518:	2303      	movs	r3, #3
 800651a:	e004      	b.n	8006526 <HAL_GPIO_Init+0x42a>
 800651c:	2302      	movs	r3, #2
 800651e:	e002      	b.n	8006526 <HAL_GPIO_Init+0x42a>
 8006520:	2301      	movs	r3, #1
 8006522:	e000      	b.n	8006526 <HAL_GPIO_Init+0x42a>
 8006524:	2300      	movs	r3, #0
 8006526:	697a      	ldr	r2, [r7, #20]
 8006528:	f002 0203 	and.w	r2, r2, #3
 800652c:	0092      	lsls	r2, r2, #2
 800652e:	4093      	lsls	r3, r2
 8006530:	693a      	ldr	r2, [r7, #16]
 8006532:	4313      	orrs	r3, r2
 8006534:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006536:	4935      	ldr	r1, [pc, #212]	@ (800660c <HAL_GPIO_Init+0x510>)
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	089b      	lsrs	r3, r3, #2
 800653c:	3302      	adds	r3, #2
 800653e:	693a      	ldr	r2, [r7, #16]
 8006540:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006544:	4b32      	ldr	r3, [pc, #200]	@ (8006610 <HAL_GPIO_Init+0x514>)
 8006546:	689b      	ldr	r3, [r3, #8]
 8006548:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	43db      	mvns	r3, r3
 800654e:	693a      	ldr	r2, [r7, #16]
 8006550:	4013      	ands	r3, r2
 8006552:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800655c:	2b00      	cmp	r3, #0
 800655e:	d003      	beq.n	8006568 <HAL_GPIO_Init+0x46c>
        {
          temp |= iocurrent;
 8006560:	693a      	ldr	r2, [r7, #16]
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	4313      	orrs	r3, r2
 8006566:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006568:	4a29      	ldr	r2, [pc, #164]	@ (8006610 <HAL_GPIO_Init+0x514>)
 800656a:	693b      	ldr	r3, [r7, #16]
 800656c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800656e:	4b28      	ldr	r3, [pc, #160]	@ (8006610 <HAL_GPIO_Init+0x514>)
 8006570:	68db      	ldr	r3, [r3, #12]
 8006572:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	43db      	mvns	r3, r3
 8006578:	693a      	ldr	r2, [r7, #16]
 800657a:	4013      	ands	r3, r2
 800657c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006586:	2b00      	cmp	r3, #0
 8006588:	d003      	beq.n	8006592 <HAL_GPIO_Init+0x496>
        {
          temp |= iocurrent;
 800658a:	693a      	ldr	r2, [r7, #16]
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	4313      	orrs	r3, r2
 8006590:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006592:	4a1f      	ldr	r2, [pc, #124]	@ (8006610 <HAL_GPIO_Init+0x514>)
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8006598:	4b1d      	ldr	r3, [pc, #116]	@ (8006610 <HAL_GPIO_Init+0x514>)
 800659a:	685b      	ldr	r3, [r3, #4]
 800659c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	43db      	mvns	r3, r3
 80065a2:	693a      	ldr	r2, [r7, #16]
 80065a4:	4013      	ands	r3, r2
 80065a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	685b      	ldr	r3, [r3, #4]
 80065ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d003      	beq.n	80065bc <HAL_GPIO_Init+0x4c0>
        {
          temp |= iocurrent;
 80065b4:	693a      	ldr	r2, [r7, #16]
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	4313      	orrs	r3, r2
 80065ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80065bc:	4a14      	ldr	r2, [pc, #80]	@ (8006610 <HAL_GPIO_Init+0x514>)
 80065be:	693b      	ldr	r3, [r7, #16]
 80065c0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80065c2:	4b13      	ldr	r3, [pc, #76]	@ (8006610 <HAL_GPIO_Init+0x514>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	43db      	mvns	r3, r3
 80065cc:	693a      	ldr	r2, [r7, #16]
 80065ce:	4013      	ands	r3, r2
 80065d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d003      	beq.n	80065e6 <HAL_GPIO_Init+0x4ea>
        {
          temp |= iocurrent;
 80065de:	693a      	ldr	r2, [r7, #16]
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	4313      	orrs	r3, r2
 80065e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80065e6:	4a0a      	ldr	r2, [pc, #40]	@ (8006610 <HAL_GPIO_Init+0x514>)
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	3301      	adds	r3, #1
 80065f0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	681a      	ldr	r2, [r3, #0]
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	fa22 f303 	lsr.w	r3, r2, r3
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	f47f ae13 	bne.w	8006228 <HAL_GPIO_Init+0x12c>
  }
}
 8006602:	bf00      	nop
 8006604:	bf00      	nop
 8006606:	3718      	adds	r7, #24
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}
 800660c:	40010000 	.word	0x40010000
 8006610:	40010400 	.word	0x40010400

08006614 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b084      	sub	sp, #16
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
 800661c:	460b      	mov	r3, r1
 800661e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8006620:	887b      	ldrh	r3, [r7, #2]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d104      	bne.n	8006630 <HAL_GPIO_ReadPin+0x1c>
 8006626:	f44f 71c7 	mov.w	r1, #398	@ 0x18e
 800662a:	4809      	ldr	r0, [pc, #36]	@ (8006650 <HAL_GPIO_ReadPin+0x3c>)
 800662c:	f7fe faaa 	bl	8004b84 <assert_failed>

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	691a      	ldr	r2, [r3, #16]
 8006634:	887b      	ldrh	r3, [r7, #2]
 8006636:	4013      	ands	r3, r2
 8006638:	2b00      	cmp	r3, #0
 800663a:	d002      	beq.n	8006642 <HAL_GPIO_ReadPin+0x2e>
  {
    bitstatus = GPIO_PIN_SET;
 800663c:	2301      	movs	r3, #1
 800663e:	73fb      	strb	r3, [r7, #15]
 8006640:	e001      	b.n	8006646 <HAL_GPIO_ReadPin+0x32>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006642:	2300      	movs	r3, #0
 8006644:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006646:	7bfb      	ldrb	r3, [r7, #15]
}
 8006648:	4618      	mov	r0, r3
 800664a:	3710      	adds	r7, #16
 800664c:	46bd      	mov	sp, r7
 800664e:	bd80      	pop	{r7, pc}
 8006650:	0800f8d4 	.word	0x0800f8d4

08006654 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b082      	sub	sp, #8
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
 800665c:	460b      	mov	r3, r1
 800665e:	807b      	strh	r3, [r7, #2]
 8006660:	4613      	mov	r3, r2
 8006662:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8006664:	887b      	ldrh	r3, [r7, #2]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d104      	bne.n	8006674 <HAL_GPIO_WritePin+0x20>
 800666a:	f44f 71d7 	mov.w	r1, #430	@ 0x1ae
 800666e:	480e      	ldr	r0, [pc, #56]	@ (80066a8 <HAL_GPIO_WritePin+0x54>)
 8006670:	f7fe fa88 	bl	8004b84 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8006674:	787b      	ldrb	r3, [r7, #1]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d007      	beq.n	800668a <HAL_GPIO_WritePin+0x36>
 800667a:	787b      	ldrb	r3, [r7, #1]
 800667c:	2b01      	cmp	r3, #1
 800667e:	d004      	beq.n	800668a <HAL_GPIO_WritePin+0x36>
 8006680:	f240 11af 	movw	r1, #431	@ 0x1af
 8006684:	4808      	ldr	r0, [pc, #32]	@ (80066a8 <HAL_GPIO_WritePin+0x54>)
 8006686:	f7fe fa7d 	bl	8004b84 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 800668a:	787b      	ldrb	r3, [r7, #1]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d003      	beq.n	8006698 <HAL_GPIO_WritePin+0x44>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006690:	887a      	ldrh	r2, [r7, #2]
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006696:	e002      	b.n	800669e <HAL_GPIO_WritePin+0x4a>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006698:	887a      	ldrh	r2, [r7, #2]
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800669e:	bf00      	nop
 80066a0:	3708      	adds	r7, #8
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}
 80066a6:	bf00      	nop
 80066a8:	0800f8d4 	.word	0x0800f8d4

080066ac <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b084      	sub	sp, #16
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
 80066b4:	460b      	mov	r3, r1
 80066b6:	807b      	strh	r3, [r7, #2]
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80066b8:	887b      	ldrh	r3, [r7, #2]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d104      	bne.n	80066c8 <HAL_GPIO_TogglePin+0x1c>
 80066be:	f44f 71e3 	mov.w	r1, #454	@ 0x1c6
 80066c2:	480a      	ldr	r0, [pc, #40]	@ (80066ec <HAL_GPIO_TogglePin+0x40>)
 80066c4:	f7fe fa5e 	bl	8004b84 <assert_failed>

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	695b      	ldr	r3, [r3, #20]
 80066cc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80066ce:	887a      	ldrh	r2, [r7, #2]
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	4013      	ands	r3, r2
 80066d4:	041a      	lsls	r2, r3, #16
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	43d9      	mvns	r1, r3
 80066da:	887b      	ldrh	r3, [r7, #2]
 80066dc:	400b      	ands	r3, r1
 80066de:	431a      	orrs	r2, r3
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	619a      	str	r2, [r3, #24]
}
 80066e4:	bf00      	nop
 80066e6:	3710      	adds	r7, #16
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bd80      	pop	{r7, pc}
 80066ec:	0800f8d4 	.word	0x0800f8d4

080066f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b082      	sub	sp, #8
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	4603      	mov	r3, r0
 80066f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80066fa:	4b08      	ldr	r3, [pc, #32]	@ (800671c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80066fc:	695a      	ldr	r2, [r3, #20]
 80066fe:	88fb      	ldrh	r3, [r7, #6]
 8006700:	4013      	ands	r3, r2
 8006702:	2b00      	cmp	r3, #0
 8006704:	d006      	beq.n	8006714 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006706:	4a05      	ldr	r2, [pc, #20]	@ (800671c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006708:	88fb      	ldrh	r3, [r7, #6]
 800670a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800670c:	88fb      	ldrh	r3, [r7, #6]
 800670e:	4618      	mov	r0, r3
 8006710:	f7fe f9ce 	bl	8004ab0 <HAL_GPIO_EXTI_Callback>
  }
}
 8006714:	bf00      	nop
 8006716:	3708      	adds	r7, #8
 8006718:	46bd      	mov	sp, r7
 800671a:	bd80      	pop	{r7, pc}
 800671c:	40010400 	.word	0x40010400

08006720 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b084      	sub	sp, #16
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d101      	bne.n	8006732 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 800672e:	2301      	movs	r3, #1
 8006730:	e1f3      	b.n	8006b1a <HAL_LPTIM_Init+0x3fa>
  }

  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4a8e      	ldr	r2, [pc, #568]	@ (8006970 <HAL_LPTIM_Init+0x250>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d008      	beq.n	800674e <HAL_LPTIM_Init+0x2e>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a8c      	ldr	r2, [pc, #560]	@ (8006974 <HAL_LPTIM_Init+0x254>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d003      	beq.n	800674e <HAL_LPTIM_Init+0x2e>
 8006746:	21fc      	movs	r1, #252	@ 0xfc
 8006748:	488b      	ldr	r0, [pc, #556]	@ (8006978 <HAL_LPTIM_Init+0x258>)
 800674a:	f7fe fa1b 	bl	8004b84 <assert_failed>

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	685b      	ldr	r3, [r3, #4]
 8006752:	2b01      	cmp	r3, #1
 8006754:	d007      	beq.n	8006766 <HAL_LPTIM_Init+0x46>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	685b      	ldr	r3, [r3, #4]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d003      	beq.n	8006766 <HAL_LPTIM_Init+0x46>
 800675e:	21fe      	movs	r1, #254	@ 0xfe
 8006760:	4885      	ldr	r0, [pc, #532]	@ (8006978 <HAL_LPTIM_Init+0x258>)
 8006762:	f7fe fa0f 	bl	8004b84 <assert_failed>
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	689b      	ldr	r3, [r3, #8]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d026      	beq.n	80067bc <HAL_LPTIM_Init+0x9c>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	689b      	ldr	r3, [r3, #8]
 8006772:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006776:	d021      	beq.n	80067bc <HAL_LPTIM_Init+0x9c>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	689b      	ldr	r3, [r3, #8]
 800677c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006780:	d01c      	beq.n	80067bc <HAL_LPTIM_Init+0x9c>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	689b      	ldr	r3, [r3, #8]
 8006786:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800678a:	d017      	beq.n	80067bc <HAL_LPTIM_Init+0x9c>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	689b      	ldr	r3, [r3, #8]
 8006790:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006794:	d012      	beq.n	80067bc <HAL_LPTIM_Init+0x9c>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	689b      	ldr	r3, [r3, #8]
 800679a:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800679e:	d00d      	beq.n	80067bc <HAL_LPTIM_Init+0x9c>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	689b      	ldr	r3, [r3, #8]
 80067a4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80067a8:	d008      	beq.n	80067bc <HAL_LPTIM_Init+0x9c>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	689b      	ldr	r3, [r3, #8]
 80067ae:	f5b3 6f60 	cmp.w	r3, #3584	@ 0xe00
 80067b2:	d003      	beq.n	80067bc <HAL_LPTIM_Init+0x9c>
 80067b4:	21ff      	movs	r1, #255	@ 0xff
 80067b6:	4870      	ldr	r0, [pc, #448]	@ (8006978 <HAL_LPTIM_Init+0x258>)
 80067b8:	f7fe f9e4 	bl	8004b84 <assert_failed>
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	685b      	ldr	r3, [r3, #4]
 80067c0:	2b01      	cmp	r3, #1
 80067c2:	d004      	beq.n	80067ce <HAL_LPTIM_Init+0xae>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067c8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80067cc:	d125      	bne.n	800681a <HAL_LPTIM_Init+0xfa>
  {
    assert_param(IS_LPTIM_CLOCK_POLARITY(hlptim->Init.UltraLowPowerClock.Polarity));
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	68db      	ldr	r3, [r3, #12]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d00c      	beq.n	80067f0 <HAL_LPTIM_Init+0xd0>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	68db      	ldr	r3, [r3, #12]
 80067da:	2b02      	cmp	r3, #2
 80067dc:	d008      	beq.n	80067f0 <HAL_LPTIM_Init+0xd0>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	68db      	ldr	r3, [r3, #12]
 80067e2:	2b04      	cmp	r3, #4
 80067e4:	d004      	beq.n	80067f0 <HAL_LPTIM_Init+0xd0>
 80067e6:	f240 1103 	movw	r1, #259	@ 0x103
 80067ea:	4863      	ldr	r0, [pc, #396]	@ (8006978 <HAL_LPTIM_Init+0x258>)
 80067ec:	f7fe f9ca 	bl	8004b84 <assert_failed>
    assert_param(IS_LPTIM_CLOCK_SAMPLE_TIME(hlptim->Init.UltraLowPowerClock.SampleTime));
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	691b      	ldr	r3, [r3, #16]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d010      	beq.n	800681a <HAL_LPTIM_Init+0xfa>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	691b      	ldr	r3, [r3, #16]
 80067fc:	2b08      	cmp	r3, #8
 80067fe:	d00c      	beq.n	800681a <HAL_LPTIM_Init+0xfa>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	691b      	ldr	r3, [r3, #16]
 8006804:	2b10      	cmp	r3, #16
 8006806:	d008      	beq.n	800681a <HAL_LPTIM_Init+0xfa>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	691b      	ldr	r3, [r3, #16]
 800680c:	2b18      	cmp	r3, #24
 800680e:	d004      	beq.n	800681a <HAL_LPTIM_Init+0xfa>
 8006810:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8006814:	4858      	ldr	r0, [pc, #352]	@ (8006978 <HAL_LPTIM_Init+0x258>)
 8006816:	f7fe f9b5 	bl	8004b84 <assert_failed>
  }
  assert_param(IS_LPTIM_TRG_SOURCE(hlptim->Init.Trigger.Source));
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	695b      	ldr	r3, [r3, #20]
 800681e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006822:	4293      	cmp	r3, r2
 8006824:	d02b      	beq.n	800687e <HAL_LPTIM_Init+0x15e>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	695b      	ldr	r3, [r3, #20]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d027      	beq.n	800687e <HAL_LPTIM_Init+0x15e>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	695b      	ldr	r3, [r3, #20]
 8006832:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006836:	d022      	beq.n	800687e <HAL_LPTIM_Init+0x15e>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	695b      	ldr	r3, [r3, #20]
 800683c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006840:	d01d      	beq.n	800687e <HAL_LPTIM_Init+0x15e>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	695b      	ldr	r3, [r3, #20]
 8006846:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800684a:	d018      	beq.n	800687e <HAL_LPTIM_Init+0x15e>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	695b      	ldr	r3, [r3, #20]
 8006850:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006854:	d013      	beq.n	800687e <HAL_LPTIM_Init+0x15e>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	695b      	ldr	r3, [r3, #20]
 800685a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800685e:	d00e      	beq.n	800687e <HAL_LPTIM_Init+0x15e>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	695b      	ldr	r3, [r3, #20]
 8006864:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006868:	d009      	beq.n	800687e <HAL_LPTIM_Init+0x15e>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	695b      	ldr	r3, [r3, #20]
 800686e:	f5b3 4f60 	cmp.w	r3, #57344	@ 0xe000
 8006872:	d004      	beq.n	800687e <HAL_LPTIM_Init+0x15e>
 8006874:	f44f 7183 	mov.w	r1, #262	@ 0x106
 8006878:	483f      	ldr	r0, [pc, #252]	@ (8006978 <HAL_LPTIM_Init+0x258>)
 800687a:	f7fe f983 	bl	8004b84 <assert_failed>
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	695b      	ldr	r3, [r3, #20]
 8006882:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006886:	4293      	cmp	r3, r2
 8006888:	d028      	beq.n	80068dc <HAL_LPTIM_Init+0x1bc>
  {
    assert_param(IS_LPTIM_EXT_TRG_POLARITY(hlptim->Init.Trigger.ActiveEdge));
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	699b      	ldr	r3, [r3, #24]
 800688e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006892:	d00e      	beq.n	80068b2 <HAL_LPTIM_Init+0x192>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	699b      	ldr	r3, [r3, #24]
 8006898:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800689c:	d009      	beq.n	80068b2 <HAL_LPTIM_Init+0x192>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	699b      	ldr	r3, [r3, #24]
 80068a2:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80068a6:	d004      	beq.n	80068b2 <HAL_LPTIM_Init+0x192>
 80068a8:	f240 1109 	movw	r1, #265	@ 0x109
 80068ac:	4832      	ldr	r0, [pc, #200]	@ (8006978 <HAL_LPTIM_Init+0x258>)
 80068ae:	f7fe f969 	bl	8004b84 <assert_failed>
    assert_param(IS_LPTIM_TRIG_SAMPLE_TIME(hlptim->Init.Trigger.SampleTime));
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	69db      	ldr	r3, [r3, #28]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d010      	beq.n	80068dc <HAL_LPTIM_Init+0x1bc>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	69db      	ldr	r3, [r3, #28]
 80068be:	2b40      	cmp	r3, #64	@ 0x40
 80068c0:	d00c      	beq.n	80068dc <HAL_LPTIM_Init+0x1bc>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	69db      	ldr	r3, [r3, #28]
 80068c6:	2b80      	cmp	r3, #128	@ 0x80
 80068c8:	d008      	beq.n	80068dc <HAL_LPTIM_Init+0x1bc>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	69db      	ldr	r3, [r3, #28]
 80068ce:	2bc0      	cmp	r3, #192	@ 0xc0
 80068d0:	d004      	beq.n	80068dc <HAL_LPTIM_Init+0x1bc>
 80068d2:	f44f 7185 	mov.w	r1, #266	@ 0x10a
 80068d6:	4828      	ldr	r0, [pc, #160]	@ (8006978 <HAL_LPTIM_Init+0x258>)
 80068d8:	f7fe f954 	bl	8004b84 <assert_failed>
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6a1b      	ldr	r3, [r3, #32]
 80068e0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80068e4:	d008      	beq.n	80068f8 <HAL_LPTIM_Init+0x1d8>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6a1b      	ldr	r3, [r3, #32]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d004      	beq.n	80068f8 <HAL_LPTIM_Init+0x1d8>
 80068ee:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 80068f2:	4821      	ldr	r0, [pc, #132]	@ (8006978 <HAL_LPTIM_Init+0x258>)
 80068f4:	f7fe f946 	bl	8004b84 <assert_failed>
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d009      	beq.n	8006914 <HAL_LPTIM_Init+0x1f4>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006904:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006908:	d004      	beq.n	8006914 <HAL_LPTIM_Init+0x1f4>
 800690a:	f240 110d 	movw	r1, #269	@ 0x10d
 800690e:	481a      	ldr	r0, [pc, #104]	@ (8006978 <HAL_LPTIM_Init+0x258>)
 8006910:	f7fe f938 	bl	8004b84 <assert_failed>
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006918:	2b00      	cmp	r3, #0
 800691a:	d009      	beq.n	8006930 <HAL_LPTIM_Init+0x210>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006920:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006924:	d004      	beq.n	8006930 <HAL_LPTIM_Init+0x210>
 8006926:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 800692a:	4813      	ldr	r0, [pc, #76]	@ (8006978 <HAL_LPTIM_Init+0x258>)
 800692c:	f7fe f92a 	bl	8004b84 <assert_failed>
#if defined(LPTIM_RCR_REP)
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));
#endif

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8006936:	b2db      	uxtb	r3, r3
 8006938:	2b00      	cmp	r3, #0
 800693a:	d106      	bne.n	800694a <HAL_LPTIM_Init+0x22a>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2200      	movs	r2, #0
 8006940:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8006944:	6878      	ldr	r0, [r7, #4]
 8006946:	f7fd ff95 	bl	8004874 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2202      	movs	r2, #2
 800694e:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  }

#endif

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	68db      	ldr	r3, [r3, #12]
 8006958:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	685b      	ldr	r3, [r3, #4]
 800695e:	2b01      	cmp	r3, #1
 8006960:	d00c      	beq.n	800697c <HAL_LPTIM_Init+0x25c>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006966:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800696a:	d10b      	bne.n	8006984 <HAL_LPTIM_Init+0x264>
 800696c:	e006      	b.n	800697c <HAL_LPTIM_Init+0x25c>
 800696e:	bf00      	nop
 8006970:	40007c00 	.word	0x40007c00
 8006974:	40009400 	.word	0x40009400
 8006978:	0800f910 	.word	0x0800f910
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	f023 031e 	bic.w	r3, r3, #30
 8006982:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	695b      	ldr	r3, [r3, #20]
 8006988:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800698c:	4293      	cmp	r3, r2
 800698e:	d005      	beq.n	800699c <HAL_LPTIM_Init+0x27c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8006996:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800699a:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 800699c:	68fa      	ldr	r2, [r7, #12]
 800699e:	4b61      	ldr	r3, [pc, #388]	@ (8006b24 <HAL_LPTIM_Init+0x404>)
 80069a0:	4013      	ands	r3, r2
 80069a2:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80069ac:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 80069b2:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              hlptim->Init.OutputPolarity  |
 80069b8:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              hlptim->Init.UpdateMode      |
 80069be:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80069c0:	68fa      	ldr	r2, [r7, #12]
 80069c2:	4313      	orrs	r3, r2
 80069c4:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	685b      	ldr	r3, [r3, #4]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d107      	bne.n	80069de <HAL_LPTIM_Init+0x2be>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 80069d6:	4313      	orrs	r3, r2
 80069d8:	68fa      	ldr	r2, [r7, #12]
 80069da:	4313      	orrs	r3, r2
 80069dc:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	685b      	ldr	r3, [r3, #4]
 80069e2:	2b01      	cmp	r3, #1
 80069e4:	d004      	beq.n	80069f0 <HAL_LPTIM_Init+0x2d0>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069ea:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80069ee:	d107      	bne.n	8006a00 <HAL_LPTIM_Init+0x2e0>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80069f8:	4313      	orrs	r3, r2
 80069fa:	68fa      	ldr	r2, [r7, #12]
 80069fc:	4313      	orrs	r3, r2
 80069fe:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	695b      	ldr	r3, [r3, #20]
 8006a04:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d00a      	beq.n	8006a22 <HAL_LPTIM_Init+0x302>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8006a14:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8006a1a:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8006a1c:	68fa      	ldr	r2, [r7, #12]
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	68fa      	ldr	r2, [r7, #12]
 8006a28:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4a3e      	ldr	r2, [pc, #248]	@ (8006b28 <HAL_LPTIM_Init+0x408>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d141      	bne.n	8006ab8 <HAL_LPTIM_Init+0x398>
  {
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4a3b      	ldr	r2, [pc, #236]	@ (8006b28 <HAL_LPTIM_Init+0x408>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d107      	bne.n	8006a4e <HAL_LPTIM_Init+0x32e>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d01d      	beq.n	8006a82 <HAL_LPTIM_Init+0x362>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a4a:	2b01      	cmp	r3, #1
 8006a4c:	d019      	beq.n	8006a82 <HAL_LPTIM_Init+0x362>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4a36      	ldr	r2, [pc, #216]	@ (8006b2c <HAL_LPTIM_Init+0x40c>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d10f      	bne.n	8006a78 <HAL_LPTIM_Init+0x358>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d010      	beq.n	8006a82 <HAL_LPTIM_Init+0x362>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a64:	2b01      	cmp	r3, #1
 8006a66:	d00c      	beq.n	8006a82 <HAL_LPTIM_Init+0x362>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a6c:	2b02      	cmp	r3, #2
 8006a6e:	d008      	beq.n	8006a82 <HAL_LPTIM_Init+0x362>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a74:	2b03      	cmp	r3, #3
 8006a76:	d004      	beq.n	8006a82 <HAL_LPTIM_Init+0x362>
 8006a78:	f240 117f 	movw	r1, #383	@ 0x17f
 8006a7c:	482c      	ldr	r0, [pc, #176]	@ (8006b30 <HAL_LPTIM_Init+0x410>)
 8006a7e:	f7fe f881 	bl	8004b84 <assert_failed>
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4a28      	ldr	r2, [pc, #160]	@ (8006b28 <HAL_LPTIM_Init+0x408>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d107      	bne.n	8006a9c <HAL_LPTIM_Init+0x37c>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d008      	beq.n	8006aa6 <HAL_LPTIM_Init+0x386>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a98:	2b02      	cmp	r3, #2
 8006a9a:	d004      	beq.n	8006aa6 <HAL_LPTIM_Init+0x386>
 8006a9c:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 8006aa0:	4823      	ldr	r0, [pc, #140]	@ (8006b30 <HAL_LPTIM_Init+0x410>)
 8006aa2:	f7fe f86f 	bl	8004b84 <assert_failed>

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	430a      	orrs	r2, r1
 8006ab4:	621a      	str	r2, [r3, #32]
 8006ab6:	e02b      	b.n	8006b10 <HAL_LPTIM_Init+0x3f0>
  }
  else
  {
    /* Check LPTIM Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4a1a      	ldr	r2, [pc, #104]	@ (8006b28 <HAL_LPTIM_Init+0x408>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d107      	bne.n	8006ad2 <HAL_LPTIM_Init+0x3b2>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d01d      	beq.n	8006b06 <HAL_LPTIM_Init+0x3e6>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ace:	2b01      	cmp	r3, #1
 8006ad0:	d019      	beq.n	8006b06 <HAL_LPTIM_Init+0x3e6>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4a15      	ldr	r2, [pc, #84]	@ (8006b2c <HAL_LPTIM_Init+0x40c>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d10f      	bne.n	8006afc <HAL_LPTIM_Init+0x3dc>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d010      	beq.n	8006b06 <HAL_LPTIM_Init+0x3e6>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ae8:	2b01      	cmp	r3, #1
 8006aea:	d00c      	beq.n	8006b06 <HAL_LPTIM_Init+0x3e6>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006af0:	2b02      	cmp	r3, #2
 8006af2:	d008      	beq.n	8006b06 <HAL_LPTIM_Init+0x3e6>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006af8:	2b03      	cmp	r3, #3
 8006afa:	d004      	beq.n	8006b06 <HAL_LPTIM_Init+0x3e6>
 8006afc:	f44f 71c4 	mov.w	r1, #392	@ 0x188
 8006b00:	480b      	ldr	r0, [pc, #44]	@ (8006b30 <HAL_LPTIM_Init+0x410>)
 8006b02:	f7fe f83f 	bl	8004b84 <assert_failed>

    /* Configure LPTIM Input1 source */
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	687a      	ldr	r2, [r7, #4]
 8006b0c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006b0e:	621a      	str	r2, [r3, #32]
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2201      	movs	r2, #1
 8006b14:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Return function status */
  return HAL_OK;
 8006b18:	2300      	movs	r3, #0
}
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	3710      	adds	r7, #16
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}
 8006b22:	bf00      	nop
 8006b24:	ff19f1fe 	.word	0xff19f1fe
 8006b28:	40007c00 	.word	0x40007c00
 8006b2c:	40009400 	.word	0x40009400
 8006b30:	0800f910 	.word	0x0800f910

08006b34 <HAL_LPTIM_Encoder_Start>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0001 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Encoder_Start(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b084      	sub	sp, #16
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
 8006b3c:	6039      	str	r1, [r7, #0]
  uint32_t          tmpcfgr;

  /* Check the parameters */
  assert_param(IS_LPTIM_ENCODER_INTERFACE_INSTANCE(hlptim->Instance));
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4a3f      	ldr	r2, [pc, #252]	@ (8006c40 <HAL_LPTIM_Encoder_Start+0x10c>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d004      	beq.n	8006b52 <HAL_LPTIM_Encoder_Start+0x1e>
 8006b48:	f240 41ca 	movw	r1, #1226	@ 0x4ca
 8006b4c:	483d      	ldr	r0, [pc, #244]	@ (8006c44 <HAL_LPTIM_Encoder_Start+0x110>)
 8006b4e:	f7fe f819 	bl	8004b84 <assert_failed>
  assert_param(IS_LPTIM_PERIOD(Period));
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d003      	beq.n	8006b60 <HAL_LPTIM_Encoder_Start+0x2c>
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b5e:	d304      	bcc.n	8006b6a <HAL_LPTIM_Encoder_Start+0x36>
 8006b60:	f240 41cb 	movw	r1, #1227	@ 0x4cb
 8006b64:	4837      	ldr	r0, [pc, #220]	@ (8006c44 <HAL_LPTIM_Encoder_Start+0x110>)
 8006b66:	f7fe f80d 	bl	8004b84 <assert_failed>
  assert_param(hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	685b      	ldr	r3, [r3, #4]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d004      	beq.n	8006b7c <HAL_LPTIM_Encoder_Start+0x48>
 8006b72:	f240 41cc 	movw	r1, #1228	@ 0x4cc
 8006b76:	4833      	ldr	r0, [pc, #204]	@ (8006c44 <HAL_LPTIM_Encoder_Start+0x110>)
 8006b78:	f7fe f804 	bl	8004b84 <assert_failed>
  assert_param(hlptim->Init.Clock.Prescaler == LPTIM_PRESCALER_DIV1);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	689b      	ldr	r3, [r3, #8]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d004      	beq.n	8006b8e <HAL_LPTIM_Encoder_Start+0x5a>
 8006b84:	f240 41cd 	movw	r1, #1229	@ 0x4cd
 8006b88:	482e      	ldr	r0, [pc, #184]	@ (8006c44 <HAL_LPTIM_Encoder_Start+0x110>)
 8006b8a:	f7fd fffb 	bl	8004b84 <assert_failed>
  assert_param(IS_LPTIM_CLOCK_POLARITY(hlptim->Init.UltraLowPowerClock.Polarity));
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	68db      	ldr	r3, [r3, #12]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d00c      	beq.n	8006bb0 <HAL_LPTIM_Encoder_Start+0x7c>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	68db      	ldr	r3, [r3, #12]
 8006b9a:	2b02      	cmp	r3, #2
 8006b9c:	d008      	beq.n	8006bb0 <HAL_LPTIM_Encoder_Start+0x7c>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	68db      	ldr	r3, [r3, #12]
 8006ba2:	2b04      	cmp	r3, #4
 8006ba4:	d004      	beq.n	8006bb0 <HAL_LPTIM_Encoder_Start+0x7c>
 8006ba6:	f240 41ce 	movw	r1, #1230	@ 0x4ce
 8006baa:	4826      	ldr	r0, [pc, #152]	@ (8006c44 <HAL_LPTIM_Encoder_Start+0x110>)
 8006bac:	f7fd ffea 	bl	8004b84 <assert_failed>

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2202      	movs	r2, #2
 8006bb4:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	68db      	ldr	r3, [r3, #12]
 8006bbe:	60fb      	str	r3, [r7, #12]

  /* Clear CKPOL bits */
  tmpcfgr &= (uint32_t)(~LPTIM_CFGR_CKPOL);
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	f023 0306 	bic.w	r3, r3, #6
 8006bc6:	60fb      	str	r3, [r7, #12]

  /* Set Input polarity */
  tmpcfgr |=  hlptim->Init.UltraLowPowerClock.Polarity;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	68db      	ldr	r3, [r3, #12]
 8006bcc:	68fa      	ldr	r2, [r7, #12]
 8006bce:	4313      	orrs	r3, r2
 8006bd0:	60fb      	str	r3, [r7, #12]

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	68fa      	ldr	r2, [r7, #12]
 8006bd8:	60da      	str	r2, [r3, #12]

  /* Set ENC bit to enable the encoder interface */
  hlptim->Instance->CFGR |= LPTIM_CFGR_ENC;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	68da      	ldr	r2, [r3, #12]
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8006be8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	691a      	ldr	r2, [r3, #16]
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f042 0201 	orr.w	r2, r2, #1
 8006bf8:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	2210      	movs	r2, #16
 8006c00:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	683a      	ldr	r2, [r7, #0]
 8006c08:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8006c0a:	2110      	movs	r1, #16
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	f000 f93d 	bl	8006e8c <LPTIM_WaitForFlag>
 8006c12:	4603      	mov	r3, r0
 8006c14:	2b03      	cmp	r3, #3
 8006c16:	d101      	bne.n	8006c1c <HAL_LPTIM_Encoder_Start+0xe8>
  {
    return HAL_TIMEOUT;
 8006c18:	2303      	movs	r3, #3
 8006c1a:	e00c      	b.n	8006c36 <HAL_LPTIM_Encoder_Start+0x102>
  }

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	691a      	ldr	r2, [r3, #16]
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f042 0204 	orr.w	r2, r2, #4
 8006c2a:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2201      	movs	r2, #1
 8006c30:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Return function status */
  return HAL_OK;
 8006c34:	2300      	movs	r3, #0
}
 8006c36:	4618      	mov	r0, r3
 8006c38:	3710      	adds	r7, #16
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}
 8006c3e:	bf00      	nop
 8006c40:	40007c00 	.word	0x40007c00
 8006c44:	0800f910 	.word	0x0800f910

08006c48 <HAL_LPTIM_Encoder_Stop>:
  * @brief  Stop the Encoder interface.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Encoder_Stop(LPTIM_HandleTypeDef *hlptim)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b082      	sub	sp, #8
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LPTIM_ENCODER_INTERFACE_INSTANCE(hlptim->Instance));
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4a13      	ldr	r2, [pc, #76]	@ (8006ca4 <HAL_LPTIM_Encoder_Stop+0x5c>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d004      	beq.n	8006c64 <HAL_LPTIM_Encoder_Stop+0x1c>
 8006c5a:	f240 5103 	movw	r1, #1283	@ 0x503
 8006c5e:	4812      	ldr	r0, [pc, #72]	@ (8006ca8 <HAL_LPTIM_Encoder_Stop+0x60>)
 8006c60:	f7fd ff90 	bl	8004b84 <assert_failed>

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2202      	movs	r2, #2
 8006c68:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f000 f93d 	bl	8006eec <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f000 f8fb 	bl	8006e6e <HAL_LPTIM_GetState>
 8006c78:	4603      	mov	r3, r0
 8006c7a:	2b03      	cmp	r3, #3
 8006c7c:	d101      	bne.n	8006c82 <HAL_LPTIM_Encoder_Stop+0x3a>
  {
    return HAL_TIMEOUT;
 8006c7e:	2303      	movs	r3, #3
 8006c80:	e00c      	b.n	8006c9c <HAL_LPTIM_Encoder_Stop+0x54>
  }

  /* Reset ENC bit to disable the encoder interface */
  hlptim->Instance->CFGR &= ~LPTIM_CFGR_ENC;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	68da      	ldr	r2, [r3, #12]
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 8006c90:	60da      	str	r2, [r3, #12]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2201      	movs	r2, #1
 8006c96:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Return function status */
  return HAL_OK;
 8006c9a:	2300      	movs	r3, #0
}
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	3708      	adds	r7, #8
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	bd80      	pop	{r7, pc}
 8006ca4:	40007c00 	.word	0x40007c00
 8006ca8:	0800f910 	.word	0x0800f910

08006cac <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b082      	sub	sp, #8
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f003 0301 	and.w	r3, r3, #1
 8006cbe:	2b01      	cmp	r3, #1
 8006cc0:	d10d      	bne.n	8006cde <HAL_LPTIM_IRQHandler+0x32>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	689b      	ldr	r3, [r3, #8]
 8006cc8:	f003 0301 	and.w	r3, r3, #1
 8006ccc:	2b01      	cmp	r3, #1
 8006cce:	d106      	bne.n	8006cde <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	2201      	movs	r2, #1
 8006cd6:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f000 f882 	bl	8006de2 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f003 0302 	and.w	r3, r3, #2
 8006ce8:	2b02      	cmp	r3, #2
 8006cea:	d10d      	bne.n	8006d08 <HAL_LPTIM_IRQHandler+0x5c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	689b      	ldr	r3, [r3, #8]
 8006cf2:	f003 0302 	and.w	r3, r3, #2
 8006cf6:	2b02      	cmp	r3, #2
 8006cf8:	d106      	bne.n	8006d08 <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	2202      	movs	r2, #2
 8006d00:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f000 f877 	bl	8006df6 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f003 0304 	and.w	r3, r3, #4
 8006d12:	2b04      	cmp	r3, #4
 8006d14:	d10d      	bne.n	8006d32 <HAL_LPTIM_IRQHandler+0x86>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	689b      	ldr	r3, [r3, #8]
 8006d1c:	f003 0304 	and.w	r3, r3, #4
 8006d20:	2b04      	cmp	r3, #4
 8006d22:	d106      	bne.n	8006d32 <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	2204      	movs	r2, #4
 8006d2a:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	f000 f86c 	bl	8006e0a <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f003 0308 	and.w	r3, r3, #8
 8006d3c:	2b08      	cmp	r3, #8
 8006d3e:	d10d      	bne.n	8006d5c <HAL_LPTIM_IRQHandler+0xb0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	689b      	ldr	r3, [r3, #8]
 8006d46:	f003 0308 	and.w	r3, r3, #8
 8006d4a:	2b08      	cmp	r3, #8
 8006d4c:	d106      	bne.n	8006d5c <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	2208      	movs	r2, #8
 8006d54:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f000 f861 	bl	8006e1e <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f003 0310 	and.w	r3, r3, #16
 8006d66:	2b10      	cmp	r3, #16
 8006d68:	d10d      	bne.n	8006d86 <HAL_LPTIM_IRQHandler+0xda>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	689b      	ldr	r3, [r3, #8]
 8006d70:	f003 0310 	and.w	r3, r3, #16
 8006d74:	2b10      	cmp	r3, #16
 8006d76:	d106      	bne.n	8006d86 <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	2210      	movs	r2, #16
 8006d7e:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	f000 f856 	bl	8006e32 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f003 0320 	and.w	r3, r3, #32
 8006d90:	2b20      	cmp	r3, #32
 8006d92:	d10d      	bne.n	8006db0 <HAL_LPTIM_IRQHandler+0x104>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	689b      	ldr	r3, [r3, #8]
 8006d9a:	f003 0320 	and.w	r3, r3, #32
 8006d9e:	2b20      	cmp	r3, #32
 8006da0:	d106      	bne.n	8006db0 <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	2220      	movs	r2, #32
 8006da8:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f000 f84b 	bl	8006e46 <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006dba:	2b40      	cmp	r3, #64	@ 0x40
 8006dbc:	d10d      	bne.n	8006dda <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	689b      	ldr	r3, [r3, #8]
 8006dc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006dc8:	2b40      	cmp	r3, #64	@ 0x40
 8006dca:	d106      	bne.n	8006dda <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	2240      	movs	r2, #64	@ 0x40
 8006dd2:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	f000 f840 	bl	8006e5a <HAL_LPTIM_DirectionDownCallback>
      HAL_LPTIM_RepCounterWriteCallback(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
#endif
}
 8006dda:	bf00      	nop
 8006ddc:	3708      	adds	r7, #8
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}

08006de2 <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8006de2:	b480      	push	{r7}
 8006de4:	b083      	sub	sp, #12
 8006de6:	af00      	add	r7, sp, #0
 8006de8:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 8006dea:	bf00      	nop
 8006dec:	370c      	adds	r7, #12
 8006dee:	46bd      	mov	sp, r7
 8006df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df4:	4770      	bx	lr

08006df6 <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8006df6:	b480      	push	{r7}
 8006df8:	b083      	sub	sp, #12
 8006dfa:	af00      	add	r7, sp, #0
 8006dfc:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 8006dfe:	bf00      	nop
 8006e00:	370c      	adds	r7, #12
 8006e02:	46bd      	mov	sp, r7
 8006e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e08:	4770      	bx	lr

08006e0a <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 8006e0a:	b480      	push	{r7}
 8006e0c:	b083      	sub	sp, #12
 8006e0e:	af00      	add	r7, sp, #0
 8006e10:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 8006e12:	bf00      	nop
 8006e14:	370c      	adds	r7, #12
 8006e16:	46bd      	mov	sp, r7
 8006e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1c:	4770      	bx	lr

08006e1e <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8006e1e:	b480      	push	{r7}
 8006e20:	b083      	sub	sp, #12
 8006e22:	af00      	add	r7, sp, #0
 8006e24:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8006e26:	bf00      	nop
 8006e28:	370c      	adds	r7, #12
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e30:	4770      	bx	lr

08006e32 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8006e32:	b480      	push	{r7}
 8006e34:	b083      	sub	sp, #12
 8006e36:	af00      	add	r7, sp, #0
 8006e38:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8006e3a:	bf00      	nop
 8006e3c:	370c      	adds	r7, #12
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e44:	4770      	bx	lr

08006e46 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8006e46:	b480      	push	{r7}
 8006e48:	b083      	sub	sp, #12
 8006e4a:	af00      	add	r7, sp, #0
 8006e4c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8006e4e:	bf00      	nop
 8006e50:	370c      	adds	r7, #12
 8006e52:	46bd      	mov	sp, r7
 8006e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e58:	4770      	bx	lr

08006e5a <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8006e5a:	b480      	push	{r7}
 8006e5c:	b083      	sub	sp, #12
 8006e5e:	af00      	add	r7, sp, #0
 8006e60:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8006e62:	bf00      	nop
 8006e64:	370c      	adds	r7, #12
 8006e66:	46bd      	mov	sp, r7
 8006e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6c:	4770      	bx	lr

08006e6e <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(const LPTIM_HandleTypeDef *hlptim)
{
 8006e6e:	b480      	push	{r7}
 8006e70:	b083      	sub	sp, #12
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8006e7c:	b2db      	uxtb	r3, r3
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	370c      	adds	r7, #12
 8006e82:	46bd      	mov	sp, r7
 8006e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e88:	4770      	bx	lr
	...

08006e8c <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(const LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8006e8c:	b480      	push	{r7}
 8006e8e:	b085      	sub	sp, #20
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
 8006e94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 8006e96:	2300      	movs	r3, #0
 8006e98:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8006e9a:	4b12      	ldr	r3, [pc, #72]	@ (8006ee4 <LPTIM_WaitForFlag+0x58>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4a12      	ldr	r2, [pc, #72]	@ (8006ee8 <LPTIM_WaitForFlag+0x5c>)
 8006ea0:	fba2 2303 	umull	r2, r3, r2, r3
 8006ea4:	0b9b      	lsrs	r3, r3, #14
 8006ea6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006eaa:	fb02 f303 	mul.w	r3, r2, r3
 8006eae:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	3b01      	subs	r3, #1
 8006eb4:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d101      	bne.n	8006ec0 <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 8006ebc:	2303      	movs	r3, #3
 8006ebe:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	681a      	ldr	r2, [r3, #0]
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	4013      	ands	r3, r2
 8006eca:	683a      	ldr	r2, [r7, #0]
 8006ecc:	429a      	cmp	r2, r3
 8006ece:	d002      	beq.n	8006ed6 <LPTIM_WaitForFlag+0x4a>
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d1ec      	bne.n	8006eb0 <LPTIM_WaitForFlag+0x24>

  return result;
 8006ed6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	3714      	adds	r7, #20
 8006edc:	46bd      	mov	sp, r7
 8006ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee2:	4770      	bx	lr
 8006ee4:	20000014 	.word	0x20000014
 8006ee8:	d1b71759 	.word	0xd1b71759

08006eec <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b08c      	sub	sp, #48	@ 0x30
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ef8:	f3ef 8310 	mrs	r3, PRIMASK
 8006efc:	60fb      	str	r3, [r7, #12]
  return(result);
 8006efe:	68fb      	ldr	r3, [r7, #12]
#if defined(LPTIM_RCR_REP)
  uint32_t tmpRCR;
#endif

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8006f00:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006f02:	2301      	movs	r3, #1
 8006f04:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f06:	693b      	ldr	r3, [r7, #16]
 8006f08:	f383 8810 	msr	PRIMASK, r3
}
 8006f0c:	bf00      	nop
  __set_PRIMASK(1) ;

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	4a73      	ldr	r2, [pc, #460]	@ (80070e0 <LPTIM_Disable+0x1f4>)
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d003      	beq.n	8006f20 <LPTIM_Disable+0x34>
 8006f18:	4a72      	ldr	r2, [pc, #456]	@ (80070e4 <LPTIM_Disable+0x1f8>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d007      	beq.n	8006f2e <LPTIM_Disable+0x42>
    case LPTIM2_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
      break;
#endif /* LPTIM2 */
    default:
      break;
 8006f1e:	e00d      	b.n	8006f3c <LPTIM_Disable+0x50>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 8006f20:	4b71      	ldr	r3, [pc, #452]	@ (80070e8 <LPTIM_Disable+0x1fc>)
 8006f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f26:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8006f2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 8006f2c:	e006      	b.n	8006f3c <LPTIM_Disable+0x50>
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 8006f2e:	4b6e      	ldr	r3, [pc, #440]	@ (80070e8 <LPTIM_Disable+0x1fc>)
 8006f30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f34:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8006f38:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 8006f3a:	bf00      	nop
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	689b      	ldr	r3, [r3, #8]
 8006f42:	627b      	str	r3, [r7, #36]	@ 0x24
  tmpCFGR = hlptim->Instance->CFGR;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	68db      	ldr	r3, [r3, #12]
 8006f4a:	623b      	str	r3, [r7, #32]
  tmpCMP = hlptim->Instance->CMP;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	695b      	ldr	r3, [r3, #20]
 8006f52:	61fb      	str	r3, [r7, #28]
  tmpARR = hlptim->Instance->ARR;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	699b      	ldr	r3, [r3, #24]
 8006f5a:	61bb      	str	r3, [r7, #24]
  tmpOR = hlptim->Instance->OR;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	6a1b      	ldr	r3, [r3, #32]
 8006f62:	617b      	str	r3, [r7, #20]
#if defined(LPTIM_RCR_REP)
  tmpRCR = hlptim->Instance->RCR;
#endif

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4a5d      	ldr	r2, [pc, #372]	@ (80070e0 <LPTIM_Disable+0x1f4>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d003      	beq.n	8006f76 <LPTIM_Disable+0x8a>
 8006f6e:	4a5d      	ldr	r2, [pc, #372]	@ (80070e4 <LPTIM_Disable+0x1f8>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d00d      	beq.n	8006f90 <LPTIM_Disable+0xa4>
      __HAL_RCC_LPTIM2_FORCE_RESET();
      __HAL_RCC_LPTIM2_RELEASE_RESET();
      break;
#endif /* LPTIM2 */
    default:
      break;
 8006f74:	e019      	b.n	8006faa <LPTIM_Disable+0xbe>
      __HAL_RCC_LPTIM1_FORCE_RESET();
 8006f76:	4b5c      	ldr	r3, [pc, #368]	@ (80070e8 <LPTIM_Disable+0x1fc>)
 8006f78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f7a:	4a5b      	ldr	r2, [pc, #364]	@ (80070e8 <LPTIM_Disable+0x1fc>)
 8006f7c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006f80:	6393      	str	r3, [r2, #56]	@ 0x38
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 8006f82:	4b59      	ldr	r3, [pc, #356]	@ (80070e8 <LPTIM_Disable+0x1fc>)
 8006f84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f86:	4a58      	ldr	r2, [pc, #352]	@ (80070e8 <LPTIM_Disable+0x1fc>)
 8006f88:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006f8c:	6393      	str	r3, [r2, #56]	@ 0x38
      break;
 8006f8e:	e00c      	b.n	8006faa <LPTIM_Disable+0xbe>
      __HAL_RCC_LPTIM2_FORCE_RESET();
 8006f90:	4b55      	ldr	r3, [pc, #340]	@ (80070e8 <LPTIM_Disable+0x1fc>)
 8006f92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f94:	4a54      	ldr	r2, [pc, #336]	@ (80070e8 <LPTIM_Disable+0x1fc>)
 8006f96:	f043 0320 	orr.w	r3, r3, #32
 8006f9a:	63d3      	str	r3, [r2, #60]	@ 0x3c
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 8006f9c:	4b52      	ldr	r3, [pc, #328]	@ (80070e8 <LPTIM_Disable+0x1fc>)
 8006f9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fa0:	4a51      	ldr	r2, [pc, #324]	@ (80070e8 <LPTIM_Disable+0x1fc>)
 8006fa2:	f023 0320 	bic.w	r3, r3, #32
 8006fa6:	63d3      	str	r3, [r2, #60]	@ 0x3c
      break;
 8006fa8:	bf00      	nop

  /*********** Restore LPTIM Config ***********/
#if defined(LPTIM_RCR_REP)
  if ((tmpCMP != 0UL) || (tmpARR != 0UL) || (tmpRCR != 0UL))
#else
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 8006faa:	69fb      	ldr	r3, [r7, #28]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d102      	bne.n	8006fb6 <LPTIM_Disable+0xca>
 8006fb0:	69bb      	ldr	r3, [r7, #24]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d075      	beq.n	80070a2 <LPTIM_Disable+0x1b6>
#endif
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4a49      	ldr	r2, [pc, #292]	@ (80070e0 <LPTIM_Disable+0x1f4>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d003      	beq.n	8006fc8 <LPTIM_Disable+0xdc>
 8006fc0:	4a48      	ldr	r2, [pc, #288]	@ (80070e4 <LPTIM_Disable+0x1f8>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d009      	beq.n	8006fda <LPTIM_Disable+0xee>
      case LPTIM2_BASE:
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
        break;
#endif /* LPTIM2 */
      default:
        break;
 8006fc6:	e011      	b.n	8006fec <LPTIM_Disable+0x100>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_PCLK1);
 8006fc8:	4b47      	ldr	r3, [pc, #284]	@ (80070e8 <LPTIM_Disable+0x1fc>)
 8006fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fce:	4a46      	ldr	r2, [pc, #280]	@ (80070e8 <LPTIM_Disable+0x1fc>)
 8006fd0:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 8006fd4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
        break;
 8006fd8:	e008      	b.n	8006fec <LPTIM_Disable+0x100>
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
 8006fda:	4b43      	ldr	r3, [pc, #268]	@ (80070e8 <LPTIM_Disable+0x1fc>)
 8006fdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fe0:	4a41      	ldr	r2, [pc, #260]	@ (80070e8 <LPTIM_Disable+0x1fc>)
 8006fe2:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006fe6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
        break;
 8006fea:	bf00      	nop
    }

    if (tmpCMP != 0UL)
 8006fec:	69fb      	ldr	r3, [r7, #28]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d01a      	beq.n	8007028 <LPTIM_Disable+0x13c>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	691a      	ldr	r2, [r3, #16]
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f042 0201 	orr.w	r2, r2, #1
 8007000:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	69fa      	ldr	r2, [r7, #28]
 8007008:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 800700a:	2108      	movs	r1, #8
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	f7ff ff3d 	bl	8006e8c <LPTIM_WaitForFlag>
 8007012:	4603      	mov	r3, r0
 8007014:	2b03      	cmp	r3, #3
 8007016:	d103      	bne.n	8007020 <LPTIM_Disable+0x134>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2203      	movs	r2, #3
 800701c:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	2208      	movs	r2, #8
 8007026:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 8007028:	69bb      	ldr	r3, [r7, #24]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d01a      	beq.n	8007064 <LPTIM_Disable+0x178>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	691a      	ldr	r2, [r3, #16]
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f042 0201 	orr.w	r2, r2, #1
 800703c:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	69ba      	ldr	r2, [r7, #24]
 8007044:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8007046:	2110      	movs	r1, #16
 8007048:	6878      	ldr	r0, [r7, #4]
 800704a:	f7ff ff1f 	bl	8006e8c <LPTIM_WaitForFlag>
 800704e:	4603      	mov	r3, r0
 8007050:	2b03      	cmp	r3, #3
 8007052:	d103      	bne.n	800705c <LPTIM_Disable+0x170>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2203      	movs	r2, #3
 8007058:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	2210      	movs	r2, #16
 8007062:	605a      	str	r2, [r3, #4]
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
    }
#endif

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4a1d      	ldr	r2, [pc, #116]	@ (80070e0 <LPTIM_Disable+0x1f4>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d003      	beq.n	8007076 <LPTIM_Disable+0x18a>
 800706e:	4a1d      	ldr	r2, [pc, #116]	@ (80070e4 <LPTIM_Disable+0x1f8>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d00b      	beq.n	800708c <LPTIM_Disable+0x1a0>
      case LPTIM2_BASE:
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
        break;
#endif /* LPTIM2 */
      default:
        break;
 8007074:	e015      	b.n	80070a2 <LPTIM_Disable+0x1b6>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 8007076:	4b1c      	ldr	r3, [pc, #112]	@ (80070e8 <LPTIM_Disable+0x1fc>)
 8007078:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800707c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007080:	4919      	ldr	r1, [pc, #100]	@ (80070e8 <LPTIM_Disable+0x1fc>)
 8007082:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007084:	4313      	orrs	r3, r2
 8007086:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
        break;
 800708a:	e00a      	b.n	80070a2 <LPTIM_Disable+0x1b6>
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 800708c:	4b16      	ldr	r3, [pc, #88]	@ (80070e8 <LPTIM_Disable+0x1fc>)
 800708e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007092:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007096:	4914      	ldr	r1, [pc, #80]	@ (80070e8 <LPTIM_Disable+0x1fc>)
 8007098:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800709a:	4313      	orrs	r3, r2
 800709c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
        break;
 80070a0:	bf00      	nop
    }
  }

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	691a      	ldr	r2, [r3, #16]
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f022 0201 	bic.w	r2, r2, #1
 80070b0:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80070b8:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	6a3a      	ldr	r2, [r7, #32]
 80070c0:	60da      	str	r2, [r3, #12]
  hlptim->Instance->OR = tmpOR;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	697a      	ldr	r2, [r7, #20]
 80070c8:	621a      	str	r2, [r3, #32]
 80070ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070cc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	f383 8810 	msr	PRIMASK, r3
}
 80070d4:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 80070d6:	bf00      	nop
 80070d8:	3730      	adds	r7, #48	@ 0x30
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd80      	pop	{r7, pc}
 80070de:	bf00      	nop
 80070e0:	40007c00 	.word	0x40007c00
 80070e4:	40009400 	.word	0x40009400
 80070e8:	40021000 	.word	0x40021000

080070ec <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80070ec:	b480      	push	{r7}
 80070ee:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80070f0:	4b04      	ldr	r3, [pc, #16]	@ (8007104 <HAL_PWREx_GetVoltageRange+0x18>)
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	46bd      	mov	sp, r7
 80070fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007100:	4770      	bx	lr
 8007102:	bf00      	nop
 8007104:	40007000 	.word	0x40007000

08007108 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b084      	sub	sp, #16
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007116:	d007      	beq.n	8007128 <HAL_PWREx_ControlVoltageScaling+0x20>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800711e:	d003      	beq.n	8007128 <HAL_PWREx_ControlVoltageScaling+0x20>
 8007120:	21a7      	movs	r1, #167	@ 0xa7
 8007122:	4826      	ldr	r0, [pc, #152]	@ (80071bc <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8007124:	f7fd fd2e 	bl	8004b84 <assert_failed>
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800712e:	d130      	bne.n	8007192 <HAL_PWREx_ControlVoltageScaling+0x8a>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8007130:	4b23      	ldr	r3, [pc, #140]	@ (80071c0 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007138:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800713c:	d038      	beq.n	80071b0 <HAL_PWREx_ControlVoltageScaling+0xa8>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800713e:	4b20      	ldr	r3, [pc, #128]	@ (80071c0 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007146:	4a1e      	ldr	r2, [pc, #120]	@ (80071c0 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8007148:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800714c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800714e:	4b1d      	ldr	r3, [pc, #116]	@ (80071c4 <HAL_PWREx_ControlVoltageScaling+0xbc>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	2232      	movs	r2, #50	@ 0x32
 8007154:	fb02 f303 	mul.w	r3, r2, r3
 8007158:	4a1b      	ldr	r2, [pc, #108]	@ (80071c8 <HAL_PWREx_ControlVoltageScaling+0xc0>)
 800715a:	fba2 2303 	umull	r2, r3, r2, r3
 800715e:	0c9b      	lsrs	r3, r3, #18
 8007160:	3301      	adds	r3, #1
 8007162:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007164:	e002      	b.n	800716c <HAL_PWREx_ControlVoltageScaling+0x64>
      {
        wait_loop_index--;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	3b01      	subs	r3, #1
 800716a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800716c:	4b14      	ldr	r3, [pc, #80]	@ (80071c0 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 800716e:	695b      	ldr	r3, [r3, #20]
 8007170:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007174:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007178:	d102      	bne.n	8007180 <HAL_PWREx_ControlVoltageScaling+0x78>
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d1f2      	bne.n	8007166 <HAL_PWREx_ControlVoltageScaling+0x5e>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007180:	4b0f      	ldr	r3, [pc, #60]	@ (80071c0 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8007182:	695b      	ldr	r3, [r3, #20]
 8007184:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007188:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800718c:	d110      	bne.n	80071b0 <HAL_PWREx_ControlVoltageScaling+0xa8>
      {
        return HAL_TIMEOUT;
 800718e:	2303      	movs	r3, #3
 8007190:	e00f      	b.n	80071b2 <HAL_PWREx_ControlVoltageScaling+0xaa>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8007192:	4b0b      	ldr	r3, [pc, #44]	@ (80071c0 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800719a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800719e:	d007      	beq.n	80071b0 <HAL_PWREx_ControlVoltageScaling+0xa8>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80071a0:	4b07      	ldr	r3, [pc, #28]	@ (80071c0 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80071a8:	4a05      	ldr	r2, [pc, #20]	@ (80071c0 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 80071aa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80071ae:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80071b0:	2300      	movs	r3, #0
}
 80071b2:	4618      	mov	r0, r3
 80071b4:	3710      	adds	r7, #16
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bd80      	pop	{r7, pc}
 80071ba:	bf00      	nop
 80071bc:	0800f94c 	.word	0x0800f94c
 80071c0:	40007000 	.word	0x40007000
 80071c4:	20000014 	.word	0x20000014
 80071c8:	431bde83 	.word	0x431bde83

080071cc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b088      	sub	sp, #32
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d102      	bne.n	80071e0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80071da:	2301      	movs	r3, #1
 80071dc:	f000 bcef 	b.w	8007bbe <HAL_RCC_OscConfig+0x9f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d008      	beq.n	80071fa <HAL_RCC_OscConfig+0x2e>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	2b1f      	cmp	r3, #31
 80071ee:	d904      	bls.n	80071fa <HAL_RCC_OscConfig+0x2e>
 80071f0:	f44f 71d1 	mov.w	r1, #418	@ 0x1a2
 80071f4:	489a      	ldr	r0, [pc, #616]	@ (8007460 <HAL_RCC_OscConfig+0x294>)
 80071f6:	f7fd fcc5 	bl	8004b84 <assert_failed>

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80071fa:	4b9a      	ldr	r3, [pc, #616]	@ (8007464 <HAL_RCC_OscConfig+0x298>)
 80071fc:	689b      	ldr	r3, [r3, #8]
 80071fe:	f003 030c 	and.w	r3, r3, #12
 8007202:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007204:	4b97      	ldr	r3, [pc, #604]	@ (8007464 <HAL_RCC_OscConfig+0x298>)
 8007206:	68db      	ldr	r3, [r3, #12]
 8007208:	f003 0303 	and.w	r3, r3, #3
 800720c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f003 0310 	and.w	r3, r3, #16
 8007216:	2b00      	cmp	r3, #0
 8007218:	f000 813d 	beq.w	8007496 <HAL_RCC_OscConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	699b      	ldr	r3, [r3, #24]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d008      	beq.n	8007236 <HAL_RCC_OscConfig+0x6a>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	699b      	ldr	r3, [r3, #24]
 8007228:	2b01      	cmp	r3, #1
 800722a:	d004      	beq.n	8007236 <HAL_RCC_OscConfig+0x6a>
 800722c:	f240 11ab 	movw	r1, #427	@ 0x1ab
 8007230:	488b      	ldr	r0, [pc, #556]	@ (8007460 <HAL_RCC_OscConfig+0x294>)
 8007232:	f7fd fca7 	bl	8004b84 <assert_failed>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	69db      	ldr	r3, [r3, #28]
 800723a:	2bff      	cmp	r3, #255	@ 0xff
 800723c:	d904      	bls.n	8007248 <HAL_RCC_OscConfig+0x7c>
 800723e:	f44f 71d6 	mov.w	r1, #428	@ 0x1ac
 8007242:	4887      	ldr	r0, [pc, #540]	@ (8007460 <HAL_RCC_OscConfig+0x294>)
 8007244:	f7fd fc9e 	bl	8004b84 <assert_failed>
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6a1b      	ldr	r3, [r3, #32]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d030      	beq.n	80072b2 <HAL_RCC_OscConfig+0xe6>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6a1b      	ldr	r3, [r3, #32]
 8007254:	2b10      	cmp	r3, #16
 8007256:	d02c      	beq.n	80072b2 <HAL_RCC_OscConfig+0xe6>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6a1b      	ldr	r3, [r3, #32]
 800725c:	2b20      	cmp	r3, #32
 800725e:	d028      	beq.n	80072b2 <HAL_RCC_OscConfig+0xe6>
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6a1b      	ldr	r3, [r3, #32]
 8007264:	2b30      	cmp	r3, #48	@ 0x30
 8007266:	d024      	beq.n	80072b2 <HAL_RCC_OscConfig+0xe6>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6a1b      	ldr	r3, [r3, #32]
 800726c:	2b40      	cmp	r3, #64	@ 0x40
 800726e:	d020      	beq.n	80072b2 <HAL_RCC_OscConfig+0xe6>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6a1b      	ldr	r3, [r3, #32]
 8007274:	2b50      	cmp	r3, #80	@ 0x50
 8007276:	d01c      	beq.n	80072b2 <HAL_RCC_OscConfig+0xe6>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6a1b      	ldr	r3, [r3, #32]
 800727c:	2b60      	cmp	r3, #96	@ 0x60
 800727e:	d018      	beq.n	80072b2 <HAL_RCC_OscConfig+0xe6>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6a1b      	ldr	r3, [r3, #32]
 8007284:	2b70      	cmp	r3, #112	@ 0x70
 8007286:	d014      	beq.n	80072b2 <HAL_RCC_OscConfig+0xe6>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6a1b      	ldr	r3, [r3, #32]
 800728c:	2b80      	cmp	r3, #128	@ 0x80
 800728e:	d010      	beq.n	80072b2 <HAL_RCC_OscConfig+0xe6>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6a1b      	ldr	r3, [r3, #32]
 8007294:	2b90      	cmp	r3, #144	@ 0x90
 8007296:	d00c      	beq.n	80072b2 <HAL_RCC_OscConfig+0xe6>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6a1b      	ldr	r3, [r3, #32]
 800729c:	2ba0      	cmp	r3, #160	@ 0xa0
 800729e:	d008      	beq.n	80072b2 <HAL_RCC_OscConfig+0xe6>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6a1b      	ldr	r3, [r3, #32]
 80072a4:	2bb0      	cmp	r3, #176	@ 0xb0
 80072a6:	d004      	beq.n	80072b2 <HAL_RCC_OscConfig+0xe6>
 80072a8:	f240 11ad 	movw	r1, #429	@ 0x1ad
 80072ac:	486c      	ldr	r0, [pc, #432]	@ (8007460 <HAL_RCC_OscConfig+0x294>)
 80072ae:	f7fd fc69 	bl	8004b84 <assert_failed>

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80072b2:	69bb      	ldr	r3, [r7, #24]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d007      	beq.n	80072c8 <HAL_RCC_OscConfig+0xfc>
 80072b8:	69bb      	ldr	r3, [r7, #24]
 80072ba:	2b0c      	cmp	r3, #12
 80072bc:	f040 808e 	bne.w	80073dc <HAL_RCC_OscConfig+0x210>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80072c0:	697b      	ldr	r3, [r7, #20]
 80072c2:	2b01      	cmp	r3, #1
 80072c4:	f040 808a 	bne.w	80073dc <HAL_RCC_OscConfig+0x210>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80072c8:	4b66      	ldr	r3, [pc, #408]	@ (8007464 <HAL_RCC_OscConfig+0x298>)
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f003 0302 	and.w	r3, r3, #2
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d006      	beq.n	80072e2 <HAL_RCC_OscConfig+0x116>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	699b      	ldr	r3, [r3, #24]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d102      	bne.n	80072e2 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80072dc:	2301      	movs	r3, #1
 80072de:	f000 bc6e 	b.w	8007bbe <HAL_RCC_OscConfig+0x9f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6a1a      	ldr	r2, [r3, #32]
 80072e6:	4b5f      	ldr	r3, [pc, #380]	@ (8007464 <HAL_RCC_OscConfig+0x298>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f003 0308 	and.w	r3, r3, #8
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d004      	beq.n	80072fc <HAL_RCC_OscConfig+0x130>
 80072f2:	4b5c      	ldr	r3, [pc, #368]	@ (8007464 <HAL_RCC_OscConfig+0x298>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80072fa:	e005      	b.n	8007308 <HAL_RCC_OscConfig+0x13c>
 80072fc:	4b59      	ldr	r3, [pc, #356]	@ (8007464 <HAL_RCC_OscConfig+0x298>)
 80072fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007302:	091b      	lsrs	r3, r3, #4
 8007304:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007308:	4293      	cmp	r3, r2
 800730a:	d224      	bcs.n	8007356 <HAL_RCC_OscConfig+0x18a>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6a1b      	ldr	r3, [r3, #32]
 8007310:	4618      	mov	r0, r3
 8007312:	f000 fec1 	bl	8008098 <RCC_SetFlashLatencyFromMSIRange>
 8007316:	4603      	mov	r3, r0
 8007318:	2b00      	cmp	r3, #0
 800731a:	d002      	beq.n	8007322 <HAL_RCC_OscConfig+0x156>
          {
            return HAL_ERROR;
 800731c:	2301      	movs	r3, #1
 800731e:	f000 bc4e 	b.w	8007bbe <HAL_RCC_OscConfig+0x9f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007322:	4b50      	ldr	r3, [pc, #320]	@ (8007464 <HAL_RCC_OscConfig+0x298>)
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	4a4f      	ldr	r2, [pc, #316]	@ (8007464 <HAL_RCC_OscConfig+0x298>)
 8007328:	f043 0308 	orr.w	r3, r3, #8
 800732c:	6013      	str	r3, [r2, #0]
 800732e:	4b4d      	ldr	r3, [pc, #308]	@ (8007464 <HAL_RCC_OscConfig+0x298>)
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6a1b      	ldr	r3, [r3, #32]
 800733a:	494a      	ldr	r1, [pc, #296]	@ (8007464 <HAL_RCC_OscConfig+0x298>)
 800733c:	4313      	orrs	r3, r2
 800733e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007340:	4b48      	ldr	r3, [pc, #288]	@ (8007464 <HAL_RCC_OscConfig+0x298>)
 8007342:	685b      	ldr	r3, [r3, #4]
 8007344:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	69db      	ldr	r3, [r3, #28]
 800734c:	021b      	lsls	r3, r3, #8
 800734e:	4945      	ldr	r1, [pc, #276]	@ (8007464 <HAL_RCC_OscConfig+0x298>)
 8007350:	4313      	orrs	r3, r2
 8007352:	604b      	str	r3, [r1, #4]
 8007354:	e026      	b.n	80073a4 <HAL_RCC_OscConfig+0x1d8>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007356:	4b43      	ldr	r3, [pc, #268]	@ (8007464 <HAL_RCC_OscConfig+0x298>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	4a42      	ldr	r2, [pc, #264]	@ (8007464 <HAL_RCC_OscConfig+0x298>)
 800735c:	f043 0308 	orr.w	r3, r3, #8
 8007360:	6013      	str	r3, [r2, #0]
 8007362:	4b40      	ldr	r3, [pc, #256]	@ (8007464 <HAL_RCC_OscConfig+0x298>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6a1b      	ldr	r3, [r3, #32]
 800736e:	493d      	ldr	r1, [pc, #244]	@ (8007464 <HAL_RCC_OscConfig+0x298>)
 8007370:	4313      	orrs	r3, r2
 8007372:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007374:	4b3b      	ldr	r3, [pc, #236]	@ (8007464 <HAL_RCC_OscConfig+0x298>)
 8007376:	685b      	ldr	r3, [r3, #4]
 8007378:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	69db      	ldr	r3, [r3, #28]
 8007380:	021b      	lsls	r3, r3, #8
 8007382:	4938      	ldr	r1, [pc, #224]	@ (8007464 <HAL_RCC_OscConfig+0x298>)
 8007384:	4313      	orrs	r3, r2
 8007386:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007388:	69bb      	ldr	r3, [r7, #24]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d10a      	bne.n	80073a4 <HAL_RCC_OscConfig+0x1d8>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6a1b      	ldr	r3, [r3, #32]
 8007392:	4618      	mov	r0, r3
 8007394:	f000 fe80 	bl	8008098 <RCC_SetFlashLatencyFromMSIRange>
 8007398:	4603      	mov	r3, r0
 800739a:	2b00      	cmp	r3, #0
 800739c:	d002      	beq.n	80073a4 <HAL_RCC_OscConfig+0x1d8>
            {
              return HAL_ERROR;
 800739e:	2301      	movs	r3, #1
 80073a0:	f000 bc0d 	b.w	8007bbe <HAL_RCC_OscConfig+0x9f2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80073a4:	f000 fdb4 	bl	8007f10 <HAL_RCC_GetSysClockFreq>
 80073a8:	4602      	mov	r2, r0
 80073aa:	4b2e      	ldr	r3, [pc, #184]	@ (8007464 <HAL_RCC_OscConfig+0x298>)
 80073ac:	689b      	ldr	r3, [r3, #8]
 80073ae:	091b      	lsrs	r3, r3, #4
 80073b0:	f003 030f 	and.w	r3, r3, #15
 80073b4:	492c      	ldr	r1, [pc, #176]	@ (8007468 <HAL_RCC_OscConfig+0x29c>)
 80073b6:	5ccb      	ldrb	r3, [r1, r3]
 80073b8:	f003 031f 	and.w	r3, r3, #31
 80073bc:	fa22 f303 	lsr.w	r3, r2, r3
 80073c0:	4a2a      	ldr	r2, [pc, #168]	@ (800746c <HAL_RCC_OscConfig+0x2a0>)
 80073c2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80073c4:	4b2a      	ldr	r3, [pc, #168]	@ (8007470 <HAL_RCC_OscConfig+0x2a4>)
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	4618      	mov	r0, r3
 80073ca:	f7fe f9b5 	bl	8005738 <HAL_InitTick>
 80073ce:	4603      	mov	r3, r0
 80073d0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80073d2:	7bfb      	ldrb	r3, [r7, #15]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d05d      	beq.n	8007494 <HAL_RCC_OscConfig+0x2c8>
        {
          return status;
 80073d8:	7bfb      	ldrb	r3, [r7, #15]
 80073da:	e3f0      	b.n	8007bbe <HAL_RCC_OscConfig+0x9f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	699b      	ldr	r3, [r3, #24]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d032      	beq.n	800744a <HAL_RCC_OscConfig+0x27e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80073e4:	4b1f      	ldr	r3, [pc, #124]	@ (8007464 <HAL_RCC_OscConfig+0x298>)
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4a1e      	ldr	r2, [pc, #120]	@ (8007464 <HAL_RCC_OscConfig+0x298>)
 80073ea:	f043 0301 	orr.w	r3, r3, #1
 80073ee:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80073f0:	f7fe f9f2 	bl	80057d8 <HAL_GetTick>
 80073f4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80073f6:	e008      	b.n	800740a <HAL_RCC_OscConfig+0x23e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80073f8:	f7fe f9ee 	bl	80057d8 <HAL_GetTick>
 80073fc:	4602      	mov	r2, r0
 80073fe:	693b      	ldr	r3, [r7, #16]
 8007400:	1ad3      	subs	r3, r2, r3
 8007402:	2b02      	cmp	r3, #2
 8007404:	d901      	bls.n	800740a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8007406:	2303      	movs	r3, #3
 8007408:	e3d9      	b.n	8007bbe <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800740a:	4b16      	ldr	r3, [pc, #88]	@ (8007464 <HAL_RCC_OscConfig+0x298>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f003 0302 	and.w	r3, r3, #2
 8007412:	2b00      	cmp	r3, #0
 8007414:	d0f0      	beq.n	80073f8 <HAL_RCC_OscConfig+0x22c>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007416:	4b13      	ldr	r3, [pc, #76]	@ (8007464 <HAL_RCC_OscConfig+0x298>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	4a12      	ldr	r2, [pc, #72]	@ (8007464 <HAL_RCC_OscConfig+0x298>)
 800741c:	f043 0308 	orr.w	r3, r3, #8
 8007420:	6013      	str	r3, [r2, #0]
 8007422:	4b10      	ldr	r3, [pc, #64]	@ (8007464 <HAL_RCC_OscConfig+0x298>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6a1b      	ldr	r3, [r3, #32]
 800742e:	490d      	ldr	r1, [pc, #52]	@ (8007464 <HAL_RCC_OscConfig+0x298>)
 8007430:	4313      	orrs	r3, r2
 8007432:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007434:	4b0b      	ldr	r3, [pc, #44]	@ (8007464 <HAL_RCC_OscConfig+0x298>)
 8007436:	685b      	ldr	r3, [r3, #4]
 8007438:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	69db      	ldr	r3, [r3, #28]
 8007440:	021b      	lsls	r3, r3, #8
 8007442:	4908      	ldr	r1, [pc, #32]	@ (8007464 <HAL_RCC_OscConfig+0x298>)
 8007444:	4313      	orrs	r3, r2
 8007446:	604b      	str	r3, [r1, #4]
 8007448:	e025      	b.n	8007496 <HAL_RCC_OscConfig+0x2ca>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800744a:	4b06      	ldr	r3, [pc, #24]	@ (8007464 <HAL_RCC_OscConfig+0x298>)
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	4a05      	ldr	r2, [pc, #20]	@ (8007464 <HAL_RCC_OscConfig+0x298>)
 8007450:	f023 0301 	bic.w	r3, r3, #1
 8007454:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007456:	f7fe f9bf 	bl	80057d8 <HAL_GetTick>
 800745a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800745c:	e013      	b.n	8007486 <HAL_RCC_OscConfig+0x2ba>
 800745e:	bf00      	nop
 8007460:	0800f988 	.word	0x0800f988
 8007464:	40021000 	.word	0x40021000
 8007468:	0800fb58 	.word	0x0800fb58
 800746c:	20000014 	.word	0x20000014
 8007470:	20000018 	.word	0x20000018
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007474:	f7fe f9b0 	bl	80057d8 <HAL_GetTick>
 8007478:	4602      	mov	r2, r0
 800747a:	693b      	ldr	r3, [r7, #16]
 800747c:	1ad3      	subs	r3, r2, r3
 800747e:	2b02      	cmp	r3, #2
 8007480:	d901      	bls.n	8007486 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8007482:	2303      	movs	r3, #3
 8007484:	e39b      	b.n	8007bbe <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007486:	4b97      	ldr	r3, [pc, #604]	@ (80076e4 <HAL_RCC_OscConfig+0x518>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f003 0302 	and.w	r3, r3, #2
 800748e:	2b00      	cmp	r3, #0
 8007490:	d1f0      	bne.n	8007474 <HAL_RCC_OscConfig+0x2a8>
 8007492:	e000      	b.n	8007496 <HAL_RCC_OscConfig+0x2ca>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007494:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f003 0301 	and.w	r3, r3, #1
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d07e      	beq.n	80075a0 <HAL_RCC_OscConfig+0x3d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	685b      	ldr	r3, [r3, #4]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d00e      	beq.n	80074c8 <HAL_RCC_OscConfig+0x2fc>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	685b      	ldr	r3, [r3, #4]
 80074ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80074b2:	d009      	beq.n	80074c8 <HAL_RCC_OscConfig+0x2fc>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	685b      	ldr	r3, [r3, #4]
 80074b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80074bc:	d004      	beq.n	80074c8 <HAL_RCC_OscConfig+0x2fc>
 80074be:	f240 2119 	movw	r1, #537	@ 0x219
 80074c2:	4889      	ldr	r0, [pc, #548]	@ (80076e8 <HAL_RCC_OscConfig+0x51c>)
 80074c4:	f7fd fb5e 	bl	8004b84 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80074c8:	69bb      	ldr	r3, [r7, #24]
 80074ca:	2b08      	cmp	r3, #8
 80074cc:	d005      	beq.n	80074da <HAL_RCC_OscConfig+0x30e>
 80074ce:	69bb      	ldr	r3, [r7, #24]
 80074d0:	2b0c      	cmp	r3, #12
 80074d2:	d10e      	bne.n	80074f2 <HAL_RCC_OscConfig+0x326>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80074d4:	697b      	ldr	r3, [r7, #20]
 80074d6:	2b03      	cmp	r3, #3
 80074d8:	d10b      	bne.n	80074f2 <HAL_RCC_OscConfig+0x326>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80074da:	4b82      	ldr	r3, [pc, #520]	@ (80076e4 <HAL_RCC_OscConfig+0x518>)
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d05b      	beq.n	800759e <HAL_RCC_OscConfig+0x3d2>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	685b      	ldr	r3, [r3, #4]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d157      	bne.n	800759e <HAL_RCC_OscConfig+0x3d2>
      {
        return HAL_ERROR;
 80074ee:	2301      	movs	r3, #1
 80074f0:	e365      	b.n	8007bbe <HAL_RCC_OscConfig+0x9f2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	685b      	ldr	r3, [r3, #4]
 80074f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80074fa:	d106      	bne.n	800750a <HAL_RCC_OscConfig+0x33e>
 80074fc:	4b79      	ldr	r3, [pc, #484]	@ (80076e4 <HAL_RCC_OscConfig+0x518>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	4a78      	ldr	r2, [pc, #480]	@ (80076e4 <HAL_RCC_OscConfig+0x518>)
 8007502:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007506:	6013      	str	r3, [r2, #0]
 8007508:	e01d      	b.n	8007546 <HAL_RCC_OscConfig+0x37a>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	685b      	ldr	r3, [r3, #4]
 800750e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007512:	d10c      	bne.n	800752e <HAL_RCC_OscConfig+0x362>
 8007514:	4b73      	ldr	r3, [pc, #460]	@ (80076e4 <HAL_RCC_OscConfig+0x518>)
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	4a72      	ldr	r2, [pc, #456]	@ (80076e4 <HAL_RCC_OscConfig+0x518>)
 800751a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800751e:	6013      	str	r3, [r2, #0]
 8007520:	4b70      	ldr	r3, [pc, #448]	@ (80076e4 <HAL_RCC_OscConfig+0x518>)
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	4a6f      	ldr	r2, [pc, #444]	@ (80076e4 <HAL_RCC_OscConfig+0x518>)
 8007526:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800752a:	6013      	str	r3, [r2, #0]
 800752c:	e00b      	b.n	8007546 <HAL_RCC_OscConfig+0x37a>
 800752e:	4b6d      	ldr	r3, [pc, #436]	@ (80076e4 <HAL_RCC_OscConfig+0x518>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4a6c      	ldr	r2, [pc, #432]	@ (80076e4 <HAL_RCC_OscConfig+0x518>)
 8007534:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007538:	6013      	str	r3, [r2, #0]
 800753a:	4b6a      	ldr	r3, [pc, #424]	@ (80076e4 <HAL_RCC_OscConfig+0x518>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	4a69      	ldr	r2, [pc, #420]	@ (80076e4 <HAL_RCC_OscConfig+0x518>)
 8007540:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007544:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	685b      	ldr	r3, [r3, #4]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d013      	beq.n	8007576 <HAL_RCC_OscConfig+0x3aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800754e:	f7fe f943 	bl	80057d8 <HAL_GetTick>
 8007552:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007554:	e008      	b.n	8007568 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007556:	f7fe f93f 	bl	80057d8 <HAL_GetTick>
 800755a:	4602      	mov	r2, r0
 800755c:	693b      	ldr	r3, [r7, #16]
 800755e:	1ad3      	subs	r3, r2, r3
 8007560:	2b64      	cmp	r3, #100	@ 0x64
 8007562:	d901      	bls.n	8007568 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8007564:	2303      	movs	r3, #3
 8007566:	e32a      	b.n	8007bbe <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007568:	4b5e      	ldr	r3, [pc, #376]	@ (80076e4 <HAL_RCC_OscConfig+0x518>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007570:	2b00      	cmp	r3, #0
 8007572:	d0f0      	beq.n	8007556 <HAL_RCC_OscConfig+0x38a>
 8007574:	e014      	b.n	80075a0 <HAL_RCC_OscConfig+0x3d4>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007576:	f7fe f92f 	bl	80057d8 <HAL_GetTick>
 800757a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800757c:	e008      	b.n	8007590 <HAL_RCC_OscConfig+0x3c4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800757e:	f7fe f92b 	bl	80057d8 <HAL_GetTick>
 8007582:	4602      	mov	r2, r0
 8007584:	693b      	ldr	r3, [r7, #16]
 8007586:	1ad3      	subs	r3, r2, r3
 8007588:	2b64      	cmp	r3, #100	@ 0x64
 800758a:	d901      	bls.n	8007590 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 800758c:	2303      	movs	r3, #3
 800758e:	e316      	b.n	8007bbe <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007590:	4b54      	ldr	r3, [pc, #336]	@ (80076e4 <HAL_RCC_OscConfig+0x518>)
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007598:	2b00      	cmp	r3, #0
 800759a:	d1f0      	bne.n	800757e <HAL_RCC_OscConfig+0x3b2>
 800759c:	e000      	b.n	80075a0 <HAL_RCC_OscConfig+0x3d4>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800759e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f003 0302 	and.w	r3, r3, #2
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d077      	beq.n	800769c <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	68db      	ldr	r3, [r3, #12]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d009      	beq.n	80075c8 <HAL_RCC_OscConfig+0x3fc>
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	68db      	ldr	r3, [r3, #12]
 80075b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80075bc:	d004      	beq.n	80075c8 <HAL_RCC_OscConfig+0x3fc>
 80075be:	f44f 7113 	mov.w	r1, #588	@ 0x24c
 80075c2:	4849      	ldr	r0, [pc, #292]	@ (80076e8 <HAL_RCC_OscConfig+0x51c>)
 80075c4:	f7fd fade 	bl	8004b84 <assert_failed>
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	691b      	ldr	r3, [r3, #16]
 80075cc:	2b1f      	cmp	r3, #31
 80075ce:	d904      	bls.n	80075da <HAL_RCC_OscConfig+0x40e>
 80075d0:	f240 214d 	movw	r1, #589	@ 0x24d
 80075d4:	4844      	ldr	r0, [pc, #272]	@ (80076e8 <HAL_RCC_OscConfig+0x51c>)
 80075d6:	f7fd fad5 	bl	8004b84 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80075da:	69bb      	ldr	r3, [r7, #24]
 80075dc:	2b04      	cmp	r3, #4
 80075de:	d005      	beq.n	80075ec <HAL_RCC_OscConfig+0x420>
 80075e0:	69bb      	ldr	r3, [r7, #24]
 80075e2:	2b0c      	cmp	r3, #12
 80075e4:	d119      	bne.n	800761a <HAL_RCC_OscConfig+0x44e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	2b02      	cmp	r3, #2
 80075ea:	d116      	bne.n	800761a <HAL_RCC_OscConfig+0x44e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80075ec:	4b3d      	ldr	r3, [pc, #244]	@ (80076e4 <HAL_RCC_OscConfig+0x518>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d005      	beq.n	8007604 <HAL_RCC_OscConfig+0x438>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	68db      	ldr	r3, [r3, #12]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d101      	bne.n	8007604 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8007600:	2301      	movs	r3, #1
 8007602:	e2dc      	b.n	8007bbe <HAL_RCC_OscConfig+0x9f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007604:	4b37      	ldr	r3, [pc, #220]	@ (80076e4 <HAL_RCC_OscConfig+0x518>)
 8007606:	685b      	ldr	r3, [r3, #4]
 8007608:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	691b      	ldr	r3, [r3, #16]
 8007610:	061b      	lsls	r3, r3, #24
 8007612:	4934      	ldr	r1, [pc, #208]	@ (80076e4 <HAL_RCC_OscConfig+0x518>)
 8007614:	4313      	orrs	r3, r2
 8007616:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007618:	e040      	b.n	800769c <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	68db      	ldr	r3, [r3, #12]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d023      	beq.n	800766a <HAL_RCC_OscConfig+0x49e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007622:	4b30      	ldr	r3, [pc, #192]	@ (80076e4 <HAL_RCC_OscConfig+0x518>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	4a2f      	ldr	r2, [pc, #188]	@ (80076e4 <HAL_RCC_OscConfig+0x518>)
 8007628:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800762c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800762e:	f7fe f8d3 	bl	80057d8 <HAL_GetTick>
 8007632:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007634:	e008      	b.n	8007648 <HAL_RCC_OscConfig+0x47c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007636:	f7fe f8cf 	bl	80057d8 <HAL_GetTick>
 800763a:	4602      	mov	r2, r0
 800763c:	693b      	ldr	r3, [r7, #16]
 800763e:	1ad3      	subs	r3, r2, r3
 8007640:	2b02      	cmp	r3, #2
 8007642:	d901      	bls.n	8007648 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8007644:	2303      	movs	r3, #3
 8007646:	e2ba      	b.n	8007bbe <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007648:	4b26      	ldr	r3, [pc, #152]	@ (80076e4 <HAL_RCC_OscConfig+0x518>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007650:	2b00      	cmp	r3, #0
 8007652:	d0f0      	beq.n	8007636 <HAL_RCC_OscConfig+0x46a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007654:	4b23      	ldr	r3, [pc, #140]	@ (80076e4 <HAL_RCC_OscConfig+0x518>)
 8007656:	685b      	ldr	r3, [r3, #4]
 8007658:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	691b      	ldr	r3, [r3, #16]
 8007660:	061b      	lsls	r3, r3, #24
 8007662:	4920      	ldr	r1, [pc, #128]	@ (80076e4 <HAL_RCC_OscConfig+0x518>)
 8007664:	4313      	orrs	r3, r2
 8007666:	604b      	str	r3, [r1, #4]
 8007668:	e018      	b.n	800769c <HAL_RCC_OscConfig+0x4d0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800766a:	4b1e      	ldr	r3, [pc, #120]	@ (80076e4 <HAL_RCC_OscConfig+0x518>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	4a1d      	ldr	r2, [pc, #116]	@ (80076e4 <HAL_RCC_OscConfig+0x518>)
 8007670:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007674:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007676:	f7fe f8af 	bl	80057d8 <HAL_GetTick>
 800767a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800767c:	e008      	b.n	8007690 <HAL_RCC_OscConfig+0x4c4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800767e:	f7fe f8ab 	bl	80057d8 <HAL_GetTick>
 8007682:	4602      	mov	r2, r0
 8007684:	693b      	ldr	r3, [r7, #16]
 8007686:	1ad3      	subs	r3, r2, r3
 8007688:	2b02      	cmp	r3, #2
 800768a:	d901      	bls.n	8007690 <HAL_RCC_OscConfig+0x4c4>
          {
            return HAL_TIMEOUT;
 800768c:	2303      	movs	r3, #3
 800768e:	e296      	b.n	8007bbe <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007690:	4b14      	ldr	r3, [pc, #80]	@ (80076e4 <HAL_RCC_OscConfig+0x518>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007698:	2b00      	cmp	r3, #0
 800769a:	d1f0      	bne.n	800767e <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f003 0308 	and.w	r3, r3, #8
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d04e      	beq.n	8007746 <HAL_RCC_OscConfig+0x57a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	695b      	ldr	r3, [r3, #20]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d008      	beq.n	80076c2 <HAL_RCC_OscConfig+0x4f6>
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	695b      	ldr	r3, [r3, #20]
 80076b4:	2b01      	cmp	r3, #1
 80076b6:	d004      	beq.n	80076c2 <HAL_RCC_OscConfig+0x4f6>
 80076b8:	f240 218d 	movw	r1, #653	@ 0x28d
 80076bc:	480a      	ldr	r0, [pc, #40]	@ (80076e8 <HAL_RCC_OscConfig+0x51c>)
 80076be:	f7fd fa61 	bl	8004b84 <assert_failed>

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	695b      	ldr	r3, [r3, #20]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d021      	beq.n	800770e <HAL_RCC_OscConfig+0x542>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80076ca:	4b06      	ldr	r3, [pc, #24]	@ (80076e4 <HAL_RCC_OscConfig+0x518>)
 80076cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80076d0:	4a04      	ldr	r2, [pc, #16]	@ (80076e4 <HAL_RCC_OscConfig+0x518>)
 80076d2:	f043 0301 	orr.w	r3, r3, #1
 80076d6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076da:	f7fe f87d 	bl	80057d8 <HAL_GetTick>
 80076de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80076e0:	e00d      	b.n	80076fe <HAL_RCC_OscConfig+0x532>
 80076e2:	bf00      	nop
 80076e4:	40021000 	.word	0x40021000
 80076e8:	0800f988 	.word	0x0800f988
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80076ec:	f7fe f874 	bl	80057d8 <HAL_GetTick>
 80076f0:	4602      	mov	r2, r0
 80076f2:	693b      	ldr	r3, [r7, #16]
 80076f4:	1ad3      	subs	r3, r2, r3
 80076f6:	2b02      	cmp	r3, #2
 80076f8:	d901      	bls.n	80076fe <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 80076fa:	2303      	movs	r3, #3
 80076fc:	e25f      	b.n	8007bbe <HAL_RCC_OscConfig+0x9f2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80076fe:	4b66      	ldr	r3, [pc, #408]	@ (8007898 <HAL_RCC_OscConfig+0x6cc>)
 8007700:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007704:	f003 0302 	and.w	r3, r3, #2
 8007708:	2b00      	cmp	r3, #0
 800770a:	d0ef      	beq.n	80076ec <HAL_RCC_OscConfig+0x520>
 800770c:	e01b      	b.n	8007746 <HAL_RCC_OscConfig+0x57a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800770e:	4b62      	ldr	r3, [pc, #392]	@ (8007898 <HAL_RCC_OscConfig+0x6cc>)
 8007710:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007714:	4a60      	ldr	r2, [pc, #384]	@ (8007898 <HAL_RCC_OscConfig+0x6cc>)
 8007716:	f023 0301 	bic.w	r3, r3, #1
 800771a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800771e:	f7fe f85b 	bl	80057d8 <HAL_GetTick>
 8007722:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007724:	e008      	b.n	8007738 <HAL_RCC_OscConfig+0x56c>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007726:	f7fe f857 	bl	80057d8 <HAL_GetTick>
 800772a:	4602      	mov	r2, r0
 800772c:	693b      	ldr	r3, [r7, #16]
 800772e:	1ad3      	subs	r3, r2, r3
 8007730:	2b02      	cmp	r3, #2
 8007732:	d901      	bls.n	8007738 <HAL_RCC_OscConfig+0x56c>
        {
          return HAL_TIMEOUT;
 8007734:	2303      	movs	r3, #3
 8007736:	e242      	b.n	8007bbe <HAL_RCC_OscConfig+0x9f2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007738:	4b57      	ldr	r3, [pc, #348]	@ (8007898 <HAL_RCC_OscConfig+0x6cc>)
 800773a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800773e:	f003 0302 	and.w	r3, r3, #2
 8007742:	2b00      	cmp	r3, #0
 8007744:	d1ef      	bne.n	8007726 <HAL_RCC_OscConfig+0x55a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f003 0304 	and.w	r3, r3, #4
 800774e:	2b00      	cmp	r3, #0
 8007750:	f000 80b8 	beq.w	80078c4 <HAL_RCC_OscConfig+0x6f8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007754:	2300      	movs	r3, #0
 8007756:	77fb      	strb	r3, [r7, #31]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	689b      	ldr	r3, [r3, #8]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d00c      	beq.n	800777a <HAL_RCC_OscConfig+0x5ae>
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	689b      	ldr	r3, [r3, #8]
 8007764:	2b01      	cmp	r3, #1
 8007766:	d008      	beq.n	800777a <HAL_RCC_OscConfig+0x5ae>
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	689b      	ldr	r3, [r3, #8]
 800776c:	2b05      	cmp	r3, #5
 800776e:	d004      	beq.n	800777a <HAL_RCC_OscConfig+0x5ae>
 8007770:	f44f 7138 	mov.w	r1, #736	@ 0x2e0
 8007774:	4849      	ldr	r0, [pc, #292]	@ (800789c <HAL_RCC_OscConfig+0x6d0>)
 8007776:	f7fd fa05 	bl	8004b84 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800777a:	4b47      	ldr	r3, [pc, #284]	@ (8007898 <HAL_RCC_OscConfig+0x6cc>)
 800777c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800777e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007782:	2b00      	cmp	r3, #0
 8007784:	d10d      	bne.n	80077a2 <HAL_RCC_OscConfig+0x5d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007786:	4b44      	ldr	r3, [pc, #272]	@ (8007898 <HAL_RCC_OscConfig+0x6cc>)
 8007788:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800778a:	4a43      	ldr	r2, [pc, #268]	@ (8007898 <HAL_RCC_OscConfig+0x6cc>)
 800778c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007790:	6593      	str	r3, [r2, #88]	@ 0x58
 8007792:	4b41      	ldr	r3, [pc, #260]	@ (8007898 <HAL_RCC_OscConfig+0x6cc>)
 8007794:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007796:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800779a:	60bb      	str	r3, [r7, #8]
 800779c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800779e:	2301      	movs	r3, #1
 80077a0:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80077a2:	4b3f      	ldr	r3, [pc, #252]	@ (80078a0 <HAL_RCC_OscConfig+0x6d4>)
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d118      	bne.n	80077e0 <HAL_RCC_OscConfig+0x614>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80077ae:	4b3c      	ldr	r3, [pc, #240]	@ (80078a0 <HAL_RCC_OscConfig+0x6d4>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	4a3b      	ldr	r2, [pc, #236]	@ (80078a0 <HAL_RCC_OscConfig+0x6d4>)
 80077b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80077b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80077ba:	f7fe f80d 	bl	80057d8 <HAL_GetTick>
 80077be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80077c0:	e008      	b.n	80077d4 <HAL_RCC_OscConfig+0x608>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80077c2:	f7fe f809 	bl	80057d8 <HAL_GetTick>
 80077c6:	4602      	mov	r2, r0
 80077c8:	693b      	ldr	r3, [r7, #16]
 80077ca:	1ad3      	subs	r3, r2, r3
 80077cc:	2b02      	cmp	r3, #2
 80077ce:	d901      	bls.n	80077d4 <HAL_RCC_OscConfig+0x608>
        {
          return HAL_TIMEOUT;
 80077d0:	2303      	movs	r3, #3
 80077d2:	e1f4      	b.n	8007bbe <HAL_RCC_OscConfig+0x9f2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80077d4:	4b32      	ldr	r3, [pc, #200]	@ (80078a0 <HAL_RCC_OscConfig+0x6d4>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d0f0      	beq.n	80077c2 <HAL_RCC_OscConfig+0x5f6>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	689b      	ldr	r3, [r3, #8]
 80077e4:	2b01      	cmp	r3, #1
 80077e6:	d108      	bne.n	80077fa <HAL_RCC_OscConfig+0x62e>
 80077e8:	4b2b      	ldr	r3, [pc, #172]	@ (8007898 <HAL_RCC_OscConfig+0x6cc>)
 80077ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077ee:	4a2a      	ldr	r2, [pc, #168]	@ (8007898 <HAL_RCC_OscConfig+0x6cc>)
 80077f0:	f043 0301 	orr.w	r3, r3, #1
 80077f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80077f8:	e024      	b.n	8007844 <HAL_RCC_OscConfig+0x678>
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	689b      	ldr	r3, [r3, #8]
 80077fe:	2b05      	cmp	r3, #5
 8007800:	d110      	bne.n	8007824 <HAL_RCC_OscConfig+0x658>
 8007802:	4b25      	ldr	r3, [pc, #148]	@ (8007898 <HAL_RCC_OscConfig+0x6cc>)
 8007804:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007808:	4a23      	ldr	r2, [pc, #140]	@ (8007898 <HAL_RCC_OscConfig+0x6cc>)
 800780a:	f043 0304 	orr.w	r3, r3, #4
 800780e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007812:	4b21      	ldr	r3, [pc, #132]	@ (8007898 <HAL_RCC_OscConfig+0x6cc>)
 8007814:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007818:	4a1f      	ldr	r2, [pc, #124]	@ (8007898 <HAL_RCC_OscConfig+0x6cc>)
 800781a:	f043 0301 	orr.w	r3, r3, #1
 800781e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007822:	e00f      	b.n	8007844 <HAL_RCC_OscConfig+0x678>
 8007824:	4b1c      	ldr	r3, [pc, #112]	@ (8007898 <HAL_RCC_OscConfig+0x6cc>)
 8007826:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800782a:	4a1b      	ldr	r2, [pc, #108]	@ (8007898 <HAL_RCC_OscConfig+0x6cc>)
 800782c:	f023 0301 	bic.w	r3, r3, #1
 8007830:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007834:	4b18      	ldr	r3, [pc, #96]	@ (8007898 <HAL_RCC_OscConfig+0x6cc>)
 8007836:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800783a:	4a17      	ldr	r2, [pc, #92]	@ (8007898 <HAL_RCC_OscConfig+0x6cc>)
 800783c:	f023 0304 	bic.w	r3, r3, #4
 8007840:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	689b      	ldr	r3, [r3, #8]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d016      	beq.n	800787a <HAL_RCC_OscConfig+0x6ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800784c:	f7fd ffc4 	bl	80057d8 <HAL_GetTick>
 8007850:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007852:	e00a      	b.n	800786a <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007854:	f7fd ffc0 	bl	80057d8 <HAL_GetTick>
 8007858:	4602      	mov	r2, r0
 800785a:	693b      	ldr	r3, [r7, #16]
 800785c:	1ad3      	subs	r3, r2, r3
 800785e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007862:	4293      	cmp	r3, r2
 8007864:	d901      	bls.n	800786a <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8007866:	2303      	movs	r3, #3
 8007868:	e1a9      	b.n	8007bbe <HAL_RCC_OscConfig+0x9f2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800786a:	4b0b      	ldr	r3, [pc, #44]	@ (8007898 <HAL_RCC_OscConfig+0x6cc>)
 800786c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007870:	f003 0302 	and.w	r3, r3, #2
 8007874:	2b00      	cmp	r3, #0
 8007876:	d0ed      	beq.n	8007854 <HAL_RCC_OscConfig+0x688>
 8007878:	e01b      	b.n	80078b2 <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800787a:	f7fd ffad 	bl	80057d8 <HAL_GetTick>
 800787e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007880:	e010      	b.n	80078a4 <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007882:	f7fd ffa9 	bl	80057d8 <HAL_GetTick>
 8007886:	4602      	mov	r2, r0
 8007888:	693b      	ldr	r3, [r7, #16]
 800788a:	1ad3      	subs	r3, r2, r3
 800788c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007890:	4293      	cmp	r3, r2
 8007892:	d907      	bls.n	80078a4 <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 8007894:	2303      	movs	r3, #3
 8007896:	e192      	b.n	8007bbe <HAL_RCC_OscConfig+0x9f2>
 8007898:	40021000 	.word	0x40021000
 800789c:	0800f988 	.word	0x0800f988
 80078a0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80078a4:	4b98      	ldr	r3, [pc, #608]	@ (8007b08 <HAL_RCC_OscConfig+0x93c>)
 80078a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078aa:	f003 0302 	and.w	r3, r3, #2
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d1e7      	bne.n	8007882 <HAL_RCC_OscConfig+0x6b6>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80078b2:	7ffb      	ldrb	r3, [r7, #31]
 80078b4:	2b01      	cmp	r3, #1
 80078b6:	d105      	bne.n	80078c4 <HAL_RCC_OscConfig+0x6f8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80078b8:	4b93      	ldr	r3, [pc, #588]	@ (8007b08 <HAL_RCC_OscConfig+0x93c>)
 80078ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80078bc:	4a92      	ldr	r2, [pc, #584]	@ (8007b08 <HAL_RCC_OscConfig+0x93c>)
 80078be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80078c2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d00c      	beq.n	80078e6 <HAL_RCC_OscConfig+0x71a>
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078d0:	2b01      	cmp	r3, #1
 80078d2:	d008      	beq.n	80078e6 <HAL_RCC_OscConfig+0x71a>
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078d8:	2b02      	cmp	r3, #2
 80078da:	d004      	beq.n	80078e6 <HAL_RCC_OscConfig+0x71a>
 80078dc:	f240 316e 	movw	r1, #878	@ 0x36e
 80078e0:	488a      	ldr	r0, [pc, #552]	@ (8007b0c <HAL_RCC_OscConfig+0x940>)
 80078e2:	f7fd f94f 	bl	8004b84 <assert_failed>

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	f000 8166 	beq.w	8007bbc <HAL_RCC_OscConfig+0x9f0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078f4:	2b02      	cmp	r3, #2
 80078f6:	f040 813c 	bne.w	8007b72 <HAL_RCC_OscConfig+0x9a6>
    {
      /* Check the parameters */
      assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d010      	beq.n	8007924 <HAL_RCC_OscConfig+0x758>
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007906:	2b01      	cmp	r3, #1
 8007908:	d00c      	beq.n	8007924 <HAL_RCC_OscConfig+0x758>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800790e:	2b02      	cmp	r3, #2
 8007910:	d008      	beq.n	8007924 <HAL_RCC_OscConfig+0x758>
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007916:	2b03      	cmp	r3, #3
 8007918:	d004      	beq.n	8007924 <HAL_RCC_OscConfig+0x758>
 800791a:	f240 3176 	movw	r1, #886	@ 0x376
 800791e:	487b      	ldr	r0, [pc, #492]	@ (8007b0c <HAL_RCC_OscConfig+0x940>)
 8007920:	f7fd f930 	bl	8004b84 <assert_failed>
      assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007928:	2b00      	cmp	r3, #0
 800792a:	d003      	beq.n	8007934 <HAL_RCC_OscConfig+0x768>
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007930:	2b08      	cmp	r3, #8
 8007932:	d904      	bls.n	800793e <HAL_RCC_OscConfig+0x772>
 8007934:	f240 3177 	movw	r1, #887	@ 0x377
 8007938:	4874      	ldr	r0, [pc, #464]	@ (8007b0c <HAL_RCC_OscConfig+0x940>)
 800793a:	f7fd f923 	bl	8004b84 <assert_failed>
      assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007942:	2b07      	cmp	r3, #7
 8007944:	d903      	bls.n	800794e <HAL_RCC_OscConfig+0x782>
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800794a:	2b56      	cmp	r3, #86	@ 0x56
 800794c:	d904      	bls.n	8007958 <HAL_RCC_OscConfig+0x78c>
 800794e:	f44f 715e 	mov.w	r1, #888	@ 0x378
 8007952:	486e      	ldr	r0, [pc, #440]	@ (8007b0c <HAL_RCC_OscConfig+0x940>)
 8007954:	f7fd f916 	bl	8004b84 <assert_failed>
#if defined(RCC_PLLP_SUPPORT)
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800795c:	2b07      	cmp	r3, #7
 800795e:	d008      	beq.n	8007972 <HAL_RCC_OscConfig+0x7a6>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007964:	2b11      	cmp	r3, #17
 8007966:	d004      	beq.n	8007972 <HAL_RCC_OscConfig+0x7a6>
 8007968:	f240 317a 	movw	r1, #890	@ 0x37a
 800796c:	4867      	ldr	r0, [pc, #412]	@ (8007b0c <HAL_RCC_OscConfig+0x940>)
 800796e:	f7fd f909 	bl	8004b84 <assert_failed>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007976:	2b02      	cmp	r3, #2
 8007978:	d010      	beq.n	800799c <HAL_RCC_OscConfig+0x7d0>
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800797e:	2b04      	cmp	r3, #4
 8007980:	d00c      	beq.n	800799c <HAL_RCC_OscConfig+0x7d0>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007986:	2b06      	cmp	r3, #6
 8007988:	d008      	beq.n	800799c <HAL_RCC_OscConfig+0x7d0>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800798e:	2b08      	cmp	r3, #8
 8007990:	d004      	beq.n	800799c <HAL_RCC_OscConfig+0x7d0>
 8007992:	f44f 715f 	mov.w	r1, #892	@ 0x37c
 8007996:	485d      	ldr	r0, [pc, #372]	@ (8007b0c <HAL_RCC_OscConfig+0x940>)
 8007998:	f7fd f8f4 	bl	8004b84 <assert_failed>
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079a0:	2b02      	cmp	r3, #2
 80079a2:	d010      	beq.n	80079c6 <HAL_RCC_OscConfig+0x7fa>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079a8:	2b04      	cmp	r3, #4
 80079aa:	d00c      	beq.n	80079c6 <HAL_RCC_OscConfig+0x7fa>
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079b0:	2b06      	cmp	r3, #6
 80079b2:	d008      	beq.n	80079c6 <HAL_RCC_OscConfig+0x7fa>
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079b8:	2b08      	cmp	r3, #8
 80079ba:	d004      	beq.n	80079c6 <HAL_RCC_OscConfig+0x7fa>
 80079bc:	f240 317d 	movw	r1, #893	@ 0x37d
 80079c0:	4852      	ldr	r0, [pc, #328]	@ (8007b0c <HAL_RCC_OscConfig+0x940>)
 80079c2:	f7fd f8df 	bl	8004b84 <assert_failed>

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80079c6:	4b50      	ldr	r3, [pc, #320]	@ (8007b08 <HAL_RCC_OscConfig+0x93c>)
 80079c8:	68db      	ldr	r3, [r3, #12]
 80079ca:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80079cc:	697b      	ldr	r3, [r7, #20]
 80079ce:	f003 0203 	and.w	r2, r3, #3
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079d6:	429a      	cmp	r2, r3
 80079d8:	d130      	bne.n	8007a3c <HAL_RCC_OscConfig+0x870>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80079da:	697b      	ldr	r3, [r7, #20]
 80079dc:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079e4:	3b01      	subs	r3, #1
 80079e6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80079e8:	429a      	cmp	r2, r3
 80079ea:	d127      	bne.n	8007a3c <HAL_RCC_OscConfig+0x870>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80079ec:	697b      	ldr	r3, [r7, #20]
 80079ee:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80079f6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80079f8:	429a      	cmp	r2, r3
 80079fa:	d11f      	bne.n	8007a3c <HAL_RCC_OscConfig+0x870>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80079fc:	697b      	ldr	r3, [r7, #20]
 80079fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a02:	687a      	ldr	r2, [r7, #4]
 8007a04:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007a06:	2a07      	cmp	r2, #7
 8007a08:	bf14      	ite	ne
 8007a0a:	2201      	movne	r2, #1
 8007a0c:	2200      	moveq	r2, #0
 8007a0e:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007a10:	4293      	cmp	r3, r2
 8007a12:	d113      	bne.n	8007a3c <HAL_RCC_OscConfig+0x870>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007a14:	697b      	ldr	r3, [r7, #20]
 8007a16:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a1e:	085b      	lsrs	r3, r3, #1
 8007a20:	3b01      	subs	r3, #1
 8007a22:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8007a24:	429a      	cmp	r2, r3
 8007a26:	d109      	bne.n	8007a3c <HAL_RCC_OscConfig+0x870>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007a28:	697b      	ldr	r3, [r7, #20]
 8007a2a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a32:	085b      	lsrs	r3, r3, #1
 8007a34:	3b01      	subs	r3, #1
 8007a36:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007a38:	429a      	cmp	r2, r3
 8007a3a:	d074      	beq.n	8007b26 <HAL_RCC_OscConfig+0x95a>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007a3c:	69bb      	ldr	r3, [r7, #24]
 8007a3e:	2b0c      	cmp	r3, #12
 8007a40:	d06f      	beq.n	8007b22 <HAL_RCC_OscConfig+0x956>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8007a42:	4b31      	ldr	r3, [pc, #196]	@ (8007b08 <HAL_RCC_OscConfig+0x93c>)
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d105      	bne.n	8007a5a <HAL_RCC_OscConfig+0x88e>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8007a4e:	4b2e      	ldr	r3, [pc, #184]	@ (8007b08 <HAL_RCC_OscConfig+0x93c>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d001      	beq.n	8007a5e <HAL_RCC_OscConfig+0x892>
#endif
            )
          {
            return HAL_ERROR;
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	e0af      	b.n	8007bbe <HAL_RCC_OscConfig+0x9f2>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8007a5e:	4b2a      	ldr	r3, [pc, #168]	@ (8007b08 <HAL_RCC_OscConfig+0x93c>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	4a29      	ldr	r2, [pc, #164]	@ (8007b08 <HAL_RCC_OscConfig+0x93c>)
 8007a64:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007a68:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007a6a:	f7fd feb5 	bl	80057d8 <HAL_GetTick>
 8007a6e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007a70:	e008      	b.n	8007a84 <HAL_RCC_OscConfig+0x8b8>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007a72:	f7fd feb1 	bl	80057d8 <HAL_GetTick>
 8007a76:	4602      	mov	r2, r0
 8007a78:	693b      	ldr	r3, [r7, #16]
 8007a7a:	1ad3      	subs	r3, r2, r3
 8007a7c:	2b02      	cmp	r3, #2
 8007a7e:	d901      	bls.n	8007a84 <HAL_RCC_OscConfig+0x8b8>
              {
                return HAL_TIMEOUT;
 8007a80:	2303      	movs	r3, #3
 8007a82:	e09c      	b.n	8007bbe <HAL_RCC_OscConfig+0x9f2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007a84:	4b20      	ldr	r3, [pc, #128]	@ (8007b08 <HAL_RCC_OscConfig+0x93c>)
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d1f0      	bne.n	8007a72 <HAL_RCC_OscConfig+0x8a6>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007a90:	4b1d      	ldr	r3, [pc, #116]	@ (8007b08 <HAL_RCC_OscConfig+0x93c>)
 8007a92:	68da      	ldr	r2, [r3, #12]
 8007a94:	4b1e      	ldr	r3, [pc, #120]	@ (8007b10 <HAL_RCC_OscConfig+0x944>)
 8007a96:	4013      	ands	r3, r2
 8007a98:	687a      	ldr	r2, [r7, #4]
 8007a9a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8007a9c:	687a      	ldr	r2, [r7, #4]
 8007a9e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007aa0:	3a01      	subs	r2, #1
 8007aa2:	0112      	lsls	r2, r2, #4
 8007aa4:	4311      	orrs	r1, r2
 8007aa6:	687a      	ldr	r2, [r7, #4]
 8007aa8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8007aaa:	0212      	lsls	r2, r2, #8
 8007aac:	4311      	orrs	r1, r2
 8007aae:	687a      	ldr	r2, [r7, #4]
 8007ab0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007ab2:	0852      	lsrs	r2, r2, #1
 8007ab4:	3a01      	subs	r2, #1
 8007ab6:	0552      	lsls	r2, r2, #21
 8007ab8:	4311      	orrs	r1, r2
 8007aba:	687a      	ldr	r2, [r7, #4]
 8007abc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8007abe:	0852      	lsrs	r2, r2, #1
 8007ac0:	3a01      	subs	r2, #1
 8007ac2:	0652      	lsls	r2, r2, #25
 8007ac4:	4311      	orrs	r1, r2
 8007ac6:	687a      	ldr	r2, [r7, #4]
 8007ac8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007aca:	0912      	lsrs	r2, r2, #4
 8007acc:	0452      	lsls	r2, r2, #17
 8007ace:	430a      	orrs	r2, r1
 8007ad0:	490d      	ldr	r1, [pc, #52]	@ (8007b08 <HAL_RCC_OscConfig+0x93c>)
 8007ad2:	4313      	orrs	r3, r2
 8007ad4:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8007ad6:	4b0c      	ldr	r3, [pc, #48]	@ (8007b08 <HAL_RCC_OscConfig+0x93c>)
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	4a0b      	ldr	r2, [pc, #44]	@ (8007b08 <HAL_RCC_OscConfig+0x93c>)
 8007adc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007ae0:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007ae2:	4b09      	ldr	r3, [pc, #36]	@ (8007b08 <HAL_RCC_OscConfig+0x93c>)
 8007ae4:	68db      	ldr	r3, [r3, #12]
 8007ae6:	4a08      	ldr	r2, [pc, #32]	@ (8007b08 <HAL_RCC_OscConfig+0x93c>)
 8007ae8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007aec:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007aee:	f7fd fe73 	bl	80057d8 <HAL_GetTick>
 8007af2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007af4:	e00e      	b.n	8007b14 <HAL_RCC_OscConfig+0x948>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007af6:	f7fd fe6f 	bl	80057d8 <HAL_GetTick>
 8007afa:	4602      	mov	r2, r0
 8007afc:	693b      	ldr	r3, [r7, #16]
 8007afe:	1ad3      	subs	r3, r2, r3
 8007b00:	2b02      	cmp	r3, #2
 8007b02:	d907      	bls.n	8007b14 <HAL_RCC_OscConfig+0x948>
              {
                return HAL_TIMEOUT;
 8007b04:	2303      	movs	r3, #3
 8007b06:	e05a      	b.n	8007bbe <HAL_RCC_OscConfig+0x9f2>
 8007b08:	40021000 	.word	0x40021000
 8007b0c:	0800f988 	.word	0x0800f988
 8007b10:	f99d808c 	.word	0xf99d808c
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007b14:	4b2c      	ldr	r3, [pc, #176]	@ (8007bc8 <HAL_RCC_OscConfig+0x9fc>)
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d0ea      	beq.n	8007af6 <HAL_RCC_OscConfig+0x92a>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007b20:	e04c      	b.n	8007bbc <HAL_RCC_OscConfig+0x9f0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8007b22:	2301      	movs	r3, #1
 8007b24:	e04b      	b.n	8007bbe <HAL_RCC_OscConfig+0x9f2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007b26:	4b28      	ldr	r3, [pc, #160]	@ (8007bc8 <HAL_RCC_OscConfig+0x9fc>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d144      	bne.n	8007bbc <HAL_RCC_OscConfig+0x9f0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8007b32:	4b25      	ldr	r3, [pc, #148]	@ (8007bc8 <HAL_RCC_OscConfig+0x9fc>)
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	4a24      	ldr	r2, [pc, #144]	@ (8007bc8 <HAL_RCC_OscConfig+0x9fc>)
 8007b38:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007b3c:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007b3e:	4b22      	ldr	r3, [pc, #136]	@ (8007bc8 <HAL_RCC_OscConfig+0x9fc>)
 8007b40:	68db      	ldr	r3, [r3, #12]
 8007b42:	4a21      	ldr	r2, [pc, #132]	@ (8007bc8 <HAL_RCC_OscConfig+0x9fc>)
 8007b44:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007b48:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007b4a:	f7fd fe45 	bl	80057d8 <HAL_GetTick>
 8007b4e:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007b50:	e008      	b.n	8007b64 <HAL_RCC_OscConfig+0x998>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007b52:	f7fd fe41 	bl	80057d8 <HAL_GetTick>
 8007b56:	4602      	mov	r2, r0
 8007b58:	693b      	ldr	r3, [r7, #16]
 8007b5a:	1ad3      	subs	r3, r2, r3
 8007b5c:	2b02      	cmp	r3, #2
 8007b5e:	d901      	bls.n	8007b64 <HAL_RCC_OscConfig+0x998>
            {
              return HAL_TIMEOUT;
 8007b60:	2303      	movs	r3, #3
 8007b62:	e02c      	b.n	8007bbe <HAL_RCC_OscConfig+0x9f2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007b64:	4b18      	ldr	r3, [pc, #96]	@ (8007bc8 <HAL_RCC_OscConfig+0x9fc>)
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d0f0      	beq.n	8007b52 <HAL_RCC_OscConfig+0x986>
 8007b70:	e024      	b.n	8007bbc <HAL_RCC_OscConfig+0x9f0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007b72:	69bb      	ldr	r3, [r7, #24]
 8007b74:	2b0c      	cmp	r3, #12
 8007b76:	d01f      	beq.n	8007bb8 <HAL_RCC_OscConfig+0x9ec>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b78:	4b13      	ldr	r3, [pc, #76]	@ (8007bc8 <HAL_RCC_OscConfig+0x9fc>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	4a12      	ldr	r2, [pc, #72]	@ (8007bc8 <HAL_RCC_OscConfig+0x9fc>)
 8007b7e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007b82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b84:	f7fd fe28 	bl	80057d8 <HAL_GetTick>
 8007b88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007b8a:	e008      	b.n	8007b9e <HAL_RCC_OscConfig+0x9d2>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007b8c:	f7fd fe24 	bl	80057d8 <HAL_GetTick>
 8007b90:	4602      	mov	r2, r0
 8007b92:	693b      	ldr	r3, [r7, #16]
 8007b94:	1ad3      	subs	r3, r2, r3
 8007b96:	2b02      	cmp	r3, #2
 8007b98:	d901      	bls.n	8007b9e <HAL_RCC_OscConfig+0x9d2>
          {
            return HAL_TIMEOUT;
 8007b9a:	2303      	movs	r3, #3
 8007b9c:	e00f      	b.n	8007bbe <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007b9e:	4b0a      	ldr	r3, [pc, #40]	@ (8007bc8 <HAL_RCC_OscConfig+0x9fc>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d1f0      	bne.n	8007b8c <HAL_RCC_OscConfig+0x9c0>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8007baa:	4b07      	ldr	r3, [pc, #28]	@ (8007bc8 <HAL_RCC_OscConfig+0x9fc>)
 8007bac:	68da      	ldr	r2, [r3, #12]
 8007bae:	4906      	ldr	r1, [pc, #24]	@ (8007bc8 <HAL_RCC_OscConfig+0x9fc>)
 8007bb0:	4b06      	ldr	r3, [pc, #24]	@ (8007bcc <HAL_RCC_OscConfig+0xa00>)
 8007bb2:	4013      	ands	r3, r2
 8007bb4:	60cb      	str	r3, [r1, #12]
 8007bb6:	e001      	b.n	8007bbc <HAL_RCC_OscConfig+0x9f0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8007bb8:	2301      	movs	r3, #1
 8007bba:	e000      	b.n	8007bbe <HAL_RCC_OscConfig+0x9f2>
      }
    }
  }
  return HAL_OK;
 8007bbc:	2300      	movs	r3, #0
}
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	3720      	adds	r7, #32
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	bd80      	pop	{r7, pc}
 8007bc6:	bf00      	nop
 8007bc8:	40021000 	.word	0x40021000
 8007bcc:	feeefffc 	.word	0xfeeefffc

08007bd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b084      	sub	sp, #16
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
 8007bd8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d101      	bne.n	8007be4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007be0:	2301      	movs	r3, #1
 8007be2:	e186      	b.n	8007ef2 <HAL_RCC_ClockConfig+0x322>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d003      	beq.n	8007bf4 <HAL_RCC_ClockConfig+0x24>
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	2b0f      	cmp	r3, #15
 8007bf2:	d904      	bls.n	8007bfe <HAL_RCC_ClockConfig+0x2e>
 8007bf4:	f240 4159 	movw	r1, #1113	@ 0x459
 8007bf8:	4882      	ldr	r0, [pc, #520]	@ (8007e04 <HAL_RCC_ClockConfig+0x234>)
 8007bfa:	f7fc ffc3 	bl	8004b84 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d010      	beq.n	8007c26 <HAL_RCC_ClockConfig+0x56>
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	2b01      	cmp	r3, #1
 8007c08:	d00d      	beq.n	8007c26 <HAL_RCC_ClockConfig+0x56>
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	2b02      	cmp	r3, #2
 8007c0e:	d00a      	beq.n	8007c26 <HAL_RCC_ClockConfig+0x56>
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	2b03      	cmp	r3, #3
 8007c14:	d007      	beq.n	8007c26 <HAL_RCC_ClockConfig+0x56>
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	2b04      	cmp	r3, #4
 8007c1a:	d004      	beq.n	8007c26 <HAL_RCC_ClockConfig+0x56>
 8007c1c:	f240 415a 	movw	r1, #1114	@ 0x45a
 8007c20:	4878      	ldr	r0, [pc, #480]	@ (8007e04 <HAL_RCC_ClockConfig+0x234>)
 8007c22:	f7fc ffaf 	bl	8004b84 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007c26:	4b78      	ldr	r3, [pc, #480]	@ (8007e08 <HAL_RCC_ClockConfig+0x238>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f003 0307 	and.w	r3, r3, #7
 8007c2e:	683a      	ldr	r2, [r7, #0]
 8007c30:	429a      	cmp	r2, r3
 8007c32:	d910      	bls.n	8007c56 <HAL_RCC_ClockConfig+0x86>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c34:	4b74      	ldr	r3, [pc, #464]	@ (8007e08 <HAL_RCC_ClockConfig+0x238>)
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f023 0207 	bic.w	r2, r3, #7
 8007c3c:	4972      	ldr	r1, [pc, #456]	@ (8007e08 <HAL_RCC_ClockConfig+0x238>)
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	4313      	orrs	r3, r2
 8007c42:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c44:	4b70      	ldr	r3, [pc, #448]	@ (8007e08 <HAL_RCC_ClockConfig+0x238>)
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f003 0307 	and.w	r3, r3, #7
 8007c4c:	683a      	ldr	r2, [r7, #0]
 8007c4e:	429a      	cmp	r2, r3
 8007c50:	d001      	beq.n	8007c56 <HAL_RCC_ClockConfig+0x86>
    {
      return HAL_ERROR;
 8007c52:	2301      	movs	r3, #1
 8007c54:	e14d      	b.n	8007ef2 <HAL_RCC_ClockConfig+0x322>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f003 0302 	and.w	r3, r3, #2
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d039      	beq.n	8007cd6 <HAL_RCC_ClockConfig+0x106>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	689b      	ldr	r3, [r3, #8]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d024      	beq.n	8007cb4 <HAL_RCC_ClockConfig+0xe4>
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	689b      	ldr	r3, [r3, #8]
 8007c6e:	2b80      	cmp	r3, #128	@ 0x80
 8007c70:	d020      	beq.n	8007cb4 <HAL_RCC_ClockConfig+0xe4>
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	689b      	ldr	r3, [r3, #8]
 8007c76:	2b90      	cmp	r3, #144	@ 0x90
 8007c78:	d01c      	beq.n	8007cb4 <HAL_RCC_ClockConfig+0xe4>
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	689b      	ldr	r3, [r3, #8]
 8007c7e:	2ba0      	cmp	r3, #160	@ 0xa0
 8007c80:	d018      	beq.n	8007cb4 <HAL_RCC_ClockConfig+0xe4>
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	689b      	ldr	r3, [r3, #8]
 8007c86:	2bb0      	cmp	r3, #176	@ 0xb0
 8007c88:	d014      	beq.n	8007cb4 <HAL_RCC_ClockConfig+0xe4>
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	689b      	ldr	r3, [r3, #8]
 8007c8e:	2bc0      	cmp	r3, #192	@ 0xc0
 8007c90:	d010      	beq.n	8007cb4 <HAL_RCC_ClockConfig+0xe4>
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	689b      	ldr	r3, [r3, #8]
 8007c96:	2bd0      	cmp	r3, #208	@ 0xd0
 8007c98:	d00c      	beq.n	8007cb4 <HAL_RCC_ClockConfig+0xe4>
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	689b      	ldr	r3, [r3, #8]
 8007c9e:	2be0      	cmp	r3, #224	@ 0xe0
 8007ca0:	d008      	beq.n	8007cb4 <HAL_RCC_ClockConfig+0xe4>
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	689b      	ldr	r3, [r3, #8]
 8007ca6:	2bf0      	cmp	r3, #240	@ 0xf0
 8007ca8:	d004      	beq.n	8007cb4 <HAL_RCC_ClockConfig+0xe4>
 8007caa:	f240 4172 	movw	r1, #1138	@ 0x472
 8007cae:	4855      	ldr	r0, [pc, #340]	@ (8007e04 <HAL_RCC_ClockConfig+0x234>)
 8007cb0:	f7fc ff68 	bl	8004b84 <assert_failed>

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	689a      	ldr	r2, [r3, #8]
 8007cb8:	4b54      	ldr	r3, [pc, #336]	@ (8007e0c <HAL_RCC_ClockConfig+0x23c>)
 8007cba:	689b      	ldr	r3, [r3, #8]
 8007cbc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007cc0:	429a      	cmp	r2, r3
 8007cc2:	d908      	bls.n	8007cd6 <HAL_RCC_ClockConfig+0x106>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007cc4:	4b51      	ldr	r3, [pc, #324]	@ (8007e0c <HAL_RCC_ClockConfig+0x23c>)
 8007cc6:	689b      	ldr	r3, [r3, #8]
 8007cc8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	689b      	ldr	r3, [r3, #8]
 8007cd0:	494e      	ldr	r1, [pc, #312]	@ (8007e0c <HAL_RCC_ClockConfig+0x23c>)
 8007cd2:	4313      	orrs	r3, r2
 8007cd4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f003 0301 	and.w	r3, r3, #1
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d061      	beq.n	8007da6 <HAL_RCC_ClockConfig+0x1d6>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	685b      	ldr	r3, [r3, #4]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d010      	beq.n	8007d0c <HAL_RCC_ClockConfig+0x13c>
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	685b      	ldr	r3, [r3, #4]
 8007cee:	2b01      	cmp	r3, #1
 8007cf0:	d00c      	beq.n	8007d0c <HAL_RCC_ClockConfig+0x13c>
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	685b      	ldr	r3, [r3, #4]
 8007cf6:	2b02      	cmp	r3, #2
 8007cf8:	d008      	beq.n	8007d0c <HAL_RCC_ClockConfig+0x13c>
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	685b      	ldr	r3, [r3, #4]
 8007cfe:	2b03      	cmp	r3, #3
 8007d00:	d004      	beq.n	8007d0c <HAL_RCC_ClockConfig+0x13c>
 8007d02:	f240 417d 	movw	r1, #1149	@ 0x47d
 8007d06:	483f      	ldr	r0, [pc, #252]	@ (8007e04 <HAL_RCC_ClockConfig+0x234>)
 8007d08:	f7fc ff3c 	bl	8004b84 <assert_failed>

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	685b      	ldr	r3, [r3, #4]
 8007d10:	2b03      	cmp	r3, #3
 8007d12:	d107      	bne.n	8007d24 <HAL_RCC_ClockConfig+0x154>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007d14:	4b3d      	ldr	r3, [pc, #244]	@ (8007e0c <HAL_RCC_ClockConfig+0x23c>)
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d121      	bne.n	8007d64 <HAL_RCC_ClockConfig+0x194>
      {
        return HAL_ERROR;
 8007d20:	2301      	movs	r3, #1
 8007d22:	e0e6      	b.n	8007ef2 <HAL_RCC_ClockConfig+0x322>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	685b      	ldr	r3, [r3, #4]
 8007d28:	2b02      	cmp	r3, #2
 8007d2a:	d107      	bne.n	8007d3c <HAL_RCC_ClockConfig+0x16c>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007d2c:	4b37      	ldr	r3, [pc, #220]	@ (8007e0c <HAL_RCC_ClockConfig+0x23c>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d115      	bne.n	8007d64 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_ERROR;
 8007d38:	2301      	movs	r3, #1
 8007d3a:	e0da      	b.n	8007ef2 <HAL_RCC_ClockConfig+0x322>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	685b      	ldr	r3, [r3, #4]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d107      	bne.n	8007d54 <HAL_RCC_ClockConfig+0x184>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007d44:	4b31      	ldr	r3, [pc, #196]	@ (8007e0c <HAL_RCC_ClockConfig+0x23c>)
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f003 0302 	and.w	r3, r3, #2
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d109      	bne.n	8007d64 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_ERROR;
 8007d50:	2301      	movs	r3, #1
 8007d52:	e0ce      	b.n	8007ef2 <HAL_RCC_ClockConfig+0x322>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007d54:	4b2d      	ldr	r3, [pc, #180]	@ (8007e0c <HAL_RCC_ClockConfig+0x23c>)
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d101      	bne.n	8007d64 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_ERROR;
 8007d60:	2301      	movs	r3, #1
 8007d62:	e0c6      	b.n	8007ef2 <HAL_RCC_ClockConfig+0x322>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007d64:	4b29      	ldr	r3, [pc, #164]	@ (8007e0c <HAL_RCC_ClockConfig+0x23c>)
 8007d66:	689b      	ldr	r3, [r3, #8]
 8007d68:	f023 0203 	bic.w	r2, r3, #3
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	685b      	ldr	r3, [r3, #4]
 8007d70:	4926      	ldr	r1, [pc, #152]	@ (8007e0c <HAL_RCC_ClockConfig+0x23c>)
 8007d72:	4313      	orrs	r3, r2
 8007d74:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d76:	f7fd fd2f 	bl	80057d8 <HAL_GetTick>
 8007d7a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007d7c:	e00a      	b.n	8007d94 <HAL_RCC_ClockConfig+0x1c4>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007d7e:	f7fd fd2b 	bl	80057d8 <HAL_GetTick>
 8007d82:	4602      	mov	r2, r0
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	1ad3      	subs	r3, r2, r3
 8007d88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	d901      	bls.n	8007d94 <HAL_RCC_ClockConfig+0x1c4>
      {
        return HAL_TIMEOUT;
 8007d90:	2303      	movs	r3, #3
 8007d92:	e0ae      	b.n	8007ef2 <HAL_RCC_ClockConfig+0x322>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007d94:	4b1d      	ldr	r3, [pc, #116]	@ (8007e0c <HAL_RCC_ClockConfig+0x23c>)
 8007d96:	689b      	ldr	r3, [r3, #8]
 8007d98:	f003 020c 	and.w	r2, r3, #12
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	685b      	ldr	r3, [r3, #4]
 8007da0:	009b      	lsls	r3, r3, #2
 8007da2:	429a      	cmp	r2, r3
 8007da4:	d1eb      	bne.n	8007d7e <HAL_RCC_ClockConfig+0x1ae>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f003 0302 	and.w	r3, r3, #2
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d010      	beq.n	8007dd4 <HAL_RCC_ClockConfig+0x204>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	689a      	ldr	r2, [r3, #8]
 8007db6:	4b15      	ldr	r3, [pc, #84]	@ (8007e0c <HAL_RCC_ClockConfig+0x23c>)
 8007db8:	689b      	ldr	r3, [r3, #8]
 8007dba:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007dbe:	429a      	cmp	r2, r3
 8007dc0:	d208      	bcs.n	8007dd4 <HAL_RCC_ClockConfig+0x204>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007dc2:	4b12      	ldr	r3, [pc, #72]	@ (8007e0c <HAL_RCC_ClockConfig+0x23c>)
 8007dc4:	689b      	ldr	r3, [r3, #8]
 8007dc6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	689b      	ldr	r3, [r3, #8]
 8007dce:	490f      	ldr	r1, [pc, #60]	@ (8007e0c <HAL_RCC_ClockConfig+0x23c>)
 8007dd0:	4313      	orrs	r3, r2
 8007dd2:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007dd4:	4b0c      	ldr	r3, [pc, #48]	@ (8007e08 <HAL_RCC_ClockConfig+0x238>)
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f003 0307 	and.w	r3, r3, #7
 8007ddc:	683a      	ldr	r2, [r7, #0]
 8007dde:	429a      	cmp	r2, r3
 8007de0:	d216      	bcs.n	8007e10 <HAL_RCC_ClockConfig+0x240>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007de2:	4b09      	ldr	r3, [pc, #36]	@ (8007e08 <HAL_RCC_ClockConfig+0x238>)
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f023 0207 	bic.w	r2, r3, #7
 8007dea:	4907      	ldr	r1, [pc, #28]	@ (8007e08 <HAL_RCC_ClockConfig+0x238>)
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	4313      	orrs	r3, r2
 8007df0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007df2:	4b05      	ldr	r3, [pc, #20]	@ (8007e08 <HAL_RCC_ClockConfig+0x238>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f003 0307 	and.w	r3, r3, #7
 8007dfa:	683a      	ldr	r2, [r7, #0]
 8007dfc:	429a      	cmp	r2, r3
 8007dfe:	d007      	beq.n	8007e10 <HAL_RCC_ClockConfig+0x240>
    {
      return HAL_ERROR;
 8007e00:	2301      	movs	r3, #1
 8007e02:	e076      	b.n	8007ef2 <HAL_RCC_ClockConfig+0x322>
 8007e04:	0800f988 	.word	0x0800f988
 8007e08:	40022000 	.word	0x40022000
 8007e0c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f003 0304 	and.w	r3, r3, #4
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d025      	beq.n	8007e68 <HAL_RCC_ClockConfig+0x298>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	68db      	ldr	r3, [r3, #12]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d018      	beq.n	8007e56 <HAL_RCC_ClockConfig+0x286>
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	68db      	ldr	r3, [r3, #12]
 8007e28:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007e2c:	d013      	beq.n	8007e56 <HAL_RCC_ClockConfig+0x286>
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	68db      	ldr	r3, [r3, #12]
 8007e32:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8007e36:	d00e      	beq.n	8007e56 <HAL_RCC_ClockConfig+0x286>
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	68db      	ldr	r3, [r3, #12]
 8007e3c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007e40:	d009      	beq.n	8007e56 <HAL_RCC_ClockConfig+0x286>
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	68db      	ldr	r3, [r3, #12]
 8007e46:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007e4a:	d004      	beq.n	8007e56 <HAL_RCC_ClockConfig+0x286>
 8007e4c:	f240 41f5 	movw	r1, #1269	@ 0x4f5
 8007e50:	482a      	ldr	r0, [pc, #168]	@ (8007efc <HAL_RCC_ClockConfig+0x32c>)
 8007e52:	f7fc fe97 	bl	8004b84 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007e56:	4b2a      	ldr	r3, [pc, #168]	@ (8007f00 <HAL_RCC_ClockConfig+0x330>)
 8007e58:	689b      	ldr	r3, [r3, #8]
 8007e5a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	68db      	ldr	r3, [r3, #12]
 8007e62:	4927      	ldr	r1, [pc, #156]	@ (8007f00 <HAL_RCC_ClockConfig+0x330>)
 8007e64:	4313      	orrs	r3, r2
 8007e66:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f003 0308 	and.w	r3, r3, #8
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d026      	beq.n	8007ec2 <HAL_RCC_ClockConfig+0x2f2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	691b      	ldr	r3, [r3, #16]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d018      	beq.n	8007eae <HAL_RCC_ClockConfig+0x2de>
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	691b      	ldr	r3, [r3, #16]
 8007e80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007e84:	d013      	beq.n	8007eae <HAL_RCC_ClockConfig+0x2de>
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	691b      	ldr	r3, [r3, #16]
 8007e8a:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8007e8e:	d00e      	beq.n	8007eae <HAL_RCC_ClockConfig+0x2de>
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	691b      	ldr	r3, [r3, #16]
 8007e94:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007e98:	d009      	beq.n	8007eae <HAL_RCC_ClockConfig+0x2de>
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	691b      	ldr	r3, [r3, #16]
 8007e9e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007ea2:	d004      	beq.n	8007eae <HAL_RCC_ClockConfig+0x2de>
 8007ea4:	f240 41fc 	movw	r1, #1276	@ 0x4fc
 8007ea8:	4814      	ldr	r0, [pc, #80]	@ (8007efc <HAL_RCC_ClockConfig+0x32c>)
 8007eaa:	f7fc fe6b 	bl	8004b84 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007eae:	4b14      	ldr	r3, [pc, #80]	@ (8007f00 <HAL_RCC_ClockConfig+0x330>)
 8007eb0:	689b      	ldr	r3, [r3, #8]
 8007eb2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	691b      	ldr	r3, [r3, #16]
 8007eba:	00db      	lsls	r3, r3, #3
 8007ebc:	4910      	ldr	r1, [pc, #64]	@ (8007f00 <HAL_RCC_ClockConfig+0x330>)
 8007ebe:	4313      	orrs	r3, r2
 8007ec0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007ec2:	f000 f825 	bl	8007f10 <HAL_RCC_GetSysClockFreq>
 8007ec6:	4602      	mov	r2, r0
 8007ec8:	4b0d      	ldr	r3, [pc, #52]	@ (8007f00 <HAL_RCC_ClockConfig+0x330>)
 8007eca:	689b      	ldr	r3, [r3, #8]
 8007ecc:	091b      	lsrs	r3, r3, #4
 8007ece:	f003 030f 	and.w	r3, r3, #15
 8007ed2:	490c      	ldr	r1, [pc, #48]	@ (8007f04 <HAL_RCC_ClockConfig+0x334>)
 8007ed4:	5ccb      	ldrb	r3, [r1, r3]
 8007ed6:	f003 031f 	and.w	r3, r3, #31
 8007eda:	fa22 f303 	lsr.w	r3, r2, r3
 8007ede:	4a0a      	ldr	r2, [pc, #40]	@ (8007f08 <HAL_RCC_ClockConfig+0x338>)
 8007ee0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007ee2:	4b0a      	ldr	r3, [pc, #40]	@ (8007f0c <HAL_RCC_ClockConfig+0x33c>)
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	f7fd fc26 	bl	8005738 <HAL_InitTick>
 8007eec:	4603      	mov	r3, r0
 8007eee:	72fb      	strb	r3, [r7, #11]

  return status;
 8007ef0:	7afb      	ldrb	r3, [r7, #11]
}
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	3710      	adds	r7, #16
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bd80      	pop	{r7, pc}
 8007efa:	bf00      	nop
 8007efc:	0800f988 	.word	0x0800f988
 8007f00:	40021000 	.word	0x40021000
 8007f04:	0800fb58 	.word	0x0800fb58
 8007f08:	20000014 	.word	0x20000014
 8007f0c:	20000018 	.word	0x20000018

08007f10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007f10:	b480      	push	{r7}
 8007f12:	b089      	sub	sp, #36	@ 0x24
 8007f14:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8007f16:	2300      	movs	r3, #0
 8007f18:	61fb      	str	r3, [r7, #28]
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007f1e:	4b3e      	ldr	r3, [pc, #248]	@ (8008018 <HAL_RCC_GetSysClockFreq+0x108>)
 8007f20:	689b      	ldr	r3, [r3, #8]
 8007f22:	f003 030c 	and.w	r3, r3, #12
 8007f26:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007f28:	4b3b      	ldr	r3, [pc, #236]	@ (8008018 <HAL_RCC_GetSysClockFreq+0x108>)
 8007f2a:	68db      	ldr	r3, [r3, #12]
 8007f2c:	f003 0303 	and.w	r3, r3, #3
 8007f30:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007f32:	693b      	ldr	r3, [r7, #16]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d005      	beq.n	8007f44 <HAL_RCC_GetSysClockFreq+0x34>
 8007f38:	693b      	ldr	r3, [r7, #16]
 8007f3a:	2b0c      	cmp	r3, #12
 8007f3c:	d121      	bne.n	8007f82 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	2b01      	cmp	r3, #1
 8007f42:	d11e      	bne.n	8007f82 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007f44:	4b34      	ldr	r3, [pc, #208]	@ (8008018 <HAL_RCC_GetSysClockFreq+0x108>)
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f003 0308 	and.w	r3, r3, #8
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d107      	bne.n	8007f60 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007f50:	4b31      	ldr	r3, [pc, #196]	@ (8008018 <HAL_RCC_GetSysClockFreq+0x108>)
 8007f52:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007f56:	0a1b      	lsrs	r3, r3, #8
 8007f58:	f003 030f 	and.w	r3, r3, #15
 8007f5c:	61fb      	str	r3, [r7, #28]
 8007f5e:	e005      	b.n	8007f6c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007f60:	4b2d      	ldr	r3, [pc, #180]	@ (8008018 <HAL_RCC_GetSysClockFreq+0x108>)
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	091b      	lsrs	r3, r3, #4
 8007f66:	f003 030f 	and.w	r3, r3, #15
 8007f6a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007f6c:	4a2b      	ldr	r2, [pc, #172]	@ (800801c <HAL_RCC_GetSysClockFreq+0x10c>)
 8007f6e:	69fb      	ldr	r3, [r7, #28]
 8007f70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f74:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007f76:	693b      	ldr	r3, [r7, #16]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d10d      	bne.n	8007f98 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007f7c:	69fb      	ldr	r3, [r7, #28]
 8007f7e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007f80:	e00a      	b.n	8007f98 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8007f82:	693b      	ldr	r3, [r7, #16]
 8007f84:	2b04      	cmp	r3, #4
 8007f86:	d102      	bne.n	8007f8e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007f88:	4b25      	ldr	r3, [pc, #148]	@ (8008020 <HAL_RCC_GetSysClockFreq+0x110>)
 8007f8a:	61bb      	str	r3, [r7, #24]
 8007f8c:	e004      	b.n	8007f98 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8007f8e:	693b      	ldr	r3, [r7, #16]
 8007f90:	2b08      	cmp	r3, #8
 8007f92:	d101      	bne.n	8007f98 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007f94:	4b23      	ldr	r3, [pc, #140]	@ (8008024 <HAL_RCC_GetSysClockFreq+0x114>)
 8007f96:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8007f98:	693b      	ldr	r3, [r7, #16]
 8007f9a:	2b0c      	cmp	r3, #12
 8007f9c:	d134      	bne.n	8008008 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007f9e:	4b1e      	ldr	r3, [pc, #120]	@ (8008018 <HAL_RCC_GetSysClockFreq+0x108>)
 8007fa0:	68db      	ldr	r3, [r3, #12]
 8007fa2:	f003 0303 	and.w	r3, r3, #3
 8007fa6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007fa8:	68bb      	ldr	r3, [r7, #8]
 8007faa:	2b02      	cmp	r3, #2
 8007fac:	d003      	beq.n	8007fb6 <HAL_RCC_GetSysClockFreq+0xa6>
 8007fae:	68bb      	ldr	r3, [r7, #8]
 8007fb0:	2b03      	cmp	r3, #3
 8007fb2:	d003      	beq.n	8007fbc <HAL_RCC_GetSysClockFreq+0xac>
 8007fb4:	e005      	b.n	8007fc2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8007fb6:	4b1a      	ldr	r3, [pc, #104]	@ (8008020 <HAL_RCC_GetSysClockFreq+0x110>)
 8007fb8:	617b      	str	r3, [r7, #20]
      break;
 8007fba:	e005      	b.n	8007fc8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8007fbc:	4b19      	ldr	r3, [pc, #100]	@ (8008024 <HAL_RCC_GetSysClockFreq+0x114>)
 8007fbe:	617b      	str	r3, [r7, #20]
      break;
 8007fc0:	e002      	b.n	8007fc8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8007fc2:	69fb      	ldr	r3, [r7, #28]
 8007fc4:	617b      	str	r3, [r7, #20]
      break;
 8007fc6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007fc8:	4b13      	ldr	r3, [pc, #76]	@ (8008018 <HAL_RCC_GetSysClockFreq+0x108>)
 8007fca:	68db      	ldr	r3, [r3, #12]
 8007fcc:	091b      	lsrs	r3, r3, #4
 8007fce:	f003 0307 	and.w	r3, r3, #7
 8007fd2:	3301      	adds	r3, #1
 8007fd4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8007fd6:	4b10      	ldr	r3, [pc, #64]	@ (8008018 <HAL_RCC_GetSysClockFreq+0x108>)
 8007fd8:	68db      	ldr	r3, [r3, #12]
 8007fda:	0a1b      	lsrs	r3, r3, #8
 8007fdc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007fe0:	697a      	ldr	r2, [r7, #20]
 8007fe2:	fb03 f202 	mul.w	r2, r3, r2
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fec:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007fee:	4b0a      	ldr	r3, [pc, #40]	@ (8008018 <HAL_RCC_GetSysClockFreq+0x108>)
 8007ff0:	68db      	ldr	r3, [r3, #12]
 8007ff2:	0e5b      	lsrs	r3, r3, #25
 8007ff4:	f003 0303 	and.w	r3, r3, #3
 8007ff8:	3301      	adds	r3, #1
 8007ffa:	005b      	lsls	r3, r3, #1
 8007ffc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8007ffe:	697a      	ldr	r2, [r7, #20]
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	fbb2 f3f3 	udiv	r3, r2, r3
 8008006:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8008008:	69bb      	ldr	r3, [r7, #24]
}
 800800a:	4618      	mov	r0, r3
 800800c:	3724      	adds	r7, #36	@ 0x24
 800800e:	46bd      	mov	sp, r7
 8008010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008014:	4770      	bx	lr
 8008016:	bf00      	nop
 8008018:	40021000 	.word	0x40021000
 800801c:	0800fb70 	.word	0x0800fb70
 8008020:	00f42400 	.word	0x00f42400
 8008024:	007a1200 	.word	0x007a1200

08008028 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008028:	b480      	push	{r7}
 800802a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800802c:	4b03      	ldr	r3, [pc, #12]	@ (800803c <HAL_RCC_GetHCLKFreq+0x14>)
 800802e:	681b      	ldr	r3, [r3, #0]
}
 8008030:	4618      	mov	r0, r3
 8008032:	46bd      	mov	sp, r7
 8008034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008038:	4770      	bx	lr
 800803a:	bf00      	nop
 800803c:	20000014 	.word	0x20000014

08008040 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008044:	f7ff fff0 	bl	8008028 <HAL_RCC_GetHCLKFreq>
 8008048:	4602      	mov	r2, r0
 800804a:	4b06      	ldr	r3, [pc, #24]	@ (8008064 <HAL_RCC_GetPCLK1Freq+0x24>)
 800804c:	689b      	ldr	r3, [r3, #8]
 800804e:	0a1b      	lsrs	r3, r3, #8
 8008050:	f003 0307 	and.w	r3, r3, #7
 8008054:	4904      	ldr	r1, [pc, #16]	@ (8008068 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008056:	5ccb      	ldrb	r3, [r1, r3]
 8008058:	f003 031f 	and.w	r3, r3, #31
 800805c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008060:	4618      	mov	r0, r3
 8008062:	bd80      	pop	{r7, pc}
 8008064:	40021000 	.word	0x40021000
 8008068:	0800fb68 	.word	0x0800fb68

0800806c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8008070:	f7ff ffda 	bl	8008028 <HAL_RCC_GetHCLKFreq>
 8008074:	4602      	mov	r2, r0
 8008076:	4b06      	ldr	r3, [pc, #24]	@ (8008090 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008078:	689b      	ldr	r3, [r3, #8]
 800807a:	0adb      	lsrs	r3, r3, #11
 800807c:	f003 0307 	and.w	r3, r3, #7
 8008080:	4904      	ldr	r1, [pc, #16]	@ (8008094 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008082:	5ccb      	ldrb	r3, [r1, r3]
 8008084:	f003 031f 	and.w	r3, r3, #31
 8008088:	fa22 f303 	lsr.w	r3, r2, r3
}
 800808c:	4618      	mov	r0, r3
 800808e:	bd80      	pop	{r7, pc}
 8008090:	40021000 	.word	0x40021000
 8008094:	0800fb68 	.word	0x0800fb68

08008098 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b086      	sub	sp, #24
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80080a0:	2300      	movs	r3, #0
 80080a2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80080a4:	4b2a      	ldr	r3, [pc, #168]	@ (8008150 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80080a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80080a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d003      	beq.n	80080b8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80080b0:	f7ff f81c 	bl	80070ec <HAL_PWREx_GetVoltageRange>
 80080b4:	6178      	str	r0, [r7, #20]
 80080b6:	e014      	b.n	80080e2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80080b8:	4b25      	ldr	r3, [pc, #148]	@ (8008150 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80080ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80080bc:	4a24      	ldr	r2, [pc, #144]	@ (8008150 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80080be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80080c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80080c4:	4b22      	ldr	r3, [pc, #136]	@ (8008150 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80080c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80080c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80080cc:	60fb      	str	r3, [r7, #12]
 80080ce:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80080d0:	f7ff f80c 	bl	80070ec <HAL_PWREx_GetVoltageRange>
 80080d4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80080d6:	4b1e      	ldr	r3, [pc, #120]	@ (8008150 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80080d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80080da:	4a1d      	ldr	r2, [pc, #116]	@ (8008150 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80080dc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80080e0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80080e2:	697b      	ldr	r3, [r7, #20]
 80080e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80080e8:	d10b      	bne.n	8008102 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2b80      	cmp	r3, #128	@ 0x80
 80080ee:	d919      	bls.n	8008124 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2ba0      	cmp	r3, #160	@ 0xa0
 80080f4:	d902      	bls.n	80080fc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80080f6:	2302      	movs	r3, #2
 80080f8:	613b      	str	r3, [r7, #16]
 80080fa:	e013      	b.n	8008124 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80080fc:	2301      	movs	r3, #1
 80080fe:	613b      	str	r3, [r7, #16]
 8008100:	e010      	b.n	8008124 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2b80      	cmp	r3, #128	@ 0x80
 8008106:	d902      	bls.n	800810e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8008108:	2303      	movs	r3, #3
 800810a:	613b      	str	r3, [r7, #16]
 800810c:	e00a      	b.n	8008124 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2b80      	cmp	r3, #128	@ 0x80
 8008112:	d102      	bne.n	800811a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008114:	2302      	movs	r3, #2
 8008116:	613b      	str	r3, [r7, #16]
 8008118:	e004      	b.n	8008124 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2b70      	cmp	r3, #112	@ 0x70
 800811e:	d101      	bne.n	8008124 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008120:	2301      	movs	r3, #1
 8008122:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8008124:	4b0b      	ldr	r3, [pc, #44]	@ (8008154 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f023 0207 	bic.w	r2, r3, #7
 800812c:	4909      	ldr	r1, [pc, #36]	@ (8008154 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800812e:	693b      	ldr	r3, [r7, #16]
 8008130:	4313      	orrs	r3, r2
 8008132:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8008134:	4b07      	ldr	r3, [pc, #28]	@ (8008154 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f003 0307 	and.w	r3, r3, #7
 800813c:	693a      	ldr	r2, [r7, #16]
 800813e:	429a      	cmp	r2, r3
 8008140:	d001      	beq.n	8008146 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8008142:	2301      	movs	r3, #1
 8008144:	e000      	b.n	8008148 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8008146:	2300      	movs	r3, #0
}
 8008148:	4618      	mov	r0, r3
 800814a:	3718      	adds	r7, #24
 800814c:	46bd      	mov	sp, r7
 800814e:	bd80      	pop	{r7, pc}
 8008150:	40021000 	.word	0x40021000
 8008154:	40022000 	.word	0x40022000

08008158 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b086      	sub	sp, #24
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008160:	2300      	movs	r3, #0
 8008162:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008164:	2300      	movs	r3, #0
 8008166:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008170:	2b00      	cmp	r3, #0
 8008172:	d004      	beq.n	800817e <HAL_RCCEx_PeriphCLKConfig+0x26>
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800817c:	d303      	bcc.n	8008186 <HAL_RCCEx_PeriphCLKConfig+0x2e>
 800817e:	21c9      	movs	r1, #201	@ 0xc9
 8008180:	4889      	ldr	r0, [pc, #548]	@ (80083a8 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8008182:	f7fc fcff 	bl	8004b84 <assert_failed>

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800818e:	2b00      	cmp	r3, #0
 8008190:	d058      	beq.n	8008244 <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008196:	2b00      	cmp	r3, #0
 8008198:	d012      	beq.n	80081c0 <HAL_RCCEx_PeriphCLKConfig+0x68>
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800819e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80081a2:	d00d      	beq.n	80081c0 <HAL_RCCEx_PeriphCLKConfig+0x68>
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80081a8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80081ac:	d008      	beq.n	80081c0 <HAL_RCCEx_PeriphCLKConfig+0x68>
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80081b2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80081b6:	d003      	beq.n	80081c0 <HAL_RCCEx_PeriphCLKConfig+0x68>
 80081b8:	21d1      	movs	r1, #209	@ 0xd1
 80081ba:	487b      	ldr	r0, [pc, #492]	@ (80083a8 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80081bc:	f7fc fce2 	bl	8004b84 <assert_failed>

    switch(PeriphClkInit->Sai1ClockSelection)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80081c4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80081c8:	d02a      	beq.n	8008220 <HAL_RCCEx_PeriphCLKConfig+0xc8>
 80081ca:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80081ce:	d824      	bhi.n	800821a <HAL_RCCEx_PeriphCLKConfig+0xc2>
 80081d0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80081d4:	d008      	beq.n	80081e8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80081d6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80081da:	d81e      	bhi.n	800821a <HAL_RCCEx_PeriphCLKConfig+0xc2>
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d00a      	beq.n	80081f6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 80081e0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80081e4:	d010      	beq.n	8008208 <HAL_RCCEx_PeriphCLKConfig+0xb0>
 80081e6:	e018      	b.n	800821a <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80081e8:	4b70      	ldr	r3, [pc, #448]	@ (80083ac <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80081ea:	68db      	ldr	r3, [r3, #12]
 80081ec:	4a6f      	ldr	r2, [pc, #444]	@ (80083ac <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80081ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80081f2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80081f4:	e015      	b.n	8008222 <HAL_RCCEx_PeriphCLKConfig+0xca>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	3304      	adds	r3, #4
 80081fa:	2100      	movs	r1, #0
 80081fc:	4618      	mov	r0, r3
 80081fe:	f000 fc69 	bl	8008ad4 <RCCEx_PLLSAI1_Config>
 8008202:	4603      	mov	r3, r0
 8008204:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008206:	e00c      	b.n	8008222 <HAL_RCCEx_PeriphCLKConfig+0xca>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	3320      	adds	r3, #32
 800820c:	2100      	movs	r1, #0
 800820e:	4618      	mov	r0, r3
 8008210:	f000 fde0 	bl	8008dd4 <RCCEx_PLLSAI2_Config>
 8008214:	4603      	mov	r3, r0
 8008216:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008218:	e003      	b.n	8008222 <HAL_RCCEx_PeriphCLKConfig+0xca>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800821a:	2301      	movs	r3, #1
 800821c:	74fb      	strb	r3, [r7, #19]
      break;
 800821e:	e000      	b.n	8008222 <HAL_RCCEx_PeriphCLKConfig+0xca>
      break;
 8008220:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008222:	7cfb      	ldrb	r3, [r7, #19]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d10b      	bne.n	8008240 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008228:	4b60      	ldr	r3, [pc, #384]	@ (80083ac <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800822a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800822e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008236:	495d      	ldr	r1, [pc, #372]	@ (80083ac <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8008238:	4313      	orrs	r3, r2
 800823a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800823e:	e001      	b.n	8008244 <HAL_RCCEx_PeriphCLKConfig+0xec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008240:	7cfb      	ldrb	r3, [r7, #19]
 8008242:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800824c:	2b00      	cmp	r3, #0
 800824e:	d059      	beq.n	8008304 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008254:	2b00      	cmp	r3, #0
 8008256:	d013      	beq.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0x128>
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800825c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008260:	d00e      	beq.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0x128>
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008266:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800826a:	d009      	beq.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0x128>
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008270:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008274:	d004      	beq.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0x128>
 8008276:	f240 110f 	movw	r1, #271	@ 0x10f
 800827a:	484b      	ldr	r0, [pc, #300]	@ (80083a8 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800827c:	f7fc fc82 	bl	8004b84 <assert_failed>

    switch(PeriphClkInit->Sai2ClockSelection)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008284:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008288:	d02a      	beq.n	80082e0 <HAL_RCCEx_PeriphCLKConfig+0x188>
 800828a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800828e:	d824      	bhi.n	80082da <HAL_RCCEx_PeriphCLKConfig+0x182>
 8008290:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008294:	d008      	beq.n	80082a8 <HAL_RCCEx_PeriphCLKConfig+0x150>
 8008296:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800829a:	d81e      	bhi.n	80082da <HAL_RCCEx_PeriphCLKConfig+0x182>
 800829c:	2b00      	cmp	r3, #0
 800829e:	d00a      	beq.n	80082b6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80082a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80082a4:	d010      	beq.n	80082c8 <HAL_RCCEx_PeriphCLKConfig+0x170>
 80082a6:	e018      	b.n	80082da <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80082a8:	4b40      	ldr	r3, [pc, #256]	@ (80083ac <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80082aa:	68db      	ldr	r3, [r3, #12]
 80082ac:	4a3f      	ldr	r2, [pc, #252]	@ (80083ac <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80082ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80082b2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80082b4:	e015      	b.n	80082e2 <HAL_RCCEx_PeriphCLKConfig+0x18a>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	3304      	adds	r3, #4
 80082ba:	2100      	movs	r1, #0
 80082bc:	4618      	mov	r0, r3
 80082be:	f000 fc09 	bl	8008ad4 <RCCEx_PLLSAI1_Config>
 80082c2:	4603      	mov	r3, r0
 80082c4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80082c6:	e00c      	b.n	80082e2 <HAL_RCCEx_PeriphCLKConfig+0x18a>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	3320      	adds	r3, #32
 80082cc:	2100      	movs	r1, #0
 80082ce:	4618      	mov	r0, r3
 80082d0:	f000 fd80 	bl	8008dd4 <RCCEx_PLLSAI2_Config>
 80082d4:	4603      	mov	r3, r0
 80082d6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80082d8:	e003      	b.n	80082e2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80082da:	2301      	movs	r3, #1
 80082dc:	74fb      	strb	r3, [r7, #19]
      break;
 80082de:	e000      	b.n	80082e2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
      break;
 80082e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80082e2:	7cfb      	ldrb	r3, [r7, #19]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d10b      	bne.n	8008300 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80082e8:	4b30      	ldr	r3, [pc, #192]	@ (80083ac <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80082ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80082ee:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80082f6:	492d      	ldr	r1, [pc, #180]	@ (80083ac <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80082f8:	4313      	orrs	r3, r2
 80082fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80082fe:	e001      	b.n	8008304 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008300:	7cfb      	ldrb	r3, [r7, #19]
 8008302:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800830c:	2b00      	cmp	r3, #0
 800830e:	f000 80c2 	beq.w	8008496 <HAL_RCCEx_PeriphCLKConfig+0x33e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008312:	2300      	movs	r3, #0
 8008314:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800831c:	2b00      	cmp	r3, #0
 800831e:	d016      	beq.n	800834e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008326:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800832a:	d010      	beq.n	800834e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008332:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008336:	d00a      	beq.n	800834e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800833e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008342:	d004      	beq.n	800834e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8008344:	f44f 71a2 	mov.w	r1, #324	@ 0x144
 8008348:	4817      	ldr	r0, [pc, #92]	@ (80083a8 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800834a:	f7fc fc1b 	bl	8004b84 <assert_failed>

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800834e:	4b17      	ldr	r3, [pc, #92]	@ (80083ac <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8008350:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008352:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008356:	2b00      	cmp	r3, #0
 8008358:	d101      	bne.n	800835e <HAL_RCCEx_PeriphCLKConfig+0x206>
 800835a:	2301      	movs	r3, #1
 800835c:	e000      	b.n	8008360 <HAL_RCCEx_PeriphCLKConfig+0x208>
 800835e:	2300      	movs	r3, #0
 8008360:	2b00      	cmp	r3, #0
 8008362:	d00d      	beq.n	8008380 <HAL_RCCEx_PeriphCLKConfig+0x228>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008364:	4b11      	ldr	r3, [pc, #68]	@ (80083ac <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8008366:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008368:	4a10      	ldr	r2, [pc, #64]	@ (80083ac <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800836a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800836e:	6593      	str	r3, [r2, #88]	@ 0x58
 8008370:	4b0e      	ldr	r3, [pc, #56]	@ (80083ac <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8008372:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008374:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008378:	60bb      	str	r3, [r7, #8]
 800837a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800837c:	2301      	movs	r3, #1
 800837e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008380:	4b0b      	ldr	r3, [pc, #44]	@ (80083b0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	4a0a      	ldr	r2, [pc, #40]	@ (80083b0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8008386:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800838a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800838c:	f7fd fa24 	bl	80057d8 <HAL_GetTick>
 8008390:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008392:	e00f      	b.n	80083b4 <HAL_RCCEx_PeriphCLKConfig+0x25c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008394:	f7fd fa20 	bl	80057d8 <HAL_GetTick>
 8008398:	4602      	mov	r2, r0
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	1ad3      	subs	r3, r2, r3
 800839e:	2b02      	cmp	r3, #2
 80083a0:	d908      	bls.n	80083b4 <HAL_RCCEx_PeriphCLKConfig+0x25c>
      {
        ret = HAL_TIMEOUT;
 80083a2:	2303      	movs	r3, #3
 80083a4:	74fb      	strb	r3, [r7, #19]
        break;
 80083a6:	e00b      	b.n	80083c0 <HAL_RCCEx_PeriphCLKConfig+0x268>
 80083a8:	0800f9c0 	.word	0x0800f9c0
 80083ac:	40021000 	.word	0x40021000
 80083b0:	40007000 	.word	0x40007000
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80083b4:	4b30      	ldr	r3, [pc, #192]	@ (8008478 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d0e9      	beq.n	8008394 <HAL_RCCEx_PeriphCLKConfig+0x23c>
      }
    }

    if(ret == HAL_OK)
 80083c0:	7cfb      	ldrb	r3, [r7, #19]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d15c      	bne.n	8008480 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80083c6:	4b2d      	ldr	r3, [pc, #180]	@ (800847c <HAL_RCCEx_PeriphCLKConfig+0x324>)
 80083c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80083cc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80083d0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80083d2:	697b      	ldr	r3, [r7, #20]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d01f      	beq.n	8008418 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80083de:	697a      	ldr	r2, [r7, #20]
 80083e0:	429a      	cmp	r2, r3
 80083e2:	d019      	beq.n	8008418 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80083e4:	4b25      	ldr	r3, [pc, #148]	@ (800847c <HAL_RCCEx_PeriphCLKConfig+0x324>)
 80083e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80083ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80083ee:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80083f0:	4b22      	ldr	r3, [pc, #136]	@ (800847c <HAL_RCCEx_PeriphCLKConfig+0x324>)
 80083f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80083f6:	4a21      	ldr	r2, [pc, #132]	@ (800847c <HAL_RCCEx_PeriphCLKConfig+0x324>)
 80083f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80083fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008400:	4b1e      	ldr	r3, [pc, #120]	@ (800847c <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8008402:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008406:	4a1d      	ldr	r2, [pc, #116]	@ (800847c <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8008408:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800840c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008410:	4a1a      	ldr	r2, [pc, #104]	@ (800847c <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8008412:	697b      	ldr	r3, [r7, #20]
 8008414:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008418:	697b      	ldr	r3, [r7, #20]
 800841a:	f003 0301 	and.w	r3, r3, #1
 800841e:	2b00      	cmp	r3, #0
 8008420:	d016      	beq.n	8008450 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008422:	f7fd f9d9 	bl	80057d8 <HAL_GetTick>
 8008426:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008428:	e00b      	b.n	8008442 <HAL_RCCEx_PeriphCLKConfig+0x2ea>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800842a:	f7fd f9d5 	bl	80057d8 <HAL_GetTick>
 800842e:	4602      	mov	r2, r0
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	1ad3      	subs	r3, r2, r3
 8008434:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008438:	4293      	cmp	r3, r2
 800843a:	d902      	bls.n	8008442 <HAL_RCCEx_PeriphCLKConfig+0x2ea>
          {
            ret = HAL_TIMEOUT;
 800843c:	2303      	movs	r3, #3
 800843e:	74fb      	strb	r3, [r7, #19]
            break;
 8008440:	e006      	b.n	8008450 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008442:	4b0e      	ldr	r3, [pc, #56]	@ (800847c <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8008444:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008448:	f003 0302 	and.w	r3, r3, #2
 800844c:	2b00      	cmp	r3, #0
 800844e:	d0ec      	beq.n	800842a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
          }
        }
      }

      if(ret == HAL_OK)
 8008450:	7cfb      	ldrb	r3, [r7, #19]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d10c      	bne.n	8008470 <HAL_RCCEx_PeriphCLKConfig+0x318>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008456:	4b09      	ldr	r3, [pc, #36]	@ (800847c <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8008458:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800845c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008466:	4905      	ldr	r1, [pc, #20]	@ (800847c <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8008468:	4313      	orrs	r3, r2
 800846a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800846e:	e009      	b.n	8008484 <HAL_RCCEx_PeriphCLKConfig+0x32c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008470:	7cfb      	ldrb	r3, [r7, #19]
 8008472:	74bb      	strb	r3, [r7, #18]
 8008474:	e006      	b.n	8008484 <HAL_RCCEx_PeriphCLKConfig+0x32c>
 8008476:	bf00      	nop
 8008478:	40007000 	.word	0x40007000
 800847c:	40021000 	.word	0x40021000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008480:	7cfb      	ldrb	r3, [r7, #19]
 8008482:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008484:	7c7b      	ldrb	r3, [r7, #17]
 8008486:	2b01      	cmp	r3, #1
 8008488:	d105      	bne.n	8008496 <HAL_RCCEx_PeriphCLKConfig+0x33e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800848a:	4b8d      	ldr	r3, [pc, #564]	@ (80086c0 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 800848c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800848e:	4a8c      	ldr	r2, [pc, #560]	@ (80086c0 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8008490:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008494:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f003 0301 	and.w	r3, r3, #1
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d01f      	beq.n	80084e2 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d010      	beq.n	80084cc <HAL_RCCEx_PeriphCLKConfig+0x374>
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084ae:	2b01      	cmp	r3, #1
 80084b0:	d00c      	beq.n	80084cc <HAL_RCCEx_PeriphCLKConfig+0x374>
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084b6:	2b03      	cmp	r3, #3
 80084b8:	d008      	beq.n	80084cc <HAL_RCCEx_PeriphCLKConfig+0x374>
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084be:	2b02      	cmp	r3, #2
 80084c0:	d004      	beq.n	80084cc <HAL_RCCEx_PeriphCLKConfig+0x374>
 80084c2:	f240 1199 	movw	r1, #409	@ 0x199
 80084c6:	487f      	ldr	r0, [pc, #508]	@ (80086c4 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 80084c8:	f7fc fb5c 	bl	8004b84 <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80084cc:	4b7c      	ldr	r3, [pc, #496]	@ (80086c0 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 80084ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80084d2:	f023 0203 	bic.w	r2, r3, #3
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084da:	4979      	ldr	r1, [pc, #484]	@ (80086c0 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 80084dc:	4313      	orrs	r3, r2
 80084de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	f003 0302 	and.w	r3, r3, #2
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d01f      	beq.n	800852e <HAL_RCCEx_PeriphCLKConfig+0x3d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d010      	beq.n	8008518 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80084fa:	2b04      	cmp	r3, #4
 80084fc:	d00c      	beq.n	8008518 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008502:	2b0c      	cmp	r3, #12
 8008504:	d008      	beq.n	8008518 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800850a:	2b08      	cmp	r3, #8
 800850c:	d004      	beq.n	8008518 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 800850e:	f240 11a3 	movw	r1, #419	@ 0x1a3
 8008512:	486c      	ldr	r0, [pc, #432]	@ (80086c4 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 8008514:	f7fc fb36 	bl	8004b84 <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008518:	4b69      	ldr	r3, [pc, #420]	@ (80086c0 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 800851a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800851e:	f023 020c 	bic.w	r2, r3, #12
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008526:	4966      	ldr	r1, [pc, #408]	@ (80086c0 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8008528:	4313      	orrs	r3, r2
 800852a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	f003 0304 	and.w	r3, r3, #4
 8008536:	2b00      	cmp	r3, #0
 8008538:	d01f      	beq.n	800857a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800853e:	2b00      	cmp	r3, #0
 8008540:	d010      	beq.n	8008564 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008546:	2b10      	cmp	r3, #16
 8008548:	d00c      	beq.n	8008564 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800854e:	2b30      	cmp	r3, #48	@ 0x30
 8008550:	d008      	beq.n	8008564 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008556:	2b20      	cmp	r3, #32
 8008558:	d004      	beq.n	8008564 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 800855a:	f240 11af 	movw	r1, #431	@ 0x1af
 800855e:	4859      	ldr	r0, [pc, #356]	@ (80086c4 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 8008560:	f7fc fb10 	bl	8004b84 <assert_failed>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008564:	4b56      	ldr	r3, [pc, #344]	@ (80086c0 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8008566:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800856a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008572:	4953      	ldr	r1, [pc, #332]	@ (80086c0 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8008574:	4313      	orrs	r3, r2
 8008576:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	f003 0308 	and.w	r3, r3, #8
 8008582:	2b00      	cmp	r3, #0
 8008584:	d01f      	beq.n	80085c6 <HAL_RCCEx_PeriphCLKConfig+0x46e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800858a:	2b00      	cmp	r3, #0
 800858c:	d010      	beq.n	80085b0 <HAL_RCCEx_PeriphCLKConfig+0x458>
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008592:	2b40      	cmp	r3, #64	@ 0x40
 8008594:	d00c      	beq.n	80085b0 <HAL_RCCEx_PeriphCLKConfig+0x458>
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800859a:	2bc0      	cmp	r3, #192	@ 0xc0
 800859c:	d008      	beq.n	80085b0 <HAL_RCCEx_PeriphCLKConfig+0x458>
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085a2:	2b80      	cmp	r3, #128	@ 0x80
 80085a4:	d004      	beq.n	80085b0 <HAL_RCCEx_PeriphCLKConfig+0x458>
 80085a6:	f240 11bd 	movw	r1, #445	@ 0x1bd
 80085aa:	4846      	ldr	r0, [pc, #280]	@ (80086c4 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 80085ac:	f7fc faea 	bl	8004b84 <assert_failed>

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80085b0:	4b43      	ldr	r3, [pc, #268]	@ (80086c0 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 80085b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80085b6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085be:	4940      	ldr	r1, [pc, #256]	@ (80086c0 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 80085c0:	4313      	orrs	r3, r2
 80085c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	f003 0310 	and.w	r3, r3, #16
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d022      	beq.n	8008618 <HAL_RCCEx_PeriphCLKConfig+0x4c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d013      	beq.n	8008602 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80085de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80085e2:	d00e      	beq.n	8008602 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80085e8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80085ec:	d009      	beq.n	8008602 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80085f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80085f6:	d004      	beq.n	8008602 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 80085f8:	f240 11cb 	movw	r1, #459	@ 0x1cb
 80085fc:	4831      	ldr	r0, [pc, #196]	@ (80086c4 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 80085fe:	f7fc fac1 	bl	8004b84 <assert_failed>

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008602:	4b2f      	ldr	r3, [pc, #188]	@ (80086c0 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8008604:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008608:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008610:	492b      	ldr	r1, [pc, #172]	@ (80086c0 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8008612:	4313      	orrs	r3, r2
 8008614:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	f003 0320 	and.w	r3, r3, #32
 8008620:	2b00      	cmp	r3, #0
 8008622:	d022      	beq.n	800866a <HAL_RCCEx_PeriphCLKConfig+0x512>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008628:	2b00      	cmp	r3, #0
 800862a:	d013      	beq.n	8008654 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008630:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008634:	d00e      	beq.n	8008654 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800863a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800863e:	d009      	beq.n	8008654 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008644:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008648:	d004      	beq.n	8008654 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
 800864a:	f240 11d7 	movw	r1, #471	@ 0x1d7
 800864e:	481d      	ldr	r0, [pc, #116]	@ (80086c4 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 8008650:	f7fc fa98 	bl	8004b84 <assert_failed>

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008654:	4b1a      	ldr	r3, [pc, #104]	@ (80086c0 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8008656:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800865a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008662:	4917      	ldr	r1, [pc, #92]	@ (80086c0 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8008664:	4313      	orrs	r3, r2
 8008666:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008672:	2b00      	cmp	r3, #0
 8008674:	d028      	beq.n	80086c8 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800867a:	2b00      	cmp	r3, #0
 800867c:	d013      	beq.n	80086a6 <HAL_RCCEx_PeriphCLKConfig+0x54e>
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008682:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008686:	d00e      	beq.n	80086a6 <HAL_RCCEx_PeriphCLKConfig+0x54e>
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800868c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8008690:	d009      	beq.n	80086a6 <HAL_RCCEx_PeriphCLKConfig+0x54e>
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008696:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800869a:	d004      	beq.n	80086a6 <HAL_RCCEx_PeriphCLKConfig+0x54e>
 800869c:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 80086a0:	4808      	ldr	r0, [pc, #32]	@ (80086c4 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 80086a2:	f7fc fa6f 	bl	8004b84 <assert_failed>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80086a6:	4b06      	ldr	r3, [pc, #24]	@ (80086c0 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 80086a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80086ac:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80086b4:	4902      	ldr	r1, [pc, #8]	@ (80086c0 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 80086b6:	4313      	orrs	r3, r2
 80086b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80086bc:	e004      	b.n	80086c8 <HAL_RCCEx_PeriphCLKConfig+0x570>
 80086be:	bf00      	nop
 80086c0:	40021000 	.word	0x40021000
 80086c4:	0800f9c0 	.word	0x0800f9c0
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d022      	beq.n	800871a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d013      	beq.n	8008704 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80086e0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80086e4:	d00e      	beq.n	8008704 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80086ea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80086ee:	d009      	beq.n	8008704 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80086f4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80086f8:	d004      	beq.n	8008704 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80086fa:	f240 11e7 	movw	r1, #487	@ 0x1e7
 80086fe:	489e      	ldr	r0, [pc, #632]	@ (8008978 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 8008700:	f7fc fa40 	bl	8004b84 <assert_failed>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008704:	4b9d      	ldr	r3, [pc, #628]	@ (800897c <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8008706:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800870a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008712:	499a      	ldr	r1, [pc, #616]	@ (800897c <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8008714:	4313      	orrs	r3, r2
 8008716:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008722:	2b00      	cmp	r3, #0
 8008724:	d01d      	beq.n	8008762 <HAL_RCCEx_PeriphCLKConfig+0x60a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800872a:	2b00      	cmp	r3, #0
 800872c:	d00e      	beq.n	800874c <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008732:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008736:	d009      	beq.n	800874c <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800873c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008740:	d004      	beq.n	800874c <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 8008742:	f240 11ef 	movw	r1, #495	@ 0x1ef
 8008746:	488c      	ldr	r0, [pc, #560]	@ (8008978 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 8008748:	f7fc fa1c 	bl	8004b84 <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800874c:	4b8b      	ldr	r3, [pc, #556]	@ (800897c <HAL_RCCEx_PeriphCLKConfig+0x824>)
 800874e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008752:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800875a:	4988      	ldr	r1, [pc, #544]	@ (800897c <HAL_RCCEx_PeriphCLKConfig+0x824>)
 800875c:	4313      	orrs	r3, r2
 800875e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800876a:	2b00      	cmp	r3, #0
 800876c:	d01d      	beq.n	80087aa <HAL_RCCEx_PeriphCLKConfig+0x652>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008772:	2b00      	cmp	r3, #0
 8008774:	d00e      	beq.n	8008794 <HAL_RCCEx_PeriphCLKConfig+0x63c>
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800877a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800877e:	d009      	beq.n	8008794 <HAL_RCCEx_PeriphCLKConfig+0x63c>
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008784:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008788:	d004      	beq.n	8008794 <HAL_RCCEx_PeriphCLKConfig+0x63c>
 800878a:	f240 11fb 	movw	r1, #507	@ 0x1fb
 800878e:	487a      	ldr	r0, [pc, #488]	@ (8008978 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 8008790:	f7fc f9f8 	bl	8004b84 <assert_failed>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008794:	4b79      	ldr	r3, [pc, #484]	@ (800897c <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8008796:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800879a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80087a2:	4976      	ldr	r1, [pc, #472]	@ (800897c <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80087a4:	4313      	orrs	r3, r2
 80087a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d01d      	beq.n	80087f2 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d00e      	beq.n	80087dc <HAL_RCCEx_PeriphCLKConfig+0x684>
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80087c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80087c6:	d009      	beq.n	80087dc <HAL_RCCEx_PeriphCLKConfig+0x684>
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80087cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80087d0:	d004      	beq.n	80087dc <HAL_RCCEx_PeriphCLKConfig+0x684>
 80087d2:	f240 2107 	movw	r1, #519	@ 0x207
 80087d6:	4868      	ldr	r0, [pc, #416]	@ (8008978 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 80087d8:	f7fc f9d4 	bl	8004b84 <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80087dc:	4b67      	ldr	r3, [pc, #412]	@ (800897c <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80087de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80087e2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80087ea:	4964      	ldr	r1, [pc, #400]	@ (800897c <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80087ec:	4313      	orrs	r3, r2
 80087ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d040      	beq.n	8008880 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008802:	2b00      	cmp	r3, #0
 8008804:	d013      	beq.n	800882e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800880a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800880e:	d00e      	beq.n	800882e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008814:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008818:	d009      	beq.n	800882e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800881e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8008822:	d004      	beq.n	800882e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8008824:	f44f 7108 	mov.w	r1, #544	@ 0x220
 8008828:	4853      	ldr	r0, [pc, #332]	@ (8008978 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 800882a:	f7fc f9ab 	bl	8004b84 <assert_failed>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800882e:	4b53      	ldr	r3, [pc, #332]	@ (800897c <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8008830:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008834:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800883c:	494f      	ldr	r1, [pc, #316]	@ (800897c <HAL_RCCEx_PeriphCLKConfig+0x824>)
 800883e:	4313      	orrs	r3, r2
 8008840:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008848:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800884c:	d106      	bne.n	800885c <HAL_RCCEx_PeriphCLKConfig+0x704>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800884e:	4b4b      	ldr	r3, [pc, #300]	@ (800897c <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8008850:	68db      	ldr	r3, [r3, #12]
 8008852:	4a4a      	ldr	r2, [pc, #296]	@ (800897c <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8008854:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008858:	60d3      	str	r3, [r2, #12]
 800885a:	e011      	b.n	8008880 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008860:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008864:	d10c      	bne.n	8008880 <HAL_RCCEx_PeriphCLKConfig+0x728>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	3304      	adds	r3, #4
 800886a:	2101      	movs	r1, #1
 800886c:	4618      	mov	r0, r3
 800886e:	f000 f931 	bl	8008ad4 <RCCEx_PLLSAI1_Config>
 8008872:	4603      	mov	r3, r0
 8008874:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8008876:	7cfb      	ldrb	r3, [r7, #19]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d001      	beq.n	8008880 <HAL_RCCEx_PeriphCLKConfig+0x728>
        {
          /* set overall return value */
          status = ret;
 800887c:	7cfb      	ldrb	r3, [r7, #19]
 800887e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008888:	2b00      	cmp	r3, #0
 800888a:	d040      	beq.n	800890e <HAL_RCCEx_PeriphCLKConfig+0x7b6>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008890:	2b00      	cmp	r3, #0
 8008892:	d013      	beq.n	80088bc <HAL_RCCEx_PeriphCLKConfig+0x764>
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008898:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800889c:	d00e      	beq.n	80088bc <HAL_RCCEx_PeriphCLKConfig+0x764>
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80088a2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80088a6:	d009      	beq.n	80088bc <HAL_RCCEx_PeriphCLKConfig+0x764>
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80088ac:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80088b0:	d004      	beq.n	80088bc <HAL_RCCEx_PeriphCLKConfig+0x764>
 80088b2:	f240 2141 	movw	r1, #577	@ 0x241
 80088b6:	4830      	ldr	r0, [pc, #192]	@ (8008978 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 80088b8:	f7fc f964 	bl	8004b84 <assert_failed>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80088bc:	4b2f      	ldr	r3, [pc, #188]	@ (800897c <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80088be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80088c2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80088ca:	492c      	ldr	r1, [pc, #176]	@ (800897c <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80088cc:	4313      	orrs	r3, r2
 80088ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80088d6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80088da:	d106      	bne.n	80088ea <HAL_RCCEx_PeriphCLKConfig+0x792>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80088dc:	4b27      	ldr	r3, [pc, #156]	@ (800897c <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80088de:	68db      	ldr	r3, [r3, #12]
 80088e0:	4a26      	ldr	r2, [pc, #152]	@ (800897c <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80088e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80088e6:	60d3      	str	r3, [r2, #12]
 80088e8:	e011      	b.n	800890e <HAL_RCCEx_PeriphCLKConfig+0x7b6>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80088ee:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80088f2:	d10c      	bne.n	800890e <HAL_RCCEx_PeriphCLKConfig+0x7b6>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	3304      	adds	r3, #4
 80088f8:	2101      	movs	r1, #1
 80088fa:	4618      	mov	r0, r3
 80088fc:	f000 f8ea 	bl	8008ad4 <RCCEx_PLLSAI1_Config>
 8008900:	4603      	mov	r3, r0
 8008902:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008904:	7cfb      	ldrb	r3, [r7, #19]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d001      	beq.n	800890e <HAL_RCCEx_PeriphCLKConfig+0x7b6>
      {
        /* set overall return value */
        status = ret;
 800890a:	7cfb      	ldrb	r3, [r7, #19]
 800890c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008916:	2b00      	cmp	r3, #0
 8008918:	d044      	beq.n	80089a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800891e:	2b00      	cmp	r3, #0
 8008920:	d013      	beq.n	800894a <HAL_RCCEx_PeriphCLKConfig+0x7f2>
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008926:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800892a:	d00e      	beq.n	800894a <HAL_RCCEx_PeriphCLKConfig+0x7f2>
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008930:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008934:	d009      	beq.n	800894a <HAL_RCCEx_PeriphCLKConfig+0x7f2>
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800893a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800893e:	d004      	beq.n	800894a <HAL_RCCEx_PeriphCLKConfig+0x7f2>
 8008940:	f240 2166 	movw	r1, #614	@ 0x266
 8008944:	480c      	ldr	r0, [pc, #48]	@ (8008978 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 8008946:	f7fc f91d 	bl	8004b84 <assert_failed>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800894a:	4b0c      	ldr	r3, [pc, #48]	@ (800897c <HAL_RCCEx_PeriphCLKConfig+0x824>)
 800894c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008950:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008958:	4908      	ldr	r1, [pc, #32]	@ (800897c <HAL_RCCEx_PeriphCLKConfig+0x824>)
 800895a:	4313      	orrs	r3, r2
 800895c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008964:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008968:	d10a      	bne.n	8008980 <HAL_RCCEx_PeriphCLKConfig+0x828>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800896a:	4b04      	ldr	r3, [pc, #16]	@ (800897c <HAL_RCCEx_PeriphCLKConfig+0x824>)
 800896c:	68db      	ldr	r3, [r3, #12]
 800896e:	4a03      	ldr	r2, [pc, #12]	@ (800897c <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8008970:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008974:	60d3      	str	r3, [r2, #12]
 8008976:	e015      	b.n	80089a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>
 8008978:	0800f9c0 	.word	0x0800f9c0
 800897c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008984:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008988:	d10c      	bne.n	80089a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	3304      	adds	r3, #4
 800898e:	2101      	movs	r1, #1
 8008990:	4618      	mov	r0, r3
 8008992:	f000 f89f 	bl	8008ad4 <RCCEx_PLLSAI1_Config>
 8008996:	4603      	mov	r3, r0
 8008998:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800899a:	7cfb      	ldrb	r3, [r7, #19]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d001      	beq.n	80089a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>
      {
        /* set overall return value */
        status = ret;
 80089a0:	7cfb      	ldrb	r3, [r7, #19]
 80089a2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d047      	beq.n	8008a40 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d013      	beq.n	80089e0 <HAL_RCCEx_PeriphCLKConfig+0x888>
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80089bc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80089c0:	d00e      	beq.n	80089e0 <HAL_RCCEx_PeriphCLKConfig+0x888>
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80089c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80089ca:	d009      	beq.n	80089e0 <HAL_RCCEx_PeriphCLKConfig+0x888>
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80089d0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80089d4:	d004      	beq.n	80089e0 <HAL_RCCEx_PeriphCLKConfig+0x888>
 80089d6:	f240 2186 	movw	r1, #646	@ 0x286
 80089da:	483c      	ldr	r0, [pc, #240]	@ (8008acc <HAL_RCCEx_PeriphCLKConfig+0x974>)
 80089dc:	f7fc f8d2 	bl	8004b84 <assert_failed>

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80089e0:	4b3b      	ldr	r3, [pc, #236]	@ (8008ad0 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 80089e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80089e6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80089ee:	4938      	ldr	r1, [pc, #224]	@ (8008ad0 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 80089f0:	4313      	orrs	r3, r2
 80089f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80089fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80089fe:	d10d      	bne.n	8008a1c <HAL_RCCEx_PeriphCLKConfig+0x8c4>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	3304      	adds	r3, #4
 8008a04:	2102      	movs	r1, #2
 8008a06:	4618      	mov	r0, r3
 8008a08:	f000 f864 	bl	8008ad4 <RCCEx_PLLSAI1_Config>
 8008a0c:	4603      	mov	r3, r0
 8008a0e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008a10:	7cfb      	ldrb	r3, [r7, #19]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d014      	beq.n	8008a40 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
      {
        /* set overall return value */
        status = ret;
 8008a16:	7cfb      	ldrb	r3, [r7, #19]
 8008a18:	74bb      	strb	r3, [r7, #18]
 8008a1a:	e011      	b.n	8008a40 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008a20:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008a24:	d10c      	bne.n	8008a40 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	3320      	adds	r3, #32
 8008a2a:	2102      	movs	r1, #2
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	f000 f9d1 	bl	8008dd4 <RCCEx_PLLSAI2_Config>
 8008a32:	4603      	mov	r3, r0
 8008a34:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008a36:	7cfb      	ldrb	r3, [r7, #19]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d001      	beq.n	8008a40 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
      {
        /* set overall return value */
        status = ret;
 8008a3c:	7cfb      	ldrb	r3, [r7, #19]
 8008a3e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d018      	beq.n	8008a7e <HAL_RCCEx_PeriphCLKConfig+0x926>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d009      	beq.n	8008a68 <HAL_RCCEx_PeriphCLKConfig+0x910>
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008a58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a5c:	d004      	beq.n	8008a68 <HAL_RCCEx_PeriphCLKConfig+0x910>
 8008a5e:	f240 21b6 	movw	r1, #694	@ 0x2b6
 8008a62:	481a      	ldr	r0, [pc, #104]	@ (8008acc <HAL_RCCEx_PeriphCLKConfig+0x974>)
 8008a64:	f7fc f88e 	bl	8004b84 <assert_failed>

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008a68:	4b19      	ldr	r3, [pc, #100]	@ (8008ad0 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 8008a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a6e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008a76:	4916      	ldr	r1, [pc, #88]	@ (8008ad0 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 8008a78:	4313      	orrs	r3, r2
 8008a7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d01b      	beq.n	8008ac2 <HAL_RCCEx_PeriphCLKConfig+0x96a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d00a      	beq.n	8008aaa <HAL_RCCEx_PeriphCLKConfig+0x952>
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a9a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008a9e:	d004      	beq.n	8008aaa <HAL_RCCEx_PeriphCLKConfig+0x952>
 8008aa0:	f44f 7131 	mov.w	r1, #708	@ 0x2c4
 8008aa4:	4809      	ldr	r0, [pc, #36]	@ (8008acc <HAL_RCCEx_PeriphCLKConfig+0x974>)
 8008aa6:	f7fc f86d 	bl	8004b84 <assert_failed>

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008aaa:	4b09      	ldr	r3, [pc, #36]	@ (8008ad0 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 8008aac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ab0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008aba:	4905      	ldr	r1, [pc, #20]	@ (8008ad0 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 8008abc:	4313      	orrs	r3, r2
 8008abe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8008ac2:	7cbb      	ldrb	r3, [r7, #18]
}
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	3718      	adds	r7, #24
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	bd80      	pop	{r7, pc}
 8008acc:	0800f9c0 	.word	0x0800f9c0
 8008ad0:	40021000 	.word	0x40021000

08008ad4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b084      	sub	sp, #16
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
 8008adc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008ade:	2300      	movs	r3, #0
 8008ae0:	73fb      	strb	r3, [r7, #15]

  /* check for PLLSAI1 Parameters used to output PLLSAI1CLK */
  /* P, Q and R dividers are verified in each specific divider case below */
  assert_param(IS_RCC_PLLSAI1SOURCE(PllSai1->PLLSAI1Source));
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d010      	beq.n	8008b0c <RCCEx_PLLSAI1_Config+0x38>
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	2b01      	cmp	r3, #1
 8008af0:	d00c      	beq.n	8008b0c <RCCEx_PLLSAI1_Config+0x38>
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	2b02      	cmp	r3, #2
 8008af8:	d008      	beq.n	8008b0c <RCCEx_PLLSAI1_Config+0x38>
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	2b03      	cmp	r3, #3
 8008b00:	d004      	beq.n	8008b0c <RCCEx_PLLSAI1_Config+0x38>
 8008b02:	f640 3162 	movw	r1, #2914	@ 0xb62
 8008b06:	4887      	ldr	r0, [pc, #540]	@ (8008d24 <RCCEx_PLLSAI1_Config+0x250>)
 8008b08:	f7fc f83c 	bl	8004b84 <assert_failed>
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	685b      	ldr	r3, [r3, #4]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d003      	beq.n	8008b1c <RCCEx_PLLSAI1_Config+0x48>
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	685b      	ldr	r3, [r3, #4]
 8008b18:	2b08      	cmp	r3, #8
 8008b1a:	d904      	bls.n	8008b26 <RCCEx_PLLSAI1_Config+0x52>
 8008b1c:	f640 3163 	movw	r1, #2915	@ 0xb63
 8008b20:	4880      	ldr	r0, [pc, #512]	@ (8008d24 <RCCEx_PLLSAI1_Config+0x250>)
 8008b22:	f7fc f82f 	bl	8004b84 <assert_failed>
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	689b      	ldr	r3, [r3, #8]
 8008b2a:	2b07      	cmp	r3, #7
 8008b2c:	d903      	bls.n	8008b36 <RCCEx_PLLSAI1_Config+0x62>
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	689b      	ldr	r3, [r3, #8]
 8008b32:	2b56      	cmp	r3, #86	@ 0x56
 8008b34:	d904      	bls.n	8008b40 <RCCEx_PLLSAI1_Config+0x6c>
 8008b36:	f640 3164 	movw	r1, #2916	@ 0xb64
 8008b3a:	487a      	ldr	r0, [pc, #488]	@ (8008d24 <RCCEx_PLLSAI1_Config+0x250>)
 8008b3c:	f7fc f822 	bl	8004b84 <assert_failed>
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	699b      	ldr	r3, [r3, #24]
 8008b44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d10b      	bne.n	8008b64 <RCCEx_PLLSAI1_Config+0x90>
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	699b      	ldr	r3, [r3, #24]
 8008b50:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d105      	bne.n	8008b64 <RCCEx_PLLSAI1_Config+0x90>
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	699b      	ldr	r3, [r3, #24]
 8008b5c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d007      	beq.n	8008b74 <RCCEx_PLLSAI1_Config+0xa0>
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	699b      	ldr	r3, [r3, #24]
 8008b68:	f023 7388 	bic.w	r3, r3, #17825792	@ 0x1100000
 8008b6c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d004      	beq.n	8008b7e <RCCEx_PLLSAI1_Config+0xaa>
 8008b74:	f640 3165 	movw	r1, #2917	@ 0xb65
 8008b78:	486a      	ldr	r0, [pc, #424]	@ (8008d24 <RCCEx_PLLSAI1_Config+0x250>)
 8008b7a:	f7fc f803 	bl	8004b84 <assert_failed>

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8008b7e:	4b6a      	ldr	r3, [pc, #424]	@ (8008d28 <RCCEx_PLLSAI1_Config+0x254>)
 8008b80:	68db      	ldr	r3, [r3, #12]
 8008b82:	f003 0303 	and.w	r3, r3, #3
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d018      	beq.n	8008bbc <RCCEx_PLLSAI1_Config+0xe8>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8008b8a:	4b67      	ldr	r3, [pc, #412]	@ (8008d28 <RCCEx_PLLSAI1_Config+0x254>)
 8008b8c:	68db      	ldr	r3, [r3, #12]
 8008b8e:	f003 0203 	and.w	r2, r3, #3
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	429a      	cmp	r2, r3
 8008b98:	d10d      	bne.n	8008bb6 <RCCEx_PLLSAI1_Config+0xe2>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
       ||
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d009      	beq.n	8008bb6 <RCCEx_PLLSAI1_Config+0xe2>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8008ba2:	4b61      	ldr	r3, [pc, #388]	@ (8008d28 <RCCEx_PLLSAI1_Config+0x254>)
 8008ba4:	68db      	ldr	r3, [r3, #12]
 8008ba6:	091b      	lsrs	r3, r3, #4
 8008ba8:	f003 0307 	and.w	r3, r3, #7
 8008bac:	1c5a      	adds	r2, r3, #1
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	685b      	ldr	r3, [r3, #4]
       ||
 8008bb2:	429a      	cmp	r2, r3
 8008bb4:	d047      	beq.n	8008c46 <RCCEx_PLLSAI1_Config+0x172>
#endif
      )
    {
      status = HAL_ERROR;
 8008bb6:	2301      	movs	r3, #1
 8008bb8:	73fb      	strb	r3, [r7, #15]
 8008bba:	e044      	b.n	8008c46 <RCCEx_PLLSAI1_Config+0x172>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	2b03      	cmp	r3, #3
 8008bc2:	d018      	beq.n	8008bf6 <RCCEx_PLLSAI1_Config+0x122>
 8008bc4:	2b03      	cmp	r3, #3
 8008bc6:	d825      	bhi.n	8008c14 <RCCEx_PLLSAI1_Config+0x140>
 8008bc8:	2b01      	cmp	r3, #1
 8008bca:	d002      	beq.n	8008bd2 <RCCEx_PLLSAI1_Config+0xfe>
 8008bcc:	2b02      	cmp	r3, #2
 8008bce:	d009      	beq.n	8008be4 <RCCEx_PLLSAI1_Config+0x110>
 8008bd0:	e020      	b.n	8008c14 <RCCEx_PLLSAI1_Config+0x140>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8008bd2:	4b55      	ldr	r3, [pc, #340]	@ (8008d28 <RCCEx_PLLSAI1_Config+0x254>)
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	f003 0302 	and.w	r3, r3, #2
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d11d      	bne.n	8008c1a <RCCEx_PLLSAI1_Config+0x146>
      {
        status = HAL_ERROR;
 8008bde:	2301      	movs	r3, #1
 8008be0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008be2:	e01a      	b.n	8008c1a <RCCEx_PLLSAI1_Config+0x146>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008be4:	4b50      	ldr	r3, [pc, #320]	@ (8008d28 <RCCEx_PLLSAI1_Config+0x254>)
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d116      	bne.n	8008c1e <RCCEx_PLLSAI1_Config+0x14a>
      {
        status = HAL_ERROR;
 8008bf0:	2301      	movs	r3, #1
 8008bf2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008bf4:	e013      	b.n	8008c1e <RCCEx_PLLSAI1_Config+0x14a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8008bf6:	4b4c      	ldr	r3, [pc, #304]	@ (8008d28 <RCCEx_PLLSAI1_Config+0x254>)
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d10f      	bne.n	8008c22 <RCCEx_PLLSAI1_Config+0x14e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8008c02:	4b49      	ldr	r3, [pc, #292]	@ (8008d28 <RCCEx_PLLSAI1_Config+0x254>)
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d109      	bne.n	8008c22 <RCCEx_PLLSAI1_Config+0x14e>
        {
          status = HAL_ERROR;
 8008c0e:	2301      	movs	r3, #1
 8008c10:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008c12:	e006      	b.n	8008c22 <RCCEx_PLLSAI1_Config+0x14e>
    default:
      status = HAL_ERROR;
 8008c14:	2301      	movs	r3, #1
 8008c16:	73fb      	strb	r3, [r7, #15]
      break;
 8008c18:	e004      	b.n	8008c24 <RCCEx_PLLSAI1_Config+0x150>
      break;
 8008c1a:	bf00      	nop
 8008c1c:	e002      	b.n	8008c24 <RCCEx_PLLSAI1_Config+0x150>
      break;
 8008c1e:	bf00      	nop
 8008c20:	e000      	b.n	8008c24 <RCCEx_PLLSAI1_Config+0x150>
      break;
 8008c22:	bf00      	nop
    }

    if(status == HAL_OK)
 8008c24:	7bfb      	ldrb	r3, [r7, #15]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d10d      	bne.n	8008c46 <RCCEx_PLLSAI1_Config+0x172>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8008c2a:	4b3f      	ldr	r3, [pc, #252]	@ (8008d28 <RCCEx_PLLSAI1_Config+0x254>)
 8008c2c:	68db      	ldr	r3, [r3, #12]
 8008c2e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6819      	ldr	r1, [r3, #0]
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	685b      	ldr	r3, [r3, #4]
 8008c3a:	3b01      	subs	r3, #1
 8008c3c:	011b      	lsls	r3, r3, #4
 8008c3e:	430b      	orrs	r3, r1
 8008c40:	4939      	ldr	r1, [pc, #228]	@ (8008d28 <RCCEx_PLLSAI1_Config+0x254>)
 8008c42:	4313      	orrs	r3, r2
 8008c44:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8008c46:	7bfb      	ldrb	r3, [r7, #15]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	f040 80ba 	bne.w	8008dc2 <RCCEx_PLLSAI1_Config+0x2ee>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8008c4e:	4b36      	ldr	r3, [pc, #216]	@ (8008d28 <RCCEx_PLLSAI1_Config+0x254>)
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	4a35      	ldr	r2, [pc, #212]	@ (8008d28 <RCCEx_PLLSAI1_Config+0x254>)
 8008c54:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008c58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008c5a:	f7fc fdbd 	bl	80057d8 <HAL_GetTick>
 8008c5e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008c60:	e009      	b.n	8008c76 <RCCEx_PLLSAI1_Config+0x1a2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008c62:	f7fc fdb9 	bl	80057d8 <HAL_GetTick>
 8008c66:	4602      	mov	r2, r0
 8008c68:	68bb      	ldr	r3, [r7, #8]
 8008c6a:	1ad3      	subs	r3, r2, r3
 8008c6c:	2b02      	cmp	r3, #2
 8008c6e:	d902      	bls.n	8008c76 <RCCEx_PLLSAI1_Config+0x1a2>
      {
        status = HAL_TIMEOUT;
 8008c70:	2303      	movs	r3, #3
 8008c72:	73fb      	strb	r3, [r7, #15]
        break;
 8008c74:	e005      	b.n	8008c82 <RCCEx_PLLSAI1_Config+0x1ae>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008c76:	4b2c      	ldr	r3, [pc, #176]	@ (8008d28 <RCCEx_PLLSAI1_Config+0x254>)
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d1ef      	bne.n	8008c62 <RCCEx_PLLSAI1_Config+0x18e>
      }
    }

    if(status == HAL_OK)
 8008c82:	7bfb      	ldrb	r3, [r7, #15]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	f040 809c 	bne.w	8008dc2 <RCCEx_PLLSAI1_Config+0x2ee>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d11e      	bne.n	8008cce <RCCEx_PLLSAI1_Config+0x1fa>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	68db      	ldr	r3, [r3, #12]
 8008c94:	2b07      	cmp	r3, #7
 8008c96:	d008      	beq.n	8008caa <RCCEx_PLLSAI1_Config+0x1d6>
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	68db      	ldr	r3, [r3, #12]
 8008c9c:	2b11      	cmp	r3, #17
 8008c9e:	d004      	beq.n	8008caa <RCCEx_PLLSAI1_Config+0x1d6>
 8008ca0:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 8008ca4:	481f      	ldr	r0, [pc, #124]	@ (8008d24 <RCCEx_PLLSAI1_Config+0x250>)
 8008ca6:	f7fb ff6d 	bl	8004b84 <assert_failed>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008caa:	4b1f      	ldr	r3, [pc, #124]	@ (8008d28 <RCCEx_PLLSAI1_Config+0x254>)
 8008cac:	691b      	ldr	r3, [r3, #16]
 8008cae:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8008cb2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008cb6:	687a      	ldr	r2, [r7, #4]
 8008cb8:	6892      	ldr	r2, [r2, #8]
 8008cba:	0211      	lsls	r1, r2, #8
 8008cbc:	687a      	ldr	r2, [r7, #4]
 8008cbe:	68d2      	ldr	r2, [r2, #12]
 8008cc0:	0912      	lsrs	r2, r2, #4
 8008cc2:	0452      	lsls	r2, r2, #17
 8008cc4:	430a      	orrs	r2, r1
 8008cc6:	4918      	ldr	r1, [pc, #96]	@ (8008d28 <RCCEx_PLLSAI1_Config+0x254>)
 8008cc8:	4313      	orrs	r3, r2
 8008cca:	610b      	str	r3, [r1, #16]
 8008ccc:	e055      	b.n	8008d7a <RCCEx_PLLSAI1_Config+0x2a6>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	2b01      	cmp	r3, #1
 8008cd2:	d12b      	bne.n	8008d2c <RCCEx_PLLSAI1_Config+0x258>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	691b      	ldr	r3, [r3, #16]
 8008cd8:	2b02      	cmp	r3, #2
 8008cda:	d010      	beq.n	8008cfe <RCCEx_PLLSAI1_Config+0x22a>
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	691b      	ldr	r3, [r3, #16]
 8008ce0:	2b04      	cmp	r3, #4
 8008ce2:	d00c      	beq.n	8008cfe <RCCEx_PLLSAI1_Config+0x22a>
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	691b      	ldr	r3, [r3, #16]
 8008ce8:	2b06      	cmp	r3, #6
 8008cea:	d008      	beq.n	8008cfe <RCCEx_PLLSAI1_Config+0x22a>
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	691b      	ldr	r3, [r3, #16]
 8008cf0:	2b08      	cmp	r3, #8
 8008cf2:	d004      	beq.n	8008cfe <RCCEx_PLLSAI1_Config+0x22a>
 8008cf4:	f640 31dc 	movw	r1, #3036	@ 0xbdc
 8008cf8:	480a      	ldr	r0, [pc, #40]	@ (8008d24 <RCCEx_PLLSAI1_Config+0x250>)
 8008cfa:	f7fb ff43 	bl	8004b84 <assert_failed>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008cfe:	4b0a      	ldr	r3, [pc, #40]	@ (8008d28 <RCCEx_PLLSAI1_Config+0x254>)
 8008d00:	691b      	ldr	r3, [r3, #16]
 8008d02:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8008d06:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8008d0a:	687a      	ldr	r2, [r7, #4]
 8008d0c:	6892      	ldr	r2, [r2, #8]
 8008d0e:	0211      	lsls	r1, r2, #8
 8008d10:	687a      	ldr	r2, [r7, #4]
 8008d12:	6912      	ldr	r2, [r2, #16]
 8008d14:	0852      	lsrs	r2, r2, #1
 8008d16:	3a01      	subs	r2, #1
 8008d18:	0552      	lsls	r2, r2, #21
 8008d1a:	430a      	orrs	r2, r1
 8008d1c:	4902      	ldr	r1, [pc, #8]	@ (8008d28 <RCCEx_PLLSAI1_Config+0x254>)
 8008d1e:	4313      	orrs	r3, r2
 8008d20:	610b      	str	r3, [r1, #16]
 8008d22:	e02a      	b.n	8008d7a <RCCEx_PLLSAI1_Config+0x2a6>
 8008d24:	0800f9c0 	.word	0x0800f9c0
 8008d28:	40021000 	.word	0x40021000
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	695b      	ldr	r3, [r3, #20]
 8008d30:	2b02      	cmp	r3, #2
 8008d32:	d010      	beq.n	8008d56 <RCCEx_PLLSAI1_Config+0x282>
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	695b      	ldr	r3, [r3, #20]
 8008d38:	2b04      	cmp	r3, #4
 8008d3a:	d00c      	beq.n	8008d56 <RCCEx_PLLSAI1_Config+0x282>
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	695b      	ldr	r3, [r3, #20]
 8008d40:	2b06      	cmp	r3, #6
 8008d42:	d008      	beq.n	8008d56 <RCCEx_PLLSAI1_Config+0x282>
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	695b      	ldr	r3, [r3, #20]
 8008d48:	2b08      	cmp	r3, #8
 8008d4a:	d004      	beq.n	8008d56 <RCCEx_PLLSAI1_Config+0x282>
 8008d4c:	f640 31ee 	movw	r1, #3054	@ 0xbee
 8008d50:	481e      	ldr	r0, [pc, #120]	@ (8008dcc <RCCEx_PLLSAI1_Config+0x2f8>)
 8008d52:	f7fb ff17 	bl	8004b84 <assert_failed>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008d56:	4b1e      	ldr	r3, [pc, #120]	@ (8008dd0 <RCCEx_PLLSAI1_Config+0x2fc>)
 8008d58:	691b      	ldr	r3, [r3, #16]
 8008d5a:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8008d5e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8008d62:	687a      	ldr	r2, [r7, #4]
 8008d64:	6892      	ldr	r2, [r2, #8]
 8008d66:	0211      	lsls	r1, r2, #8
 8008d68:	687a      	ldr	r2, [r7, #4]
 8008d6a:	6952      	ldr	r2, [r2, #20]
 8008d6c:	0852      	lsrs	r2, r2, #1
 8008d6e:	3a01      	subs	r2, #1
 8008d70:	0652      	lsls	r2, r2, #25
 8008d72:	430a      	orrs	r2, r1
 8008d74:	4916      	ldr	r1, [pc, #88]	@ (8008dd0 <RCCEx_PLLSAI1_Config+0x2fc>)
 8008d76:	4313      	orrs	r3, r2
 8008d78:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8008d7a:	4b15      	ldr	r3, [pc, #84]	@ (8008dd0 <RCCEx_PLLSAI1_Config+0x2fc>)
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	4a14      	ldr	r2, [pc, #80]	@ (8008dd0 <RCCEx_PLLSAI1_Config+0x2fc>)
 8008d80:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008d84:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d86:	f7fc fd27 	bl	80057d8 <HAL_GetTick>
 8008d8a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008d8c:	e009      	b.n	8008da2 <RCCEx_PLLSAI1_Config+0x2ce>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008d8e:	f7fc fd23 	bl	80057d8 <HAL_GetTick>
 8008d92:	4602      	mov	r2, r0
 8008d94:	68bb      	ldr	r3, [r7, #8]
 8008d96:	1ad3      	subs	r3, r2, r3
 8008d98:	2b02      	cmp	r3, #2
 8008d9a:	d902      	bls.n	8008da2 <RCCEx_PLLSAI1_Config+0x2ce>
        {
          status = HAL_TIMEOUT;
 8008d9c:	2303      	movs	r3, #3
 8008d9e:	73fb      	strb	r3, [r7, #15]
          break;
 8008da0:	e005      	b.n	8008dae <RCCEx_PLLSAI1_Config+0x2da>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008da2:	4b0b      	ldr	r3, [pc, #44]	@ (8008dd0 <RCCEx_PLLSAI1_Config+0x2fc>)
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d0ef      	beq.n	8008d8e <RCCEx_PLLSAI1_Config+0x2ba>
        }
      }

      if(status == HAL_OK)
 8008dae:	7bfb      	ldrb	r3, [r7, #15]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d106      	bne.n	8008dc2 <RCCEx_PLLSAI1_Config+0x2ee>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8008db4:	4b06      	ldr	r3, [pc, #24]	@ (8008dd0 <RCCEx_PLLSAI1_Config+0x2fc>)
 8008db6:	691a      	ldr	r2, [r3, #16]
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	699b      	ldr	r3, [r3, #24]
 8008dbc:	4904      	ldr	r1, [pc, #16]	@ (8008dd0 <RCCEx_PLLSAI1_Config+0x2fc>)
 8008dbe:	4313      	orrs	r3, r2
 8008dc0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8008dc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	3710      	adds	r7, #16
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	bd80      	pop	{r7, pc}
 8008dcc:	0800f9c0 	.word	0x0800f9c0
 8008dd0:	40021000 	.word	0x40021000

08008dd4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b084      	sub	sp, #16
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
 8008ddc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008dde:	2300      	movs	r3, #0
 8008de0:	73fb      	strb	r3, [r7, #15]

  /* check for PLLSAI2 Parameters used to output PLLSAI2CLK */
  /* P, Q and R dividers are verified in each specific divider case below */
  assert_param(IS_RCC_PLLSAI2SOURCE(PllSai2->PLLSAI2Source));
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d010      	beq.n	8008e0c <RCCEx_PLLSAI2_Config+0x38>
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	2b01      	cmp	r3, #1
 8008df0:	d00c      	beq.n	8008e0c <RCCEx_PLLSAI2_Config+0x38>
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	2b02      	cmp	r3, #2
 8008df8:	d008      	beq.n	8008e0c <RCCEx_PLLSAI2_Config+0x38>
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	2b03      	cmp	r3, #3
 8008e00:	d004      	beq.n	8008e0c <RCCEx_PLLSAI2_Config+0x38>
 8008e02:	f640 412f 	movw	r1, #3119	@ 0xc2f
 8008e06:	4896      	ldr	r0, [pc, #600]	@ (8009060 <RCCEx_PLLSAI2_Config+0x28c>)
 8008e08:	f7fb febc 	bl	8004b84 <assert_failed>
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	685b      	ldr	r3, [r3, #4]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d003      	beq.n	8008e1c <RCCEx_PLLSAI2_Config+0x48>
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	685b      	ldr	r3, [r3, #4]
 8008e18:	2b08      	cmp	r3, #8
 8008e1a:	d904      	bls.n	8008e26 <RCCEx_PLLSAI2_Config+0x52>
 8008e1c:	f44f 6143 	mov.w	r1, #3120	@ 0xc30
 8008e20:	488f      	ldr	r0, [pc, #572]	@ (8009060 <RCCEx_PLLSAI2_Config+0x28c>)
 8008e22:	f7fb feaf 	bl	8004b84 <assert_failed>
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	689b      	ldr	r3, [r3, #8]
 8008e2a:	2b07      	cmp	r3, #7
 8008e2c:	d903      	bls.n	8008e36 <RCCEx_PLLSAI2_Config+0x62>
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	689b      	ldr	r3, [r3, #8]
 8008e32:	2b56      	cmp	r3, #86	@ 0x56
 8008e34:	d904      	bls.n	8008e40 <RCCEx_PLLSAI2_Config+0x6c>
 8008e36:	f640 4131 	movw	r1, #3121	@ 0xc31
 8008e3a:	4889      	ldr	r0, [pc, #548]	@ (8009060 <RCCEx_PLLSAI2_Config+0x28c>)
 8008e3c:	f7fb fea2 	bl	8004b84 <assert_failed>
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	695b      	ldr	r3, [r3, #20]
 8008e44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d105      	bne.n	8008e58 <RCCEx_PLLSAI2_Config+0x84>
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	695b      	ldr	r3, [r3, #20]
 8008e50:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d007      	beq.n	8008e68 <RCCEx_PLLSAI2_Config+0x94>
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	695b      	ldr	r3, [r3, #20]
 8008e5c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008e60:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d004      	beq.n	8008e72 <RCCEx_PLLSAI2_Config+0x9e>
 8008e68:	f640 4132 	movw	r1, #3122	@ 0xc32
 8008e6c:	487c      	ldr	r0, [pc, #496]	@ (8009060 <RCCEx_PLLSAI2_Config+0x28c>)
 8008e6e:	f7fb fe89 	bl	8004b84 <assert_failed>

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8008e72:	4b7c      	ldr	r3, [pc, #496]	@ (8009064 <RCCEx_PLLSAI2_Config+0x290>)
 8008e74:	68db      	ldr	r3, [r3, #12]
 8008e76:	f003 0303 	and.w	r3, r3, #3
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d018      	beq.n	8008eb0 <RCCEx_PLLSAI2_Config+0xdc>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8008e7e:	4b79      	ldr	r3, [pc, #484]	@ (8009064 <RCCEx_PLLSAI2_Config+0x290>)
 8008e80:	68db      	ldr	r3, [r3, #12]
 8008e82:	f003 0203 	and.w	r2, r3, #3
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	429a      	cmp	r2, r3
 8008e8c:	d10d      	bne.n	8008eaa <RCCEx_PLLSAI2_Config+0xd6>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
       ||
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d009      	beq.n	8008eaa <RCCEx_PLLSAI2_Config+0xd6>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8008e96:	4b73      	ldr	r3, [pc, #460]	@ (8009064 <RCCEx_PLLSAI2_Config+0x290>)
 8008e98:	68db      	ldr	r3, [r3, #12]
 8008e9a:	091b      	lsrs	r3, r3, #4
 8008e9c:	f003 0307 	and.w	r3, r3, #7
 8008ea0:	1c5a      	adds	r2, r3, #1
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	685b      	ldr	r3, [r3, #4]
       ||
 8008ea6:	429a      	cmp	r2, r3
 8008ea8:	d047      	beq.n	8008f3a <RCCEx_PLLSAI2_Config+0x166>
#endif
      )
    {
      status = HAL_ERROR;
 8008eaa:	2301      	movs	r3, #1
 8008eac:	73fb      	strb	r3, [r7, #15]
 8008eae:	e044      	b.n	8008f3a <RCCEx_PLLSAI2_Config+0x166>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	2b03      	cmp	r3, #3
 8008eb6:	d018      	beq.n	8008eea <RCCEx_PLLSAI2_Config+0x116>
 8008eb8:	2b03      	cmp	r3, #3
 8008eba:	d825      	bhi.n	8008f08 <RCCEx_PLLSAI2_Config+0x134>
 8008ebc:	2b01      	cmp	r3, #1
 8008ebe:	d002      	beq.n	8008ec6 <RCCEx_PLLSAI2_Config+0xf2>
 8008ec0:	2b02      	cmp	r3, #2
 8008ec2:	d009      	beq.n	8008ed8 <RCCEx_PLLSAI2_Config+0x104>
 8008ec4:	e020      	b.n	8008f08 <RCCEx_PLLSAI2_Config+0x134>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8008ec6:	4b67      	ldr	r3, [pc, #412]	@ (8009064 <RCCEx_PLLSAI2_Config+0x290>)
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	f003 0302 	and.w	r3, r3, #2
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d11d      	bne.n	8008f0e <RCCEx_PLLSAI2_Config+0x13a>
      {
        status = HAL_ERROR;
 8008ed2:	2301      	movs	r3, #1
 8008ed4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008ed6:	e01a      	b.n	8008f0e <RCCEx_PLLSAI2_Config+0x13a>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008ed8:	4b62      	ldr	r3, [pc, #392]	@ (8009064 <RCCEx_PLLSAI2_Config+0x290>)
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d116      	bne.n	8008f12 <RCCEx_PLLSAI2_Config+0x13e>
      {
        status = HAL_ERROR;
 8008ee4:	2301      	movs	r3, #1
 8008ee6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008ee8:	e013      	b.n	8008f12 <RCCEx_PLLSAI2_Config+0x13e>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8008eea:	4b5e      	ldr	r3, [pc, #376]	@ (8009064 <RCCEx_PLLSAI2_Config+0x290>)
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d10f      	bne.n	8008f16 <RCCEx_PLLSAI2_Config+0x142>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8008ef6:	4b5b      	ldr	r3, [pc, #364]	@ (8009064 <RCCEx_PLLSAI2_Config+0x290>)
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d109      	bne.n	8008f16 <RCCEx_PLLSAI2_Config+0x142>
        {
          status = HAL_ERROR;
 8008f02:	2301      	movs	r3, #1
 8008f04:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008f06:	e006      	b.n	8008f16 <RCCEx_PLLSAI2_Config+0x142>
    default:
      status = HAL_ERROR;
 8008f08:	2301      	movs	r3, #1
 8008f0a:	73fb      	strb	r3, [r7, #15]
      break;
 8008f0c:	e004      	b.n	8008f18 <RCCEx_PLLSAI2_Config+0x144>
      break;
 8008f0e:	bf00      	nop
 8008f10:	e002      	b.n	8008f18 <RCCEx_PLLSAI2_Config+0x144>
      break;
 8008f12:	bf00      	nop
 8008f14:	e000      	b.n	8008f18 <RCCEx_PLLSAI2_Config+0x144>
      break;
 8008f16:	bf00      	nop
    }

    if(status == HAL_OK)
 8008f18:	7bfb      	ldrb	r3, [r7, #15]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d10d      	bne.n	8008f3a <RCCEx_PLLSAI2_Config+0x166>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8008f1e:	4b51      	ldr	r3, [pc, #324]	@ (8009064 <RCCEx_PLLSAI2_Config+0x290>)
 8008f20:	68db      	ldr	r3, [r3, #12]
 8008f22:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	6819      	ldr	r1, [r3, #0]
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	685b      	ldr	r3, [r3, #4]
 8008f2e:	3b01      	subs	r3, #1
 8008f30:	011b      	lsls	r3, r3, #4
 8008f32:	430b      	orrs	r3, r1
 8008f34:	494b      	ldr	r1, [pc, #300]	@ (8009064 <RCCEx_PLLSAI2_Config+0x290>)
 8008f36:	4313      	orrs	r3, r2
 8008f38:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8008f3a:	7bfb      	ldrb	r3, [r7, #15]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	f040 808a 	bne.w	8009056 <RCCEx_PLLSAI2_Config+0x282>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8008f42:	4b48      	ldr	r3, [pc, #288]	@ (8009064 <RCCEx_PLLSAI2_Config+0x290>)
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	4a47      	ldr	r2, [pc, #284]	@ (8009064 <RCCEx_PLLSAI2_Config+0x290>)
 8008f48:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008f4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008f4e:	f7fc fc43 	bl	80057d8 <HAL_GetTick>
 8008f52:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008f54:	e009      	b.n	8008f6a <RCCEx_PLLSAI2_Config+0x196>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008f56:	f7fc fc3f 	bl	80057d8 <HAL_GetTick>
 8008f5a:	4602      	mov	r2, r0
 8008f5c:	68bb      	ldr	r3, [r7, #8]
 8008f5e:	1ad3      	subs	r3, r2, r3
 8008f60:	2b02      	cmp	r3, #2
 8008f62:	d902      	bls.n	8008f6a <RCCEx_PLLSAI2_Config+0x196>
      {
        status = HAL_TIMEOUT;
 8008f64:	2303      	movs	r3, #3
 8008f66:	73fb      	strb	r3, [r7, #15]
        break;
 8008f68:	e005      	b.n	8008f76 <RCCEx_PLLSAI2_Config+0x1a2>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008f6a:	4b3e      	ldr	r3, [pc, #248]	@ (8009064 <RCCEx_PLLSAI2_Config+0x290>)
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d1ef      	bne.n	8008f56 <RCCEx_PLLSAI2_Config+0x182>
      }
    }

    if(status == HAL_OK)
 8008f76:	7bfb      	ldrb	r3, [r7, #15]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d16c      	bne.n	8009056 <RCCEx_PLLSAI2_Config+0x282>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d11e      	bne.n	8008fc0 <RCCEx_PLLSAI2_Config+0x1ec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	68db      	ldr	r3, [r3, #12]
 8008f86:	2b07      	cmp	r3, #7
 8008f88:	d008      	beq.n	8008f9c <RCCEx_PLLSAI2_Config+0x1c8>
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	68db      	ldr	r3, [r3, #12]
 8008f8e:	2b11      	cmp	r3, #17
 8008f90:	d004      	beq.n	8008f9c <RCCEx_PLLSAI2_Config+0x1c8>
 8008f92:	f640 4185 	movw	r1, #3205	@ 0xc85
 8008f96:	4832      	ldr	r0, [pc, #200]	@ (8009060 <RCCEx_PLLSAI2_Config+0x28c>)
 8008f98:	f7fb fdf4 	bl	8004b84 <assert_failed>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008f9c:	4b31      	ldr	r3, [pc, #196]	@ (8009064 <RCCEx_PLLSAI2_Config+0x290>)
 8008f9e:	695b      	ldr	r3, [r3, #20]
 8008fa0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8008fa4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008fa8:	687a      	ldr	r2, [r7, #4]
 8008faa:	6892      	ldr	r2, [r2, #8]
 8008fac:	0211      	lsls	r1, r2, #8
 8008fae:	687a      	ldr	r2, [r7, #4]
 8008fb0:	68d2      	ldr	r2, [r2, #12]
 8008fb2:	0912      	lsrs	r2, r2, #4
 8008fb4:	0452      	lsls	r2, r2, #17
 8008fb6:	430a      	orrs	r2, r1
 8008fb8:	492a      	ldr	r1, [pc, #168]	@ (8009064 <RCCEx_PLLSAI2_Config+0x290>)
 8008fba:	4313      	orrs	r3, r2
 8008fbc:	614b      	str	r3, [r1, #20]
 8008fbe:	e026      	b.n	800900e <RCCEx_PLLSAI2_Config+0x23a>
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#endif /* RCC_PLLSAI2Q_DIV_SUPPORT */
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	691b      	ldr	r3, [r3, #16]
 8008fc4:	2b02      	cmp	r3, #2
 8008fc6:	d010      	beq.n	8008fea <RCCEx_PLLSAI2_Config+0x216>
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	691b      	ldr	r3, [r3, #16]
 8008fcc:	2b04      	cmp	r3, #4
 8008fce:	d00c      	beq.n	8008fea <RCCEx_PLLSAI2_Config+0x216>
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	691b      	ldr	r3, [r3, #16]
 8008fd4:	2b06      	cmp	r3, #6
 8008fd6:	d008      	beq.n	8008fea <RCCEx_PLLSAI2_Config+0x216>
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	691b      	ldr	r3, [r3, #16]
 8008fdc:	2b08      	cmp	r3, #8
 8008fde:	d004      	beq.n	8008fea <RCCEx_PLLSAI2_Config+0x216>
 8008fe0:	f640 41bd 	movw	r1, #3261	@ 0xcbd
 8008fe4:	481e      	ldr	r0, [pc, #120]	@ (8009060 <RCCEx_PLLSAI2_Config+0x28c>)
 8008fe6:	f7fb fdcd 	bl	8004b84 <assert_failed>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008fea:	4b1e      	ldr	r3, [pc, #120]	@ (8009064 <RCCEx_PLLSAI2_Config+0x290>)
 8008fec:	695b      	ldr	r3, [r3, #20]
 8008fee:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8008ff2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8008ff6:	687a      	ldr	r2, [r7, #4]
 8008ff8:	6892      	ldr	r2, [r2, #8]
 8008ffa:	0211      	lsls	r1, r2, #8
 8008ffc:	687a      	ldr	r2, [r7, #4]
 8008ffe:	6912      	ldr	r2, [r2, #16]
 8009000:	0852      	lsrs	r2, r2, #1
 8009002:	3a01      	subs	r2, #1
 8009004:	0652      	lsls	r2, r2, #25
 8009006:	430a      	orrs	r2, r1
 8009008:	4916      	ldr	r1, [pc, #88]	@ (8009064 <RCCEx_PLLSAI2_Config+0x290>)
 800900a:	4313      	orrs	r3, r2
 800900c:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800900e:	4b15      	ldr	r3, [pc, #84]	@ (8009064 <RCCEx_PLLSAI2_Config+0x290>)
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	4a14      	ldr	r2, [pc, #80]	@ (8009064 <RCCEx_PLLSAI2_Config+0x290>)
 8009014:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009018:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800901a:	f7fc fbdd 	bl	80057d8 <HAL_GetTick>
 800901e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8009020:	e009      	b.n	8009036 <RCCEx_PLLSAI2_Config+0x262>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8009022:	f7fc fbd9 	bl	80057d8 <HAL_GetTick>
 8009026:	4602      	mov	r2, r0
 8009028:	68bb      	ldr	r3, [r7, #8]
 800902a:	1ad3      	subs	r3, r2, r3
 800902c:	2b02      	cmp	r3, #2
 800902e:	d902      	bls.n	8009036 <RCCEx_PLLSAI2_Config+0x262>
        {
          status = HAL_TIMEOUT;
 8009030:	2303      	movs	r3, #3
 8009032:	73fb      	strb	r3, [r7, #15]
          break;
 8009034:	e005      	b.n	8009042 <RCCEx_PLLSAI2_Config+0x26e>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8009036:	4b0b      	ldr	r3, [pc, #44]	@ (8009064 <RCCEx_PLLSAI2_Config+0x290>)
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800903e:	2b00      	cmp	r3, #0
 8009040:	d0ef      	beq.n	8009022 <RCCEx_PLLSAI2_Config+0x24e>
        }
      }

      if(status == HAL_OK)
 8009042:	7bfb      	ldrb	r3, [r7, #15]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d106      	bne.n	8009056 <RCCEx_PLLSAI2_Config+0x282>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8009048:	4b06      	ldr	r3, [pc, #24]	@ (8009064 <RCCEx_PLLSAI2_Config+0x290>)
 800904a:	695a      	ldr	r2, [r3, #20]
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	695b      	ldr	r3, [r3, #20]
 8009050:	4904      	ldr	r1, [pc, #16]	@ (8009064 <RCCEx_PLLSAI2_Config+0x290>)
 8009052:	4313      	orrs	r3, r2
 8009054:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8009056:	7bfb      	ldrb	r3, [r7, #15]
}
 8009058:	4618      	mov	r0, r3
 800905a:	3710      	adds	r7, #16
 800905c:	46bd      	mov	sp, r7
 800905e:	bd80      	pop	{r7, pc}
 8009060:	0800f9c0 	.word	0x0800f9c0
 8009064:	40021000 	.word	0x40021000

08009068 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009068:	b580      	push	{r7, lr}
 800906a:	b084      	sub	sp, #16
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d101      	bne.n	800907a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009076:	2301      	movs	r3, #1
 8009078:	e1dd      	b.n	8009436 <HAL_SPI_Init+0x3ce>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	4a7b      	ldr	r2, [pc, #492]	@ (800926c <HAL_SPI_Init+0x204>)
 8009080:	4293      	cmp	r3, r2
 8009082:	d00e      	beq.n	80090a2 <HAL_SPI_Init+0x3a>
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	4a79      	ldr	r2, [pc, #484]	@ (8009270 <HAL_SPI_Init+0x208>)
 800908a:	4293      	cmp	r3, r2
 800908c:	d009      	beq.n	80090a2 <HAL_SPI_Init+0x3a>
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	4a78      	ldr	r2, [pc, #480]	@ (8009274 <HAL_SPI_Init+0x20c>)
 8009094:	4293      	cmp	r3, r2
 8009096:	d004      	beq.n	80090a2 <HAL_SPI_Init+0x3a>
 8009098:	f240 1147 	movw	r1, #327	@ 0x147
 800909c:	4876      	ldr	r0, [pc, #472]	@ (8009278 <HAL_SPI_Init+0x210>)
 800909e:	f7fb fd71 	bl	8004b84 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	685b      	ldr	r3, [r3, #4]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d009      	beq.n	80090be <HAL_SPI_Init+0x56>
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	685b      	ldr	r3, [r3, #4]
 80090ae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80090b2:	d004      	beq.n	80090be <HAL_SPI_Init+0x56>
 80090b4:	f44f 71a4 	mov.w	r1, #328	@ 0x148
 80090b8:	486f      	ldr	r0, [pc, #444]	@ (8009278 <HAL_SPI_Init+0x210>)
 80090ba:	f7fb fd63 	bl	8004b84 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	689b      	ldr	r3, [r3, #8]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d00e      	beq.n	80090e4 <HAL_SPI_Init+0x7c>
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	689b      	ldr	r3, [r3, #8]
 80090ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80090ce:	d009      	beq.n	80090e4 <HAL_SPI_Init+0x7c>
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	689b      	ldr	r3, [r3, #8]
 80090d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80090d8:	d004      	beq.n	80090e4 <HAL_SPI_Init+0x7c>
 80090da:	f240 1149 	movw	r1, #329	@ 0x149
 80090de:	4866      	ldr	r0, [pc, #408]	@ (8009278 <HAL_SPI_Init+0x210>)
 80090e0:	f7fb fd50 	bl	8004b84 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	68db      	ldr	r3, [r3, #12]
 80090e8:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80090ec:	d040      	beq.n	8009170 <HAL_SPI_Init+0x108>
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	68db      	ldr	r3, [r3, #12]
 80090f2:	f5b3 6f60 	cmp.w	r3, #3584	@ 0xe00
 80090f6:	d03b      	beq.n	8009170 <HAL_SPI_Init+0x108>
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	68db      	ldr	r3, [r3, #12]
 80090fc:	f5b3 6f50 	cmp.w	r3, #3328	@ 0xd00
 8009100:	d036      	beq.n	8009170 <HAL_SPI_Init+0x108>
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	68db      	ldr	r3, [r3, #12]
 8009106:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800910a:	d031      	beq.n	8009170 <HAL_SPI_Init+0x108>
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	68db      	ldr	r3, [r3, #12]
 8009110:	f5b3 6f30 	cmp.w	r3, #2816	@ 0xb00
 8009114:	d02c      	beq.n	8009170 <HAL_SPI_Init+0x108>
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	68db      	ldr	r3, [r3, #12]
 800911a:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800911e:	d027      	beq.n	8009170 <HAL_SPI_Init+0x108>
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	68db      	ldr	r3, [r3, #12]
 8009124:	f5b3 6f10 	cmp.w	r3, #2304	@ 0x900
 8009128:	d022      	beq.n	8009170 <HAL_SPI_Init+0x108>
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	68db      	ldr	r3, [r3, #12]
 800912e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009132:	d01d      	beq.n	8009170 <HAL_SPI_Init+0x108>
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	68db      	ldr	r3, [r3, #12]
 8009138:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800913c:	d018      	beq.n	8009170 <HAL_SPI_Init+0x108>
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	68db      	ldr	r3, [r3, #12]
 8009142:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8009146:	d013      	beq.n	8009170 <HAL_SPI_Init+0x108>
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	68db      	ldr	r3, [r3, #12]
 800914c:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8009150:	d00e      	beq.n	8009170 <HAL_SPI_Init+0x108>
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	68db      	ldr	r3, [r3, #12]
 8009156:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800915a:	d009      	beq.n	8009170 <HAL_SPI_Init+0x108>
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	68db      	ldr	r3, [r3, #12]
 8009160:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009164:	d004      	beq.n	8009170 <HAL_SPI_Init+0x108>
 8009166:	f44f 71a5 	mov.w	r1, #330	@ 0x14a
 800916a:	4843      	ldr	r0, [pc, #268]	@ (8009278 <HAL_SPI_Init+0x210>)
 800916c:	f7fb fd0a 	bl	8004b84 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	699b      	ldr	r3, [r3, #24]
 8009174:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009178:	d00d      	beq.n	8009196 <HAL_SPI_Init+0x12e>
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	699b      	ldr	r3, [r3, #24]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d009      	beq.n	8009196 <HAL_SPI_Init+0x12e>
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	699b      	ldr	r3, [r3, #24]
 8009186:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800918a:	d004      	beq.n	8009196 <HAL_SPI_Init+0x12e>
 800918c:	f240 114b 	movw	r1, #331	@ 0x14b
 8009190:	4839      	ldr	r0, [pc, #228]	@ (8009278 <HAL_SPI_Init+0x210>)
 8009192:	f7fb fcf7 	bl	8004b84 <assert_failed>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800919a:	2b08      	cmp	r3, #8
 800919c:	d008      	beq.n	80091b0 <HAL_SPI_Init+0x148>
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d004      	beq.n	80091b0 <HAL_SPI_Init+0x148>
 80091a6:	f44f 71a6 	mov.w	r1, #332	@ 0x14c
 80091aa:	4833      	ldr	r0, [pc, #204]	@ (8009278 <HAL_SPI_Init+0x210>)
 80091ac:	f7fb fcea 	bl	8004b84 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	69db      	ldr	r3, [r3, #28]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d020      	beq.n	80091fa <HAL_SPI_Init+0x192>
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	69db      	ldr	r3, [r3, #28]
 80091bc:	2b08      	cmp	r3, #8
 80091be:	d01c      	beq.n	80091fa <HAL_SPI_Init+0x192>
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	69db      	ldr	r3, [r3, #28]
 80091c4:	2b10      	cmp	r3, #16
 80091c6:	d018      	beq.n	80091fa <HAL_SPI_Init+0x192>
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	69db      	ldr	r3, [r3, #28]
 80091cc:	2b18      	cmp	r3, #24
 80091ce:	d014      	beq.n	80091fa <HAL_SPI_Init+0x192>
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	69db      	ldr	r3, [r3, #28]
 80091d4:	2b20      	cmp	r3, #32
 80091d6:	d010      	beq.n	80091fa <HAL_SPI_Init+0x192>
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	69db      	ldr	r3, [r3, #28]
 80091dc:	2b28      	cmp	r3, #40	@ 0x28
 80091de:	d00c      	beq.n	80091fa <HAL_SPI_Init+0x192>
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	69db      	ldr	r3, [r3, #28]
 80091e4:	2b30      	cmp	r3, #48	@ 0x30
 80091e6:	d008      	beq.n	80091fa <HAL_SPI_Init+0x192>
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	69db      	ldr	r3, [r3, #28]
 80091ec:	2b38      	cmp	r3, #56	@ 0x38
 80091ee:	d004      	beq.n	80091fa <HAL_SPI_Init+0x192>
 80091f0:	f240 114d 	movw	r1, #333	@ 0x14d
 80091f4:	4820      	ldr	r0, [pc, #128]	@ (8009278 <HAL_SPI_Init+0x210>)
 80091f6:	f7fb fcc5 	bl	8004b84 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	6a1b      	ldr	r3, [r3, #32]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d008      	beq.n	8009214 <HAL_SPI_Init+0x1ac>
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	6a1b      	ldr	r3, [r3, #32]
 8009206:	2b80      	cmp	r3, #128	@ 0x80
 8009208:	d004      	beq.n	8009214 <HAL_SPI_Init+0x1ac>
 800920a:	f44f 71a7 	mov.w	r1, #334	@ 0x14e
 800920e:	481a      	ldr	r0, [pc, #104]	@ (8009278 <HAL_SPI_Init+0x210>)
 8009210:	f7fb fcb8 	bl	8004b84 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009218:	2b00      	cmp	r3, #0
 800921a:	d008      	beq.n	800922e <HAL_SPI_Init+0x1c6>
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009220:	2b10      	cmp	r3, #16
 8009222:	d004      	beq.n	800922e <HAL_SPI_Init+0x1c6>
 8009224:	f240 114f 	movw	r1, #335	@ 0x14f
 8009228:	4813      	ldr	r0, [pc, #76]	@ (8009278 <HAL_SPI_Init+0x210>)
 800922a:	f7fb fcab 	bl	8004b84 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009232:	2b00      	cmp	r3, #0
 8009234:	d151      	bne.n	80092da <HAL_SPI_Init+0x272>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	691b      	ldr	r3, [r3, #16]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d008      	beq.n	8009250 <HAL_SPI_Init+0x1e8>
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	691b      	ldr	r3, [r3, #16]
 8009242:	2b02      	cmp	r3, #2
 8009244:	d004      	beq.n	8009250 <HAL_SPI_Init+0x1e8>
 8009246:	f44f 71a9 	mov.w	r1, #338	@ 0x152
 800924a:	480b      	ldr	r0, [pc, #44]	@ (8009278 <HAL_SPI_Init+0x210>)
 800924c:	f7fb fc9a 	bl	8004b84 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	695b      	ldr	r3, [r3, #20]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d011      	beq.n	800927c <HAL_SPI_Init+0x214>
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	695b      	ldr	r3, [r3, #20]
 800925c:	2b01      	cmp	r3, #1
 800925e:	d00d      	beq.n	800927c <HAL_SPI_Init+0x214>
 8009260:	f240 1153 	movw	r1, #339	@ 0x153
 8009264:	4804      	ldr	r0, [pc, #16]	@ (8009278 <HAL_SPI_Init+0x210>)
 8009266:	f7fb fc8d 	bl	8004b84 <assert_failed>
 800926a:	e007      	b.n	800927c <HAL_SPI_Init+0x214>
 800926c:	40013000 	.word	0x40013000
 8009270:	40003800 	.word	0x40003800
 8009274:	40003c00 	.word	0x40003c00
 8009278:	0800f9fc 	.word	0x0800f9fc

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	685b      	ldr	r3, [r3, #4]
 8009280:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009284:	d125      	bne.n	80092d2 <HAL_SPI_Init+0x26a>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	69db      	ldr	r3, [r3, #28]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d050      	beq.n	8009330 <HAL_SPI_Init+0x2c8>
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	69db      	ldr	r3, [r3, #28]
 8009292:	2b08      	cmp	r3, #8
 8009294:	d04c      	beq.n	8009330 <HAL_SPI_Init+0x2c8>
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	69db      	ldr	r3, [r3, #28]
 800929a:	2b10      	cmp	r3, #16
 800929c:	d048      	beq.n	8009330 <HAL_SPI_Init+0x2c8>
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	69db      	ldr	r3, [r3, #28]
 80092a2:	2b18      	cmp	r3, #24
 80092a4:	d044      	beq.n	8009330 <HAL_SPI_Init+0x2c8>
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	69db      	ldr	r3, [r3, #28]
 80092aa:	2b20      	cmp	r3, #32
 80092ac:	d040      	beq.n	8009330 <HAL_SPI_Init+0x2c8>
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	69db      	ldr	r3, [r3, #28]
 80092b2:	2b28      	cmp	r3, #40	@ 0x28
 80092b4:	d03c      	beq.n	8009330 <HAL_SPI_Init+0x2c8>
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	69db      	ldr	r3, [r3, #28]
 80092ba:	2b30      	cmp	r3, #48	@ 0x30
 80092bc:	d038      	beq.n	8009330 <HAL_SPI_Init+0x2c8>
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	69db      	ldr	r3, [r3, #28]
 80092c2:	2b38      	cmp	r3, #56	@ 0x38
 80092c4:	d034      	beq.n	8009330 <HAL_SPI_Init+0x2c8>
 80092c6:	f240 1157 	movw	r1, #343	@ 0x157
 80092ca:	485d      	ldr	r0, [pc, #372]	@ (8009440 <HAL_SPI_Init+0x3d8>)
 80092cc:	f7fb fc5a 	bl	8004b84 <assert_failed>
 80092d0:	e02e      	b.n	8009330 <HAL_SPI_Init+0x2c8>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	2200      	movs	r2, #0
 80092d6:	61da      	str	r2, [r3, #28]
 80092d8:	e02a      	b.n	8009330 <HAL_SPI_Init+0x2c8>
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	69db      	ldr	r3, [r3, #28]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d020      	beq.n	8009324 <HAL_SPI_Init+0x2bc>
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	69db      	ldr	r3, [r3, #28]
 80092e6:	2b08      	cmp	r3, #8
 80092e8:	d01c      	beq.n	8009324 <HAL_SPI_Init+0x2bc>
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	69db      	ldr	r3, [r3, #28]
 80092ee:	2b10      	cmp	r3, #16
 80092f0:	d018      	beq.n	8009324 <HAL_SPI_Init+0x2bc>
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	69db      	ldr	r3, [r3, #28]
 80092f6:	2b18      	cmp	r3, #24
 80092f8:	d014      	beq.n	8009324 <HAL_SPI_Init+0x2bc>
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	69db      	ldr	r3, [r3, #28]
 80092fe:	2b20      	cmp	r3, #32
 8009300:	d010      	beq.n	8009324 <HAL_SPI_Init+0x2bc>
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	69db      	ldr	r3, [r3, #28]
 8009306:	2b28      	cmp	r3, #40	@ 0x28
 8009308:	d00c      	beq.n	8009324 <HAL_SPI_Init+0x2bc>
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	69db      	ldr	r3, [r3, #28]
 800930e:	2b30      	cmp	r3, #48	@ 0x30
 8009310:	d008      	beq.n	8009324 <HAL_SPI_Init+0x2bc>
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	69db      	ldr	r3, [r3, #28]
 8009316:	2b38      	cmp	r3, #56	@ 0x38
 8009318:	d004      	beq.n	8009324 <HAL_SPI_Init+0x2bc>
 800931a:	f240 1161 	movw	r1, #353	@ 0x161
 800931e:	4848      	ldr	r0, [pc, #288]	@ (8009440 <HAL_SPI_Init+0x3d8>)
 8009320:	f7fb fc30 	bl	8004b84 <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	2200      	movs	r2, #0
 8009328:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2200      	movs	r2, #0
 800932e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	2200      	movs	r2, #0
 8009334:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800933c:	b2db      	uxtb	r3, r3
 800933e:	2b00      	cmp	r3, #0
 8009340:	d106      	bne.n	8009350 <HAL_SPI_Init+0x2e8>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	2200      	movs	r2, #0
 8009346:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800934a:	6878      	ldr	r0, [r7, #4]
 800934c:	f7fb fc5e 	bl	8004c0c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	2202      	movs	r2, #2
 8009354:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	681a      	ldr	r2, [r3, #0]
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009366:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	68db      	ldr	r3, [r3, #12]
 800936c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009370:	d902      	bls.n	8009378 <HAL_SPI_Init+0x310>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009372:	2300      	movs	r3, #0
 8009374:	60fb      	str	r3, [r7, #12]
 8009376:	e002      	b.n	800937e <HAL_SPI_Init+0x316>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009378:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800937c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	68db      	ldr	r3, [r3, #12]
 8009382:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8009386:	d007      	beq.n	8009398 <HAL_SPI_Init+0x330>
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	68db      	ldr	r3, [r3, #12]
 800938c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009390:	d002      	beq.n	8009398 <HAL_SPI_Init+0x330>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	2200      	movs	r2, #0
 8009396:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	685b      	ldr	r3, [r3, #4]
 800939c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	689b      	ldr	r3, [r3, #8]
 80093a4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80093a8:	431a      	orrs	r2, r3
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	691b      	ldr	r3, [r3, #16]
 80093ae:	f003 0302 	and.w	r3, r3, #2
 80093b2:	431a      	orrs	r2, r3
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	695b      	ldr	r3, [r3, #20]
 80093b8:	f003 0301 	and.w	r3, r3, #1
 80093bc:	431a      	orrs	r2, r3
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	699b      	ldr	r3, [r3, #24]
 80093c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80093c6:	431a      	orrs	r2, r3
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	69db      	ldr	r3, [r3, #28]
 80093cc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80093d0:	431a      	orrs	r2, r3
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	6a1b      	ldr	r3, [r3, #32]
 80093d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80093da:	ea42 0103 	orr.w	r1, r2, r3
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093e2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	430a      	orrs	r2, r1
 80093ec:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	699b      	ldr	r3, [r3, #24]
 80093f2:	0c1b      	lsrs	r3, r3, #16
 80093f4:	f003 0204 	and.w	r2, r3, #4
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093fc:	f003 0310 	and.w	r3, r3, #16
 8009400:	431a      	orrs	r2, r3
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009406:	f003 0308 	and.w	r3, r3, #8
 800940a:	431a      	orrs	r2, r3
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	68db      	ldr	r3, [r3, #12]
 8009410:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8009414:	ea42 0103 	orr.w	r1, r2, r3
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	430a      	orrs	r2, r1
 8009424:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	2200      	movs	r2, #0
 800942a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	2201      	movs	r2, #1
 8009430:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8009434:	2300      	movs	r3, #0
}
 8009436:	4618      	mov	r0, r3
 8009438:	3710      	adds	r7, #16
 800943a:	46bd      	mov	sp, r7
 800943c:	bd80      	pop	{r7, pc}
 800943e:	bf00      	nop
 8009440:	0800f9fc 	.word	0x0800f9fc

08009444 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8009444:	b580      	push	{r7, lr}
 8009446:	b086      	sub	sp, #24
 8009448:	af00      	add	r7, sp, #0
 800944a:	60f8      	str	r0, [r7, #12]
 800944c:	60b9      	str	r1, [r7, #8]
 800944e:	607a      	str	r2, [r7, #4]
 8009450:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;

  /* Check rx & tx dma handles */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009456:	2b00      	cmp	r3, #0
 8009458:	d104      	bne.n	8009464 <HAL_SPI_TransmitReceive_DMA+0x20>
 800945a:	f640 0172 	movw	r1, #2162	@ 0x872
 800945e:	487f      	ldr	r0, [pc, #508]	@ (800965c <HAL_SPI_TransmitReceive_DMA+0x218>)
 8009460:	f7fb fb90 	bl	8004b84 <assert_failed>
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009468:	2b00      	cmp	r3, #0
 800946a:	d104      	bne.n	8009476 <HAL_SPI_TransmitReceive_DMA+0x32>
 800946c:	f640 0173 	movw	r1, #2163	@ 0x873
 8009470:	487a      	ldr	r0, [pc, #488]	@ (800965c <HAL_SPI_TransmitReceive_DMA+0x218>)
 8009472:	f7fb fb87 	bl	8004b84 <assert_failed>

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	689b      	ldr	r3, [r3, #8]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d004      	beq.n	8009488 <HAL_SPI_TransmitReceive_DMA+0x44>
 800947e:	f640 0176 	movw	r1, #2166	@ 0x876
 8009482:	4876      	ldr	r0, [pc, #472]	@ (800965c <HAL_SPI_TransmitReceive_DMA+0x218>)
 8009484:	f7fb fb7e 	bl	8004b84 <assert_failed>

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800948e:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	685b      	ldr	r3, [r3, #4]
 8009494:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8009496:	7dfb      	ldrb	r3, [r7, #23]
 8009498:	2b01      	cmp	r3, #1
 800949a:	d00c      	beq.n	80094b6 <HAL_SPI_TransmitReceive_DMA+0x72>
 800949c:	693b      	ldr	r3, [r7, #16]
 800949e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80094a2:	d106      	bne.n	80094b2 <HAL_SPI_TransmitReceive_DMA+0x6e>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	689b      	ldr	r3, [r3, #8]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d102      	bne.n	80094b2 <HAL_SPI_TransmitReceive_DMA+0x6e>
 80094ac:	7dfb      	ldrb	r3, [r7, #23]
 80094ae:	2b04      	cmp	r3, #4
 80094b0:	d001      	beq.n	80094b6 <HAL_SPI_TransmitReceive_DMA+0x72>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80094b2:	2302      	movs	r3, #2
 80094b4:	e15f      	b.n	8009776 <HAL_SPI_TransmitReceive_DMA+0x332>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80094b6:	68bb      	ldr	r3, [r7, #8]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d005      	beq.n	80094c8 <HAL_SPI_TransmitReceive_DMA+0x84>
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d002      	beq.n	80094c8 <HAL_SPI_TransmitReceive_DMA+0x84>
 80094c2:	887b      	ldrh	r3, [r7, #2]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d101      	bne.n	80094cc <HAL_SPI_TransmitReceive_DMA+0x88>
  {
    return HAL_ERROR;
 80094c8:	2301      	movs	r3, #1
 80094ca:	e154      	b.n	8009776 <HAL_SPI_TransmitReceive_DMA+0x332>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80094d2:	2b01      	cmp	r3, #1
 80094d4:	d101      	bne.n	80094da <HAL_SPI_TransmitReceive_DMA+0x96>
 80094d6:	2302      	movs	r3, #2
 80094d8:	e14d      	b.n	8009776 <HAL_SPI_TransmitReceive_DMA+0x332>
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	2201      	movs	r2, #1
 80094de:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80094e8:	b2db      	uxtb	r3, r3
 80094ea:	2b04      	cmp	r3, #4
 80094ec:	d003      	beq.n	80094f6 <HAL_SPI_TransmitReceive_DMA+0xb2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	2205      	movs	r2, #5
 80094f2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	2200      	movs	r2, #0
 80094fa:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	68ba      	ldr	r2, [r7, #8]
 8009500:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	887a      	ldrh	r2, [r7, #2]
 8009506:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	887a      	ldrh	r2, [r7, #2]
 800950c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	687a      	ldr	r2, [r7, #4]
 8009512:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	887a      	ldrh	r2, [r7, #2]
 8009518:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	887a      	ldrh	r2, [r7, #2]
 8009520:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	2200      	movs	r2, #0
 8009528:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	2200      	movs	r2, #0
 800952e:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	685a      	ldr	r2, [r3, #4]
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	f422 42c0 	bic.w	r2, r2, #24576	@ 0x6000
 800953e:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	68db      	ldr	r3, [r3, #12]
 8009544:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009548:	d908      	bls.n	800955c <HAL_SPI_TransmitReceive_DMA+0x118>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	685a      	ldr	r2, [r3, #4]
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009558:	605a      	str	r2, [r3, #4]
 800955a:	e06f      	b.n	800963c <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	685a      	ldr	r2, [r3, #4]
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800956a:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009570:	699b      	ldr	r3, [r3, #24]
 8009572:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009576:	d126      	bne.n	80095c6 <HAL_SPI_TransmitReceive_DMA+0x182>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 800957c:	f003 0301 	and.w	r3, r3, #1
 8009580:	2b00      	cmp	r3, #0
 8009582:	d10f      	bne.n	80095a4 <HAL_SPI_TransmitReceive_DMA+0x160>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	685a      	ldr	r2, [r3, #4]
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8009592:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009598:	b29b      	uxth	r3, r3
 800959a:	085b      	lsrs	r3, r3, #1
 800959c:	b29a      	uxth	r2, r3
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80095a2:	e010      	b.n	80095c6 <HAL_SPI_TransmitReceive_DMA+0x182>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	685a      	ldr	r2, [r3, #4]
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80095b2:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80095b8:	b29b      	uxth	r3, r3
 80095ba:	085b      	lsrs	r3, r3, #1
 80095bc:	b29b      	uxth	r3, r3
 80095be:	3301      	adds	r3, #1
 80095c0:	b29a      	uxth	r2, r3
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80095ca:	699b      	ldr	r3, [r3, #24]
 80095cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80095d0:	d134      	bne.n	800963c <HAL_SPI_TransmitReceive_DMA+0x1f8>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	685a      	ldr	r2, [r3, #4]
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80095e0:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80095e8:	b29b      	uxth	r3, r3
 80095ea:	f003 0301 	and.w	r3, r3, #1
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d111      	bne.n	8009616 <HAL_SPI_TransmitReceive_DMA+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	685a      	ldr	r2, [r3, #4]
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009600:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009608:	b29b      	uxth	r3, r3
 800960a:	085b      	lsrs	r3, r3, #1
 800960c:	b29a      	uxth	r2, r3
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8009614:	e012      	b.n	800963c <HAL_SPI_TransmitReceive_DMA+0x1f8>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	685a      	ldr	r2, [r3, #4]
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009624:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800962c:	b29b      	uxth	r3, r3
 800962e:	085b      	lsrs	r3, r3, #1
 8009630:	b29b      	uxth	r3, r3
 8009632:	3301      	adds	r3, #1
 8009634:	b29a      	uxth	r2, r3
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009642:	b2db      	uxtb	r3, r3
 8009644:	2b04      	cmp	r3, #4
 8009646:	d10f      	bne.n	8009668 <HAL_SPI_TransmitReceive_DMA+0x224>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800964c:	4a04      	ldr	r2, [pc, #16]	@ (8009660 <HAL_SPI_TransmitReceive_DMA+0x21c>)
 800964e:	631a      	str	r2, [r3, #48]	@ 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009654:	4a03      	ldr	r2, [pc, #12]	@ (8009664 <HAL_SPI_TransmitReceive_DMA+0x220>)
 8009656:	62da      	str	r2, [r3, #44]	@ 0x2c
 8009658:	e00e      	b.n	8009678 <HAL_SPI_TransmitReceive_DMA+0x234>
 800965a:	bf00      	nop
 800965c:	0800f9fc 	.word	0x0800f9fc
 8009660:	08009b1d 	.word	0x08009b1d
 8009664:	080099e5 	.word	0x080099e5
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800966c:	4a44      	ldr	r2, [pc, #272]	@ (8009780 <HAL_SPI_TransmitReceive_DMA+0x33c>)
 800966e:	631a      	str	r2, [r3, #48]	@ 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009674:	4a43      	ldr	r2, [pc, #268]	@ (8009784 <HAL_SPI_TransmitReceive_DMA+0x340>)
 8009676:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800967c:	4a42      	ldr	r2, [pc, #264]	@ (8009788 <HAL_SPI_TransmitReceive_DMA+0x344>)
 800967e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009684:	2200      	movs	r2, #0
 8009686:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	330c      	adds	r3, #12
 8009692:	4619      	mov	r1, r3
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009698:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80096a0:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80096a2:	f7fc fb9d 	bl	8005de0 <HAL_DMA_Start_IT>
 80096a6:	4603      	mov	r3, r0
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d00b      	beq.n	80096c4 <HAL_SPI_TransmitReceive_DMA+0x280>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80096b0:	f043 0210 	orr.w	r2, r3, #16
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	2200      	movs	r2, #0
 80096bc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 80096c0:	2301      	movs	r3, #1
 80096c2:	e058      	b.n	8009776 <HAL_SPI_TransmitReceive_DMA+0x332>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	685a      	ldr	r2, [r3, #4]
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	f042 0201 	orr.w	r2, r2, #1
 80096d2:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096d8:	2200      	movs	r2, #0
 80096da:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096e0:	2200      	movs	r2, #0
 80096e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096e8:	2200      	movs	r2, #0
 80096ea:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096f0:	2200      	movs	r2, #0
 80096f2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096fc:	4619      	mov	r1, r3
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	330c      	adds	r3, #12
 8009704:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800970a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800970c:	f7fc fb68 	bl	8005de0 <HAL_DMA_Start_IT>
 8009710:	4603      	mov	r3, r0
 8009712:	2b00      	cmp	r3, #0
 8009714:	d00b      	beq.n	800972e <HAL_SPI_TransmitReceive_DMA+0x2ea>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800971a:	f043 0210 	orr.w	r2, r3, #16
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	2200      	movs	r2, #0
 8009726:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800972a:	2301      	movs	r3, #1
 800972c:	e023      	b.n	8009776 <HAL_SPI_TransmitReceive_DMA+0x332>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009738:	2b40      	cmp	r3, #64	@ 0x40
 800973a:	d007      	beq.n	800974c <HAL_SPI_TransmitReceive_DMA+0x308>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	681a      	ldr	r2, [r3, #0]
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800974a:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	2200      	movs	r2, #0
 8009750:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	685a      	ldr	r2, [r3, #4]
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	f042 0220 	orr.w	r2, r2, #32
 8009762:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	685a      	ldr	r2, [r3, #4]
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	f042 0202 	orr.w	r2, r2, #2
 8009772:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8009774:	2300      	movs	r3, #0
}
 8009776:	4618      	mov	r0, r3
 8009778:	3718      	adds	r7, #24
 800977a:	46bd      	mov	sp, r7
 800977c:	bd80      	pop	{r7, pc}
 800977e:	bf00      	nop
 8009780:	08009b39 	.word	0x08009b39
 8009784:	08009a8d 	.word	0x08009a8d
 8009788:	08009b55 	.word	0x08009b55

0800978c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800978c:	b580      	push	{r7, lr}
 800978e:	b088      	sub	sp, #32
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	685b      	ldr	r3, [r3, #4]
 800979a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	689b      	ldr	r3, [r3, #8]
 80097a2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80097a4:	69bb      	ldr	r3, [r7, #24]
 80097a6:	099b      	lsrs	r3, r3, #6
 80097a8:	f003 0301 	and.w	r3, r3, #1
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d10f      	bne.n	80097d0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80097b0:	69bb      	ldr	r3, [r7, #24]
 80097b2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d00a      	beq.n	80097d0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80097ba:	69fb      	ldr	r3, [r7, #28]
 80097bc:	099b      	lsrs	r3, r3, #6
 80097be:	f003 0301 	and.w	r3, r3, #1
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d004      	beq.n	80097d0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80097ca:	6878      	ldr	r0, [r7, #4]
 80097cc:	4798      	blx	r3
    return;
 80097ce:	e0d7      	b.n	8009980 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80097d0:	69bb      	ldr	r3, [r7, #24]
 80097d2:	085b      	lsrs	r3, r3, #1
 80097d4:	f003 0301 	and.w	r3, r3, #1
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d00a      	beq.n	80097f2 <HAL_SPI_IRQHandler+0x66>
 80097dc:	69fb      	ldr	r3, [r7, #28]
 80097de:	09db      	lsrs	r3, r3, #7
 80097e0:	f003 0301 	and.w	r3, r3, #1
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d004      	beq.n	80097f2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80097ec:	6878      	ldr	r0, [r7, #4]
 80097ee:	4798      	blx	r3
    return;
 80097f0:	e0c6      	b.n	8009980 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80097f2:	69bb      	ldr	r3, [r7, #24]
 80097f4:	095b      	lsrs	r3, r3, #5
 80097f6:	f003 0301 	and.w	r3, r3, #1
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d10c      	bne.n	8009818 <HAL_SPI_IRQHandler+0x8c>
 80097fe:	69bb      	ldr	r3, [r7, #24]
 8009800:	099b      	lsrs	r3, r3, #6
 8009802:	f003 0301 	and.w	r3, r3, #1
 8009806:	2b00      	cmp	r3, #0
 8009808:	d106      	bne.n	8009818 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800980a:	69bb      	ldr	r3, [r7, #24]
 800980c:	0a1b      	lsrs	r3, r3, #8
 800980e:	f003 0301 	and.w	r3, r3, #1
 8009812:	2b00      	cmp	r3, #0
 8009814:	f000 80b4 	beq.w	8009980 <HAL_SPI_IRQHandler+0x1f4>
 8009818:	69fb      	ldr	r3, [r7, #28]
 800981a:	095b      	lsrs	r3, r3, #5
 800981c:	f003 0301 	and.w	r3, r3, #1
 8009820:	2b00      	cmp	r3, #0
 8009822:	f000 80ad 	beq.w	8009980 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8009826:	69bb      	ldr	r3, [r7, #24]
 8009828:	099b      	lsrs	r3, r3, #6
 800982a:	f003 0301 	and.w	r3, r3, #1
 800982e:	2b00      	cmp	r3, #0
 8009830:	d023      	beq.n	800987a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009838:	b2db      	uxtb	r3, r3
 800983a:	2b03      	cmp	r3, #3
 800983c:	d011      	beq.n	8009862 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009842:	f043 0204 	orr.w	r2, r3, #4
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800984a:	2300      	movs	r3, #0
 800984c:	617b      	str	r3, [r7, #20]
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	68db      	ldr	r3, [r3, #12]
 8009854:	617b      	str	r3, [r7, #20]
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	689b      	ldr	r3, [r3, #8]
 800985c:	617b      	str	r3, [r7, #20]
 800985e:	697b      	ldr	r3, [r7, #20]
 8009860:	e00b      	b.n	800987a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009862:	2300      	movs	r3, #0
 8009864:	613b      	str	r3, [r7, #16]
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	68db      	ldr	r3, [r3, #12]
 800986c:	613b      	str	r3, [r7, #16]
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	689b      	ldr	r3, [r3, #8]
 8009874:	613b      	str	r3, [r7, #16]
 8009876:	693b      	ldr	r3, [r7, #16]
        return;
 8009878:	e082      	b.n	8009980 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800987a:	69bb      	ldr	r3, [r7, #24]
 800987c:	095b      	lsrs	r3, r3, #5
 800987e:	f003 0301 	and.w	r3, r3, #1
 8009882:	2b00      	cmp	r3, #0
 8009884:	d014      	beq.n	80098b0 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800988a:	f043 0201 	orr.w	r2, r3, #1
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009892:	2300      	movs	r3, #0
 8009894:	60fb      	str	r3, [r7, #12]
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	689b      	ldr	r3, [r3, #8]
 800989c:	60fb      	str	r3, [r7, #12]
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	681a      	ldr	r2, [r3, #0]
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80098ac:	601a      	str	r2, [r3, #0]
 80098ae:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80098b0:	69bb      	ldr	r3, [r7, #24]
 80098b2:	0a1b      	lsrs	r3, r3, #8
 80098b4:	f003 0301 	and.w	r3, r3, #1
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d00c      	beq.n	80098d6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80098c0:	f043 0208 	orr.w	r2, r3, #8
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80098c8:	2300      	movs	r3, #0
 80098ca:	60bb      	str	r3, [r7, #8]
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	689b      	ldr	r3, [r3, #8]
 80098d2:	60bb      	str	r3, [r7, #8]
 80098d4:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d04f      	beq.n	800997e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	685a      	ldr	r2, [r3, #4]
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80098ec:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	2201      	movs	r2, #1
 80098f2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80098f6:	69fb      	ldr	r3, [r7, #28]
 80098f8:	f003 0302 	and.w	r3, r3, #2
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d104      	bne.n	800990a <HAL_SPI_IRQHandler+0x17e>
 8009900:	69fb      	ldr	r3, [r7, #28]
 8009902:	f003 0301 	and.w	r3, r3, #1
 8009906:	2b00      	cmp	r3, #0
 8009908:	d034      	beq.n	8009974 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	685a      	ldr	r2, [r3, #4]
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	f022 0203 	bic.w	r2, r2, #3
 8009918:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800991e:	2b00      	cmp	r3, #0
 8009920:	d011      	beq.n	8009946 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009926:	4a18      	ldr	r2, [pc, #96]	@ (8009988 <HAL_SPI_IRQHandler+0x1fc>)
 8009928:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800992e:	4618      	mov	r0, r3
 8009930:	f7fc fac4 	bl	8005ebc <HAL_DMA_Abort_IT>
 8009934:	4603      	mov	r3, r0
 8009936:	2b00      	cmp	r3, #0
 8009938:	d005      	beq.n	8009946 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800993e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800994a:	2b00      	cmp	r3, #0
 800994c:	d016      	beq.n	800997c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009952:	4a0d      	ldr	r2, [pc, #52]	@ (8009988 <HAL_SPI_IRQHandler+0x1fc>)
 8009954:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800995a:	4618      	mov	r0, r3
 800995c:	f7fc faae 	bl	8005ebc <HAL_DMA_Abort_IT>
 8009960:	4603      	mov	r3, r0
 8009962:	2b00      	cmp	r3, #0
 8009964:	d00a      	beq.n	800997c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800996a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8009972:	e003      	b.n	800997c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8009974:	6878      	ldr	r0, [r7, #4]
 8009976:	f7fb f871 	bl	8004a5c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800997a:	e000      	b.n	800997e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800997c:	bf00      	nop
    return;
 800997e:	bf00      	nop
  }
}
 8009980:	3720      	adds	r7, #32
 8009982:	46bd      	mov	sp, r7
 8009984:	bd80      	pop	{r7, pc}
 8009986:	bf00      	nop
 8009988:	08009b95 	.word	0x08009b95

0800998c <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800998c:	b480      	push	{r7}
 800998e:	b083      	sub	sp, #12
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8009994:	bf00      	nop
 8009996:	370c      	adds	r7, #12
 8009998:	46bd      	mov	sp, r7
 800999a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999e:	4770      	bx	lr

080099a0 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80099a0:	b480      	push	{r7}
 80099a2:	b083      	sub	sp, #12
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80099a8:	bf00      	nop
 80099aa:	370c      	adds	r7, #12
 80099ac:	46bd      	mov	sp, r7
 80099ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b2:	4770      	bx	lr

080099b4 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80099b4:	b480      	push	{r7}
 80099b6:	b083      	sub	sp, #12
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 80099bc:	bf00      	nop
 80099be:	370c      	adds	r7, #12
 80099c0:	46bd      	mov	sp, r7
 80099c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c6:	4770      	bx	lr

080099c8 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 80099c8:	b480      	push	{r7}
 80099ca:	b083      	sub	sp, #12
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80099d6:	b2db      	uxtb	r3, r3
}
 80099d8:	4618      	mov	r0, r3
 80099da:	370c      	adds	r7, #12
 80099dc:	46bd      	mov	sp, r7
 80099de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e2:	4770      	bx	lr

080099e4 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b084      	sub	sp, #16
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099f0:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80099f2:	f7fb fef1 	bl	80057d8 <HAL_GetTick>
 80099f6:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	f003 0320 	and.w	r3, r3, #32
 8009a02:	2b20      	cmp	r3, #32
 8009a04:	d03c      	beq.n	8009a80 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	685a      	ldr	r2, [r3, #4]
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	f022 0220 	bic.w	r2, r2, #32
 8009a14:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	689b      	ldr	r3, [r3, #8]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d10d      	bne.n	8009a3a <SPI_DMAReceiveCplt+0x56>
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	685b      	ldr	r3, [r3, #4]
 8009a22:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009a26:	d108      	bne.n	8009a3a <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	685a      	ldr	r2, [r3, #4]
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	f022 0203 	bic.w	r2, r2, #3
 8009a36:	605a      	str	r2, [r3, #4]
 8009a38:	e007      	b.n	8009a4a <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	685a      	ldr	r2, [r3, #4]
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	f022 0201 	bic.w	r2, r2, #1
 8009a48:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8009a4a:	68ba      	ldr	r2, [r7, #8]
 8009a4c:	2164      	movs	r1, #100	@ 0x64
 8009a4e:	68f8      	ldr	r0, [r7, #12]
 8009a50:	f000 f9d4 	bl	8009dfc <SPI_EndRxTransaction>
 8009a54:	4603      	mov	r3, r0
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d002      	beq.n	8009a60 <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	2220      	movs	r2, #32
 8009a5e:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    hspi->RxXferCount = 0U;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	2200      	movs	r2, #0
 8009a64:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	2201      	movs	r2, #1
 8009a6c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d003      	beq.n	8009a80 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8009a78:	68f8      	ldr	r0, [r7, #12]
 8009a7a:	f7fa ffef 	bl	8004a5c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8009a7e:	e002      	b.n	8009a86 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8009a80:	68f8      	ldr	r0, [r7, #12]
 8009a82:	f7ff ff83 	bl	800998c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009a86:	3710      	adds	r7, #16
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	bd80      	pop	{r7, pc}

08009a8c <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	b084      	sub	sp, #16
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a98:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009a9a:	f7fb fe9d 	bl	80057d8 <HAL_GetTick>
 8009a9e:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	f003 0320 	and.w	r3, r3, #32
 8009aaa:	2b20      	cmp	r3, #32
 8009aac:	d030      	beq.n	8009b10 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	685a      	ldr	r2, [r3, #4]
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	f022 0220 	bic.w	r2, r2, #32
 8009abc:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8009abe:	68ba      	ldr	r2, [r7, #8]
 8009ac0:	2164      	movs	r1, #100	@ 0x64
 8009ac2:	68f8      	ldr	r0, [r7, #12]
 8009ac4:	f000 f9f2 	bl	8009eac <SPI_EndRxTxTransaction>
 8009ac8:	4603      	mov	r3, r0
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d005      	beq.n	8009ada <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009ad2:	f043 0220 	orr.w	r2, r3, #32
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	685a      	ldr	r2, [r3, #4]
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	f022 0203 	bic.w	r2, r2, #3
 8009ae8:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	2200      	movs	r2, #0
 8009aee:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->RxXferCount = 0U;
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	2200      	movs	r2, #0
 8009af4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	2201      	movs	r2, #1
 8009afc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d003      	beq.n	8009b10 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8009b08:	68f8      	ldr	r0, [r7, #12]
 8009b0a:	f7fa ffa7 	bl	8004a5c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8009b0e:	e002      	b.n	8009b16 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8009b10:	68f8      	ldr	r0, [r7, #12]
 8009b12:	f7fa ff98 	bl	8004a46 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009b16:	3710      	adds	r7, #16
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	bd80      	pop	{r7, pc}

08009b1c <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	b084      	sub	sp, #16
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b28:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8009b2a:	68f8      	ldr	r0, [r7, #12]
 8009b2c:	f7ff ff38 	bl	80099a0 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009b30:	bf00      	nop
 8009b32:	3710      	adds	r7, #16
 8009b34:	46bd      	mov	sp, r7
 8009b36:	bd80      	pop	{r7, pc}

08009b38 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b084      	sub	sp, #16
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b44:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8009b46:	68f8      	ldr	r0, [r7, #12]
 8009b48:	f7ff ff34 	bl	80099b4 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009b4c:	bf00      	nop
 8009b4e:	3710      	adds	r7, #16
 8009b50:	46bd      	mov	sp, r7
 8009b52:	bd80      	pop	{r7, pc}

08009b54 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8009b54:	b580      	push	{r7, lr}
 8009b56:	b084      	sub	sp, #16
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b60:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	685a      	ldr	r2, [r3, #4]
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	f022 0203 	bic.w	r2, r2, #3
 8009b70:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009b76:	f043 0210 	orr.w	r2, r3, #16
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	2201      	movs	r2, #1
 8009b82:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009b86:	68f8      	ldr	r0, [r7, #12]
 8009b88:	f7fa ff68 	bl	8004a5c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009b8c:	bf00      	nop
 8009b8e:	3710      	adds	r7, #16
 8009b90:	46bd      	mov	sp, r7
 8009b92:	bd80      	pop	{r7, pc}

08009b94 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b084      	sub	sp, #16
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ba0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	2200      	movs	r2, #0
 8009ba6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	2200      	movs	r2, #0
 8009bae:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009bb0:	68f8      	ldr	r0, [r7, #12]
 8009bb2:	f7fa ff53 	bl	8004a5c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009bb6:	bf00      	nop
 8009bb8:	3710      	adds	r7, #16
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	bd80      	pop	{r7, pc}
	...

08009bc0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b088      	sub	sp, #32
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	60f8      	str	r0, [r7, #12]
 8009bc8:	60b9      	str	r1, [r7, #8]
 8009bca:	603b      	str	r3, [r7, #0]
 8009bcc:	4613      	mov	r3, r2
 8009bce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009bd0:	f7fb fe02 	bl	80057d8 <HAL_GetTick>
 8009bd4:	4602      	mov	r2, r0
 8009bd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bd8:	1a9b      	subs	r3, r3, r2
 8009bda:	683a      	ldr	r2, [r7, #0]
 8009bdc:	4413      	add	r3, r2
 8009bde:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009be0:	f7fb fdfa 	bl	80057d8 <HAL_GetTick>
 8009be4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009be6:	4b39      	ldr	r3, [pc, #228]	@ (8009ccc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	015b      	lsls	r3, r3, #5
 8009bec:	0d1b      	lsrs	r3, r3, #20
 8009bee:	69fa      	ldr	r2, [r7, #28]
 8009bf0:	fb02 f303 	mul.w	r3, r2, r3
 8009bf4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009bf6:	e054      	b.n	8009ca2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bfe:	d050      	beq.n	8009ca2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009c00:	f7fb fdea 	bl	80057d8 <HAL_GetTick>
 8009c04:	4602      	mov	r2, r0
 8009c06:	69bb      	ldr	r3, [r7, #24]
 8009c08:	1ad3      	subs	r3, r2, r3
 8009c0a:	69fa      	ldr	r2, [r7, #28]
 8009c0c:	429a      	cmp	r2, r3
 8009c0e:	d902      	bls.n	8009c16 <SPI_WaitFlagStateUntilTimeout+0x56>
 8009c10:	69fb      	ldr	r3, [r7, #28]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d13d      	bne.n	8009c92 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	685a      	ldr	r2, [r3, #4]
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009c24:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	685b      	ldr	r3, [r3, #4]
 8009c2a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009c2e:	d111      	bne.n	8009c54 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	689b      	ldr	r3, [r3, #8]
 8009c34:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009c38:	d004      	beq.n	8009c44 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	689b      	ldr	r3, [r3, #8]
 8009c3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009c42:	d107      	bne.n	8009c54 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	681a      	ldr	r2, [r3, #0]
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009c52:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009c5c:	d10f      	bne.n	8009c7e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	681a      	ldr	r2, [r3, #0]
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009c6c:	601a      	str	r2, [r3, #0]
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	681a      	ldr	r2, [r3, #0]
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009c7c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	2201      	movs	r2, #1
 8009c82:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	2200      	movs	r2, #0
 8009c8a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8009c8e:	2303      	movs	r3, #3
 8009c90:	e017      	b.n	8009cc2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009c92:	697b      	ldr	r3, [r7, #20]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d101      	bne.n	8009c9c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009c98:	2300      	movs	r3, #0
 8009c9a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009c9c:	697b      	ldr	r3, [r7, #20]
 8009c9e:	3b01      	subs	r3, #1
 8009ca0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	689a      	ldr	r2, [r3, #8]
 8009ca8:	68bb      	ldr	r3, [r7, #8]
 8009caa:	4013      	ands	r3, r2
 8009cac:	68ba      	ldr	r2, [r7, #8]
 8009cae:	429a      	cmp	r2, r3
 8009cb0:	bf0c      	ite	eq
 8009cb2:	2301      	moveq	r3, #1
 8009cb4:	2300      	movne	r3, #0
 8009cb6:	b2db      	uxtb	r3, r3
 8009cb8:	461a      	mov	r2, r3
 8009cba:	79fb      	ldrb	r3, [r7, #7]
 8009cbc:	429a      	cmp	r2, r3
 8009cbe:	d19b      	bne.n	8009bf8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009cc0:	2300      	movs	r3, #0
}
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	3720      	adds	r7, #32
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	bd80      	pop	{r7, pc}
 8009cca:	bf00      	nop
 8009ccc:	20000014 	.word	0x20000014

08009cd0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b08a      	sub	sp, #40	@ 0x28
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	60f8      	str	r0, [r7, #12]
 8009cd8:	60b9      	str	r1, [r7, #8]
 8009cda:	607a      	str	r2, [r7, #4]
 8009cdc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8009cde:	2300      	movs	r3, #0
 8009ce0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8009ce2:	f7fb fd79 	bl	80057d8 <HAL_GetTick>
 8009ce6:	4602      	mov	r2, r0
 8009ce8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cea:	1a9b      	subs	r3, r3, r2
 8009cec:	683a      	ldr	r2, [r7, #0]
 8009cee:	4413      	add	r3, r2
 8009cf0:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8009cf2:	f7fb fd71 	bl	80057d8 <HAL_GetTick>
 8009cf6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	330c      	adds	r3, #12
 8009cfe:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009d00:	4b3d      	ldr	r3, [pc, #244]	@ (8009df8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8009d02:	681a      	ldr	r2, [r3, #0]
 8009d04:	4613      	mov	r3, r2
 8009d06:	009b      	lsls	r3, r3, #2
 8009d08:	4413      	add	r3, r2
 8009d0a:	00da      	lsls	r2, r3, #3
 8009d0c:	1ad3      	subs	r3, r2, r3
 8009d0e:	0d1b      	lsrs	r3, r3, #20
 8009d10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009d12:	fb02 f303 	mul.w	r3, r2, r3
 8009d16:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8009d18:	e060      	b.n	8009ddc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8009d1a:	68bb      	ldr	r3, [r7, #8]
 8009d1c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8009d20:	d107      	bne.n	8009d32 <SPI_WaitFifoStateUntilTimeout+0x62>
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d104      	bne.n	8009d32 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8009d28:	69fb      	ldr	r3, [r7, #28]
 8009d2a:	781b      	ldrb	r3, [r3, #0]
 8009d2c:	b2db      	uxtb	r3, r3
 8009d2e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8009d30:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8009d32:	683b      	ldr	r3, [r7, #0]
 8009d34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d38:	d050      	beq.n	8009ddc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009d3a:	f7fb fd4d 	bl	80057d8 <HAL_GetTick>
 8009d3e:	4602      	mov	r2, r0
 8009d40:	6a3b      	ldr	r3, [r7, #32]
 8009d42:	1ad3      	subs	r3, r2, r3
 8009d44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009d46:	429a      	cmp	r2, r3
 8009d48:	d902      	bls.n	8009d50 <SPI_WaitFifoStateUntilTimeout+0x80>
 8009d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d13d      	bne.n	8009dcc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	685a      	ldr	r2, [r3, #4]
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009d5e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	685b      	ldr	r3, [r3, #4]
 8009d64:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009d68:	d111      	bne.n	8009d8e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	689b      	ldr	r3, [r3, #8]
 8009d6e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009d72:	d004      	beq.n	8009d7e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	689b      	ldr	r3, [r3, #8]
 8009d78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009d7c:	d107      	bne.n	8009d8e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	681a      	ldr	r2, [r3, #0]
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009d8c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d92:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009d96:	d10f      	bne.n	8009db8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	681a      	ldr	r2, [r3, #0]
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009da6:	601a      	str	r2, [r3, #0]
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	681a      	ldr	r2, [r3, #0]
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009db6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	2201      	movs	r2, #1
 8009dbc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8009dc8:	2303      	movs	r3, #3
 8009dca:	e010      	b.n	8009dee <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009dcc:	69bb      	ldr	r3, [r7, #24]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d101      	bne.n	8009dd6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8009dd6:	69bb      	ldr	r3, [r7, #24]
 8009dd8:	3b01      	subs	r3, #1
 8009dda:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	689a      	ldr	r2, [r3, #8]
 8009de2:	68bb      	ldr	r3, [r7, #8]
 8009de4:	4013      	ands	r3, r2
 8009de6:	687a      	ldr	r2, [r7, #4]
 8009de8:	429a      	cmp	r2, r3
 8009dea:	d196      	bne.n	8009d1a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8009dec:	2300      	movs	r3, #0
}
 8009dee:	4618      	mov	r0, r3
 8009df0:	3728      	adds	r7, #40	@ 0x28
 8009df2:	46bd      	mov	sp, r7
 8009df4:	bd80      	pop	{r7, pc}
 8009df6:	bf00      	nop
 8009df8:	20000014 	.word	0x20000014

08009dfc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009dfc:	b580      	push	{r7, lr}
 8009dfe:	b086      	sub	sp, #24
 8009e00:	af02      	add	r7, sp, #8
 8009e02:	60f8      	str	r0, [r7, #12]
 8009e04:	60b9      	str	r1, [r7, #8]
 8009e06:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	685b      	ldr	r3, [r3, #4]
 8009e0c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009e10:	d111      	bne.n	8009e36 <SPI_EndRxTransaction+0x3a>
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	689b      	ldr	r3, [r3, #8]
 8009e16:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009e1a:	d004      	beq.n	8009e26 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	689b      	ldr	r3, [r3, #8]
 8009e20:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009e24:	d107      	bne.n	8009e36 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	681a      	ldr	r2, [r3, #0]
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009e34:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	9300      	str	r3, [sp, #0]
 8009e3a:	68bb      	ldr	r3, [r7, #8]
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	2180      	movs	r1, #128	@ 0x80
 8009e40:	68f8      	ldr	r0, [r7, #12]
 8009e42:	f7ff febd 	bl	8009bc0 <SPI_WaitFlagStateUntilTimeout>
 8009e46:	4603      	mov	r3, r0
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d007      	beq.n	8009e5c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009e50:	f043 0220 	orr.w	r2, r3, #32
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009e58:	2303      	movs	r3, #3
 8009e5a:	e023      	b.n	8009ea4 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	685b      	ldr	r3, [r3, #4]
 8009e60:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009e64:	d11d      	bne.n	8009ea2 <SPI_EndRxTransaction+0xa6>
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	689b      	ldr	r3, [r3, #8]
 8009e6a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009e6e:	d004      	beq.n	8009e7a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	689b      	ldr	r3, [r3, #8]
 8009e74:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009e78:	d113      	bne.n	8009ea2 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	9300      	str	r3, [sp, #0]
 8009e7e:	68bb      	ldr	r3, [r7, #8]
 8009e80:	2200      	movs	r2, #0
 8009e82:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8009e86:	68f8      	ldr	r0, [r7, #12]
 8009e88:	f7ff ff22 	bl	8009cd0 <SPI_WaitFifoStateUntilTimeout>
 8009e8c:	4603      	mov	r3, r0
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d007      	beq.n	8009ea2 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009e96:	f043 0220 	orr.w	r2, r3, #32
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8009e9e:	2303      	movs	r3, #3
 8009ea0:	e000      	b.n	8009ea4 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8009ea2:	2300      	movs	r3, #0
}
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	3710      	adds	r7, #16
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	bd80      	pop	{r7, pc}

08009eac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009eac:	b580      	push	{r7, lr}
 8009eae:	b086      	sub	sp, #24
 8009eb0:	af02      	add	r7, sp, #8
 8009eb2:	60f8      	str	r0, [r7, #12]
 8009eb4:	60b9      	str	r1, [r7, #8]
 8009eb6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	9300      	str	r3, [sp, #0]
 8009ebc:	68bb      	ldr	r3, [r7, #8]
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8009ec4:	68f8      	ldr	r0, [r7, #12]
 8009ec6:	f7ff ff03 	bl	8009cd0 <SPI_WaitFifoStateUntilTimeout>
 8009eca:	4603      	mov	r3, r0
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d007      	beq.n	8009ee0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009ed4:	f043 0220 	orr.w	r2, r3, #32
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009edc:	2303      	movs	r3, #3
 8009ede:	e027      	b.n	8009f30 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	9300      	str	r3, [sp, #0]
 8009ee4:	68bb      	ldr	r3, [r7, #8]
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	2180      	movs	r1, #128	@ 0x80
 8009eea:	68f8      	ldr	r0, [r7, #12]
 8009eec:	f7ff fe68 	bl	8009bc0 <SPI_WaitFlagStateUntilTimeout>
 8009ef0:	4603      	mov	r3, r0
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d007      	beq.n	8009f06 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009efa:	f043 0220 	orr.w	r2, r3, #32
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009f02:	2303      	movs	r3, #3
 8009f04:	e014      	b.n	8009f30 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	9300      	str	r3, [sp, #0]
 8009f0a:	68bb      	ldr	r3, [r7, #8]
 8009f0c:	2200      	movs	r2, #0
 8009f0e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8009f12:	68f8      	ldr	r0, [r7, #12]
 8009f14:	f7ff fedc 	bl	8009cd0 <SPI_WaitFifoStateUntilTimeout>
 8009f18:	4603      	mov	r3, r0
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d007      	beq.n	8009f2e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009f22:	f043 0220 	orr.w	r2, r3, #32
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009f2a:	2303      	movs	r3, #3
 8009f2c:	e000      	b.n	8009f30 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8009f2e:	2300      	movs	r3, #0
}
 8009f30:	4618      	mov	r0, r3
 8009f32:	3710      	adds	r7, #16
 8009f34:	46bd      	mov	sp, r7
 8009f36:	bd80      	pop	{r7, pc}

08009f38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b082      	sub	sp, #8
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d101      	bne.n	8009f4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009f46:	2301      	movs	r3, #1
 8009f48:	e0e6      	b.n	800a118 <HAL_TIM_Base_Init+0x1e0>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	4a74      	ldr	r2, [pc, #464]	@ (800a120 <HAL_TIM_Base_Init+0x1e8>)
 8009f50:	4293      	cmp	r3, r2
 8009f52:	d036      	beq.n	8009fc2 <HAL_TIM_Base_Init+0x8a>
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009f5c:	d031      	beq.n	8009fc2 <HAL_TIM_Base_Init+0x8a>
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	4a70      	ldr	r2, [pc, #448]	@ (800a124 <HAL_TIM_Base_Init+0x1ec>)
 8009f64:	4293      	cmp	r3, r2
 8009f66:	d02c      	beq.n	8009fc2 <HAL_TIM_Base_Init+0x8a>
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	4a6e      	ldr	r2, [pc, #440]	@ (800a128 <HAL_TIM_Base_Init+0x1f0>)
 8009f6e:	4293      	cmp	r3, r2
 8009f70:	d027      	beq.n	8009fc2 <HAL_TIM_Base_Init+0x8a>
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	4a6d      	ldr	r2, [pc, #436]	@ (800a12c <HAL_TIM_Base_Init+0x1f4>)
 8009f78:	4293      	cmp	r3, r2
 8009f7a:	d022      	beq.n	8009fc2 <HAL_TIM_Base_Init+0x8a>
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	4a6b      	ldr	r2, [pc, #428]	@ (800a130 <HAL_TIM_Base_Init+0x1f8>)
 8009f82:	4293      	cmp	r3, r2
 8009f84:	d01d      	beq.n	8009fc2 <HAL_TIM_Base_Init+0x8a>
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	4a6a      	ldr	r2, [pc, #424]	@ (800a134 <HAL_TIM_Base_Init+0x1fc>)
 8009f8c:	4293      	cmp	r3, r2
 8009f8e:	d018      	beq.n	8009fc2 <HAL_TIM_Base_Init+0x8a>
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	4a68      	ldr	r2, [pc, #416]	@ (800a138 <HAL_TIM_Base_Init+0x200>)
 8009f96:	4293      	cmp	r3, r2
 8009f98:	d013      	beq.n	8009fc2 <HAL_TIM_Base_Init+0x8a>
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	4a67      	ldr	r2, [pc, #412]	@ (800a13c <HAL_TIM_Base_Init+0x204>)
 8009fa0:	4293      	cmp	r3, r2
 8009fa2:	d00e      	beq.n	8009fc2 <HAL_TIM_Base_Init+0x8a>
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	4a65      	ldr	r2, [pc, #404]	@ (800a140 <HAL_TIM_Base_Init+0x208>)
 8009faa:	4293      	cmp	r3, r2
 8009fac:	d009      	beq.n	8009fc2 <HAL_TIM_Base_Init+0x8a>
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	4a64      	ldr	r2, [pc, #400]	@ (800a144 <HAL_TIM_Base_Init+0x20c>)
 8009fb4:	4293      	cmp	r3, r2
 8009fb6:	d004      	beq.n	8009fc2 <HAL_TIM_Base_Init+0x8a>
 8009fb8:	f44f 718b 	mov.w	r1, #278	@ 0x116
 8009fbc:	4862      	ldr	r0, [pc, #392]	@ (800a148 <HAL_TIM_Base_Init+0x210>)
 8009fbe:	f7fa fde1 	bl	8004b84 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	689b      	ldr	r3, [r3, #8]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d014      	beq.n	8009ff4 <HAL_TIM_Base_Init+0xbc>
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	689b      	ldr	r3, [r3, #8]
 8009fce:	2b10      	cmp	r3, #16
 8009fd0:	d010      	beq.n	8009ff4 <HAL_TIM_Base_Init+0xbc>
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	689b      	ldr	r3, [r3, #8]
 8009fd6:	2b20      	cmp	r3, #32
 8009fd8:	d00c      	beq.n	8009ff4 <HAL_TIM_Base_Init+0xbc>
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	689b      	ldr	r3, [r3, #8]
 8009fde:	2b40      	cmp	r3, #64	@ 0x40
 8009fe0:	d008      	beq.n	8009ff4 <HAL_TIM_Base_Init+0xbc>
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	689b      	ldr	r3, [r3, #8]
 8009fe6:	2b60      	cmp	r3, #96	@ 0x60
 8009fe8:	d004      	beq.n	8009ff4 <HAL_TIM_Base_Init+0xbc>
 8009fea:	f240 1117 	movw	r1, #279	@ 0x117
 8009fee:	4856      	ldr	r0, [pc, #344]	@ (800a148 <HAL_TIM_Base_Init+0x210>)
 8009ff0:	f7fa fdc8 	bl	8004b84 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	691b      	ldr	r3, [r3, #16]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d00e      	beq.n	800a01a <HAL_TIM_Base_Init+0xe2>
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	691b      	ldr	r3, [r3, #16]
 800a000:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a004:	d009      	beq.n	800a01a <HAL_TIM_Base_Init+0xe2>
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	691b      	ldr	r3, [r3, #16]
 800a00a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a00e:	d004      	beq.n	800a01a <HAL_TIM_Base_Init+0xe2>
 800a010:	f44f 718c 	mov.w	r1, #280	@ 0x118
 800a014:	484c      	ldr	r0, [pc, #304]	@ (800a148 <HAL_TIM_Base_Init+0x210>)
 800a016:	f7fa fdb5 	bl	8004b84 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a022:	d004      	beq.n	800a02e <HAL_TIM_Base_Init+0xf6>
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	4a40      	ldr	r2, [pc, #256]	@ (800a12c <HAL_TIM_Base_Init+0x1f4>)
 800a02a:	4293      	cmp	r3, r2
 800a02c:	d107      	bne.n	800a03e <HAL_TIM_Base_Init+0x106>
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	68db      	ldr	r3, [r3, #12]
 800a032:	2b00      	cmp	r3, #0
 800a034:	bf14      	ite	ne
 800a036:	2301      	movne	r3, #1
 800a038:	2300      	moveq	r3, #0
 800a03a:	b2db      	uxtb	r3, r3
 800a03c:	e00e      	b.n	800a05c <HAL_TIM_Base_Init+0x124>
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	68db      	ldr	r3, [r3, #12]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d006      	beq.n	800a054 <HAL_TIM_Base_Init+0x11c>
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	68db      	ldr	r3, [r3, #12]
 800a04a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a04e:	d201      	bcs.n	800a054 <HAL_TIM_Base_Init+0x11c>
 800a050:	2301      	movs	r3, #1
 800a052:	e000      	b.n	800a056 <HAL_TIM_Base_Init+0x11e>
 800a054:	2300      	movs	r3, #0
 800a056:	f003 0301 	and.w	r3, r3, #1
 800a05a:	b2db      	uxtb	r3, r3
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d104      	bne.n	800a06a <HAL_TIM_Base_Init+0x132>
 800a060:	f240 1119 	movw	r1, #281	@ 0x119
 800a064:	4838      	ldr	r0, [pc, #224]	@ (800a148 <HAL_TIM_Base_Init+0x210>)
 800a066:	f7fa fd8d 	bl	8004b84 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	699b      	ldr	r3, [r3, #24]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d008      	beq.n	800a084 <HAL_TIM_Base_Init+0x14c>
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	699b      	ldr	r3, [r3, #24]
 800a076:	2b80      	cmp	r3, #128	@ 0x80
 800a078:	d004      	beq.n	800a084 <HAL_TIM_Base_Init+0x14c>
 800a07a:	f44f 718d 	mov.w	r1, #282	@ 0x11a
 800a07e:	4832      	ldr	r0, [pc, #200]	@ (800a148 <HAL_TIM_Base_Init+0x210>)
 800a080:	f7fa fd80 	bl	8004b84 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a08a:	b2db      	uxtb	r3, r3
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d106      	bne.n	800a09e <HAL_TIM_Base_Init+0x166>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	2200      	movs	r2, #0
 800a094:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a098:	6878      	ldr	r0, [r7, #4]
 800a09a:	f7fb f9d1 	bl	8005440 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	2202      	movs	r2, #2
 800a0a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681a      	ldr	r2, [r3, #0]
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	3304      	adds	r3, #4
 800a0ae:	4619      	mov	r1, r3
 800a0b0:	4610      	mov	r0, r2
 800a0b2:	f001 ff43 	bl	800bf3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	2201      	movs	r2, #1
 800a0ba:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	2201      	movs	r2, #1
 800a0c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	2201      	movs	r2, #1
 800a0ca:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	2201      	movs	r2, #1
 800a0d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	2201      	movs	r2, #1
 800a0da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	2201      	movs	r2, #1
 800a0e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	2201      	movs	r2, #1
 800a0ea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	2201      	movs	r2, #1
 800a0f2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	2201      	movs	r2, #1
 800a0fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	2201      	movs	r2, #1
 800a102:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	2201      	movs	r2, #1
 800a10a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	2201      	movs	r2, #1
 800a112:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a116:	2300      	movs	r3, #0
}
 800a118:	4618      	mov	r0, r3
 800a11a:	3708      	adds	r7, #8
 800a11c:	46bd      	mov	sp, r7
 800a11e:	bd80      	pop	{r7, pc}
 800a120:	40012c00 	.word	0x40012c00
 800a124:	40000400 	.word	0x40000400
 800a128:	40000800 	.word	0x40000800
 800a12c:	40000c00 	.word	0x40000c00
 800a130:	40001000 	.word	0x40001000
 800a134:	40001400 	.word	0x40001400
 800a138:	40013400 	.word	0x40013400
 800a13c:	40014000 	.word	0x40014000
 800a140:	40014400 	.word	0x40014400
 800a144:	40014800 	.word	0x40014800
 800a148:	0800fa34 	.word	0x0800fa34

0800a14c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	b084      	sub	sp, #16
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	4a4a      	ldr	r2, [pc, #296]	@ (800a284 <HAL_TIM_Base_Start_IT+0x138>)
 800a15a:	4293      	cmp	r3, r2
 800a15c:	d036      	beq.n	800a1cc <HAL_TIM_Base_Start_IT+0x80>
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a166:	d031      	beq.n	800a1cc <HAL_TIM_Base_Start_IT+0x80>
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	4a46      	ldr	r2, [pc, #280]	@ (800a288 <HAL_TIM_Base_Start_IT+0x13c>)
 800a16e:	4293      	cmp	r3, r2
 800a170:	d02c      	beq.n	800a1cc <HAL_TIM_Base_Start_IT+0x80>
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	4a45      	ldr	r2, [pc, #276]	@ (800a28c <HAL_TIM_Base_Start_IT+0x140>)
 800a178:	4293      	cmp	r3, r2
 800a17a:	d027      	beq.n	800a1cc <HAL_TIM_Base_Start_IT+0x80>
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	4a43      	ldr	r2, [pc, #268]	@ (800a290 <HAL_TIM_Base_Start_IT+0x144>)
 800a182:	4293      	cmp	r3, r2
 800a184:	d022      	beq.n	800a1cc <HAL_TIM_Base_Start_IT+0x80>
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	4a42      	ldr	r2, [pc, #264]	@ (800a294 <HAL_TIM_Base_Start_IT+0x148>)
 800a18c:	4293      	cmp	r3, r2
 800a18e:	d01d      	beq.n	800a1cc <HAL_TIM_Base_Start_IT+0x80>
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	4a40      	ldr	r2, [pc, #256]	@ (800a298 <HAL_TIM_Base_Start_IT+0x14c>)
 800a196:	4293      	cmp	r3, r2
 800a198:	d018      	beq.n	800a1cc <HAL_TIM_Base_Start_IT+0x80>
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	4a3f      	ldr	r2, [pc, #252]	@ (800a29c <HAL_TIM_Base_Start_IT+0x150>)
 800a1a0:	4293      	cmp	r3, r2
 800a1a2:	d013      	beq.n	800a1cc <HAL_TIM_Base_Start_IT+0x80>
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	4a3d      	ldr	r2, [pc, #244]	@ (800a2a0 <HAL_TIM_Base_Start_IT+0x154>)
 800a1aa:	4293      	cmp	r3, r2
 800a1ac:	d00e      	beq.n	800a1cc <HAL_TIM_Base_Start_IT+0x80>
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	4a3c      	ldr	r2, [pc, #240]	@ (800a2a4 <HAL_TIM_Base_Start_IT+0x158>)
 800a1b4:	4293      	cmp	r3, r2
 800a1b6:	d009      	beq.n	800a1cc <HAL_TIM_Base_Start_IT+0x80>
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	4a3a      	ldr	r2, [pc, #232]	@ (800a2a8 <HAL_TIM_Base_Start_IT+0x15c>)
 800a1be:	4293      	cmp	r3, r2
 800a1c0:	d004      	beq.n	800a1cc <HAL_TIM_Base_Start_IT+0x80>
 800a1c2:	f240 11d3 	movw	r1, #467	@ 0x1d3
 800a1c6:	4839      	ldr	r0, [pc, #228]	@ (800a2ac <HAL_TIM_Base_Start_IT+0x160>)
 800a1c8:	f7fa fcdc 	bl	8004b84 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a1d2:	b2db      	uxtb	r3, r3
 800a1d4:	2b01      	cmp	r3, #1
 800a1d6:	d001      	beq.n	800a1dc <HAL_TIM_Base_Start_IT+0x90>
  {
    return HAL_ERROR;
 800a1d8:	2301      	movs	r3, #1
 800a1da:	e04f      	b.n	800a27c <HAL_TIM_Base_Start_IT+0x130>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	2202      	movs	r2, #2
 800a1e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	68da      	ldr	r2, [r3, #12]
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	f042 0201 	orr.w	r2, r2, #1
 800a1f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	4a22      	ldr	r2, [pc, #136]	@ (800a284 <HAL_TIM_Base_Start_IT+0x138>)
 800a1fa:	4293      	cmp	r3, r2
 800a1fc:	d01d      	beq.n	800a23a <HAL_TIM_Base_Start_IT+0xee>
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a206:	d018      	beq.n	800a23a <HAL_TIM_Base_Start_IT+0xee>
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	4a1e      	ldr	r2, [pc, #120]	@ (800a288 <HAL_TIM_Base_Start_IT+0x13c>)
 800a20e:	4293      	cmp	r3, r2
 800a210:	d013      	beq.n	800a23a <HAL_TIM_Base_Start_IT+0xee>
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	4a1d      	ldr	r2, [pc, #116]	@ (800a28c <HAL_TIM_Base_Start_IT+0x140>)
 800a218:	4293      	cmp	r3, r2
 800a21a:	d00e      	beq.n	800a23a <HAL_TIM_Base_Start_IT+0xee>
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	4a1b      	ldr	r2, [pc, #108]	@ (800a290 <HAL_TIM_Base_Start_IT+0x144>)
 800a222:	4293      	cmp	r3, r2
 800a224:	d009      	beq.n	800a23a <HAL_TIM_Base_Start_IT+0xee>
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	4a1c      	ldr	r2, [pc, #112]	@ (800a29c <HAL_TIM_Base_Start_IT+0x150>)
 800a22c:	4293      	cmp	r3, r2
 800a22e:	d004      	beq.n	800a23a <HAL_TIM_Base_Start_IT+0xee>
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	4a1a      	ldr	r2, [pc, #104]	@ (800a2a0 <HAL_TIM_Base_Start_IT+0x154>)
 800a236:	4293      	cmp	r3, r2
 800a238:	d115      	bne.n	800a266 <HAL_TIM_Base_Start_IT+0x11a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	689a      	ldr	r2, [r3, #8]
 800a240:	4b1b      	ldr	r3, [pc, #108]	@ (800a2b0 <HAL_TIM_Base_Start_IT+0x164>)
 800a242:	4013      	ands	r3, r2
 800a244:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	2b06      	cmp	r3, #6
 800a24a:	d015      	beq.n	800a278 <HAL_TIM_Base_Start_IT+0x12c>
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a252:	d011      	beq.n	800a278 <HAL_TIM_Base_Start_IT+0x12c>
    {
      __HAL_TIM_ENABLE(htim);
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	681a      	ldr	r2, [r3, #0]
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	f042 0201 	orr.w	r2, r2, #1
 800a262:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a264:	e008      	b.n	800a278 <HAL_TIM_Base_Start_IT+0x12c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	681a      	ldr	r2, [r3, #0]
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	f042 0201 	orr.w	r2, r2, #1
 800a274:	601a      	str	r2, [r3, #0]
 800a276:	e000      	b.n	800a27a <HAL_TIM_Base_Start_IT+0x12e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a278:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a27a:	2300      	movs	r3, #0
}
 800a27c:	4618      	mov	r0, r3
 800a27e:	3710      	adds	r7, #16
 800a280:	46bd      	mov	sp, r7
 800a282:	bd80      	pop	{r7, pc}
 800a284:	40012c00 	.word	0x40012c00
 800a288:	40000400 	.word	0x40000400
 800a28c:	40000800 	.word	0x40000800
 800a290:	40000c00 	.word	0x40000c00
 800a294:	40001000 	.word	0x40001000
 800a298:	40001400 	.word	0x40001400
 800a29c:	40013400 	.word	0x40013400
 800a2a0:	40014000 	.word	0x40014000
 800a2a4:	40014400 	.word	0x40014400
 800a2a8:	40014800 	.word	0x40014800
 800a2ac:	0800fa34 	.word	0x0800fa34
 800a2b0:	00010007 	.word	0x00010007

0800a2b4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	b082      	sub	sp, #8
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	4a31      	ldr	r2, [pc, #196]	@ (800a388 <HAL_TIM_Base_Stop_IT+0xd4>)
 800a2c2:	4293      	cmp	r3, r2
 800a2c4:	d036      	beq.n	800a334 <HAL_TIM_Base_Stop_IT+0x80>
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a2ce:	d031      	beq.n	800a334 <HAL_TIM_Base_Stop_IT+0x80>
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	4a2d      	ldr	r2, [pc, #180]	@ (800a38c <HAL_TIM_Base_Stop_IT+0xd8>)
 800a2d6:	4293      	cmp	r3, r2
 800a2d8:	d02c      	beq.n	800a334 <HAL_TIM_Base_Stop_IT+0x80>
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	4a2c      	ldr	r2, [pc, #176]	@ (800a390 <HAL_TIM_Base_Stop_IT+0xdc>)
 800a2e0:	4293      	cmp	r3, r2
 800a2e2:	d027      	beq.n	800a334 <HAL_TIM_Base_Stop_IT+0x80>
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	4a2a      	ldr	r2, [pc, #168]	@ (800a394 <HAL_TIM_Base_Stop_IT+0xe0>)
 800a2ea:	4293      	cmp	r3, r2
 800a2ec:	d022      	beq.n	800a334 <HAL_TIM_Base_Stop_IT+0x80>
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	4a29      	ldr	r2, [pc, #164]	@ (800a398 <HAL_TIM_Base_Stop_IT+0xe4>)
 800a2f4:	4293      	cmp	r3, r2
 800a2f6:	d01d      	beq.n	800a334 <HAL_TIM_Base_Stop_IT+0x80>
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	4a27      	ldr	r2, [pc, #156]	@ (800a39c <HAL_TIM_Base_Stop_IT+0xe8>)
 800a2fe:	4293      	cmp	r3, r2
 800a300:	d018      	beq.n	800a334 <HAL_TIM_Base_Stop_IT+0x80>
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	4a26      	ldr	r2, [pc, #152]	@ (800a3a0 <HAL_TIM_Base_Stop_IT+0xec>)
 800a308:	4293      	cmp	r3, r2
 800a30a:	d013      	beq.n	800a334 <HAL_TIM_Base_Stop_IT+0x80>
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	4a24      	ldr	r2, [pc, #144]	@ (800a3a4 <HAL_TIM_Base_Stop_IT+0xf0>)
 800a312:	4293      	cmp	r3, r2
 800a314:	d00e      	beq.n	800a334 <HAL_TIM_Base_Stop_IT+0x80>
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	4a23      	ldr	r2, [pc, #140]	@ (800a3a8 <HAL_TIM_Base_Stop_IT+0xf4>)
 800a31c:	4293      	cmp	r3, r2
 800a31e:	d009      	beq.n	800a334 <HAL_TIM_Base_Stop_IT+0x80>
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	4a21      	ldr	r2, [pc, #132]	@ (800a3ac <HAL_TIM_Base_Stop_IT+0xf8>)
 800a326:	4293      	cmp	r3, r2
 800a328:	d004      	beq.n	800a334 <HAL_TIM_Base_Stop_IT+0x80>
 800a32a:	f240 11fb 	movw	r1, #507	@ 0x1fb
 800a32e:	4820      	ldr	r0, [pc, #128]	@ (800a3b0 <HAL_TIM_Base_Stop_IT+0xfc>)
 800a330:	f7fa fc28 	bl	8004b84 <assert_failed>

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	68da      	ldr	r2, [r3, #12]
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	f022 0201 	bic.w	r2, r2, #1
 800a342:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	6a1a      	ldr	r2, [r3, #32]
 800a34a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800a34e:	4013      	ands	r3, r2
 800a350:	2b00      	cmp	r3, #0
 800a352:	d10f      	bne.n	800a374 <HAL_TIM_Base_Stop_IT+0xc0>
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	6a1a      	ldr	r2, [r3, #32]
 800a35a:	f240 4344 	movw	r3, #1092	@ 0x444
 800a35e:	4013      	ands	r3, r2
 800a360:	2b00      	cmp	r3, #0
 800a362:	d107      	bne.n	800a374 <HAL_TIM_Base_Stop_IT+0xc0>
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	681a      	ldr	r2, [r3, #0]
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	f022 0201 	bic.w	r2, r2, #1
 800a372:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	2201      	movs	r2, #1
 800a378:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800a37c:	2300      	movs	r3, #0
}
 800a37e:	4618      	mov	r0, r3
 800a380:	3708      	adds	r7, #8
 800a382:	46bd      	mov	sp, r7
 800a384:	bd80      	pop	{r7, pc}
 800a386:	bf00      	nop
 800a388:	40012c00 	.word	0x40012c00
 800a38c:	40000400 	.word	0x40000400
 800a390:	40000800 	.word	0x40000800
 800a394:	40000c00 	.word	0x40000c00
 800a398:	40001000 	.word	0x40001000
 800a39c:	40001400 	.word	0x40001400
 800a3a0:	40013400 	.word	0x40013400
 800a3a4:	40014000 	.word	0x40014000
 800a3a8:	40014400 	.word	0x40014400
 800a3ac:	40014800 	.word	0x40014800
 800a3b0:	0800fa34 	.word	0x0800fa34

0800a3b4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a3b4:	b580      	push	{r7, lr}
 800a3b6:	b082      	sub	sp, #8
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d101      	bne.n	800a3c6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a3c2:	2301      	movs	r3, #1
 800a3c4:	e0e6      	b.n	800a594 <HAL_TIM_PWM_Init+0x1e0>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	4a74      	ldr	r2, [pc, #464]	@ (800a59c <HAL_TIM_PWM_Init+0x1e8>)
 800a3cc:	4293      	cmp	r3, r2
 800a3ce:	d036      	beq.n	800a43e <HAL_TIM_PWM_Init+0x8a>
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a3d8:	d031      	beq.n	800a43e <HAL_TIM_PWM_Init+0x8a>
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	4a70      	ldr	r2, [pc, #448]	@ (800a5a0 <HAL_TIM_PWM_Init+0x1ec>)
 800a3e0:	4293      	cmp	r3, r2
 800a3e2:	d02c      	beq.n	800a43e <HAL_TIM_PWM_Init+0x8a>
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	4a6e      	ldr	r2, [pc, #440]	@ (800a5a4 <HAL_TIM_PWM_Init+0x1f0>)
 800a3ea:	4293      	cmp	r3, r2
 800a3ec:	d027      	beq.n	800a43e <HAL_TIM_PWM_Init+0x8a>
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	4a6d      	ldr	r2, [pc, #436]	@ (800a5a8 <HAL_TIM_PWM_Init+0x1f4>)
 800a3f4:	4293      	cmp	r3, r2
 800a3f6:	d022      	beq.n	800a43e <HAL_TIM_PWM_Init+0x8a>
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	4a6b      	ldr	r2, [pc, #428]	@ (800a5ac <HAL_TIM_PWM_Init+0x1f8>)
 800a3fe:	4293      	cmp	r3, r2
 800a400:	d01d      	beq.n	800a43e <HAL_TIM_PWM_Init+0x8a>
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	4a6a      	ldr	r2, [pc, #424]	@ (800a5b0 <HAL_TIM_PWM_Init+0x1fc>)
 800a408:	4293      	cmp	r3, r2
 800a40a:	d018      	beq.n	800a43e <HAL_TIM_PWM_Init+0x8a>
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	4a68      	ldr	r2, [pc, #416]	@ (800a5b4 <HAL_TIM_PWM_Init+0x200>)
 800a412:	4293      	cmp	r3, r2
 800a414:	d013      	beq.n	800a43e <HAL_TIM_PWM_Init+0x8a>
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	4a67      	ldr	r2, [pc, #412]	@ (800a5b8 <HAL_TIM_PWM_Init+0x204>)
 800a41c:	4293      	cmp	r3, r2
 800a41e:	d00e      	beq.n	800a43e <HAL_TIM_PWM_Init+0x8a>
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	4a65      	ldr	r2, [pc, #404]	@ (800a5bc <HAL_TIM_PWM_Init+0x208>)
 800a426:	4293      	cmp	r3, r2
 800a428:	d009      	beq.n	800a43e <HAL_TIM_PWM_Init+0x8a>
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	4a64      	ldr	r2, [pc, #400]	@ (800a5c0 <HAL_TIM_PWM_Init+0x20c>)
 800a430:	4293      	cmp	r3, r2
 800a432:	d004      	beq.n	800a43e <HAL_TIM_PWM_Init+0x8a>
 800a434:	f240 5133 	movw	r1, #1331	@ 0x533
 800a438:	4862      	ldr	r0, [pc, #392]	@ (800a5c4 <HAL_TIM_PWM_Init+0x210>)
 800a43a:	f7fa fba3 	bl	8004b84 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	689b      	ldr	r3, [r3, #8]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d014      	beq.n	800a470 <HAL_TIM_PWM_Init+0xbc>
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	689b      	ldr	r3, [r3, #8]
 800a44a:	2b10      	cmp	r3, #16
 800a44c:	d010      	beq.n	800a470 <HAL_TIM_PWM_Init+0xbc>
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	689b      	ldr	r3, [r3, #8]
 800a452:	2b20      	cmp	r3, #32
 800a454:	d00c      	beq.n	800a470 <HAL_TIM_PWM_Init+0xbc>
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	689b      	ldr	r3, [r3, #8]
 800a45a:	2b40      	cmp	r3, #64	@ 0x40
 800a45c:	d008      	beq.n	800a470 <HAL_TIM_PWM_Init+0xbc>
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	689b      	ldr	r3, [r3, #8]
 800a462:	2b60      	cmp	r3, #96	@ 0x60
 800a464:	d004      	beq.n	800a470 <HAL_TIM_PWM_Init+0xbc>
 800a466:	f240 5134 	movw	r1, #1332	@ 0x534
 800a46a:	4856      	ldr	r0, [pc, #344]	@ (800a5c4 <HAL_TIM_PWM_Init+0x210>)
 800a46c:	f7fa fb8a 	bl	8004b84 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	691b      	ldr	r3, [r3, #16]
 800a474:	2b00      	cmp	r3, #0
 800a476:	d00e      	beq.n	800a496 <HAL_TIM_PWM_Init+0xe2>
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	691b      	ldr	r3, [r3, #16]
 800a47c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a480:	d009      	beq.n	800a496 <HAL_TIM_PWM_Init+0xe2>
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	691b      	ldr	r3, [r3, #16]
 800a486:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a48a:	d004      	beq.n	800a496 <HAL_TIM_PWM_Init+0xe2>
 800a48c:	f240 5135 	movw	r1, #1333	@ 0x535
 800a490:	484c      	ldr	r0, [pc, #304]	@ (800a5c4 <HAL_TIM_PWM_Init+0x210>)
 800a492:	f7fa fb77 	bl	8004b84 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a49e:	d004      	beq.n	800a4aa <HAL_TIM_PWM_Init+0xf6>
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	4a40      	ldr	r2, [pc, #256]	@ (800a5a8 <HAL_TIM_PWM_Init+0x1f4>)
 800a4a6:	4293      	cmp	r3, r2
 800a4a8:	d107      	bne.n	800a4ba <HAL_TIM_PWM_Init+0x106>
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	68db      	ldr	r3, [r3, #12]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	bf14      	ite	ne
 800a4b2:	2301      	movne	r3, #1
 800a4b4:	2300      	moveq	r3, #0
 800a4b6:	b2db      	uxtb	r3, r3
 800a4b8:	e00e      	b.n	800a4d8 <HAL_TIM_PWM_Init+0x124>
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	68db      	ldr	r3, [r3, #12]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d006      	beq.n	800a4d0 <HAL_TIM_PWM_Init+0x11c>
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	68db      	ldr	r3, [r3, #12]
 800a4c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a4ca:	d201      	bcs.n	800a4d0 <HAL_TIM_PWM_Init+0x11c>
 800a4cc:	2301      	movs	r3, #1
 800a4ce:	e000      	b.n	800a4d2 <HAL_TIM_PWM_Init+0x11e>
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	f003 0301 	and.w	r3, r3, #1
 800a4d6:	b2db      	uxtb	r3, r3
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d104      	bne.n	800a4e6 <HAL_TIM_PWM_Init+0x132>
 800a4dc:	f240 5136 	movw	r1, #1334	@ 0x536
 800a4e0:	4838      	ldr	r0, [pc, #224]	@ (800a5c4 <HAL_TIM_PWM_Init+0x210>)
 800a4e2:	f7fa fb4f 	bl	8004b84 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	699b      	ldr	r3, [r3, #24]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d008      	beq.n	800a500 <HAL_TIM_PWM_Init+0x14c>
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	699b      	ldr	r3, [r3, #24]
 800a4f2:	2b80      	cmp	r3, #128	@ 0x80
 800a4f4:	d004      	beq.n	800a500 <HAL_TIM_PWM_Init+0x14c>
 800a4f6:	f240 5137 	movw	r1, #1335	@ 0x537
 800a4fa:	4832      	ldr	r0, [pc, #200]	@ (800a5c4 <HAL_TIM_PWM_Init+0x210>)
 800a4fc:	f7fa fb42 	bl	8004b84 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a506:	b2db      	uxtb	r3, r3
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d106      	bne.n	800a51a <HAL_TIM_PWM_Init+0x166>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	2200      	movs	r2, #0
 800a510:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a514:	6878      	ldr	r0, [r7, #4]
 800a516:	f000 f857 	bl	800a5c8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	2202      	movs	r2, #2
 800a51e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681a      	ldr	r2, [r3, #0]
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	3304      	adds	r3, #4
 800a52a:	4619      	mov	r1, r3
 800a52c:	4610      	mov	r0, r2
 800a52e:	f001 fd05 	bl	800bf3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	2201      	movs	r2, #1
 800a536:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	2201      	movs	r2, #1
 800a53e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	2201      	movs	r2, #1
 800a546:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	2201      	movs	r2, #1
 800a54e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	2201      	movs	r2, #1
 800a556:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	2201      	movs	r2, #1
 800a55e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	2201      	movs	r2, #1
 800a566:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	2201      	movs	r2, #1
 800a56e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	2201      	movs	r2, #1
 800a576:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	2201      	movs	r2, #1
 800a57e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	2201      	movs	r2, #1
 800a586:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	2201      	movs	r2, #1
 800a58e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a592:	2300      	movs	r3, #0
}
 800a594:	4618      	mov	r0, r3
 800a596:	3708      	adds	r7, #8
 800a598:	46bd      	mov	sp, r7
 800a59a:	bd80      	pop	{r7, pc}
 800a59c:	40012c00 	.word	0x40012c00
 800a5a0:	40000400 	.word	0x40000400
 800a5a4:	40000800 	.word	0x40000800
 800a5a8:	40000c00 	.word	0x40000c00
 800a5ac:	40001000 	.word	0x40001000
 800a5b0:	40001400 	.word	0x40001400
 800a5b4:	40013400 	.word	0x40013400
 800a5b8:	40014000 	.word	0x40014000
 800a5bc:	40014400 	.word	0x40014400
 800a5c0:	40014800 	.word	0x40014800
 800a5c4:	0800fa34 	.word	0x0800fa34

0800a5c8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a5c8:	b480      	push	{r7}
 800a5ca:	b083      	sub	sp, #12
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a5d0:	bf00      	nop
 800a5d2:	370c      	adds	r7, #12
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5da:	4770      	bx	lr

0800a5dc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	b084      	sub	sp, #16
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
 800a5e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	4a85      	ldr	r2, [pc, #532]	@ (800a800 <HAL_TIM_PWM_Start+0x224>)
 800a5ec:	4293      	cmp	r3, r2
 800a5ee:	d115      	bne.n	800a61c <HAL_TIM_PWM_Start+0x40>
 800a5f0:	683b      	ldr	r3, [r7, #0]
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	f000 808d 	beq.w	800a712 <HAL_TIM_PWM_Start+0x136>
 800a5f8:	683b      	ldr	r3, [r7, #0]
 800a5fa:	2b04      	cmp	r3, #4
 800a5fc:	f000 8089 	beq.w	800a712 <HAL_TIM_PWM_Start+0x136>
 800a600:	683b      	ldr	r3, [r7, #0]
 800a602:	2b08      	cmp	r3, #8
 800a604:	f000 8085 	beq.w	800a712 <HAL_TIM_PWM_Start+0x136>
 800a608:	683b      	ldr	r3, [r7, #0]
 800a60a:	2b0c      	cmp	r3, #12
 800a60c:	f000 8081 	beq.w	800a712 <HAL_TIM_PWM_Start+0x136>
 800a610:	683b      	ldr	r3, [r7, #0]
 800a612:	2b10      	cmp	r3, #16
 800a614:	d07d      	beq.n	800a712 <HAL_TIM_PWM_Start+0x136>
 800a616:	683b      	ldr	r3, [r7, #0]
 800a618:	2b14      	cmp	r3, #20
 800a61a:	d07a      	beq.n	800a712 <HAL_TIM_PWM_Start+0x136>
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a624:	d10b      	bne.n	800a63e <HAL_TIM_PWM_Start+0x62>
 800a626:	683b      	ldr	r3, [r7, #0]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d072      	beq.n	800a712 <HAL_TIM_PWM_Start+0x136>
 800a62c:	683b      	ldr	r3, [r7, #0]
 800a62e:	2b04      	cmp	r3, #4
 800a630:	d06f      	beq.n	800a712 <HAL_TIM_PWM_Start+0x136>
 800a632:	683b      	ldr	r3, [r7, #0]
 800a634:	2b08      	cmp	r3, #8
 800a636:	d06c      	beq.n	800a712 <HAL_TIM_PWM_Start+0x136>
 800a638:	683b      	ldr	r3, [r7, #0]
 800a63a:	2b0c      	cmp	r3, #12
 800a63c:	d069      	beq.n	800a712 <HAL_TIM_PWM_Start+0x136>
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	4a70      	ldr	r2, [pc, #448]	@ (800a804 <HAL_TIM_PWM_Start+0x228>)
 800a644:	4293      	cmp	r3, r2
 800a646:	d10b      	bne.n	800a660 <HAL_TIM_PWM_Start+0x84>
 800a648:	683b      	ldr	r3, [r7, #0]
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d061      	beq.n	800a712 <HAL_TIM_PWM_Start+0x136>
 800a64e:	683b      	ldr	r3, [r7, #0]
 800a650:	2b04      	cmp	r3, #4
 800a652:	d05e      	beq.n	800a712 <HAL_TIM_PWM_Start+0x136>
 800a654:	683b      	ldr	r3, [r7, #0]
 800a656:	2b08      	cmp	r3, #8
 800a658:	d05b      	beq.n	800a712 <HAL_TIM_PWM_Start+0x136>
 800a65a:	683b      	ldr	r3, [r7, #0]
 800a65c:	2b0c      	cmp	r3, #12
 800a65e:	d058      	beq.n	800a712 <HAL_TIM_PWM_Start+0x136>
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	4a68      	ldr	r2, [pc, #416]	@ (800a808 <HAL_TIM_PWM_Start+0x22c>)
 800a666:	4293      	cmp	r3, r2
 800a668:	d10b      	bne.n	800a682 <HAL_TIM_PWM_Start+0xa6>
 800a66a:	683b      	ldr	r3, [r7, #0]
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d050      	beq.n	800a712 <HAL_TIM_PWM_Start+0x136>
 800a670:	683b      	ldr	r3, [r7, #0]
 800a672:	2b04      	cmp	r3, #4
 800a674:	d04d      	beq.n	800a712 <HAL_TIM_PWM_Start+0x136>
 800a676:	683b      	ldr	r3, [r7, #0]
 800a678:	2b08      	cmp	r3, #8
 800a67a:	d04a      	beq.n	800a712 <HAL_TIM_PWM_Start+0x136>
 800a67c:	683b      	ldr	r3, [r7, #0]
 800a67e:	2b0c      	cmp	r3, #12
 800a680:	d047      	beq.n	800a712 <HAL_TIM_PWM_Start+0x136>
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	4a61      	ldr	r2, [pc, #388]	@ (800a80c <HAL_TIM_PWM_Start+0x230>)
 800a688:	4293      	cmp	r3, r2
 800a68a:	d10b      	bne.n	800a6a4 <HAL_TIM_PWM_Start+0xc8>
 800a68c:	683b      	ldr	r3, [r7, #0]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d03f      	beq.n	800a712 <HAL_TIM_PWM_Start+0x136>
 800a692:	683b      	ldr	r3, [r7, #0]
 800a694:	2b04      	cmp	r3, #4
 800a696:	d03c      	beq.n	800a712 <HAL_TIM_PWM_Start+0x136>
 800a698:	683b      	ldr	r3, [r7, #0]
 800a69a:	2b08      	cmp	r3, #8
 800a69c:	d039      	beq.n	800a712 <HAL_TIM_PWM_Start+0x136>
 800a69e:	683b      	ldr	r3, [r7, #0]
 800a6a0:	2b0c      	cmp	r3, #12
 800a6a2:	d036      	beq.n	800a712 <HAL_TIM_PWM_Start+0x136>
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	4a59      	ldr	r2, [pc, #356]	@ (800a810 <HAL_TIM_PWM_Start+0x234>)
 800a6aa:	4293      	cmp	r3, r2
 800a6ac:	d111      	bne.n	800a6d2 <HAL_TIM_PWM_Start+0xf6>
 800a6ae:	683b      	ldr	r3, [r7, #0]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d02e      	beq.n	800a712 <HAL_TIM_PWM_Start+0x136>
 800a6b4:	683b      	ldr	r3, [r7, #0]
 800a6b6:	2b04      	cmp	r3, #4
 800a6b8:	d02b      	beq.n	800a712 <HAL_TIM_PWM_Start+0x136>
 800a6ba:	683b      	ldr	r3, [r7, #0]
 800a6bc:	2b08      	cmp	r3, #8
 800a6be:	d028      	beq.n	800a712 <HAL_TIM_PWM_Start+0x136>
 800a6c0:	683b      	ldr	r3, [r7, #0]
 800a6c2:	2b0c      	cmp	r3, #12
 800a6c4:	d025      	beq.n	800a712 <HAL_TIM_PWM_Start+0x136>
 800a6c6:	683b      	ldr	r3, [r7, #0]
 800a6c8:	2b10      	cmp	r3, #16
 800a6ca:	d022      	beq.n	800a712 <HAL_TIM_PWM_Start+0x136>
 800a6cc:	683b      	ldr	r3, [r7, #0]
 800a6ce:	2b14      	cmp	r3, #20
 800a6d0:	d01f      	beq.n	800a712 <HAL_TIM_PWM_Start+0x136>
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	4a4f      	ldr	r2, [pc, #316]	@ (800a814 <HAL_TIM_PWM_Start+0x238>)
 800a6d8:	4293      	cmp	r3, r2
 800a6da:	d105      	bne.n	800a6e8 <HAL_TIM_PWM_Start+0x10c>
 800a6dc:	683b      	ldr	r3, [r7, #0]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d017      	beq.n	800a712 <HAL_TIM_PWM_Start+0x136>
 800a6e2:	683b      	ldr	r3, [r7, #0]
 800a6e4:	2b04      	cmp	r3, #4
 800a6e6:	d014      	beq.n	800a712 <HAL_TIM_PWM_Start+0x136>
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	4a4a      	ldr	r2, [pc, #296]	@ (800a818 <HAL_TIM_PWM_Start+0x23c>)
 800a6ee:	4293      	cmp	r3, r2
 800a6f0:	d102      	bne.n	800a6f8 <HAL_TIM_PWM_Start+0x11c>
 800a6f2:	683b      	ldr	r3, [r7, #0]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d00c      	beq.n	800a712 <HAL_TIM_PWM_Start+0x136>
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	4a47      	ldr	r2, [pc, #284]	@ (800a81c <HAL_TIM_PWM_Start+0x240>)
 800a6fe:	4293      	cmp	r3, r2
 800a700:	d102      	bne.n	800a708 <HAL_TIM_PWM_Start+0x12c>
 800a702:	683b      	ldr	r3, [r7, #0]
 800a704:	2b00      	cmp	r3, #0
 800a706:	d004      	beq.n	800a712 <HAL_TIM_PWM_Start+0x136>
 800a708:	f240 51bc 	movw	r1, #1468	@ 0x5bc
 800a70c:	4844      	ldr	r0, [pc, #272]	@ (800a820 <HAL_TIM_PWM_Start+0x244>)
 800a70e:	f7fa fa39 	bl	8004b84 <assert_failed>

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a712:	683b      	ldr	r3, [r7, #0]
 800a714:	2b00      	cmp	r3, #0
 800a716:	d109      	bne.n	800a72c <HAL_TIM_PWM_Start+0x150>
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a71e:	b2db      	uxtb	r3, r3
 800a720:	2b01      	cmp	r3, #1
 800a722:	bf14      	ite	ne
 800a724:	2301      	movne	r3, #1
 800a726:	2300      	moveq	r3, #0
 800a728:	b2db      	uxtb	r3, r3
 800a72a:	e03c      	b.n	800a7a6 <HAL_TIM_PWM_Start+0x1ca>
 800a72c:	683b      	ldr	r3, [r7, #0]
 800a72e:	2b04      	cmp	r3, #4
 800a730:	d109      	bne.n	800a746 <HAL_TIM_PWM_Start+0x16a>
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800a738:	b2db      	uxtb	r3, r3
 800a73a:	2b01      	cmp	r3, #1
 800a73c:	bf14      	ite	ne
 800a73e:	2301      	movne	r3, #1
 800a740:	2300      	moveq	r3, #0
 800a742:	b2db      	uxtb	r3, r3
 800a744:	e02f      	b.n	800a7a6 <HAL_TIM_PWM_Start+0x1ca>
 800a746:	683b      	ldr	r3, [r7, #0]
 800a748:	2b08      	cmp	r3, #8
 800a74a:	d109      	bne.n	800a760 <HAL_TIM_PWM_Start+0x184>
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a752:	b2db      	uxtb	r3, r3
 800a754:	2b01      	cmp	r3, #1
 800a756:	bf14      	ite	ne
 800a758:	2301      	movne	r3, #1
 800a75a:	2300      	moveq	r3, #0
 800a75c:	b2db      	uxtb	r3, r3
 800a75e:	e022      	b.n	800a7a6 <HAL_TIM_PWM_Start+0x1ca>
 800a760:	683b      	ldr	r3, [r7, #0]
 800a762:	2b0c      	cmp	r3, #12
 800a764:	d109      	bne.n	800a77a <HAL_TIM_PWM_Start+0x19e>
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a76c:	b2db      	uxtb	r3, r3
 800a76e:	2b01      	cmp	r3, #1
 800a770:	bf14      	ite	ne
 800a772:	2301      	movne	r3, #1
 800a774:	2300      	moveq	r3, #0
 800a776:	b2db      	uxtb	r3, r3
 800a778:	e015      	b.n	800a7a6 <HAL_TIM_PWM_Start+0x1ca>
 800a77a:	683b      	ldr	r3, [r7, #0]
 800a77c:	2b10      	cmp	r3, #16
 800a77e:	d109      	bne.n	800a794 <HAL_TIM_PWM_Start+0x1b8>
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a786:	b2db      	uxtb	r3, r3
 800a788:	2b01      	cmp	r3, #1
 800a78a:	bf14      	ite	ne
 800a78c:	2301      	movne	r3, #1
 800a78e:	2300      	moveq	r3, #0
 800a790:	b2db      	uxtb	r3, r3
 800a792:	e008      	b.n	800a7a6 <HAL_TIM_PWM_Start+0x1ca>
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800a79a:	b2db      	uxtb	r3, r3
 800a79c:	2b01      	cmp	r3, #1
 800a79e:	bf14      	ite	ne
 800a7a0:	2301      	movne	r3, #1
 800a7a2:	2300      	moveq	r3, #0
 800a7a4:	b2db      	uxtb	r3, r3
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d001      	beq.n	800a7ae <HAL_TIM_PWM_Start+0x1d2>
  {
    return HAL_ERROR;
 800a7aa:	2301      	movs	r3, #1
 800a7ac:	e0af      	b.n	800a90e <HAL_TIM_PWM_Start+0x332>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a7ae:	683b      	ldr	r3, [r7, #0]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d104      	bne.n	800a7be <HAL_TIM_PWM_Start+0x1e2>
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	2202      	movs	r2, #2
 800a7b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a7bc:	e036      	b.n	800a82c <HAL_TIM_PWM_Start+0x250>
 800a7be:	683b      	ldr	r3, [r7, #0]
 800a7c0:	2b04      	cmp	r3, #4
 800a7c2:	d104      	bne.n	800a7ce <HAL_TIM_PWM_Start+0x1f2>
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	2202      	movs	r2, #2
 800a7c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a7cc:	e02e      	b.n	800a82c <HAL_TIM_PWM_Start+0x250>
 800a7ce:	683b      	ldr	r3, [r7, #0]
 800a7d0:	2b08      	cmp	r3, #8
 800a7d2:	d104      	bne.n	800a7de <HAL_TIM_PWM_Start+0x202>
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	2202      	movs	r2, #2
 800a7d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a7dc:	e026      	b.n	800a82c <HAL_TIM_PWM_Start+0x250>
 800a7de:	683b      	ldr	r3, [r7, #0]
 800a7e0:	2b0c      	cmp	r3, #12
 800a7e2:	d104      	bne.n	800a7ee <HAL_TIM_PWM_Start+0x212>
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	2202      	movs	r2, #2
 800a7e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a7ec:	e01e      	b.n	800a82c <HAL_TIM_PWM_Start+0x250>
 800a7ee:	683b      	ldr	r3, [r7, #0]
 800a7f0:	2b10      	cmp	r3, #16
 800a7f2:	d117      	bne.n	800a824 <HAL_TIM_PWM_Start+0x248>
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	2202      	movs	r2, #2
 800a7f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a7fc:	e016      	b.n	800a82c <HAL_TIM_PWM_Start+0x250>
 800a7fe:	bf00      	nop
 800a800:	40012c00 	.word	0x40012c00
 800a804:	40000400 	.word	0x40000400
 800a808:	40000800 	.word	0x40000800
 800a80c:	40000c00 	.word	0x40000c00
 800a810:	40013400 	.word	0x40013400
 800a814:	40014000 	.word	0x40014000
 800a818:	40014400 	.word	0x40014400
 800a81c:	40014800 	.word	0x40014800
 800a820:	0800fa34 	.word	0x0800fa34
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	2202      	movs	r2, #2
 800a828:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	2201      	movs	r2, #1
 800a832:	6839      	ldr	r1, [r7, #0]
 800a834:	4618      	mov	r0, r3
 800a836:	f002 f821 	bl	800c87c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	4a36      	ldr	r2, [pc, #216]	@ (800a918 <HAL_TIM_PWM_Start+0x33c>)
 800a840:	4293      	cmp	r3, r2
 800a842:	d013      	beq.n	800a86c <HAL_TIM_PWM_Start+0x290>
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	4a34      	ldr	r2, [pc, #208]	@ (800a91c <HAL_TIM_PWM_Start+0x340>)
 800a84a:	4293      	cmp	r3, r2
 800a84c:	d00e      	beq.n	800a86c <HAL_TIM_PWM_Start+0x290>
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	4a33      	ldr	r2, [pc, #204]	@ (800a920 <HAL_TIM_PWM_Start+0x344>)
 800a854:	4293      	cmp	r3, r2
 800a856:	d009      	beq.n	800a86c <HAL_TIM_PWM_Start+0x290>
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	4a31      	ldr	r2, [pc, #196]	@ (800a924 <HAL_TIM_PWM_Start+0x348>)
 800a85e:	4293      	cmp	r3, r2
 800a860:	d004      	beq.n	800a86c <HAL_TIM_PWM_Start+0x290>
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	4a30      	ldr	r2, [pc, #192]	@ (800a928 <HAL_TIM_PWM_Start+0x34c>)
 800a868:	4293      	cmp	r3, r2
 800a86a:	d101      	bne.n	800a870 <HAL_TIM_PWM_Start+0x294>
 800a86c:	2301      	movs	r3, #1
 800a86e:	e000      	b.n	800a872 <HAL_TIM_PWM_Start+0x296>
 800a870:	2300      	movs	r3, #0
 800a872:	2b00      	cmp	r3, #0
 800a874:	d007      	beq.n	800a886 <HAL_TIM_PWM_Start+0x2aa>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a884:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	4a23      	ldr	r2, [pc, #140]	@ (800a918 <HAL_TIM_PWM_Start+0x33c>)
 800a88c:	4293      	cmp	r3, r2
 800a88e:	d01d      	beq.n	800a8cc <HAL_TIM_PWM_Start+0x2f0>
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a898:	d018      	beq.n	800a8cc <HAL_TIM_PWM_Start+0x2f0>
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	4a23      	ldr	r2, [pc, #140]	@ (800a92c <HAL_TIM_PWM_Start+0x350>)
 800a8a0:	4293      	cmp	r3, r2
 800a8a2:	d013      	beq.n	800a8cc <HAL_TIM_PWM_Start+0x2f0>
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	4a21      	ldr	r2, [pc, #132]	@ (800a930 <HAL_TIM_PWM_Start+0x354>)
 800a8aa:	4293      	cmp	r3, r2
 800a8ac:	d00e      	beq.n	800a8cc <HAL_TIM_PWM_Start+0x2f0>
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	4a20      	ldr	r2, [pc, #128]	@ (800a934 <HAL_TIM_PWM_Start+0x358>)
 800a8b4:	4293      	cmp	r3, r2
 800a8b6:	d009      	beq.n	800a8cc <HAL_TIM_PWM_Start+0x2f0>
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	4a17      	ldr	r2, [pc, #92]	@ (800a91c <HAL_TIM_PWM_Start+0x340>)
 800a8be:	4293      	cmp	r3, r2
 800a8c0:	d004      	beq.n	800a8cc <HAL_TIM_PWM_Start+0x2f0>
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	4a16      	ldr	r2, [pc, #88]	@ (800a920 <HAL_TIM_PWM_Start+0x344>)
 800a8c8:	4293      	cmp	r3, r2
 800a8ca:	d115      	bne.n	800a8f8 <HAL_TIM_PWM_Start+0x31c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	689a      	ldr	r2, [r3, #8]
 800a8d2:	4b19      	ldr	r3, [pc, #100]	@ (800a938 <HAL_TIM_PWM_Start+0x35c>)
 800a8d4:	4013      	ands	r3, r2
 800a8d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	2b06      	cmp	r3, #6
 800a8dc:	d015      	beq.n	800a90a <HAL_TIM_PWM_Start+0x32e>
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a8e4:	d011      	beq.n	800a90a <HAL_TIM_PWM_Start+0x32e>
    {
      __HAL_TIM_ENABLE(htim);
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	681a      	ldr	r2, [r3, #0]
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	f042 0201 	orr.w	r2, r2, #1
 800a8f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a8f6:	e008      	b.n	800a90a <HAL_TIM_PWM_Start+0x32e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	681a      	ldr	r2, [r3, #0]
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	f042 0201 	orr.w	r2, r2, #1
 800a906:	601a      	str	r2, [r3, #0]
 800a908:	e000      	b.n	800a90c <HAL_TIM_PWM_Start+0x330>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a90a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a90c:	2300      	movs	r3, #0
}
 800a90e:	4618      	mov	r0, r3
 800a910:	3710      	adds	r7, #16
 800a912:	46bd      	mov	sp, r7
 800a914:	bd80      	pop	{r7, pc}
 800a916:	bf00      	nop
 800a918:	40012c00 	.word	0x40012c00
 800a91c:	40013400 	.word	0x40013400
 800a920:	40014000 	.word	0x40014000
 800a924:	40014400 	.word	0x40014400
 800a928:	40014800 	.word	0x40014800
 800a92c:	40000400 	.word	0x40000400
 800a930:	40000800 	.word	0x40000800
 800a934:	40000c00 	.word	0x40000c00
 800a938:	00010007 	.word	0x00010007

0800a93c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a93c:	b580      	push	{r7, lr}
 800a93e:	b082      	sub	sp, #8
 800a940:	af00      	add	r7, sp, #0
 800a942:	6078      	str	r0, [r7, #4]
 800a944:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	4a8d      	ldr	r2, [pc, #564]	@ (800ab80 <HAL_TIM_PWM_Stop+0x244>)
 800a94c:	4293      	cmp	r3, r2
 800a94e:	d115      	bne.n	800a97c <HAL_TIM_PWM_Stop+0x40>
 800a950:	683b      	ldr	r3, [r7, #0]
 800a952:	2b00      	cmp	r3, #0
 800a954:	f000 808d 	beq.w	800aa72 <HAL_TIM_PWM_Stop+0x136>
 800a958:	683b      	ldr	r3, [r7, #0]
 800a95a:	2b04      	cmp	r3, #4
 800a95c:	f000 8089 	beq.w	800aa72 <HAL_TIM_PWM_Stop+0x136>
 800a960:	683b      	ldr	r3, [r7, #0]
 800a962:	2b08      	cmp	r3, #8
 800a964:	f000 8085 	beq.w	800aa72 <HAL_TIM_PWM_Stop+0x136>
 800a968:	683b      	ldr	r3, [r7, #0]
 800a96a:	2b0c      	cmp	r3, #12
 800a96c:	f000 8081 	beq.w	800aa72 <HAL_TIM_PWM_Stop+0x136>
 800a970:	683b      	ldr	r3, [r7, #0]
 800a972:	2b10      	cmp	r3, #16
 800a974:	d07d      	beq.n	800aa72 <HAL_TIM_PWM_Stop+0x136>
 800a976:	683b      	ldr	r3, [r7, #0]
 800a978:	2b14      	cmp	r3, #20
 800a97a:	d07a      	beq.n	800aa72 <HAL_TIM_PWM_Stop+0x136>
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a984:	d10b      	bne.n	800a99e <HAL_TIM_PWM_Stop+0x62>
 800a986:	683b      	ldr	r3, [r7, #0]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d072      	beq.n	800aa72 <HAL_TIM_PWM_Stop+0x136>
 800a98c:	683b      	ldr	r3, [r7, #0]
 800a98e:	2b04      	cmp	r3, #4
 800a990:	d06f      	beq.n	800aa72 <HAL_TIM_PWM_Stop+0x136>
 800a992:	683b      	ldr	r3, [r7, #0]
 800a994:	2b08      	cmp	r3, #8
 800a996:	d06c      	beq.n	800aa72 <HAL_TIM_PWM_Stop+0x136>
 800a998:	683b      	ldr	r3, [r7, #0]
 800a99a:	2b0c      	cmp	r3, #12
 800a99c:	d069      	beq.n	800aa72 <HAL_TIM_PWM_Stop+0x136>
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	4a78      	ldr	r2, [pc, #480]	@ (800ab84 <HAL_TIM_PWM_Stop+0x248>)
 800a9a4:	4293      	cmp	r3, r2
 800a9a6:	d10b      	bne.n	800a9c0 <HAL_TIM_PWM_Stop+0x84>
 800a9a8:	683b      	ldr	r3, [r7, #0]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d061      	beq.n	800aa72 <HAL_TIM_PWM_Stop+0x136>
 800a9ae:	683b      	ldr	r3, [r7, #0]
 800a9b0:	2b04      	cmp	r3, #4
 800a9b2:	d05e      	beq.n	800aa72 <HAL_TIM_PWM_Stop+0x136>
 800a9b4:	683b      	ldr	r3, [r7, #0]
 800a9b6:	2b08      	cmp	r3, #8
 800a9b8:	d05b      	beq.n	800aa72 <HAL_TIM_PWM_Stop+0x136>
 800a9ba:	683b      	ldr	r3, [r7, #0]
 800a9bc:	2b0c      	cmp	r3, #12
 800a9be:	d058      	beq.n	800aa72 <HAL_TIM_PWM_Stop+0x136>
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	4a70      	ldr	r2, [pc, #448]	@ (800ab88 <HAL_TIM_PWM_Stop+0x24c>)
 800a9c6:	4293      	cmp	r3, r2
 800a9c8:	d10b      	bne.n	800a9e2 <HAL_TIM_PWM_Stop+0xa6>
 800a9ca:	683b      	ldr	r3, [r7, #0]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d050      	beq.n	800aa72 <HAL_TIM_PWM_Stop+0x136>
 800a9d0:	683b      	ldr	r3, [r7, #0]
 800a9d2:	2b04      	cmp	r3, #4
 800a9d4:	d04d      	beq.n	800aa72 <HAL_TIM_PWM_Stop+0x136>
 800a9d6:	683b      	ldr	r3, [r7, #0]
 800a9d8:	2b08      	cmp	r3, #8
 800a9da:	d04a      	beq.n	800aa72 <HAL_TIM_PWM_Stop+0x136>
 800a9dc:	683b      	ldr	r3, [r7, #0]
 800a9de:	2b0c      	cmp	r3, #12
 800a9e0:	d047      	beq.n	800aa72 <HAL_TIM_PWM_Stop+0x136>
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	4a69      	ldr	r2, [pc, #420]	@ (800ab8c <HAL_TIM_PWM_Stop+0x250>)
 800a9e8:	4293      	cmp	r3, r2
 800a9ea:	d10b      	bne.n	800aa04 <HAL_TIM_PWM_Stop+0xc8>
 800a9ec:	683b      	ldr	r3, [r7, #0]
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d03f      	beq.n	800aa72 <HAL_TIM_PWM_Stop+0x136>
 800a9f2:	683b      	ldr	r3, [r7, #0]
 800a9f4:	2b04      	cmp	r3, #4
 800a9f6:	d03c      	beq.n	800aa72 <HAL_TIM_PWM_Stop+0x136>
 800a9f8:	683b      	ldr	r3, [r7, #0]
 800a9fa:	2b08      	cmp	r3, #8
 800a9fc:	d039      	beq.n	800aa72 <HAL_TIM_PWM_Stop+0x136>
 800a9fe:	683b      	ldr	r3, [r7, #0]
 800aa00:	2b0c      	cmp	r3, #12
 800aa02:	d036      	beq.n	800aa72 <HAL_TIM_PWM_Stop+0x136>
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	4a61      	ldr	r2, [pc, #388]	@ (800ab90 <HAL_TIM_PWM_Stop+0x254>)
 800aa0a:	4293      	cmp	r3, r2
 800aa0c:	d111      	bne.n	800aa32 <HAL_TIM_PWM_Stop+0xf6>
 800aa0e:	683b      	ldr	r3, [r7, #0]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d02e      	beq.n	800aa72 <HAL_TIM_PWM_Stop+0x136>
 800aa14:	683b      	ldr	r3, [r7, #0]
 800aa16:	2b04      	cmp	r3, #4
 800aa18:	d02b      	beq.n	800aa72 <HAL_TIM_PWM_Stop+0x136>
 800aa1a:	683b      	ldr	r3, [r7, #0]
 800aa1c:	2b08      	cmp	r3, #8
 800aa1e:	d028      	beq.n	800aa72 <HAL_TIM_PWM_Stop+0x136>
 800aa20:	683b      	ldr	r3, [r7, #0]
 800aa22:	2b0c      	cmp	r3, #12
 800aa24:	d025      	beq.n	800aa72 <HAL_TIM_PWM_Stop+0x136>
 800aa26:	683b      	ldr	r3, [r7, #0]
 800aa28:	2b10      	cmp	r3, #16
 800aa2a:	d022      	beq.n	800aa72 <HAL_TIM_PWM_Stop+0x136>
 800aa2c:	683b      	ldr	r3, [r7, #0]
 800aa2e:	2b14      	cmp	r3, #20
 800aa30:	d01f      	beq.n	800aa72 <HAL_TIM_PWM_Stop+0x136>
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	4a57      	ldr	r2, [pc, #348]	@ (800ab94 <HAL_TIM_PWM_Stop+0x258>)
 800aa38:	4293      	cmp	r3, r2
 800aa3a:	d105      	bne.n	800aa48 <HAL_TIM_PWM_Stop+0x10c>
 800aa3c:	683b      	ldr	r3, [r7, #0]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d017      	beq.n	800aa72 <HAL_TIM_PWM_Stop+0x136>
 800aa42:	683b      	ldr	r3, [r7, #0]
 800aa44:	2b04      	cmp	r3, #4
 800aa46:	d014      	beq.n	800aa72 <HAL_TIM_PWM_Stop+0x136>
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	4a52      	ldr	r2, [pc, #328]	@ (800ab98 <HAL_TIM_PWM_Stop+0x25c>)
 800aa4e:	4293      	cmp	r3, r2
 800aa50:	d102      	bne.n	800aa58 <HAL_TIM_PWM_Stop+0x11c>
 800aa52:	683b      	ldr	r3, [r7, #0]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d00c      	beq.n	800aa72 <HAL_TIM_PWM_Stop+0x136>
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	4a4f      	ldr	r2, [pc, #316]	@ (800ab9c <HAL_TIM_PWM_Stop+0x260>)
 800aa5e:	4293      	cmp	r3, r2
 800aa60:	d102      	bne.n	800aa68 <HAL_TIM_PWM_Stop+0x12c>
 800aa62:	683b      	ldr	r3, [r7, #0]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d004      	beq.n	800aa72 <HAL_TIM_PWM_Stop+0x136>
 800aa68:	f240 51f2 	movw	r1, #1522	@ 0x5f2
 800aa6c:	484c      	ldr	r0, [pc, #304]	@ (800aba0 <HAL_TIM_PWM_Stop+0x264>)
 800aa6e:	f7fa f889 	bl	8004b84 <assert_failed>

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	2200      	movs	r2, #0
 800aa78:	6839      	ldr	r1, [r7, #0]
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	f001 fefe 	bl	800c87c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	4a3e      	ldr	r2, [pc, #248]	@ (800ab80 <HAL_TIM_PWM_Stop+0x244>)
 800aa86:	4293      	cmp	r3, r2
 800aa88:	d013      	beq.n	800aab2 <HAL_TIM_PWM_Stop+0x176>
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	4a40      	ldr	r2, [pc, #256]	@ (800ab90 <HAL_TIM_PWM_Stop+0x254>)
 800aa90:	4293      	cmp	r3, r2
 800aa92:	d00e      	beq.n	800aab2 <HAL_TIM_PWM_Stop+0x176>
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	4a3e      	ldr	r2, [pc, #248]	@ (800ab94 <HAL_TIM_PWM_Stop+0x258>)
 800aa9a:	4293      	cmp	r3, r2
 800aa9c:	d009      	beq.n	800aab2 <HAL_TIM_PWM_Stop+0x176>
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	4a3d      	ldr	r2, [pc, #244]	@ (800ab98 <HAL_TIM_PWM_Stop+0x25c>)
 800aaa4:	4293      	cmp	r3, r2
 800aaa6:	d004      	beq.n	800aab2 <HAL_TIM_PWM_Stop+0x176>
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	4a3b      	ldr	r2, [pc, #236]	@ (800ab9c <HAL_TIM_PWM_Stop+0x260>)
 800aaae:	4293      	cmp	r3, r2
 800aab0:	d101      	bne.n	800aab6 <HAL_TIM_PWM_Stop+0x17a>
 800aab2:	2301      	movs	r3, #1
 800aab4:	e000      	b.n	800aab8 <HAL_TIM_PWM_Stop+0x17c>
 800aab6:	2300      	movs	r3, #0
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d017      	beq.n	800aaec <HAL_TIM_PWM_Stop+0x1b0>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	6a1a      	ldr	r2, [r3, #32]
 800aac2:	f241 1311 	movw	r3, #4369	@ 0x1111
 800aac6:	4013      	ands	r3, r2
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d10f      	bne.n	800aaec <HAL_TIM_PWM_Stop+0x1b0>
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	6a1a      	ldr	r2, [r3, #32]
 800aad2:	f240 4344 	movw	r3, #1092	@ 0x444
 800aad6:	4013      	ands	r3, r2
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d107      	bne.n	800aaec <HAL_TIM_PWM_Stop+0x1b0>
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800aaea:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	6a1a      	ldr	r2, [r3, #32]
 800aaf2:	f241 1311 	movw	r3, #4369	@ 0x1111
 800aaf6:	4013      	ands	r3, r2
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d10f      	bne.n	800ab1c <HAL_TIM_PWM_Stop+0x1e0>
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	6a1a      	ldr	r2, [r3, #32]
 800ab02:	f240 4344 	movw	r3, #1092	@ 0x444
 800ab06:	4013      	ands	r3, r2
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d107      	bne.n	800ab1c <HAL_TIM_PWM_Stop+0x1e0>
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	681a      	ldr	r2, [r3, #0]
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	f022 0201 	bic.w	r2, r2, #1
 800ab1a:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800ab1c:	683b      	ldr	r3, [r7, #0]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d104      	bne.n	800ab2c <HAL_TIM_PWM_Stop+0x1f0>
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	2201      	movs	r2, #1
 800ab26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ab2a:	e023      	b.n	800ab74 <HAL_TIM_PWM_Stop+0x238>
 800ab2c:	683b      	ldr	r3, [r7, #0]
 800ab2e:	2b04      	cmp	r3, #4
 800ab30:	d104      	bne.n	800ab3c <HAL_TIM_PWM_Stop+0x200>
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	2201      	movs	r2, #1
 800ab36:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ab3a:	e01b      	b.n	800ab74 <HAL_TIM_PWM_Stop+0x238>
 800ab3c:	683b      	ldr	r3, [r7, #0]
 800ab3e:	2b08      	cmp	r3, #8
 800ab40:	d104      	bne.n	800ab4c <HAL_TIM_PWM_Stop+0x210>
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	2201      	movs	r2, #1
 800ab46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ab4a:	e013      	b.n	800ab74 <HAL_TIM_PWM_Stop+0x238>
 800ab4c:	683b      	ldr	r3, [r7, #0]
 800ab4e:	2b0c      	cmp	r3, #12
 800ab50:	d104      	bne.n	800ab5c <HAL_TIM_PWM_Stop+0x220>
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	2201      	movs	r2, #1
 800ab56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ab5a:	e00b      	b.n	800ab74 <HAL_TIM_PWM_Stop+0x238>
 800ab5c:	683b      	ldr	r3, [r7, #0]
 800ab5e:	2b10      	cmp	r3, #16
 800ab60:	d104      	bne.n	800ab6c <HAL_TIM_PWM_Stop+0x230>
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	2201      	movs	r2, #1
 800ab66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ab6a:	e003      	b.n	800ab74 <HAL_TIM_PWM_Stop+0x238>
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	2201      	movs	r2, #1
 800ab70:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 800ab74:	2300      	movs	r3, #0
}
 800ab76:	4618      	mov	r0, r3
 800ab78:	3708      	adds	r7, #8
 800ab7a:	46bd      	mov	sp, r7
 800ab7c:	bd80      	pop	{r7, pc}
 800ab7e:	bf00      	nop
 800ab80:	40012c00 	.word	0x40012c00
 800ab84:	40000400 	.word	0x40000400
 800ab88:	40000800 	.word	0x40000800
 800ab8c:	40000c00 	.word	0x40000c00
 800ab90:	40013400 	.word	0x40013400
 800ab94:	40014000 	.word	0x40014000
 800ab98:	40014400 	.word	0x40014400
 800ab9c:	40014800 	.word	0x40014800
 800aba0:	0800fa34 	.word	0x0800fa34

0800aba4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800aba4:	b580      	push	{r7, lr}
 800aba6:	b086      	sub	sp, #24
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	6078      	str	r0, [r7, #4]
 800abac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d101      	bne.n	800abb8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800abb4:	2301      	movs	r3, #1
 800abb6:	e1b0      	b.n	800af1a <HAL_TIM_Encoder_Init+0x376>
  }

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	4a7f      	ldr	r2, [pc, #508]	@ (800adbc <HAL_TIM_Encoder_Init+0x218>)
 800abbe:	4293      	cmp	r3, r2
 800abc0:	d01d      	beq.n	800abfe <HAL_TIM_Encoder_Init+0x5a>
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800abca:	d018      	beq.n	800abfe <HAL_TIM_Encoder_Init+0x5a>
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	4a7b      	ldr	r2, [pc, #492]	@ (800adc0 <HAL_TIM_Encoder_Init+0x21c>)
 800abd2:	4293      	cmp	r3, r2
 800abd4:	d013      	beq.n	800abfe <HAL_TIM_Encoder_Init+0x5a>
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	4a7a      	ldr	r2, [pc, #488]	@ (800adc4 <HAL_TIM_Encoder_Init+0x220>)
 800abdc:	4293      	cmp	r3, r2
 800abde:	d00e      	beq.n	800abfe <HAL_TIM_Encoder_Init+0x5a>
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	4a78      	ldr	r2, [pc, #480]	@ (800adc8 <HAL_TIM_Encoder_Init+0x224>)
 800abe6:	4293      	cmp	r3, r2
 800abe8:	d009      	beq.n	800abfe <HAL_TIM_Encoder_Init+0x5a>
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	4a77      	ldr	r2, [pc, #476]	@ (800adcc <HAL_TIM_Encoder_Init+0x228>)
 800abf0:	4293      	cmp	r3, r2
 800abf2:	d004      	beq.n	800abfe <HAL_TIM_Encoder_Init+0x5a>
 800abf4:	f640 31e3 	movw	r1, #3043	@ 0xbe3
 800abf8:	4875      	ldr	r0, [pc, #468]	@ (800add0 <HAL_TIM_Encoder_Init+0x22c>)
 800abfa:	f7f9 ffc3 	bl	8004b84 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	689b      	ldr	r3, [r3, #8]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d014      	beq.n	800ac30 <HAL_TIM_Encoder_Init+0x8c>
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	689b      	ldr	r3, [r3, #8]
 800ac0a:	2b10      	cmp	r3, #16
 800ac0c:	d010      	beq.n	800ac30 <HAL_TIM_Encoder_Init+0x8c>
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	689b      	ldr	r3, [r3, #8]
 800ac12:	2b20      	cmp	r3, #32
 800ac14:	d00c      	beq.n	800ac30 <HAL_TIM_Encoder_Init+0x8c>
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	689b      	ldr	r3, [r3, #8]
 800ac1a:	2b40      	cmp	r3, #64	@ 0x40
 800ac1c:	d008      	beq.n	800ac30 <HAL_TIM_Encoder_Init+0x8c>
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	689b      	ldr	r3, [r3, #8]
 800ac22:	2b60      	cmp	r3, #96	@ 0x60
 800ac24:	d004      	beq.n	800ac30 <HAL_TIM_Encoder_Init+0x8c>
 800ac26:	f640 31e4 	movw	r1, #3044	@ 0xbe4
 800ac2a:	4869      	ldr	r0, [pc, #420]	@ (800add0 <HAL_TIM_Encoder_Init+0x22c>)
 800ac2c:	f7f9 ffaa 	bl	8004b84 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	691b      	ldr	r3, [r3, #16]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d00e      	beq.n	800ac56 <HAL_TIM_Encoder_Init+0xb2>
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	691b      	ldr	r3, [r3, #16]
 800ac3c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ac40:	d009      	beq.n	800ac56 <HAL_TIM_Encoder_Init+0xb2>
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	691b      	ldr	r3, [r3, #16]
 800ac46:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ac4a:	d004      	beq.n	800ac56 <HAL_TIM_Encoder_Init+0xb2>
 800ac4c:	f640 31e5 	movw	r1, #3045	@ 0xbe5
 800ac50:	485f      	ldr	r0, [pc, #380]	@ (800add0 <HAL_TIM_Encoder_Init+0x22c>)
 800ac52:	f7f9 ff97 	bl	8004b84 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	699b      	ldr	r3, [r3, #24]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d008      	beq.n	800ac70 <HAL_TIM_Encoder_Init+0xcc>
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	699b      	ldr	r3, [r3, #24]
 800ac62:	2b80      	cmp	r3, #128	@ 0x80
 800ac64:	d004      	beq.n	800ac70 <HAL_TIM_Encoder_Init+0xcc>
 800ac66:	f640 31e6 	movw	r1, #3046	@ 0xbe6
 800ac6a:	4859      	ldr	r0, [pc, #356]	@ (800add0 <HAL_TIM_Encoder_Init+0x22c>)
 800ac6c:	f7f9 ff8a 	bl	8004b84 <assert_failed>
  assert_param(IS_TIM_ENCODER_MODE(sConfig->EncoderMode));
 800ac70:	683b      	ldr	r3, [r7, #0]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	2b01      	cmp	r3, #1
 800ac76:	d00c      	beq.n	800ac92 <HAL_TIM_Encoder_Init+0xee>
 800ac78:	683b      	ldr	r3, [r7, #0]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	2b02      	cmp	r3, #2
 800ac7e:	d008      	beq.n	800ac92 <HAL_TIM_Encoder_Init+0xee>
 800ac80:	683b      	ldr	r3, [r7, #0]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	2b03      	cmp	r3, #3
 800ac86:	d004      	beq.n	800ac92 <HAL_TIM_Encoder_Init+0xee>
 800ac88:	f640 31e7 	movw	r1, #3047	@ 0xbe7
 800ac8c:	4850      	ldr	r0, [pc, #320]	@ (800add0 <HAL_TIM_Encoder_Init+0x22c>)
 800ac8e:	f7f9 ff79 	bl	8004b84 <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC1Selection));
 800ac92:	683b      	ldr	r3, [r7, #0]
 800ac94:	689b      	ldr	r3, [r3, #8]
 800ac96:	2b01      	cmp	r3, #1
 800ac98:	d00c      	beq.n	800acb4 <HAL_TIM_Encoder_Init+0x110>
 800ac9a:	683b      	ldr	r3, [r7, #0]
 800ac9c:	689b      	ldr	r3, [r3, #8]
 800ac9e:	2b02      	cmp	r3, #2
 800aca0:	d008      	beq.n	800acb4 <HAL_TIM_Encoder_Init+0x110>
 800aca2:	683b      	ldr	r3, [r7, #0]
 800aca4:	689b      	ldr	r3, [r3, #8]
 800aca6:	2b03      	cmp	r3, #3
 800aca8:	d004      	beq.n	800acb4 <HAL_TIM_Encoder_Init+0x110>
 800acaa:	f640 31e8 	movw	r1, #3048	@ 0xbe8
 800acae:	4848      	ldr	r0, [pc, #288]	@ (800add0 <HAL_TIM_Encoder_Init+0x22c>)
 800acb0:	f7f9 ff68 	bl	8004b84 <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC2Selection));
 800acb4:	683b      	ldr	r3, [r7, #0]
 800acb6:	699b      	ldr	r3, [r3, #24]
 800acb8:	2b01      	cmp	r3, #1
 800acba:	d00c      	beq.n	800acd6 <HAL_TIM_Encoder_Init+0x132>
 800acbc:	683b      	ldr	r3, [r7, #0]
 800acbe:	699b      	ldr	r3, [r3, #24]
 800acc0:	2b02      	cmp	r3, #2
 800acc2:	d008      	beq.n	800acd6 <HAL_TIM_Encoder_Init+0x132>
 800acc4:	683b      	ldr	r3, [r7, #0]
 800acc6:	699b      	ldr	r3, [r3, #24]
 800acc8:	2b03      	cmp	r3, #3
 800acca:	d004      	beq.n	800acd6 <HAL_TIM_Encoder_Init+0x132>
 800accc:	f640 31e9 	movw	r1, #3049	@ 0xbe9
 800acd0:	483f      	ldr	r0, [pc, #252]	@ (800add0 <HAL_TIM_Encoder_Init+0x22c>)
 800acd2:	f7f9 ff57 	bl	8004b84 <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC1Polarity));
 800acd6:	683b      	ldr	r3, [r7, #0]
 800acd8:	685b      	ldr	r3, [r3, #4]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d008      	beq.n	800acf0 <HAL_TIM_Encoder_Init+0x14c>
 800acde:	683b      	ldr	r3, [r7, #0]
 800ace0:	685b      	ldr	r3, [r3, #4]
 800ace2:	2b02      	cmp	r3, #2
 800ace4:	d004      	beq.n	800acf0 <HAL_TIM_Encoder_Init+0x14c>
 800ace6:	f640 31ea 	movw	r1, #3050	@ 0xbea
 800acea:	4839      	ldr	r0, [pc, #228]	@ (800add0 <HAL_TIM_Encoder_Init+0x22c>)
 800acec:	f7f9 ff4a 	bl	8004b84 <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC2Polarity));
 800acf0:	683b      	ldr	r3, [r7, #0]
 800acf2:	695b      	ldr	r3, [r3, #20]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d008      	beq.n	800ad0a <HAL_TIM_Encoder_Init+0x166>
 800acf8:	683b      	ldr	r3, [r7, #0]
 800acfa:	695b      	ldr	r3, [r3, #20]
 800acfc:	2b02      	cmp	r3, #2
 800acfe:	d004      	beq.n	800ad0a <HAL_TIM_Encoder_Init+0x166>
 800ad00:	f640 31eb 	movw	r1, #3051	@ 0xbeb
 800ad04:	4832      	ldr	r0, [pc, #200]	@ (800add0 <HAL_TIM_Encoder_Init+0x22c>)
 800ad06:	f7f9 ff3d 	bl	8004b84 <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
 800ad0a:	683b      	ldr	r3, [r7, #0]
 800ad0c:	68db      	ldr	r3, [r3, #12]
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d010      	beq.n	800ad34 <HAL_TIM_Encoder_Init+0x190>
 800ad12:	683b      	ldr	r3, [r7, #0]
 800ad14:	68db      	ldr	r3, [r3, #12]
 800ad16:	2b04      	cmp	r3, #4
 800ad18:	d00c      	beq.n	800ad34 <HAL_TIM_Encoder_Init+0x190>
 800ad1a:	683b      	ldr	r3, [r7, #0]
 800ad1c:	68db      	ldr	r3, [r3, #12]
 800ad1e:	2b08      	cmp	r3, #8
 800ad20:	d008      	beq.n	800ad34 <HAL_TIM_Encoder_Init+0x190>
 800ad22:	683b      	ldr	r3, [r7, #0]
 800ad24:	68db      	ldr	r3, [r3, #12]
 800ad26:	2b0c      	cmp	r3, #12
 800ad28:	d004      	beq.n	800ad34 <HAL_TIM_Encoder_Init+0x190>
 800ad2a:	f640 31ec 	movw	r1, #3052	@ 0xbec
 800ad2e:	4828      	ldr	r0, [pc, #160]	@ (800add0 <HAL_TIM_Encoder_Init+0x22c>)
 800ad30:	f7f9 ff28 	bl	8004b84 <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
 800ad34:	683b      	ldr	r3, [r7, #0]
 800ad36:	69db      	ldr	r3, [r3, #28]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d010      	beq.n	800ad5e <HAL_TIM_Encoder_Init+0x1ba>
 800ad3c:	683b      	ldr	r3, [r7, #0]
 800ad3e:	69db      	ldr	r3, [r3, #28]
 800ad40:	2b04      	cmp	r3, #4
 800ad42:	d00c      	beq.n	800ad5e <HAL_TIM_Encoder_Init+0x1ba>
 800ad44:	683b      	ldr	r3, [r7, #0]
 800ad46:	69db      	ldr	r3, [r3, #28]
 800ad48:	2b08      	cmp	r3, #8
 800ad4a:	d008      	beq.n	800ad5e <HAL_TIM_Encoder_Init+0x1ba>
 800ad4c:	683b      	ldr	r3, [r7, #0]
 800ad4e:	69db      	ldr	r3, [r3, #28]
 800ad50:	2b0c      	cmp	r3, #12
 800ad52:	d004      	beq.n	800ad5e <HAL_TIM_Encoder_Init+0x1ba>
 800ad54:	f640 31ed 	movw	r1, #3053	@ 0xbed
 800ad58:	481d      	ldr	r0, [pc, #116]	@ (800add0 <HAL_TIM_Encoder_Init+0x22c>)
 800ad5a:	f7f9 ff13 	bl	8004b84 <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
 800ad5e:	683b      	ldr	r3, [r7, #0]
 800ad60:	691b      	ldr	r3, [r3, #16]
 800ad62:	2b0f      	cmp	r3, #15
 800ad64:	d904      	bls.n	800ad70 <HAL_TIM_Encoder_Init+0x1cc>
 800ad66:	f640 31ee 	movw	r1, #3054	@ 0xbee
 800ad6a:	4819      	ldr	r0, [pc, #100]	@ (800add0 <HAL_TIM_Encoder_Init+0x22c>)
 800ad6c:	f7f9 ff0a 	bl	8004b84 <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
 800ad70:	683b      	ldr	r3, [r7, #0]
 800ad72:	6a1b      	ldr	r3, [r3, #32]
 800ad74:	2b0f      	cmp	r3, #15
 800ad76:	d904      	bls.n	800ad82 <HAL_TIM_Encoder_Init+0x1de>
 800ad78:	f640 31ef 	movw	r1, #3055	@ 0xbef
 800ad7c:	4814      	ldr	r0, [pc, #80]	@ (800add0 <HAL_TIM_Encoder_Init+0x22c>)
 800ad7e:	f7f9 ff01 	bl	8004b84 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ad8a:	d004      	beq.n	800ad96 <HAL_TIM_Encoder_Init+0x1f2>
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	4a0d      	ldr	r2, [pc, #52]	@ (800adc8 <HAL_TIM_Encoder_Init+0x224>)
 800ad92:	4293      	cmp	r3, r2
 800ad94:	d107      	bne.n	800ada6 <HAL_TIM_Encoder_Init+0x202>
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	68db      	ldr	r3, [r3, #12]
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	bf14      	ite	ne
 800ad9e:	2301      	movne	r3, #1
 800ada0:	2300      	moveq	r3, #0
 800ada2:	b2db      	uxtb	r3, r3
 800ada4:	e01a      	b.n	800addc <HAL_TIM_Encoder_Init+0x238>
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	68db      	ldr	r3, [r3, #12]
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d012      	beq.n	800add4 <HAL_TIM_Encoder_Init+0x230>
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	68db      	ldr	r3, [r3, #12]
 800adb2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800adb6:	d20d      	bcs.n	800add4 <HAL_TIM_Encoder_Init+0x230>
 800adb8:	2301      	movs	r3, #1
 800adba:	e00c      	b.n	800add6 <HAL_TIM_Encoder_Init+0x232>
 800adbc:	40012c00 	.word	0x40012c00
 800adc0:	40000400 	.word	0x40000400
 800adc4:	40000800 	.word	0x40000800
 800adc8:	40000c00 	.word	0x40000c00
 800adcc:	40013400 	.word	0x40013400
 800add0:	0800fa34 	.word	0x0800fa34
 800add4:	2300      	movs	r3, #0
 800add6:	f003 0301 	and.w	r3, r3, #1
 800adda:	b2db      	uxtb	r3, r3
 800addc:	2b00      	cmp	r3, #0
 800adde:	d104      	bne.n	800adea <HAL_TIM_Encoder_Init+0x246>
 800ade0:	f44f 613f 	mov.w	r1, #3056	@ 0xbf0
 800ade4:	484f      	ldr	r0, [pc, #316]	@ (800af24 <HAL_TIM_Encoder_Init+0x380>)
 800ade6:	f7f9 fecd 	bl	8004b84 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800adf0:	b2db      	uxtb	r3, r3
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d106      	bne.n	800ae04 <HAL_TIM_Encoder_Init+0x260>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	2200      	movs	r2, #0
 800adfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800adfe:	6878      	ldr	r0, [r7, #4]
 800ae00:	f7fa faaa 	bl	8005358 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	2202      	movs	r2, #2
 800ae08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	689b      	ldr	r3, [r3, #8]
 800ae12:	687a      	ldr	r2, [r7, #4]
 800ae14:	6812      	ldr	r2, [r2, #0]
 800ae16:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 800ae1a:	f023 0307 	bic.w	r3, r3, #7
 800ae1e:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681a      	ldr	r2, [r3, #0]
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	3304      	adds	r3, #4
 800ae28:	4619      	mov	r1, r3
 800ae2a:	4610      	mov	r0, r2
 800ae2c:	f001 f886 	bl	800bf3c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	689b      	ldr	r3, [r3, #8]
 800ae36:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	699b      	ldr	r3, [r3, #24]
 800ae3e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	6a1b      	ldr	r3, [r3, #32]
 800ae46:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800ae48:	683b      	ldr	r3, [r7, #0]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	697a      	ldr	r2, [r7, #20]
 800ae4e:	4313      	orrs	r3, r2
 800ae50:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800ae52:	693b      	ldr	r3, [r7, #16]
 800ae54:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ae58:	f023 0303 	bic.w	r3, r3, #3
 800ae5c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800ae5e:	683b      	ldr	r3, [r7, #0]
 800ae60:	689a      	ldr	r2, [r3, #8]
 800ae62:	683b      	ldr	r3, [r7, #0]
 800ae64:	699b      	ldr	r3, [r3, #24]
 800ae66:	021b      	lsls	r3, r3, #8
 800ae68:	4313      	orrs	r3, r2
 800ae6a:	693a      	ldr	r2, [r7, #16]
 800ae6c:	4313      	orrs	r3, r2
 800ae6e:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800ae70:	693b      	ldr	r3, [r7, #16]
 800ae72:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800ae76:	f023 030c 	bic.w	r3, r3, #12
 800ae7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800ae7c:	693b      	ldr	r3, [r7, #16]
 800ae7e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800ae82:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ae86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800ae88:	683b      	ldr	r3, [r7, #0]
 800ae8a:	68da      	ldr	r2, [r3, #12]
 800ae8c:	683b      	ldr	r3, [r7, #0]
 800ae8e:	69db      	ldr	r3, [r3, #28]
 800ae90:	021b      	lsls	r3, r3, #8
 800ae92:	4313      	orrs	r3, r2
 800ae94:	693a      	ldr	r2, [r7, #16]
 800ae96:	4313      	orrs	r3, r2
 800ae98:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800ae9a:	683b      	ldr	r3, [r7, #0]
 800ae9c:	691b      	ldr	r3, [r3, #16]
 800ae9e:	011a      	lsls	r2, r3, #4
 800aea0:	683b      	ldr	r3, [r7, #0]
 800aea2:	6a1b      	ldr	r3, [r3, #32]
 800aea4:	031b      	lsls	r3, r3, #12
 800aea6:	4313      	orrs	r3, r2
 800aea8:	693a      	ldr	r2, [r7, #16]
 800aeaa:	4313      	orrs	r3, r2
 800aeac:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800aeb4:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800aebc:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800aebe:	683b      	ldr	r3, [r7, #0]
 800aec0:	685a      	ldr	r2, [r3, #4]
 800aec2:	683b      	ldr	r3, [r7, #0]
 800aec4:	695b      	ldr	r3, [r3, #20]
 800aec6:	011b      	lsls	r3, r3, #4
 800aec8:	4313      	orrs	r3, r2
 800aeca:	68fa      	ldr	r2, [r7, #12]
 800aecc:	4313      	orrs	r3, r2
 800aece:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	697a      	ldr	r2, [r7, #20]
 800aed6:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	693a      	ldr	r2, [r7, #16]
 800aede:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	68fa      	ldr	r2, [r7, #12]
 800aee6:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	2201      	movs	r2, #1
 800aeec:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	2201      	movs	r2, #1
 800aef4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	2201      	movs	r2, #1
 800aefc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	2201      	movs	r2, #1
 800af04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	2201      	movs	r2, #1
 800af0c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	2201      	movs	r2, #1
 800af14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800af18:	2300      	movs	r3, #0
}
 800af1a:	4618      	mov	r0, r3
 800af1c:	3718      	adds	r7, #24
 800af1e:	46bd      	mov	sp, r7
 800af20:	bd80      	pop	{r7, pc}
 800af22:	bf00      	nop
 800af24:	0800fa34 	.word	0x0800fa34

0800af28 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800af28:	b580      	push	{r7, lr}
 800af2a:	b084      	sub	sp, #16
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
 800af30:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800af38:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800af40:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800af48:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800af50:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	4a4d      	ldr	r2, [pc, #308]	@ (800b08c <HAL_TIM_Encoder_Start+0x164>)
 800af58:	4293      	cmp	r3, r2
 800af5a:	d01d      	beq.n	800af98 <HAL_TIM_Encoder_Start+0x70>
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800af64:	d018      	beq.n	800af98 <HAL_TIM_Encoder_Start+0x70>
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	4a49      	ldr	r2, [pc, #292]	@ (800b090 <HAL_TIM_Encoder_Start+0x168>)
 800af6c:	4293      	cmp	r3, r2
 800af6e:	d013      	beq.n	800af98 <HAL_TIM_Encoder_Start+0x70>
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	4a47      	ldr	r2, [pc, #284]	@ (800b094 <HAL_TIM_Encoder_Start+0x16c>)
 800af76:	4293      	cmp	r3, r2
 800af78:	d00e      	beq.n	800af98 <HAL_TIM_Encoder_Start+0x70>
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	4a46      	ldr	r2, [pc, #280]	@ (800b098 <HAL_TIM_Encoder_Start+0x170>)
 800af80:	4293      	cmp	r3, r2
 800af82:	d009      	beq.n	800af98 <HAL_TIM_Encoder_Start+0x70>
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	4a44      	ldr	r2, [pc, #272]	@ (800b09c <HAL_TIM_Encoder_Start+0x174>)
 800af8a:	4293      	cmp	r3, r2
 800af8c:	d004      	beq.n	800af98 <HAL_TIM_Encoder_Start+0x70>
 800af8e:	f640 41a1 	movw	r1, #3233	@ 0xca1
 800af92:	4843      	ldr	r0, [pc, #268]	@ (800b0a0 <HAL_TIM_Encoder_Start+0x178>)
 800af94:	f7f9 fdf6 	bl	8004b84 <assert_failed>

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800af98:	683b      	ldr	r3, [r7, #0]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d110      	bne.n	800afc0 <HAL_TIM_Encoder_Start+0x98>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800af9e:	7bfb      	ldrb	r3, [r7, #15]
 800afa0:	2b01      	cmp	r3, #1
 800afa2:	d102      	bne.n	800afaa <HAL_TIM_Encoder_Start+0x82>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800afa4:	7b7b      	ldrb	r3, [r7, #13]
 800afa6:	2b01      	cmp	r3, #1
 800afa8:	d001      	beq.n	800afae <HAL_TIM_Encoder_Start+0x86>
    {
      return HAL_ERROR;
 800afaa:	2301      	movs	r3, #1
 800afac:	e069      	b.n	800b082 <HAL_TIM_Encoder_Start+0x15a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	2202      	movs	r2, #2
 800afb2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	2202      	movs	r2, #2
 800afba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800afbe:	e031      	b.n	800b024 <HAL_TIM_Encoder_Start+0xfc>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800afc0:	683b      	ldr	r3, [r7, #0]
 800afc2:	2b04      	cmp	r3, #4
 800afc4:	d110      	bne.n	800afe8 <HAL_TIM_Encoder_Start+0xc0>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800afc6:	7bbb      	ldrb	r3, [r7, #14]
 800afc8:	2b01      	cmp	r3, #1
 800afca:	d102      	bne.n	800afd2 <HAL_TIM_Encoder_Start+0xaa>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800afcc:	7b3b      	ldrb	r3, [r7, #12]
 800afce:	2b01      	cmp	r3, #1
 800afd0:	d001      	beq.n	800afd6 <HAL_TIM_Encoder_Start+0xae>
    {
      return HAL_ERROR;
 800afd2:	2301      	movs	r3, #1
 800afd4:	e055      	b.n	800b082 <HAL_TIM_Encoder_Start+0x15a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	2202      	movs	r2, #2
 800afda:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	2202      	movs	r2, #2
 800afe2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800afe6:	e01d      	b.n	800b024 <HAL_TIM_Encoder_Start+0xfc>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800afe8:	7bfb      	ldrb	r3, [r7, #15]
 800afea:	2b01      	cmp	r3, #1
 800afec:	d108      	bne.n	800b000 <HAL_TIM_Encoder_Start+0xd8>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800afee:	7bbb      	ldrb	r3, [r7, #14]
 800aff0:	2b01      	cmp	r3, #1
 800aff2:	d105      	bne.n	800b000 <HAL_TIM_Encoder_Start+0xd8>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800aff4:	7b7b      	ldrb	r3, [r7, #13]
 800aff6:	2b01      	cmp	r3, #1
 800aff8:	d102      	bne.n	800b000 <HAL_TIM_Encoder_Start+0xd8>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800affa:	7b3b      	ldrb	r3, [r7, #12]
 800affc:	2b01      	cmp	r3, #1
 800affe:	d001      	beq.n	800b004 <HAL_TIM_Encoder_Start+0xdc>
    {
      return HAL_ERROR;
 800b000:	2301      	movs	r3, #1
 800b002:	e03e      	b.n	800b082 <HAL_TIM_Encoder_Start+0x15a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	2202      	movs	r2, #2
 800b008:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	2202      	movs	r2, #2
 800b010:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	2202      	movs	r2, #2
 800b018:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	2202      	movs	r2, #2
 800b020:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800b024:	683b      	ldr	r3, [r7, #0]
 800b026:	2b00      	cmp	r3, #0
 800b028:	d003      	beq.n	800b032 <HAL_TIM_Encoder_Start+0x10a>
 800b02a:	683b      	ldr	r3, [r7, #0]
 800b02c:	2b04      	cmp	r3, #4
 800b02e:	d008      	beq.n	800b042 <HAL_TIM_Encoder_Start+0x11a>
 800b030:	e00f      	b.n	800b052 <HAL_TIM_Encoder_Start+0x12a>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	2201      	movs	r2, #1
 800b038:	2100      	movs	r1, #0
 800b03a:	4618      	mov	r0, r3
 800b03c:	f001 fc1e 	bl	800c87c <TIM_CCxChannelCmd>
      break;
 800b040:	e016      	b.n	800b070 <HAL_TIM_Encoder_Start+0x148>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	2201      	movs	r2, #1
 800b048:	2104      	movs	r1, #4
 800b04a:	4618      	mov	r0, r3
 800b04c:	f001 fc16 	bl	800c87c <TIM_CCxChannelCmd>
      break;
 800b050:	e00e      	b.n	800b070 <HAL_TIM_Encoder_Start+0x148>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	2201      	movs	r2, #1
 800b058:	2100      	movs	r1, #0
 800b05a:	4618      	mov	r0, r3
 800b05c:	f001 fc0e 	bl	800c87c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	2201      	movs	r2, #1
 800b066:	2104      	movs	r1, #4
 800b068:	4618      	mov	r0, r3
 800b06a:	f001 fc07 	bl	800c87c <TIM_CCxChannelCmd>
      break;
 800b06e:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	681a      	ldr	r2, [r3, #0]
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	f042 0201 	orr.w	r2, r2, #1
 800b07e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800b080:	2300      	movs	r3, #0
}
 800b082:	4618      	mov	r0, r3
 800b084:	3710      	adds	r7, #16
 800b086:	46bd      	mov	sp, r7
 800b088:	bd80      	pop	{r7, pc}
 800b08a:	bf00      	nop
 800b08c:	40012c00 	.word	0x40012c00
 800b090:	40000400 	.word	0x40000400
 800b094:	40000800 	.word	0x40000800
 800b098:	40000c00 	.word	0x40000c00
 800b09c:	40013400 	.word	0x40013400
 800b0a0:	0800fa34 	.word	0x0800fa34

0800b0a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b0a4:	b580      	push	{r7, lr}
 800b0a6:	b084      	sub	sp, #16
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	68db      	ldr	r3, [r3, #12]
 800b0b2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	691b      	ldr	r3, [r3, #16]
 800b0ba:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800b0bc:	68bb      	ldr	r3, [r7, #8]
 800b0be:	f003 0302 	and.w	r3, r3, #2
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d020      	beq.n	800b108 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	f003 0302 	and.w	r3, r3, #2
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d01b      	beq.n	800b108 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	f06f 0202 	mvn.w	r2, #2
 800b0d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	2201      	movs	r2, #1
 800b0de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	699b      	ldr	r3, [r3, #24]
 800b0e6:	f003 0303 	and.w	r3, r3, #3
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d003      	beq.n	800b0f6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b0ee:	6878      	ldr	r0, [r7, #4]
 800b0f0:	f000 ff06 	bl	800bf00 <HAL_TIM_IC_CaptureCallback>
 800b0f4:	e005      	b.n	800b102 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b0f6:	6878      	ldr	r0, [r7, #4]
 800b0f8:	f000 fef8 	bl	800beec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b0fc:	6878      	ldr	r0, [r7, #4]
 800b0fe:	f000 ff09 	bl	800bf14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	2200      	movs	r2, #0
 800b106:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800b108:	68bb      	ldr	r3, [r7, #8]
 800b10a:	f003 0304 	and.w	r3, r3, #4
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d020      	beq.n	800b154 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	f003 0304 	and.w	r3, r3, #4
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d01b      	beq.n	800b154 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	f06f 0204 	mvn.w	r2, #4
 800b124:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	2202      	movs	r2, #2
 800b12a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	699b      	ldr	r3, [r3, #24]
 800b132:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b136:	2b00      	cmp	r3, #0
 800b138:	d003      	beq.n	800b142 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b13a:	6878      	ldr	r0, [r7, #4]
 800b13c:	f000 fee0 	bl	800bf00 <HAL_TIM_IC_CaptureCallback>
 800b140:	e005      	b.n	800b14e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b142:	6878      	ldr	r0, [r7, #4]
 800b144:	f000 fed2 	bl	800beec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b148:	6878      	ldr	r0, [r7, #4]
 800b14a:	f000 fee3 	bl	800bf14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	2200      	movs	r2, #0
 800b152:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800b154:	68bb      	ldr	r3, [r7, #8]
 800b156:	f003 0308 	and.w	r3, r3, #8
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d020      	beq.n	800b1a0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	f003 0308 	and.w	r3, r3, #8
 800b164:	2b00      	cmp	r3, #0
 800b166:	d01b      	beq.n	800b1a0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	f06f 0208 	mvn.w	r2, #8
 800b170:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	2204      	movs	r2, #4
 800b176:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	69db      	ldr	r3, [r3, #28]
 800b17e:	f003 0303 	and.w	r3, r3, #3
 800b182:	2b00      	cmp	r3, #0
 800b184:	d003      	beq.n	800b18e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b186:	6878      	ldr	r0, [r7, #4]
 800b188:	f000 feba 	bl	800bf00 <HAL_TIM_IC_CaptureCallback>
 800b18c:	e005      	b.n	800b19a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b18e:	6878      	ldr	r0, [r7, #4]
 800b190:	f000 feac 	bl	800beec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b194:	6878      	ldr	r0, [r7, #4]
 800b196:	f000 febd 	bl	800bf14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	2200      	movs	r2, #0
 800b19e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800b1a0:	68bb      	ldr	r3, [r7, #8]
 800b1a2:	f003 0310 	and.w	r3, r3, #16
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d020      	beq.n	800b1ec <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	f003 0310 	and.w	r3, r3, #16
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d01b      	beq.n	800b1ec <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	f06f 0210 	mvn.w	r2, #16
 800b1bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	2208      	movs	r2, #8
 800b1c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	69db      	ldr	r3, [r3, #28]
 800b1ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d003      	beq.n	800b1da <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b1d2:	6878      	ldr	r0, [r7, #4]
 800b1d4:	f000 fe94 	bl	800bf00 <HAL_TIM_IC_CaptureCallback>
 800b1d8:	e005      	b.n	800b1e6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b1da:	6878      	ldr	r0, [r7, #4]
 800b1dc:	f000 fe86 	bl	800beec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b1e0:	6878      	ldr	r0, [r7, #4]
 800b1e2:	f000 fe97 	bl	800bf14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	2200      	movs	r2, #0
 800b1ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800b1ec:	68bb      	ldr	r3, [r7, #8]
 800b1ee:	f003 0301 	and.w	r3, r3, #1
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d00c      	beq.n	800b210 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	f003 0301 	and.w	r3, r3, #1
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d007      	beq.n	800b210 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	f06f 0201 	mvn.w	r2, #1
 800b208:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b20a:	6878      	ldr	r0, [r7, #4]
 800b20c:	f7f8 fd3a 	bl	8003c84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b210:	68bb      	ldr	r3, [r7, #8]
 800b212:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b216:	2b00      	cmp	r3, #0
 800b218:	d104      	bne.n	800b224 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800b21a:	68bb      	ldr	r3, [r7, #8]
 800b21c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b220:	2b00      	cmp	r3, #0
 800b222:	d00c      	beq.n	800b23e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d007      	beq.n	800b23e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800b236:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b238:	6878      	ldr	r0, [r7, #4]
 800b23a:	f001 fe2f 	bl	800ce9c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800b23e:	68bb      	ldr	r3, [r7, #8]
 800b240:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b244:	2b00      	cmp	r3, #0
 800b246:	d00c      	beq.n	800b262 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d007      	beq.n	800b262 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800b25a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b25c:	6878      	ldr	r0, [r7, #4]
 800b25e:	f001 fe27 	bl	800ceb0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800b262:	68bb      	ldr	r3, [r7, #8]
 800b264:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d00c      	beq.n	800b286 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b272:	2b00      	cmp	r3, #0
 800b274:	d007      	beq.n	800b286 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800b27e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b280:	6878      	ldr	r0, [r7, #4]
 800b282:	f000 fe51 	bl	800bf28 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800b286:	68bb      	ldr	r3, [r7, #8]
 800b288:	f003 0320 	and.w	r3, r3, #32
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d00c      	beq.n	800b2aa <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	f003 0320 	and.w	r3, r3, #32
 800b296:	2b00      	cmp	r3, #0
 800b298:	d007      	beq.n	800b2aa <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	f06f 0220 	mvn.w	r2, #32
 800b2a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b2a4:	6878      	ldr	r0, [r7, #4]
 800b2a6:	f001 fdef 	bl	800ce88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b2aa:	bf00      	nop
 800b2ac:	3710      	adds	r7, #16
 800b2ae:	46bd      	mov	sp, r7
 800b2b0:	bd80      	pop	{r7, pc}
	...

0800b2b4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b2b4:	b580      	push	{r7, lr}
 800b2b6:	b086      	sub	sp, #24
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	60f8      	str	r0, [r7, #12]
 800b2bc:	60b9      	str	r1, [r7, #8]
 800b2be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b2c0:	2300      	movs	r3, #0
 800b2c2:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d016      	beq.n	800b2f8 <HAL_TIM_PWM_ConfigChannel+0x44>
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	2b04      	cmp	r3, #4
 800b2ce:	d013      	beq.n	800b2f8 <HAL_TIM_PWM_ConfigChannel+0x44>
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	2b08      	cmp	r3, #8
 800b2d4:	d010      	beq.n	800b2f8 <HAL_TIM_PWM_ConfigChannel+0x44>
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	2b0c      	cmp	r3, #12
 800b2da:	d00d      	beq.n	800b2f8 <HAL_TIM_PWM_ConfigChannel+0x44>
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	2b10      	cmp	r3, #16
 800b2e0:	d00a      	beq.n	800b2f8 <HAL_TIM_PWM_ConfigChannel+0x44>
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	2b14      	cmp	r3, #20
 800b2e6:	d007      	beq.n	800b2f8 <HAL_TIM_PWM_ConfigChannel+0x44>
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	2b3c      	cmp	r3, #60	@ 0x3c
 800b2ec:	d004      	beq.n	800b2f8 <HAL_TIM_PWM_ConfigChannel+0x44>
 800b2ee:	f241 01b3 	movw	r1, #4275	@ 0x10b3
 800b2f2:	488b      	ldr	r0, [pc, #556]	@ (800b520 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 800b2f4:	f7f9 fc46 	bl	8004b84 <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 800b2f8:	68bb      	ldr	r3, [r7, #8]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	2b60      	cmp	r3, #96	@ 0x60
 800b2fe:	d01c      	beq.n	800b33a <HAL_TIM_PWM_ConfigChannel+0x86>
 800b300:	68bb      	ldr	r3, [r7, #8]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	2b70      	cmp	r3, #112	@ 0x70
 800b306:	d018      	beq.n	800b33a <HAL_TIM_PWM_ConfigChannel+0x86>
 800b308:	68bb      	ldr	r3, [r7, #8]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	4a85      	ldr	r2, [pc, #532]	@ (800b524 <HAL_TIM_PWM_ConfigChannel+0x270>)
 800b30e:	4293      	cmp	r3, r2
 800b310:	d013      	beq.n	800b33a <HAL_TIM_PWM_ConfigChannel+0x86>
 800b312:	68bb      	ldr	r3, [r7, #8]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	4a84      	ldr	r2, [pc, #528]	@ (800b528 <HAL_TIM_PWM_ConfigChannel+0x274>)
 800b318:	4293      	cmp	r3, r2
 800b31a:	d00e      	beq.n	800b33a <HAL_TIM_PWM_ConfigChannel+0x86>
 800b31c:	68bb      	ldr	r3, [r7, #8]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	4a82      	ldr	r2, [pc, #520]	@ (800b52c <HAL_TIM_PWM_ConfigChannel+0x278>)
 800b322:	4293      	cmp	r3, r2
 800b324:	d009      	beq.n	800b33a <HAL_TIM_PWM_ConfigChannel+0x86>
 800b326:	68bb      	ldr	r3, [r7, #8]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	4a81      	ldr	r2, [pc, #516]	@ (800b530 <HAL_TIM_PWM_ConfigChannel+0x27c>)
 800b32c:	4293      	cmp	r3, r2
 800b32e:	d004      	beq.n	800b33a <HAL_TIM_PWM_ConfigChannel+0x86>
 800b330:	f241 01b4 	movw	r1, #4276	@ 0x10b4
 800b334:	487a      	ldr	r0, [pc, #488]	@ (800b520 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 800b336:	f7f9 fc25 	bl	8004b84 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 800b33a:	68bb      	ldr	r3, [r7, #8]
 800b33c:	689b      	ldr	r3, [r3, #8]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d008      	beq.n	800b354 <HAL_TIM_PWM_ConfigChannel+0xa0>
 800b342:	68bb      	ldr	r3, [r7, #8]
 800b344:	689b      	ldr	r3, [r3, #8]
 800b346:	2b02      	cmp	r3, #2
 800b348:	d004      	beq.n	800b354 <HAL_TIM_PWM_ConfigChannel+0xa0>
 800b34a:	f241 01b5 	movw	r1, #4277	@ 0x10b5
 800b34e:	4874      	ldr	r0, [pc, #464]	@ (800b520 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 800b350:	f7f9 fc18 	bl	8004b84 <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 800b354:	68bb      	ldr	r3, [r7, #8]
 800b356:	691b      	ldr	r3, [r3, #16]
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d008      	beq.n	800b36e <HAL_TIM_PWM_ConfigChannel+0xba>
 800b35c:	68bb      	ldr	r3, [r7, #8]
 800b35e:	691b      	ldr	r3, [r3, #16]
 800b360:	2b04      	cmp	r3, #4
 800b362:	d004      	beq.n	800b36e <HAL_TIM_PWM_ConfigChannel+0xba>
 800b364:	f241 01b6 	movw	r1, #4278	@ 0x10b6
 800b368:	486d      	ldr	r0, [pc, #436]	@ (800b520 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 800b36a:	f7f9 fc0b 	bl	8004b84 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b374:	2b01      	cmp	r3, #1
 800b376:	d101      	bne.n	800b37c <HAL_TIM_PWM_ConfigChannel+0xc8>
 800b378:	2302      	movs	r3, #2
 800b37a:	e1d9      	b.n	800b730 <HAL_TIM_PWM_ConfigChannel+0x47c>
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	2201      	movs	r2, #1
 800b380:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	2b14      	cmp	r3, #20
 800b388:	f200 81ca 	bhi.w	800b720 <HAL_TIM_PWM_ConfigChannel+0x46c>
 800b38c:	a201      	add	r2, pc, #4	@ (adr r2, 800b394 <HAL_TIM_PWM_ConfigChannel+0xe0>)
 800b38e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b392:	bf00      	nop
 800b394:	0800b3e9 	.word	0x0800b3e9
 800b398:	0800b721 	.word	0x0800b721
 800b39c:	0800b721 	.word	0x0800b721
 800b3a0:	0800b721 	.word	0x0800b721
 800b3a4:	0800b48d 	.word	0x0800b48d
 800b3a8:	0800b721 	.word	0x0800b721
 800b3ac:	0800b721 	.word	0x0800b721
 800b3b0:	0800b721 	.word	0x0800b721
 800b3b4:	0800b555 	.word	0x0800b555
 800b3b8:	0800b721 	.word	0x0800b721
 800b3bc:	0800b721 	.word	0x0800b721
 800b3c0:	0800b721 	.word	0x0800b721
 800b3c4:	0800b5db 	.word	0x0800b5db
 800b3c8:	0800b721 	.word	0x0800b721
 800b3cc:	0800b721 	.word	0x0800b721
 800b3d0:	0800b721 	.word	0x0800b721
 800b3d4:	0800b663 	.word	0x0800b663
 800b3d8:	0800b721 	.word	0x0800b721
 800b3dc:	0800b721 	.word	0x0800b721
 800b3e0:	0800b721 	.word	0x0800b721
 800b3e4:	0800b6c1 	.word	0x0800b6c1
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	4a51      	ldr	r2, [pc, #324]	@ (800b534 <HAL_TIM_PWM_ConfigChannel+0x280>)
 800b3ee:	4293      	cmp	r3, r2
 800b3f0:	d02c      	beq.n	800b44c <HAL_TIM_PWM_ConfigChannel+0x198>
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b3fa:	d027      	beq.n	800b44c <HAL_TIM_PWM_ConfigChannel+0x198>
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	4a4d      	ldr	r2, [pc, #308]	@ (800b538 <HAL_TIM_PWM_ConfigChannel+0x284>)
 800b402:	4293      	cmp	r3, r2
 800b404:	d022      	beq.n	800b44c <HAL_TIM_PWM_ConfigChannel+0x198>
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	4a4c      	ldr	r2, [pc, #304]	@ (800b53c <HAL_TIM_PWM_ConfigChannel+0x288>)
 800b40c:	4293      	cmp	r3, r2
 800b40e:	d01d      	beq.n	800b44c <HAL_TIM_PWM_ConfigChannel+0x198>
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	4a4a      	ldr	r2, [pc, #296]	@ (800b540 <HAL_TIM_PWM_ConfigChannel+0x28c>)
 800b416:	4293      	cmp	r3, r2
 800b418:	d018      	beq.n	800b44c <HAL_TIM_PWM_ConfigChannel+0x198>
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	4a49      	ldr	r2, [pc, #292]	@ (800b544 <HAL_TIM_PWM_ConfigChannel+0x290>)
 800b420:	4293      	cmp	r3, r2
 800b422:	d013      	beq.n	800b44c <HAL_TIM_PWM_ConfigChannel+0x198>
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	4a47      	ldr	r2, [pc, #284]	@ (800b548 <HAL_TIM_PWM_ConfigChannel+0x294>)
 800b42a:	4293      	cmp	r3, r2
 800b42c:	d00e      	beq.n	800b44c <HAL_TIM_PWM_ConfigChannel+0x198>
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	4a46      	ldr	r2, [pc, #280]	@ (800b54c <HAL_TIM_PWM_ConfigChannel+0x298>)
 800b434:	4293      	cmp	r3, r2
 800b436:	d009      	beq.n	800b44c <HAL_TIM_PWM_ConfigChannel+0x198>
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	4a44      	ldr	r2, [pc, #272]	@ (800b550 <HAL_TIM_PWM_ConfigChannel+0x29c>)
 800b43e:	4293      	cmp	r3, r2
 800b440:	d004      	beq.n	800b44c <HAL_TIM_PWM_ConfigChannel+0x198>
 800b442:	f44f 5186 	mov.w	r1, #4288	@ 0x10c0
 800b446:	4836      	ldr	r0, [pc, #216]	@ (800b520 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 800b448:	f7f9 fb9c 	bl	8004b84 <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	68b9      	ldr	r1, [r7, #8]
 800b452:	4618      	mov	r0, r3
 800b454:	f000 fe18 	bl	800c088 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	699a      	ldr	r2, [r3, #24]
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	f042 0208 	orr.w	r2, r2, #8
 800b466:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	699a      	ldr	r2, [r3, #24]
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	f022 0204 	bic.w	r2, r2, #4
 800b476:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	6999      	ldr	r1, [r3, #24]
 800b47e:	68bb      	ldr	r3, [r7, #8]
 800b480:	691a      	ldr	r2, [r3, #16]
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	430a      	orrs	r2, r1
 800b488:	619a      	str	r2, [r3, #24]
      break;
 800b48a:	e14c      	b.n	800b726 <HAL_TIM_PWM_ConfigChannel+0x472>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	4a28      	ldr	r2, [pc, #160]	@ (800b534 <HAL_TIM_PWM_ConfigChannel+0x280>)
 800b492:	4293      	cmp	r3, r2
 800b494:	d022      	beq.n	800b4dc <HAL_TIM_PWM_ConfigChannel+0x228>
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b49e:	d01d      	beq.n	800b4dc <HAL_TIM_PWM_ConfigChannel+0x228>
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	4a24      	ldr	r2, [pc, #144]	@ (800b538 <HAL_TIM_PWM_ConfigChannel+0x284>)
 800b4a6:	4293      	cmp	r3, r2
 800b4a8:	d018      	beq.n	800b4dc <HAL_TIM_PWM_ConfigChannel+0x228>
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	4a23      	ldr	r2, [pc, #140]	@ (800b53c <HAL_TIM_PWM_ConfigChannel+0x288>)
 800b4b0:	4293      	cmp	r3, r2
 800b4b2:	d013      	beq.n	800b4dc <HAL_TIM_PWM_ConfigChannel+0x228>
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	4a21      	ldr	r2, [pc, #132]	@ (800b540 <HAL_TIM_PWM_ConfigChannel+0x28c>)
 800b4ba:	4293      	cmp	r3, r2
 800b4bc:	d00e      	beq.n	800b4dc <HAL_TIM_PWM_ConfigChannel+0x228>
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	4a20      	ldr	r2, [pc, #128]	@ (800b544 <HAL_TIM_PWM_ConfigChannel+0x290>)
 800b4c4:	4293      	cmp	r3, r2
 800b4c6:	d009      	beq.n	800b4dc <HAL_TIM_PWM_ConfigChannel+0x228>
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	4a1e      	ldr	r2, [pc, #120]	@ (800b548 <HAL_TIM_PWM_ConfigChannel+0x294>)
 800b4ce:	4293      	cmp	r3, r2
 800b4d0:	d004      	beq.n	800b4dc <HAL_TIM_PWM_ConfigChannel+0x228>
 800b4d2:	f241 01d1 	movw	r1, #4305	@ 0x10d1
 800b4d6:	4812      	ldr	r0, [pc, #72]	@ (800b520 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 800b4d8:	f7f9 fb54 	bl	8004b84 <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	68b9      	ldr	r1, [r7, #8]
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	f000 fe8a 	bl	800c1fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	699a      	ldr	r2, [r3, #24]
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b4f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	699a      	ldr	r2, [r3, #24]
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b506:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	6999      	ldr	r1, [r3, #24]
 800b50e:	68bb      	ldr	r3, [r7, #8]
 800b510:	691b      	ldr	r3, [r3, #16]
 800b512:	021a      	lsls	r2, r3, #8
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	430a      	orrs	r2, r1
 800b51a:	619a      	str	r2, [r3, #24]
      break;
 800b51c:	e103      	b.n	800b726 <HAL_TIM_PWM_ConfigChannel+0x472>
 800b51e:	bf00      	nop
 800b520:	0800fa34 	.word	0x0800fa34
 800b524:	00010040 	.word	0x00010040
 800b528:	00010050 	.word	0x00010050
 800b52c:	00010060 	.word	0x00010060
 800b530:	00010070 	.word	0x00010070
 800b534:	40012c00 	.word	0x40012c00
 800b538:	40000400 	.word	0x40000400
 800b53c:	40000800 	.word	0x40000800
 800b540:	40000c00 	.word	0x40000c00
 800b544:	40013400 	.word	0x40013400
 800b548:	40014000 	.word	0x40014000
 800b54c:	40014400 	.word	0x40014400
 800b550:	40014800 	.word	0x40014800
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	4a77      	ldr	r2, [pc, #476]	@ (800b738 <HAL_TIM_PWM_ConfigChannel+0x484>)
 800b55a:	4293      	cmp	r3, r2
 800b55c:	d01d      	beq.n	800b59a <HAL_TIM_PWM_ConfigChannel+0x2e6>
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b566:	d018      	beq.n	800b59a <HAL_TIM_PWM_ConfigChannel+0x2e6>
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	4a73      	ldr	r2, [pc, #460]	@ (800b73c <HAL_TIM_PWM_ConfigChannel+0x488>)
 800b56e:	4293      	cmp	r3, r2
 800b570:	d013      	beq.n	800b59a <HAL_TIM_PWM_ConfigChannel+0x2e6>
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	4a72      	ldr	r2, [pc, #456]	@ (800b740 <HAL_TIM_PWM_ConfigChannel+0x48c>)
 800b578:	4293      	cmp	r3, r2
 800b57a:	d00e      	beq.n	800b59a <HAL_TIM_PWM_ConfigChannel+0x2e6>
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	4a70      	ldr	r2, [pc, #448]	@ (800b744 <HAL_TIM_PWM_ConfigChannel+0x490>)
 800b582:	4293      	cmp	r3, r2
 800b584:	d009      	beq.n	800b59a <HAL_TIM_PWM_ConfigChannel+0x2e6>
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	4a6f      	ldr	r2, [pc, #444]	@ (800b748 <HAL_TIM_PWM_ConfigChannel+0x494>)
 800b58c:	4293      	cmp	r3, r2
 800b58e:	d004      	beq.n	800b59a <HAL_TIM_PWM_ConfigChannel+0x2e6>
 800b590:	f241 01e2 	movw	r1, #4322	@ 0x10e2
 800b594:	486d      	ldr	r0, [pc, #436]	@ (800b74c <HAL_TIM_PWM_ConfigChannel+0x498>)
 800b596:	f7f9 faf5 	bl	8004b84 <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	68b9      	ldr	r1, [r7, #8]
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	f000 fedd 	bl	800c360 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	69da      	ldr	r2, [r3, #28]
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	f042 0208 	orr.w	r2, r2, #8
 800b5b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	69da      	ldr	r2, [r3, #28]
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	f022 0204 	bic.w	r2, r2, #4
 800b5c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	69d9      	ldr	r1, [r3, #28]
 800b5cc:	68bb      	ldr	r3, [r7, #8]
 800b5ce:	691a      	ldr	r2, [r3, #16]
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	430a      	orrs	r2, r1
 800b5d6:	61da      	str	r2, [r3, #28]
      break;
 800b5d8:	e0a5      	b.n	800b726 <HAL_TIM_PWM_ConfigChannel+0x472>
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	4a56      	ldr	r2, [pc, #344]	@ (800b738 <HAL_TIM_PWM_ConfigChannel+0x484>)
 800b5e0:	4293      	cmp	r3, r2
 800b5e2:	d01d      	beq.n	800b620 <HAL_TIM_PWM_ConfigChannel+0x36c>
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b5ec:	d018      	beq.n	800b620 <HAL_TIM_PWM_ConfigChannel+0x36c>
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	4a52      	ldr	r2, [pc, #328]	@ (800b73c <HAL_TIM_PWM_ConfigChannel+0x488>)
 800b5f4:	4293      	cmp	r3, r2
 800b5f6:	d013      	beq.n	800b620 <HAL_TIM_PWM_ConfigChannel+0x36c>
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	4a50      	ldr	r2, [pc, #320]	@ (800b740 <HAL_TIM_PWM_ConfigChannel+0x48c>)
 800b5fe:	4293      	cmp	r3, r2
 800b600:	d00e      	beq.n	800b620 <HAL_TIM_PWM_ConfigChannel+0x36c>
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	4a4f      	ldr	r2, [pc, #316]	@ (800b744 <HAL_TIM_PWM_ConfigChannel+0x490>)
 800b608:	4293      	cmp	r3, r2
 800b60a:	d009      	beq.n	800b620 <HAL_TIM_PWM_ConfigChannel+0x36c>
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	4a4d      	ldr	r2, [pc, #308]	@ (800b748 <HAL_TIM_PWM_ConfigChannel+0x494>)
 800b612:	4293      	cmp	r3, r2
 800b614:	d004      	beq.n	800b620 <HAL_TIM_PWM_ConfigChannel+0x36c>
 800b616:	f241 01f3 	movw	r1, #4339	@ 0x10f3
 800b61a:	484c      	ldr	r0, [pc, #304]	@ (800b74c <HAL_TIM_PWM_ConfigChannel+0x498>)
 800b61c:	f7f9 fab2 	bl	8004b84 <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	68b9      	ldr	r1, [r7, #8]
 800b626:	4618      	mov	r0, r3
 800b628:	f000 ff4c 	bl	800c4c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	69da      	ldr	r2, [r3, #28]
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b63a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	69da      	ldr	r2, [r3, #28]
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b64a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	69d9      	ldr	r1, [r3, #28]
 800b652:	68bb      	ldr	r3, [r7, #8]
 800b654:	691b      	ldr	r3, [r3, #16]
 800b656:	021a      	lsls	r2, r3, #8
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	430a      	orrs	r2, r1
 800b65e:	61da      	str	r2, [r3, #28]
      break;
 800b660:	e061      	b.n	800b726 <HAL_TIM_PWM_ConfigChannel+0x472>
    }

    case TIM_CHANNEL_5:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	4a34      	ldr	r2, [pc, #208]	@ (800b738 <HAL_TIM_PWM_ConfigChannel+0x484>)
 800b668:	4293      	cmp	r3, r2
 800b66a:	d009      	beq.n	800b680 <HAL_TIM_PWM_ConfigChannel+0x3cc>
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	4a35      	ldr	r2, [pc, #212]	@ (800b748 <HAL_TIM_PWM_ConfigChannel+0x494>)
 800b672:	4293      	cmp	r3, r2
 800b674:	d004      	beq.n	800b680 <HAL_TIM_PWM_ConfigChannel+0x3cc>
 800b676:	f241 1104 	movw	r1, #4356	@ 0x1104
 800b67a:	4834      	ldr	r0, [pc, #208]	@ (800b74c <HAL_TIM_PWM_ConfigChannel+0x498>)
 800b67c:	f7f9 fa82 	bl	8004b84 <assert_failed>

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	68b9      	ldr	r1, [r7, #8]
 800b686:	4618      	mov	r0, r3
 800b688:	f000 ff94 	bl	800c5b4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	f042 0208 	orr.w	r2, r2, #8
 800b69a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	f022 0204 	bic.w	r2, r2, #4
 800b6aa:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800b6b2:	68bb      	ldr	r3, [r7, #8]
 800b6b4:	691a      	ldr	r2, [r3, #16]
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	430a      	orrs	r2, r1
 800b6bc:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800b6be:	e032      	b.n	800b726 <HAL_TIM_PWM_ConfigChannel+0x472>
    }

    case TIM_CHANNEL_6:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	4a1c      	ldr	r2, [pc, #112]	@ (800b738 <HAL_TIM_PWM_ConfigChannel+0x484>)
 800b6c6:	4293      	cmp	r3, r2
 800b6c8:	d009      	beq.n	800b6de <HAL_TIM_PWM_ConfigChannel+0x42a>
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	4a1e      	ldr	r2, [pc, #120]	@ (800b748 <HAL_TIM_PWM_ConfigChannel+0x494>)
 800b6d0:	4293      	cmp	r3, r2
 800b6d2:	d004      	beq.n	800b6de <HAL_TIM_PWM_ConfigChannel+0x42a>
 800b6d4:	f241 1115 	movw	r1, #4373	@ 0x1115
 800b6d8:	481c      	ldr	r0, [pc, #112]	@ (800b74c <HAL_TIM_PWM_ConfigChannel+0x498>)
 800b6da:	f7f9 fa53 	bl	8004b84 <assert_failed>

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	68b9      	ldr	r1, [r7, #8]
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	f000 ffc9 	bl	800c67c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b6f8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b708:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800b710:	68bb      	ldr	r3, [r7, #8]
 800b712:	691b      	ldr	r3, [r3, #16]
 800b714:	021a      	lsls	r2, r3, #8
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	430a      	orrs	r2, r1
 800b71c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800b71e:	e002      	b.n	800b726 <HAL_TIM_PWM_ConfigChannel+0x472>
    }

    default:
      status = HAL_ERROR;
 800b720:	2301      	movs	r3, #1
 800b722:	75fb      	strb	r3, [r7, #23]
      break;
 800b724:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	2200      	movs	r2, #0
 800b72a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b72e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b730:	4618      	mov	r0, r3
 800b732:	3718      	adds	r7, #24
 800b734:	46bd      	mov	sp, r7
 800b736:	bd80      	pop	{r7, pc}
 800b738:	40012c00 	.word	0x40012c00
 800b73c:	40000400 	.word	0x40000400
 800b740:	40000800 	.word	0x40000800
 800b744:	40000c00 	.word	0x40000c00
 800b748:	40013400 	.word	0x40013400
 800b74c:	0800fa34 	.word	0x0800fa34

0800b750 <HAL_TIM_GenerateEvent>:
  *         only for timer instances supporting break input(s).
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_TIM_GenerateEvent(TIM_HandleTypeDef *htim, uint32_t EventSource)
{
 800b750:	b580      	push	{r7, lr}
 800b752:	b082      	sub	sp, #8
 800b754:	af00      	add	r7, sp, #0
 800b756:	6078      	str	r0, [r7, #4]
 800b758:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	4a33      	ldr	r2, [pc, #204]	@ (800b82c <HAL_TIM_GenerateEvent+0xdc>)
 800b760:	4293      	cmp	r3, r2
 800b762:	d036      	beq.n	800b7d2 <HAL_TIM_GenerateEvent+0x82>
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b76c:	d031      	beq.n	800b7d2 <HAL_TIM_GenerateEvent+0x82>
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	4a2f      	ldr	r2, [pc, #188]	@ (800b830 <HAL_TIM_GenerateEvent+0xe0>)
 800b774:	4293      	cmp	r3, r2
 800b776:	d02c      	beq.n	800b7d2 <HAL_TIM_GenerateEvent+0x82>
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	4a2d      	ldr	r2, [pc, #180]	@ (800b834 <HAL_TIM_GenerateEvent+0xe4>)
 800b77e:	4293      	cmp	r3, r2
 800b780:	d027      	beq.n	800b7d2 <HAL_TIM_GenerateEvent+0x82>
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	4a2c      	ldr	r2, [pc, #176]	@ (800b838 <HAL_TIM_GenerateEvent+0xe8>)
 800b788:	4293      	cmp	r3, r2
 800b78a:	d022      	beq.n	800b7d2 <HAL_TIM_GenerateEvent+0x82>
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	4a2a      	ldr	r2, [pc, #168]	@ (800b83c <HAL_TIM_GenerateEvent+0xec>)
 800b792:	4293      	cmp	r3, r2
 800b794:	d01d      	beq.n	800b7d2 <HAL_TIM_GenerateEvent+0x82>
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	4a29      	ldr	r2, [pc, #164]	@ (800b840 <HAL_TIM_GenerateEvent+0xf0>)
 800b79c:	4293      	cmp	r3, r2
 800b79e:	d018      	beq.n	800b7d2 <HAL_TIM_GenerateEvent+0x82>
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	4a27      	ldr	r2, [pc, #156]	@ (800b844 <HAL_TIM_GenerateEvent+0xf4>)
 800b7a6:	4293      	cmp	r3, r2
 800b7a8:	d013      	beq.n	800b7d2 <HAL_TIM_GenerateEvent+0x82>
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	4a26      	ldr	r2, [pc, #152]	@ (800b848 <HAL_TIM_GenerateEvent+0xf8>)
 800b7b0:	4293      	cmp	r3, r2
 800b7b2:	d00e      	beq.n	800b7d2 <HAL_TIM_GenerateEvent+0x82>
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	4a24      	ldr	r2, [pc, #144]	@ (800b84c <HAL_TIM_GenerateEvent+0xfc>)
 800b7ba:	4293      	cmp	r3, r2
 800b7bc:	d009      	beq.n	800b7d2 <HAL_TIM_GenerateEvent+0x82>
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	4a23      	ldr	r2, [pc, #140]	@ (800b850 <HAL_TIM_GenerateEvent+0x100>)
 800b7c4:	4293      	cmp	r3, r2
 800b7c6:	d004      	beq.n	800b7d2 <HAL_TIM_GenerateEvent+0x82>
 800b7c8:	f44f 51a4 	mov.w	r1, #5248	@ 0x1480
 800b7cc:	4821      	ldr	r0, [pc, #132]	@ (800b854 <HAL_TIM_GenerateEvent+0x104>)
 800b7ce:	f7f9 f9d9 	bl	8004b84 <assert_failed>
  assert_param(IS_TIM_EVENT_SOURCE(EventSource));
 800b7d2:	683b      	ldr	r3, [r7, #0]
 800b7d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b7d8:	d202      	bcs.n	800b7e0 <HAL_TIM_GenerateEvent+0x90>
 800b7da:	683b      	ldr	r3, [r7, #0]
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d104      	bne.n	800b7ea <HAL_TIM_GenerateEvent+0x9a>
 800b7e0:	f241 4181 	movw	r1, #5249	@ 0x1481
 800b7e4:	481b      	ldr	r0, [pc, #108]	@ (800b854 <HAL_TIM_GenerateEvent+0x104>)
 800b7e6:	f7f9 f9cd 	bl	8004b84 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b7f0:	2b01      	cmp	r3, #1
 800b7f2:	d101      	bne.n	800b7f8 <HAL_TIM_GenerateEvent+0xa8>
 800b7f4:	2302      	movs	r3, #2
 800b7f6:	e014      	b.n	800b822 <HAL_TIM_GenerateEvent+0xd2>
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	2201      	movs	r2, #1
 800b7fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	2202      	movs	r2, #2
 800b804:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the event sources */
  htim->Instance->EGR = EventSource;
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	683a      	ldr	r2, [r7, #0]
 800b80e:	615a      	str	r2, [r3, #20]

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	2201      	movs	r2, #1
 800b814:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	2200      	movs	r2, #0
 800b81c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800b820:	2300      	movs	r3, #0
}
 800b822:	4618      	mov	r0, r3
 800b824:	3708      	adds	r7, #8
 800b826:	46bd      	mov	sp, r7
 800b828:	bd80      	pop	{r7, pc}
 800b82a:	bf00      	nop
 800b82c:	40012c00 	.word	0x40012c00
 800b830:	40000400 	.word	0x40000400
 800b834:	40000800 	.word	0x40000800
 800b838:	40000c00 	.word	0x40000c00
 800b83c:	40001000 	.word	0x40001000
 800b840:	40001400 	.word	0x40001400
 800b844:	40013400 	.word	0x40013400
 800b848:	40014000 	.word	0x40014000
 800b84c:	40014400 	.word	0x40014400
 800b850:	40014800 	.word	0x40014800
 800b854:	0800fa34 	.word	0x0800fa34

0800b858 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b858:	b580      	push	{r7, lr}
 800b85a:	b084      	sub	sp, #16
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	6078      	str	r0, [r7, #4]
 800b860:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b862:	2300      	movs	r3, #0
 800b864:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b86c:	2b01      	cmp	r3, #1
 800b86e:	d101      	bne.n	800b874 <HAL_TIM_ConfigClockSource+0x1c>
 800b870:	2302      	movs	r3, #2
 800b872:	e329      	b.n	800bec8 <HAL_TIM_ConfigClockSource+0x670>
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	2201      	movs	r2, #1
 800b878:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	2202      	movs	r2, #2
 800b880:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800b884:	683b      	ldr	r3, [r7, #0]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b88c:	d029      	beq.n	800b8e2 <HAL_TIM_ConfigClockSource+0x8a>
 800b88e:	683b      	ldr	r3, [r7, #0]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	2b70      	cmp	r3, #112	@ 0x70
 800b894:	d025      	beq.n	800b8e2 <HAL_TIM_ConfigClockSource+0x8a>
 800b896:	683b      	ldr	r3, [r7, #0]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b89e:	d020      	beq.n	800b8e2 <HAL_TIM_ConfigClockSource+0x8a>
 800b8a0:	683b      	ldr	r3, [r7, #0]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	2b40      	cmp	r3, #64	@ 0x40
 800b8a6:	d01c      	beq.n	800b8e2 <HAL_TIM_ConfigClockSource+0x8a>
 800b8a8:	683b      	ldr	r3, [r7, #0]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	2b50      	cmp	r3, #80	@ 0x50
 800b8ae:	d018      	beq.n	800b8e2 <HAL_TIM_ConfigClockSource+0x8a>
 800b8b0:	683b      	ldr	r3, [r7, #0]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	2b60      	cmp	r3, #96	@ 0x60
 800b8b6:	d014      	beq.n	800b8e2 <HAL_TIM_ConfigClockSource+0x8a>
 800b8b8:	683b      	ldr	r3, [r7, #0]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d010      	beq.n	800b8e2 <HAL_TIM_ConfigClockSource+0x8a>
 800b8c0:	683b      	ldr	r3, [r7, #0]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	2b10      	cmp	r3, #16
 800b8c6:	d00c      	beq.n	800b8e2 <HAL_TIM_ConfigClockSource+0x8a>
 800b8c8:	683b      	ldr	r3, [r7, #0]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	2b20      	cmp	r3, #32
 800b8ce:	d008      	beq.n	800b8e2 <HAL_TIM_ConfigClockSource+0x8a>
 800b8d0:	683b      	ldr	r3, [r7, #0]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	2b30      	cmp	r3, #48	@ 0x30
 800b8d6:	d004      	beq.n	800b8e2 <HAL_TIM_ConfigClockSource+0x8a>
 800b8d8:	f241 5156 	movw	r1, #5462	@ 0x1556
 800b8dc:	4888      	ldr	r0, [pc, #544]	@ (800bb00 <HAL_TIM_ConfigClockSource+0x2a8>)
 800b8de:	f7f9 f951 	bl	8004b84 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	689b      	ldr	r3, [r3, #8]
 800b8e8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b8ea:	68bb      	ldr	r3, [r7, #8]
 800b8ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b8f0:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800b8f4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b8f6:	68bb      	ldr	r3, [r7, #8]
 800b8f8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b8fc:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	68ba      	ldr	r2, [r7, #8]
 800b904:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b906:	683b      	ldr	r3, [r7, #0]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b90e:	f000 810d 	beq.w	800bb2c <HAL_TIM_ConfigClockSource+0x2d4>
 800b912:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b916:	f200 82ca 	bhi.w	800beae <HAL_TIM_ConfigClockSource+0x656>
 800b91a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b91e:	d02d      	beq.n	800b97c <HAL_TIM_ConfigClockSource+0x124>
 800b920:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b924:	f200 82c3 	bhi.w	800beae <HAL_TIM_ConfigClockSource+0x656>
 800b928:	2b70      	cmp	r3, #112	@ 0x70
 800b92a:	d06f      	beq.n	800ba0c <HAL_TIM_ConfigClockSource+0x1b4>
 800b92c:	2b70      	cmp	r3, #112	@ 0x70
 800b92e:	f200 82be 	bhi.w	800beae <HAL_TIM_ConfigClockSource+0x656>
 800b932:	2b60      	cmp	r3, #96	@ 0x60
 800b934:	f000 81d4 	beq.w	800bce0 <HAL_TIM_ConfigClockSource+0x488>
 800b938:	2b60      	cmp	r3, #96	@ 0x60
 800b93a:	f200 82b8 	bhi.w	800beae <HAL_TIM_ConfigClockSource+0x656>
 800b93e:	2b50      	cmp	r3, #80	@ 0x50
 800b940:	f000 8165 	beq.w	800bc0e <HAL_TIM_ConfigClockSource+0x3b6>
 800b944:	2b50      	cmp	r3, #80	@ 0x50
 800b946:	f200 82b2 	bhi.w	800beae <HAL_TIM_ConfigClockSource+0x656>
 800b94a:	2b40      	cmp	r3, #64	@ 0x40
 800b94c:	f000 8223 	beq.w	800bd96 <HAL_TIM_ConfigClockSource+0x53e>
 800b950:	2b40      	cmp	r3, #64	@ 0x40
 800b952:	f200 82ac 	bhi.w	800beae <HAL_TIM_ConfigClockSource+0x656>
 800b956:	2b30      	cmp	r3, #48	@ 0x30
 800b958:	f000 8278 	beq.w	800be4c <HAL_TIM_ConfigClockSource+0x5f4>
 800b95c:	2b30      	cmp	r3, #48	@ 0x30
 800b95e:	f200 82a6 	bhi.w	800beae <HAL_TIM_ConfigClockSource+0x656>
 800b962:	2b20      	cmp	r3, #32
 800b964:	f000 8272 	beq.w	800be4c <HAL_TIM_ConfigClockSource+0x5f4>
 800b968:	2b20      	cmp	r3, #32
 800b96a:	f200 82a0 	bhi.w	800beae <HAL_TIM_ConfigClockSource+0x656>
 800b96e:	2b00      	cmp	r3, #0
 800b970:	f000 826c 	beq.w	800be4c <HAL_TIM_ConfigClockSource+0x5f4>
 800b974:	2b10      	cmp	r3, #16
 800b976:	f000 8269 	beq.w	800be4c <HAL_TIM_ConfigClockSource+0x5f4>
 800b97a:	e298      	b.n	800beae <HAL_TIM_ConfigClockSource+0x656>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	4a60      	ldr	r2, [pc, #384]	@ (800bb04 <HAL_TIM_ConfigClockSource+0x2ac>)
 800b982:	4293      	cmp	r3, r2
 800b984:	f000 8296 	beq.w	800beb4 <HAL_TIM_ConfigClockSource+0x65c>
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b990:	f000 8290 	beq.w	800beb4 <HAL_TIM_ConfigClockSource+0x65c>
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	4a5b      	ldr	r2, [pc, #364]	@ (800bb08 <HAL_TIM_ConfigClockSource+0x2b0>)
 800b99a:	4293      	cmp	r3, r2
 800b99c:	f000 828a 	beq.w	800beb4 <HAL_TIM_ConfigClockSource+0x65c>
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	4a59      	ldr	r2, [pc, #356]	@ (800bb0c <HAL_TIM_ConfigClockSource+0x2b4>)
 800b9a6:	4293      	cmp	r3, r2
 800b9a8:	f000 8284 	beq.w	800beb4 <HAL_TIM_ConfigClockSource+0x65c>
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	4a57      	ldr	r2, [pc, #348]	@ (800bb10 <HAL_TIM_ConfigClockSource+0x2b8>)
 800b9b2:	4293      	cmp	r3, r2
 800b9b4:	f000 827e 	beq.w	800beb4 <HAL_TIM_ConfigClockSource+0x65c>
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	4a55      	ldr	r2, [pc, #340]	@ (800bb14 <HAL_TIM_ConfigClockSource+0x2bc>)
 800b9be:	4293      	cmp	r3, r2
 800b9c0:	f000 8278 	beq.w	800beb4 <HAL_TIM_ConfigClockSource+0x65c>
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	4a53      	ldr	r2, [pc, #332]	@ (800bb18 <HAL_TIM_ConfigClockSource+0x2c0>)
 800b9ca:	4293      	cmp	r3, r2
 800b9cc:	f000 8272 	beq.w	800beb4 <HAL_TIM_ConfigClockSource+0x65c>
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	4a51      	ldr	r2, [pc, #324]	@ (800bb1c <HAL_TIM_ConfigClockSource+0x2c4>)
 800b9d6:	4293      	cmp	r3, r2
 800b9d8:	f000 826c 	beq.w	800beb4 <HAL_TIM_ConfigClockSource+0x65c>
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	4a4f      	ldr	r2, [pc, #316]	@ (800bb20 <HAL_TIM_ConfigClockSource+0x2c8>)
 800b9e2:	4293      	cmp	r3, r2
 800b9e4:	f000 8266 	beq.w	800beb4 <HAL_TIM_ConfigClockSource+0x65c>
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	4a4d      	ldr	r2, [pc, #308]	@ (800bb24 <HAL_TIM_ConfigClockSource+0x2cc>)
 800b9ee:	4293      	cmp	r3, r2
 800b9f0:	f000 8260 	beq.w	800beb4 <HAL_TIM_ConfigClockSource+0x65c>
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	4a4b      	ldr	r2, [pc, #300]	@ (800bb28 <HAL_TIM_ConfigClockSource+0x2d0>)
 800b9fa:	4293      	cmp	r3, r2
 800b9fc:	f000 825a 	beq.w	800beb4 <HAL_TIM_ConfigClockSource+0x65c>
 800ba00:	f241 5162 	movw	r1, #5474	@ 0x1562
 800ba04:	483e      	ldr	r0, [pc, #248]	@ (800bb00 <HAL_TIM_ConfigClockSource+0x2a8>)
 800ba06:	f7f9 f8bd 	bl	8004b84 <assert_failed>
      break;
 800ba0a:	e253      	b.n	800beb4 <HAL_TIM_ConfigClockSource+0x65c>
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	4a3c      	ldr	r2, [pc, #240]	@ (800bb04 <HAL_TIM_ConfigClockSource+0x2ac>)
 800ba12:	4293      	cmp	r3, r2
 800ba14:	d022      	beq.n	800ba5c <HAL_TIM_ConfigClockSource+0x204>
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ba1e:	d01d      	beq.n	800ba5c <HAL_TIM_ConfigClockSource+0x204>
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	4a38      	ldr	r2, [pc, #224]	@ (800bb08 <HAL_TIM_ConfigClockSource+0x2b0>)
 800ba26:	4293      	cmp	r3, r2
 800ba28:	d018      	beq.n	800ba5c <HAL_TIM_ConfigClockSource+0x204>
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	4a37      	ldr	r2, [pc, #220]	@ (800bb0c <HAL_TIM_ConfigClockSource+0x2b4>)
 800ba30:	4293      	cmp	r3, r2
 800ba32:	d013      	beq.n	800ba5c <HAL_TIM_ConfigClockSource+0x204>
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	4a35      	ldr	r2, [pc, #212]	@ (800bb10 <HAL_TIM_ConfigClockSource+0x2b8>)
 800ba3a:	4293      	cmp	r3, r2
 800ba3c:	d00e      	beq.n	800ba5c <HAL_TIM_ConfigClockSource+0x204>
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	4a36      	ldr	r2, [pc, #216]	@ (800bb1c <HAL_TIM_ConfigClockSource+0x2c4>)
 800ba44:	4293      	cmp	r3, r2
 800ba46:	d009      	beq.n	800ba5c <HAL_TIM_ConfigClockSource+0x204>
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	4a34      	ldr	r2, [pc, #208]	@ (800bb20 <HAL_TIM_ConfigClockSource+0x2c8>)
 800ba4e:	4293      	cmp	r3, r2
 800ba50:	d004      	beq.n	800ba5c <HAL_TIM_ConfigClockSource+0x204>
 800ba52:	f241 5169 	movw	r1, #5481	@ 0x1569
 800ba56:	482a      	ldr	r0, [pc, #168]	@ (800bb00 <HAL_TIM_ConfigClockSource+0x2a8>)
 800ba58:	f7f9 f894 	bl	8004b84 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800ba5c:	683b      	ldr	r3, [r7, #0]
 800ba5e:	689b      	ldr	r3, [r3, #8]
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d013      	beq.n	800ba8c <HAL_TIM_ConfigClockSource+0x234>
 800ba64:	683b      	ldr	r3, [r7, #0]
 800ba66:	689b      	ldr	r3, [r3, #8]
 800ba68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ba6c:	d00e      	beq.n	800ba8c <HAL_TIM_ConfigClockSource+0x234>
 800ba6e:	683b      	ldr	r3, [r7, #0]
 800ba70:	689b      	ldr	r3, [r3, #8]
 800ba72:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ba76:	d009      	beq.n	800ba8c <HAL_TIM_ConfigClockSource+0x234>
 800ba78:	683b      	ldr	r3, [r7, #0]
 800ba7a:	689b      	ldr	r3, [r3, #8]
 800ba7c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ba80:	d004      	beq.n	800ba8c <HAL_TIM_ConfigClockSource+0x234>
 800ba82:	f241 516c 	movw	r1, #5484	@ 0x156c
 800ba86:	481e      	ldr	r0, [pc, #120]	@ (800bb00 <HAL_TIM_ConfigClockSource+0x2a8>)
 800ba88:	f7f9 f87c 	bl	8004b84 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800ba8c:	683b      	ldr	r3, [r7, #0]
 800ba8e:	685b      	ldr	r3, [r3, #4]
 800ba90:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ba94:	d014      	beq.n	800bac0 <HAL_TIM_ConfigClockSource+0x268>
 800ba96:	683b      	ldr	r3, [r7, #0]
 800ba98:	685b      	ldr	r3, [r3, #4]
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d010      	beq.n	800bac0 <HAL_TIM_ConfigClockSource+0x268>
 800ba9e:	683b      	ldr	r3, [r7, #0]
 800baa0:	685b      	ldr	r3, [r3, #4]
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d00c      	beq.n	800bac0 <HAL_TIM_ConfigClockSource+0x268>
 800baa6:	683b      	ldr	r3, [r7, #0]
 800baa8:	685b      	ldr	r3, [r3, #4]
 800baaa:	2b02      	cmp	r3, #2
 800baac:	d008      	beq.n	800bac0 <HAL_TIM_ConfigClockSource+0x268>
 800baae:	683b      	ldr	r3, [r7, #0]
 800bab0:	685b      	ldr	r3, [r3, #4]
 800bab2:	2b0a      	cmp	r3, #10
 800bab4:	d004      	beq.n	800bac0 <HAL_TIM_ConfigClockSource+0x268>
 800bab6:	f241 516d 	movw	r1, #5485	@ 0x156d
 800baba:	4811      	ldr	r0, [pc, #68]	@ (800bb00 <HAL_TIM_ConfigClockSource+0x2a8>)
 800babc:	f7f9 f862 	bl	8004b84 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800bac0:	683b      	ldr	r3, [r7, #0]
 800bac2:	68db      	ldr	r3, [r3, #12]
 800bac4:	2b0f      	cmp	r3, #15
 800bac6:	d904      	bls.n	800bad2 <HAL_TIM_ConfigClockSource+0x27a>
 800bac8:	f241 516e 	movw	r1, #5486	@ 0x156e
 800bacc:	480c      	ldr	r0, [pc, #48]	@ (800bb00 <HAL_TIM_ConfigClockSource+0x2a8>)
 800bace:	f7f9 f859 	bl	8004b84 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800bad6:	683b      	ldr	r3, [r7, #0]
 800bad8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800bada:	683b      	ldr	r3, [r7, #0]
 800badc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800bade:	683b      	ldr	r3, [r7, #0]
 800bae0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800bae2:	f000 feab 	bl	800c83c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	689b      	ldr	r3, [r3, #8]
 800baec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800baee:	68bb      	ldr	r3, [r7, #8]
 800baf0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800baf4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	68ba      	ldr	r2, [r7, #8]
 800bafc:	609a      	str	r2, [r3, #8]
      break;
 800bafe:	e1da      	b.n	800beb6 <HAL_TIM_ConfigClockSource+0x65e>
 800bb00:	0800fa34 	.word	0x0800fa34
 800bb04:	40012c00 	.word	0x40012c00
 800bb08:	40000400 	.word	0x40000400
 800bb0c:	40000800 	.word	0x40000800
 800bb10:	40000c00 	.word	0x40000c00
 800bb14:	40001000 	.word	0x40001000
 800bb18:	40001400 	.word	0x40001400
 800bb1c:	40013400 	.word	0x40013400
 800bb20:	40014000 	.word	0x40014000
 800bb24:	40014400 	.word	0x40014400
 800bb28:	40014800 	.word	0x40014800
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	4a64      	ldr	r2, [pc, #400]	@ (800bcc4 <HAL_TIM_ConfigClockSource+0x46c>)
 800bb32:	4293      	cmp	r3, r2
 800bb34:	d01d      	beq.n	800bb72 <HAL_TIM_ConfigClockSource+0x31a>
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bb3e:	d018      	beq.n	800bb72 <HAL_TIM_ConfigClockSource+0x31a>
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	4a60      	ldr	r2, [pc, #384]	@ (800bcc8 <HAL_TIM_ConfigClockSource+0x470>)
 800bb46:	4293      	cmp	r3, r2
 800bb48:	d013      	beq.n	800bb72 <HAL_TIM_ConfigClockSource+0x31a>
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	4a5f      	ldr	r2, [pc, #380]	@ (800bccc <HAL_TIM_ConfigClockSource+0x474>)
 800bb50:	4293      	cmp	r3, r2
 800bb52:	d00e      	beq.n	800bb72 <HAL_TIM_ConfigClockSource+0x31a>
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	4a5d      	ldr	r2, [pc, #372]	@ (800bcd0 <HAL_TIM_ConfigClockSource+0x478>)
 800bb5a:	4293      	cmp	r3, r2
 800bb5c:	d009      	beq.n	800bb72 <HAL_TIM_ConfigClockSource+0x31a>
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	4a5c      	ldr	r2, [pc, #368]	@ (800bcd4 <HAL_TIM_ConfigClockSource+0x47c>)
 800bb64:	4293      	cmp	r3, r2
 800bb66:	d004      	beq.n	800bb72 <HAL_TIM_ConfigClockSource+0x31a>
 800bb68:	f241 5181 	movw	r1, #5505	@ 0x1581
 800bb6c:	485a      	ldr	r0, [pc, #360]	@ (800bcd8 <HAL_TIM_ConfigClockSource+0x480>)
 800bb6e:	f7f9 f809 	bl	8004b84 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800bb72:	683b      	ldr	r3, [r7, #0]
 800bb74:	689b      	ldr	r3, [r3, #8]
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d013      	beq.n	800bba2 <HAL_TIM_ConfigClockSource+0x34a>
 800bb7a:	683b      	ldr	r3, [r7, #0]
 800bb7c:	689b      	ldr	r3, [r3, #8]
 800bb7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bb82:	d00e      	beq.n	800bba2 <HAL_TIM_ConfigClockSource+0x34a>
 800bb84:	683b      	ldr	r3, [r7, #0]
 800bb86:	689b      	ldr	r3, [r3, #8]
 800bb88:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bb8c:	d009      	beq.n	800bba2 <HAL_TIM_ConfigClockSource+0x34a>
 800bb8e:	683b      	ldr	r3, [r7, #0]
 800bb90:	689b      	ldr	r3, [r3, #8]
 800bb92:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800bb96:	d004      	beq.n	800bba2 <HAL_TIM_ConfigClockSource+0x34a>
 800bb98:	f241 5184 	movw	r1, #5508	@ 0x1584
 800bb9c:	484e      	ldr	r0, [pc, #312]	@ (800bcd8 <HAL_TIM_ConfigClockSource+0x480>)
 800bb9e:	f7f8 fff1 	bl	8004b84 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800bba2:	683b      	ldr	r3, [r7, #0]
 800bba4:	685b      	ldr	r3, [r3, #4]
 800bba6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bbaa:	d014      	beq.n	800bbd6 <HAL_TIM_ConfigClockSource+0x37e>
 800bbac:	683b      	ldr	r3, [r7, #0]
 800bbae:	685b      	ldr	r3, [r3, #4]
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d010      	beq.n	800bbd6 <HAL_TIM_ConfigClockSource+0x37e>
 800bbb4:	683b      	ldr	r3, [r7, #0]
 800bbb6:	685b      	ldr	r3, [r3, #4]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d00c      	beq.n	800bbd6 <HAL_TIM_ConfigClockSource+0x37e>
 800bbbc:	683b      	ldr	r3, [r7, #0]
 800bbbe:	685b      	ldr	r3, [r3, #4]
 800bbc0:	2b02      	cmp	r3, #2
 800bbc2:	d008      	beq.n	800bbd6 <HAL_TIM_ConfigClockSource+0x37e>
 800bbc4:	683b      	ldr	r3, [r7, #0]
 800bbc6:	685b      	ldr	r3, [r3, #4]
 800bbc8:	2b0a      	cmp	r3, #10
 800bbca:	d004      	beq.n	800bbd6 <HAL_TIM_ConfigClockSource+0x37e>
 800bbcc:	f241 5185 	movw	r1, #5509	@ 0x1585
 800bbd0:	4841      	ldr	r0, [pc, #260]	@ (800bcd8 <HAL_TIM_ConfigClockSource+0x480>)
 800bbd2:	f7f8 ffd7 	bl	8004b84 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800bbd6:	683b      	ldr	r3, [r7, #0]
 800bbd8:	68db      	ldr	r3, [r3, #12]
 800bbda:	2b0f      	cmp	r3, #15
 800bbdc:	d904      	bls.n	800bbe8 <HAL_TIM_ConfigClockSource+0x390>
 800bbde:	f241 5186 	movw	r1, #5510	@ 0x1586
 800bbe2:	483d      	ldr	r0, [pc, #244]	@ (800bcd8 <HAL_TIM_ConfigClockSource+0x480>)
 800bbe4:	f7f8 ffce 	bl	8004b84 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800bbec:	683b      	ldr	r3, [r7, #0]
 800bbee:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800bbf0:	683b      	ldr	r3, [r7, #0]
 800bbf2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800bbf4:	683b      	ldr	r3, [r7, #0]
 800bbf6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800bbf8:	f000 fe20 	bl	800c83c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	689a      	ldr	r2, [r3, #8]
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800bc0a:	609a      	str	r2, [r3, #8]
      break;
 800bc0c:	e153      	b.n	800beb6 <HAL_TIM_ConfigClockSource+0x65e>
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	4a2c      	ldr	r2, [pc, #176]	@ (800bcc4 <HAL_TIM_ConfigClockSource+0x46c>)
 800bc14:	4293      	cmp	r3, r2
 800bc16:	d022      	beq.n	800bc5e <HAL_TIM_ConfigClockSource+0x406>
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bc20:	d01d      	beq.n	800bc5e <HAL_TIM_ConfigClockSource+0x406>
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	4a28      	ldr	r2, [pc, #160]	@ (800bcc8 <HAL_TIM_ConfigClockSource+0x470>)
 800bc28:	4293      	cmp	r3, r2
 800bc2a:	d018      	beq.n	800bc5e <HAL_TIM_ConfigClockSource+0x406>
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	4a26      	ldr	r2, [pc, #152]	@ (800bccc <HAL_TIM_ConfigClockSource+0x474>)
 800bc32:	4293      	cmp	r3, r2
 800bc34:	d013      	beq.n	800bc5e <HAL_TIM_ConfigClockSource+0x406>
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	4a25      	ldr	r2, [pc, #148]	@ (800bcd0 <HAL_TIM_ConfigClockSource+0x478>)
 800bc3c:	4293      	cmp	r3, r2
 800bc3e:	d00e      	beq.n	800bc5e <HAL_TIM_ConfigClockSource+0x406>
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	4a23      	ldr	r2, [pc, #140]	@ (800bcd4 <HAL_TIM_ConfigClockSource+0x47c>)
 800bc46:	4293      	cmp	r3, r2
 800bc48:	d009      	beq.n	800bc5e <HAL_TIM_ConfigClockSource+0x406>
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	4a23      	ldr	r2, [pc, #140]	@ (800bcdc <HAL_TIM_ConfigClockSource+0x484>)
 800bc50:	4293      	cmp	r3, r2
 800bc52:	d004      	beq.n	800bc5e <HAL_TIM_ConfigClockSource+0x406>
 800bc54:	f241 5195 	movw	r1, #5525	@ 0x1595
 800bc58:	481f      	ldr	r0, [pc, #124]	@ (800bcd8 <HAL_TIM_ConfigClockSource+0x480>)
 800bc5a:	f7f8 ff93 	bl	8004b84 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800bc5e:	683b      	ldr	r3, [r7, #0]
 800bc60:	685b      	ldr	r3, [r3, #4]
 800bc62:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bc66:	d014      	beq.n	800bc92 <HAL_TIM_ConfigClockSource+0x43a>
 800bc68:	683b      	ldr	r3, [r7, #0]
 800bc6a:	685b      	ldr	r3, [r3, #4]
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d010      	beq.n	800bc92 <HAL_TIM_ConfigClockSource+0x43a>
 800bc70:	683b      	ldr	r3, [r7, #0]
 800bc72:	685b      	ldr	r3, [r3, #4]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d00c      	beq.n	800bc92 <HAL_TIM_ConfigClockSource+0x43a>
 800bc78:	683b      	ldr	r3, [r7, #0]
 800bc7a:	685b      	ldr	r3, [r3, #4]
 800bc7c:	2b02      	cmp	r3, #2
 800bc7e:	d008      	beq.n	800bc92 <HAL_TIM_ConfigClockSource+0x43a>
 800bc80:	683b      	ldr	r3, [r7, #0]
 800bc82:	685b      	ldr	r3, [r3, #4]
 800bc84:	2b0a      	cmp	r3, #10
 800bc86:	d004      	beq.n	800bc92 <HAL_TIM_ConfigClockSource+0x43a>
 800bc88:	f241 5198 	movw	r1, #5528	@ 0x1598
 800bc8c:	4812      	ldr	r0, [pc, #72]	@ (800bcd8 <HAL_TIM_ConfigClockSource+0x480>)
 800bc8e:	f7f8 ff79 	bl	8004b84 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800bc92:	683b      	ldr	r3, [r7, #0]
 800bc94:	68db      	ldr	r3, [r3, #12]
 800bc96:	2b0f      	cmp	r3, #15
 800bc98:	d904      	bls.n	800bca4 <HAL_TIM_ConfigClockSource+0x44c>
 800bc9a:	f241 5199 	movw	r1, #5529	@ 0x1599
 800bc9e:	480e      	ldr	r0, [pc, #56]	@ (800bcd8 <HAL_TIM_ConfigClockSource+0x480>)
 800bca0:	f7f8 ff70 	bl	8004b84 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bca8:	683b      	ldr	r3, [r7, #0]
 800bcaa:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bcac:	683b      	ldr	r3, [r7, #0]
 800bcae:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bcb0:	461a      	mov	r2, r3
 800bcb2:	f000 fd49 	bl	800c748 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	2150      	movs	r1, #80	@ 0x50
 800bcbc:	4618      	mov	r0, r3
 800bcbe:	f000 fda2 	bl	800c806 <TIM_ITRx_SetConfig>
      break;
 800bcc2:	e0f8      	b.n	800beb6 <HAL_TIM_ConfigClockSource+0x65e>
 800bcc4:	40012c00 	.word	0x40012c00
 800bcc8:	40000400 	.word	0x40000400
 800bccc:	40000800 	.word	0x40000800
 800bcd0:	40000c00 	.word	0x40000c00
 800bcd4:	40013400 	.word	0x40013400
 800bcd8:	0800fa34 	.word	0x0800fa34
 800bcdc:	40014000 	.word	0x40014000
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	4a7a      	ldr	r2, [pc, #488]	@ (800bed0 <HAL_TIM_ConfigClockSource+0x678>)
 800bce6:	4293      	cmp	r3, r2
 800bce8:	d022      	beq.n	800bd30 <HAL_TIM_ConfigClockSource+0x4d8>
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bcf2:	d01d      	beq.n	800bd30 <HAL_TIM_ConfigClockSource+0x4d8>
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	4a76      	ldr	r2, [pc, #472]	@ (800bed4 <HAL_TIM_ConfigClockSource+0x67c>)
 800bcfa:	4293      	cmp	r3, r2
 800bcfc:	d018      	beq.n	800bd30 <HAL_TIM_ConfigClockSource+0x4d8>
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	4a75      	ldr	r2, [pc, #468]	@ (800bed8 <HAL_TIM_ConfigClockSource+0x680>)
 800bd04:	4293      	cmp	r3, r2
 800bd06:	d013      	beq.n	800bd30 <HAL_TIM_ConfigClockSource+0x4d8>
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	4a73      	ldr	r2, [pc, #460]	@ (800bedc <HAL_TIM_ConfigClockSource+0x684>)
 800bd0e:	4293      	cmp	r3, r2
 800bd10:	d00e      	beq.n	800bd30 <HAL_TIM_ConfigClockSource+0x4d8>
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	4a72      	ldr	r2, [pc, #456]	@ (800bee0 <HAL_TIM_ConfigClockSource+0x688>)
 800bd18:	4293      	cmp	r3, r2
 800bd1a:	d009      	beq.n	800bd30 <HAL_TIM_ConfigClockSource+0x4d8>
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	4a70      	ldr	r2, [pc, #448]	@ (800bee4 <HAL_TIM_ConfigClockSource+0x68c>)
 800bd22:	4293      	cmp	r3, r2
 800bd24:	d004      	beq.n	800bd30 <HAL_TIM_ConfigClockSource+0x4d8>
 800bd26:	f241 51a5 	movw	r1, #5541	@ 0x15a5
 800bd2a:	486f      	ldr	r0, [pc, #444]	@ (800bee8 <HAL_TIM_ConfigClockSource+0x690>)
 800bd2c:	f7f8 ff2a 	bl	8004b84 <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800bd30:	683b      	ldr	r3, [r7, #0]
 800bd32:	685b      	ldr	r3, [r3, #4]
 800bd34:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bd38:	d014      	beq.n	800bd64 <HAL_TIM_ConfigClockSource+0x50c>
 800bd3a:	683b      	ldr	r3, [r7, #0]
 800bd3c:	685b      	ldr	r3, [r3, #4]
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d010      	beq.n	800bd64 <HAL_TIM_ConfigClockSource+0x50c>
 800bd42:	683b      	ldr	r3, [r7, #0]
 800bd44:	685b      	ldr	r3, [r3, #4]
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d00c      	beq.n	800bd64 <HAL_TIM_ConfigClockSource+0x50c>
 800bd4a:	683b      	ldr	r3, [r7, #0]
 800bd4c:	685b      	ldr	r3, [r3, #4]
 800bd4e:	2b02      	cmp	r3, #2
 800bd50:	d008      	beq.n	800bd64 <HAL_TIM_ConfigClockSource+0x50c>
 800bd52:	683b      	ldr	r3, [r7, #0]
 800bd54:	685b      	ldr	r3, [r3, #4]
 800bd56:	2b0a      	cmp	r3, #10
 800bd58:	d004      	beq.n	800bd64 <HAL_TIM_ConfigClockSource+0x50c>
 800bd5a:	f241 51a8 	movw	r1, #5544	@ 0x15a8
 800bd5e:	4862      	ldr	r0, [pc, #392]	@ (800bee8 <HAL_TIM_ConfigClockSource+0x690>)
 800bd60:	f7f8 ff10 	bl	8004b84 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800bd64:	683b      	ldr	r3, [r7, #0]
 800bd66:	68db      	ldr	r3, [r3, #12]
 800bd68:	2b0f      	cmp	r3, #15
 800bd6a:	d904      	bls.n	800bd76 <HAL_TIM_ConfigClockSource+0x51e>
 800bd6c:	f241 51a9 	movw	r1, #5545	@ 0x15a9
 800bd70:	485d      	ldr	r0, [pc, #372]	@ (800bee8 <HAL_TIM_ConfigClockSource+0x690>)
 800bd72:	f7f8 ff07 	bl	8004b84 <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bd7a:	683b      	ldr	r3, [r7, #0]
 800bd7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bd7e:	683b      	ldr	r3, [r7, #0]
 800bd80:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800bd82:	461a      	mov	r2, r3
 800bd84:	f000 fd0f 	bl	800c7a6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	2160      	movs	r1, #96	@ 0x60
 800bd8e:	4618      	mov	r0, r3
 800bd90:	f000 fd39 	bl	800c806 <TIM_ITRx_SetConfig>
      break;
 800bd94:	e08f      	b.n	800beb6 <HAL_TIM_ConfigClockSource+0x65e>
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	4a4d      	ldr	r2, [pc, #308]	@ (800bed0 <HAL_TIM_ConfigClockSource+0x678>)
 800bd9c:	4293      	cmp	r3, r2
 800bd9e:	d022      	beq.n	800bde6 <HAL_TIM_ConfigClockSource+0x58e>
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bda8:	d01d      	beq.n	800bde6 <HAL_TIM_ConfigClockSource+0x58e>
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	4a49      	ldr	r2, [pc, #292]	@ (800bed4 <HAL_TIM_ConfigClockSource+0x67c>)
 800bdb0:	4293      	cmp	r3, r2
 800bdb2:	d018      	beq.n	800bde6 <HAL_TIM_ConfigClockSource+0x58e>
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	4a47      	ldr	r2, [pc, #284]	@ (800bed8 <HAL_TIM_ConfigClockSource+0x680>)
 800bdba:	4293      	cmp	r3, r2
 800bdbc:	d013      	beq.n	800bde6 <HAL_TIM_ConfigClockSource+0x58e>
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	4a46      	ldr	r2, [pc, #280]	@ (800bedc <HAL_TIM_ConfigClockSource+0x684>)
 800bdc4:	4293      	cmp	r3, r2
 800bdc6:	d00e      	beq.n	800bde6 <HAL_TIM_ConfigClockSource+0x58e>
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	4a44      	ldr	r2, [pc, #272]	@ (800bee0 <HAL_TIM_ConfigClockSource+0x688>)
 800bdce:	4293      	cmp	r3, r2
 800bdd0:	d009      	beq.n	800bde6 <HAL_TIM_ConfigClockSource+0x58e>
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	4a43      	ldr	r2, [pc, #268]	@ (800bee4 <HAL_TIM_ConfigClockSource+0x68c>)
 800bdd8:	4293      	cmp	r3, r2
 800bdda:	d004      	beq.n	800bde6 <HAL_TIM_ConfigClockSource+0x58e>
 800bddc:	f241 51b5 	movw	r1, #5557	@ 0x15b5
 800bde0:	4841      	ldr	r0, [pc, #260]	@ (800bee8 <HAL_TIM_ConfigClockSource+0x690>)
 800bde2:	f7f8 fecf 	bl	8004b84 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800bde6:	683b      	ldr	r3, [r7, #0]
 800bde8:	685b      	ldr	r3, [r3, #4]
 800bdea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bdee:	d014      	beq.n	800be1a <HAL_TIM_ConfigClockSource+0x5c2>
 800bdf0:	683b      	ldr	r3, [r7, #0]
 800bdf2:	685b      	ldr	r3, [r3, #4]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d010      	beq.n	800be1a <HAL_TIM_ConfigClockSource+0x5c2>
 800bdf8:	683b      	ldr	r3, [r7, #0]
 800bdfa:	685b      	ldr	r3, [r3, #4]
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d00c      	beq.n	800be1a <HAL_TIM_ConfigClockSource+0x5c2>
 800be00:	683b      	ldr	r3, [r7, #0]
 800be02:	685b      	ldr	r3, [r3, #4]
 800be04:	2b02      	cmp	r3, #2
 800be06:	d008      	beq.n	800be1a <HAL_TIM_ConfigClockSource+0x5c2>
 800be08:	683b      	ldr	r3, [r7, #0]
 800be0a:	685b      	ldr	r3, [r3, #4]
 800be0c:	2b0a      	cmp	r3, #10
 800be0e:	d004      	beq.n	800be1a <HAL_TIM_ConfigClockSource+0x5c2>
 800be10:	f241 51b8 	movw	r1, #5560	@ 0x15b8
 800be14:	4834      	ldr	r0, [pc, #208]	@ (800bee8 <HAL_TIM_ConfigClockSource+0x690>)
 800be16:	f7f8 feb5 	bl	8004b84 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800be1a:	683b      	ldr	r3, [r7, #0]
 800be1c:	68db      	ldr	r3, [r3, #12]
 800be1e:	2b0f      	cmp	r3, #15
 800be20:	d904      	bls.n	800be2c <HAL_TIM_ConfigClockSource+0x5d4>
 800be22:	f241 51b9 	movw	r1, #5561	@ 0x15b9
 800be26:	4830      	ldr	r0, [pc, #192]	@ (800bee8 <HAL_TIM_ConfigClockSource+0x690>)
 800be28:	f7f8 feac 	bl	8004b84 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800be30:	683b      	ldr	r3, [r7, #0]
 800be32:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800be34:	683b      	ldr	r3, [r7, #0]
 800be36:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800be38:	461a      	mov	r2, r3
 800be3a:	f000 fc85 	bl	800c748 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	2140      	movs	r1, #64	@ 0x40
 800be44:	4618      	mov	r0, r3
 800be46:	f000 fcde 	bl	800c806 <TIM_ITRx_SetConfig>
      break;
 800be4a:	e034      	b.n	800beb6 <HAL_TIM_ConfigClockSource+0x65e>
    case TIM_CLOCKSOURCE_ITR1:
    case TIM_CLOCKSOURCE_ITR2:
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	4a1f      	ldr	r2, [pc, #124]	@ (800bed0 <HAL_TIM_ConfigClockSource+0x678>)
 800be52:	4293      	cmp	r3, r2
 800be54:	d022      	beq.n	800be9c <HAL_TIM_ConfigClockSource+0x644>
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800be5e:	d01d      	beq.n	800be9c <HAL_TIM_ConfigClockSource+0x644>
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	4a1b      	ldr	r2, [pc, #108]	@ (800bed4 <HAL_TIM_ConfigClockSource+0x67c>)
 800be66:	4293      	cmp	r3, r2
 800be68:	d018      	beq.n	800be9c <HAL_TIM_ConfigClockSource+0x644>
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	4a1a      	ldr	r2, [pc, #104]	@ (800bed8 <HAL_TIM_ConfigClockSource+0x680>)
 800be70:	4293      	cmp	r3, r2
 800be72:	d013      	beq.n	800be9c <HAL_TIM_ConfigClockSource+0x644>
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	4a18      	ldr	r2, [pc, #96]	@ (800bedc <HAL_TIM_ConfigClockSource+0x684>)
 800be7a:	4293      	cmp	r3, r2
 800be7c:	d00e      	beq.n	800be9c <HAL_TIM_ConfigClockSource+0x644>
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	4a17      	ldr	r2, [pc, #92]	@ (800bee0 <HAL_TIM_ConfigClockSource+0x688>)
 800be84:	4293      	cmp	r3, r2
 800be86:	d009      	beq.n	800be9c <HAL_TIM_ConfigClockSource+0x644>
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	4a15      	ldr	r2, [pc, #84]	@ (800bee4 <HAL_TIM_ConfigClockSource+0x68c>)
 800be8e:	4293      	cmp	r3, r2
 800be90:	d004      	beq.n	800be9c <HAL_TIM_ConfigClockSource+0x644>
 800be92:	f241 51c8 	movw	r1, #5576	@ 0x15c8
 800be96:	4814      	ldr	r0, [pc, #80]	@ (800bee8 <HAL_TIM_ConfigClockSource+0x690>)
 800be98:	f7f8 fe74 	bl	8004b84 <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	681a      	ldr	r2, [r3, #0]
 800bea0:	683b      	ldr	r3, [r7, #0]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	4619      	mov	r1, r3
 800bea6:	4610      	mov	r0, r2
 800bea8:	f000 fcad 	bl	800c806 <TIM_ITRx_SetConfig>
      break;
 800beac:	e003      	b.n	800beb6 <HAL_TIM_ConfigClockSource+0x65e>
    }

    default:
      status = HAL_ERROR;
 800beae:	2301      	movs	r3, #1
 800beb0:	73fb      	strb	r3, [r7, #15]
      break;
 800beb2:	e000      	b.n	800beb6 <HAL_TIM_ConfigClockSource+0x65e>
      break;
 800beb4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	2201      	movs	r2, #1
 800beba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	2200      	movs	r2, #0
 800bec2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800bec6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bec8:	4618      	mov	r0, r3
 800beca:	3710      	adds	r7, #16
 800becc:	46bd      	mov	sp, r7
 800bece:	bd80      	pop	{r7, pc}
 800bed0:	40012c00 	.word	0x40012c00
 800bed4:	40000400 	.word	0x40000400
 800bed8:	40000800 	.word	0x40000800
 800bedc:	40000c00 	.word	0x40000c00
 800bee0:	40013400 	.word	0x40013400
 800bee4:	40014000 	.word	0x40014000
 800bee8:	0800fa34 	.word	0x0800fa34

0800beec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800beec:	b480      	push	{r7}
 800beee:	b083      	sub	sp, #12
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bef4:	bf00      	nop
 800bef6:	370c      	adds	r7, #12
 800bef8:	46bd      	mov	sp, r7
 800befa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800befe:	4770      	bx	lr

0800bf00 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bf00:	b480      	push	{r7}
 800bf02:	b083      	sub	sp, #12
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bf08:	bf00      	nop
 800bf0a:	370c      	adds	r7, #12
 800bf0c:	46bd      	mov	sp, r7
 800bf0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf12:	4770      	bx	lr

0800bf14 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bf14:	b480      	push	{r7}
 800bf16:	b083      	sub	sp, #12
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bf1c:	bf00      	nop
 800bf1e:	370c      	adds	r7, #12
 800bf20:	46bd      	mov	sp, r7
 800bf22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf26:	4770      	bx	lr

0800bf28 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bf28:	b480      	push	{r7}
 800bf2a:	b083      	sub	sp, #12
 800bf2c:	af00      	add	r7, sp, #0
 800bf2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bf30:	bf00      	nop
 800bf32:	370c      	adds	r7, #12
 800bf34:	46bd      	mov	sp, r7
 800bf36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf3a:	4770      	bx	lr

0800bf3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800bf3c:	b480      	push	{r7}
 800bf3e:	b085      	sub	sp, #20
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	6078      	str	r0, [r7, #4]
 800bf44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	4a46      	ldr	r2, [pc, #280]	@ (800c068 <TIM_Base_SetConfig+0x12c>)
 800bf50:	4293      	cmp	r3, r2
 800bf52:	d013      	beq.n	800bf7c <TIM_Base_SetConfig+0x40>
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bf5a:	d00f      	beq.n	800bf7c <TIM_Base_SetConfig+0x40>
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	4a43      	ldr	r2, [pc, #268]	@ (800c06c <TIM_Base_SetConfig+0x130>)
 800bf60:	4293      	cmp	r3, r2
 800bf62:	d00b      	beq.n	800bf7c <TIM_Base_SetConfig+0x40>
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	4a42      	ldr	r2, [pc, #264]	@ (800c070 <TIM_Base_SetConfig+0x134>)
 800bf68:	4293      	cmp	r3, r2
 800bf6a:	d007      	beq.n	800bf7c <TIM_Base_SetConfig+0x40>
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	4a41      	ldr	r2, [pc, #260]	@ (800c074 <TIM_Base_SetConfig+0x138>)
 800bf70:	4293      	cmp	r3, r2
 800bf72:	d003      	beq.n	800bf7c <TIM_Base_SetConfig+0x40>
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	4a40      	ldr	r2, [pc, #256]	@ (800c078 <TIM_Base_SetConfig+0x13c>)
 800bf78:	4293      	cmp	r3, r2
 800bf7a:	d108      	bne.n	800bf8e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bf82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bf84:	683b      	ldr	r3, [r7, #0]
 800bf86:	685b      	ldr	r3, [r3, #4]
 800bf88:	68fa      	ldr	r2, [r7, #12]
 800bf8a:	4313      	orrs	r3, r2
 800bf8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	4a35      	ldr	r2, [pc, #212]	@ (800c068 <TIM_Base_SetConfig+0x12c>)
 800bf92:	4293      	cmp	r3, r2
 800bf94:	d01f      	beq.n	800bfd6 <TIM_Base_SetConfig+0x9a>
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bf9c:	d01b      	beq.n	800bfd6 <TIM_Base_SetConfig+0x9a>
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	4a32      	ldr	r2, [pc, #200]	@ (800c06c <TIM_Base_SetConfig+0x130>)
 800bfa2:	4293      	cmp	r3, r2
 800bfa4:	d017      	beq.n	800bfd6 <TIM_Base_SetConfig+0x9a>
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	4a31      	ldr	r2, [pc, #196]	@ (800c070 <TIM_Base_SetConfig+0x134>)
 800bfaa:	4293      	cmp	r3, r2
 800bfac:	d013      	beq.n	800bfd6 <TIM_Base_SetConfig+0x9a>
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	4a30      	ldr	r2, [pc, #192]	@ (800c074 <TIM_Base_SetConfig+0x138>)
 800bfb2:	4293      	cmp	r3, r2
 800bfb4:	d00f      	beq.n	800bfd6 <TIM_Base_SetConfig+0x9a>
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	4a2f      	ldr	r2, [pc, #188]	@ (800c078 <TIM_Base_SetConfig+0x13c>)
 800bfba:	4293      	cmp	r3, r2
 800bfbc:	d00b      	beq.n	800bfd6 <TIM_Base_SetConfig+0x9a>
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	4a2e      	ldr	r2, [pc, #184]	@ (800c07c <TIM_Base_SetConfig+0x140>)
 800bfc2:	4293      	cmp	r3, r2
 800bfc4:	d007      	beq.n	800bfd6 <TIM_Base_SetConfig+0x9a>
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	4a2d      	ldr	r2, [pc, #180]	@ (800c080 <TIM_Base_SetConfig+0x144>)
 800bfca:	4293      	cmp	r3, r2
 800bfcc:	d003      	beq.n	800bfd6 <TIM_Base_SetConfig+0x9a>
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	4a2c      	ldr	r2, [pc, #176]	@ (800c084 <TIM_Base_SetConfig+0x148>)
 800bfd2:	4293      	cmp	r3, r2
 800bfd4:	d108      	bne.n	800bfe8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bfdc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bfde:	683b      	ldr	r3, [r7, #0]
 800bfe0:	68db      	ldr	r3, [r3, #12]
 800bfe2:	68fa      	ldr	r2, [r7, #12]
 800bfe4:	4313      	orrs	r3, r2
 800bfe6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800bfee:	683b      	ldr	r3, [r7, #0]
 800bff0:	695b      	ldr	r3, [r3, #20]
 800bff2:	4313      	orrs	r3, r2
 800bff4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	68fa      	ldr	r2, [r7, #12]
 800bffa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bffc:	683b      	ldr	r3, [r7, #0]
 800bffe:	689a      	ldr	r2, [r3, #8]
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c004:	683b      	ldr	r3, [r7, #0]
 800c006:	681a      	ldr	r2, [r3, #0]
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	4a16      	ldr	r2, [pc, #88]	@ (800c068 <TIM_Base_SetConfig+0x12c>)
 800c010:	4293      	cmp	r3, r2
 800c012:	d00f      	beq.n	800c034 <TIM_Base_SetConfig+0xf8>
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	4a18      	ldr	r2, [pc, #96]	@ (800c078 <TIM_Base_SetConfig+0x13c>)
 800c018:	4293      	cmp	r3, r2
 800c01a:	d00b      	beq.n	800c034 <TIM_Base_SetConfig+0xf8>
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	4a17      	ldr	r2, [pc, #92]	@ (800c07c <TIM_Base_SetConfig+0x140>)
 800c020:	4293      	cmp	r3, r2
 800c022:	d007      	beq.n	800c034 <TIM_Base_SetConfig+0xf8>
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	4a16      	ldr	r2, [pc, #88]	@ (800c080 <TIM_Base_SetConfig+0x144>)
 800c028:	4293      	cmp	r3, r2
 800c02a:	d003      	beq.n	800c034 <TIM_Base_SetConfig+0xf8>
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	4a15      	ldr	r2, [pc, #84]	@ (800c084 <TIM_Base_SetConfig+0x148>)
 800c030:	4293      	cmp	r3, r2
 800c032:	d103      	bne.n	800c03c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c034:	683b      	ldr	r3, [r7, #0]
 800c036:	691a      	ldr	r2, [r3, #16]
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	2201      	movs	r2, #1
 800c040:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	691b      	ldr	r3, [r3, #16]
 800c046:	f003 0301 	and.w	r3, r3, #1
 800c04a:	2b01      	cmp	r3, #1
 800c04c:	d105      	bne.n	800c05a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	691b      	ldr	r3, [r3, #16]
 800c052:	f023 0201 	bic.w	r2, r3, #1
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	611a      	str	r2, [r3, #16]
  }
}
 800c05a:	bf00      	nop
 800c05c:	3714      	adds	r7, #20
 800c05e:	46bd      	mov	sp, r7
 800c060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c064:	4770      	bx	lr
 800c066:	bf00      	nop
 800c068:	40012c00 	.word	0x40012c00
 800c06c:	40000400 	.word	0x40000400
 800c070:	40000800 	.word	0x40000800
 800c074:	40000c00 	.word	0x40000c00
 800c078:	40013400 	.word	0x40013400
 800c07c:	40014000 	.word	0x40014000
 800c080:	40014400 	.word	0x40014400
 800c084:	40014800 	.word	0x40014800

0800c088 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c088:	b580      	push	{r7, lr}
 800c08a:	b086      	sub	sp, #24
 800c08c:	af00      	add	r7, sp, #0
 800c08e:	6078      	str	r0, [r7, #4]
 800c090:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	6a1b      	ldr	r3, [r3, #32]
 800c096:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	6a1b      	ldr	r3, [r3, #32]
 800c09c:	f023 0201 	bic.w	r2, r3, #1
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	685b      	ldr	r3, [r3, #4]
 800c0a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	699b      	ldr	r3, [r3, #24]
 800c0ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c0b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c0ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	f023 0303 	bic.w	r3, r3, #3
 800c0c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c0c4:	683b      	ldr	r3, [r7, #0]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	68fa      	ldr	r2, [r7, #12]
 800c0ca:	4313      	orrs	r3, r2
 800c0cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c0ce:	697b      	ldr	r3, [r7, #20]
 800c0d0:	f023 0302 	bic.w	r3, r3, #2
 800c0d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c0d6:	683b      	ldr	r3, [r7, #0]
 800c0d8:	689b      	ldr	r3, [r3, #8]
 800c0da:	697a      	ldr	r2, [r7, #20]
 800c0dc:	4313      	orrs	r3, r2
 800c0de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	4a40      	ldr	r2, [pc, #256]	@ (800c1e4 <TIM_OC1_SetConfig+0x15c>)
 800c0e4:	4293      	cmp	r3, r2
 800c0e6:	d00f      	beq.n	800c108 <TIM_OC1_SetConfig+0x80>
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	4a3f      	ldr	r2, [pc, #252]	@ (800c1e8 <TIM_OC1_SetConfig+0x160>)
 800c0ec:	4293      	cmp	r3, r2
 800c0ee:	d00b      	beq.n	800c108 <TIM_OC1_SetConfig+0x80>
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	4a3e      	ldr	r2, [pc, #248]	@ (800c1ec <TIM_OC1_SetConfig+0x164>)
 800c0f4:	4293      	cmp	r3, r2
 800c0f6:	d007      	beq.n	800c108 <TIM_OC1_SetConfig+0x80>
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	4a3d      	ldr	r2, [pc, #244]	@ (800c1f0 <TIM_OC1_SetConfig+0x168>)
 800c0fc:	4293      	cmp	r3, r2
 800c0fe:	d003      	beq.n	800c108 <TIM_OC1_SetConfig+0x80>
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	4a3c      	ldr	r2, [pc, #240]	@ (800c1f4 <TIM_OC1_SetConfig+0x16c>)
 800c104:	4293      	cmp	r3, r2
 800c106:	d119      	bne.n	800c13c <TIM_OC1_SetConfig+0xb4>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800c108:	683b      	ldr	r3, [r7, #0]
 800c10a:	68db      	ldr	r3, [r3, #12]
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d008      	beq.n	800c122 <TIM_OC1_SetConfig+0x9a>
 800c110:	683b      	ldr	r3, [r7, #0]
 800c112:	68db      	ldr	r3, [r3, #12]
 800c114:	2b08      	cmp	r3, #8
 800c116:	d004      	beq.n	800c122 <TIM_OC1_SetConfig+0x9a>
 800c118:	f641 316e 	movw	r1, #7022	@ 0x1b6e
 800c11c:	4836      	ldr	r0, [pc, #216]	@ (800c1f8 <TIM_OC1_SetConfig+0x170>)
 800c11e:	f7f8 fd31 	bl	8004b84 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c122:	697b      	ldr	r3, [r7, #20]
 800c124:	f023 0308 	bic.w	r3, r3, #8
 800c128:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c12a:	683b      	ldr	r3, [r7, #0]
 800c12c:	68db      	ldr	r3, [r3, #12]
 800c12e:	697a      	ldr	r2, [r7, #20]
 800c130:	4313      	orrs	r3, r2
 800c132:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c134:	697b      	ldr	r3, [r7, #20]
 800c136:	f023 0304 	bic.w	r3, r3, #4
 800c13a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	4a29      	ldr	r2, [pc, #164]	@ (800c1e4 <TIM_OC1_SetConfig+0x15c>)
 800c140:	4293      	cmp	r3, r2
 800c142:	d00f      	beq.n	800c164 <TIM_OC1_SetConfig+0xdc>
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	4a28      	ldr	r2, [pc, #160]	@ (800c1e8 <TIM_OC1_SetConfig+0x160>)
 800c148:	4293      	cmp	r3, r2
 800c14a:	d00b      	beq.n	800c164 <TIM_OC1_SetConfig+0xdc>
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	4a27      	ldr	r2, [pc, #156]	@ (800c1ec <TIM_OC1_SetConfig+0x164>)
 800c150:	4293      	cmp	r3, r2
 800c152:	d007      	beq.n	800c164 <TIM_OC1_SetConfig+0xdc>
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	4a26      	ldr	r2, [pc, #152]	@ (800c1f0 <TIM_OC1_SetConfig+0x168>)
 800c158:	4293      	cmp	r3, r2
 800c15a:	d003      	beq.n	800c164 <TIM_OC1_SetConfig+0xdc>
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	4a25      	ldr	r2, [pc, #148]	@ (800c1f4 <TIM_OC1_SetConfig+0x16c>)
 800c160:	4293      	cmp	r3, r2
 800c162:	d12d      	bne.n	800c1c0 <TIM_OC1_SetConfig+0x138>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800c164:	683b      	ldr	r3, [r7, #0]
 800c166:	699b      	ldr	r3, [r3, #24]
 800c168:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c16c:	d008      	beq.n	800c180 <TIM_OC1_SetConfig+0xf8>
 800c16e:	683b      	ldr	r3, [r7, #0]
 800c170:	699b      	ldr	r3, [r3, #24]
 800c172:	2b00      	cmp	r3, #0
 800c174:	d004      	beq.n	800c180 <TIM_OC1_SetConfig+0xf8>
 800c176:	f641 317b 	movw	r1, #7035	@ 0x1b7b
 800c17a:	481f      	ldr	r0, [pc, #124]	@ (800c1f8 <TIM_OC1_SetConfig+0x170>)
 800c17c:	f7f8 fd02 	bl	8004b84 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800c180:	683b      	ldr	r3, [r7, #0]
 800c182:	695b      	ldr	r3, [r3, #20]
 800c184:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c188:	d008      	beq.n	800c19c <TIM_OC1_SetConfig+0x114>
 800c18a:	683b      	ldr	r3, [r7, #0]
 800c18c:	695b      	ldr	r3, [r3, #20]
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d004      	beq.n	800c19c <TIM_OC1_SetConfig+0x114>
 800c192:	f641 317c 	movw	r1, #7036	@ 0x1b7c
 800c196:	4818      	ldr	r0, [pc, #96]	@ (800c1f8 <TIM_OC1_SetConfig+0x170>)
 800c198:	f7f8 fcf4 	bl	8004b84 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c19c:	693b      	ldr	r3, [r7, #16]
 800c19e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c1a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c1a4:	693b      	ldr	r3, [r7, #16]
 800c1a6:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c1aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c1ac:	683b      	ldr	r3, [r7, #0]
 800c1ae:	695b      	ldr	r3, [r3, #20]
 800c1b0:	693a      	ldr	r2, [r7, #16]
 800c1b2:	4313      	orrs	r3, r2
 800c1b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c1b6:	683b      	ldr	r3, [r7, #0]
 800c1b8:	699b      	ldr	r3, [r3, #24]
 800c1ba:	693a      	ldr	r2, [r7, #16]
 800c1bc:	4313      	orrs	r3, r2
 800c1be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	693a      	ldr	r2, [r7, #16]
 800c1c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	68fa      	ldr	r2, [r7, #12]
 800c1ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c1cc:	683b      	ldr	r3, [r7, #0]
 800c1ce:	685a      	ldr	r2, [r3, #4]
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	697a      	ldr	r2, [r7, #20]
 800c1d8:	621a      	str	r2, [r3, #32]
}
 800c1da:	bf00      	nop
 800c1dc:	3718      	adds	r7, #24
 800c1de:	46bd      	mov	sp, r7
 800c1e0:	bd80      	pop	{r7, pc}
 800c1e2:	bf00      	nop
 800c1e4:	40012c00 	.word	0x40012c00
 800c1e8:	40013400 	.word	0x40013400
 800c1ec:	40014000 	.word	0x40014000
 800c1f0:	40014400 	.word	0x40014400
 800c1f4:	40014800 	.word	0x40014800
 800c1f8:	0800fa34 	.word	0x0800fa34

0800c1fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c1fc:	b580      	push	{r7, lr}
 800c1fe:	b086      	sub	sp, #24
 800c200:	af00      	add	r7, sp, #0
 800c202:	6078      	str	r0, [r7, #4]
 800c204:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	6a1b      	ldr	r3, [r3, #32]
 800c20a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	6a1b      	ldr	r3, [r3, #32]
 800c210:	f023 0210 	bic.w	r2, r3, #16
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	685b      	ldr	r3, [r3, #4]
 800c21c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	699b      	ldr	r3, [r3, #24]
 800c222:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c22a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c22e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c236:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c238:	683b      	ldr	r3, [r7, #0]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	021b      	lsls	r3, r3, #8
 800c23e:	68fa      	ldr	r2, [r7, #12]
 800c240:	4313      	orrs	r3, r2
 800c242:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c244:	697b      	ldr	r3, [r7, #20]
 800c246:	f023 0320 	bic.w	r3, r3, #32
 800c24a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c24c:	683b      	ldr	r3, [r7, #0]
 800c24e:	689b      	ldr	r3, [r3, #8]
 800c250:	011b      	lsls	r3, r3, #4
 800c252:	697a      	ldr	r2, [r7, #20]
 800c254:	4313      	orrs	r3, r2
 800c256:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	4a3b      	ldr	r2, [pc, #236]	@ (800c348 <TIM_OC2_SetConfig+0x14c>)
 800c25c:	4293      	cmp	r3, r2
 800c25e:	d003      	beq.n	800c268 <TIM_OC2_SetConfig+0x6c>
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	4a3a      	ldr	r2, [pc, #232]	@ (800c34c <TIM_OC2_SetConfig+0x150>)
 800c264:	4293      	cmp	r3, r2
 800c266:	d11a      	bne.n	800c29e <TIM_OC2_SetConfig+0xa2>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800c268:	683b      	ldr	r3, [r7, #0]
 800c26a:	68db      	ldr	r3, [r3, #12]
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d008      	beq.n	800c282 <TIM_OC2_SetConfig+0x86>
 800c270:	683b      	ldr	r3, [r7, #0]
 800c272:	68db      	ldr	r3, [r3, #12]
 800c274:	2b08      	cmp	r3, #8
 800c276:	d004      	beq.n	800c282 <TIM_OC2_SetConfig+0x86>
 800c278:	f641 31ba 	movw	r1, #7098	@ 0x1bba
 800c27c:	4834      	ldr	r0, [pc, #208]	@ (800c350 <TIM_OC2_SetConfig+0x154>)
 800c27e:	f7f8 fc81 	bl	8004b84 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c282:	697b      	ldr	r3, [r7, #20]
 800c284:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c288:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c28a:	683b      	ldr	r3, [r7, #0]
 800c28c:	68db      	ldr	r3, [r3, #12]
 800c28e:	011b      	lsls	r3, r3, #4
 800c290:	697a      	ldr	r2, [r7, #20]
 800c292:	4313      	orrs	r3, r2
 800c294:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c296:	697b      	ldr	r3, [r7, #20]
 800c298:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c29c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	4a29      	ldr	r2, [pc, #164]	@ (800c348 <TIM_OC2_SetConfig+0x14c>)
 800c2a2:	4293      	cmp	r3, r2
 800c2a4:	d00f      	beq.n	800c2c6 <TIM_OC2_SetConfig+0xca>
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	4a28      	ldr	r2, [pc, #160]	@ (800c34c <TIM_OC2_SetConfig+0x150>)
 800c2aa:	4293      	cmp	r3, r2
 800c2ac:	d00b      	beq.n	800c2c6 <TIM_OC2_SetConfig+0xca>
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	4a28      	ldr	r2, [pc, #160]	@ (800c354 <TIM_OC2_SetConfig+0x158>)
 800c2b2:	4293      	cmp	r3, r2
 800c2b4:	d007      	beq.n	800c2c6 <TIM_OC2_SetConfig+0xca>
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	4a27      	ldr	r2, [pc, #156]	@ (800c358 <TIM_OC2_SetConfig+0x15c>)
 800c2ba:	4293      	cmp	r3, r2
 800c2bc:	d003      	beq.n	800c2c6 <TIM_OC2_SetConfig+0xca>
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	4a26      	ldr	r2, [pc, #152]	@ (800c35c <TIM_OC2_SetConfig+0x160>)
 800c2c2:	4293      	cmp	r3, r2
 800c2c4:	d12f      	bne.n	800c326 <TIM_OC2_SetConfig+0x12a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800c2c6:	683b      	ldr	r3, [r7, #0]
 800c2c8:	699b      	ldr	r3, [r3, #24]
 800c2ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c2ce:	d008      	beq.n	800c2e2 <TIM_OC2_SetConfig+0xe6>
 800c2d0:	683b      	ldr	r3, [r7, #0]
 800c2d2:	699b      	ldr	r3, [r3, #24]
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d004      	beq.n	800c2e2 <TIM_OC2_SetConfig+0xe6>
 800c2d8:	f641 31c7 	movw	r1, #7111	@ 0x1bc7
 800c2dc:	481c      	ldr	r0, [pc, #112]	@ (800c350 <TIM_OC2_SetConfig+0x154>)
 800c2de:	f7f8 fc51 	bl	8004b84 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800c2e2:	683b      	ldr	r3, [r7, #0]
 800c2e4:	695b      	ldr	r3, [r3, #20]
 800c2e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c2ea:	d008      	beq.n	800c2fe <TIM_OC2_SetConfig+0x102>
 800c2ec:	683b      	ldr	r3, [r7, #0]
 800c2ee:	695b      	ldr	r3, [r3, #20]
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d004      	beq.n	800c2fe <TIM_OC2_SetConfig+0x102>
 800c2f4:	f641 31c8 	movw	r1, #7112	@ 0x1bc8
 800c2f8:	4815      	ldr	r0, [pc, #84]	@ (800c350 <TIM_OC2_SetConfig+0x154>)
 800c2fa:	f7f8 fc43 	bl	8004b84 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c2fe:	693b      	ldr	r3, [r7, #16]
 800c300:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c304:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c306:	693b      	ldr	r3, [r7, #16]
 800c308:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c30c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c30e:	683b      	ldr	r3, [r7, #0]
 800c310:	695b      	ldr	r3, [r3, #20]
 800c312:	009b      	lsls	r3, r3, #2
 800c314:	693a      	ldr	r2, [r7, #16]
 800c316:	4313      	orrs	r3, r2
 800c318:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c31a:	683b      	ldr	r3, [r7, #0]
 800c31c:	699b      	ldr	r3, [r3, #24]
 800c31e:	009b      	lsls	r3, r3, #2
 800c320:	693a      	ldr	r2, [r7, #16]
 800c322:	4313      	orrs	r3, r2
 800c324:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	693a      	ldr	r2, [r7, #16]
 800c32a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	68fa      	ldr	r2, [r7, #12]
 800c330:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c332:	683b      	ldr	r3, [r7, #0]
 800c334:	685a      	ldr	r2, [r3, #4]
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	697a      	ldr	r2, [r7, #20]
 800c33e:	621a      	str	r2, [r3, #32]
}
 800c340:	bf00      	nop
 800c342:	3718      	adds	r7, #24
 800c344:	46bd      	mov	sp, r7
 800c346:	bd80      	pop	{r7, pc}
 800c348:	40012c00 	.word	0x40012c00
 800c34c:	40013400 	.word	0x40013400
 800c350:	0800fa34 	.word	0x0800fa34
 800c354:	40014000 	.word	0x40014000
 800c358:	40014400 	.word	0x40014400
 800c35c:	40014800 	.word	0x40014800

0800c360 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c360:	b580      	push	{r7, lr}
 800c362:	b086      	sub	sp, #24
 800c364:	af00      	add	r7, sp, #0
 800c366:	6078      	str	r0, [r7, #4]
 800c368:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	6a1b      	ldr	r3, [r3, #32]
 800c36e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	6a1b      	ldr	r3, [r3, #32]
 800c374:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	685b      	ldr	r3, [r3, #4]
 800c380:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	69db      	ldr	r3, [r3, #28]
 800c386:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c38e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c392:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	f023 0303 	bic.w	r3, r3, #3
 800c39a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c39c:	683b      	ldr	r3, [r7, #0]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	68fa      	ldr	r2, [r7, #12]
 800c3a2:	4313      	orrs	r3, r2
 800c3a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c3a6:	697b      	ldr	r3, [r7, #20]
 800c3a8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c3ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c3ae:	683b      	ldr	r3, [r7, #0]
 800c3b0:	689b      	ldr	r3, [r3, #8]
 800c3b2:	021b      	lsls	r3, r3, #8
 800c3b4:	697a      	ldr	r2, [r7, #20]
 800c3b6:	4313      	orrs	r3, r2
 800c3b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	4a3b      	ldr	r2, [pc, #236]	@ (800c4ac <TIM_OC3_SetConfig+0x14c>)
 800c3be:	4293      	cmp	r3, r2
 800c3c0:	d003      	beq.n	800c3ca <TIM_OC3_SetConfig+0x6a>
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	4a3a      	ldr	r2, [pc, #232]	@ (800c4b0 <TIM_OC3_SetConfig+0x150>)
 800c3c6:	4293      	cmp	r3, r2
 800c3c8:	d11a      	bne.n	800c400 <TIM_OC3_SetConfig+0xa0>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800c3ca:	683b      	ldr	r3, [r7, #0]
 800c3cc:	68db      	ldr	r3, [r3, #12]
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d008      	beq.n	800c3e4 <TIM_OC3_SetConfig+0x84>
 800c3d2:	683b      	ldr	r3, [r7, #0]
 800c3d4:	68db      	ldr	r3, [r3, #12]
 800c3d6:	2b08      	cmp	r3, #8
 800c3d8:	d004      	beq.n	800c3e4 <TIM_OC3_SetConfig+0x84>
 800c3da:	f641 4105 	movw	r1, #7173	@ 0x1c05
 800c3de:	4835      	ldr	r0, [pc, #212]	@ (800c4b4 <TIM_OC3_SetConfig+0x154>)
 800c3e0:	f7f8 fbd0 	bl	8004b84 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c3e4:	697b      	ldr	r3, [r7, #20]
 800c3e6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c3ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c3ec:	683b      	ldr	r3, [r7, #0]
 800c3ee:	68db      	ldr	r3, [r3, #12]
 800c3f0:	021b      	lsls	r3, r3, #8
 800c3f2:	697a      	ldr	r2, [r7, #20]
 800c3f4:	4313      	orrs	r3, r2
 800c3f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c3f8:	697b      	ldr	r3, [r7, #20]
 800c3fa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c3fe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	4a2a      	ldr	r2, [pc, #168]	@ (800c4ac <TIM_OC3_SetConfig+0x14c>)
 800c404:	4293      	cmp	r3, r2
 800c406:	d00f      	beq.n	800c428 <TIM_OC3_SetConfig+0xc8>
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	4a29      	ldr	r2, [pc, #164]	@ (800c4b0 <TIM_OC3_SetConfig+0x150>)
 800c40c:	4293      	cmp	r3, r2
 800c40e:	d00b      	beq.n	800c428 <TIM_OC3_SetConfig+0xc8>
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	4a29      	ldr	r2, [pc, #164]	@ (800c4b8 <TIM_OC3_SetConfig+0x158>)
 800c414:	4293      	cmp	r3, r2
 800c416:	d007      	beq.n	800c428 <TIM_OC3_SetConfig+0xc8>
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	4a28      	ldr	r2, [pc, #160]	@ (800c4bc <TIM_OC3_SetConfig+0x15c>)
 800c41c:	4293      	cmp	r3, r2
 800c41e:	d003      	beq.n	800c428 <TIM_OC3_SetConfig+0xc8>
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	4a27      	ldr	r2, [pc, #156]	@ (800c4c0 <TIM_OC3_SetConfig+0x160>)
 800c424:	4293      	cmp	r3, r2
 800c426:	d12f      	bne.n	800c488 <TIM_OC3_SetConfig+0x128>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800c428:	683b      	ldr	r3, [r7, #0]
 800c42a:	699b      	ldr	r3, [r3, #24]
 800c42c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c430:	d008      	beq.n	800c444 <TIM_OC3_SetConfig+0xe4>
 800c432:	683b      	ldr	r3, [r7, #0]
 800c434:	699b      	ldr	r3, [r3, #24]
 800c436:	2b00      	cmp	r3, #0
 800c438:	d004      	beq.n	800c444 <TIM_OC3_SetConfig+0xe4>
 800c43a:	f641 4112 	movw	r1, #7186	@ 0x1c12
 800c43e:	481d      	ldr	r0, [pc, #116]	@ (800c4b4 <TIM_OC3_SetConfig+0x154>)
 800c440:	f7f8 fba0 	bl	8004b84 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800c444:	683b      	ldr	r3, [r7, #0]
 800c446:	695b      	ldr	r3, [r3, #20]
 800c448:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c44c:	d008      	beq.n	800c460 <TIM_OC3_SetConfig+0x100>
 800c44e:	683b      	ldr	r3, [r7, #0]
 800c450:	695b      	ldr	r3, [r3, #20]
 800c452:	2b00      	cmp	r3, #0
 800c454:	d004      	beq.n	800c460 <TIM_OC3_SetConfig+0x100>
 800c456:	f641 4113 	movw	r1, #7187	@ 0x1c13
 800c45a:	4816      	ldr	r0, [pc, #88]	@ (800c4b4 <TIM_OC3_SetConfig+0x154>)
 800c45c:	f7f8 fb92 	bl	8004b84 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c460:	693b      	ldr	r3, [r7, #16]
 800c462:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c466:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c468:	693b      	ldr	r3, [r7, #16]
 800c46a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c46e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c470:	683b      	ldr	r3, [r7, #0]
 800c472:	695b      	ldr	r3, [r3, #20]
 800c474:	011b      	lsls	r3, r3, #4
 800c476:	693a      	ldr	r2, [r7, #16]
 800c478:	4313      	orrs	r3, r2
 800c47a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c47c:	683b      	ldr	r3, [r7, #0]
 800c47e:	699b      	ldr	r3, [r3, #24]
 800c480:	011b      	lsls	r3, r3, #4
 800c482:	693a      	ldr	r2, [r7, #16]
 800c484:	4313      	orrs	r3, r2
 800c486:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	693a      	ldr	r2, [r7, #16]
 800c48c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	68fa      	ldr	r2, [r7, #12]
 800c492:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c494:	683b      	ldr	r3, [r7, #0]
 800c496:	685a      	ldr	r2, [r3, #4]
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	697a      	ldr	r2, [r7, #20]
 800c4a0:	621a      	str	r2, [r3, #32]
}
 800c4a2:	bf00      	nop
 800c4a4:	3718      	adds	r7, #24
 800c4a6:	46bd      	mov	sp, r7
 800c4a8:	bd80      	pop	{r7, pc}
 800c4aa:	bf00      	nop
 800c4ac:	40012c00 	.word	0x40012c00
 800c4b0:	40013400 	.word	0x40013400
 800c4b4:	0800fa34 	.word	0x0800fa34
 800c4b8:	40014000 	.word	0x40014000
 800c4bc:	40014400 	.word	0x40014400
 800c4c0:	40014800 	.word	0x40014800

0800c4c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c4c4:	b580      	push	{r7, lr}
 800c4c6:	b086      	sub	sp, #24
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	6078      	str	r0, [r7, #4]
 800c4cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	6a1b      	ldr	r3, [r3, #32]
 800c4d2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	6a1b      	ldr	r3, [r3, #32]
 800c4d8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	685b      	ldr	r3, [r3, #4]
 800c4e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	69db      	ldr	r3, [r3, #28]
 800c4ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c4f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c4f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c4fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c500:	683b      	ldr	r3, [r7, #0]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	021b      	lsls	r3, r3, #8
 800c506:	68fa      	ldr	r2, [r7, #12]
 800c508:	4313      	orrs	r3, r2
 800c50a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c50c:	693b      	ldr	r3, [r7, #16]
 800c50e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c512:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c514:	683b      	ldr	r3, [r7, #0]
 800c516:	689b      	ldr	r3, [r3, #8]
 800c518:	031b      	lsls	r3, r3, #12
 800c51a:	693a      	ldr	r2, [r7, #16]
 800c51c:	4313      	orrs	r3, r2
 800c51e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	4a1e      	ldr	r2, [pc, #120]	@ (800c59c <TIM_OC4_SetConfig+0xd8>)
 800c524:	4293      	cmp	r3, r2
 800c526:	d00f      	beq.n	800c548 <TIM_OC4_SetConfig+0x84>
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	4a1d      	ldr	r2, [pc, #116]	@ (800c5a0 <TIM_OC4_SetConfig+0xdc>)
 800c52c:	4293      	cmp	r3, r2
 800c52e:	d00b      	beq.n	800c548 <TIM_OC4_SetConfig+0x84>
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	4a1c      	ldr	r2, [pc, #112]	@ (800c5a4 <TIM_OC4_SetConfig+0xe0>)
 800c534:	4293      	cmp	r3, r2
 800c536:	d007      	beq.n	800c548 <TIM_OC4_SetConfig+0x84>
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	4a1b      	ldr	r2, [pc, #108]	@ (800c5a8 <TIM_OC4_SetConfig+0xe4>)
 800c53c:	4293      	cmp	r3, r2
 800c53e:	d003      	beq.n	800c548 <TIM_OC4_SetConfig+0x84>
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	4a1a      	ldr	r2, [pc, #104]	@ (800c5ac <TIM_OC4_SetConfig+0xe8>)
 800c544:	4293      	cmp	r3, r2
 800c546:	d117      	bne.n	800c578 <TIM_OC4_SetConfig+0xb4>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800c548:	683b      	ldr	r3, [r7, #0]
 800c54a:	695b      	ldr	r3, [r3, #20]
 800c54c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c550:	d008      	beq.n	800c564 <TIM_OC4_SetConfig+0xa0>
 800c552:	683b      	ldr	r3, [r7, #0]
 800c554:	695b      	ldr	r3, [r3, #20]
 800c556:	2b00      	cmp	r3, #0
 800c558:	d004      	beq.n	800c564 <TIM_OC4_SetConfig+0xa0>
 800c55a:	f641 4152 	movw	r1, #7250	@ 0x1c52
 800c55e:	4814      	ldr	r0, [pc, #80]	@ (800c5b0 <TIM_OC4_SetConfig+0xec>)
 800c560:	f7f8 fb10 	bl	8004b84 <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c564:	697b      	ldr	r3, [r7, #20]
 800c566:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c56a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c56c:	683b      	ldr	r3, [r7, #0]
 800c56e:	695b      	ldr	r3, [r3, #20]
 800c570:	019b      	lsls	r3, r3, #6
 800c572:	697a      	ldr	r2, [r7, #20]
 800c574:	4313      	orrs	r3, r2
 800c576:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	697a      	ldr	r2, [r7, #20]
 800c57c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	68fa      	ldr	r2, [r7, #12]
 800c582:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c584:	683b      	ldr	r3, [r7, #0]
 800c586:	685a      	ldr	r2, [r3, #4]
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	693a      	ldr	r2, [r7, #16]
 800c590:	621a      	str	r2, [r3, #32]
}
 800c592:	bf00      	nop
 800c594:	3718      	adds	r7, #24
 800c596:	46bd      	mov	sp, r7
 800c598:	bd80      	pop	{r7, pc}
 800c59a:	bf00      	nop
 800c59c:	40012c00 	.word	0x40012c00
 800c5a0:	40013400 	.word	0x40013400
 800c5a4:	40014000 	.word	0x40014000
 800c5a8:	40014400 	.word	0x40014400
 800c5ac:	40014800 	.word	0x40014800
 800c5b0:	0800fa34 	.word	0x0800fa34

0800c5b4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c5b4:	b480      	push	{r7}
 800c5b6:	b087      	sub	sp, #28
 800c5b8:	af00      	add	r7, sp, #0
 800c5ba:	6078      	str	r0, [r7, #4]
 800c5bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	6a1b      	ldr	r3, [r3, #32]
 800c5c2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	6a1b      	ldr	r3, [r3, #32]
 800c5c8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	685b      	ldr	r3, [r3, #4]
 800c5d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c5da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c5e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c5e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c5e8:	683b      	ldr	r3, [r7, #0]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	68fa      	ldr	r2, [r7, #12]
 800c5ee:	4313      	orrs	r3, r2
 800c5f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c5f2:	693b      	ldr	r3, [r7, #16]
 800c5f4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800c5f8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c5fa:	683b      	ldr	r3, [r7, #0]
 800c5fc:	689b      	ldr	r3, [r3, #8]
 800c5fe:	041b      	lsls	r3, r3, #16
 800c600:	693a      	ldr	r2, [r7, #16]
 800c602:	4313      	orrs	r3, r2
 800c604:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	4a17      	ldr	r2, [pc, #92]	@ (800c668 <TIM_OC5_SetConfig+0xb4>)
 800c60a:	4293      	cmp	r3, r2
 800c60c:	d00f      	beq.n	800c62e <TIM_OC5_SetConfig+0x7a>
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	4a16      	ldr	r2, [pc, #88]	@ (800c66c <TIM_OC5_SetConfig+0xb8>)
 800c612:	4293      	cmp	r3, r2
 800c614:	d00b      	beq.n	800c62e <TIM_OC5_SetConfig+0x7a>
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	4a15      	ldr	r2, [pc, #84]	@ (800c670 <TIM_OC5_SetConfig+0xbc>)
 800c61a:	4293      	cmp	r3, r2
 800c61c:	d007      	beq.n	800c62e <TIM_OC5_SetConfig+0x7a>
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	4a14      	ldr	r2, [pc, #80]	@ (800c674 <TIM_OC5_SetConfig+0xc0>)
 800c622:	4293      	cmp	r3, r2
 800c624:	d003      	beq.n	800c62e <TIM_OC5_SetConfig+0x7a>
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	4a13      	ldr	r2, [pc, #76]	@ (800c678 <TIM_OC5_SetConfig+0xc4>)
 800c62a:	4293      	cmp	r3, r2
 800c62c:	d109      	bne.n	800c642 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c62e:	697b      	ldr	r3, [r7, #20]
 800c630:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c634:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c636:	683b      	ldr	r3, [r7, #0]
 800c638:	695b      	ldr	r3, [r3, #20]
 800c63a:	021b      	lsls	r3, r3, #8
 800c63c:	697a      	ldr	r2, [r7, #20]
 800c63e:	4313      	orrs	r3, r2
 800c640:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	697a      	ldr	r2, [r7, #20]
 800c646:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	68fa      	ldr	r2, [r7, #12]
 800c64c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c64e:	683b      	ldr	r3, [r7, #0]
 800c650:	685a      	ldr	r2, [r3, #4]
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	693a      	ldr	r2, [r7, #16]
 800c65a:	621a      	str	r2, [r3, #32]
}
 800c65c:	bf00      	nop
 800c65e:	371c      	adds	r7, #28
 800c660:	46bd      	mov	sp, r7
 800c662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c666:	4770      	bx	lr
 800c668:	40012c00 	.word	0x40012c00
 800c66c:	40013400 	.word	0x40013400
 800c670:	40014000 	.word	0x40014000
 800c674:	40014400 	.word	0x40014400
 800c678:	40014800 	.word	0x40014800

0800c67c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c67c:	b480      	push	{r7}
 800c67e:	b087      	sub	sp, #28
 800c680:	af00      	add	r7, sp, #0
 800c682:	6078      	str	r0, [r7, #4]
 800c684:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	6a1b      	ldr	r3, [r3, #32]
 800c68a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	6a1b      	ldr	r3, [r3, #32]
 800c690:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	685b      	ldr	r3, [r3, #4]
 800c69c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c6a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c6aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c6ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c6b0:	683b      	ldr	r3, [r7, #0]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	021b      	lsls	r3, r3, #8
 800c6b6:	68fa      	ldr	r2, [r7, #12]
 800c6b8:	4313      	orrs	r3, r2
 800c6ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c6bc:	693b      	ldr	r3, [r7, #16]
 800c6be:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800c6c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c6c4:	683b      	ldr	r3, [r7, #0]
 800c6c6:	689b      	ldr	r3, [r3, #8]
 800c6c8:	051b      	lsls	r3, r3, #20
 800c6ca:	693a      	ldr	r2, [r7, #16]
 800c6cc:	4313      	orrs	r3, r2
 800c6ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	4a18      	ldr	r2, [pc, #96]	@ (800c734 <TIM_OC6_SetConfig+0xb8>)
 800c6d4:	4293      	cmp	r3, r2
 800c6d6:	d00f      	beq.n	800c6f8 <TIM_OC6_SetConfig+0x7c>
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	4a17      	ldr	r2, [pc, #92]	@ (800c738 <TIM_OC6_SetConfig+0xbc>)
 800c6dc:	4293      	cmp	r3, r2
 800c6de:	d00b      	beq.n	800c6f8 <TIM_OC6_SetConfig+0x7c>
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	4a16      	ldr	r2, [pc, #88]	@ (800c73c <TIM_OC6_SetConfig+0xc0>)
 800c6e4:	4293      	cmp	r3, r2
 800c6e6:	d007      	beq.n	800c6f8 <TIM_OC6_SetConfig+0x7c>
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	4a15      	ldr	r2, [pc, #84]	@ (800c740 <TIM_OC6_SetConfig+0xc4>)
 800c6ec:	4293      	cmp	r3, r2
 800c6ee:	d003      	beq.n	800c6f8 <TIM_OC6_SetConfig+0x7c>
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	4a14      	ldr	r2, [pc, #80]	@ (800c744 <TIM_OC6_SetConfig+0xc8>)
 800c6f4:	4293      	cmp	r3, r2
 800c6f6:	d109      	bne.n	800c70c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c6f8:	697b      	ldr	r3, [r7, #20]
 800c6fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800c6fe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c700:	683b      	ldr	r3, [r7, #0]
 800c702:	695b      	ldr	r3, [r3, #20]
 800c704:	029b      	lsls	r3, r3, #10
 800c706:	697a      	ldr	r2, [r7, #20]
 800c708:	4313      	orrs	r3, r2
 800c70a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	697a      	ldr	r2, [r7, #20]
 800c710:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	68fa      	ldr	r2, [r7, #12]
 800c716:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c718:	683b      	ldr	r3, [r7, #0]
 800c71a:	685a      	ldr	r2, [r3, #4]
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	693a      	ldr	r2, [r7, #16]
 800c724:	621a      	str	r2, [r3, #32]
}
 800c726:	bf00      	nop
 800c728:	371c      	adds	r7, #28
 800c72a:	46bd      	mov	sp, r7
 800c72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c730:	4770      	bx	lr
 800c732:	bf00      	nop
 800c734:	40012c00 	.word	0x40012c00
 800c738:	40013400 	.word	0x40013400
 800c73c:	40014000 	.word	0x40014000
 800c740:	40014400 	.word	0x40014400
 800c744:	40014800 	.word	0x40014800

0800c748 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c748:	b480      	push	{r7}
 800c74a:	b087      	sub	sp, #28
 800c74c:	af00      	add	r7, sp, #0
 800c74e:	60f8      	str	r0, [r7, #12]
 800c750:	60b9      	str	r1, [r7, #8]
 800c752:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	6a1b      	ldr	r3, [r3, #32]
 800c758:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	6a1b      	ldr	r3, [r3, #32]
 800c75e:	f023 0201 	bic.w	r2, r3, #1
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	699b      	ldr	r3, [r3, #24]
 800c76a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c76c:	693b      	ldr	r3, [r7, #16]
 800c76e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c772:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	011b      	lsls	r3, r3, #4
 800c778:	693a      	ldr	r2, [r7, #16]
 800c77a:	4313      	orrs	r3, r2
 800c77c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c77e:	697b      	ldr	r3, [r7, #20]
 800c780:	f023 030a 	bic.w	r3, r3, #10
 800c784:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c786:	697a      	ldr	r2, [r7, #20]
 800c788:	68bb      	ldr	r3, [r7, #8]
 800c78a:	4313      	orrs	r3, r2
 800c78c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	693a      	ldr	r2, [r7, #16]
 800c792:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	697a      	ldr	r2, [r7, #20]
 800c798:	621a      	str	r2, [r3, #32]
}
 800c79a:	bf00      	nop
 800c79c:	371c      	adds	r7, #28
 800c79e:	46bd      	mov	sp, r7
 800c7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a4:	4770      	bx	lr

0800c7a6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c7a6:	b480      	push	{r7}
 800c7a8:	b087      	sub	sp, #28
 800c7aa:	af00      	add	r7, sp, #0
 800c7ac:	60f8      	str	r0, [r7, #12]
 800c7ae:	60b9      	str	r1, [r7, #8]
 800c7b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	6a1b      	ldr	r3, [r3, #32]
 800c7b6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	6a1b      	ldr	r3, [r3, #32]
 800c7bc:	f023 0210 	bic.w	r2, r3, #16
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	699b      	ldr	r3, [r3, #24]
 800c7c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c7ca:	693b      	ldr	r3, [r7, #16]
 800c7cc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800c7d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	031b      	lsls	r3, r3, #12
 800c7d6:	693a      	ldr	r2, [r7, #16]
 800c7d8:	4313      	orrs	r3, r2
 800c7da:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c7dc:	697b      	ldr	r3, [r7, #20]
 800c7de:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800c7e2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c7e4:	68bb      	ldr	r3, [r7, #8]
 800c7e6:	011b      	lsls	r3, r3, #4
 800c7e8:	697a      	ldr	r2, [r7, #20]
 800c7ea:	4313      	orrs	r3, r2
 800c7ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	693a      	ldr	r2, [r7, #16]
 800c7f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	697a      	ldr	r2, [r7, #20]
 800c7f8:	621a      	str	r2, [r3, #32]
}
 800c7fa:	bf00      	nop
 800c7fc:	371c      	adds	r7, #28
 800c7fe:	46bd      	mov	sp, r7
 800c800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c804:	4770      	bx	lr

0800c806 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c806:	b480      	push	{r7}
 800c808:	b085      	sub	sp, #20
 800c80a:	af00      	add	r7, sp, #0
 800c80c:	6078      	str	r0, [r7, #4]
 800c80e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	689b      	ldr	r3, [r3, #8]
 800c814:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c81c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c81e:	683a      	ldr	r2, [r7, #0]
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	4313      	orrs	r3, r2
 800c824:	f043 0307 	orr.w	r3, r3, #7
 800c828:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	68fa      	ldr	r2, [r7, #12]
 800c82e:	609a      	str	r2, [r3, #8]
}
 800c830:	bf00      	nop
 800c832:	3714      	adds	r7, #20
 800c834:	46bd      	mov	sp, r7
 800c836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c83a:	4770      	bx	lr

0800c83c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c83c:	b480      	push	{r7}
 800c83e:	b087      	sub	sp, #28
 800c840:	af00      	add	r7, sp, #0
 800c842:	60f8      	str	r0, [r7, #12]
 800c844:	60b9      	str	r1, [r7, #8]
 800c846:	607a      	str	r2, [r7, #4]
 800c848:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	689b      	ldr	r3, [r3, #8]
 800c84e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c850:	697b      	ldr	r3, [r7, #20]
 800c852:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c856:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c858:	683b      	ldr	r3, [r7, #0]
 800c85a:	021a      	lsls	r2, r3, #8
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	431a      	orrs	r2, r3
 800c860:	68bb      	ldr	r3, [r7, #8]
 800c862:	4313      	orrs	r3, r2
 800c864:	697a      	ldr	r2, [r7, #20]
 800c866:	4313      	orrs	r3, r2
 800c868:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	697a      	ldr	r2, [r7, #20]
 800c86e:	609a      	str	r2, [r3, #8]
}
 800c870:	bf00      	nop
 800c872:	371c      	adds	r7, #28
 800c874:	46bd      	mov	sp, r7
 800c876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c87a:	4770      	bx	lr

0800c87c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c87c:	b580      	push	{r7, lr}
 800c87e:	b086      	sub	sp, #24
 800c880:	af00      	add	r7, sp, #0
 800c882:	60f8      	str	r0, [r7, #12]
 800c884:	60b9      	str	r1, [r7, #8]
 800c886:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	4a2f      	ldr	r2, [pc, #188]	@ (800c948 <TIM_CCxChannelCmd+0xcc>)
 800c88c:	4293      	cmp	r3, r2
 800c88e:	d024      	beq.n	800c8da <TIM_CCxChannelCmd+0x5e>
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c896:	d020      	beq.n	800c8da <TIM_CCxChannelCmd+0x5e>
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	4a2c      	ldr	r2, [pc, #176]	@ (800c94c <TIM_CCxChannelCmd+0xd0>)
 800c89c:	4293      	cmp	r3, r2
 800c89e:	d01c      	beq.n	800c8da <TIM_CCxChannelCmd+0x5e>
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	4a2b      	ldr	r2, [pc, #172]	@ (800c950 <TIM_CCxChannelCmd+0xd4>)
 800c8a4:	4293      	cmp	r3, r2
 800c8a6:	d018      	beq.n	800c8da <TIM_CCxChannelCmd+0x5e>
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	4a2a      	ldr	r2, [pc, #168]	@ (800c954 <TIM_CCxChannelCmd+0xd8>)
 800c8ac:	4293      	cmp	r3, r2
 800c8ae:	d014      	beq.n	800c8da <TIM_CCxChannelCmd+0x5e>
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	4a29      	ldr	r2, [pc, #164]	@ (800c958 <TIM_CCxChannelCmd+0xdc>)
 800c8b4:	4293      	cmp	r3, r2
 800c8b6:	d010      	beq.n	800c8da <TIM_CCxChannelCmd+0x5e>
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	4a28      	ldr	r2, [pc, #160]	@ (800c95c <TIM_CCxChannelCmd+0xe0>)
 800c8bc:	4293      	cmp	r3, r2
 800c8be:	d00c      	beq.n	800c8da <TIM_CCxChannelCmd+0x5e>
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	4a27      	ldr	r2, [pc, #156]	@ (800c960 <TIM_CCxChannelCmd+0xe4>)
 800c8c4:	4293      	cmp	r3, r2
 800c8c6:	d008      	beq.n	800c8da <TIM_CCxChannelCmd+0x5e>
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	4a26      	ldr	r2, [pc, #152]	@ (800c964 <TIM_CCxChannelCmd+0xe8>)
 800c8cc:	4293      	cmp	r3, r2
 800c8ce:	d004      	beq.n	800c8da <TIM_CCxChannelCmd+0x5e>
 800c8d0:	f641 61ac 	movw	r1, #7852	@ 0x1eac
 800c8d4:	4824      	ldr	r0, [pc, #144]	@ (800c968 <TIM_CCxChannelCmd+0xec>)
 800c8d6:	f7f8 f955 	bl	8004b84 <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 800c8da:	68bb      	ldr	r3, [r7, #8]
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d016      	beq.n	800c90e <TIM_CCxChannelCmd+0x92>
 800c8e0:	68bb      	ldr	r3, [r7, #8]
 800c8e2:	2b04      	cmp	r3, #4
 800c8e4:	d013      	beq.n	800c90e <TIM_CCxChannelCmd+0x92>
 800c8e6:	68bb      	ldr	r3, [r7, #8]
 800c8e8:	2b08      	cmp	r3, #8
 800c8ea:	d010      	beq.n	800c90e <TIM_CCxChannelCmd+0x92>
 800c8ec:	68bb      	ldr	r3, [r7, #8]
 800c8ee:	2b0c      	cmp	r3, #12
 800c8f0:	d00d      	beq.n	800c90e <TIM_CCxChannelCmd+0x92>
 800c8f2:	68bb      	ldr	r3, [r7, #8]
 800c8f4:	2b10      	cmp	r3, #16
 800c8f6:	d00a      	beq.n	800c90e <TIM_CCxChannelCmd+0x92>
 800c8f8:	68bb      	ldr	r3, [r7, #8]
 800c8fa:	2b14      	cmp	r3, #20
 800c8fc:	d007      	beq.n	800c90e <TIM_CCxChannelCmd+0x92>
 800c8fe:	68bb      	ldr	r3, [r7, #8]
 800c900:	2b3c      	cmp	r3, #60	@ 0x3c
 800c902:	d004      	beq.n	800c90e <TIM_CCxChannelCmd+0x92>
 800c904:	f641 61ad 	movw	r1, #7853	@ 0x1ead
 800c908:	4817      	ldr	r0, [pc, #92]	@ (800c968 <TIM_CCxChannelCmd+0xec>)
 800c90a:	f7f8 f93b 	bl	8004b84 <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c90e:	68bb      	ldr	r3, [r7, #8]
 800c910:	f003 031f 	and.w	r3, r3, #31
 800c914:	2201      	movs	r2, #1
 800c916:	fa02 f303 	lsl.w	r3, r2, r3
 800c91a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	6a1a      	ldr	r2, [r3, #32]
 800c920:	697b      	ldr	r3, [r7, #20]
 800c922:	43db      	mvns	r3, r3
 800c924:	401a      	ands	r2, r3
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	6a1a      	ldr	r2, [r3, #32]
 800c92e:	68bb      	ldr	r3, [r7, #8]
 800c930:	f003 031f 	and.w	r3, r3, #31
 800c934:	6879      	ldr	r1, [r7, #4]
 800c936:	fa01 f303 	lsl.w	r3, r1, r3
 800c93a:	431a      	orrs	r2, r3
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	621a      	str	r2, [r3, #32]
}
 800c940:	bf00      	nop
 800c942:	3718      	adds	r7, #24
 800c944:	46bd      	mov	sp, r7
 800c946:	bd80      	pop	{r7, pc}
 800c948:	40012c00 	.word	0x40012c00
 800c94c:	40000400 	.word	0x40000400
 800c950:	40000800 	.word	0x40000800
 800c954:	40000c00 	.word	0x40000c00
 800c958:	40013400 	.word	0x40013400
 800c95c:	40014000 	.word	0x40014000
 800c960:	40014400 	.word	0x40014400
 800c964:	40014800 	.word	0x40014800
 800c968:	0800fa34 	.word	0x0800fa34

0800c96c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c96c:	b580      	push	{r7, lr}
 800c96e:	b084      	sub	sp, #16
 800c970:	af00      	add	r7, sp, #0
 800c972:	6078      	str	r0, [r7, #4]
 800c974:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	4a34      	ldr	r2, [pc, #208]	@ (800ca4c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800c97c:	4293      	cmp	r3, r2
 800c97e:	d02c      	beq.n	800c9da <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c988:	d027      	beq.n	800c9da <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	4a30      	ldr	r2, [pc, #192]	@ (800ca50 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800c990:	4293      	cmp	r3, r2
 800c992:	d022      	beq.n	800c9da <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	4a2e      	ldr	r2, [pc, #184]	@ (800ca54 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800c99a:	4293      	cmp	r3, r2
 800c99c:	d01d      	beq.n	800c9da <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	4a2d      	ldr	r2, [pc, #180]	@ (800ca58 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800c9a4:	4293      	cmp	r3, r2
 800c9a6:	d018      	beq.n	800c9da <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	4a2b      	ldr	r2, [pc, #172]	@ (800ca5c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800c9ae:	4293      	cmp	r3, r2
 800c9b0:	d013      	beq.n	800c9da <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	4a2a      	ldr	r2, [pc, #168]	@ (800ca60 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800c9b8:	4293      	cmp	r3, r2
 800c9ba:	d00e      	beq.n	800c9da <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	4a28      	ldr	r2, [pc, #160]	@ (800ca64 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800c9c2:	4293      	cmp	r3, r2
 800c9c4:	d009      	beq.n	800c9da <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	4a27      	ldr	r2, [pc, #156]	@ (800ca68 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800c9cc:	4293      	cmp	r3, r2
 800c9ce:	d004      	beq.n	800c9da <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800c9d0:	f240 71ac 	movw	r1, #1964	@ 0x7ac
 800c9d4:	4825      	ldr	r0, [pc, #148]	@ (800ca6c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c9d6:	f7f8 f8d5 	bl	8004b84 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800c9da:	683b      	ldr	r3, [r7, #0]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d020      	beq.n	800ca24 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800c9e2:	683b      	ldr	r3, [r7, #0]
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	2b10      	cmp	r3, #16
 800c9e8:	d01c      	beq.n	800ca24 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800c9ea:	683b      	ldr	r3, [r7, #0]
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	2b20      	cmp	r3, #32
 800c9f0:	d018      	beq.n	800ca24 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800c9f2:	683b      	ldr	r3, [r7, #0]
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	2b30      	cmp	r3, #48	@ 0x30
 800c9f8:	d014      	beq.n	800ca24 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800c9fa:	683b      	ldr	r3, [r7, #0]
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	2b40      	cmp	r3, #64	@ 0x40
 800ca00:	d010      	beq.n	800ca24 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800ca02:	683b      	ldr	r3, [r7, #0]
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	2b50      	cmp	r3, #80	@ 0x50
 800ca08:	d00c      	beq.n	800ca24 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800ca0a:	683b      	ldr	r3, [r7, #0]
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	2b60      	cmp	r3, #96	@ 0x60
 800ca10:	d008      	beq.n	800ca24 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800ca12:	683b      	ldr	r3, [r7, #0]
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	2b70      	cmp	r3, #112	@ 0x70
 800ca18:	d004      	beq.n	800ca24 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800ca1a:	f240 71ad 	movw	r1, #1965	@ 0x7ad
 800ca1e:	4813      	ldr	r0, [pc, #76]	@ (800ca6c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ca20:	f7f8 f8b0 	bl	8004b84 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800ca24:	683b      	ldr	r3, [r7, #0]
 800ca26:	689b      	ldr	r3, [r3, #8]
 800ca28:	2b80      	cmp	r3, #128	@ 0x80
 800ca2a:	d008      	beq.n	800ca3e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
 800ca2c:	683b      	ldr	r3, [r7, #0]
 800ca2e:	689b      	ldr	r3, [r3, #8]
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d004      	beq.n	800ca3e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
 800ca34:	f240 71ae 	movw	r1, #1966	@ 0x7ae
 800ca38:	480c      	ldr	r0, [pc, #48]	@ (800ca6c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ca3a:	f7f8 f8a3 	bl	8004b84 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ca44:	2b01      	cmp	r3, #1
 800ca46:	d113      	bne.n	800ca70 <HAL_TIMEx_MasterConfigSynchronization+0x104>
 800ca48:	2302      	movs	r3, #2
 800ca4a:	e0d3      	b.n	800cbf4 <HAL_TIMEx_MasterConfigSynchronization+0x288>
 800ca4c:	40012c00 	.word	0x40012c00
 800ca50:	40000400 	.word	0x40000400
 800ca54:	40000800 	.word	0x40000800
 800ca58:	40000c00 	.word	0x40000c00
 800ca5c:	40001000 	.word	0x40001000
 800ca60:	40001400 	.word	0x40001400
 800ca64:	40013400 	.word	0x40013400
 800ca68:	40014000 	.word	0x40014000
 800ca6c:	0800fa6c 	.word	0x0800fa6c
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	2201      	movs	r2, #1
 800ca74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	2202      	movs	r2, #2
 800ca7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	685b      	ldr	r3, [r3, #4]
 800ca86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	689b      	ldr	r3, [r3, #8]
 800ca8e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	4a59      	ldr	r2, [pc, #356]	@ (800cbfc <HAL_TIMEx_MasterConfigSynchronization+0x290>)
 800ca96:	4293      	cmp	r3, r2
 800ca98:	d004      	beq.n	800caa4 <HAL_TIMEx_MasterConfigSynchronization+0x138>
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	4a58      	ldr	r2, [pc, #352]	@ (800cc00 <HAL_TIMEx_MasterConfigSynchronization+0x294>)
 800caa0:	4293      	cmp	r3, r2
 800caa2:	d161      	bne.n	800cb68 <HAL_TIMEx_MasterConfigSynchronization+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 800caa4:	683b      	ldr	r3, [r7, #0]
 800caa6:	685b      	ldr	r3, [r3, #4]
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d054      	beq.n	800cb56 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800caac:	683b      	ldr	r3, [r7, #0]
 800caae:	685b      	ldr	r3, [r3, #4]
 800cab0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cab4:	d04f      	beq.n	800cb56 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800cab6:	683b      	ldr	r3, [r7, #0]
 800cab8:	685b      	ldr	r3, [r3, #4]
 800caba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800cabe:	d04a      	beq.n	800cb56 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800cac0:	683b      	ldr	r3, [r7, #0]
 800cac2:	685b      	ldr	r3, [r3, #4]
 800cac4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800cac8:	d045      	beq.n	800cb56 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800caca:	683b      	ldr	r3, [r7, #0]
 800cacc:	685b      	ldr	r3, [r3, #4]
 800cace:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800cad2:	d040      	beq.n	800cb56 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800cad4:	683b      	ldr	r3, [r7, #0]
 800cad6:	685b      	ldr	r3, [r3, #4]
 800cad8:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 800cadc:	d03b      	beq.n	800cb56 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800cade:	683b      	ldr	r3, [r7, #0]
 800cae0:	685b      	ldr	r3, [r3, #4]
 800cae2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800cae6:	d036      	beq.n	800cb56 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800cae8:	683b      	ldr	r3, [r7, #0]
 800caea:	685b      	ldr	r3, [r3, #4]
 800caec:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800caf0:	d031      	beq.n	800cb56 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800caf2:	683b      	ldr	r3, [r7, #0]
 800caf4:	685b      	ldr	r3, [r3, #4]
 800caf6:	f5b3 0fe0 	cmp.w	r3, #7340032	@ 0x700000
 800cafa:	d02c      	beq.n	800cb56 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800cafc:	683b      	ldr	r3, [r7, #0]
 800cafe:	685b      	ldr	r3, [r3, #4]
 800cb00:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800cb04:	d027      	beq.n	800cb56 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800cb06:	683b      	ldr	r3, [r7, #0]
 800cb08:	685b      	ldr	r3, [r3, #4]
 800cb0a:	f5b3 0f10 	cmp.w	r3, #9437184	@ 0x900000
 800cb0e:	d022      	beq.n	800cb56 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800cb10:	683b      	ldr	r3, [r7, #0]
 800cb12:	685b      	ldr	r3, [r3, #4]
 800cb14:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800cb18:	d01d      	beq.n	800cb56 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800cb1a:	683b      	ldr	r3, [r7, #0]
 800cb1c:	685b      	ldr	r3, [r3, #4]
 800cb1e:	f5b3 0f30 	cmp.w	r3, #11534336	@ 0xb00000
 800cb22:	d018      	beq.n	800cb56 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800cb24:	683b      	ldr	r3, [r7, #0]
 800cb26:	685b      	ldr	r3, [r3, #4]
 800cb28:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800cb2c:	d013      	beq.n	800cb56 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800cb2e:	683b      	ldr	r3, [r7, #0]
 800cb30:	685b      	ldr	r3, [r3, #4]
 800cb32:	f5b3 0f50 	cmp.w	r3, #13631488	@ 0xd00000
 800cb36:	d00e      	beq.n	800cb56 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800cb38:	683b      	ldr	r3, [r7, #0]
 800cb3a:	685b      	ldr	r3, [r3, #4]
 800cb3c:	f5b3 0f60 	cmp.w	r3, #14680064	@ 0xe00000
 800cb40:	d009      	beq.n	800cb56 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800cb42:	683b      	ldr	r3, [r7, #0]
 800cb44:	685b      	ldr	r3, [r3, #4]
 800cb46:	f5b3 0f70 	cmp.w	r3, #15728640	@ 0xf00000
 800cb4a:	d004      	beq.n	800cb56 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800cb4c:	f44f 61f8 	mov.w	r1, #1984	@ 0x7c0
 800cb50:	482c      	ldr	r0, [pc, #176]	@ (800cc04 <HAL_TIMEx_MasterConfigSynchronization+0x298>)
 800cb52:	f7f8 f817 	bl	8004b84 <assert_failed>

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800cb5c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800cb5e:	683b      	ldr	r3, [r7, #0]
 800cb60:	685b      	ldr	r3, [r3, #4]
 800cb62:	68fa      	ldr	r2, [r7, #12]
 800cb64:	4313      	orrs	r3, r2
 800cb66:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cb6e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cb70:	683b      	ldr	r3, [r7, #0]
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	68fa      	ldr	r2, [r7, #12]
 800cb76:	4313      	orrs	r3, r2
 800cb78:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	68fa      	ldr	r2, [r7, #12]
 800cb80:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	4a1d      	ldr	r2, [pc, #116]	@ (800cbfc <HAL_TIMEx_MasterConfigSynchronization+0x290>)
 800cb88:	4293      	cmp	r3, r2
 800cb8a:	d01d      	beq.n	800cbc8 <HAL_TIMEx_MasterConfigSynchronization+0x25c>
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cb94:	d018      	beq.n	800cbc8 <HAL_TIMEx_MasterConfigSynchronization+0x25c>
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	4a1b      	ldr	r2, [pc, #108]	@ (800cc08 <HAL_TIMEx_MasterConfigSynchronization+0x29c>)
 800cb9c:	4293      	cmp	r3, r2
 800cb9e:	d013      	beq.n	800cbc8 <HAL_TIMEx_MasterConfigSynchronization+0x25c>
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	4a19      	ldr	r2, [pc, #100]	@ (800cc0c <HAL_TIMEx_MasterConfigSynchronization+0x2a0>)
 800cba6:	4293      	cmp	r3, r2
 800cba8:	d00e      	beq.n	800cbc8 <HAL_TIMEx_MasterConfigSynchronization+0x25c>
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	4a18      	ldr	r2, [pc, #96]	@ (800cc10 <HAL_TIMEx_MasterConfigSynchronization+0x2a4>)
 800cbb0:	4293      	cmp	r3, r2
 800cbb2:	d009      	beq.n	800cbc8 <HAL_TIMEx_MasterConfigSynchronization+0x25c>
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	4a11      	ldr	r2, [pc, #68]	@ (800cc00 <HAL_TIMEx_MasterConfigSynchronization+0x294>)
 800cbba:	4293      	cmp	r3, r2
 800cbbc:	d004      	beq.n	800cbc8 <HAL_TIMEx_MasterConfigSynchronization+0x25c>
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	4a14      	ldr	r2, [pc, #80]	@ (800cc14 <HAL_TIMEx_MasterConfigSynchronization+0x2a8>)
 800cbc4:	4293      	cmp	r3, r2
 800cbc6:	d10c      	bne.n	800cbe2 <HAL_TIMEx_MasterConfigSynchronization+0x276>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cbc8:	68bb      	ldr	r3, [r7, #8]
 800cbca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cbce:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cbd0:	683b      	ldr	r3, [r7, #0]
 800cbd2:	689b      	ldr	r3, [r3, #8]
 800cbd4:	68ba      	ldr	r2, [r7, #8]
 800cbd6:	4313      	orrs	r3, r2
 800cbd8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	68ba      	ldr	r2, [r7, #8]
 800cbe0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	2201      	movs	r2, #1
 800cbe6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	2200      	movs	r2, #0
 800cbee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800cbf2:	2300      	movs	r3, #0
}
 800cbf4:	4618      	mov	r0, r3
 800cbf6:	3710      	adds	r7, #16
 800cbf8:	46bd      	mov	sp, r7
 800cbfa:	bd80      	pop	{r7, pc}
 800cbfc:	40012c00 	.word	0x40012c00
 800cc00:	40013400 	.word	0x40013400
 800cc04:	0800fa6c 	.word	0x0800fa6c
 800cc08:	40000400 	.word	0x40000400
 800cc0c:	40000800 	.word	0x40000800
 800cc10:	40000c00 	.word	0x40000c00
 800cc14:	40014000 	.word	0x40014000

0800cc18 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800cc18:	b580      	push	{r7, lr}
 800cc1a:	b084      	sub	sp, #16
 800cc1c:	af00      	add	r7, sp, #0
 800cc1e:	6078      	str	r0, [r7, #4]
 800cc20:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800cc22:	2300      	movs	r3, #0
 800cc24:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	4a91      	ldr	r2, [pc, #580]	@ (800ce70 <HAL_TIMEx_ConfigBreakDeadTime+0x258>)
 800cc2c:	4293      	cmp	r3, r2
 800cc2e:	d018      	beq.n	800cc62 <HAL_TIMEx_ConfigBreakDeadTime+0x4a>
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	4a8f      	ldr	r2, [pc, #572]	@ (800ce74 <HAL_TIMEx_ConfigBreakDeadTime+0x25c>)
 800cc36:	4293      	cmp	r3, r2
 800cc38:	d013      	beq.n	800cc62 <HAL_TIMEx_ConfigBreakDeadTime+0x4a>
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	4a8e      	ldr	r2, [pc, #568]	@ (800ce78 <HAL_TIMEx_ConfigBreakDeadTime+0x260>)
 800cc40:	4293      	cmp	r3, r2
 800cc42:	d00e      	beq.n	800cc62 <HAL_TIMEx_ConfigBreakDeadTime+0x4a>
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	4a8c      	ldr	r2, [pc, #560]	@ (800ce7c <HAL_TIMEx_ConfigBreakDeadTime+0x264>)
 800cc4a:	4293      	cmp	r3, r2
 800cc4c:	d009      	beq.n	800cc62 <HAL_TIMEx_ConfigBreakDeadTime+0x4a>
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	4a8b      	ldr	r2, [pc, #556]	@ (800ce80 <HAL_TIMEx_ConfigBreakDeadTime+0x268>)
 800cc54:	4293      	cmp	r3, r2
 800cc56:	d004      	beq.n	800cc62 <HAL_TIMEx_ConfigBreakDeadTime+0x4a>
 800cc58:	f240 71f5 	movw	r1, #2037	@ 0x7f5
 800cc5c:	4889      	ldr	r0, [pc, #548]	@ (800ce84 <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 800cc5e:	f7f7 ff91 	bl	8004b84 <assert_failed>
  assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
 800cc62:	683b      	ldr	r3, [r7, #0]
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cc6a:	d008      	beq.n	800cc7e <HAL_TIMEx_ConfigBreakDeadTime+0x66>
 800cc6c:	683b      	ldr	r3, [r7, #0]
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d004      	beq.n	800cc7e <HAL_TIMEx_ConfigBreakDeadTime+0x66>
 800cc74:	f240 71f6 	movw	r1, #2038	@ 0x7f6
 800cc78:	4882      	ldr	r0, [pc, #520]	@ (800ce84 <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 800cc7a:	f7f7 ff83 	bl	8004b84 <assert_failed>
  assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
 800cc7e:	683b      	ldr	r3, [r7, #0]
 800cc80:	685b      	ldr	r3, [r3, #4]
 800cc82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cc86:	d008      	beq.n	800cc9a <HAL_TIMEx_ConfigBreakDeadTime+0x82>
 800cc88:	683b      	ldr	r3, [r7, #0]
 800cc8a:	685b      	ldr	r3, [r3, #4]
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d004      	beq.n	800cc9a <HAL_TIMEx_ConfigBreakDeadTime+0x82>
 800cc90:	f240 71f7 	movw	r1, #2039	@ 0x7f7
 800cc94:	487b      	ldr	r0, [pc, #492]	@ (800ce84 <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 800cc96:	f7f7 ff75 	bl	8004b84 <assert_failed>
  assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
 800cc9a:	683b      	ldr	r3, [r7, #0]
 800cc9c:	689b      	ldr	r3, [r3, #8]
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d013      	beq.n	800ccca <HAL_TIMEx_ConfigBreakDeadTime+0xb2>
 800cca2:	683b      	ldr	r3, [r7, #0]
 800cca4:	689b      	ldr	r3, [r3, #8]
 800cca6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ccaa:	d00e      	beq.n	800ccca <HAL_TIMEx_ConfigBreakDeadTime+0xb2>
 800ccac:	683b      	ldr	r3, [r7, #0]
 800ccae:	689b      	ldr	r3, [r3, #8]
 800ccb0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ccb4:	d009      	beq.n	800ccca <HAL_TIMEx_ConfigBreakDeadTime+0xb2>
 800ccb6:	683b      	ldr	r3, [r7, #0]
 800ccb8:	689b      	ldr	r3, [r3, #8]
 800ccba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ccbe:	d004      	beq.n	800ccca <HAL_TIMEx_ConfigBreakDeadTime+0xb2>
 800ccc0:	f44f 61ff 	mov.w	r1, #2040	@ 0x7f8
 800ccc4:	486f      	ldr	r0, [pc, #444]	@ (800ce84 <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 800ccc6:	f7f7 ff5d 	bl	8004b84 <assert_failed>
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
 800ccca:	683b      	ldr	r3, [r7, #0]
 800cccc:	68db      	ldr	r3, [r3, #12]
 800ccce:	2bff      	cmp	r3, #255	@ 0xff
 800ccd0:	d904      	bls.n	800ccdc <HAL_TIMEx_ConfigBreakDeadTime+0xc4>
 800ccd2:	f240 71f9 	movw	r1, #2041	@ 0x7f9
 800ccd6:	486b      	ldr	r0, [pc, #428]	@ (800ce84 <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 800ccd8:	f7f7 ff54 	bl	8004b84 <assert_failed>
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
 800ccdc:	683b      	ldr	r3, [r7, #0]
 800ccde:	691b      	ldr	r3, [r3, #16]
 800cce0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cce4:	d008      	beq.n	800ccf8 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800cce6:	683b      	ldr	r3, [r7, #0]
 800cce8:	691b      	ldr	r3, [r3, #16]
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d004      	beq.n	800ccf8 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800ccee:	f240 71fa 	movw	r1, #2042	@ 0x7fa
 800ccf2:	4864      	ldr	r0, [pc, #400]	@ (800ce84 <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 800ccf4:	f7f7 ff46 	bl	8004b84 <assert_failed>
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
 800ccf8:	683b      	ldr	r3, [r7, #0]
 800ccfa:	695b      	ldr	r3, [r3, #20]
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d009      	beq.n	800cd14 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 800cd00:	683b      	ldr	r3, [r7, #0]
 800cd02:	695b      	ldr	r3, [r3, #20]
 800cd04:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cd08:	d004      	beq.n	800cd14 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 800cd0a:	f240 71fb 	movw	r1, #2043	@ 0x7fb
 800cd0e:	485d      	ldr	r0, [pc, #372]	@ (800ce84 <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 800cd10:	f7f7 ff38 	bl	8004b84 <assert_failed>
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
 800cd14:	683b      	ldr	r3, [r7, #0]
 800cd16:	699b      	ldr	r3, [r3, #24]
 800cd18:	2b0f      	cmp	r3, #15
 800cd1a:	d904      	bls.n	800cd26 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800cd1c:	f240 71fc 	movw	r1, #2044	@ 0x7fc
 800cd20:	4858      	ldr	r0, [pc, #352]	@ (800ce84 <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 800cd22:	f7f7 ff2f 	bl	8004b84 <assert_failed>
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
 800cd26:	683b      	ldr	r3, [r7, #0]
 800cd28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd2a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800cd2e:	d008      	beq.n	800cd42 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800cd30:	683b      	ldr	r3, [r7, #0]
 800cd32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d004      	beq.n	800cd42 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800cd38:	f240 71fd 	movw	r1, #2045	@ 0x7fd
 800cd3c:	4851      	ldr	r0, [pc, #324]	@ (800ce84 <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 800cd3e:	f7f7 ff21 	bl	8004b84 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800cd48:	2b01      	cmp	r3, #1
 800cd4a:	d101      	bne.n	800cd50 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
 800cd4c:	2302      	movs	r3, #2
 800cd4e:	e08a      	b.n	800ce66 <HAL_TIMEx_ConfigBreakDeadTime+0x24e>
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	2201      	movs	r2, #1
 800cd54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800cd5e:	683b      	ldr	r3, [r7, #0]
 800cd60:	68db      	ldr	r3, [r3, #12]
 800cd62:	4313      	orrs	r3, r2
 800cd64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800cd6c:	683b      	ldr	r3, [r7, #0]
 800cd6e:	689b      	ldr	r3, [r3, #8]
 800cd70:	4313      	orrs	r3, r2
 800cd72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800cd7a:	683b      	ldr	r3, [r7, #0]
 800cd7c:	685b      	ldr	r3, [r3, #4]
 800cd7e:	4313      	orrs	r3, r2
 800cd80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800cd88:	683b      	ldr	r3, [r7, #0]
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	4313      	orrs	r3, r2
 800cd8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800cd96:	683b      	ldr	r3, [r7, #0]
 800cd98:	691b      	ldr	r3, [r3, #16]
 800cd9a:	4313      	orrs	r3, r2
 800cd9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800cda4:	683b      	ldr	r3, [r7, #0]
 800cda6:	695b      	ldr	r3, [r3, #20]
 800cda8:	4313      	orrs	r3, r2
 800cdaa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800cdb2:	683b      	ldr	r3, [r7, #0]
 800cdb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cdb6:	4313      	orrs	r3, r2
 800cdb8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800cdc0:	683b      	ldr	r3, [r7, #0]
 800cdc2:	699b      	ldr	r3, [r3, #24]
 800cdc4:	041b      	lsls	r3, r3, #16
 800cdc6:	4313      	orrs	r3, r2
 800cdc8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	4a28      	ldr	r2, [pc, #160]	@ (800ce70 <HAL_TIMEx_ConfigBreakDeadTime+0x258>)
 800cdd0:	4293      	cmp	r3, r2
 800cdd2:	d004      	beq.n	800cdde <HAL_TIMEx_ConfigBreakDeadTime+0x1c6>
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	4a26      	ldr	r2, [pc, #152]	@ (800ce74 <HAL_TIMEx_ConfigBreakDeadTime+0x25c>)
 800cdda:	4293      	cmp	r3, r2
 800cddc:	d13a      	bne.n	800ce54 <HAL_TIMEx_ConfigBreakDeadTime+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
 800cdde:	683b      	ldr	r3, [r7, #0]
 800cde0:	69db      	ldr	r3, [r3, #28]
 800cde2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cde6:	d008      	beq.n	800cdfa <HAL_TIMEx_ConfigBreakDeadTime+0x1e2>
 800cde8:	683b      	ldr	r3, [r7, #0]
 800cdea:	69db      	ldr	r3, [r3, #28]
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d004      	beq.n	800cdfa <HAL_TIMEx_ConfigBreakDeadTime+0x1e2>
 800cdf0:	f640 0112 	movw	r1, #2066	@ 0x812
 800cdf4:	4823      	ldr	r0, [pc, #140]	@ (800ce84 <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 800cdf6:	f7f7 fec5 	bl	8004b84 <assert_failed>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
 800cdfa:	683b      	ldr	r3, [r7, #0]
 800cdfc:	6a1b      	ldr	r3, [r3, #32]
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d009      	beq.n	800ce16 <HAL_TIMEx_ConfigBreakDeadTime+0x1fe>
 800ce02:	683b      	ldr	r3, [r7, #0]
 800ce04:	6a1b      	ldr	r3, [r3, #32]
 800ce06:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ce0a:	d004      	beq.n	800ce16 <HAL_TIMEx_ConfigBreakDeadTime+0x1fe>
 800ce0c:	f640 0113 	movw	r1, #2067	@ 0x813
 800ce10:	481c      	ldr	r0, [pc, #112]	@ (800ce84 <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 800ce12:	f7f7 feb7 	bl	8004b84 <assert_failed>
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
 800ce16:	683b      	ldr	r3, [r7, #0]
 800ce18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce1a:	2b0f      	cmp	r3, #15
 800ce1c:	d904      	bls.n	800ce28 <HAL_TIMEx_ConfigBreakDeadTime+0x210>
 800ce1e:	f640 0114 	movw	r1, #2068	@ 0x814
 800ce22:	4818      	ldr	r0, [pc, #96]	@ (800ce84 <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 800ce24:	f7f7 feae 	bl	8004b84 <assert_failed>

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800ce2e:	683b      	ldr	r3, [r7, #0]
 800ce30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce32:	051b      	lsls	r3, r3, #20
 800ce34:	4313      	orrs	r3, r2
 800ce36:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800ce3e:	683b      	ldr	r3, [r7, #0]
 800ce40:	69db      	ldr	r3, [r3, #28]
 800ce42:	4313      	orrs	r3, r2
 800ce44:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800ce4c:	683b      	ldr	r3, [r7, #0]
 800ce4e:	6a1b      	ldr	r3, [r3, #32]
 800ce50:	4313      	orrs	r3, r2
 800ce52:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	68fa      	ldr	r2, [r7, #12]
 800ce5a:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	2200      	movs	r2, #0
 800ce60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ce64:	2300      	movs	r3, #0
}
 800ce66:	4618      	mov	r0, r3
 800ce68:	3710      	adds	r7, #16
 800ce6a:	46bd      	mov	sp, r7
 800ce6c:	bd80      	pop	{r7, pc}
 800ce6e:	bf00      	nop
 800ce70:	40012c00 	.word	0x40012c00
 800ce74:	40013400 	.word	0x40013400
 800ce78:	40014000 	.word	0x40014000
 800ce7c:	40014400 	.word	0x40014400
 800ce80:	40014800 	.word	0x40014800
 800ce84:	0800fa6c 	.word	0x0800fa6c

0800ce88 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ce88:	b480      	push	{r7}
 800ce8a:	b083      	sub	sp, #12
 800ce8c:	af00      	add	r7, sp, #0
 800ce8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ce90:	bf00      	nop
 800ce92:	370c      	adds	r7, #12
 800ce94:	46bd      	mov	sp, r7
 800ce96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce9a:	4770      	bx	lr

0800ce9c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ce9c:	b480      	push	{r7}
 800ce9e:	b083      	sub	sp, #12
 800cea0:	af00      	add	r7, sp, #0
 800cea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800cea4:	bf00      	nop
 800cea6:	370c      	adds	r7, #12
 800cea8:	46bd      	mov	sp, r7
 800ceaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceae:	4770      	bx	lr

0800ceb0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ceb0:	b480      	push	{r7}
 800ceb2:	b083      	sub	sp, #12
 800ceb4:	af00      	add	r7, sp, #0
 800ceb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ceb8:	bf00      	nop
 800ceba:	370c      	adds	r7, #12
 800cebc:	46bd      	mov	sp, r7
 800cebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cec2:	4770      	bx	lr

0800cec4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cec4:	b580      	push	{r7, lr}
 800cec6:	b082      	sub	sp, #8
 800cec8:	af00      	add	r7, sp, #0
 800ceca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d101      	bne.n	800ced6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ced2:	2301      	movs	r3, #1
 800ced4:	e08b      	b.n	800cfee <HAL_UART_Init+0x12a>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	699b      	ldr	r3, [r3, #24]
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d023      	beq.n	800cf26 <HAL_UART_Init+0x62>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	4a45      	ldr	r2, [pc, #276]	@ (800cff8 <HAL_UART_Init+0x134>)
 800cee4:	4293      	cmp	r3, r2
 800cee6:	d041      	beq.n	800cf6c <HAL_UART_Init+0xa8>
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	4a43      	ldr	r2, [pc, #268]	@ (800cffc <HAL_UART_Init+0x138>)
 800ceee:	4293      	cmp	r3, r2
 800cef0:	d03c      	beq.n	800cf6c <HAL_UART_Init+0xa8>
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	4a42      	ldr	r2, [pc, #264]	@ (800d000 <HAL_UART_Init+0x13c>)
 800cef8:	4293      	cmp	r3, r2
 800cefa:	d037      	beq.n	800cf6c <HAL_UART_Init+0xa8>
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	4a40      	ldr	r2, [pc, #256]	@ (800d004 <HAL_UART_Init+0x140>)
 800cf02:	4293      	cmp	r3, r2
 800cf04:	d032      	beq.n	800cf6c <HAL_UART_Init+0xa8>
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	4a3f      	ldr	r2, [pc, #252]	@ (800d008 <HAL_UART_Init+0x144>)
 800cf0c:	4293      	cmp	r3, r2
 800cf0e:	d02d      	beq.n	800cf6c <HAL_UART_Init+0xa8>
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	4a3d      	ldr	r2, [pc, #244]	@ (800d00c <HAL_UART_Init+0x148>)
 800cf16:	4293      	cmp	r3, r2
 800cf18:	d028      	beq.n	800cf6c <HAL_UART_Init+0xa8>
 800cf1a:	f44f 71a9 	mov.w	r1, #338	@ 0x152
 800cf1e:	483c      	ldr	r0, [pc, #240]	@ (800d010 <HAL_UART_Init+0x14c>)
 800cf20:	f7f7 fe30 	bl	8004b84 <assert_failed>
 800cf24:	e022      	b.n	800cf6c <HAL_UART_Init+0xa8>
  }
  else
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	4a33      	ldr	r2, [pc, #204]	@ (800cff8 <HAL_UART_Init+0x134>)
 800cf2c:	4293      	cmp	r3, r2
 800cf2e:	d01d      	beq.n	800cf6c <HAL_UART_Init+0xa8>
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	4a31      	ldr	r2, [pc, #196]	@ (800cffc <HAL_UART_Init+0x138>)
 800cf36:	4293      	cmp	r3, r2
 800cf38:	d018      	beq.n	800cf6c <HAL_UART_Init+0xa8>
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	4a30      	ldr	r2, [pc, #192]	@ (800d000 <HAL_UART_Init+0x13c>)
 800cf40:	4293      	cmp	r3, r2
 800cf42:	d013      	beq.n	800cf6c <HAL_UART_Init+0xa8>
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	4a2e      	ldr	r2, [pc, #184]	@ (800d004 <HAL_UART_Init+0x140>)
 800cf4a:	4293      	cmp	r3, r2
 800cf4c:	d00e      	beq.n	800cf6c <HAL_UART_Init+0xa8>
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	4a2d      	ldr	r2, [pc, #180]	@ (800d008 <HAL_UART_Init+0x144>)
 800cf54:	4293      	cmp	r3, r2
 800cf56:	d009      	beq.n	800cf6c <HAL_UART_Init+0xa8>
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	4a2b      	ldr	r2, [pc, #172]	@ (800d00c <HAL_UART_Init+0x148>)
 800cf5e:	4293      	cmp	r3, r2
 800cf60:	d004      	beq.n	800cf6c <HAL_UART_Init+0xa8>
 800cf62:	f240 1157 	movw	r1, #343	@ 0x157
 800cf66:	482a      	ldr	r0, [pc, #168]	@ (800d010 <HAL_UART_Init+0x14c>)
 800cf68:	f7f7 fe0c 	bl	8004b84 <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d106      	bne.n	800cf82 <HAL_UART_Init+0xbe>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	2200      	movs	r2, #0
 800cf78:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cf7c:	6878      	ldr	r0, [r7, #4]
 800cf7e:	f7f8 fb3b 	bl	80055f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	2224      	movs	r2, #36	@ 0x24
 800cf86:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	681a      	ldr	r2, [r3, #0]
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	f022 0201 	bic.w	r2, r2, #1
 800cf96:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d002      	beq.n	800cfa6 <HAL_UART_Init+0xe2>
  {
    UART_AdvFeatureConfig(huart);
 800cfa0:	6878      	ldr	r0, [r7, #4]
 800cfa2:	f000 fc1f 	bl	800d7e4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800cfa6:	6878      	ldr	r0, [r7, #4]
 800cfa8:	f000 f8be 	bl	800d128 <UART_SetConfig>
 800cfac:	4603      	mov	r3, r0
 800cfae:	2b01      	cmp	r3, #1
 800cfb0:	d101      	bne.n	800cfb6 <HAL_UART_Init+0xf2>
  {
    return HAL_ERROR;
 800cfb2:	2301      	movs	r3, #1
 800cfb4:	e01b      	b.n	800cfee <HAL_UART_Init+0x12a>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	685a      	ldr	r2, [r3, #4]
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800cfc4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	689a      	ldr	r2, [r3, #8]
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800cfd4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	681a      	ldr	r2, [r3, #0]
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	f042 0201 	orr.w	r2, r2, #1
 800cfe4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800cfe6:	6878      	ldr	r0, [r7, #4]
 800cfe8:	f000 fd5c 	bl	800daa4 <UART_CheckIdleState>
 800cfec:	4603      	mov	r3, r0
}
 800cfee:	4618      	mov	r0, r3
 800cff0:	3708      	adds	r7, #8
 800cff2:	46bd      	mov	sp, r7
 800cff4:	bd80      	pop	{r7, pc}
 800cff6:	bf00      	nop
 800cff8:	40013800 	.word	0x40013800
 800cffc:	40004400 	.word	0x40004400
 800d000:	40004800 	.word	0x40004800
 800d004:	40004c00 	.word	0x40004c00
 800d008:	40005000 	.word	0x40005000
 800d00c:	40008000 	.word	0x40008000
 800d010:	0800faa8 	.word	0x0800faa8

0800d014 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d014:	b580      	push	{r7, lr}
 800d016:	b08a      	sub	sp, #40	@ 0x28
 800d018:	af02      	add	r7, sp, #8
 800d01a:	60f8      	str	r0, [r7, #12]
 800d01c:	60b9      	str	r1, [r7, #8]
 800d01e:	603b      	str	r3, [r7, #0]
 800d020:	4613      	mov	r3, r2
 800d022:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d028:	2b20      	cmp	r3, #32
 800d02a:	d177      	bne.n	800d11c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800d02c:	68bb      	ldr	r3, [r7, #8]
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d002      	beq.n	800d038 <HAL_UART_Transmit+0x24>
 800d032:	88fb      	ldrh	r3, [r7, #6]
 800d034:	2b00      	cmp	r3, #0
 800d036:	d101      	bne.n	800d03c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800d038:	2301      	movs	r3, #1
 800d03a:	e070      	b.n	800d11e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	2200      	movs	r2, #0
 800d040:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	2221      	movs	r2, #33	@ 0x21
 800d048:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d04a:	f7f8 fbc5 	bl	80057d8 <HAL_GetTick>
 800d04e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	88fa      	ldrh	r2, [r7, #6]
 800d054:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	88fa      	ldrh	r2, [r7, #6]
 800d05c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	689b      	ldr	r3, [r3, #8]
 800d064:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d068:	d108      	bne.n	800d07c <HAL_UART_Transmit+0x68>
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	691b      	ldr	r3, [r3, #16]
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d104      	bne.n	800d07c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800d072:	2300      	movs	r3, #0
 800d074:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800d076:	68bb      	ldr	r3, [r7, #8]
 800d078:	61bb      	str	r3, [r7, #24]
 800d07a:	e003      	b.n	800d084 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800d07c:	68bb      	ldr	r3, [r7, #8]
 800d07e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d080:	2300      	movs	r3, #0
 800d082:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800d084:	e02f      	b.n	800d0e6 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d086:	683b      	ldr	r3, [r7, #0]
 800d088:	9300      	str	r3, [sp, #0]
 800d08a:	697b      	ldr	r3, [r7, #20]
 800d08c:	2200      	movs	r2, #0
 800d08e:	2180      	movs	r1, #128	@ 0x80
 800d090:	68f8      	ldr	r0, [r7, #12]
 800d092:	f000 fdaf 	bl	800dbf4 <UART_WaitOnFlagUntilTimeout>
 800d096:	4603      	mov	r3, r0
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d004      	beq.n	800d0a6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	2220      	movs	r2, #32
 800d0a0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800d0a2:	2303      	movs	r3, #3
 800d0a4:	e03b      	b.n	800d11e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800d0a6:	69fb      	ldr	r3, [r7, #28]
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d10b      	bne.n	800d0c4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d0ac:	69bb      	ldr	r3, [r7, #24]
 800d0ae:	881a      	ldrh	r2, [r3, #0]
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d0b8:	b292      	uxth	r2, r2
 800d0ba:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800d0bc:	69bb      	ldr	r3, [r7, #24]
 800d0be:	3302      	adds	r3, #2
 800d0c0:	61bb      	str	r3, [r7, #24]
 800d0c2:	e007      	b.n	800d0d4 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800d0c4:	69fb      	ldr	r3, [r7, #28]
 800d0c6:	781a      	ldrb	r2, [r3, #0]
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800d0ce:	69fb      	ldr	r3, [r7, #28]
 800d0d0:	3301      	adds	r3, #1
 800d0d2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800d0da:	b29b      	uxth	r3, r3
 800d0dc:	3b01      	subs	r3, #1
 800d0de:	b29a      	uxth	r2, r3
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800d0ec:	b29b      	uxth	r3, r3
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d1c9      	bne.n	800d086 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d0f2:	683b      	ldr	r3, [r7, #0]
 800d0f4:	9300      	str	r3, [sp, #0]
 800d0f6:	697b      	ldr	r3, [r7, #20]
 800d0f8:	2200      	movs	r2, #0
 800d0fa:	2140      	movs	r1, #64	@ 0x40
 800d0fc:	68f8      	ldr	r0, [r7, #12]
 800d0fe:	f000 fd79 	bl	800dbf4 <UART_WaitOnFlagUntilTimeout>
 800d102:	4603      	mov	r3, r0
 800d104:	2b00      	cmp	r3, #0
 800d106:	d004      	beq.n	800d112 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	2220      	movs	r2, #32
 800d10c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800d10e:	2303      	movs	r3, #3
 800d110:	e005      	b.n	800d11e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	2220      	movs	r2, #32
 800d116:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800d118:	2300      	movs	r3, #0
 800d11a:	e000      	b.n	800d11e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800d11c:	2302      	movs	r3, #2
  }
}
 800d11e:	4618      	mov	r0, r3
 800d120:	3720      	adds	r7, #32
 800d122:	46bd      	mov	sp, r7
 800d124:	bd80      	pop	{r7, pc}
	...

0800d128 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d128:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d12c:	b08a      	sub	sp, #40	@ 0x28
 800d12e:	af00      	add	r7, sp, #0
 800d130:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d132:	2300      	movs	r3, #0
 800d134:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  uint32_t lpuart_ker_ck_pres;
#endif /* USART_PRESC_PRESCALER */
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	685b      	ldr	r3, [r3, #4]
 800d13c:	4a9e      	ldr	r2, [pc, #632]	@ (800d3b8 <UART_SetConfig+0x290>)
 800d13e:	4293      	cmp	r3, r2
 800d140:	d904      	bls.n	800d14c <UART_SetConfig+0x24>
 800d142:	f640 4158 	movw	r1, #3160	@ 0xc58
 800d146:	489d      	ldr	r0, [pc, #628]	@ (800d3bc <UART_SetConfig+0x294>)
 800d148:	f7f7 fd1c 	bl	8004b84 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	689b      	ldr	r3, [r3, #8]
 800d150:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d154:	d00d      	beq.n	800d172 <UART_SetConfig+0x4a>
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	689b      	ldr	r3, [r3, #8]
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d009      	beq.n	800d172 <UART_SetConfig+0x4a>
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	689b      	ldr	r3, [r3, #8]
 800d162:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d166:	d004      	beq.n	800d172 <UART_SetConfig+0x4a>
 800d168:	f640 4159 	movw	r1, #3161	@ 0xc59
 800d16c:	4893      	ldr	r0, [pc, #588]	@ (800d3bc <UART_SetConfig+0x294>)
 800d16e:	f7f7 fd09 	bl	8004b84 <assert_failed>
  if (UART_INSTANCE_LOWPOWER(huart))
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	4a92      	ldr	r2, [pc, #584]	@ (800d3c0 <UART_SetConfig+0x298>)
 800d178:	4293      	cmp	r3, r2
 800d17a:	d10e      	bne.n	800d19a <UART_SetConfig+0x72>
  {
    assert_param(IS_LPUART_STOPBITS(huart->Init.StopBits));
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	68db      	ldr	r3, [r3, #12]
 800d180:	2b00      	cmp	r3, #0
 800d182:	d030      	beq.n	800d1e6 <UART_SetConfig+0xbe>
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	68db      	ldr	r3, [r3, #12]
 800d188:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d18c:	d02b      	beq.n	800d1e6 <UART_SetConfig+0xbe>
 800d18e:	f640 415c 	movw	r1, #3164	@ 0xc5c
 800d192:	488a      	ldr	r0, [pc, #552]	@ (800d3bc <UART_SetConfig+0x294>)
 800d194:	f7f7 fcf6 	bl	8004b84 <assert_failed>
 800d198:	e025      	b.n	800d1e6 <UART_SetConfig+0xbe>
  }
  else
  {
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	68db      	ldr	r3, [r3, #12]
 800d19e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d1a2:	d012      	beq.n	800d1ca <UART_SetConfig+0xa2>
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	68db      	ldr	r3, [r3, #12]
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d00e      	beq.n	800d1ca <UART_SetConfig+0xa2>
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	68db      	ldr	r3, [r3, #12]
 800d1b0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800d1b4:	d009      	beq.n	800d1ca <UART_SetConfig+0xa2>
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	68db      	ldr	r3, [r3, #12]
 800d1ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d1be:	d004      	beq.n	800d1ca <UART_SetConfig+0xa2>
 800d1c0:	f44f 6146 	mov.w	r1, #3168	@ 0xc60
 800d1c4:	487d      	ldr	r0, [pc, #500]	@ (800d3bc <UART_SetConfig+0x294>)
 800d1c6:	f7f7 fcdd 	bl	8004b84 <assert_failed>
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	6a1b      	ldr	r3, [r3, #32]
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d009      	beq.n	800d1e6 <UART_SetConfig+0xbe>
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	6a1b      	ldr	r3, [r3, #32]
 800d1d6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d1da:	d004      	beq.n	800d1e6 <UART_SetConfig+0xbe>
 800d1dc:	f640 4161 	movw	r1, #3169	@ 0xc61
 800d1e0:	4876      	ldr	r0, [pc, #472]	@ (800d3bc <UART_SetConfig+0x294>)
 800d1e2:	f7f7 fccf 	bl	8004b84 <assert_failed>
  }

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	691b      	ldr	r3, [r3, #16]
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d00e      	beq.n	800d20c <UART_SetConfig+0xe4>
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	691b      	ldr	r3, [r3, #16]
 800d1f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d1f6:	d009      	beq.n	800d20c <UART_SetConfig+0xe4>
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	691b      	ldr	r3, [r3, #16]
 800d1fc:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800d200:	d004      	beq.n	800d20c <UART_SetConfig+0xe4>
 800d202:	f640 4164 	movw	r1, #3172	@ 0xc64
 800d206:	486d      	ldr	r0, [pc, #436]	@ (800d3bc <UART_SetConfig+0x294>)
 800d208:	f7f7 fcbc 	bl	8004b84 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	695b      	ldr	r3, [r3, #20]
 800d210:	f023 030c 	bic.w	r3, r3, #12
 800d214:	2b00      	cmp	r3, #0
 800d216:	d103      	bne.n	800d220 <UART_SetConfig+0xf8>
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	695b      	ldr	r3, [r3, #20]
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d104      	bne.n	800d22a <UART_SetConfig+0x102>
 800d220:	f640 4165 	movw	r1, #3173	@ 0xc65
 800d224:	4865      	ldr	r0, [pc, #404]	@ (800d3bc <UART_SetConfig+0x294>)
 800d226:	f7f7 fcad 	bl	8004b84 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	699b      	ldr	r3, [r3, #24]
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d013      	beq.n	800d25a <UART_SetConfig+0x132>
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	699b      	ldr	r3, [r3, #24]
 800d236:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d23a:	d00e      	beq.n	800d25a <UART_SetConfig+0x132>
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	699b      	ldr	r3, [r3, #24]
 800d240:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d244:	d009      	beq.n	800d25a <UART_SetConfig+0x132>
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	699b      	ldr	r3, [r3, #24]
 800d24a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d24e:	d004      	beq.n	800d25a <UART_SetConfig+0x132>
 800d250:	f640 4166 	movw	r1, #3174	@ 0xc66
 800d254:	4859      	ldr	r0, [pc, #356]	@ (800d3bc <UART_SetConfig+0x294>)
 800d256:	f7f7 fc95 	bl	8004b84 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	69db      	ldr	r3, [r3, #28]
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d009      	beq.n	800d276 <UART_SetConfig+0x14e>
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	69db      	ldr	r3, [r3, #28]
 800d266:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d26a:	d004      	beq.n	800d276 <UART_SetConfig+0x14e>
 800d26c:	f640 4167 	movw	r1, #3175	@ 0xc67
 800d270:	4852      	ldr	r0, [pc, #328]	@ (800d3bc <UART_SetConfig+0x294>)
 800d272:	f7f7 fc87 	bl	8004b84 <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	689a      	ldr	r2, [r3, #8]
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	691b      	ldr	r3, [r3, #16]
 800d27e:	431a      	orrs	r2, r3
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	695b      	ldr	r3, [r3, #20]
 800d284:	431a      	orrs	r2, r3
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	69db      	ldr	r3, [r3, #28]
 800d28a:	4313      	orrs	r3, r2
 800d28c:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	681a      	ldr	r2, [r3, #0]
 800d294:	4b4b      	ldr	r3, [pc, #300]	@ (800d3c4 <UART_SetConfig+0x29c>)
 800d296:	4013      	ands	r3, r2
 800d298:	68fa      	ldr	r2, [r7, #12]
 800d29a:	6812      	ldr	r2, [r2, #0]
 800d29c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d29e:	430b      	orrs	r3, r1
 800d2a0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	685b      	ldr	r3, [r3, #4]
 800d2a8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	68da      	ldr	r2, [r3, #12]
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	430a      	orrs	r2, r1
 800d2b6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	699b      	ldr	r3, [r3, #24]
 800d2bc:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	4a3f      	ldr	r2, [pc, #252]	@ (800d3c0 <UART_SetConfig+0x298>)
 800d2c4:	4293      	cmp	r3, r2
 800d2c6:	d004      	beq.n	800d2d2 <UART_SetConfig+0x1aa>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	6a1b      	ldr	r3, [r3, #32]
 800d2cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d2ce:	4313      	orrs	r3, r2
 800d2d0:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	689b      	ldr	r3, [r3, #8]
 800d2d8:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d2e2:	430a      	orrs	r2, r1
 800d2e4:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	4a37      	ldr	r2, [pc, #220]	@ (800d3c8 <UART_SetConfig+0x2a0>)
 800d2ec:	4293      	cmp	r3, r2
 800d2ee:	d125      	bne.n	800d33c <UART_SetConfig+0x214>
 800d2f0:	4b36      	ldr	r3, [pc, #216]	@ (800d3cc <UART_SetConfig+0x2a4>)
 800d2f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d2f6:	f003 0303 	and.w	r3, r3, #3
 800d2fa:	2b03      	cmp	r3, #3
 800d2fc:	d81a      	bhi.n	800d334 <UART_SetConfig+0x20c>
 800d2fe:	a201      	add	r2, pc, #4	@ (adr r2, 800d304 <UART_SetConfig+0x1dc>)
 800d300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d304:	0800d315 	.word	0x0800d315
 800d308:	0800d325 	.word	0x0800d325
 800d30c:	0800d31d 	.word	0x0800d31d
 800d310:	0800d32d 	.word	0x0800d32d
 800d314:	2301      	movs	r3, #1
 800d316:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d31a:	e114      	b.n	800d546 <UART_SetConfig+0x41e>
 800d31c:	2302      	movs	r3, #2
 800d31e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d322:	e110      	b.n	800d546 <UART_SetConfig+0x41e>
 800d324:	2304      	movs	r3, #4
 800d326:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d32a:	e10c      	b.n	800d546 <UART_SetConfig+0x41e>
 800d32c:	2308      	movs	r3, #8
 800d32e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d332:	e108      	b.n	800d546 <UART_SetConfig+0x41e>
 800d334:	2310      	movs	r3, #16
 800d336:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d33a:	e104      	b.n	800d546 <UART_SetConfig+0x41e>
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	4a23      	ldr	r2, [pc, #140]	@ (800d3d0 <UART_SetConfig+0x2a8>)
 800d342:	4293      	cmp	r3, r2
 800d344:	d146      	bne.n	800d3d4 <UART_SetConfig+0x2ac>
 800d346:	4b21      	ldr	r3, [pc, #132]	@ (800d3cc <UART_SetConfig+0x2a4>)
 800d348:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d34c:	f003 030c 	and.w	r3, r3, #12
 800d350:	2b0c      	cmp	r3, #12
 800d352:	d82d      	bhi.n	800d3b0 <UART_SetConfig+0x288>
 800d354:	a201      	add	r2, pc, #4	@ (adr r2, 800d35c <UART_SetConfig+0x234>)
 800d356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d35a:	bf00      	nop
 800d35c:	0800d391 	.word	0x0800d391
 800d360:	0800d3b1 	.word	0x0800d3b1
 800d364:	0800d3b1 	.word	0x0800d3b1
 800d368:	0800d3b1 	.word	0x0800d3b1
 800d36c:	0800d3a1 	.word	0x0800d3a1
 800d370:	0800d3b1 	.word	0x0800d3b1
 800d374:	0800d3b1 	.word	0x0800d3b1
 800d378:	0800d3b1 	.word	0x0800d3b1
 800d37c:	0800d399 	.word	0x0800d399
 800d380:	0800d3b1 	.word	0x0800d3b1
 800d384:	0800d3b1 	.word	0x0800d3b1
 800d388:	0800d3b1 	.word	0x0800d3b1
 800d38c:	0800d3a9 	.word	0x0800d3a9
 800d390:	2300      	movs	r3, #0
 800d392:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d396:	e0d6      	b.n	800d546 <UART_SetConfig+0x41e>
 800d398:	2302      	movs	r3, #2
 800d39a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d39e:	e0d2      	b.n	800d546 <UART_SetConfig+0x41e>
 800d3a0:	2304      	movs	r3, #4
 800d3a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d3a6:	e0ce      	b.n	800d546 <UART_SetConfig+0x41e>
 800d3a8:	2308      	movs	r3, #8
 800d3aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d3ae:	e0ca      	b.n	800d546 <UART_SetConfig+0x41e>
 800d3b0:	2310      	movs	r3, #16
 800d3b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d3b6:	e0c6      	b.n	800d546 <UART_SetConfig+0x41e>
 800d3b8:	00989680 	.word	0x00989680
 800d3bc:	0800faa8 	.word	0x0800faa8
 800d3c0:	40008000 	.word	0x40008000
 800d3c4:	efff69f3 	.word	0xefff69f3
 800d3c8:	40013800 	.word	0x40013800
 800d3cc:	40021000 	.word	0x40021000
 800d3d0:	40004400 	.word	0x40004400
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	4aae      	ldr	r2, [pc, #696]	@ (800d694 <UART_SetConfig+0x56c>)
 800d3da:	4293      	cmp	r3, r2
 800d3dc:	d125      	bne.n	800d42a <UART_SetConfig+0x302>
 800d3de:	4bae      	ldr	r3, [pc, #696]	@ (800d698 <UART_SetConfig+0x570>)
 800d3e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d3e4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800d3e8:	2b30      	cmp	r3, #48	@ 0x30
 800d3ea:	d016      	beq.n	800d41a <UART_SetConfig+0x2f2>
 800d3ec:	2b30      	cmp	r3, #48	@ 0x30
 800d3ee:	d818      	bhi.n	800d422 <UART_SetConfig+0x2fa>
 800d3f0:	2b20      	cmp	r3, #32
 800d3f2:	d00a      	beq.n	800d40a <UART_SetConfig+0x2e2>
 800d3f4:	2b20      	cmp	r3, #32
 800d3f6:	d814      	bhi.n	800d422 <UART_SetConfig+0x2fa>
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d002      	beq.n	800d402 <UART_SetConfig+0x2da>
 800d3fc:	2b10      	cmp	r3, #16
 800d3fe:	d008      	beq.n	800d412 <UART_SetConfig+0x2ea>
 800d400:	e00f      	b.n	800d422 <UART_SetConfig+0x2fa>
 800d402:	2300      	movs	r3, #0
 800d404:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d408:	e09d      	b.n	800d546 <UART_SetConfig+0x41e>
 800d40a:	2302      	movs	r3, #2
 800d40c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d410:	e099      	b.n	800d546 <UART_SetConfig+0x41e>
 800d412:	2304      	movs	r3, #4
 800d414:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d418:	e095      	b.n	800d546 <UART_SetConfig+0x41e>
 800d41a:	2308      	movs	r3, #8
 800d41c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d420:	e091      	b.n	800d546 <UART_SetConfig+0x41e>
 800d422:	2310      	movs	r3, #16
 800d424:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d428:	e08d      	b.n	800d546 <UART_SetConfig+0x41e>
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	4a9b      	ldr	r2, [pc, #620]	@ (800d69c <UART_SetConfig+0x574>)
 800d430:	4293      	cmp	r3, r2
 800d432:	d125      	bne.n	800d480 <UART_SetConfig+0x358>
 800d434:	4b98      	ldr	r3, [pc, #608]	@ (800d698 <UART_SetConfig+0x570>)
 800d436:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d43a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800d43e:	2bc0      	cmp	r3, #192	@ 0xc0
 800d440:	d016      	beq.n	800d470 <UART_SetConfig+0x348>
 800d442:	2bc0      	cmp	r3, #192	@ 0xc0
 800d444:	d818      	bhi.n	800d478 <UART_SetConfig+0x350>
 800d446:	2b80      	cmp	r3, #128	@ 0x80
 800d448:	d00a      	beq.n	800d460 <UART_SetConfig+0x338>
 800d44a:	2b80      	cmp	r3, #128	@ 0x80
 800d44c:	d814      	bhi.n	800d478 <UART_SetConfig+0x350>
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d002      	beq.n	800d458 <UART_SetConfig+0x330>
 800d452:	2b40      	cmp	r3, #64	@ 0x40
 800d454:	d008      	beq.n	800d468 <UART_SetConfig+0x340>
 800d456:	e00f      	b.n	800d478 <UART_SetConfig+0x350>
 800d458:	2300      	movs	r3, #0
 800d45a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d45e:	e072      	b.n	800d546 <UART_SetConfig+0x41e>
 800d460:	2302      	movs	r3, #2
 800d462:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d466:	e06e      	b.n	800d546 <UART_SetConfig+0x41e>
 800d468:	2304      	movs	r3, #4
 800d46a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d46e:	e06a      	b.n	800d546 <UART_SetConfig+0x41e>
 800d470:	2308      	movs	r3, #8
 800d472:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d476:	e066      	b.n	800d546 <UART_SetConfig+0x41e>
 800d478:	2310      	movs	r3, #16
 800d47a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d47e:	e062      	b.n	800d546 <UART_SetConfig+0x41e>
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	4a86      	ldr	r2, [pc, #536]	@ (800d6a0 <UART_SetConfig+0x578>)
 800d486:	4293      	cmp	r3, r2
 800d488:	d12a      	bne.n	800d4e0 <UART_SetConfig+0x3b8>
 800d48a:	4b83      	ldr	r3, [pc, #524]	@ (800d698 <UART_SetConfig+0x570>)
 800d48c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d490:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d494:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d498:	d01a      	beq.n	800d4d0 <UART_SetConfig+0x3a8>
 800d49a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d49e:	d81b      	bhi.n	800d4d8 <UART_SetConfig+0x3b0>
 800d4a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d4a4:	d00c      	beq.n	800d4c0 <UART_SetConfig+0x398>
 800d4a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d4aa:	d815      	bhi.n	800d4d8 <UART_SetConfig+0x3b0>
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d003      	beq.n	800d4b8 <UART_SetConfig+0x390>
 800d4b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d4b4:	d008      	beq.n	800d4c8 <UART_SetConfig+0x3a0>
 800d4b6:	e00f      	b.n	800d4d8 <UART_SetConfig+0x3b0>
 800d4b8:	2300      	movs	r3, #0
 800d4ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d4be:	e042      	b.n	800d546 <UART_SetConfig+0x41e>
 800d4c0:	2302      	movs	r3, #2
 800d4c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d4c6:	e03e      	b.n	800d546 <UART_SetConfig+0x41e>
 800d4c8:	2304      	movs	r3, #4
 800d4ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d4ce:	e03a      	b.n	800d546 <UART_SetConfig+0x41e>
 800d4d0:	2308      	movs	r3, #8
 800d4d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d4d6:	e036      	b.n	800d546 <UART_SetConfig+0x41e>
 800d4d8:	2310      	movs	r3, #16
 800d4da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d4de:	e032      	b.n	800d546 <UART_SetConfig+0x41e>
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	4a6f      	ldr	r2, [pc, #444]	@ (800d6a4 <UART_SetConfig+0x57c>)
 800d4e6:	4293      	cmp	r3, r2
 800d4e8:	d12a      	bne.n	800d540 <UART_SetConfig+0x418>
 800d4ea:	4b6b      	ldr	r3, [pc, #428]	@ (800d698 <UART_SetConfig+0x570>)
 800d4ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d4f0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800d4f4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d4f8:	d01a      	beq.n	800d530 <UART_SetConfig+0x408>
 800d4fa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d4fe:	d81b      	bhi.n	800d538 <UART_SetConfig+0x410>
 800d500:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d504:	d00c      	beq.n	800d520 <UART_SetConfig+0x3f8>
 800d506:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d50a:	d815      	bhi.n	800d538 <UART_SetConfig+0x410>
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d003      	beq.n	800d518 <UART_SetConfig+0x3f0>
 800d510:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d514:	d008      	beq.n	800d528 <UART_SetConfig+0x400>
 800d516:	e00f      	b.n	800d538 <UART_SetConfig+0x410>
 800d518:	2300      	movs	r3, #0
 800d51a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d51e:	e012      	b.n	800d546 <UART_SetConfig+0x41e>
 800d520:	2302      	movs	r3, #2
 800d522:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d526:	e00e      	b.n	800d546 <UART_SetConfig+0x41e>
 800d528:	2304      	movs	r3, #4
 800d52a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d52e:	e00a      	b.n	800d546 <UART_SetConfig+0x41e>
 800d530:	2308      	movs	r3, #8
 800d532:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d536:	e006      	b.n	800d546 <UART_SetConfig+0x41e>
 800d538:	2310      	movs	r3, #16
 800d53a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d53e:	e002      	b.n	800d546 <UART_SetConfig+0x41e>
 800d540:	2310      	movs	r3, #16
 800d542:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	4a56      	ldr	r2, [pc, #344]	@ (800d6a4 <UART_SetConfig+0x57c>)
 800d54c:	4293      	cmp	r3, r2
 800d54e:	d17a      	bne.n	800d646 <UART_SetConfig+0x51e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d550:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800d554:	2b08      	cmp	r3, #8
 800d556:	d824      	bhi.n	800d5a2 <UART_SetConfig+0x47a>
 800d558:	a201      	add	r2, pc, #4	@ (adr r2, 800d560 <UART_SetConfig+0x438>)
 800d55a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d55e:	bf00      	nop
 800d560:	0800d585 	.word	0x0800d585
 800d564:	0800d5a3 	.word	0x0800d5a3
 800d568:	0800d58d 	.word	0x0800d58d
 800d56c:	0800d5a3 	.word	0x0800d5a3
 800d570:	0800d593 	.word	0x0800d593
 800d574:	0800d5a3 	.word	0x0800d5a3
 800d578:	0800d5a3 	.word	0x0800d5a3
 800d57c:	0800d5a3 	.word	0x0800d5a3
 800d580:	0800d59b 	.word	0x0800d59b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d584:	f7fa fd5c 	bl	8008040 <HAL_RCC_GetPCLK1Freq>
 800d588:	61f8      	str	r0, [r7, #28]
        break;
 800d58a:	e010      	b.n	800d5ae <UART_SetConfig+0x486>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d58c:	4b46      	ldr	r3, [pc, #280]	@ (800d6a8 <UART_SetConfig+0x580>)
 800d58e:	61fb      	str	r3, [r7, #28]
        break;
 800d590:	e00d      	b.n	800d5ae <UART_SetConfig+0x486>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d592:	f7fa fcbd 	bl	8007f10 <HAL_RCC_GetSysClockFreq>
 800d596:	61f8      	str	r0, [r7, #28]
        break;
 800d598:	e009      	b.n	800d5ae <UART_SetConfig+0x486>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d59a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d59e:	61fb      	str	r3, [r7, #28]
        break;
 800d5a0:	e005      	b.n	800d5ae <UART_SetConfig+0x486>
      default:
        pclk = 0U;
 800d5a2:	2300      	movs	r3, #0
 800d5a4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800d5a6:	2301      	movs	r3, #1
 800d5a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800d5ac:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d5ae:	69fb      	ldr	r3, [r7, #28]
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	f000 8107 	beq.w	800d7c4 <UART_SetConfig+0x69c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	685a      	ldr	r2, [r3, #4]
 800d5ba:	4613      	mov	r3, r2
 800d5bc:	005b      	lsls	r3, r3, #1
 800d5be:	4413      	add	r3, r2
 800d5c0:	69fa      	ldr	r2, [r7, #28]
 800d5c2:	429a      	cmp	r2, r3
 800d5c4:	d305      	bcc.n	800d5d2 <UART_SetConfig+0x4aa>
          (pclk > (4096U * huart->Init.BaudRate)))
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	685b      	ldr	r3, [r3, #4]
 800d5ca:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800d5cc:	69fa      	ldr	r2, [r7, #28]
 800d5ce:	429a      	cmp	r2, r3
 800d5d0:	d903      	bls.n	800d5da <UART_SetConfig+0x4b2>
      {
        ret = HAL_ERROR;
 800d5d2:	2301      	movs	r3, #1
 800d5d4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800d5d8:	e0f4      	b.n	800d7c4 <UART_SetConfig+0x69c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800d5da:	69fb      	ldr	r3, [r7, #28]
 800d5dc:	2200      	movs	r2, #0
 800d5de:	461c      	mov	r4, r3
 800d5e0:	4615      	mov	r5, r2
 800d5e2:	f04f 0200 	mov.w	r2, #0
 800d5e6:	f04f 0300 	mov.w	r3, #0
 800d5ea:	022b      	lsls	r3, r5, #8
 800d5ec:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800d5f0:	0222      	lsls	r2, r4, #8
 800d5f2:	68f9      	ldr	r1, [r7, #12]
 800d5f4:	6849      	ldr	r1, [r1, #4]
 800d5f6:	0849      	lsrs	r1, r1, #1
 800d5f8:	2000      	movs	r0, #0
 800d5fa:	4688      	mov	r8, r1
 800d5fc:	4681      	mov	r9, r0
 800d5fe:	eb12 0a08 	adds.w	sl, r2, r8
 800d602:	eb43 0b09 	adc.w	fp, r3, r9
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	685b      	ldr	r3, [r3, #4]
 800d60a:	2200      	movs	r2, #0
 800d60c:	603b      	str	r3, [r7, #0]
 800d60e:	607a      	str	r2, [r7, #4]
 800d610:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d614:	4650      	mov	r0, sl
 800d616:	4659      	mov	r1, fp
 800d618:	f7f2 fe2a 	bl	8000270 <__aeabi_uldivmod>
 800d61c:	4602      	mov	r2, r0
 800d61e:	460b      	mov	r3, r1
 800d620:	4613      	mov	r3, r2
 800d622:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d624:	69bb      	ldr	r3, [r7, #24]
 800d626:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d62a:	d308      	bcc.n	800d63e <UART_SetConfig+0x516>
 800d62c:	69bb      	ldr	r3, [r7, #24]
 800d62e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d632:	d204      	bcs.n	800d63e <UART_SetConfig+0x516>
        {
          huart->Instance->BRR = usartdiv;
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	69ba      	ldr	r2, [r7, #24]
 800d63a:	60da      	str	r2, [r3, #12]
 800d63c:	e0c2      	b.n	800d7c4 <UART_SetConfig+0x69c>
        }
        else
        {
          ret = HAL_ERROR;
 800d63e:	2301      	movs	r3, #1
 800d640:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800d644:	e0be      	b.n	800d7c4 <UART_SetConfig+0x69c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	69db      	ldr	r3, [r3, #28]
 800d64a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d64e:	d16a      	bne.n	800d726 <UART_SetConfig+0x5fe>
  {
    switch (clocksource)
 800d650:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800d654:	2b08      	cmp	r3, #8
 800d656:	d834      	bhi.n	800d6c2 <UART_SetConfig+0x59a>
 800d658:	a201      	add	r2, pc, #4	@ (adr r2, 800d660 <UART_SetConfig+0x538>)
 800d65a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d65e:	bf00      	nop
 800d660:	0800d685 	.word	0x0800d685
 800d664:	0800d68d 	.word	0x0800d68d
 800d668:	0800d6ad 	.word	0x0800d6ad
 800d66c:	0800d6c3 	.word	0x0800d6c3
 800d670:	0800d6b3 	.word	0x0800d6b3
 800d674:	0800d6c3 	.word	0x0800d6c3
 800d678:	0800d6c3 	.word	0x0800d6c3
 800d67c:	0800d6c3 	.word	0x0800d6c3
 800d680:	0800d6bb 	.word	0x0800d6bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d684:	f7fa fcdc 	bl	8008040 <HAL_RCC_GetPCLK1Freq>
 800d688:	61f8      	str	r0, [r7, #28]
        break;
 800d68a:	e020      	b.n	800d6ce <UART_SetConfig+0x5a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d68c:	f7fa fcee 	bl	800806c <HAL_RCC_GetPCLK2Freq>
 800d690:	61f8      	str	r0, [r7, #28]
        break;
 800d692:	e01c      	b.n	800d6ce <UART_SetConfig+0x5a6>
 800d694:	40004800 	.word	0x40004800
 800d698:	40021000 	.word	0x40021000
 800d69c:	40004c00 	.word	0x40004c00
 800d6a0:	40005000 	.word	0x40005000
 800d6a4:	40008000 	.word	0x40008000
 800d6a8:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d6ac:	4b4c      	ldr	r3, [pc, #304]	@ (800d7e0 <UART_SetConfig+0x6b8>)
 800d6ae:	61fb      	str	r3, [r7, #28]
        break;
 800d6b0:	e00d      	b.n	800d6ce <UART_SetConfig+0x5a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d6b2:	f7fa fc2d 	bl	8007f10 <HAL_RCC_GetSysClockFreq>
 800d6b6:	61f8      	str	r0, [r7, #28]
        break;
 800d6b8:	e009      	b.n	800d6ce <UART_SetConfig+0x5a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d6ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d6be:	61fb      	str	r3, [r7, #28]
        break;
 800d6c0:	e005      	b.n	800d6ce <UART_SetConfig+0x5a6>
      default:
        pclk = 0U;
 800d6c2:	2300      	movs	r3, #0
 800d6c4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800d6c6:	2301      	movs	r3, #1
 800d6c8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800d6cc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d6ce:	69fb      	ldr	r3, [r7, #28]
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d077      	beq.n	800d7c4 <UART_SetConfig+0x69c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800d6d4:	69fb      	ldr	r3, [r7, #28]
 800d6d6:	005a      	lsls	r2, r3, #1
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	685b      	ldr	r3, [r3, #4]
 800d6dc:	085b      	lsrs	r3, r3, #1
 800d6de:	441a      	add	r2, r3
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	685b      	ldr	r3, [r3, #4]
 800d6e4:	fbb2 f3f3 	udiv	r3, r2, r3
 800d6e8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d6ea:	69bb      	ldr	r3, [r7, #24]
 800d6ec:	2b0f      	cmp	r3, #15
 800d6ee:	d916      	bls.n	800d71e <UART_SetConfig+0x5f6>
 800d6f0:	69bb      	ldr	r3, [r7, #24]
 800d6f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d6f6:	d212      	bcs.n	800d71e <UART_SetConfig+0x5f6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d6f8:	69bb      	ldr	r3, [r7, #24]
 800d6fa:	b29b      	uxth	r3, r3
 800d6fc:	f023 030f 	bic.w	r3, r3, #15
 800d700:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d702:	69bb      	ldr	r3, [r7, #24]
 800d704:	085b      	lsrs	r3, r3, #1
 800d706:	b29b      	uxth	r3, r3
 800d708:	f003 0307 	and.w	r3, r3, #7
 800d70c:	b29a      	uxth	r2, r3
 800d70e:	8afb      	ldrh	r3, [r7, #22]
 800d710:	4313      	orrs	r3, r2
 800d712:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	8afa      	ldrh	r2, [r7, #22]
 800d71a:	60da      	str	r2, [r3, #12]
 800d71c:	e052      	b.n	800d7c4 <UART_SetConfig+0x69c>
      }
      else
      {
        ret = HAL_ERROR;
 800d71e:	2301      	movs	r3, #1
 800d720:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800d724:	e04e      	b.n	800d7c4 <UART_SetConfig+0x69c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d726:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800d72a:	2b08      	cmp	r3, #8
 800d72c:	d827      	bhi.n	800d77e <UART_SetConfig+0x656>
 800d72e:	a201      	add	r2, pc, #4	@ (adr r2, 800d734 <UART_SetConfig+0x60c>)
 800d730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d734:	0800d759 	.word	0x0800d759
 800d738:	0800d761 	.word	0x0800d761
 800d73c:	0800d769 	.word	0x0800d769
 800d740:	0800d77f 	.word	0x0800d77f
 800d744:	0800d76f 	.word	0x0800d76f
 800d748:	0800d77f 	.word	0x0800d77f
 800d74c:	0800d77f 	.word	0x0800d77f
 800d750:	0800d77f 	.word	0x0800d77f
 800d754:	0800d777 	.word	0x0800d777
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d758:	f7fa fc72 	bl	8008040 <HAL_RCC_GetPCLK1Freq>
 800d75c:	61f8      	str	r0, [r7, #28]
        break;
 800d75e:	e014      	b.n	800d78a <UART_SetConfig+0x662>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d760:	f7fa fc84 	bl	800806c <HAL_RCC_GetPCLK2Freq>
 800d764:	61f8      	str	r0, [r7, #28]
        break;
 800d766:	e010      	b.n	800d78a <UART_SetConfig+0x662>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d768:	4b1d      	ldr	r3, [pc, #116]	@ (800d7e0 <UART_SetConfig+0x6b8>)
 800d76a:	61fb      	str	r3, [r7, #28]
        break;
 800d76c:	e00d      	b.n	800d78a <UART_SetConfig+0x662>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d76e:	f7fa fbcf 	bl	8007f10 <HAL_RCC_GetSysClockFreq>
 800d772:	61f8      	str	r0, [r7, #28]
        break;
 800d774:	e009      	b.n	800d78a <UART_SetConfig+0x662>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d776:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d77a:	61fb      	str	r3, [r7, #28]
        break;
 800d77c:	e005      	b.n	800d78a <UART_SetConfig+0x662>
      default:
        pclk = 0U;
 800d77e:	2300      	movs	r3, #0
 800d780:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800d782:	2301      	movs	r3, #1
 800d784:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800d788:	bf00      	nop
    }

    if (pclk != 0U)
 800d78a:	69fb      	ldr	r3, [r7, #28]
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d019      	beq.n	800d7c4 <UART_SetConfig+0x69c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	685b      	ldr	r3, [r3, #4]
 800d794:	085a      	lsrs	r2, r3, #1
 800d796:	69fb      	ldr	r3, [r7, #28]
 800d798:	441a      	add	r2, r3
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	685b      	ldr	r3, [r3, #4]
 800d79e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d7a2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d7a4:	69bb      	ldr	r3, [r7, #24]
 800d7a6:	2b0f      	cmp	r3, #15
 800d7a8:	d909      	bls.n	800d7be <UART_SetConfig+0x696>
 800d7aa:	69bb      	ldr	r3, [r7, #24]
 800d7ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d7b0:	d205      	bcs.n	800d7be <UART_SetConfig+0x696>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d7b2:	69bb      	ldr	r3, [r7, #24]
 800d7b4:	b29a      	uxth	r2, r3
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	60da      	str	r2, [r3, #12]
 800d7bc:	e002      	b.n	800d7c4 <UART_SetConfig+0x69c>
      }
      else
      {
        ret = HAL_ERROR;
 800d7be:	2301      	movs	r3, #1
 800d7c0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	2200      	movs	r2, #0
 800d7c8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800d7ca:	68fb      	ldr	r3, [r7, #12]
 800d7cc:	2200      	movs	r2, #0
 800d7ce:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800d7d0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800d7d4:	4618      	mov	r0, r3
 800d7d6:	3728      	adds	r7, #40	@ 0x28
 800d7d8:	46bd      	mov	sp, r7
 800d7da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d7de:	bf00      	nop
 800d7e0:	00f42400 	.word	0x00f42400

0800d7e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d7e4:	b580      	push	{r7, lr}
 800d7e6:	b082      	sub	sp, #8
 800d7e8:	af00      	add	r7, sp, #0
 800d7ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d7f0:	2bff      	cmp	r3, #255	@ 0xff
 800d7f2:	d904      	bls.n	800d7fe <UART_AdvFeatureConfig+0x1a>
 800d7f4:	f640 514d 	movw	r1, #3405	@ 0xd4d
 800d7f8:	4891      	ldr	r0, [pc, #580]	@ (800da40 <UART_AdvFeatureConfig+0x25c>)
 800d7fa:	f7f7 f9c3 	bl	8004b84 <assert_failed>

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d802:	f003 0308 	and.w	r3, r3, #8
 800d806:	2b00      	cmp	r3, #0
 800d808:	d018      	beq.n	800d83c <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d009      	beq.n	800d826 <UART_AdvFeatureConfig+0x42>
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d816:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d81a:	d004      	beq.n	800d826 <UART_AdvFeatureConfig+0x42>
 800d81c:	f640 5152 	movw	r1, #3410	@ 0xd52
 800d820:	4887      	ldr	r0, [pc, #540]	@ (800da40 <UART_AdvFeatureConfig+0x25c>)
 800d822:	f7f7 f9af 	bl	8004b84 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	685b      	ldr	r3, [r3, #4]
 800d82c:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	430a      	orrs	r2, r1
 800d83a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d840:	f003 0301 	and.w	r3, r3, #1
 800d844:	2b00      	cmp	r3, #0
 800d846:	d018      	beq.n	800d87a <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d009      	beq.n	800d864 <UART_AdvFeatureConfig+0x80>
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d854:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d858:	d004      	beq.n	800d864 <UART_AdvFeatureConfig+0x80>
 800d85a:	f640 5159 	movw	r1, #3417	@ 0xd59
 800d85e:	4878      	ldr	r0, [pc, #480]	@ (800da40 <UART_AdvFeatureConfig+0x25c>)
 800d860:	f7f7 f990 	bl	8004b84 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	685b      	ldr	r3, [r3, #4]
 800d86a:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	430a      	orrs	r2, r1
 800d878:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d87e:	f003 0302 	and.w	r3, r3, #2
 800d882:	2b00      	cmp	r3, #0
 800d884:	d018      	beq.n	800d8b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d009      	beq.n	800d8a2 <UART_AdvFeatureConfig+0xbe>
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d892:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d896:	d004      	beq.n	800d8a2 <UART_AdvFeatureConfig+0xbe>
 800d898:	f44f 6156 	mov.w	r1, #3424	@ 0xd60
 800d89c:	4868      	ldr	r0, [pc, #416]	@ (800da40 <UART_AdvFeatureConfig+0x25c>)
 800d89e:	f7f7 f971 	bl	8004b84 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	685b      	ldr	r3, [r3, #4]
 800d8a8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	430a      	orrs	r2, r1
 800d8b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d8bc:	f003 0304 	and.w	r3, r3, #4
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d018      	beq.n	800d8f6 <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d009      	beq.n	800d8e0 <UART_AdvFeatureConfig+0xfc>
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d8d0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800d8d4:	d004      	beq.n	800d8e0 <UART_AdvFeatureConfig+0xfc>
 800d8d6:	f640 5167 	movw	r1, #3431	@ 0xd67
 800d8da:	4859      	ldr	r0, [pc, #356]	@ (800da40 <UART_AdvFeatureConfig+0x25c>)
 800d8dc:	f7f7 f952 	bl	8004b84 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	685b      	ldr	r3, [r3, #4]
 800d8e6:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	430a      	orrs	r2, r1
 800d8f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d8fa:	f003 0310 	and.w	r3, r3, #16
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d018      	beq.n	800d934 <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d906:	2b00      	cmp	r3, #0
 800d908:	d009      	beq.n	800d91e <UART_AdvFeatureConfig+0x13a>
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d90e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d912:	d004      	beq.n	800d91e <UART_AdvFeatureConfig+0x13a>
 800d914:	f640 516e 	movw	r1, #3438	@ 0xd6e
 800d918:	4849      	ldr	r0, [pc, #292]	@ (800da40 <UART_AdvFeatureConfig+0x25c>)
 800d91a:	f7f7 f933 	bl	8004b84 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	689b      	ldr	r3, [r3, #8]
 800d924:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	430a      	orrs	r2, r1
 800d932:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d938:	f003 0320 	and.w	r3, r3, #32
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d018      	beq.n	800d972 <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d944:	2b00      	cmp	r3, #0
 800d946:	d009      	beq.n	800d95c <UART_AdvFeatureConfig+0x178>
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d94c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d950:	d004      	beq.n	800d95c <UART_AdvFeatureConfig+0x178>
 800d952:	f640 5175 	movw	r1, #3445	@ 0xd75
 800d956:	483a      	ldr	r0, [pc, #232]	@ (800da40 <UART_AdvFeatureConfig+0x25c>)
 800d958:	f7f7 f914 	bl	8004b84 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	689b      	ldr	r3, [r3, #8]
 800d962:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	430a      	orrs	r2, r1
 800d970:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d976:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d06c      	beq.n	800da58 <UART_AdvFeatureConfig+0x274>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	4a30      	ldr	r2, [pc, #192]	@ (800da44 <UART_AdvFeatureConfig+0x260>)
 800d984:	4293      	cmp	r3, r2
 800d986:	d018      	beq.n	800d9ba <UART_AdvFeatureConfig+0x1d6>
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	4a2e      	ldr	r2, [pc, #184]	@ (800da48 <UART_AdvFeatureConfig+0x264>)
 800d98e:	4293      	cmp	r3, r2
 800d990:	d013      	beq.n	800d9ba <UART_AdvFeatureConfig+0x1d6>
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	4a2d      	ldr	r2, [pc, #180]	@ (800da4c <UART_AdvFeatureConfig+0x268>)
 800d998:	4293      	cmp	r3, r2
 800d99a:	d00e      	beq.n	800d9ba <UART_AdvFeatureConfig+0x1d6>
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	4a2b      	ldr	r2, [pc, #172]	@ (800da50 <UART_AdvFeatureConfig+0x26c>)
 800d9a2:	4293      	cmp	r3, r2
 800d9a4:	d009      	beq.n	800d9ba <UART_AdvFeatureConfig+0x1d6>
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	4a2a      	ldr	r2, [pc, #168]	@ (800da54 <UART_AdvFeatureConfig+0x270>)
 800d9ac:	4293      	cmp	r3, r2
 800d9ae:	d004      	beq.n	800d9ba <UART_AdvFeatureConfig+0x1d6>
 800d9b0:	f640 517c 	movw	r1, #3452	@ 0xd7c
 800d9b4:	4822      	ldr	r0, [pc, #136]	@ (800da40 <UART_AdvFeatureConfig+0x25c>)
 800d9b6:	f7f7 f8e5 	bl	8004b84 <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d009      	beq.n	800d9d6 <UART_AdvFeatureConfig+0x1f2>
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d9c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d9ca:	d004      	beq.n	800d9d6 <UART_AdvFeatureConfig+0x1f2>
 800d9cc:	f640 517d 	movw	r1, #3453	@ 0xd7d
 800d9d0:	481b      	ldr	r0, [pc, #108]	@ (800da40 <UART_AdvFeatureConfig+0x25c>)
 800d9d2:	f7f7 f8d7 	bl	8004b84 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	685b      	ldr	r3, [r3, #4]
 800d9dc:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	430a      	orrs	r2, r1
 800d9ea:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d9f0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d9f4:	d130      	bne.n	800da58 <UART_AdvFeatureConfig+0x274>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d013      	beq.n	800da26 <UART_AdvFeatureConfig+0x242>
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800da02:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800da06:	d00e      	beq.n	800da26 <UART_AdvFeatureConfig+0x242>
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800da0c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800da10:	d009      	beq.n	800da26 <UART_AdvFeatureConfig+0x242>
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800da16:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800da1a:	d004      	beq.n	800da26 <UART_AdvFeatureConfig+0x242>
 800da1c:	f640 5182 	movw	r1, #3458	@ 0xd82
 800da20:	4807      	ldr	r0, [pc, #28]	@ (800da40 <UART_AdvFeatureConfig+0x25c>)
 800da22:	f7f7 f8af 	bl	8004b84 <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	685b      	ldr	r3, [r3, #4]
 800da2c:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	430a      	orrs	r2, r1
 800da3a:	605a      	str	r2, [r3, #4]
 800da3c:	e00c      	b.n	800da58 <UART_AdvFeatureConfig+0x274>
 800da3e:	bf00      	nop
 800da40:	0800faa8 	.word	0x0800faa8
 800da44:	40013800 	.word	0x40013800
 800da48:	40004400 	.word	0x40004400
 800da4c:	40004800 	.word	0x40004800
 800da50:	40004c00 	.word	0x40004c00
 800da54:	40005000 	.word	0x40005000
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800da5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800da60:	2b00      	cmp	r3, #0
 800da62:	d018      	beq.n	800da96 <UART_AdvFeatureConfig+0x2b2>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d009      	beq.n	800da80 <UART_AdvFeatureConfig+0x29c>
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800da70:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800da74:	d004      	beq.n	800da80 <UART_AdvFeatureConfig+0x29c>
 800da76:	f640 518a 	movw	r1, #3466	@ 0xd8a
 800da7a:	4809      	ldr	r0, [pc, #36]	@ (800daa0 <UART_AdvFeatureConfig+0x2bc>)
 800da7c:	f7f7 f882 	bl	8004b84 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	685b      	ldr	r3, [r3, #4]
 800da86:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	430a      	orrs	r2, r1
 800da94:	605a      	str	r2, [r3, #4]
  }
}
 800da96:	bf00      	nop
 800da98:	3708      	adds	r7, #8
 800da9a:	46bd      	mov	sp, r7
 800da9c:	bd80      	pop	{r7, pc}
 800da9e:	bf00      	nop
 800daa0:	0800faa8 	.word	0x0800faa8

0800daa4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800daa4:	b580      	push	{r7, lr}
 800daa6:	b098      	sub	sp, #96	@ 0x60
 800daa8:	af02      	add	r7, sp, #8
 800daaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	2200      	movs	r2, #0
 800dab0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800dab4:	f7f7 fe90 	bl	80057d8 <HAL_GetTick>
 800dab8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	f003 0308 	and.w	r3, r3, #8
 800dac4:	2b08      	cmp	r3, #8
 800dac6:	d12e      	bne.n	800db26 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800dac8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800dacc:	9300      	str	r3, [sp, #0]
 800dace:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dad0:	2200      	movs	r2, #0
 800dad2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800dad6:	6878      	ldr	r0, [r7, #4]
 800dad8:	f000 f88c 	bl	800dbf4 <UART_WaitOnFlagUntilTimeout>
 800dadc:	4603      	mov	r3, r0
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d021      	beq.n	800db26 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dae8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800daea:	e853 3f00 	ldrex	r3, [r3]
 800daee:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800daf0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800daf2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800daf6:	653b      	str	r3, [r7, #80]	@ 0x50
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	461a      	mov	r2, r3
 800dafe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800db00:	647b      	str	r3, [r7, #68]	@ 0x44
 800db02:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db04:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800db06:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800db08:	e841 2300 	strex	r3, r2, [r1]
 800db0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800db0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800db10:	2b00      	cmp	r3, #0
 800db12:	d1e6      	bne.n	800dae2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	2220      	movs	r2, #32
 800db18:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	2200      	movs	r2, #0
 800db1e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800db22:	2303      	movs	r3, #3
 800db24:	e062      	b.n	800dbec <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	f003 0304 	and.w	r3, r3, #4
 800db30:	2b04      	cmp	r3, #4
 800db32:	d149      	bne.n	800dbc8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800db34:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800db38:	9300      	str	r3, [sp, #0]
 800db3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800db3c:	2200      	movs	r2, #0
 800db3e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800db42:	6878      	ldr	r0, [r7, #4]
 800db44:	f000 f856 	bl	800dbf4 <UART_WaitOnFlagUntilTimeout>
 800db48:	4603      	mov	r3, r0
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d03c      	beq.n	800dbc8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db56:	e853 3f00 	ldrex	r3, [r3]
 800db5a:	623b      	str	r3, [r7, #32]
   return(result);
 800db5c:	6a3b      	ldr	r3, [r7, #32]
 800db5e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800db62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	461a      	mov	r2, r3
 800db6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800db6c:	633b      	str	r3, [r7, #48]	@ 0x30
 800db6e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db70:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800db72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800db74:	e841 2300 	strex	r3, r2, [r1]
 800db78:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800db7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d1e6      	bne.n	800db4e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	3308      	adds	r3, #8
 800db86:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db88:	693b      	ldr	r3, [r7, #16]
 800db8a:	e853 3f00 	ldrex	r3, [r3]
 800db8e:	60fb      	str	r3, [r7, #12]
   return(result);
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	f023 0301 	bic.w	r3, r3, #1
 800db96:	64bb      	str	r3, [r7, #72]	@ 0x48
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	3308      	adds	r3, #8
 800db9e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800dba0:	61fa      	str	r2, [r7, #28]
 800dba2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dba4:	69b9      	ldr	r1, [r7, #24]
 800dba6:	69fa      	ldr	r2, [r7, #28]
 800dba8:	e841 2300 	strex	r3, r2, [r1]
 800dbac:	617b      	str	r3, [r7, #20]
   return(result);
 800dbae:	697b      	ldr	r3, [r7, #20]
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d1e5      	bne.n	800db80 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	2220      	movs	r2, #32
 800dbb8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	2200      	movs	r2, #0
 800dbc0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800dbc4:	2303      	movs	r3, #3
 800dbc6:	e011      	b.n	800dbec <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	2220      	movs	r2, #32
 800dbcc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	2220      	movs	r2, #32
 800dbd2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	2200      	movs	r2, #0
 800dbda:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	2200      	movs	r2, #0
 800dbe0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	2200      	movs	r2, #0
 800dbe6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800dbea:	2300      	movs	r3, #0
}
 800dbec:	4618      	mov	r0, r3
 800dbee:	3758      	adds	r7, #88	@ 0x58
 800dbf0:	46bd      	mov	sp, r7
 800dbf2:	bd80      	pop	{r7, pc}

0800dbf4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800dbf4:	b580      	push	{r7, lr}
 800dbf6:	b084      	sub	sp, #16
 800dbf8:	af00      	add	r7, sp, #0
 800dbfa:	60f8      	str	r0, [r7, #12]
 800dbfc:	60b9      	str	r1, [r7, #8]
 800dbfe:	603b      	str	r3, [r7, #0]
 800dc00:	4613      	mov	r3, r2
 800dc02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dc04:	e04f      	b.n	800dca6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800dc06:	69bb      	ldr	r3, [r7, #24]
 800dc08:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc0c:	d04b      	beq.n	800dca6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800dc0e:	f7f7 fde3 	bl	80057d8 <HAL_GetTick>
 800dc12:	4602      	mov	r2, r0
 800dc14:	683b      	ldr	r3, [r7, #0]
 800dc16:	1ad3      	subs	r3, r2, r3
 800dc18:	69ba      	ldr	r2, [r7, #24]
 800dc1a:	429a      	cmp	r2, r3
 800dc1c:	d302      	bcc.n	800dc24 <UART_WaitOnFlagUntilTimeout+0x30>
 800dc1e:	69bb      	ldr	r3, [r7, #24]
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d101      	bne.n	800dc28 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800dc24:	2303      	movs	r3, #3
 800dc26:	e04e      	b.n	800dcc6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	f003 0304 	and.w	r3, r3, #4
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d037      	beq.n	800dca6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800dc36:	68bb      	ldr	r3, [r7, #8]
 800dc38:	2b80      	cmp	r3, #128	@ 0x80
 800dc3a:	d034      	beq.n	800dca6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800dc3c:	68bb      	ldr	r3, [r7, #8]
 800dc3e:	2b40      	cmp	r3, #64	@ 0x40
 800dc40:	d031      	beq.n	800dca6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	69db      	ldr	r3, [r3, #28]
 800dc48:	f003 0308 	and.w	r3, r3, #8
 800dc4c:	2b08      	cmp	r3, #8
 800dc4e:	d110      	bne.n	800dc72 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800dc50:	68fb      	ldr	r3, [r7, #12]
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	2208      	movs	r2, #8
 800dc56:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800dc58:	68f8      	ldr	r0, [r7, #12]
 800dc5a:	f000 f838 	bl	800dcce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	2208      	movs	r2, #8
 800dc62:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	2200      	movs	r2, #0
 800dc6a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800dc6e:	2301      	movs	r3, #1
 800dc70:	e029      	b.n	800dcc6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	69db      	ldr	r3, [r3, #28]
 800dc78:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800dc7c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800dc80:	d111      	bne.n	800dca6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800dc8a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800dc8c:	68f8      	ldr	r0, [r7, #12]
 800dc8e:	f000 f81e 	bl	800dcce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	2220      	movs	r2, #32
 800dc96:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	2200      	movs	r2, #0
 800dc9e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800dca2:	2303      	movs	r3, #3
 800dca4:	e00f      	b.n	800dcc6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	69da      	ldr	r2, [r3, #28]
 800dcac:	68bb      	ldr	r3, [r7, #8]
 800dcae:	4013      	ands	r3, r2
 800dcb0:	68ba      	ldr	r2, [r7, #8]
 800dcb2:	429a      	cmp	r2, r3
 800dcb4:	bf0c      	ite	eq
 800dcb6:	2301      	moveq	r3, #1
 800dcb8:	2300      	movne	r3, #0
 800dcba:	b2db      	uxtb	r3, r3
 800dcbc:	461a      	mov	r2, r3
 800dcbe:	79fb      	ldrb	r3, [r7, #7]
 800dcc0:	429a      	cmp	r2, r3
 800dcc2:	d0a0      	beq.n	800dc06 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800dcc4:	2300      	movs	r3, #0
}
 800dcc6:	4618      	mov	r0, r3
 800dcc8:	3710      	adds	r7, #16
 800dcca:	46bd      	mov	sp, r7
 800dccc:	bd80      	pop	{r7, pc}

0800dcce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800dcce:	b480      	push	{r7}
 800dcd0:	b095      	sub	sp, #84	@ 0x54
 800dcd2:	af00      	add	r7, sp, #0
 800dcd4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dcdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dcde:	e853 3f00 	ldrex	r3, [r3]
 800dce2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800dce4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dce6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800dcea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	461a      	mov	r2, r3
 800dcf2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dcf4:	643b      	str	r3, [r7, #64]	@ 0x40
 800dcf6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dcf8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800dcfa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800dcfc:	e841 2300 	strex	r3, r2, [r1]
 800dd00:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800dd02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d1e6      	bne.n	800dcd6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	3308      	adds	r3, #8
 800dd0e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd10:	6a3b      	ldr	r3, [r7, #32]
 800dd12:	e853 3f00 	ldrex	r3, [r3]
 800dd16:	61fb      	str	r3, [r7, #28]
   return(result);
 800dd18:	69fb      	ldr	r3, [r7, #28]
 800dd1a:	f023 0301 	bic.w	r3, r3, #1
 800dd1e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	3308      	adds	r3, #8
 800dd26:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800dd28:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800dd2a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd2c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800dd2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dd30:	e841 2300 	strex	r3, r2, [r1]
 800dd34:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800dd36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d1e5      	bne.n	800dd08 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800dd40:	2b01      	cmp	r3, #1
 800dd42:	d118      	bne.n	800dd76 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	e853 3f00 	ldrex	r3, [r3]
 800dd50:	60bb      	str	r3, [r7, #8]
   return(result);
 800dd52:	68bb      	ldr	r3, [r7, #8]
 800dd54:	f023 0310 	bic.w	r3, r3, #16
 800dd58:	647b      	str	r3, [r7, #68]	@ 0x44
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	461a      	mov	r2, r3
 800dd60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dd62:	61bb      	str	r3, [r7, #24]
 800dd64:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd66:	6979      	ldr	r1, [r7, #20]
 800dd68:	69ba      	ldr	r2, [r7, #24]
 800dd6a:	e841 2300 	strex	r3, r2, [r1]
 800dd6e:	613b      	str	r3, [r7, #16]
   return(result);
 800dd70:	693b      	ldr	r3, [r7, #16]
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d1e6      	bne.n	800dd44 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	2220      	movs	r2, #32
 800dd7a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	2200      	movs	r2, #0
 800dd82:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	2200      	movs	r2, #0
 800dd88:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800dd8a:	bf00      	nop
 800dd8c:	3754      	adds	r7, #84	@ 0x54
 800dd8e:	46bd      	mov	sp, r7
 800dd90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd94:	4770      	bx	lr
	...

0800dd98 <calloc>:
 800dd98:	4b02      	ldr	r3, [pc, #8]	@ (800dda4 <calloc+0xc>)
 800dd9a:	460a      	mov	r2, r1
 800dd9c:	4601      	mov	r1, r0
 800dd9e:	6818      	ldr	r0, [r3, #0]
 800dda0:	f000 b802 	b.w	800dda8 <_calloc_r>
 800dda4:	2000002c 	.word	0x2000002c

0800dda8 <_calloc_r>:
 800dda8:	b570      	push	{r4, r5, r6, lr}
 800ddaa:	fba1 5402 	umull	r5, r4, r1, r2
 800ddae:	b934      	cbnz	r4, 800ddbe <_calloc_r+0x16>
 800ddb0:	4629      	mov	r1, r5
 800ddb2:	f000 f83f 	bl	800de34 <_malloc_r>
 800ddb6:	4606      	mov	r6, r0
 800ddb8:	b928      	cbnz	r0, 800ddc6 <_calloc_r+0x1e>
 800ddba:	4630      	mov	r0, r6
 800ddbc:	bd70      	pop	{r4, r5, r6, pc}
 800ddbe:	220c      	movs	r2, #12
 800ddc0:	6002      	str	r2, [r0, #0]
 800ddc2:	2600      	movs	r6, #0
 800ddc4:	e7f9      	b.n	800ddba <_calloc_r+0x12>
 800ddc6:	462a      	mov	r2, r5
 800ddc8:	4621      	mov	r1, r4
 800ddca:	f000 fbb9 	bl	800e540 <memset>
 800ddce:	e7f4      	b.n	800ddba <_calloc_r+0x12>

0800ddd0 <malloc>:
 800ddd0:	4b02      	ldr	r3, [pc, #8]	@ (800dddc <malloc+0xc>)
 800ddd2:	4601      	mov	r1, r0
 800ddd4:	6818      	ldr	r0, [r3, #0]
 800ddd6:	f000 b82d 	b.w	800de34 <_malloc_r>
 800ddda:	bf00      	nop
 800dddc:	2000002c 	.word	0x2000002c

0800dde0 <free>:
 800dde0:	4b02      	ldr	r3, [pc, #8]	@ (800ddec <free+0xc>)
 800dde2:	4601      	mov	r1, r0
 800dde4:	6818      	ldr	r0, [r3, #0]
 800dde6:	f000 bc45 	b.w	800e674 <_free_r>
 800ddea:	bf00      	nop
 800ddec:	2000002c 	.word	0x2000002c

0800ddf0 <sbrk_aligned>:
 800ddf0:	b570      	push	{r4, r5, r6, lr}
 800ddf2:	4e0f      	ldr	r6, [pc, #60]	@ (800de30 <sbrk_aligned+0x40>)
 800ddf4:	460c      	mov	r4, r1
 800ddf6:	6831      	ldr	r1, [r6, #0]
 800ddf8:	4605      	mov	r5, r0
 800ddfa:	b911      	cbnz	r1, 800de02 <sbrk_aligned+0x12>
 800ddfc:	f000 fbdc 	bl	800e5b8 <_sbrk_r>
 800de00:	6030      	str	r0, [r6, #0]
 800de02:	4621      	mov	r1, r4
 800de04:	4628      	mov	r0, r5
 800de06:	f000 fbd7 	bl	800e5b8 <_sbrk_r>
 800de0a:	1c43      	adds	r3, r0, #1
 800de0c:	d103      	bne.n	800de16 <sbrk_aligned+0x26>
 800de0e:	f04f 34ff 	mov.w	r4, #4294967295
 800de12:	4620      	mov	r0, r4
 800de14:	bd70      	pop	{r4, r5, r6, pc}
 800de16:	1cc4      	adds	r4, r0, #3
 800de18:	f024 0403 	bic.w	r4, r4, #3
 800de1c:	42a0      	cmp	r0, r4
 800de1e:	d0f8      	beq.n	800de12 <sbrk_aligned+0x22>
 800de20:	1a21      	subs	r1, r4, r0
 800de22:	4628      	mov	r0, r5
 800de24:	f000 fbc8 	bl	800e5b8 <_sbrk_r>
 800de28:	3001      	adds	r0, #1
 800de2a:	d1f2      	bne.n	800de12 <sbrk_aligned+0x22>
 800de2c:	e7ef      	b.n	800de0e <sbrk_aligned+0x1e>
 800de2e:	bf00      	nop
 800de30:	20001108 	.word	0x20001108

0800de34 <_malloc_r>:
 800de34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800de38:	1ccd      	adds	r5, r1, #3
 800de3a:	f025 0503 	bic.w	r5, r5, #3
 800de3e:	3508      	adds	r5, #8
 800de40:	2d0c      	cmp	r5, #12
 800de42:	bf38      	it	cc
 800de44:	250c      	movcc	r5, #12
 800de46:	2d00      	cmp	r5, #0
 800de48:	4606      	mov	r6, r0
 800de4a:	db01      	blt.n	800de50 <_malloc_r+0x1c>
 800de4c:	42a9      	cmp	r1, r5
 800de4e:	d904      	bls.n	800de5a <_malloc_r+0x26>
 800de50:	230c      	movs	r3, #12
 800de52:	6033      	str	r3, [r6, #0]
 800de54:	2000      	movs	r0, #0
 800de56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800de5a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800df30 <_malloc_r+0xfc>
 800de5e:	f000 f869 	bl	800df34 <__malloc_lock>
 800de62:	f8d8 3000 	ldr.w	r3, [r8]
 800de66:	461c      	mov	r4, r3
 800de68:	bb44      	cbnz	r4, 800debc <_malloc_r+0x88>
 800de6a:	4629      	mov	r1, r5
 800de6c:	4630      	mov	r0, r6
 800de6e:	f7ff ffbf 	bl	800ddf0 <sbrk_aligned>
 800de72:	1c43      	adds	r3, r0, #1
 800de74:	4604      	mov	r4, r0
 800de76:	d158      	bne.n	800df2a <_malloc_r+0xf6>
 800de78:	f8d8 4000 	ldr.w	r4, [r8]
 800de7c:	4627      	mov	r7, r4
 800de7e:	2f00      	cmp	r7, #0
 800de80:	d143      	bne.n	800df0a <_malloc_r+0xd6>
 800de82:	2c00      	cmp	r4, #0
 800de84:	d04b      	beq.n	800df1e <_malloc_r+0xea>
 800de86:	6823      	ldr	r3, [r4, #0]
 800de88:	4639      	mov	r1, r7
 800de8a:	4630      	mov	r0, r6
 800de8c:	eb04 0903 	add.w	r9, r4, r3
 800de90:	f000 fb92 	bl	800e5b8 <_sbrk_r>
 800de94:	4581      	cmp	r9, r0
 800de96:	d142      	bne.n	800df1e <_malloc_r+0xea>
 800de98:	6821      	ldr	r1, [r4, #0]
 800de9a:	1a6d      	subs	r5, r5, r1
 800de9c:	4629      	mov	r1, r5
 800de9e:	4630      	mov	r0, r6
 800dea0:	f7ff ffa6 	bl	800ddf0 <sbrk_aligned>
 800dea4:	3001      	adds	r0, #1
 800dea6:	d03a      	beq.n	800df1e <_malloc_r+0xea>
 800dea8:	6823      	ldr	r3, [r4, #0]
 800deaa:	442b      	add	r3, r5
 800deac:	6023      	str	r3, [r4, #0]
 800deae:	f8d8 3000 	ldr.w	r3, [r8]
 800deb2:	685a      	ldr	r2, [r3, #4]
 800deb4:	bb62      	cbnz	r2, 800df10 <_malloc_r+0xdc>
 800deb6:	f8c8 7000 	str.w	r7, [r8]
 800deba:	e00f      	b.n	800dedc <_malloc_r+0xa8>
 800debc:	6822      	ldr	r2, [r4, #0]
 800debe:	1b52      	subs	r2, r2, r5
 800dec0:	d420      	bmi.n	800df04 <_malloc_r+0xd0>
 800dec2:	2a0b      	cmp	r2, #11
 800dec4:	d917      	bls.n	800def6 <_malloc_r+0xc2>
 800dec6:	1961      	adds	r1, r4, r5
 800dec8:	42a3      	cmp	r3, r4
 800deca:	6025      	str	r5, [r4, #0]
 800decc:	bf18      	it	ne
 800dece:	6059      	strne	r1, [r3, #4]
 800ded0:	6863      	ldr	r3, [r4, #4]
 800ded2:	bf08      	it	eq
 800ded4:	f8c8 1000 	streq.w	r1, [r8]
 800ded8:	5162      	str	r2, [r4, r5]
 800deda:	604b      	str	r3, [r1, #4]
 800dedc:	4630      	mov	r0, r6
 800dede:	f000 f82f 	bl	800df40 <__malloc_unlock>
 800dee2:	f104 000b 	add.w	r0, r4, #11
 800dee6:	1d23      	adds	r3, r4, #4
 800dee8:	f020 0007 	bic.w	r0, r0, #7
 800deec:	1ac2      	subs	r2, r0, r3
 800deee:	bf1c      	itt	ne
 800def0:	1a1b      	subne	r3, r3, r0
 800def2:	50a3      	strne	r3, [r4, r2]
 800def4:	e7af      	b.n	800de56 <_malloc_r+0x22>
 800def6:	6862      	ldr	r2, [r4, #4]
 800def8:	42a3      	cmp	r3, r4
 800defa:	bf0c      	ite	eq
 800defc:	f8c8 2000 	streq.w	r2, [r8]
 800df00:	605a      	strne	r2, [r3, #4]
 800df02:	e7eb      	b.n	800dedc <_malloc_r+0xa8>
 800df04:	4623      	mov	r3, r4
 800df06:	6864      	ldr	r4, [r4, #4]
 800df08:	e7ae      	b.n	800de68 <_malloc_r+0x34>
 800df0a:	463c      	mov	r4, r7
 800df0c:	687f      	ldr	r7, [r7, #4]
 800df0e:	e7b6      	b.n	800de7e <_malloc_r+0x4a>
 800df10:	461a      	mov	r2, r3
 800df12:	685b      	ldr	r3, [r3, #4]
 800df14:	42a3      	cmp	r3, r4
 800df16:	d1fb      	bne.n	800df10 <_malloc_r+0xdc>
 800df18:	2300      	movs	r3, #0
 800df1a:	6053      	str	r3, [r2, #4]
 800df1c:	e7de      	b.n	800dedc <_malloc_r+0xa8>
 800df1e:	230c      	movs	r3, #12
 800df20:	6033      	str	r3, [r6, #0]
 800df22:	4630      	mov	r0, r6
 800df24:	f000 f80c 	bl	800df40 <__malloc_unlock>
 800df28:	e794      	b.n	800de54 <_malloc_r+0x20>
 800df2a:	6005      	str	r5, [r0, #0]
 800df2c:	e7d6      	b.n	800dedc <_malloc_r+0xa8>
 800df2e:	bf00      	nop
 800df30:	2000110c 	.word	0x2000110c

0800df34 <__malloc_lock>:
 800df34:	4801      	ldr	r0, [pc, #4]	@ (800df3c <__malloc_lock+0x8>)
 800df36:	f000 bb8c 	b.w	800e652 <__retarget_lock_acquire_recursive>
 800df3a:	bf00      	nop
 800df3c:	20001250 	.word	0x20001250

0800df40 <__malloc_unlock>:
 800df40:	4801      	ldr	r0, [pc, #4]	@ (800df48 <__malloc_unlock+0x8>)
 800df42:	f000 bb87 	b.w	800e654 <__retarget_lock_release_recursive>
 800df46:	bf00      	nop
 800df48:	20001250 	.word	0x20001250

0800df4c <std>:
 800df4c:	2300      	movs	r3, #0
 800df4e:	b510      	push	{r4, lr}
 800df50:	4604      	mov	r4, r0
 800df52:	e9c0 3300 	strd	r3, r3, [r0]
 800df56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800df5a:	6083      	str	r3, [r0, #8]
 800df5c:	8181      	strh	r1, [r0, #12]
 800df5e:	6643      	str	r3, [r0, #100]	@ 0x64
 800df60:	81c2      	strh	r2, [r0, #14]
 800df62:	6183      	str	r3, [r0, #24]
 800df64:	4619      	mov	r1, r3
 800df66:	2208      	movs	r2, #8
 800df68:	305c      	adds	r0, #92	@ 0x5c
 800df6a:	f000 fae9 	bl	800e540 <memset>
 800df6e:	4b0d      	ldr	r3, [pc, #52]	@ (800dfa4 <std+0x58>)
 800df70:	6263      	str	r3, [r4, #36]	@ 0x24
 800df72:	4b0d      	ldr	r3, [pc, #52]	@ (800dfa8 <std+0x5c>)
 800df74:	62a3      	str	r3, [r4, #40]	@ 0x28
 800df76:	4b0d      	ldr	r3, [pc, #52]	@ (800dfac <std+0x60>)
 800df78:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800df7a:	4b0d      	ldr	r3, [pc, #52]	@ (800dfb0 <std+0x64>)
 800df7c:	6323      	str	r3, [r4, #48]	@ 0x30
 800df7e:	4b0d      	ldr	r3, [pc, #52]	@ (800dfb4 <std+0x68>)
 800df80:	6224      	str	r4, [r4, #32]
 800df82:	429c      	cmp	r4, r3
 800df84:	d006      	beq.n	800df94 <std+0x48>
 800df86:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800df8a:	4294      	cmp	r4, r2
 800df8c:	d002      	beq.n	800df94 <std+0x48>
 800df8e:	33d0      	adds	r3, #208	@ 0xd0
 800df90:	429c      	cmp	r4, r3
 800df92:	d105      	bne.n	800dfa0 <std+0x54>
 800df94:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800df98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800df9c:	f000 bb58 	b.w	800e650 <__retarget_lock_init_recursive>
 800dfa0:	bd10      	pop	{r4, pc}
 800dfa2:	bf00      	nop
 800dfa4:	0800e319 	.word	0x0800e319
 800dfa8:	0800e33b 	.word	0x0800e33b
 800dfac:	0800e373 	.word	0x0800e373
 800dfb0:	0800e397 	.word	0x0800e397
 800dfb4:	20001110 	.word	0x20001110

0800dfb8 <stdio_exit_handler>:
 800dfb8:	4a02      	ldr	r2, [pc, #8]	@ (800dfc4 <stdio_exit_handler+0xc>)
 800dfba:	4903      	ldr	r1, [pc, #12]	@ (800dfc8 <stdio_exit_handler+0x10>)
 800dfbc:	4803      	ldr	r0, [pc, #12]	@ (800dfcc <stdio_exit_handler+0x14>)
 800dfbe:	f000 b869 	b.w	800e094 <_fwalk_sglue>
 800dfc2:	bf00      	nop
 800dfc4:	20000020 	.word	0x20000020
 800dfc8:	0800f05d 	.word	0x0800f05d
 800dfcc:	20000030 	.word	0x20000030

0800dfd0 <cleanup_stdio>:
 800dfd0:	6841      	ldr	r1, [r0, #4]
 800dfd2:	4b0c      	ldr	r3, [pc, #48]	@ (800e004 <cleanup_stdio+0x34>)
 800dfd4:	4299      	cmp	r1, r3
 800dfd6:	b510      	push	{r4, lr}
 800dfd8:	4604      	mov	r4, r0
 800dfda:	d001      	beq.n	800dfe0 <cleanup_stdio+0x10>
 800dfdc:	f001 f83e 	bl	800f05c <_fflush_r>
 800dfe0:	68a1      	ldr	r1, [r4, #8]
 800dfe2:	4b09      	ldr	r3, [pc, #36]	@ (800e008 <cleanup_stdio+0x38>)
 800dfe4:	4299      	cmp	r1, r3
 800dfe6:	d002      	beq.n	800dfee <cleanup_stdio+0x1e>
 800dfe8:	4620      	mov	r0, r4
 800dfea:	f001 f837 	bl	800f05c <_fflush_r>
 800dfee:	68e1      	ldr	r1, [r4, #12]
 800dff0:	4b06      	ldr	r3, [pc, #24]	@ (800e00c <cleanup_stdio+0x3c>)
 800dff2:	4299      	cmp	r1, r3
 800dff4:	d004      	beq.n	800e000 <cleanup_stdio+0x30>
 800dff6:	4620      	mov	r0, r4
 800dff8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dffc:	f001 b82e 	b.w	800f05c <_fflush_r>
 800e000:	bd10      	pop	{r4, pc}
 800e002:	bf00      	nop
 800e004:	20001110 	.word	0x20001110
 800e008:	20001178 	.word	0x20001178
 800e00c:	200011e0 	.word	0x200011e0

0800e010 <global_stdio_init.part.0>:
 800e010:	b510      	push	{r4, lr}
 800e012:	4b0b      	ldr	r3, [pc, #44]	@ (800e040 <global_stdio_init.part.0+0x30>)
 800e014:	4c0b      	ldr	r4, [pc, #44]	@ (800e044 <global_stdio_init.part.0+0x34>)
 800e016:	4a0c      	ldr	r2, [pc, #48]	@ (800e048 <global_stdio_init.part.0+0x38>)
 800e018:	601a      	str	r2, [r3, #0]
 800e01a:	4620      	mov	r0, r4
 800e01c:	2200      	movs	r2, #0
 800e01e:	2104      	movs	r1, #4
 800e020:	f7ff ff94 	bl	800df4c <std>
 800e024:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800e028:	2201      	movs	r2, #1
 800e02a:	2109      	movs	r1, #9
 800e02c:	f7ff ff8e 	bl	800df4c <std>
 800e030:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800e034:	2202      	movs	r2, #2
 800e036:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e03a:	2112      	movs	r1, #18
 800e03c:	f7ff bf86 	b.w	800df4c <std>
 800e040:	20001248 	.word	0x20001248
 800e044:	20001110 	.word	0x20001110
 800e048:	0800dfb9 	.word	0x0800dfb9

0800e04c <__sfp_lock_acquire>:
 800e04c:	4801      	ldr	r0, [pc, #4]	@ (800e054 <__sfp_lock_acquire+0x8>)
 800e04e:	f000 bb00 	b.w	800e652 <__retarget_lock_acquire_recursive>
 800e052:	bf00      	nop
 800e054:	20001251 	.word	0x20001251

0800e058 <__sfp_lock_release>:
 800e058:	4801      	ldr	r0, [pc, #4]	@ (800e060 <__sfp_lock_release+0x8>)
 800e05a:	f000 bafb 	b.w	800e654 <__retarget_lock_release_recursive>
 800e05e:	bf00      	nop
 800e060:	20001251 	.word	0x20001251

0800e064 <__sinit>:
 800e064:	b510      	push	{r4, lr}
 800e066:	4604      	mov	r4, r0
 800e068:	f7ff fff0 	bl	800e04c <__sfp_lock_acquire>
 800e06c:	6a23      	ldr	r3, [r4, #32]
 800e06e:	b11b      	cbz	r3, 800e078 <__sinit+0x14>
 800e070:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e074:	f7ff bff0 	b.w	800e058 <__sfp_lock_release>
 800e078:	4b04      	ldr	r3, [pc, #16]	@ (800e08c <__sinit+0x28>)
 800e07a:	6223      	str	r3, [r4, #32]
 800e07c:	4b04      	ldr	r3, [pc, #16]	@ (800e090 <__sinit+0x2c>)
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	2b00      	cmp	r3, #0
 800e082:	d1f5      	bne.n	800e070 <__sinit+0xc>
 800e084:	f7ff ffc4 	bl	800e010 <global_stdio_init.part.0>
 800e088:	e7f2      	b.n	800e070 <__sinit+0xc>
 800e08a:	bf00      	nop
 800e08c:	0800dfd1 	.word	0x0800dfd1
 800e090:	20001248 	.word	0x20001248

0800e094 <_fwalk_sglue>:
 800e094:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e098:	4607      	mov	r7, r0
 800e09a:	4688      	mov	r8, r1
 800e09c:	4614      	mov	r4, r2
 800e09e:	2600      	movs	r6, #0
 800e0a0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e0a4:	f1b9 0901 	subs.w	r9, r9, #1
 800e0a8:	d505      	bpl.n	800e0b6 <_fwalk_sglue+0x22>
 800e0aa:	6824      	ldr	r4, [r4, #0]
 800e0ac:	2c00      	cmp	r4, #0
 800e0ae:	d1f7      	bne.n	800e0a0 <_fwalk_sglue+0xc>
 800e0b0:	4630      	mov	r0, r6
 800e0b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e0b6:	89ab      	ldrh	r3, [r5, #12]
 800e0b8:	2b01      	cmp	r3, #1
 800e0ba:	d907      	bls.n	800e0cc <_fwalk_sglue+0x38>
 800e0bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e0c0:	3301      	adds	r3, #1
 800e0c2:	d003      	beq.n	800e0cc <_fwalk_sglue+0x38>
 800e0c4:	4629      	mov	r1, r5
 800e0c6:	4638      	mov	r0, r7
 800e0c8:	47c0      	blx	r8
 800e0ca:	4306      	orrs	r6, r0
 800e0cc:	3568      	adds	r5, #104	@ 0x68
 800e0ce:	e7e9      	b.n	800e0a4 <_fwalk_sglue+0x10>

0800e0d0 <iprintf>:
 800e0d0:	b40f      	push	{r0, r1, r2, r3}
 800e0d2:	b507      	push	{r0, r1, r2, lr}
 800e0d4:	4906      	ldr	r1, [pc, #24]	@ (800e0f0 <iprintf+0x20>)
 800e0d6:	ab04      	add	r3, sp, #16
 800e0d8:	6808      	ldr	r0, [r1, #0]
 800e0da:	f853 2b04 	ldr.w	r2, [r3], #4
 800e0de:	6881      	ldr	r1, [r0, #8]
 800e0e0:	9301      	str	r3, [sp, #4]
 800e0e2:	f000 fc93 	bl	800ea0c <_vfiprintf_r>
 800e0e6:	b003      	add	sp, #12
 800e0e8:	f85d eb04 	ldr.w	lr, [sp], #4
 800e0ec:	b004      	add	sp, #16
 800e0ee:	4770      	bx	lr
 800e0f0:	2000002c 	.word	0x2000002c

0800e0f4 <_puts_r>:
 800e0f4:	6a03      	ldr	r3, [r0, #32]
 800e0f6:	b570      	push	{r4, r5, r6, lr}
 800e0f8:	6884      	ldr	r4, [r0, #8]
 800e0fa:	4605      	mov	r5, r0
 800e0fc:	460e      	mov	r6, r1
 800e0fe:	b90b      	cbnz	r3, 800e104 <_puts_r+0x10>
 800e100:	f7ff ffb0 	bl	800e064 <__sinit>
 800e104:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e106:	07db      	lsls	r3, r3, #31
 800e108:	d405      	bmi.n	800e116 <_puts_r+0x22>
 800e10a:	89a3      	ldrh	r3, [r4, #12]
 800e10c:	0598      	lsls	r0, r3, #22
 800e10e:	d402      	bmi.n	800e116 <_puts_r+0x22>
 800e110:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e112:	f000 fa9e 	bl	800e652 <__retarget_lock_acquire_recursive>
 800e116:	89a3      	ldrh	r3, [r4, #12]
 800e118:	0719      	lsls	r1, r3, #28
 800e11a:	d502      	bpl.n	800e122 <_puts_r+0x2e>
 800e11c:	6923      	ldr	r3, [r4, #16]
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d135      	bne.n	800e18e <_puts_r+0x9a>
 800e122:	4621      	mov	r1, r4
 800e124:	4628      	mov	r0, r5
 800e126:	f000 f9b5 	bl	800e494 <__swsetup_r>
 800e12a:	b380      	cbz	r0, 800e18e <_puts_r+0x9a>
 800e12c:	f04f 35ff 	mov.w	r5, #4294967295
 800e130:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e132:	07da      	lsls	r2, r3, #31
 800e134:	d405      	bmi.n	800e142 <_puts_r+0x4e>
 800e136:	89a3      	ldrh	r3, [r4, #12]
 800e138:	059b      	lsls	r3, r3, #22
 800e13a:	d402      	bmi.n	800e142 <_puts_r+0x4e>
 800e13c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e13e:	f000 fa89 	bl	800e654 <__retarget_lock_release_recursive>
 800e142:	4628      	mov	r0, r5
 800e144:	bd70      	pop	{r4, r5, r6, pc}
 800e146:	2b00      	cmp	r3, #0
 800e148:	da04      	bge.n	800e154 <_puts_r+0x60>
 800e14a:	69a2      	ldr	r2, [r4, #24]
 800e14c:	429a      	cmp	r2, r3
 800e14e:	dc17      	bgt.n	800e180 <_puts_r+0x8c>
 800e150:	290a      	cmp	r1, #10
 800e152:	d015      	beq.n	800e180 <_puts_r+0x8c>
 800e154:	6823      	ldr	r3, [r4, #0]
 800e156:	1c5a      	adds	r2, r3, #1
 800e158:	6022      	str	r2, [r4, #0]
 800e15a:	7019      	strb	r1, [r3, #0]
 800e15c:	68a3      	ldr	r3, [r4, #8]
 800e15e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800e162:	3b01      	subs	r3, #1
 800e164:	60a3      	str	r3, [r4, #8]
 800e166:	2900      	cmp	r1, #0
 800e168:	d1ed      	bne.n	800e146 <_puts_r+0x52>
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	da11      	bge.n	800e192 <_puts_r+0x9e>
 800e16e:	4622      	mov	r2, r4
 800e170:	210a      	movs	r1, #10
 800e172:	4628      	mov	r0, r5
 800e174:	f000 f950 	bl	800e418 <__swbuf_r>
 800e178:	3001      	adds	r0, #1
 800e17a:	d0d7      	beq.n	800e12c <_puts_r+0x38>
 800e17c:	250a      	movs	r5, #10
 800e17e:	e7d7      	b.n	800e130 <_puts_r+0x3c>
 800e180:	4622      	mov	r2, r4
 800e182:	4628      	mov	r0, r5
 800e184:	f000 f948 	bl	800e418 <__swbuf_r>
 800e188:	3001      	adds	r0, #1
 800e18a:	d1e7      	bne.n	800e15c <_puts_r+0x68>
 800e18c:	e7ce      	b.n	800e12c <_puts_r+0x38>
 800e18e:	3e01      	subs	r6, #1
 800e190:	e7e4      	b.n	800e15c <_puts_r+0x68>
 800e192:	6823      	ldr	r3, [r4, #0]
 800e194:	1c5a      	adds	r2, r3, #1
 800e196:	6022      	str	r2, [r4, #0]
 800e198:	220a      	movs	r2, #10
 800e19a:	701a      	strb	r2, [r3, #0]
 800e19c:	e7ee      	b.n	800e17c <_puts_r+0x88>
	...

0800e1a0 <puts>:
 800e1a0:	4b02      	ldr	r3, [pc, #8]	@ (800e1ac <puts+0xc>)
 800e1a2:	4601      	mov	r1, r0
 800e1a4:	6818      	ldr	r0, [r3, #0]
 800e1a6:	f7ff bfa5 	b.w	800e0f4 <_puts_r>
 800e1aa:	bf00      	nop
 800e1ac:	2000002c 	.word	0x2000002c

0800e1b0 <setvbuf>:
 800e1b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e1b4:	461d      	mov	r5, r3
 800e1b6:	4b57      	ldr	r3, [pc, #348]	@ (800e314 <setvbuf+0x164>)
 800e1b8:	681f      	ldr	r7, [r3, #0]
 800e1ba:	4604      	mov	r4, r0
 800e1bc:	460e      	mov	r6, r1
 800e1be:	4690      	mov	r8, r2
 800e1c0:	b127      	cbz	r7, 800e1cc <setvbuf+0x1c>
 800e1c2:	6a3b      	ldr	r3, [r7, #32]
 800e1c4:	b913      	cbnz	r3, 800e1cc <setvbuf+0x1c>
 800e1c6:	4638      	mov	r0, r7
 800e1c8:	f7ff ff4c 	bl	800e064 <__sinit>
 800e1cc:	f1b8 0f02 	cmp.w	r8, #2
 800e1d0:	d006      	beq.n	800e1e0 <setvbuf+0x30>
 800e1d2:	f1b8 0f01 	cmp.w	r8, #1
 800e1d6:	f200 809a 	bhi.w	800e30e <setvbuf+0x15e>
 800e1da:	2d00      	cmp	r5, #0
 800e1dc:	f2c0 8097 	blt.w	800e30e <setvbuf+0x15e>
 800e1e0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e1e2:	07d9      	lsls	r1, r3, #31
 800e1e4:	d405      	bmi.n	800e1f2 <setvbuf+0x42>
 800e1e6:	89a3      	ldrh	r3, [r4, #12]
 800e1e8:	059a      	lsls	r2, r3, #22
 800e1ea:	d402      	bmi.n	800e1f2 <setvbuf+0x42>
 800e1ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e1ee:	f000 fa30 	bl	800e652 <__retarget_lock_acquire_recursive>
 800e1f2:	4621      	mov	r1, r4
 800e1f4:	4638      	mov	r0, r7
 800e1f6:	f000 ff31 	bl	800f05c <_fflush_r>
 800e1fa:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e1fc:	b141      	cbz	r1, 800e210 <setvbuf+0x60>
 800e1fe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e202:	4299      	cmp	r1, r3
 800e204:	d002      	beq.n	800e20c <setvbuf+0x5c>
 800e206:	4638      	mov	r0, r7
 800e208:	f000 fa34 	bl	800e674 <_free_r>
 800e20c:	2300      	movs	r3, #0
 800e20e:	6363      	str	r3, [r4, #52]	@ 0x34
 800e210:	2300      	movs	r3, #0
 800e212:	61a3      	str	r3, [r4, #24]
 800e214:	6063      	str	r3, [r4, #4]
 800e216:	89a3      	ldrh	r3, [r4, #12]
 800e218:	061b      	lsls	r3, r3, #24
 800e21a:	d503      	bpl.n	800e224 <setvbuf+0x74>
 800e21c:	6921      	ldr	r1, [r4, #16]
 800e21e:	4638      	mov	r0, r7
 800e220:	f000 fa28 	bl	800e674 <_free_r>
 800e224:	89a3      	ldrh	r3, [r4, #12]
 800e226:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 800e22a:	f023 0303 	bic.w	r3, r3, #3
 800e22e:	f1b8 0f02 	cmp.w	r8, #2
 800e232:	81a3      	strh	r3, [r4, #12]
 800e234:	d061      	beq.n	800e2fa <setvbuf+0x14a>
 800e236:	ab01      	add	r3, sp, #4
 800e238:	466a      	mov	r2, sp
 800e23a:	4621      	mov	r1, r4
 800e23c:	4638      	mov	r0, r7
 800e23e:	f000 ff35 	bl	800f0ac <__swhatbuf_r>
 800e242:	89a3      	ldrh	r3, [r4, #12]
 800e244:	4318      	orrs	r0, r3
 800e246:	81a0      	strh	r0, [r4, #12]
 800e248:	bb2d      	cbnz	r5, 800e296 <setvbuf+0xe6>
 800e24a:	9d00      	ldr	r5, [sp, #0]
 800e24c:	4628      	mov	r0, r5
 800e24e:	f7ff fdbf 	bl	800ddd0 <malloc>
 800e252:	4606      	mov	r6, r0
 800e254:	2800      	cmp	r0, #0
 800e256:	d152      	bne.n	800e2fe <setvbuf+0x14e>
 800e258:	f8dd 9000 	ldr.w	r9, [sp]
 800e25c:	45a9      	cmp	r9, r5
 800e25e:	d140      	bne.n	800e2e2 <setvbuf+0x132>
 800e260:	f04f 35ff 	mov.w	r5, #4294967295
 800e264:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e268:	f043 0202 	orr.w	r2, r3, #2
 800e26c:	81a2      	strh	r2, [r4, #12]
 800e26e:	2200      	movs	r2, #0
 800e270:	60a2      	str	r2, [r4, #8]
 800e272:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 800e276:	6022      	str	r2, [r4, #0]
 800e278:	6122      	str	r2, [r4, #16]
 800e27a:	2201      	movs	r2, #1
 800e27c:	6162      	str	r2, [r4, #20]
 800e27e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e280:	07d6      	lsls	r6, r2, #31
 800e282:	d404      	bmi.n	800e28e <setvbuf+0xde>
 800e284:	0598      	lsls	r0, r3, #22
 800e286:	d402      	bmi.n	800e28e <setvbuf+0xde>
 800e288:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e28a:	f000 f9e3 	bl	800e654 <__retarget_lock_release_recursive>
 800e28e:	4628      	mov	r0, r5
 800e290:	b003      	add	sp, #12
 800e292:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e296:	2e00      	cmp	r6, #0
 800e298:	d0d8      	beq.n	800e24c <setvbuf+0x9c>
 800e29a:	6a3b      	ldr	r3, [r7, #32]
 800e29c:	b913      	cbnz	r3, 800e2a4 <setvbuf+0xf4>
 800e29e:	4638      	mov	r0, r7
 800e2a0:	f7ff fee0 	bl	800e064 <__sinit>
 800e2a4:	f1b8 0f01 	cmp.w	r8, #1
 800e2a8:	bf08      	it	eq
 800e2aa:	89a3      	ldrheq	r3, [r4, #12]
 800e2ac:	6026      	str	r6, [r4, #0]
 800e2ae:	bf04      	itt	eq
 800e2b0:	f043 0301 	orreq.w	r3, r3, #1
 800e2b4:	81a3      	strheq	r3, [r4, #12]
 800e2b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e2ba:	f013 0208 	ands.w	r2, r3, #8
 800e2be:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800e2c2:	d01e      	beq.n	800e302 <setvbuf+0x152>
 800e2c4:	07d9      	lsls	r1, r3, #31
 800e2c6:	bf41      	itttt	mi
 800e2c8:	2200      	movmi	r2, #0
 800e2ca:	426d      	negmi	r5, r5
 800e2cc:	60a2      	strmi	r2, [r4, #8]
 800e2ce:	61a5      	strmi	r5, [r4, #24]
 800e2d0:	bf58      	it	pl
 800e2d2:	60a5      	strpl	r5, [r4, #8]
 800e2d4:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e2d6:	07d2      	lsls	r2, r2, #31
 800e2d8:	d401      	bmi.n	800e2de <setvbuf+0x12e>
 800e2da:	059b      	lsls	r3, r3, #22
 800e2dc:	d513      	bpl.n	800e306 <setvbuf+0x156>
 800e2de:	2500      	movs	r5, #0
 800e2e0:	e7d5      	b.n	800e28e <setvbuf+0xde>
 800e2e2:	4648      	mov	r0, r9
 800e2e4:	f7ff fd74 	bl	800ddd0 <malloc>
 800e2e8:	4606      	mov	r6, r0
 800e2ea:	2800      	cmp	r0, #0
 800e2ec:	d0b8      	beq.n	800e260 <setvbuf+0xb0>
 800e2ee:	89a3      	ldrh	r3, [r4, #12]
 800e2f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e2f4:	81a3      	strh	r3, [r4, #12]
 800e2f6:	464d      	mov	r5, r9
 800e2f8:	e7cf      	b.n	800e29a <setvbuf+0xea>
 800e2fa:	2500      	movs	r5, #0
 800e2fc:	e7b2      	b.n	800e264 <setvbuf+0xb4>
 800e2fe:	46a9      	mov	r9, r5
 800e300:	e7f5      	b.n	800e2ee <setvbuf+0x13e>
 800e302:	60a2      	str	r2, [r4, #8]
 800e304:	e7e6      	b.n	800e2d4 <setvbuf+0x124>
 800e306:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e308:	f000 f9a4 	bl	800e654 <__retarget_lock_release_recursive>
 800e30c:	e7e7      	b.n	800e2de <setvbuf+0x12e>
 800e30e:	f04f 35ff 	mov.w	r5, #4294967295
 800e312:	e7bc      	b.n	800e28e <setvbuf+0xde>
 800e314:	2000002c 	.word	0x2000002c

0800e318 <__sread>:
 800e318:	b510      	push	{r4, lr}
 800e31a:	460c      	mov	r4, r1
 800e31c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e320:	f000 f938 	bl	800e594 <_read_r>
 800e324:	2800      	cmp	r0, #0
 800e326:	bfab      	itete	ge
 800e328:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800e32a:	89a3      	ldrhlt	r3, [r4, #12]
 800e32c:	181b      	addge	r3, r3, r0
 800e32e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800e332:	bfac      	ite	ge
 800e334:	6563      	strge	r3, [r4, #84]	@ 0x54
 800e336:	81a3      	strhlt	r3, [r4, #12]
 800e338:	bd10      	pop	{r4, pc}

0800e33a <__swrite>:
 800e33a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e33e:	461f      	mov	r7, r3
 800e340:	898b      	ldrh	r3, [r1, #12]
 800e342:	05db      	lsls	r3, r3, #23
 800e344:	4605      	mov	r5, r0
 800e346:	460c      	mov	r4, r1
 800e348:	4616      	mov	r6, r2
 800e34a:	d505      	bpl.n	800e358 <__swrite+0x1e>
 800e34c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e350:	2302      	movs	r3, #2
 800e352:	2200      	movs	r2, #0
 800e354:	f000 f90c 	bl	800e570 <_lseek_r>
 800e358:	89a3      	ldrh	r3, [r4, #12]
 800e35a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e35e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e362:	81a3      	strh	r3, [r4, #12]
 800e364:	4632      	mov	r2, r6
 800e366:	463b      	mov	r3, r7
 800e368:	4628      	mov	r0, r5
 800e36a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e36e:	f000 b933 	b.w	800e5d8 <_write_r>

0800e372 <__sseek>:
 800e372:	b510      	push	{r4, lr}
 800e374:	460c      	mov	r4, r1
 800e376:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e37a:	f000 f8f9 	bl	800e570 <_lseek_r>
 800e37e:	1c43      	adds	r3, r0, #1
 800e380:	89a3      	ldrh	r3, [r4, #12]
 800e382:	bf15      	itete	ne
 800e384:	6560      	strne	r0, [r4, #84]	@ 0x54
 800e386:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800e38a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800e38e:	81a3      	strheq	r3, [r4, #12]
 800e390:	bf18      	it	ne
 800e392:	81a3      	strhne	r3, [r4, #12]
 800e394:	bd10      	pop	{r4, pc}

0800e396 <__sclose>:
 800e396:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e39a:	f000 b8d9 	b.w	800e550 <_close_r>

0800e39e <_vsniprintf_r>:
 800e39e:	b530      	push	{r4, r5, lr}
 800e3a0:	4614      	mov	r4, r2
 800e3a2:	2c00      	cmp	r4, #0
 800e3a4:	b09b      	sub	sp, #108	@ 0x6c
 800e3a6:	4605      	mov	r5, r0
 800e3a8:	461a      	mov	r2, r3
 800e3aa:	da05      	bge.n	800e3b8 <_vsniprintf_r+0x1a>
 800e3ac:	238b      	movs	r3, #139	@ 0x8b
 800e3ae:	6003      	str	r3, [r0, #0]
 800e3b0:	f04f 30ff 	mov.w	r0, #4294967295
 800e3b4:	b01b      	add	sp, #108	@ 0x6c
 800e3b6:	bd30      	pop	{r4, r5, pc}
 800e3b8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800e3bc:	f8ad 300c 	strh.w	r3, [sp, #12]
 800e3c0:	f04f 0300 	mov.w	r3, #0
 800e3c4:	9319      	str	r3, [sp, #100]	@ 0x64
 800e3c6:	bf14      	ite	ne
 800e3c8:	f104 33ff 	addne.w	r3, r4, #4294967295
 800e3cc:	4623      	moveq	r3, r4
 800e3ce:	9302      	str	r3, [sp, #8]
 800e3d0:	9305      	str	r3, [sp, #20]
 800e3d2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800e3d6:	9100      	str	r1, [sp, #0]
 800e3d8:	9104      	str	r1, [sp, #16]
 800e3da:	f8ad 300e 	strh.w	r3, [sp, #14]
 800e3de:	4669      	mov	r1, sp
 800e3e0:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800e3e2:	f000 f9ed 	bl	800e7c0 <_svfiprintf_r>
 800e3e6:	1c43      	adds	r3, r0, #1
 800e3e8:	bfbc      	itt	lt
 800e3ea:	238b      	movlt	r3, #139	@ 0x8b
 800e3ec:	602b      	strlt	r3, [r5, #0]
 800e3ee:	2c00      	cmp	r4, #0
 800e3f0:	d0e0      	beq.n	800e3b4 <_vsniprintf_r+0x16>
 800e3f2:	9b00      	ldr	r3, [sp, #0]
 800e3f4:	2200      	movs	r2, #0
 800e3f6:	701a      	strb	r2, [r3, #0]
 800e3f8:	e7dc      	b.n	800e3b4 <_vsniprintf_r+0x16>
	...

0800e3fc <vsniprintf>:
 800e3fc:	b507      	push	{r0, r1, r2, lr}
 800e3fe:	9300      	str	r3, [sp, #0]
 800e400:	4613      	mov	r3, r2
 800e402:	460a      	mov	r2, r1
 800e404:	4601      	mov	r1, r0
 800e406:	4803      	ldr	r0, [pc, #12]	@ (800e414 <vsniprintf+0x18>)
 800e408:	6800      	ldr	r0, [r0, #0]
 800e40a:	f7ff ffc8 	bl	800e39e <_vsniprintf_r>
 800e40e:	b003      	add	sp, #12
 800e410:	f85d fb04 	ldr.w	pc, [sp], #4
 800e414:	2000002c 	.word	0x2000002c

0800e418 <__swbuf_r>:
 800e418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e41a:	460e      	mov	r6, r1
 800e41c:	4614      	mov	r4, r2
 800e41e:	4605      	mov	r5, r0
 800e420:	b118      	cbz	r0, 800e42a <__swbuf_r+0x12>
 800e422:	6a03      	ldr	r3, [r0, #32]
 800e424:	b90b      	cbnz	r3, 800e42a <__swbuf_r+0x12>
 800e426:	f7ff fe1d 	bl	800e064 <__sinit>
 800e42a:	69a3      	ldr	r3, [r4, #24]
 800e42c:	60a3      	str	r3, [r4, #8]
 800e42e:	89a3      	ldrh	r3, [r4, #12]
 800e430:	071a      	lsls	r2, r3, #28
 800e432:	d501      	bpl.n	800e438 <__swbuf_r+0x20>
 800e434:	6923      	ldr	r3, [r4, #16]
 800e436:	b943      	cbnz	r3, 800e44a <__swbuf_r+0x32>
 800e438:	4621      	mov	r1, r4
 800e43a:	4628      	mov	r0, r5
 800e43c:	f000 f82a 	bl	800e494 <__swsetup_r>
 800e440:	b118      	cbz	r0, 800e44a <__swbuf_r+0x32>
 800e442:	f04f 37ff 	mov.w	r7, #4294967295
 800e446:	4638      	mov	r0, r7
 800e448:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e44a:	6823      	ldr	r3, [r4, #0]
 800e44c:	6922      	ldr	r2, [r4, #16]
 800e44e:	1a98      	subs	r0, r3, r2
 800e450:	6963      	ldr	r3, [r4, #20]
 800e452:	b2f6      	uxtb	r6, r6
 800e454:	4283      	cmp	r3, r0
 800e456:	4637      	mov	r7, r6
 800e458:	dc05      	bgt.n	800e466 <__swbuf_r+0x4e>
 800e45a:	4621      	mov	r1, r4
 800e45c:	4628      	mov	r0, r5
 800e45e:	f000 fdfd 	bl	800f05c <_fflush_r>
 800e462:	2800      	cmp	r0, #0
 800e464:	d1ed      	bne.n	800e442 <__swbuf_r+0x2a>
 800e466:	68a3      	ldr	r3, [r4, #8]
 800e468:	3b01      	subs	r3, #1
 800e46a:	60a3      	str	r3, [r4, #8]
 800e46c:	6823      	ldr	r3, [r4, #0]
 800e46e:	1c5a      	adds	r2, r3, #1
 800e470:	6022      	str	r2, [r4, #0]
 800e472:	701e      	strb	r6, [r3, #0]
 800e474:	6962      	ldr	r2, [r4, #20]
 800e476:	1c43      	adds	r3, r0, #1
 800e478:	429a      	cmp	r2, r3
 800e47a:	d004      	beq.n	800e486 <__swbuf_r+0x6e>
 800e47c:	89a3      	ldrh	r3, [r4, #12]
 800e47e:	07db      	lsls	r3, r3, #31
 800e480:	d5e1      	bpl.n	800e446 <__swbuf_r+0x2e>
 800e482:	2e0a      	cmp	r6, #10
 800e484:	d1df      	bne.n	800e446 <__swbuf_r+0x2e>
 800e486:	4621      	mov	r1, r4
 800e488:	4628      	mov	r0, r5
 800e48a:	f000 fde7 	bl	800f05c <_fflush_r>
 800e48e:	2800      	cmp	r0, #0
 800e490:	d0d9      	beq.n	800e446 <__swbuf_r+0x2e>
 800e492:	e7d6      	b.n	800e442 <__swbuf_r+0x2a>

0800e494 <__swsetup_r>:
 800e494:	b538      	push	{r3, r4, r5, lr}
 800e496:	4b29      	ldr	r3, [pc, #164]	@ (800e53c <__swsetup_r+0xa8>)
 800e498:	4605      	mov	r5, r0
 800e49a:	6818      	ldr	r0, [r3, #0]
 800e49c:	460c      	mov	r4, r1
 800e49e:	b118      	cbz	r0, 800e4a8 <__swsetup_r+0x14>
 800e4a0:	6a03      	ldr	r3, [r0, #32]
 800e4a2:	b90b      	cbnz	r3, 800e4a8 <__swsetup_r+0x14>
 800e4a4:	f7ff fdde 	bl	800e064 <__sinit>
 800e4a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e4ac:	0719      	lsls	r1, r3, #28
 800e4ae:	d422      	bmi.n	800e4f6 <__swsetup_r+0x62>
 800e4b0:	06da      	lsls	r2, r3, #27
 800e4b2:	d407      	bmi.n	800e4c4 <__swsetup_r+0x30>
 800e4b4:	2209      	movs	r2, #9
 800e4b6:	602a      	str	r2, [r5, #0]
 800e4b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e4bc:	81a3      	strh	r3, [r4, #12]
 800e4be:	f04f 30ff 	mov.w	r0, #4294967295
 800e4c2:	e033      	b.n	800e52c <__swsetup_r+0x98>
 800e4c4:	0758      	lsls	r0, r3, #29
 800e4c6:	d512      	bpl.n	800e4ee <__swsetup_r+0x5a>
 800e4c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e4ca:	b141      	cbz	r1, 800e4de <__swsetup_r+0x4a>
 800e4cc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e4d0:	4299      	cmp	r1, r3
 800e4d2:	d002      	beq.n	800e4da <__swsetup_r+0x46>
 800e4d4:	4628      	mov	r0, r5
 800e4d6:	f000 f8cd 	bl	800e674 <_free_r>
 800e4da:	2300      	movs	r3, #0
 800e4dc:	6363      	str	r3, [r4, #52]	@ 0x34
 800e4de:	89a3      	ldrh	r3, [r4, #12]
 800e4e0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e4e4:	81a3      	strh	r3, [r4, #12]
 800e4e6:	2300      	movs	r3, #0
 800e4e8:	6063      	str	r3, [r4, #4]
 800e4ea:	6923      	ldr	r3, [r4, #16]
 800e4ec:	6023      	str	r3, [r4, #0]
 800e4ee:	89a3      	ldrh	r3, [r4, #12]
 800e4f0:	f043 0308 	orr.w	r3, r3, #8
 800e4f4:	81a3      	strh	r3, [r4, #12]
 800e4f6:	6923      	ldr	r3, [r4, #16]
 800e4f8:	b94b      	cbnz	r3, 800e50e <__swsetup_r+0x7a>
 800e4fa:	89a3      	ldrh	r3, [r4, #12]
 800e4fc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e500:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e504:	d003      	beq.n	800e50e <__swsetup_r+0x7a>
 800e506:	4621      	mov	r1, r4
 800e508:	4628      	mov	r0, r5
 800e50a:	f000 fdf5 	bl	800f0f8 <__smakebuf_r>
 800e50e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e512:	f013 0201 	ands.w	r2, r3, #1
 800e516:	d00a      	beq.n	800e52e <__swsetup_r+0x9a>
 800e518:	2200      	movs	r2, #0
 800e51a:	60a2      	str	r2, [r4, #8]
 800e51c:	6962      	ldr	r2, [r4, #20]
 800e51e:	4252      	negs	r2, r2
 800e520:	61a2      	str	r2, [r4, #24]
 800e522:	6922      	ldr	r2, [r4, #16]
 800e524:	b942      	cbnz	r2, 800e538 <__swsetup_r+0xa4>
 800e526:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e52a:	d1c5      	bne.n	800e4b8 <__swsetup_r+0x24>
 800e52c:	bd38      	pop	{r3, r4, r5, pc}
 800e52e:	0799      	lsls	r1, r3, #30
 800e530:	bf58      	it	pl
 800e532:	6962      	ldrpl	r2, [r4, #20]
 800e534:	60a2      	str	r2, [r4, #8]
 800e536:	e7f4      	b.n	800e522 <__swsetup_r+0x8e>
 800e538:	2000      	movs	r0, #0
 800e53a:	e7f7      	b.n	800e52c <__swsetup_r+0x98>
 800e53c:	2000002c 	.word	0x2000002c

0800e540 <memset>:
 800e540:	4402      	add	r2, r0
 800e542:	4603      	mov	r3, r0
 800e544:	4293      	cmp	r3, r2
 800e546:	d100      	bne.n	800e54a <memset+0xa>
 800e548:	4770      	bx	lr
 800e54a:	f803 1b01 	strb.w	r1, [r3], #1
 800e54e:	e7f9      	b.n	800e544 <memset+0x4>

0800e550 <_close_r>:
 800e550:	b538      	push	{r3, r4, r5, lr}
 800e552:	4d06      	ldr	r5, [pc, #24]	@ (800e56c <_close_r+0x1c>)
 800e554:	2300      	movs	r3, #0
 800e556:	4604      	mov	r4, r0
 800e558:	4608      	mov	r0, r1
 800e55a:	602b      	str	r3, [r5, #0]
 800e55c:	f7f6 fcc6 	bl	8004eec <_close>
 800e560:	1c43      	adds	r3, r0, #1
 800e562:	d102      	bne.n	800e56a <_close_r+0x1a>
 800e564:	682b      	ldr	r3, [r5, #0]
 800e566:	b103      	cbz	r3, 800e56a <_close_r+0x1a>
 800e568:	6023      	str	r3, [r4, #0]
 800e56a:	bd38      	pop	{r3, r4, r5, pc}
 800e56c:	2000124c 	.word	0x2000124c

0800e570 <_lseek_r>:
 800e570:	b538      	push	{r3, r4, r5, lr}
 800e572:	4d07      	ldr	r5, [pc, #28]	@ (800e590 <_lseek_r+0x20>)
 800e574:	4604      	mov	r4, r0
 800e576:	4608      	mov	r0, r1
 800e578:	4611      	mov	r1, r2
 800e57a:	2200      	movs	r2, #0
 800e57c:	602a      	str	r2, [r5, #0]
 800e57e:	461a      	mov	r2, r3
 800e580:	f7f6 fcdb 	bl	8004f3a <_lseek>
 800e584:	1c43      	adds	r3, r0, #1
 800e586:	d102      	bne.n	800e58e <_lseek_r+0x1e>
 800e588:	682b      	ldr	r3, [r5, #0]
 800e58a:	b103      	cbz	r3, 800e58e <_lseek_r+0x1e>
 800e58c:	6023      	str	r3, [r4, #0]
 800e58e:	bd38      	pop	{r3, r4, r5, pc}
 800e590:	2000124c 	.word	0x2000124c

0800e594 <_read_r>:
 800e594:	b538      	push	{r3, r4, r5, lr}
 800e596:	4d07      	ldr	r5, [pc, #28]	@ (800e5b4 <_read_r+0x20>)
 800e598:	4604      	mov	r4, r0
 800e59a:	4608      	mov	r0, r1
 800e59c:	4611      	mov	r1, r2
 800e59e:	2200      	movs	r2, #0
 800e5a0:	602a      	str	r2, [r5, #0]
 800e5a2:	461a      	mov	r2, r3
 800e5a4:	f7f6 fc85 	bl	8004eb2 <_read>
 800e5a8:	1c43      	adds	r3, r0, #1
 800e5aa:	d102      	bne.n	800e5b2 <_read_r+0x1e>
 800e5ac:	682b      	ldr	r3, [r5, #0]
 800e5ae:	b103      	cbz	r3, 800e5b2 <_read_r+0x1e>
 800e5b0:	6023      	str	r3, [r4, #0]
 800e5b2:	bd38      	pop	{r3, r4, r5, pc}
 800e5b4:	2000124c 	.word	0x2000124c

0800e5b8 <_sbrk_r>:
 800e5b8:	b538      	push	{r3, r4, r5, lr}
 800e5ba:	4d06      	ldr	r5, [pc, #24]	@ (800e5d4 <_sbrk_r+0x1c>)
 800e5bc:	2300      	movs	r3, #0
 800e5be:	4604      	mov	r4, r0
 800e5c0:	4608      	mov	r0, r1
 800e5c2:	602b      	str	r3, [r5, #0]
 800e5c4:	f7f6 fcc6 	bl	8004f54 <_sbrk>
 800e5c8:	1c43      	adds	r3, r0, #1
 800e5ca:	d102      	bne.n	800e5d2 <_sbrk_r+0x1a>
 800e5cc:	682b      	ldr	r3, [r5, #0]
 800e5ce:	b103      	cbz	r3, 800e5d2 <_sbrk_r+0x1a>
 800e5d0:	6023      	str	r3, [r4, #0]
 800e5d2:	bd38      	pop	{r3, r4, r5, pc}
 800e5d4:	2000124c 	.word	0x2000124c

0800e5d8 <_write_r>:
 800e5d8:	b538      	push	{r3, r4, r5, lr}
 800e5da:	4d07      	ldr	r5, [pc, #28]	@ (800e5f8 <_write_r+0x20>)
 800e5dc:	4604      	mov	r4, r0
 800e5de:	4608      	mov	r0, r1
 800e5e0:	4611      	mov	r1, r2
 800e5e2:	2200      	movs	r2, #0
 800e5e4:	602a      	str	r2, [r5, #0]
 800e5e6:	461a      	mov	r2, r3
 800e5e8:	f7f3 fcb6 	bl	8001f58 <_write>
 800e5ec:	1c43      	adds	r3, r0, #1
 800e5ee:	d102      	bne.n	800e5f6 <_write_r+0x1e>
 800e5f0:	682b      	ldr	r3, [r5, #0]
 800e5f2:	b103      	cbz	r3, 800e5f6 <_write_r+0x1e>
 800e5f4:	6023      	str	r3, [r4, #0]
 800e5f6:	bd38      	pop	{r3, r4, r5, pc}
 800e5f8:	2000124c 	.word	0x2000124c

0800e5fc <__errno>:
 800e5fc:	4b01      	ldr	r3, [pc, #4]	@ (800e604 <__errno+0x8>)
 800e5fe:	6818      	ldr	r0, [r3, #0]
 800e600:	4770      	bx	lr
 800e602:	bf00      	nop
 800e604:	2000002c 	.word	0x2000002c

0800e608 <__libc_init_array>:
 800e608:	b570      	push	{r4, r5, r6, lr}
 800e60a:	4d0d      	ldr	r5, [pc, #52]	@ (800e640 <__libc_init_array+0x38>)
 800e60c:	4c0d      	ldr	r4, [pc, #52]	@ (800e644 <__libc_init_array+0x3c>)
 800e60e:	1b64      	subs	r4, r4, r5
 800e610:	10a4      	asrs	r4, r4, #2
 800e612:	2600      	movs	r6, #0
 800e614:	42a6      	cmp	r6, r4
 800e616:	d109      	bne.n	800e62c <__libc_init_array+0x24>
 800e618:	4d0b      	ldr	r5, [pc, #44]	@ (800e648 <__libc_init_array+0x40>)
 800e61a:	4c0c      	ldr	r4, [pc, #48]	@ (800e64c <__libc_init_array+0x44>)
 800e61c:	f000 fe1a 	bl	800f254 <_init>
 800e620:	1b64      	subs	r4, r4, r5
 800e622:	10a4      	asrs	r4, r4, #2
 800e624:	2600      	movs	r6, #0
 800e626:	42a6      	cmp	r6, r4
 800e628:	d105      	bne.n	800e636 <__libc_init_array+0x2e>
 800e62a:	bd70      	pop	{r4, r5, r6, pc}
 800e62c:	f855 3b04 	ldr.w	r3, [r5], #4
 800e630:	4798      	blx	r3
 800e632:	3601      	adds	r6, #1
 800e634:	e7ee      	b.n	800e614 <__libc_init_array+0xc>
 800e636:	f855 3b04 	ldr.w	r3, [r5], #4
 800e63a:	4798      	blx	r3
 800e63c:	3601      	adds	r6, #1
 800e63e:	e7f2      	b.n	800e626 <__libc_init_array+0x1e>
 800e640:	0800fbdc 	.word	0x0800fbdc
 800e644:	0800fbdc 	.word	0x0800fbdc
 800e648:	0800fbdc 	.word	0x0800fbdc
 800e64c:	0800fbe0 	.word	0x0800fbe0

0800e650 <__retarget_lock_init_recursive>:
 800e650:	4770      	bx	lr

0800e652 <__retarget_lock_acquire_recursive>:
 800e652:	4770      	bx	lr

0800e654 <__retarget_lock_release_recursive>:
 800e654:	4770      	bx	lr

0800e656 <memcpy>:
 800e656:	440a      	add	r2, r1
 800e658:	4291      	cmp	r1, r2
 800e65a:	f100 33ff 	add.w	r3, r0, #4294967295
 800e65e:	d100      	bne.n	800e662 <memcpy+0xc>
 800e660:	4770      	bx	lr
 800e662:	b510      	push	{r4, lr}
 800e664:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e668:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e66c:	4291      	cmp	r1, r2
 800e66e:	d1f9      	bne.n	800e664 <memcpy+0xe>
 800e670:	bd10      	pop	{r4, pc}
	...

0800e674 <_free_r>:
 800e674:	b538      	push	{r3, r4, r5, lr}
 800e676:	4605      	mov	r5, r0
 800e678:	2900      	cmp	r1, #0
 800e67a:	d041      	beq.n	800e700 <_free_r+0x8c>
 800e67c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e680:	1f0c      	subs	r4, r1, #4
 800e682:	2b00      	cmp	r3, #0
 800e684:	bfb8      	it	lt
 800e686:	18e4      	addlt	r4, r4, r3
 800e688:	f7ff fc54 	bl	800df34 <__malloc_lock>
 800e68c:	4a1d      	ldr	r2, [pc, #116]	@ (800e704 <_free_r+0x90>)
 800e68e:	6813      	ldr	r3, [r2, #0]
 800e690:	b933      	cbnz	r3, 800e6a0 <_free_r+0x2c>
 800e692:	6063      	str	r3, [r4, #4]
 800e694:	6014      	str	r4, [r2, #0]
 800e696:	4628      	mov	r0, r5
 800e698:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e69c:	f7ff bc50 	b.w	800df40 <__malloc_unlock>
 800e6a0:	42a3      	cmp	r3, r4
 800e6a2:	d908      	bls.n	800e6b6 <_free_r+0x42>
 800e6a4:	6820      	ldr	r0, [r4, #0]
 800e6a6:	1821      	adds	r1, r4, r0
 800e6a8:	428b      	cmp	r3, r1
 800e6aa:	bf01      	itttt	eq
 800e6ac:	6819      	ldreq	r1, [r3, #0]
 800e6ae:	685b      	ldreq	r3, [r3, #4]
 800e6b0:	1809      	addeq	r1, r1, r0
 800e6b2:	6021      	streq	r1, [r4, #0]
 800e6b4:	e7ed      	b.n	800e692 <_free_r+0x1e>
 800e6b6:	461a      	mov	r2, r3
 800e6b8:	685b      	ldr	r3, [r3, #4]
 800e6ba:	b10b      	cbz	r3, 800e6c0 <_free_r+0x4c>
 800e6bc:	42a3      	cmp	r3, r4
 800e6be:	d9fa      	bls.n	800e6b6 <_free_r+0x42>
 800e6c0:	6811      	ldr	r1, [r2, #0]
 800e6c2:	1850      	adds	r0, r2, r1
 800e6c4:	42a0      	cmp	r0, r4
 800e6c6:	d10b      	bne.n	800e6e0 <_free_r+0x6c>
 800e6c8:	6820      	ldr	r0, [r4, #0]
 800e6ca:	4401      	add	r1, r0
 800e6cc:	1850      	adds	r0, r2, r1
 800e6ce:	4283      	cmp	r3, r0
 800e6d0:	6011      	str	r1, [r2, #0]
 800e6d2:	d1e0      	bne.n	800e696 <_free_r+0x22>
 800e6d4:	6818      	ldr	r0, [r3, #0]
 800e6d6:	685b      	ldr	r3, [r3, #4]
 800e6d8:	6053      	str	r3, [r2, #4]
 800e6da:	4408      	add	r0, r1
 800e6dc:	6010      	str	r0, [r2, #0]
 800e6de:	e7da      	b.n	800e696 <_free_r+0x22>
 800e6e0:	d902      	bls.n	800e6e8 <_free_r+0x74>
 800e6e2:	230c      	movs	r3, #12
 800e6e4:	602b      	str	r3, [r5, #0]
 800e6e6:	e7d6      	b.n	800e696 <_free_r+0x22>
 800e6e8:	6820      	ldr	r0, [r4, #0]
 800e6ea:	1821      	adds	r1, r4, r0
 800e6ec:	428b      	cmp	r3, r1
 800e6ee:	bf04      	itt	eq
 800e6f0:	6819      	ldreq	r1, [r3, #0]
 800e6f2:	685b      	ldreq	r3, [r3, #4]
 800e6f4:	6063      	str	r3, [r4, #4]
 800e6f6:	bf04      	itt	eq
 800e6f8:	1809      	addeq	r1, r1, r0
 800e6fa:	6021      	streq	r1, [r4, #0]
 800e6fc:	6054      	str	r4, [r2, #4]
 800e6fe:	e7ca      	b.n	800e696 <_free_r+0x22>
 800e700:	bd38      	pop	{r3, r4, r5, pc}
 800e702:	bf00      	nop
 800e704:	2000110c 	.word	0x2000110c

0800e708 <__ssputs_r>:
 800e708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e70c:	688e      	ldr	r6, [r1, #8]
 800e70e:	461f      	mov	r7, r3
 800e710:	42be      	cmp	r6, r7
 800e712:	680b      	ldr	r3, [r1, #0]
 800e714:	4682      	mov	sl, r0
 800e716:	460c      	mov	r4, r1
 800e718:	4690      	mov	r8, r2
 800e71a:	d82d      	bhi.n	800e778 <__ssputs_r+0x70>
 800e71c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e720:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e724:	d026      	beq.n	800e774 <__ssputs_r+0x6c>
 800e726:	6965      	ldr	r5, [r4, #20]
 800e728:	6909      	ldr	r1, [r1, #16]
 800e72a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e72e:	eba3 0901 	sub.w	r9, r3, r1
 800e732:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e736:	1c7b      	adds	r3, r7, #1
 800e738:	444b      	add	r3, r9
 800e73a:	106d      	asrs	r5, r5, #1
 800e73c:	429d      	cmp	r5, r3
 800e73e:	bf38      	it	cc
 800e740:	461d      	movcc	r5, r3
 800e742:	0553      	lsls	r3, r2, #21
 800e744:	d527      	bpl.n	800e796 <__ssputs_r+0x8e>
 800e746:	4629      	mov	r1, r5
 800e748:	f7ff fb74 	bl	800de34 <_malloc_r>
 800e74c:	4606      	mov	r6, r0
 800e74e:	b360      	cbz	r0, 800e7aa <__ssputs_r+0xa2>
 800e750:	6921      	ldr	r1, [r4, #16]
 800e752:	464a      	mov	r2, r9
 800e754:	f7ff ff7f 	bl	800e656 <memcpy>
 800e758:	89a3      	ldrh	r3, [r4, #12]
 800e75a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e75e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e762:	81a3      	strh	r3, [r4, #12]
 800e764:	6126      	str	r6, [r4, #16]
 800e766:	6165      	str	r5, [r4, #20]
 800e768:	444e      	add	r6, r9
 800e76a:	eba5 0509 	sub.w	r5, r5, r9
 800e76e:	6026      	str	r6, [r4, #0]
 800e770:	60a5      	str	r5, [r4, #8]
 800e772:	463e      	mov	r6, r7
 800e774:	42be      	cmp	r6, r7
 800e776:	d900      	bls.n	800e77a <__ssputs_r+0x72>
 800e778:	463e      	mov	r6, r7
 800e77a:	6820      	ldr	r0, [r4, #0]
 800e77c:	4632      	mov	r2, r6
 800e77e:	4641      	mov	r1, r8
 800e780:	f000 fcf6 	bl	800f170 <memmove>
 800e784:	68a3      	ldr	r3, [r4, #8]
 800e786:	1b9b      	subs	r3, r3, r6
 800e788:	60a3      	str	r3, [r4, #8]
 800e78a:	6823      	ldr	r3, [r4, #0]
 800e78c:	4433      	add	r3, r6
 800e78e:	6023      	str	r3, [r4, #0]
 800e790:	2000      	movs	r0, #0
 800e792:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e796:	462a      	mov	r2, r5
 800e798:	f000 fd26 	bl	800f1e8 <_realloc_r>
 800e79c:	4606      	mov	r6, r0
 800e79e:	2800      	cmp	r0, #0
 800e7a0:	d1e0      	bne.n	800e764 <__ssputs_r+0x5c>
 800e7a2:	6921      	ldr	r1, [r4, #16]
 800e7a4:	4650      	mov	r0, sl
 800e7a6:	f7ff ff65 	bl	800e674 <_free_r>
 800e7aa:	230c      	movs	r3, #12
 800e7ac:	f8ca 3000 	str.w	r3, [sl]
 800e7b0:	89a3      	ldrh	r3, [r4, #12]
 800e7b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e7b6:	81a3      	strh	r3, [r4, #12]
 800e7b8:	f04f 30ff 	mov.w	r0, #4294967295
 800e7bc:	e7e9      	b.n	800e792 <__ssputs_r+0x8a>
	...

0800e7c0 <_svfiprintf_r>:
 800e7c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7c4:	4698      	mov	r8, r3
 800e7c6:	898b      	ldrh	r3, [r1, #12]
 800e7c8:	061b      	lsls	r3, r3, #24
 800e7ca:	b09d      	sub	sp, #116	@ 0x74
 800e7cc:	4607      	mov	r7, r0
 800e7ce:	460d      	mov	r5, r1
 800e7d0:	4614      	mov	r4, r2
 800e7d2:	d510      	bpl.n	800e7f6 <_svfiprintf_r+0x36>
 800e7d4:	690b      	ldr	r3, [r1, #16]
 800e7d6:	b973      	cbnz	r3, 800e7f6 <_svfiprintf_r+0x36>
 800e7d8:	2140      	movs	r1, #64	@ 0x40
 800e7da:	f7ff fb2b 	bl	800de34 <_malloc_r>
 800e7de:	6028      	str	r0, [r5, #0]
 800e7e0:	6128      	str	r0, [r5, #16]
 800e7e2:	b930      	cbnz	r0, 800e7f2 <_svfiprintf_r+0x32>
 800e7e4:	230c      	movs	r3, #12
 800e7e6:	603b      	str	r3, [r7, #0]
 800e7e8:	f04f 30ff 	mov.w	r0, #4294967295
 800e7ec:	b01d      	add	sp, #116	@ 0x74
 800e7ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7f2:	2340      	movs	r3, #64	@ 0x40
 800e7f4:	616b      	str	r3, [r5, #20]
 800e7f6:	2300      	movs	r3, #0
 800e7f8:	9309      	str	r3, [sp, #36]	@ 0x24
 800e7fa:	2320      	movs	r3, #32
 800e7fc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e800:	f8cd 800c 	str.w	r8, [sp, #12]
 800e804:	2330      	movs	r3, #48	@ 0x30
 800e806:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e9a4 <_svfiprintf_r+0x1e4>
 800e80a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e80e:	f04f 0901 	mov.w	r9, #1
 800e812:	4623      	mov	r3, r4
 800e814:	469a      	mov	sl, r3
 800e816:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e81a:	b10a      	cbz	r2, 800e820 <_svfiprintf_r+0x60>
 800e81c:	2a25      	cmp	r2, #37	@ 0x25
 800e81e:	d1f9      	bne.n	800e814 <_svfiprintf_r+0x54>
 800e820:	ebba 0b04 	subs.w	fp, sl, r4
 800e824:	d00b      	beq.n	800e83e <_svfiprintf_r+0x7e>
 800e826:	465b      	mov	r3, fp
 800e828:	4622      	mov	r2, r4
 800e82a:	4629      	mov	r1, r5
 800e82c:	4638      	mov	r0, r7
 800e82e:	f7ff ff6b 	bl	800e708 <__ssputs_r>
 800e832:	3001      	adds	r0, #1
 800e834:	f000 80a7 	beq.w	800e986 <_svfiprintf_r+0x1c6>
 800e838:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e83a:	445a      	add	r2, fp
 800e83c:	9209      	str	r2, [sp, #36]	@ 0x24
 800e83e:	f89a 3000 	ldrb.w	r3, [sl]
 800e842:	2b00      	cmp	r3, #0
 800e844:	f000 809f 	beq.w	800e986 <_svfiprintf_r+0x1c6>
 800e848:	2300      	movs	r3, #0
 800e84a:	f04f 32ff 	mov.w	r2, #4294967295
 800e84e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e852:	f10a 0a01 	add.w	sl, sl, #1
 800e856:	9304      	str	r3, [sp, #16]
 800e858:	9307      	str	r3, [sp, #28]
 800e85a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e85e:	931a      	str	r3, [sp, #104]	@ 0x68
 800e860:	4654      	mov	r4, sl
 800e862:	2205      	movs	r2, #5
 800e864:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e868:	484e      	ldr	r0, [pc, #312]	@ (800e9a4 <_svfiprintf_r+0x1e4>)
 800e86a:	f7f1 fcb1 	bl	80001d0 <memchr>
 800e86e:	9a04      	ldr	r2, [sp, #16]
 800e870:	b9d8      	cbnz	r0, 800e8aa <_svfiprintf_r+0xea>
 800e872:	06d0      	lsls	r0, r2, #27
 800e874:	bf44      	itt	mi
 800e876:	2320      	movmi	r3, #32
 800e878:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e87c:	0711      	lsls	r1, r2, #28
 800e87e:	bf44      	itt	mi
 800e880:	232b      	movmi	r3, #43	@ 0x2b
 800e882:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e886:	f89a 3000 	ldrb.w	r3, [sl]
 800e88a:	2b2a      	cmp	r3, #42	@ 0x2a
 800e88c:	d015      	beq.n	800e8ba <_svfiprintf_r+0xfa>
 800e88e:	9a07      	ldr	r2, [sp, #28]
 800e890:	4654      	mov	r4, sl
 800e892:	2000      	movs	r0, #0
 800e894:	f04f 0c0a 	mov.w	ip, #10
 800e898:	4621      	mov	r1, r4
 800e89a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e89e:	3b30      	subs	r3, #48	@ 0x30
 800e8a0:	2b09      	cmp	r3, #9
 800e8a2:	d94b      	bls.n	800e93c <_svfiprintf_r+0x17c>
 800e8a4:	b1b0      	cbz	r0, 800e8d4 <_svfiprintf_r+0x114>
 800e8a6:	9207      	str	r2, [sp, #28]
 800e8a8:	e014      	b.n	800e8d4 <_svfiprintf_r+0x114>
 800e8aa:	eba0 0308 	sub.w	r3, r0, r8
 800e8ae:	fa09 f303 	lsl.w	r3, r9, r3
 800e8b2:	4313      	orrs	r3, r2
 800e8b4:	9304      	str	r3, [sp, #16]
 800e8b6:	46a2      	mov	sl, r4
 800e8b8:	e7d2      	b.n	800e860 <_svfiprintf_r+0xa0>
 800e8ba:	9b03      	ldr	r3, [sp, #12]
 800e8bc:	1d19      	adds	r1, r3, #4
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	9103      	str	r1, [sp, #12]
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	bfbb      	ittet	lt
 800e8c6:	425b      	neglt	r3, r3
 800e8c8:	f042 0202 	orrlt.w	r2, r2, #2
 800e8cc:	9307      	strge	r3, [sp, #28]
 800e8ce:	9307      	strlt	r3, [sp, #28]
 800e8d0:	bfb8      	it	lt
 800e8d2:	9204      	strlt	r2, [sp, #16]
 800e8d4:	7823      	ldrb	r3, [r4, #0]
 800e8d6:	2b2e      	cmp	r3, #46	@ 0x2e
 800e8d8:	d10a      	bne.n	800e8f0 <_svfiprintf_r+0x130>
 800e8da:	7863      	ldrb	r3, [r4, #1]
 800e8dc:	2b2a      	cmp	r3, #42	@ 0x2a
 800e8de:	d132      	bne.n	800e946 <_svfiprintf_r+0x186>
 800e8e0:	9b03      	ldr	r3, [sp, #12]
 800e8e2:	1d1a      	adds	r2, r3, #4
 800e8e4:	681b      	ldr	r3, [r3, #0]
 800e8e6:	9203      	str	r2, [sp, #12]
 800e8e8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e8ec:	3402      	adds	r4, #2
 800e8ee:	9305      	str	r3, [sp, #20]
 800e8f0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e9b4 <_svfiprintf_r+0x1f4>
 800e8f4:	7821      	ldrb	r1, [r4, #0]
 800e8f6:	2203      	movs	r2, #3
 800e8f8:	4650      	mov	r0, sl
 800e8fa:	f7f1 fc69 	bl	80001d0 <memchr>
 800e8fe:	b138      	cbz	r0, 800e910 <_svfiprintf_r+0x150>
 800e900:	9b04      	ldr	r3, [sp, #16]
 800e902:	eba0 000a 	sub.w	r0, r0, sl
 800e906:	2240      	movs	r2, #64	@ 0x40
 800e908:	4082      	lsls	r2, r0
 800e90a:	4313      	orrs	r3, r2
 800e90c:	3401      	adds	r4, #1
 800e90e:	9304      	str	r3, [sp, #16]
 800e910:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e914:	4824      	ldr	r0, [pc, #144]	@ (800e9a8 <_svfiprintf_r+0x1e8>)
 800e916:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e91a:	2206      	movs	r2, #6
 800e91c:	f7f1 fc58 	bl	80001d0 <memchr>
 800e920:	2800      	cmp	r0, #0
 800e922:	d036      	beq.n	800e992 <_svfiprintf_r+0x1d2>
 800e924:	4b21      	ldr	r3, [pc, #132]	@ (800e9ac <_svfiprintf_r+0x1ec>)
 800e926:	bb1b      	cbnz	r3, 800e970 <_svfiprintf_r+0x1b0>
 800e928:	9b03      	ldr	r3, [sp, #12]
 800e92a:	3307      	adds	r3, #7
 800e92c:	f023 0307 	bic.w	r3, r3, #7
 800e930:	3308      	adds	r3, #8
 800e932:	9303      	str	r3, [sp, #12]
 800e934:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e936:	4433      	add	r3, r6
 800e938:	9309      	str	r3, [sp, #36]	@ 0x24
 800e93a:	e76a      	b.n	800e812 <_svfiprintf_r+0x52>
 800e93c:	fb0c 3202 	mla	r2, ip, r2, r3
 800e940:	460c      	mov	r4, r1
 800e942:	2001      	movs	r0, #1
 800e944:	e7a8      	b.n	800e898 <_svfiprintf_r+0xd8>
 800e946:	2300      	movs	r3, #0
 800e948:	3401      	adds	r4, #1
 800e94a:	9305      	str	r3, [sp, #20]
 800e94c:	4619      	mov	r1, r3
 800e94e:	f04f 0c0a 	mov.w	ip, #10
 800e952:	4620      	mov	r0, r4
 800e954:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e958:	3a30      	subs	r2, #48	@ 0x30
 800e95a:	2a09      	cmp	r2, #9
 800e95c:	d903      	bls.n	800e966 <_svfiprintf_r+0x1a6>
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d0c6      	beq.n	800e8f0 <_svfiprintf_r+0x130>
 800e962:	9105      	str	r1, [sp, #20]
 800e964:	e7c4      	b.n	800e8f0 <_svfiprintf_r+0x130>
 800e966:	fb0c 2101 	mla	r1, ip, r1, r2
 800e96a:	4604      	mov	r4, r0
 800e96c:	2301      	movs	r3, #1
 800e96e:	e7f0      	b.n	800e952 <_svfiprintf_r+0x192>
 800e970:	ab03      	add	r3, sp, #12
 800e972:	9300      	str	r3, [sp, #0]
 800e974:	462a      	mov	r2, r5
 800e976:	4b0e      	ldr	r3, [pc, #56]	@ (800e9b0 <_svfiprintf_r+0x1f0>)
 800e978:	a904      	add	r1, sp, #16
 800e97a:	4638      	mov	r0, r7
 800e97c:	f3af 8000 	nop.w
 800e980:	1c42      	adds	r2, r0, #1
 800e982:	4606      	mov	r6, r0
 800e984:	d1d6      	bne.n	800e934 <_svfiprintf_r+0x174>
 800e986:	89ab      	ldrh	r3, [r5, #12]
 800e988:	065b      	lsls	r3, r3, #25
 800e98a:	f53f af2d 	bmi.w	800e7e8 <_svfiprintf_r+0x28>
 800e98e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e990:	e72c      	b.n	800e7ec <_svfiprintf_r+0x2c>
 800e992:	ab03      	add	r3, sp, #12
 800e994:	9300      	str	r3, [sp, #0]
 800e996:	462a      	mov	r2, r5
 800e998:	4b05      	ldr	r3, [pc, #20]	@ (800e9b0 <_svfiprintf_r+0x1f0>)
 800e99a:	a904      	add	r1, sp, #16
 800e99c:	4638      	mov	r0, r7
 800e99e:	f000 f9bb 	bl	800ed18 <_printf_i>
 800e9a2:	e7ed      	b.n	800e980 <_svfiprintf_r+0x1c0>
 800e9a4:	0800fba0 	.word	0x0800fba0
 800e9a8:	0800fbaa 	.word	0x0800fbaa
 800e9ac:	00000000 	.word	0x00000000
 800e9b0:	0800e709 	.word	0x0800e709
 800e9b4:	0800fba6 	.word	0x0800fba6

0800e9b8 <__sfputc_r>:
 800e9b8:	6893      	ldr	r3, [r2, #8]
 800e9ba:	3b01      	subs	r3, #1
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	b410      	push	{r4}
 800e9c0:	6093      	str	r3, [r2, #8]
 800e9c2:	da08      	bge.n	800e9d6 <__sfputc_r+0x1e>
 800e9c4:	6994      	ldr	r4, [r2, #24]
 800e9c6:	42a3      	cmp	r3, r4
 800e9c8:	db01      	blt.n	800e9ce <__sfputc_r+0x16>
 800e9ca:	290a      	cmp	r1, #10
 800e9cc:	d103      	bne.n	800e9d6 <__sfputc_r+0x1e>
 800e9ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e9d2:	f7ff bd21 	b.w	800e418 <__swbuf_r>
 800e9d6:	6813      	ldr	r3, [r2, #0]
 800e9d8:	1c58      	adds	r0, r3, #1
 800e9da:	6010      	str	r0, [r2, #0]
 800e9dc:	7019      	strb	r1, [r3, #0]
 800e9de:	4608      	mov	r0, r1
 800e9e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e9e4:	4770      	bx	lr

0800e9e6 <__sfputs_r>:
 800e9e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9e8:	4606      	mov	r6, r0
 800e9ea:	460f      	mov	r7, r1
 800e9ec:	4614      	mov	r4, r2
 800e9ee:	18d5      	adds	r5, r2, r3
 800e9f0:	42ac      	cmp	r4, r5
 800e9f2:	d101      	bne.n	800e9f8 <__sfputs_r+0x12>
 800e9f4:	2000      	movs	r0, #0
 800e9f6:	e007      	b.n	800ea08 <__sfputs_r+0x22>
 800e9f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e9fc:	463a      	mov	r2, r7
 800e9fe:	4630      	mov	r0, r6
 800ea00:	f7ff ffda 	bl	800e9b8 <__sfputc_r>
 800ea04:	1c43      	adds	r3, r0, #1
 800ea06:	d1f3      	bne.n	800e9f0 <__sfputs_r+0xa>
 800ea08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ea0c <_vfiprintf_r>:
 800ea0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea10:	460d      	mov	r5, r1
 800ea12:	b09d      	sub	sp, #116	@ 0x74
 800ea14:	4614      	mov	r4, r2
 800ea16:	4698      	mov	r8, r3
 800ea18:	4606      	mov	r6, r0
 800ea1a:	b118      	cbz	r0, 800ea24 <_vfiprintf_r+0x18>
 800ea1c:	6a03      	ldr	r3, [r0, #32]
 800ea1e:	b90b      	cbnz	r3, 800ea24 <_vfiprintf_r+0x18>
 800ea20:	f7ff fb20 	bl	800e064 <__sinit>
 800ea24:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ea26:	07d9      	lsls	r1, r3, #31
 800ea28:	d405      	bmi.n	800ea36 <_vfiprintf_r+0x2a>
 800ea2a:	89ab      	ldrh	r3, [r5, #12]
 800ea2c:	059a      	lsls	r2, r3, #22
 800ea2e:	d402      	bmi.n	800ea36 <_vfiprintf_r+0x2a>
 800ea30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ea32:	f7ff fe0e 	bl	800e652 <__retarget_lock_acquire_recursive>
 800ea36:	89ab      	ldrh	r3, [r5, #12]
 800ea38:	071b      	lsls	r3, r3, #28
 800ea3a:	d501      	bpl.n	800ea40 <_vfiprintf_r+0x34>
 800ea3c:	692b      	ldr	r3, [r5, #16]
 800ea3e:	b99b      	cbnz	r3, 800ea68 <_vfiprintf_r+0x5c>
 800ea40:	4629      	mov	r1, r5
 800ea42:	4630      	mov	r0, r6
 800ea44:	f7ff fd26 	bl	800e494 <__swsetup_r>
 800ea48:	b170      	cbz	r0, 800ea68 <_vfiprintf_r+0x5c>
 800ea4a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ea4c:	07dc      	lsls	r4, r3, #31
 800ea4e:	d504      	bpl.n	800ea5a <_vfiprintf_r+0x4e>
 800ea50:	f04f 30ff 	mov.w	r0, #4294967295
 800ea54:	b01d      	add	sp, #116	@ 0x74
 800ea56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea5a:	89ab      	ldrh	r3, [r5, #12]
 800ea5c:	0598      	lsls	r0, r3, #22
 800ea5e:	d4f7      	bmi.n	800ea50 <_vfiprintf_r+0x44>
 800ea60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ea62:	f7ff fdf7 	bl	800e654 <__retarget_lock_release_recursive>
 800ea66:	e7f3      	b.n	800ea50 <_vfiprintf_r+0x44>
 800ea68:	2300      	movs	r3, #0
 800ea6a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ea6c:	2320      	movs	r3, #32
 800ea6e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ea72:	f8cd 800c 	str.w	r8, [sp, #12]
 800ea76:	2330      	movs	r3, #48	@ 0x30
 800ea78:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ec28 <_vfiprintf_r+0x21c>
 800ea7c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ea80:	f04f 0901 	mov.w	r9, #1
 800ea84:	4623      	mov	r3, r4
 800ea86:	469a      	mov	sl, r3
 800ea88:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ea8c:	b10a      	cbz	r2, 800ea92 <_vfiprintf_r+0x86>
 800ea8e:	2a25      	cmp	r2, #37	@ 0x25
 800ea90:	d1f9      	bne.n	800ea86 <_vfiprintf_r+0x7a>
 800ea92:	ebba 0b04 	subs.w	fp, sl, r4
 800ea96:	d00b      	beq.n	800eab0 <_vfiprintf_r+0xa4>
 800ea98:	465b      	mov	r3, fp
 800ea9a:	4622      	mov	r2, r4
 800ea9c:	4629      	mov	r1, r5
 800ea9e:	4630      	mov	r0, r6
 800eaa0:	f7ff ffa1 	bl	800e9e6 <__sfputs_r>
 800eaa4:	3001      	adds	r0, #1
 800eaa6:	f000 80a7 	beq.w	800ebf8 <_vfiprintf_r+0x1ec>
 800eaaa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800eaac:	445a      	add	r2, fp
 800eaae:	9209      	str	r2, [sp, #36]	@ 0x24
 800eab0:	f89a 3000 	ldrb.w	r3, [sl]
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	f000 809f 	beq.w	800ebf8 <_vfiprintf_r+0x1ec>
 800eaba:	2300      	movs	r3, #0
 800eabc:	f04f 32ff 	mov.w	r2, #4294967295
 800eac0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eac4:	f10a 0a01 	add.w	sl, sl, #1
 800eac8:	9304      	str	r3, [sp, #16]
 800eaca:	9307      	str	r3, [sp, #28]
 800eacc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ead0:	931a      	str	r3, [sp, #104]	@ 0x68
 800ead2:	4654      	mov	r4, sl
 800ead4:	2205      	movs	r2, #5
 800ead6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eada:	4853      	ldr	r0, [pc, #332]	@ (800ec28 <_vfiprintf_r+0x21c>)
 800eadc:	f7f1 fb78 	bl	80001d0 <memchr>
 800eae0:	9a04      	ldr	r2, [sp, #16]
 800eae2:	b9d8      	cbnz	r0, 800eb1c <_vfiprintf_r+0x110>
 800eae4:	06d1      	lsls	r1, r2, #27
 800eae6:	bf44      	itt	mi
 800eae8:	2320      	movmi	r3, #32
 800eaea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800eaee:	0713      	lsls	r3, r2, #28
 800eaf0:	bf44      	itt	mi
 800eaf2:	232b      	movmi	r3, #43	@ 0x2b
 800eaf4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800eaf8:	f89a 3000 	ldrb.w	r3, [sl]
 800eafc:	2b2a      	cmp	r3, #42	@ 0x2a
 800eafe:	d015      	beq.n	800eb2c <_vfiprintf_r+0x120>
 800eb00:	9a07      	ldr	r2, [sp, #28]
 800eb02:	4654      	mov	r4, sl
 800eb04:	2000      	movs	r0, #0
 800eb06:	f04f 0c0a 	mov.w	ip, #10
 800eb0a:	4621      	mov	r1, r4
 800eb0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eb10:	3b30      	subs	r3, #48	@ 0x30
 800eb12:	2b09      	cmp	r3, #9
 800eb14:	d94b      	bls.n	800ebae <_vfiprintf_r+0x1a2>
 800eb16:	b1b0      	cbz	r0, 800eb46 <_vfiprintf_r+0x13a>
 800eb18:	9207      	str	r2, [sp, #28]
 800eb1a:	e014      	b.n	800eb46 <_vfiprintf_r+0x13a>
 800eb1c:	eba0 0308 	sub.w	r3, r0, r8
 800eb20:	fa09 f303 	lsl.w	r3, r9, r3
 800eb24:	4313      	orrs	r3, r2
 800eb26:	9304      	str	r3, [sp, #16]
 800eb28:	46a2      	mov	sl, r4
 800eb2a:	e7d2      	b.n	800ead2 <_vfiprintf_r+0xc6>
 800eb2c:	9b03      	ldr	r3, [sp, #12]
 800eb2e:	1d19      	adds	r1, r3, #4
 800eb30:	681b      	ldr	r3, [r3, #0]
 800eb32:	9103      	str	r1, [sp, #12]
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	bfbb      	ittet	lt
 800eb38:	425b      	neglt	r3, r3
 800eb3a:	f042 0202 	orrlt.w	r2, r2, #2
 800eb3e:	9307      	strge	r3, [sp, #28]
 800eb40:	9307      	strlt	r3, [sp, #28]
 800eb42:	bfb8      	it	lt
 800eb44:	9204      	strlt	r2, [sp, #16]
 800eb46:	7823      	ldrb	r3, [r4, #0]
 800eb48:	2b2e      	cmp	r3, #46	@ 0x2e
 800eb4a:	d10a      	bne.n	800eb62 <_vfiprintf_r+0x156>
 800eb4c:	7863      	ldrb	r3, [r4, #1]
 800eb4e:	2b2a      	cmp	r3, #42	@ 0x2a
 800eb50:	d132      	bne.n	800ebb8 <_vfiprintf_r+0x1ac>
 800eb52:	9b03      	ldr	r3, [sp, #12]
 800eb54:	1d1a      	adds	r2, r3, #4
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	9203      	str	r2, [sp, #12]
 800eb5a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800eb5e:	3402      	adds	r4, #2
 800eb60:	9305      	str	r3, [sp, #20]
 800eb62:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ec38 <_vfiprintf_r+0x22c>
 800eb66:	7821      	ldrb	r1, [r4, #0]
 800eb68:	2203      	movs	r2, #3
 800eb6a:	4650      	mov	r0, sl
 800eb6c:	f7f1 fb30 	bl	80001d0 <memchr>
 800eb70:	b138      	cbz	r0, 800eb82 <_vfiprintf_r+0x176>
 800eb72:	9b04      	ldr	r3, [sp, #16]
 800eb74:	eba0 000a 	sub.w	r0, r0, sl
 800eb78:	2240      	movs	r2, #64	@ 0x40
 800eb7a:	4082      	lsls	r2, r0
 800eb7c:	4313      	orrs	r3, r2
 800eb7e:	3401      	adds	r4, #1
 800eb80:	9304      	str	r3, [sp, #16]
 800eb82:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb86:	4829      	ldr	r0, [pc, #164]	@ (800ec2c <_vfiprintf_r+0x220>)
 800eb88:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800eb8c:	2206      	movs	r2, #6
 800eb8e:	f7f1 fb1f 	bl	80001d0 <memchr>
 800eb92:	2800      	cmp	r0, #0
 800eb94:	d03f      	beq.n	800ec16 <_vfiprintf_r+0x20a>
 800eb96:	4b26      	ldr	r3, [pc, #152]	@ (800ec30 <_vfiprintf_r+0x224>)
 800eb98:	bb1b      	cbnz	r3, 800ebe2 <_vfiprintf_r+0x1d6>
 800eb9a:	9b03      	ldr	r3, [sp, #12]
 800eb9c:	3307      	adds	r3, #7
 800eb9e:	f023 0307 	bic.w	r3, r3, #7
 800eba2:	3308      	adds	r3, #8
 800eba4:	9303      	str	r3, [sp, #12]
 800eba6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eba8:	443b      	add	r3, r7
 800ebaa:	9309      	str	r3, [sp, #36]	@ 0x24
 800ebac:	e76a      	b.n	800ea84 <_vfiprintf_r+0x78>
 800ebae:	fb0c 3202 	mla	r2, ip, r2, r3
 800ebb2:	460c      	mov	r4, r1
 800ebb4:	2001      	movs	r0, #1
 800ebb6:	e7a8      	b.n	800eb0a <_vfiprintf_r+0xfe>
 800ebb8:	2300      	movs	r3, #0
 800ebba:	3401      	adds	r4, #1
 800ebbc:	9305      	str	r3, [sp, #20]
 800ebbe:	4619      	mov	r1, r3
 800ebc0:	f04f 0c0a 	mov.w	ip, #10
 800ebc4:	4620      	mov	r0, r4
 800ebc6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ebca:	3a30      	subs	r2, #48	@ 0x30
 800ebcc:	2a09      	cmp	r2, #9
 800ebce:	d903      	bls.n	800ebd8 <_vfiprintf_r+0x1cc>
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d0c6      	beq.n	800eb62 <_vfiprintf_r+0x156>
 800ebd4:	9105      	str	r1, [sp, #20]
 800ebd6:	e7c4      	b.n	800eb62 <_vfiprintf_r+0x156>
 800ebd8:	fb0c 2101 	mla	r1, ip, r1, r2
 800ebdc:	4604      	mov	r4, r0
 800ebde:	2301      	movs	r3, #1
 800ebe0:	e7f0      	b.n	800ebc4 <_vfiprintf_r+0x1b8>
 800ebe2:	ab03      	add	r3, sp, #12
 800ebe4:	9300      	str	r3, [sp, #0]
 800ebe6:	462a      	mov	r2, r5
 800ebe8:	4b12      	ldr	r3, [pc, #72]	@ (800ec34 <_vfiprintf_r+0x228>)
 800ebea:	a904      	add	r1, sp, #16
 800ebec:	4630      	mov	r0, r6
 800ebee:	f3af 8000 	nop.w
 800ebf2:	4607      	mov	r7, r0
 800ebf4:	1c78      	adds	r0, r7, #1
 800ebf6:	d1d6      	bne.n	800eba6 <_vfiprintf_r+0x19a>
 800ebf8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ebfa:	07d9      	lsls	r1, r3, #31
 800ebfc:	d405      	bmi.n	800ec0a <_vfiprintf_r+0x1fe>
 800ebfe:	89ab      	ldrh	r3, [r5, #12]
 800ec00:	059a      	lsls	r2, r3, #22
 800ec02:	d402      	bmi.n	800ec0a <_vfiprintf_r+0x1fe>
 800ec04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ec06:	f7ff fd25 	bl	800e654 <__retarget_lock_release_recursive>
 800ec0a:	89ab      	ldrh	r3, [r5, #12]
 800ec0c:	065b      	lsls	r3, r3, #25
 800ec0e:	f53f af1f 	bmi.w	800ea50 <_vfiprintf_r+0x44>
 800ec12:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ec14:	e71e      	b.n	800ea54 <_vfiprintf_r+0x48>
 800ec16:	ab03      	add	r3, sp, #12
 800ec18:	9300      	str	r3, [sp, #0]
 800ec1a:	462a      	mov	r2, r5
 800ec1c:	4b05      	ldr	r3, [pc, #20]	@ (800ec34 <_vfiprintf_r+0x228>)
 800ec1e:	a904      	add	r1, sp, #16
 800ec20:	4630      	mov	r0, r6
 800ec22:	f000 f879 	bl	800ed18 <_printf_i>
 800ec26:	e7e4      	b.n	800ebf2 <_vfiprintf_r+0x1e6>
 800ec28:	0800fba0 	.word	0x0800fba0
 800ec2c:	0800fbaa 	.word	0x0800fbaa
 800ec30:	00000000 	.word	0x00000000
 800ec34:	0800e9e7 	.word	0x0800e9e7
 800ec38:	0800fba6 	.word	0x0800fba6

0800ec3c <_printf_common>:
 800ec3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec40:	4616      	mov	r6, r2
 800ec42:	4698      	mov	r8, r3
 800ec44:	688a      	ldr	r2, [r1, #8]
 800ec46:	690b      	ldr	r3, [r1, #16]
 800ec48:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ec4c:	4293      	cmp	r3, r2
 800ec4e:	bfb8      	it	lt
 800ec50:	4613      	movlt	r3, r2
 800ec52:	6033      	str	r3, [r6, #0]
 800ec54:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ec58:	4607      	mov	r7, r0
 800ec5a:	460c      	mov	r4, r1
 800ec5c:	b10a      	cbz	r2, 800ec62 <_printf_common+0x26>
 800ec5e:	3301      	adds	r3, #1
 800ec60:	6033      	str	r3, [r6, #0]
 800ec62:	6823      	ldr	r3, [r4, #0]
 800ec64:	0699      	lsls	r1, r3, #26
 800ec66:	bf42      	ittt	mi
 800ec68:	6833      	ldrmi	r3, [r6, #0]
 800ec6a:	3302      	addmi	r3, #2
 800ec6c:	6033      	strmi	r3, [r6, #0]
 800ec6e:	6825      	ldr	r5, [r4, #0]
 800ec70:	f015 0506 	ands.w	r5, r5, #6
 800ec74:	d106      	bne.n	800ec84 <_printf_common+0x48>
 800ec76:	f104 0a19 	add.w	sl, r4, #25
 800ec7a:	68e3      	ldr	r3, [r4, #12]
 800ec7c:	6832      	ldr	r2, [r6, #0]
 800ec7e:	1a9b      	subs	r3, r3, r2
 800ec80:	42ab      	cmp	r3, r5
 800ec82:	dc26      	bgt.n	800ecd2 <_printf_common+0x96>
 800ec84:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ec88:	6822      	ldr	r2, [r4, #0]
 800ec8a:	3b00      	subs	r3, #0
 800ec8c:	bf18      	it	ne
 800ec8e:	2301      	movne	r3, #1
 800ec90:	0692      	lsls	r2, r2, #26
 800ec92:	d42b      	bmi.n	800ecec <_printf_common+0xb0>
 800ec94:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ec98:	4641      	mov	r1, r8
 800ec9a:	4638      	mov	r0, r7
 800ec9c:	47c8      	blx	r9
 800ec9e:	3001      	adds	r0, #1
 800eca0:	d01e      	beq.n	800ece0 <_printf_common+0xa4>
 800eca2:	6823      	ldr	r3, [r4, #0]
 800eca4:	6922      	ldr	r2, [r4, #16]
 800eca6:	f003 0306 	and.w	r3, r3, #6
 800ecaa:	2b04      	cmp	r3, #4
 800ecac:	bf02      	ittt	eq
 800ecae:	68e5      	ldreq	r5, [r4, #12]
 800ecb0:	6833      	ldreq	r3, [r6, #0]
 800ecb2:	1aed      	subeq	r5, r5, r3
 800ecb4:	68a3      	ldr	r3, [r4, #8]
 800ecb6:	bf0c      	ite	eq
 800ecb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ecbc:	2500      	movne	r5, #0
 800ecbe:	4293      	cmp	r3, r2
 800ecc0:	bfc4      	itt	gt
 800ecc2:	1a9b      	subgt	r3, r3, r2
 800ecc4:	18ed      	addgt	r5, r5, r3
 800ecc6:	2600      	movs	r6, #0
 800ecc8:	341a      	adds	r4, #26
 800ecca:	42b5      	cmp	r5, r6
 800eccc:	d11a      	bne.n	800ed04 <_printf_common+0xc8>
 800ecce:	2000      	movs	r0, #0
 800ecd0:	e008      	b.n	800ece4 <_printf_common+0xa8>
 800ecd2:	2301      	movs	r3, #1
 800ecd4:	4652      	mov	r2, sl
 800ecd6:	4641      	mov	r1, r8
 800ecd8:	4638      	mov	r0, r7
 800ecda:	47c8      	blx	r9
 800ecdc:	3001      	adds	r0, #1
 800ecde:	d103      	bne.n	800ece8 <_printf_common+0xac>
 800ece0:	f04f 30ff 	mov.w	r0, #4294967295
 800ece4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ece8:	3501      	adds	r5, #1
 800ecea:	e7c6      	b.n	800ec7a <_printf_common+0x3e>
 800ecec:	18e1      	adds	r1, r4, r3
 800ecee:	1c5a      	adds	r2, r3, #1
 800ecf0:	2030      	movs	r0, #48	@ 0x30
 800ecf2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ecf6:	4422      	add	r2, r4
 800ecf8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ecfc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ed00:	3302      	adds	r3, #2
 800ed02:	e7c7      	b.n	800ec94 <_printf_common+0x58>
 800ed04:	2301      	movs	r3, #1
 800ed06:	4622      	mov	r2, r4
 800ed08:	4641      	mov	r1, r8
 800ed0a:	4638      	mov	r0, r7
 800ed0c:	47c8      	blx	r9
 800ed0e:	3001      	adds	r0, #1
 800ed10:	d0e6      	beq.n	800ece0 <_printf_common+0xa4>
 800ed12:	3601      	adds	r6, #1
 800ed14:	e7d9      	b.n	800ecca <_printf_common+0x8e>
	...

0800ed18 <_printf_i>:
 800ed18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ed1c:	7e0f      	ldrb	r7, [r1, #24]
 800ed1e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ed20:	2f78      	cmp	r7, #120	@ 0x78
 800ed22:	4691      	mov	r9, r2
 800ed24:	4680      	mov	r8, r0
 800ed26:	460c      	mov	r4, r1
 800ed28:	469a      	mov	sl, r3
 800ed2a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ed2e:	d807      	bhi.n	800ed40 <_printf_i+0x28>
 800ed30:	2f62      	cmp	r7, #98	@ 0x62
 800ed32:	d80a      	bhi.n	800ed4a <_printf_i+0x32>
 800ed34:	2f00      	cmp	r7, #0
 800ed36:	f000 80d1 	beq.w	800eedc <_printf_i+0x1c4>
 800ed3a:	2f58      	cmp	r7, #88	@ 0x58
 800ed3c:	f000 80b8 	beq.w	800eeb0 <_printf_i+0x198>
 800ed40:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ed44:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ed48:	e03a      	b.n	800edc0 <_printf_i+0xa8>
 800ed4a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ed4e:	2b15      	cmp	r3, #21
 800ed50:	d8f6      	bhi.n	800ed40 <_printf_i+0x28>
 800ed52:	a101      	add	r1, pc, #4	@ (adr r1, 800ed58 <_printf_i+0x40>)
 800ed54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ed58:	0800edb1 	.word	0x0800edb1
 800ed5c:	0800edc5 	.word	0x0800edc5
 800ed60:	0800ed41 	.word	0x0800ed41
 800ed64:	0800ed41 	.word	0x0800ed41
 800ed68:	0800ed41 	.word	0x0800ed41
 800ed6c:	0800ed41 	.word	0x0800ed41
 800ed70:	0800edc5 	.word	0x0800edc5
 800ed74:	0800ed41 	.word	0x0800ed41
 800ed78:	0800ed41 	.word	0x0800ed41
 800ed7c:	0800ed41 	.word	0x0800ed41
 800ed80:	0800ed41 	.word	0x0800ed41
 800ed84:	0800eec3 	.word	0x0800eec3
 800ed88:	0800edef 	.word	0x0800edef
 800ed8c:	0800ee7d 	.word	0x0800ee7d
 800ed90:	0800ed41 	.word	0x0800ed41
 800ed94:	0800ed41 	.word	0x0800ed41
 800ed98:	0800eee5 	.word	0x0800eee5
 800ed9c:	0800ed41 	.word	0x0800ed41
 800eda0:	0800edef 	.word	0x0800edef
 800eda4:	0800ed41 	.word	0x0800ed41
 800eda8:	0800ed41 	.word	0x0800ed41
 800edac:	0800ee85 	.word	0x0800ee85
 800edb0:	6833      	ldr	r3, [r6, #0]
 800edb2:	1d1a      	adds	r2, r3, #4
 800edb4:	681b      	ldr	r3, [r3, #0]
 800edb6:	6032      	str	r2, [r6, #0]
 800edb8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800edbc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800edc0:	2301      	movs	r3, #1
 800edc2:	e09c      	b.n	800eefe <_printf_i+0x1e6>
 800edc4:	6833      	ldr	r3, [r6, #0]
 800edc6:	6820      	ldr	r0, [r4, #0]
 800edc8:	1d19      	adds	r1, r3, #4
 800edca:	6031      	str	r1, [r6, #0]
 800edcc:	0606      	lsls	r6, r0, #24
 800edce:	d501      	bpl.n	800edd4 <_printf_i+0xbc>
 800edd0:	681d      	ldr	r5, [r3, #0]
 800edd2:	e003      	b.n	800eddc <_printf_i+0xc4>
 800edd4:	0645      	lsls	r5, r0, #25
 800edd6:	d5fb      	bpl.n	800edd0 <_printf_i+0xb8>
 800edd8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800eddc:	2d00      	cmp	r5, #0
 800edde:	da03      	bge.n	800ede8 <_printf_i+0xd0>
 800ede0:	232d      	movs	r3, #45	@ 0x2d
 800ede2:	426d      	negs	r5, r5
 800ede4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ede8:	4858      	ldr	r0, [pc, #352]	@ (800ef4c <_printf_i+0x234>)
 800edea:	230a      	movs	r3, #10
 800edec:	e011      	b.n	800ee12 <_printf_i+0xfa>
 800edee:	6821      	ldr	r1, [r4, #0]
 800edf0:	6833      	ldr	r3, [r6, #0]
 800edf2:	0608      	lsls	r0, r1, #24
 800edf4:	f853 5b04 	ldr.w	r5, [r3], #4
 800edf8:	d402      	bmi.n	800ee00 <_printf_i+0xe8>
 800edfa:	0649      	lsls	r1, r1, #25
 800edfc:	bf48      	it	mi
 800edfe:	b2ad      	uxthmi	r5, r5
 800ee00:	2f6f      	cmp	r7, #111	@ 0x6f
 800ee02:	4852      	ldr	r0, [pc, #328]	@ (800ef4c <_printf_i+0x234>)
 800ee04:	6033      	str	r3, [r6, #0]
 800ee06:	bf14      	ite	ne
 800ee08:	230a      	movne	r3, #10
 800ee0a:	2308      	moveq	r3, #8
 800ee0c:	2100      	movs	r1, #0
 800ee0e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ee12:	6866      	ldr	r6, [r4, #4]
 800ee14:	60a6      	str	r6, [r4, #8]
 800ee16:	2e00      	cmp	r6, #0
 800ee18:	db05      	blt.n	800ee26 <_printf_i+0x10e>
 800ee1a:	6821      	ldr	r1, [r4, #0]
 800ee1c:	432e      	orrs	r6, r5
 800ee1e:	f021 0104 	bic.w	r1, r1, #4
 800ee22:	6021      	str	r1, [r4, #0]
 800ee24:	d04b      	beq.n	800eebe <_printf_i+0x1a6>
 800ee26:	4616      	mov	r6, r2
 800ee28:	fbb5 f1f3 	udiv	r1, r5, r3
 800ee2c:	fb03 5711 	mls	r7, r3, r1, r5
 800ee30:	5dc7      	ldrb	r7, [r0, r7]
 800ee32:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ee36:	462f      	mov	r7, r5
 800ee38:	42bb      	cmp	r3, r7
 800ee3a:	460d      	mov	r5, r1
 800ee3c:	d9f4      	bls.n	800ee28 <_printf_i+0x110>
 800ee3e:	2b08      	cmp	r3, #8
 800ee40:	d10b      	bne.n	800ee5a <_printf_i+0x142>
 800ee42:	6823      	ldr	r3, [r4, #0]
 800ee44:	07df      	lsls	r7, r3, #31
 800ee46:	d508      	bpl.n	800ee5a <_printf_i+0x142>
 800ee48:	6923      	ldr	r3, [r4, #16]
 800ee4a:	6861      	ldr	r1, [r4, #4]
 800ee4c:	4299      	cmp	r1, r3
 800ee4e:	bfde      	ittt	le
 800ee50:	2330      	movle	r3, #48	@ 0x30
 800ee52:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ee56:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ee5a:	1b92      	subs	r2, r2, r6
 800ee5c:	6122      	str	r2, [r4, #16]
 800ee5e:	f8cd a000 	str.w	sl, [sp]
 800ee62:	464b      	mov	r3, r9
 800ee64:	aa03      	add	r2, sp, #12
 800ee66:	4621      	mov	r1, r4
 800ee68:	4640      	mov	r0, r8
 800ee6a:	f7ff fee7 	bl	800ec3c <_printf_common>
 800ee6e:	3001      	adds	r0, #1
 800ee70:	d14a      	bne.n	800ef08 <_printf_i+0x1f0>
 800ee72:	f04f 30ff 	mov.w	r0, #4294967295
 800ee76:	b004      	add	sp, #16
 800ee78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee7c:	6823      	ldr	r3, [r4, #0]
 800ee7e:	f043 0320 	orr.w	r3, r3, #32
 800ee82:	6023      	str	r3, [r4, #0]
 800ee84:	4832      	ldr	r0, [pc, #200]	@ (800ef50 <_printf_i+0x238>)
 800ee86:	2778      	movs	r7, #120	@ 0x78
 800ee88:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ee8c:	6823      	ldr	r3, [r4, #0]
 800ee8e:	6831      	ldr	r1, [r6, #0]
 800ee90:	061f      	lsls	r7, r3, #24
 800ee92:	f851 5b04 	ldr.w	r5, [r1], #4
 800ee96:	d402      	bmi.n	800ee9e <_printf_i+0x186>
 800ee98:	065f      	lsls	r7, r3, #25
 800ee9a:	bf48      	it	mi
 800ee9c:	b2ad      	uxthmi	r5, r5
 800ee9e:	6031      	str	r1, [r6, #0]
 800eea0:	07d9      	lsls	r1, r3, #31
 800eea2:	bf44      	itt	mi
 800eea4:	f043 0320 	orrmi.w	r3, r3, #32
 800eea8:	6023      	strmi	r3, [r4, #0]
 800eeaa:	b11d      	cbz	r5, 800eeb4 <_printf_i+0x19c>
 800eeac:	2310      	movs	r3, #16
 800eeae:	e7ad      	b.n	800ee0c <_printf_i+0xf4>
 800eeb0:	4826      	ldr	r0, [pc, #152]	@ (800ef4c <_printf_i+0x234>)
 800eeb2:	e7e9      	b.n	800ee88 <_printf_i+0x170>
 800eeb4:	6823      	ldr	r3, [r4, #0]
 800eeb6:	f023 0320 	bic.w	r3, r3, #32
 800eeba:	6023      	str	r3, [r4, #0]
 800eebc:	e7f6      	b.n	800eeac <_printf_i+0x194>
 800eebe:	4616      	mov	r6, r2
 800eec0:	e7bd      	b.n	800ee3e <_printf_i+0x126>
 800eec2:	6833      	ldr	r3, [r6, #0]
 800eec4:	6825      	ldr	r5, [r4, #0]
 800eec6:	6961      	ldr	r1, [r4, #20]
 800eec8:	1d18      	adds	r0, r3, #4
 800eeca:	6030      	str	r0, [r6, #0]
 800eecc:	062e      	lsls	r6, r5, #24
 800eece:	681b      	ldr	r3, [r3, #0]
 800eed0:	d501      	bpl.n	800eed6 <_printf_i+0x1be>
 800eed2:	6019      	str	r1, [r3, #0]
 800eed4:	e002      	b.n	800eedc <_printf_i+0x1c4>
 800eed6:	0668      	lsls	r0, r5, #25
 800eed8:	d5fb      	bpl.n	800eed2 <_printf_i+0x1ba>
 800eeda:	8019      	strh	r1, [r3, #0]
 800eedc:	2300      	movs	r3, #0
 800eede:	6123      	str	r3, [r4, #16]
 800eee0:	4616      	mov	r6, r2
 800eee2:	e7bc      	b.n	800ee5e <_printf_i+0x146>
 800eee4:	6833      	ldr	r3, [r6, #0]
 800eee6:	1d1a      	adds	r2, r3, #4
 800eee8:	6032      	str	r2, [r6, #0]
 800eeea:	681e      	ldr	r6, [r3, #0]
 800eeec:	6862      	ldr	r2, [r4, #4]
 800eeee:	2100      	movs	r1, #0
 800eef0:	4630      	mov	r0, r6
 800eef2:	f7f1 f96d 	bl	80001d0 <memchr>
 800eef6:	b108      	cbz	r0, 800eefc <_printf_i+0x1e4>
 800eef8:	1b80      	subs	r0, r0, r6
 800eefa:	6060      	str	r0, [r4, #4]
 800eefc:	6863      	ldr	r3, [r4, #4]
 800eefe:	6123      	str	r3, [r4, #16]
 800ef00:	2300      	movs	r3, #0
 800ef02:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ef06:	e7aa      	b.n	800ee5e <_printf_i+0x146>
 800ef08:	6923      	ldr	r3, [r4, #16]
 800ef0a:	4632      	mov	r2, r6
 800ef0c:	4649      	mov	r1, r9
 800ef0e:	4640      	mov	r0, r8
 800ef10:	47d0      	blx	sl
 800ef12:	3001      	adds	r0, #1
 800ef14:	d0ad      	beq.n	800ee72 <_printf_i+0x15a>
 800ef16:	6823      	ldr	r3, [r4, #0]
 800ef18:	079b      	lsls	r3, r3, #30
 800ef1a:	d413      	bmi.n	800ef44 <_printf_i+0x22c>
 800ef1c:	68e0      	ldr	r0, [r4, #12]
 800ef1e:	9b03      	ldr	r3, [sp, #12]
 800ef20:	4298      	cmp	r0, r3
 800ef22:	bfb8      	it	lt
 800ef24:	4618      	movlt	r0, r3
 800ef26:	e7a6      	b.n	800ee76 <_printf_i+0x15e>
 800ef28:	2301      	movs	r3, #1
 800ef2a:	4632      	mov	r2, r6
 800ef2c:	4649      	mov	r1, r9
 800ef2e:	4640      	mov	r0, r8
 800ef30:	47d0      	blx	sl
 800ef32:	3001      	adds	r0, #1
 800ef34:	d09d      	beq.n	800ee72 <_printf_i+0x15a>
 800ef36:	3501      	adds	r5, #1
 800ef38:	68e3      	ldr	r3, [r4, #12]
 800ef3a:	9903      	ldr	r1, [sp, #12]
 800ef3c:	1a5b      	subs	r3, r3, r1
 800ef3e:	42ab      	cmp	r3, r5
 800ef40:	dcf2      	bgt.n	800ef28 <_printf_i+0x210>
 800ef42:	e7eb      	b.n	800ef1c <_printf_i+0x204>
 800ef44:	2500      	movs	r5, #0
 800ef46:	f104 0619 	add.w	r6, r4, #25
 800ef4a:	e7f5      	b.n	800ef38 <_printf_i+0x220>
 800ef4c:	0800fbb1 	.word	0x0800fbb1
 800ef50:	0800fbc2 	.word	0x0800fbc2

0800ef54 <__sflush_r>:
 800ef54:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ef58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef5c:	0716      	lsls	r6, r2, #28
 800ef5e:	4605      	mov	r5, r0
 800ef60:	460c      	mov	r4, r1
 800ef62:	d454      	bmi.n	800f00e <__sflush_r+0xba>
 800ef64:	684b      	ldr	r3, [r1, #4]
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	dc02      	bgt.n	800ef70 <__sflush_r+0x1c>
 800ef6a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	dd48      	ble.n	800f002 <__sflush_r+0xae>
 800ef70:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ef72:	2e00      	cmp	r6, #0
 800ef74:	d045      	beq.n	800f002 <__sflush_r+0xae>
 800ef76:	2300      	movs	r3, #0
 800ef78:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ef7c:	682f      	ldr	r7, [r5, #0]
 800ef7e:	6a21      	ldr	r1, [r4, #32]
 800ef80:	602b      	str	r3, [r5, #0]
 800ef82:	d030      	beq.n	800efe6 <__sflush_r+0x92>
 800ef84:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ef86:	89a3      	ldrh	r3, [r4, #12]
 800ef88:	0759      	lsls	r1, r3, #29
 800ef8a:	d505      	bpl.n	800ef98 <__sflush_r+0x44>
 800ef8c:	6863      	ldr	r3, [r4, #4]
 800ef8e:	1ad2      	subs	r2, r2, r3
 800ef90:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ef92:	b10b      	cbz	r3, 800ef98 <__sflush_r+0x44>
 800ef94:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ef96:	1ad2      	subs	r2, r2, r3
 800ef98:	2300      	movs	r3, #0
 800ef9a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ef9c:	6a21      	ldr	r1, [r4, #32]
 800ef9e:	4628      	mov	r0, r5
 800efa0:	47b0      	blx	r6
 800efa2:	1c43      	adds	r3, r0, #1
 800efa4:	89a3      	ldrh	r3, [r4, #12]
 800efa6:	d106      	bne.n	800efb6 <__sflush_r+0x62>
 800efa8:	6829      	ldr	r1, [r5, #0]
 800efaa:	291d      	cmp	r1, #29
 800efac:	d82b      	bhi.n	800f006 <__sflush_r+0xb2>
 800efae:	4a2a      	ldr	r2, [pc, #168]	@ (800f058 <__sflush_r+0x104>)
 800efb0:	40ca      	lsrs	r2, r1
 800efb2:	07d6      	lsls	r6, r2, #31
 800efb4:	d527      	bpl.n	800f006 <__sflush_r+0xb2>
 800efb6:	2200      	movs	r2, #0
 800efb8:	6062      	str	r2, [r4, #4]
 800efba:	04d9      	lsls	r1, r3, #19
 800efbc:	6922      	ldr	r2, [r4, #16]
 800efbe:	6022      	str	r2, [r4, #0]
 800efc0:	d504      	bpl.n	800efcc <__sflush_r+0x78>
 800efc2:	1c42      	adds	r2, r0, #1
 800efc4:	d101      	bne.n	800efca <__sflush_r+0x76>
 800efc6:	682b      	ldr	r3, [r5, #0]
 800efc8:	b903      	cbnz	r3, 800efcc <__sflush_r+0x78>
 800efca:	6560      	str	r0, [r4, #84]	@ 0x54
 800efcc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800efce:	602f      	str	r7, [r5, #0]
 800efd0:	b1b9      	cbz	r1, 800f002 <__sflush_r+0xae>
 800efd2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800efd6:	4299      	cmp	r1, r3
 800efd8:	d002      	beq.n	800efe0 <__sflush_r+0x8c>
 800efda:	4628      	mov	r0, r5
 800efdc:	f7ff fb4a 	bl	800e674 <_free_r>
 800efe0:	2300      	movs	r3, #0
 800efe2:	6363      	str	r3, [r4, #52]	@ 0x34
 800efe4:	e00d      	b.n	800f002 <__sflush_r+0xae>
 800efe6:	2301      	movs	r3, #1
 800efe8:	4628      	mov	r0, r5
 800efea:	47b0      	blx	r6
 800efec:	4602      	mov	r2, r0
 800efee:	1c50      	adds	r0, r2, #1
 800eff0:	d1c9      	bne.n	800ef86 <__sflush_r+0x32>
 800eff2:	682b      	ldr	r3, [r5, #0]
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	d0c6      	beq.n	800ef86 <__sflush_r+0x32>
 800eff8:	2b1d      	cmp	r3, #29
 800effa:	d001      	beq.n	800f000 <__sflush_r+0xac>
 800effc:	2b16      	cmp	r3, #22
 800effe:	d11e      	bne.n	800f03e <__sflush_r+0xea>
 800f000:	602f      	str	r7, [r5, #0]
 800f002:	2000      	movs	r0, #0
 800f004:	e022      	b.n	800f04c <__sflush_r+0xf8>
 800f006:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f00a:	b21b      	sxth	r3, r3
 800f00c:	e01b      	b.n	800f046 <__sflush_r+0xf2>
 800f00e:	690f      	ldr	r7, [r1, #16]
 800f010:	2f00      	cmp	r7, #0
 800f012:	d0f6      	beq.n	800f002 <__sflush_r+0xae>
 800f014:	0793      	lsls	r3, r2, #30
 800f016:	680e      	ldr	r6, [r1, #0]
 800f018:	bf08      	it	eq
 800f01a:	694b      	ldreq	r3, [r1, #20]
 800f01c:	600f      	str	r7, [r1, #0]
 800f01e:	bf18      	it	ne
 800f020:	2300      	movne	r3, #0
 800f022:	eba6 0807 	sub.w	r8, r6, r7
 800f026:	608b      	str	r3, [r1, #8]
 800f028:	f1b8 0f00 	cmp.w	r8, #0
 800f02c:	dde9      	ble.n	800f002 <__sflush_r+0xae>
 800f02e:	6a21      	ldr	r1, [r4, #32]
 800f030:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f032:	4643      	mov	r3, r8
 800f034:	463a      	mov	r2, r7
 800f036:	4628      	mov	r0, r5
 800f038:	47b0      	blx	r6
 800f03a:	2800      	cmp	r0, #0
 800f03c:	dc08      	bgt.n	800f050 <__sflush_r+0xfc>
 800f03e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f042:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f046:	81a3      	strh	r3, [r4, #12]
 800f048:	f04f 30ff 	mov.w	r0, #4294967295
 800f04c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f050:	4407      	add	r7, r0
 800f052:	eba8 0800 	sub.w	r8, r8, r0
 800f056:	e7e7      	b.n	800f028 <__sflush_r+0xd4>
 800f058:	20400001 	.word	0x20400001

0800f05c <_fflush_r>:
 800f05c:	b538      	push	{r3, r4, r5, lr}
 800f05e:	690b      	ldr	r3, [r1, #16]
 800f060:	4605      	mov	r5, r0
 800f062:	460c      	mov	r4, r1
 800f064:	b913      	cbnz	r3, 800f06c <_fflush_r+0x10>
 800f066:	2500      	movs	r5, #0
 800f068:	4628      	mov	r0, r5
 800f06a:	bd38      	pop	{r3, r4, r5, pc}
 800f06c:	b118      	cbz	r0, 800f076 <_fflush_r+0x1a>
 800f06e:	6a03      	ldr	r3, [r0, #32]
 800f070:	b90b      	cbnz	r3, 800f076 <_fflush_r+0x1a>
 800f072:	f7fe fff7 	bl	800e064 <__sinit>
 800f076:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d0f3      	beq.n	800f066 <_fflush_r+0xa>
 800f07e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f080:	07d0      	lsls	r0, r2, #31
 800f082:	d404      	bmi.n	800f08e <_fflush_r+0x32>
 800f084:	0599      	lsls	r1, r3, #22
 800f086:	d402      	bmi.n	800f08e <_fflush_r+0x32>
 800f088:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f08a:	f7ff fae2 	bl	800e652 <__retarget_lock_acquire_recursive>
 800f08e:	4628      	mov	r0, r5
 800f090:	4621      	mov	r1, r4
 800f092:	f7ff ff5f 	bl	800ef54 <__sflush_r>
 800f096:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f098:	07da      	lsls	r2, r3, #31
 800f09a:	4605      	mov	r5, r0
 800f09c:	d4e4      	bmi.n	800f068 <_fflush_r+0xc>
 800f09e:	89a3      	ldrh	r3, [r4, #12]
 800f0a0:	059b      	lsls	r3, r3, #22
 800f0a2:	d4e1      	bmi.n	800f068 <_fflush_r+0xc>
 800f0a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f0a6:	f7ff fad5 	bl	800e654 <__retarget_lock_release_recursive>
 800f0aa:	e7dd      	b.n	800f068 <_fflush_r+0xc>

0800f0ac <__swhatbuf_r>:
 800f0ac:	b570      	push	{r4, r5, r6, lr}
 800f0ae:	460c      	mov	r4, r1
 800f0b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f0b4:	2900      	cmp	r1, #0
 800f0b6:	b096      	sub	sp, #88	@ 0x58
 800f0b8:	4615      	mov	r5, r2
 800f0ba:	461e      	mov	r6, r3
 800f0bc:	da0d      	bge.n	800f0da <__swhatbuf_r+0x2e>
 800f0be:	89a3      	ldrh	r3, [r4, #12]
 800f0c0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f0c4:	f04f 0100 	mov.w	r1, #0
 800f0c8:	bf14      	ite	ne
 800f0ca:	2340      	movne	r3, #64	@ 0x40
 800f0cc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f0d0:	2000      	movs	r0, #0
 800f0d2:	6031      	str	r1, [r6, #0]
 800f0d4:	602b      	str	r3, [r5, #0]
 800f0d6:	b016      	add	sp, #88	@ 0x58
 800f0d8:	bd70      	pop	{r4, r5, r6, pc}
 800f0da:	466a      	mov	r2, sp
 800f0dc:	f000 f862 	bl	800f1a4 <_fstat_r>
 800f0e0:	2800      	cmp	r0, #0
 800f0e2:	dbec      	blt.n	800f0be <__swhatbuf_r+0x12>
 800f0e4:	9901      	ldr	r1, [sp, #4]
 800f0e6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f0ea:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f0ee:	4259      	negs	r1, r3
 800f0f0:	4159      	adcs	r1, r3
 800f0f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f0f6:	e7eb      	b.n	800f0d0 <__swhatbuf_r+0x24>

0800f0f8 <__smakebuf_r>:
 800f0f8:	898b      	ldrh	r3, [r1, #12]
 800f0fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f0fc:	079d      	lsls	r5, r3, #30
 800f0fe:	4606      	mov	r6, r0
 800f100:	460c      	mov	r4, r1
 800f102:	d507      	bpl.n	800f114 <__smakebuf_r+0x1c>
 800f104:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f108:	6023      	str	r3, [r4, #0]
 800f10a:	6123      	str	r3, [r4, #16]
 800f10c:	2301      	movs	r3, #1
 800f10e:	6163      	str	r3, [r4, #20]
 800f110:	b003      	add	sp, #12
 800f112:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f114:	ab01      	add	r3, sp, #4
 800f116:	466a      	mov	r2, sp
 800f118:	f7ff ffc8 	bl	800f0ac <__swhatbuf_r>
 800f11c:	9f00      	ldr	r7, [sp, #0]
 800f11e:	4605      	mov	r5, r0
 800f120:	4639      	mov	r1, r7
 800f122:	4630      	mov	r0, r6
 800f124:	f7fe fe86 	bl	800de34 <_malloc_r>
 800f128:	b948      	cbnz	r0, 800f13e <__smakebuf_r+0x46>
 800f12a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f12e:	059a      	lsls	r2, r3, #22
 800f130:	d4ee      	bmi.n	800f110 <__smakebuf_r+0x18>
 800f132:	f023 0303 	bic.w	r3, r3, #3
 800f136:	f043 0302 	orr.w	r3, r3, #2
 800f13a:	81a3      	strh	r3, [r4, #12]
 800f13c:	e7e2      	b.n	800f104 <__smakebuf_r+0xc>
 800f13e:	89a3      	ldrh	r3, [r4, #12]
 800f140:	6020      	str	r0, [r4, #0]
 800f142:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f146:	81a3      	strh	r3, [r4, #12]
 800f148:	9b01      	ldr	r3, [sp, #4]
 800f14a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f14e:	b15b      	cbz	r3, 800f168 <__smakebuf_r+0x70>
 800f150:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f154:	4630      	mov	r0, r6
 800f156:	f000 f837 	bl	800f1c8 <_isatty_r>
 800f15a:	b128      	cbz	r0, 800f168 <__smakebuf_r+0x70>
 800f15c:	89a3      	ldrh	r3, [r4, #12]
 800f15e:	f023 0303 	bic.w	r3, r3, #3
 800f162:	f043 0301 	orr.w	r3, r3, #1
 800f166:	81a3      	strh	r3, [r4, #12]
 800f168:	89a3      	ldrh	r3, [r4, #12]
 800f16a:	431d      	orrs	r5, r3
 800f16c:	81a5      	strh	r5, [r4, #12]
 800f16e:	e7cf      	b.n	800f110 <__smakebuf_r+0x18>

0800f170 <memmove>:
 800f170:	4288      	cmp	r0, r1
 800f172:	b510      	push	{r4, lr}
 800f174:	eb01 0402 	add.w	r4, r1, r2
 800f178:	d902      	bls.n	800f180 <memmove+0x10>
 800f17a:	4284      	cmp	r4, r0
 800f17c:	4623      	mov	r3, r4
 800f17e:	d807      	bhi.n	800f190 <memmove+0x20>
 800f180:	1e43      	subs	r3, r0, #1
 800f182:	42a1      	cmp	r1, r4
 800f184:	d008      	beq.n	800f198 <memmove+0x28>
 800f186:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f18a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f18e:	e7f8      	b.n	800f182 <memmove+0x12>
 800f190:	4402      	add	r2, r0
 800f192:	4601      	mov	r1, r0
 800f194:	428a      	cmp	r2, r1
 800f196:	d100      	bne.n	800f19a <memmove+0x2a>
 800f198:	bd10      	pop	{r4, pc}
 800f19a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f19e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f1a2:	e7f7      	b.n	800f194 <memmove+0x24>

0800f1a4 <_fstat_r>:
 800f1a4:	b538      	push	{r3, r4, r5, lr}
 800f1a6:	4d07      	ldr	r5, [pc, #28]	@ (800f1c4 <_fstat_r+0x20>)
 800f1a8:	2300      	movs	r3, #0
 800f1aa:	4604      	mov	r4, r0
 800f1ac:	4608      	mov	r0, r1
 800f1ae:	4611      	mov	r1, r2
 800f1b0:	602b      	str	r3, [r5, #0]
 800f1b2:	f7f5 fea7 	bl	8004f04 <_fstat>
 800f1b6:	1c43      	adds	r3, r0, #1
 800f1b8:	d102      	bne.n	800f1c0 <_fstat_r+0x1c>
 800f1ba:	682b      	ldr	r3, [r5, #0]
 800f1bc:	b103      	cbz	r3, 800f1c0 <_fstat_r+0x1c>
 800f1be:	6023      	str	r3, [r4, #0]
 800f1c0:	bd38      	pop	{r3, r4, r5, pc}
 800f1c2:	bf00      	nop
 800f1c4:	2000124c 	.word	0x2000124c

0800f1c8 <_isatty_r>:
 800f1c8:	b538      	push	{r3, r4, r5, lr}
 800f1ca:	4d06      	ldr	r5, [pc, #24]	@ (800f1e4 <_isatty_r+0x1c>)
 800f1cc:	2300      	movs	r3, #0
 800f1ce:	4604      	mov	r4, r0
 800f1d0:	4608      	mov	r0, r1
 800f1d2:	602b      	str	r3, [r5, #0]
 800f1d4:	f7f5 fea6 	bl	8004f24 <_isatty>
 800f1d8:	1c43      	adds	r3, r0, #1
 800f1da:	d102      	bne.n	800f1e2 <_isatty_r+0x1a>
 800f1dc:	682b      	ldr	r3, [r5, #0]
 800f1de:	b103      	cbz	r3, 800f1e2 <_isatty_r+0x1a>
 800f1e0:	6023      	str	r3, [r4, #0]
 800f1e2:	bd38      	pop	{r3, r4, r5, pc}
 800f1e4:	2000124c 	.word	0x2000124c

0800f1e8 <_realloc_r>:
 800f1e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f1ec:	4607      	mov	r7, r0
 800f1ee:	4614      	mov	r4, r2
 800f1f0:	460d      	mov	r5, r1
 800f1f2:	b921      	cbnz	r1, 800f1fe <_realloc_r+0x16>
 800f1f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f1f8:	4611      	mov	r1, r2
 800f1fa:	f7fe be1b 	b.w	800de34 <_malloc_r>
 800f1fe:	b92a      	cbnz	r2, 800f20c <_realloc_r+0x24>
 800f200:	f7ff fa38 	bl	800e674 <_free_r>
 800f204:	4625      	mov	r5, r4
 800f206:	4628      	mov	r0, r5
 800f208:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f20c:	f000 f81a 	bl	800f244 <_malloc_usable_size_r>
 800f210:	4284      	cmp	r4, r0
 800f212:	4606      	mov	r6, r0
 800f214:	d802      	bhi.n	800f21c <_realloc_r+0x34>
 800f216:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f21a:	d8f4      	bhi.n	800f206 <_realloc_r+0x1e>
 800f21c:	4621      	mov	r1, r4
 800f21e:	4638      	mov	r0, r7
 800f220:	f7fe fe08 	bl	800de34 <_malloc_r>
 800f224:	4680      	mov	r8, r0
 800f226:	b908      	cbnz	r0, 800f22c <_realloc_r+0x44>
 800f228:	4645      	mov	r5, r8
 800f22a:	e7ec      	b.n	800f206 <_realloc_r+0x1e>
 800f22c:	42b4      	cmp	r4, r6
 800f22e:	4622      	mov	r2, r4
 800f230:	4629      	mov	r1, r5
 800f232:	bf28      	it	cs
 800f234:	4632      	movcs	r2, r6
 800f236:	f7ff fa0e 	bl	800e656 <memcpy>
 800f23a:	4629      	mov	r1, r5
 800f23c:	4638      	mov	r0, r7
 800f23e:	f7ff fa19 	bl	800e674 <_free_r>
 800f242:	e7f1      	b.n	800f228 <_realloc_r+0x40>

0800f244 <_malloc_usable_size_r>:
 800f244:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f248:	1f18      	subs	r0, r3, #4
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	bfbc      	itt	lt
 800f24e:	580b      	ldrlt	r3, [r1, r0]
 800f250:	18c0      	addlt	r0, r0, r3
 800f252:	4770      	bx	lr

0800f254 <_init>:
 800f254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f256:	bf00      	nop
 800f258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f25a:	bc08      	pop	{r3}
 800f25c:	469e      	mov	lr, r3
 800f25e:	4770      	bx	lr

0800f260 <_fini>:
 800f260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f262:	bf00      	nop
 800f264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f266:	bc08      	pop	{r3}
 800f268:	469e      	mov	lr, r3
 800f26a:	4770      	bx	lr
