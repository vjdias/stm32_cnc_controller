
CNC_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007634  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000328  080077c4  080077c4  000087c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007aec  08007aec  00009070  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007aec  08007aec  00008aec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007af4  08007af4  00009070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007af4  08007af4  00008af4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007af8  08007af8  00008af8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08007afc  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000468  20000070  08007b6c  00009070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004d8  08007b6c  000094d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000146ee  00000000  00000000  000090a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ecb  00000000  00000000  0001d78e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001278  00000000  00000000  00020660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e62  00000000  00000000  000218d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000039a1  00000000  00000000  0002273a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b184  00000000  00000000  000260db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f5aee  00000000  00000000  0004125f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00136d4d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005360  00000000  00000000  00136d90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  0013c0f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080077ac 	.word	0x080077ac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080077ac 	.word	0x080077ac

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <log_event_ids>:

void log_poll(void){
    // No-op: transmission is synchronous via _write/HAL_UART_Transmit.
}

void log_event_ids(uint8_t service_id, uint8_t state_id, int32_t status){
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	4603      	mov	r3, r0
 80005a4:	603a      	str	r2, [r7, #0]
 80005a6:	71fb      	strb	r3, [r7, #7]
 80005a8:	460b      	mov	r3, r1
 80005aa:	71bb      	strb	r3, [r7, #6]
    printf("L:svc=%u,state=%u,status=%ld\r\n", (unsigned)service_id, (unsigned)state_id, (long)status);
 80005ac:	79f9      	ldrb	r1, [r7, #7]
 80005ae:	79ba      	ldrb	r2, [r7, #6]
 80005b0:	683b      	ldr	r3, [r7, #0]
 80005b2:	4803      	ldr	r0, [pc, #12]	@ (80005c0 <log_event_ids+0x24>)
 80005b4:	f006 fb3c 	bl	8006c30 <iprintf>
}
 80005b8:	bf00      	nop
 80005ba:	3708      	adds	r7, #8
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	080077c4 	.word	0x080077c4

080005c4 <log_event_names>:

void log_event_names(const char* service_name, const char* state_name, const char* status_text){
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b084      	sub	sp, #16
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	60f8      	str	r0, [r7, #12]
 80005cc:	60b9      	str	r1, [r7, #8]
 80005ce:	607a      	str	r2, [r7, #4]
    if(!service_name) service_name = "?";
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d101      	bne.n	80005da <log_event_names+0x16>
 80005d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000604 <log_event_names+0x40>)
 80005d8:	60fb      	str	r3, [r7, #12]
    if(!state_name) state_name = "?";
 80005da:	68bb      	ldr	r3, [r7, #8]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d101      	bne.n	80005e4 <log_event_names+0x20>
 80005e0:	4b08      	ldr	r3, [pc, #32]	@ (8000604 <log_event_names+0x40>)
 80005e2:	60bb      	str	r3, [r7, #8]
    if(!status_text) status_text = "?";
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d101      	bne.n	80005ee <log_event_names+0x2a>
 80005ea:	4b06      	ldr	r3, [pc, #24]	@ (8000604 <log_event_names+0x40>)
 80005ec:	607b      	str	r3, [r7, #4]
    printf("LOG:service=%s,state=%s,status=%s\r\n", service_name, state_name, status_text);
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	68ba      	ldr	r2, [r7, #8]
 80005f2:	68f9      	ldr	r1, [r7, #12]
 80005f4:	4804      	ldr	r0, [pc, #16]	@ (8000608 <log_event_names+0x44>)
 80005f6:	f006 fb1b 	bl	8006c30 <iprintf>
}
 80005fa:	bf00      	nop
 80005fc:	3710      	adds	r7, #16
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	080077e4 	.word	0x080077e4
 8000608:	080077e8 	.word	0x080077e8

0800060c <_write>:

// Keep _write exactly as-is: used by printf to send to USART1.
int _write(int fd, char *ptr, int len) {
 800060c:	b580      	push	{r7, lr}
 800060e:	b086      	sub	sp, #24
 8000610:	af00      	add	r7, sp, #0
 8000612:	60f8      	str	r0, [r7, #12]
 8000614:	60b9      	str	r1, [r7, #8]
 8000616:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef hstatus;

    if (fd == 1 || fd == 2) {
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	2b01      	cmp	r3, #1
 800061c:	d002      	beq.n	8000624 <_write+0x18>
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	2b02      	cmp	r3, #2
 8000622:	d111      	bne.n	8000648 <_write+0x3c>
      hstatus = HAL_UART_Transmit(&huart1, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	b29a      	uxth	r2, r3
 8000628:	f04f 33ff 	mov.w	r3, #4294967295
 800062c:	68b9      	ldr	r1, [r7, #8]
 800062e:	4809      	ldr	r0, [pc, #36]	@ (8000654 <_write+0x48>)
 8000630:	f005 facc 	bl	8005bcc <HAL_UART_Transmit>
 8000634:	4603      	mov	r3, r0
 8000636:	75fb      	strb	r3, [r7, #23]
      if (hstatus == HAL_OK)
 8000638:	7dfb      	ldrb	r3, [r7, #23]
 800063a:	2b00      	cmp	r3, #0
 800063c:	d101      	bne.n	8000642 <_write+0x36>
        return len;
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	e004      	b.n	800064c <_write+0x40>
      else
        return -1;
 8000642:	f04f 33ff 	mov.w	r3, #4294967295
 8000646:	e001      	b.n	800064c <_write+0x40>
    }
    return -1;
 8000648:	f04f 33ff 	mov.w	r3, #4294967295
}
 800064c:	4618      	mov	r0, r3
 800064e:	3718      	adds	r7, #24
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	20000300 	.word	0x20000300

08000658 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800065e:	4b10      	ldr	r3, [pc, #64]	@ (80006a0 <MX_DMA_Init+0x48>)
 8000660:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000662:	4a0f      	ldr	r2, [pc, #60]	@ (80006a0 <MX_DMA_Init+0x48>)
 8000664:	f043 0301 	orr.w	r3, r3, #1
 8000668:	6493      	str	r3, [r2, #72]	@ 0x48
 800066a:	4b0d      	ldr	r3, [pc, #52]	@ (80006a0 <MX_DMA_Init+0x48>)
 800066c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800066e:	f003 0301 	and.w	r3, r3, #1
 8000672:	607b      	str	r3, [r7, #4]
 8000674:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000676:	2200      	movs	r2, #0
 8000678:	2100      	movs	r1, #0
 800067a:	200c      	movs	r0, #12
 800067c:	f000 fffa 	bl	8001674 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000680:	200c      	movs	r0, #12
 8000682:	f001 f823 	bl	80016cc <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000686:	2200      	movs	r2, #0
 8000688:	2100      	movs	r1, #0
 800068a:	200d      	movs	r0, #13
 800068c:	f000 fff2 	bl	8001674 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000690:	200d      	movs	r0, #13
 8000692:	f001 f81b 	bl	80016cc <HAL_NVIC_EnableIRQ>

}
 8000696:	bf00      	nop
 8000698:	3708      	adds	r7, #8
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	40021000 	.word	0x40021000

080006a4 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b08c      	sub	sp, #48	@ 0x30
 80006a8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006aa:	f107 031c 	add.w	r3, r7, #28
 80006ae:	2200      	movs	r2, #0
 80006b0:	601a      	str	r2, [r3, #0]
 80006b2:	605a      	str	r2, [r3, #4]
 80006b4:	609a      	str	r2, [r3, #8]
 80006b6:	60da      	str	r2, [r3, #12]
 80006b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006ba:	4b4d      	ldr	r3, [pc, #308]	@ (80007f0 <MX_GPIO_Init+0x14c>)
 80006bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006be:	4a4c      	ldr	r2, [pc, #304]	@ (80007f0 <MX_GPIO_Init+0x14c>)
 80006c0:	f043 0310 	orr.w	r3, r3, #16
 80006c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006c6:	4b4a      	ldr	r3, [pc, #296]	@ (80007f0 <MX_GPIO_Init+0x14c>)
 80006c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006ca:	f003 0310 	and.w	r3, r3, #16
 80006ce:	61bb      	str	r3, [r7, #24]
 80006d0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006d2:	4b47      	ldr	r3, [pc, #284]	@ (80007f0 <MX_GPIO_Init+0x14c>)
 80006d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006d6:	4a46      	ldr	r2, [pc, #280]	@ (80007f0 <MX_GPIO_Init+0x14c>)
 80006d8:	f043 0304 	orr.w	r3, r3, #4
 80006dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006de:	4b44      	ldr	r3, [pc, #272]	@ (80007f0 <MX_GPIO_Init+0x14c>)
 80006e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006e2:	f003 0304 	and.w	r3, r3, #4
 80006e6:	617b      	str	r3, [r7, #20]
 80006e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ea:	4b41      	ldr	r3, [pc, #260]	@ (80007f0 <MX_GPIO_Init+0x14c>)
 80006ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006ee:	4a40      	ldr	r2, [pc, #256]	@ (80007f0 <MX_GPIO_Init+0x14c>)
 80006f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006f6:	4b3e      	ldr	r3, [pc, #248]	@ (80007f0 <MX_GPIO_Init+0x14c>)
 80006f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006fe:	613b      	str	r3, [r7, #16]
 8000700:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000702:	4b3b      	ldr	r3, [pc, #236]	@ (80007f0 <MX_GPIO_Init+0x14c>)
 8000704:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000706:	4a3a      	ldr	r2, [pc, #232]	@ (80007f0 <MX_GPIO_Init+0x14c>)
 8000708:	f043 0301 	orr.w	r3, r3, #1
 800070c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800070e:	4b38      	ldr	r3, [pc, #224]	@ (80007f0 <MX_GPIO_Init+0x14c>)
 8000710:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000712:	f003 0301 	and.w	r3, r3, #1
 8000716:	60fb      	str	r3, [r7, #12]
 8000718:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800071a:	4b35      	ldr	r3, [pc, #212]	@ (80007f0 <MX_GPIO_Init+0x14c>)
 800071c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800071e:	4a34      	ldr	r2, [pc, #208]	@ (80007f0 <MX_GPIO_Init+0x14c>)
 8000720:	f043 0302 	orr.w	r3, r3, #2
 8000724:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000726:	4b32      	ldr	r3, [pc, #200]	@ (80007f0 <MX_GPIO_Init+0x14c>)
 8000728:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800072a:	f003 0302 	and.w	r3, r3, #2
 800072e:	60bb      	str	r3, [r7, #8]
 8000730:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000732:	4b2f      	ldr	r3, [pc, #188]	@ (80007f0 <MX_GPIO_Init+0x14c>)
 8000734:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000736:	4a2e      	ldr	r2, [pc, #184]	@ (80007f0 <MX_GPIO_Init+0x14c>)
 8000738:	f043 0308 	orr.w	r3, r3, #8
 800073c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800073e:	4b2c      	ldr	r3, [pc, #176]	@ (80007f0 <MX_GPIO_Init+0x14c>)
 8000740:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000742:	f003 0308 	and.w	r3, r3, #8
 8000746:	607b      	str	r3, [r7, #4]
 8000748:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PE2 PE5 PE6 PE7
                           PE8 PE9 PE10 PE11
                           PE12 PE13 PE14 PE15
                           PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 800074a:	f64f 73e7 	movw	r3, #65511	@ 0xffe7
 800074e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000750:	2303      	movs	r3, #3
 8000752:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000754:	2300      	movs	r3, #0
 8000756:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000758:	f107 031c 	add.w	r3, r7, #28
 800075c:	4619      	mov	r1, r3
 800075e:	4825      	ldr	r0, [pc, #148]	@ (80007f4 <MX_GPIO_Init+0x150>)
 8000760:	f001 fb1e 	bl	8001da0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC1 PC2 PC3 PC4
                           PC5 PC6 PC7 PC8
                           PC9 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 8000764:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000768:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800076a:	2303      	movs	r3, #3
 800076c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076e:	2300      	movs	r3, #0
 8000770:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000772:	f107 031c 	add.w	r3, r7, #28
 8000776:	4619      	mov	r1, r3
 8000778:	481f      	ldr	r0, [pc, #124]	@ (80007f8 <MX_GPIO_Init+0x154>)
 800077a:	f001 fb11 	bl	8001da0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800077e:	2303      	movs	r3, #3
 8000780:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000782:	2303      	movs	r3, #3
 8000784:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000786:	2300      	movs	r3, #0
 8000788:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800078a:	f107 031c 	add.w	r3, r7, #28
 800078e:	4619      	mov	r1, r3
 8000790:	481a      	ldr	r0, [pc, #104]	@ (80007fc <MX_GPIO_Init+0x158>)
 8000792:	f001 fb05 	bl	8001da0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA8 PA9
                           PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_8|GPIO_PIN_9
 8000796:	f641 730c 	movw	r3, #7948	@ 0x1f0c
 800079a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800079c:	2303      	movs	r3, #3
 800079e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a0:	2300      	movs	r3, #0
 80007a2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007a4:	f107 031c 	add.w	r3, r7, #28
 80007a8:	4619      	mov	r1, r3
 80007aa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007ae:	f001 faf7 	bl	8001da0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB4 PB5 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 80007b2:	f64f 7337 	movw	r3, #65335	@ 0xff37
 80007b6:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007b8:	2303      	movs	r3, #3
 80007ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007bc:	2300      	movs	r3, #0
 80007be:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007c0:	f107 031c 	add.w	r3, r7, #28
 80007c4:	4619      	mov	r1, r3
 80007c6:	480e      	ldr	r0, [pc, #56]	@ (8000800 <MX_GPIO_Init+0x15c>)
 80007c8:	f001 faea 	bl	8001da0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15
                           PD0 PD1 PD2 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80007cc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80007d0:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007d2:	2303      	movs	r3, #3
 80007d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d6:	2300      	movs	r3, #0
 80007d8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007da:	f107 031c 	add.w	r3, r7, #28
 80007de:	4619      	mov	r1, r3
 80007e0:	4808      	ldr	r0, [pc, #32]	@ (8000804 <MX_GPIO_Init+0x160>)
 80007e2:	f001 fadd 	bl	8001da0 <HAL_GPIO_Init>

}
 80007e6:	bf00      	nop
 80007e8:	3730      	adds	r7, #48	@ 0x30
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	40021000 	.word	0x40021000
 80007f4:	48001000 	.word	0x48001000
 80007f8:	48000800 	.word	0x48000800
 80007fc:	48001c00 	.word	0x48001c00
 8000800:	48000400 	.word	0x48000400
 8000804:	48000c00 	.word	0x48000c00

08000808 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800080c:	f000 fdcd 	bl	80013aa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000810:	f000 f824 	bl	800085c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000814:	f7ff ff46 	bl	80006a4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000818:	f7ff ff1e 	bl	8000658 <MX_DMA_Init>
  MX_SPI1_Init();
 800081c:	f000 f8a0 	bl	8000960 <MX_SPI1_Init>
  MX_TIM6_Init();
 8000820:	f000 fb9c 	bl	8000f5c <MX_TIM6_Init>
  MX_TIM2_Init();
 8000824:	f000 fa9a 	bl	8000d5c <MX_TIM2_Init>
  MX_TIM5_Init();
 8000828:	f000 fb42 	bl	8000eb0 <MX_TIM5_Init>
  MX_TIM7_Init();
 800082c:	f000 fbcc 	bl	8000fc8 <MX_TIM7_Init>
  MX_TIM3_Init();
 8000830:	f000 fae8 	bl	8000e04 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000834:	f000 fd02 	bl	800123c <MX_USART1_UART_Init>
	// app_init(); // (comentado a pedido)

	// Enfileira diretamente no SPI (slave) o frame de teste "hello".
	// O master (Raspberry) deve gerar clock para que os bytes sejam enviados.
	// Usa DMA em modo circular para repetir continuamente o frame.
	if (HAL_SPI_Transmit_DMA(&hspi1, g_hello_frame, (uint16_t)sizeof g_hello_frame) != HAL_OK)
 8000838:	2207      	movs	r2, #7
 800083a:	4906      	ldr	r1, [pc, #24]	@ (8000854 <main+0x4c>)
 800083c:	4806      	ldr	r0, [pc, #24]	@ (8000858 <main+0x50>)
 800083e:	f003 fee7 	bl	8004610 <HAL_SPI_Transmit_DMA>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d002      	beq.n	800084e <main+0x46>
	{
		Error_Handler();
 8000848:	f000 f866 	bl	8000918 <Error_Handler>
	// LOGT_THIS(LOG_STATE_START, PROTO_OK, "hello", "queued");
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 800084c:	bf00      	nop
 800084e:	bf00      	nop
 8000850:	e7fd      	b.n	800084e <main+0x46>
 8000852:	bf00      	nop
 8000854:	20000000 	.word	0x20000000
 8000858:	2000008c 	.word	0x2000008c

0800085c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b096      	sub	sp, #88	@ 0x58
 8000860:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000862:	f107 0314 	add.w	r3, r7, #20
 8000866:	2244      	movs	r2, #68	@ 0x44
 8000868:	2100      	movs	r1, #0
 800086a:	4618      	mov	r0, r3
 800086c:	f006 fa35 	bl	8006cda <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000870:	463b      	mov	r3, r7
 8000872:	2200      	movs	r2, #0
 8000874:	601a      	str	r2, [r3, #0]
 8000876:	605a      	str	r2, [r3, #4]
 8000878:	609a      	str	r2, [r3, #8]
 800087a:	60da      	str	r2, [r3, #12]
 800087c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800087e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000882:	f001 fd27 	bl	80022d4 <HAL_PWREx_ControlVoltageScaling>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800088c:	f000 f844 	bl	8000918 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000890:	2310      	movs	r3, #16
 8000892:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000894:	2301      	movs	r3, #1
 8000896:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000898:	2300      	movs	r3, #0
 800089a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800089c:	2360      	movs	r3, #96	@ 0x60
 800089e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008a0:	2302      	movs	r3, #2
 80008a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80008a4:	2301      	movs	r3, #1
 80008a6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80008a8:	2301      	movs	r3, #1
 80008aa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80008ac:	2328      	movs	r3, #40	@ 0x28
 80008ae:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80008b0:	2307      	movs	r3, #7
 80008b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80008b4:	2302      	movs	r3, #2
 80008b6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80008b8:	2302      	movs	r3, #2
 80008ba:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008bc:	f107 0314 	add.w	r3, r7, #20
 80008c0:	4618      	mov	r0, r3
 80008c2:	f001 fd69 	bl	8002398 <HAL_RCC_OscConfig>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80008cc:	f000 f824 	bl	8000918 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008d0:	230f      	movs	r3, #15
 80008d2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008d4:	2303      	movs	r3, #3
 80008d6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008d8:	2300      	movs	r3, #0
 80008da:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008dc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008e2:	2300      	movs	r3, #0
 80008e4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80008e6:	463b      	mov	r3, r7
 80008e8:	2104      	movs	r1, #4
 80008ea:	4618      	mov	r0, r3
 80008ec:	f002 fa56 	bl	8002d9c <HAL_RCC_ClockConfig>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80008f6:	f000 f80f 	bl	8000918 <Error_Handler>
  }
}
 80008fa:	bf00      	nop
 80008fc:	3758      	adds	r7, #88	@ 0x58
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}

08000902 <HAL_SPI_TxCpltCallback>:

/* USER CODE BEGIN 4 */
// Em modo DMA circular não é necessário rearmar manualmente; callback mantido para debug futuro
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *h)
{
 8000902:	b480      	push	{r7}
 8000904:	b083      	sub	sp, #12
 8000906:	af00      	add	r7, sp, #0
 8000908:	6078      	str	r0, [r7, #4]
  (void)h;
}
 800090a:	bf00      	nop
 800090c:	370c      	adds	r7, #12
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr
	...

08000918 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
#if LOG_ENABLE
	log_event_ids(LOG_SVC_APP, LOG_STATE_ERROR, -1);
 800091c:	f04f 32ff 	mov.w	r2, #4294967295
 8000920:	2164      	movs	r1, #100	@ 0x64
 8000922:	2000      	movs	r0, #0
 8000924:	f7ff fe3a 	bl	800059c <log_event_ids>
	log_event_names("app", "error", "Error_Handler");
 8000928:	4a04      	ldr	r2, [pc, #16]	@ (800093c <Error_Handler+0x24>)
 800092a:	4905      	ldr	r1, [pc, #20]	@ (8000940 <Error_Handler+0x28>)
 800092c:	4805      	ldr	r0, [pc, #20]	@ (8000944 <Error_Handler+0x2c>)
 800092e:	f7ff fe49 	bl	80005c4 <log_event_names>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000932:	b672      	cpsid	i
}
 8000934:	bf00      	nop
#endif
	__disable_irq();
	while (1) {
 8000936:	bf00      	nop
 8000938:	e7fd      	b.n	8000936 <Error_Handler+0x1e>
 800093a:	bf00      	nop
 800093c:	0800780c 	.word	0x0800780c
 8000940:	0800781c 	.word	0x0800781c
 8000944:	08007824 	.word	0x08007824

08000948 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8000948:	b480      	push	{r7}
 800094a:	b083      	sub	sp, #12
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
 8000950:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
	 ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000952:	bf00      	nop
 8000954:	370c      	adds	r7, #12
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr
	...

08000960 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000964:	4b18      	ldr	r3, [pc, #96]	@ (80009c8 <MX_SPI1_Init+0x68>)
 8000966:	4a19      	ldr	r2, [pc, #100]	@ (80009cc <MX_SPI1_Init+0x6c>)
 8000968:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 800096a:	4b17      	ldr	r3, [pc, #92]	@ (80009c8 <MX_SPI1_Init+0x68>)
 800096c:	2200      	movs	r2, #0
 800096e:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000970:	4b15      	ldr	r3, [pc, #84]	@ (80009c8 <MX_SPI1_Init+0x68>)
 8000972:	2200      	movs	r2, #0
 8000974:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000976:	4b14      	ldr	r3, [pc, #80]	@ (80009c8 <MX_SPI1_Init+0x68>)
 8000978:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800097c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800097e:	4b12      	ldr	r3, [pc, #72]	@ (80009c8 <MX_SPI1_Init+0x68>)
 8000980:	2202      	movs	r2, #2
 8000982:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000984:	4b10      	ldr	r3, [pc, #64]	@ (80009c8 <MX_SPI1_Init+0x68>)
 8000986:	2201      	movs	r2, #1
 8000988:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 800098a:	4b0f      	ldr	r3, [pc, #60]	@ (80009c8 <MX_SPI1_Init+0x68>)
 800098c:	2200      	movs	r2, #0
 800098e:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000990:	4b0d      	ldr	r3, [pc, #52]	@ (80009c8 <MX_SPI1_Init+0x68>)
 8000992:	2200      	movs	r2, #0
 8000994:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000996:	4b0c      	ldr	r3, [pc, #48]	@ (80009c8 <MX_SPI1_Init+0x68>)
 8000998:	2200      	movs	r2, #0
 800099a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800099c:	4b0a      	ldr	r3, [pc, #40]	@ (80009c8 <MX_SPI1_Init+0x68>)
 800099e:	2200      	movs	r2, #0
 80009a0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80009a2:	4b09      	ldr	r3, [pc, #36]	@ (80009c8 <MX_SPI1_Init+0x68>)
 80009a4:	2207      	movs	r2, #7
 80009a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80009a8:	4b07      	ldr	r3, [pc, #28]	@ (80009c8 <MX_SPI1_Init+0x68>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80009ae:	4b06      	ldr	r3, [pc, #24]	@ (80009c8 <MX_SPI1_Init+0x68>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009b4:	4804      	ldr	r0, [pc, #16]	@ (80009c8 <MX_SPI1_Init+0x68>)
 80009b6:	f003 fc3d 	bl	8004234 <HAL_SPI_Init>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 80009c0:	f7ff ffaa 	bl	8000918 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009c4:	bf00      	nop
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	2000008c 	.word	0x2000008c
 80009cc:	40013000 	.word	0x40013000

080009d0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b08a      	sub	sp, #40	@ 0x28
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d8:	f107 0314 	add.w	r3, r7, #20
 80009dc:	2200      	movs	r2, #0
 80009de:	601a      	str	r2, [r3, #0]
 80009e0:	605a      	str	r2, [r3, #4]
 80009e2:	609a      	str	r2, [r3, #8]
 80009e4:	60da      	str	r2, [r3, #12]
 80009e6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a45      	ldr	r2, [pc, #276]	@ (8000b04 <HAL_SPI_MspInit+0x134>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	f040 8083 	bne.w	8000afa <HAL_SPI_MspInit+0x12a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80009f4:	4b44      	ldr	r3, [pc, #272]	@ (8000b08 <HAL_SPI_MspInit+0x138>)
 80009f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009f8:	4a43      	ldr	r2, [pc, #268]	@ (8000b08 <HAL_SPI_MspInit+0x138>)
 80009fa:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80009fe:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a00:	4b41      	ldr	r3, [pc, #260]	@ (8000b08 <HAL_SPI_MspInit+0x138>)
 8000a02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a04:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000a08:	613b      	str	r3, [r7, #16]
 8000a0a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0c:	4b3e      	ldr	r3, [pc, #248]	@ (8000b08 <HAL_SPI_MspInit+0x138>)
 8000a0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a10:	4a3d      	ldr	r2, [pc, #244]	@ (8000b08 <HAL_SPI_MspInit+0x138>)
 8000a12:	f043 0301 	orr.w	r3, r3, #1
 8000a16:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a18:	4b3b      	ldr	r3, [pc, #236]	@ (8000b08 <HAL_SPI_MspInit+0x138>)
 8000a1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a1c:	f003 0301 	and.w	r3, r3, #1
 8000a20:	60fb      	str	r3, [r7, #12]
 8000a22:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000a24:	23f0      	movs	r3, #240	@ 0xf0
 8000a26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a28:	2302      	movs	r3, #2
 8000a2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a30:	2303      	movs	r3, #3
 8000a32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a34:	2305      	movs	r3, #5
 8000a36:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a38:	f107 0314 	add.w	r3, r7, #20
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a42:	f001 f9ad 	bl	8001da0 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8000a46:	4b31      	ldr	r3, [pc, #196]	@ (8000b0c <HAL_SPI_MspInit+0x13c>)
 8000a48:	4a31      	ldr	r2, [pc, #196]	@ (8000b10 <HAL_SPI_MspInit+0x140>)
 8000a4a:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_1;
 8000a4c:	4b2f      	ldr	r3, [pc, #188]	@ (8000b0c <HAL_SPI_MspInit+0x13c>)
 8000a4e:	2201      	movs	r2, #1
 8000a50:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a52:	4b2e      	ldr	r3, [pc, #184]	@ (8000b0c <HAL_SPI_MspInit+0x13c>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a58:	4b2c      	ldr	r3, [pc, #176]	@ (8000b0c <HAL_SPI_MspInit+0x13c>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a5e:	4b2b      	ldr	r3, [pc, #172]	@ (8000b0c <HAL_SPI_MspInit+0x13c>)
 8000a60:	2280      	movs	r2, #128	@ 0x80
 8000a62:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a64:	4b29      	ldr	r3, [pc, #164]	@ (8000b0c <HAL_SPI_MspInit+0x13c>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a6a:	4b28      	ldr	r3, [pc, #160]	@ (8000b0c <HAL_SPI_MspInit+0x13c>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 8000a70:	4b26      	ldr	r3, [pc, #152]	@ (8000b0c <HAL_SPI_MspInit+0x13c>)
 8000a72:	2220      	movs	r2, #32
 8000a74:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000a76:	4b25      	ldr	r3, [pc, #148]	@ (8000b0c <HAL_SPI_MspInit+0x13c>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000a7c:	4823      	ldr	r0, [pc, #140]	@ (8000b0c <HAL_SPI_MspInit+0x13c>)
 8000a7e:	f000 fe49 	bl	8001714 <HAL_DMA_Init>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <HAL_SPI_MspInit+0xbc>
    {
      Error_Handler();
 8000a88:	f7ff ff46 	bl	8000918 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	4a1f      	ldr	r2, [pc, #124]	@ (8000b0c <HAL_SPI_MspInit+0x13c>)
 8000a90:	659a      	str	r2, [r3, #88]	@ 0x58
 8000a92:	4a1e      	ldr	r2, [pc, #120]	@ (8000b0c <HAL_SPI_MspInit+0x13c>)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8000a98:	4b1e      	ldr	r3, [pc, #120]	@ (8000b14 <HAL_SPI_MspInit+0x144>)
 8000a9a:	4a1f      	ldr	r2, [pc, #124]	@ (8000b18 <HAL_SPI_MspInit+0x148>)
 8000a9c:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 8000a9e:	4b1d      	ldr	r3, [pc, #116]	@ (8000b14 <HAL_SPI_MspInit+0x144>)
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000aa4:	4b1b      	ldr	r3, [pc, #108]	@ (8000b14 <HAL_SPI_MspInit+0x144>)
 8000aa6:	2210      	movs	r2, #16
 8000aa8:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000aaa:	4b1a      	ldr	r3, [pc, #104]	@ (8000b14 <HAL_SPI_MspInit+0x144>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000ab0:	4b18      	ldr	r3, [pc, #96]	@ (8000b14 <HAL_SPI_MspInit+0x144>)
 8000ab2:	2280      	movs	r2, #128	@ 0x80
 8000ab4:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ab6:	4b17      	ldr	r3, [pc, #92]	@ (8000b14 <HAL_SPI_MspInit+0x144>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000abc:	4b15      	ldr	r3, [pc, #84]	@ (8000b14 <HAL_SPI_MspInit+0x144>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 8000ac2:	4b14      	ldr	r3, [pc, #80]	@ (8000b14 <HAL_SPI_MspInit+0x144>)
 8000ac4:	2220      	movs	r2, #32
 8000ac6:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000ac8:	4b12      	ldr	r3, [pc, #72]	@ (8000b14 <HAL_SPI_MspInit+0x144>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000ace:	4811      	ldr	r0, [pc, #68]	@ (8000b14 <HAL_SPI_MspInit+0x144>)
 8000ad0:	f000 fe20 	bl	8001714 <HAL_DMA_Init>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <HAL_SPI_MspInit+0x10e>
    {
      Error_Handler();
 8000ada:	f7ff ff1d 	bl	8000918 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	4a0c      	ldr	r2, [pc, #48]	@ (8000b14 <HAL_SPI_MspInit+0x144>)
 8000ae2:	655a      	str	r2, [r3, #84]	@ 0x54
 8000ae4:	4a0b      	ldr	r2, [pc, #44]	@ (8000b14 <HAL_SPI_MspInit+0x144>)
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000aea:	2200      	movs	r2, #0
 8000aec:	2100      	movs	r1, #0
 8000aee:	2023      	movs	r0, #35	@ 0x23
 8000af0:	f000 fdc0 	bl	8001674 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000af4:	2023      	movs	r0, #35	@ 0x23
 8000af6:	f000 fde9 	bl	80016cc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000afa:	bf00      	nop
 8000afc:	3728      	adds	r7, #40	@ 0x28
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	40013000 	.word	0x40013000
 8000b08:	40021000 	.word	0x40021000
 8000b0c:	200000f0 	.word	0x200000f0
 8000b10:	4002001c 	.word	0x4002001c
 8000b14:	20000138 	.word	0x20000138
 8000b18:	40020030 	.word	0x40020030

08000b1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b083      	sub	sp, #12
 8000b20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b22:	4b0f      	ldr	r3, [pc, #60]	@ (8000b60 <HAL_MspInit+0x44>)
 8000b24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b26:	4a0e      	ldr	r2, [pc, #56]	@ (8000b60 <HAL_MspInit+0x44>)
 8000b28:	f043 0301 	orr.w	r3, r3, #1
 8000b2c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b2e:	4b0c      	ldr	r3, [pc, #48]	@ (8000b60 <HAL_MspInit+0x44>)
 8000b30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b32:	f003 0301 	and.w	r3, r3, #1
 8000b36:	607b      	str	r3, [r7, #4]
 8000b38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b3a:	4b09      	ldr	r3, [pc, #36]	@ (8000b60 <HAL_MspInit+0x44>)
 8000b3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b3e:	4a08      	ldr	r2, [pc, #32]	@ (8000b60 <HAL_MspInit+0x44>)
 8000b40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b44:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b46:	4b06      	ldr	r3, [pc, #24]	@ (8000b60 <HAL_MspInit+0x44>)
 8000b48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b4e:	603b      	str	r3, [r7, #0]
 8000b50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b52:	bf00      	nop
 8000b54:	370c      	adds	r7, #12
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	40021000 	.word	0x40021000

08000b64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8000b68:	bf00      	nop
 8000b6a:	e7fd      	b.n	8000b68 <NMI_Handler+0x4>

08000b6c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b70:	bf00      	nop
 8000b72:	e7fd      	b.n	8000b70 <HardFault_Handler+0x4>

08000b74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b78:	bf00      	nop
 8000b7a:	e7fd      	b.n	8000b78 <MemManage_Handler+0x4>

08000b7c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b80:	bf00      	nop
 8000b82:	e7fd      	b.n	8000b80 <BusFault_Handler+0x4>

08000b84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b88:	bf00      	nop
 8000b8a:	e7fd      	b.n	8000b88 <UsageFault_Handler+0x4>

08000b8c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b90:	bf00      	nop
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr

08000b9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b9a:	b480      	push	{r7}
 8000b9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b9e:	bf00      	nop
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr

08000ba8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bac:	bf00      	nop
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr

08000bb6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bb6:	b580      	push	{r7, lr}
 8000bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bba:	f000 fc4b 	bl	8001454 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bbe:	bf00      	nop
 8000bc0:	bd80      	pop	{r7, pc}
	...

08000bc4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8000bc8:	4802      	ldr	r0, [pc, #8]	@ (8000bd4 <DMA1_Channel2_IRQHandler+0x10>)
 8000bca:	f001 f80a 	bl	8001be2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	200000f0 	.word	0x200000f0

08000bd8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000bdc:	4802      	ldr	r0, [pc, #8]	@ (8000be8 <DMA1_Channel3_IRQHandler+0x10>)
 8000bde:	f001 f800 	bl	8001be2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000be2:	bf00      	nop
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	20000138 	.word	0x20000138

08000bec <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000bf0:	4802      	ldr	r0, [pc, #8]	@ (8000bfc <SPI1_IRQHandler+0x10>)
 8000bf2:	f003 fe15 	bl	8004820 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000bf6:	bf00      	nop
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	2000008c 	.word	0x2000008c

08000c00 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c04:	4802      	ldr	r0, [pc, #8]	@ (8000c10 <TIM6_DAC_IRQHandler+0x10>)
 8000c06:	f004 fbe5 	bl	80053d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c0a:	bf00      	nop
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	20000268 	.word	0x20000268

08000c14 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000c18:	4802      	ldr	r0, [pc, #8]	@ (8000c24 <TIM7_IRQHandler+0x10>)
 8000c1a:	f004 fbdb 	bl	80053d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000c1e:	bf00      	nop
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	200002b4 	.word	0x200002b4

08000c28 <_read>:
	_kill(status, -1);
	while (1) {
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b086      	sub	sp, #24
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	60f8      	str	r0, [r7, #12]
 8000c30:	60b9      	str	r1, [r7, #8]
 8000c32:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8000c34:	2300      	movs	r3, #0
 8000c36:	617b      	str	r3, [r7, #20]
 8000c38:	e00a      	b.n	8000c50 <_read+0x28>
		*ptr++ = __io_getchar();
 8000c3a:	f3af 8000 	nop.w
 8000c3e:	4601      	mov	r1, r0
 8000c40:	68bb      	ldr	r3, [r7, #8]
 8000c42:	1c5a      	adds	r2, r3, #1
 8000c44:	60ba      	str	r2, [r7, #8]
 8000c46:	b2ca      	uxtb	r2, r1
 8000c48:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8000c4a:	697b      	ldr	r3, [r7, #20]
 8000c4c:	3301      	adds	r3, #1
 8000c4e:	617b      	str	r3, [r7, #20]
 8000c50:	697a      	ldr	r2, [r7, #20]
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	429a      	cmp	r2, r3
 8000c56:	dbf0      	blt.n	8000c3a <_read+0x12>
	}

	return len;
 8000c58:	687b      	ldr	r3, [r7, #4]
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3718      	adds	r7, #24
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}

08000c62 <_close>:
		__io_putchar(*ptr++);
	}
	return len;
}

int _close(int file) {
 8000c62:	b480      	push	{r7}
 8000c64:	b083      	sub	sp, #12
 8000c66:	af00      	add	r7, sp, #0
 8000c68:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 8000c6a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	370c      	adds	r7, #12
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr

08000c7a <_fstat>:

int _fstat(int file, struct stat *st) {
 8000c7a:	b480      	push	{r7}
 8000c7c:	b083      	sub	sp, #12
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	6078      	str	r0, [r7, #4]
 8000c82:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c8a:	605a      	str	r2, [r3, #4]
	return 0;
 8000c8c:	2300      	movs	r3, #0
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	370c      	adds	r7, #12
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr

08000c9a <_isatty>:

int _isatty(int file) {
 8000c9a:	b480      	push	{r7}
 8000c9c:	b083      	sub	sp, #12
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 8000ca2:	2301      	movs	r3, #1
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	370c      	adds	r7, #12
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr

08000cb0 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8000cb0:	b480      	push	{r7}
 8000cb2:	b085      	sub	sp, #20
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	60f8      	str	r0, [r7, #12]
 8000cb8:	60b9      	str	r1, [r7, #8]
 8000cba:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 8000cbc:	2300      	movs	r3, #0
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3714      	adds	r7, #20
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
	...

08000ccc <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b086      	sub	sp, #24
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 8000cd4:	4a14      	ldr	r2, [pc, #80]	@ (8000d28 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 8000cd6:	4b15      	ldr	r3, [pc, #84]	@ (8000d2c <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 8000cd8:	1ad3      	subs	r3, r2, r3
 8000cda:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8000ce0:	4b13      	ldr	r3, [pc, #76]	@ (8000d30 <_sbrk+0x64>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d102      	bne.n	8000cee <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 8000ce8:	4b11      	ldr	r3, [pc, #68]	@ (8000d30 <_sbrk+0x64>)
 8000cea:	4a12      	ldr	r2, [pc, #72]	@ (8000d34 <_sbrk+0x68>)
 8000cec:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 8000cee:	4b10      	ldr	r3, [pc, #64]	@ (8000d30 <_sbrk+0x64>)
 8000cf0:	681a      	ldr	r2, [r3, #0]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	4413      	add	r3, r2
 8000cf6:	693a      	ldr	r2, [r7, #16]
 8000cf8:	429a      	cmp	r2, r3
 8000cfa:	d207      	bcs.n	8000d0c <_sbrk+0x40>
		errno = ENOMEM;
 8000cfc:	f006 f84c 	bl	8006d98 <__errno>
 8000d00:	4603      	mov	r3, r0
 8000d02:	220c      	movs	r2, #12
 8000d04:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 8000d06:	f04f 33ff 	mov.w	r3, #4294967295
 8000d0a:	e009      	b.n	8000d20 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8000d0c:	4b08      	ldr	r3, [pc, #32]	@ (8000d30 <_sbrk+0x64>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 8000d12:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <_sbrk+0x64>)
 8000d14:	681a      	ldr	r2, [r3, #0]
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	4413      	add	r3, r2
 8000d1a:	4a05      	ldr	r2, [pc, #20]	@ (8000d30 <_sbrk+0x64>)
 8000d1c:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 8000d1e:	68fb      	ldr	r3, [r7, #12]
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	3718      	adds	r7, #24
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	20018000 	.word	0x20018000
 8000d2c:	00000400 	.word	0x00000400
 8000d30:	20000180 	.word	0x20000180
 8000d34:	200004d8 	.word	0x200004d8

08000d38 <SystemInit>:
/**
 * @brief  Setup the microcontroller system.
 * @retval None
 */

void SystemInit(void) {
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 20U) | (3UL << 22U)); /* set CP10 and CP11 Full Access */
 8000d3c:	4b06      	ldr	r3, [pc, #24]	@ (8000d58 <SystemInit+0x20>)
 8000d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d42:	4a05      	ldr	r2, [pc, #20]	@ (8000d58 <SystemInit+0x20>)
 8000d44:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d48:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000d4c:	bf00      	nop
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	e000ed00 	.word	0xe000ed00

08000d5c <MX_TIM2_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b08c      	sub	sp, #48	@ 0x30
 8000d60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000d62:	f107 030c 	add.w	r3, r7, #12
 8000d66:	2224      	movs	r2, #36	@ 0x24
 8000d68:	2100      	movs	r1, #0
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f005 ffb5 	bl	8006cda <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d70:	463b      	mov	r3, r7
 8000d72:	2200      	movs	r2, #0
 8000d74:	601a      	str	r2, [r3, #0]
 8000d76:	605a      	str	r2, [r3, #4]
 8000d78:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d7a:	4b21      	ldr	r3, [pc, #132]	@ (8000e00 <MX_TIM2_Init+0xa4>)
 8000d7c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d80:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000d82:	4b1f      	ldr	r3, [pc, #124]	@ (8000e00 <MX_TIM2_Init+0xa4>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d88:	4b1d      	ldr	r3, [pc, #116]	@ (8000e00 <MX_TIM2_Init+0xa4>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000d8e:	4b1c      	ldr	r3, [pc, #112]	@ (8000e00 <MX_TIM2_Init+0xa4>)
 8000d90:	f04f 32ff 	mov.w	r2, #4294967295
 8000d94:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d96:	4b1a      	ldr	r3, [pc, #104]	@ (8000e00 <MX_TIM2_Init+0xa4>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d9c:	4b18      	ldr	r3, [pc, #96]	@ (8000e00 <MX_TIM2_Init+0xa4>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000da2:	2301      	movs	r3, #1
 8000da4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000da6:	2300      	movs	r3, #0
 8000da8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000daa:	2301      	movs	r3, #1
 8000dac:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000dae:	2300      	movs	r3, #0
 8000db0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000db2:	2300      	movs	r3, #0
 8000db4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000db6:	2300      	movs	r3, #0
 8000db8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000dc6:	f107 030c 	add.w	r3, r7, #12
 8000dca:	4619      	mov	r1, r3
 8000dcc:	480c      	ldr	r0, [pc, #48]	@ (8000e00 <MX_TIM2_Init+0xa4>)
 8000dce:	f004 f93f 	bl	8005050 <HAL_TIM_Encoder_Init>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000dd8:	f7ff fd9e 	bl	8000918 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000de0:	2300      	movs	r3, #0
 8000de2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000de4:	463b      	mov	r3, r7
 8000de6:	4619      	mov	r1, r3
 8000de8:	4805      	ldr	r0, [pc, #20]	@ (8000e00 <MX_TIM2_Init+0xa4>)
 8000dea:	f004 fcd3 	bl	8005794 <HAL_TIMEx_MasterConfigSynchronization>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000df4:	f7ff fd90 	bl	8000918 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000df8:	bf00      	nop
 8000dfa:	3730      	adds	r7, #48	@ 0x30
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	20000184 	.word	0x20000184

08000e04 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b08c      	sub	sp, #48	@ 0x30
 8000e08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000e0a:	f107 030c 	add.w	r3, r7, #12
 8000e0e:	2224      	movs	r2, #36	@ 0x24
 8000e10:	2100      	movs	r1, #0
 8000e12:	4618      	mov	r0, r3
 8000e14:	f005 ff61 	bl	8006cda <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e18:	463b      	mov	r3, r7
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	601a      	str	r2, [r3, #0]
 8000e1e:	605a      	str	r2, [r3, #4]
 8000e20:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e22:	4b21      	ldr	r3, [pc, #132]	@ (8000ea8 <MX_TIM3_Init+0xa4>)
 8000e24:	4a21      	ldr	r2, [pc, #132]	@ (8000eac <MX_TIM3_Init+0xa8>)
 8000e26:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000e28:	4b1f      	ldr	r3, [pc, #124]	@ (8000ea8 <MX_TIM3_Init+0xa4>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e2e:	4b1e      	ldr	r3, [pc, #120]	@ (8000ea8 <MX_TIM3_Init+0xa4>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000e34:	4b1c      	ldr	r3, [pc, #112]	@ (8000ea8 <MX_TIM3_Init+0xa4>)
 8000e36:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000e3a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e3c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ea8 <MX_TIM3_Init+0xa4>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e42:	4b19      	ldr	r3, [pc, #100]	@ (8000ea8 <MX_TIM3_Init+0xa4>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000e48:	2301      	movs	r3, #1
 8000e4a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000e50:	2301      	movs	r3, #1
 8000e52:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000e54:	2300      	movs	r3, #0
 8000e56:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000e60:	2301      	movs	r3, #1
 8000e62:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000e64:	2300      	movs	r3, #0
 8000e66:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000e6c:	f107 030c 	add.w	r3, r7, #12
 8000e70:	4619      	mov	r1, r3
 8000e72:	480d      	ldr	r0, [pc, #52]	@ (8000ea8 <MX_TIM3_Init+0xa4>)
 8000e74:	f004 f8ec 	bl	8005050 <HAL_TIM_Encoder_Init>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000e7e:	f7ff fd4b 	bl	8000918 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e82:	2300      	movs	r3, #0
 8000e84:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e86:	2300      	movs	r3, #0
 8000e88:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e8a:	463b      	mov	r3, r7
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	4806      	ldr	r0, [pc, #24]	@ (8000ea8 <MX_TIM3_Init+0xa4>)
 8000e90:	f004 fc80 	bl	8005794 <HAL_TIMEx_MasterConfigSynchronization>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000e9a:	f7ff fd3d 	bl	8000918 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000e9e:	bf00      	nop
 8000ea0:	3730      	adds	r7, #48	@ 0x30
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	200001d0 	.word	0x200001d0
 8000eac:	40000400 	.word	0x40000400

08000eb0 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b08c      	sub	sp, #48	@ 0x30
 8000eb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000eb6:	f107 030c 	add.w	r3, r7, #12
 8000eba:	2224      	movs	r2, #36	@ 0x24
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f005 ff0b 	bl	8006cda <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ec4:	463b      	mov	r3, r7
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	601a      	str	r2, [r3, #0]
 8000eca:	605a      	str	r2, [r3, #4]
 8000ecc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000ece:	4b21      	ldr	r3, [pc, #132]	@ (8000f54 <MX_TIM5_Init+0xa4>)
 8000ed0:	4a21      	ldr	r2, [pc, #132]	@ (8000f58 <MX_TIM5_Init+0xa8>)
 8000ed2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000ed4:	4b1f      	ldr	r3, [pc, #124]	@ (8000f54 <MX_TIM5_Init+0xa4>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eda:	4b1e      	ldr	r3, [pc, #120]	@ (8000f54 <MX_TIM5_Init+0xa4>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000ee0:	4b1c      	ldr	r3, [pc, #112]	@ (8000f54 <MX_TIM5_Init+0xa4>)
 8000ee2:	f04f 32ff 	mov.w	r2, #4294967295
 8000ee6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ee8:	4b1a      	ldr	r3, [pc, #104]	@ (8000f54 <MX_TIM5_Init+0xa4>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eee:	4b19      	ldr	r3, [pc, #100]	@ (8000f54 <MX_TIM5_Init+0xa4>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000efc:	2301      	movs	r3, #1
 8000efe:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000f00:	2300      	movs	r3, #0
 8000f02:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000f04:	2300      	movs	r3, #0
 8000f06:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000f10:	2300      	movs	r3, #0
 8000f12:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000f14:	2300      	movs	r3, #0
 8000f16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8000f18:	f107 030c 	add.w	r3, r7, #12
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	480d      	ldr	r0, [pc, #52]	@ (8000f54 <MX_TIM5_Init+0xa4>)
 8000f20:	f004 f896 	bl	8005050 <HAL_TIM_Encoder_Init>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8000f2a:	f7ff fcf5 	bl	8000918 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f32:	2300      	movs	r3, #0
 8000f34:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000f36:	463b      	mov	r3, r7
 8000f38:	4619      	mov	r1, r3
 8000f3a:	4806      	ldr	r0, [pc, #24]	@ (8000f54 <MX_TIM5_Init+0xa4>)
 8000f3c:	f004 fc2a 	bl	8005794 <HAL_TIMEx_MasterConfigSynchronization>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8000f46:	f7ff fce7 	bl	8000918 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000f4a:	bf00      	nop
 8000f4c:	3730      	adds	r7, #48	@ 0x30
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	2000021c 	.word	0x2000021c
 8000f58:	40000c00 	.word	0x40000c00

08000f5c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f62:	1d3b      	adds	r3, r7, #4
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	605a      	str	r2, [r3, #4]
 8000f6a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000f6c:	4b14      	ldr	r3, [pc, #80]	@ (8000fc0 <MX_TIM6_Init+0x64>)
 8000f6e:	4a15      	ldr	r2, [pc, #84]	@ (8000fc4 <MX_TIM6_Init+0x68>)
 8000f70:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 79;
 8000f72:	4b13      	ldr	r3, [pc, #76]	@ (8000fc0 <MX_TIM6_Init+0x64>)
 8000f74:	224f      	movs	r2, #79	@ 0x4f
 8000f76:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f78:	4b11      	ldr	r3, [pc, #68]	@ (8000fc0 <MX_TIM6_Init+0x64>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 19;
 8000f7e:	4b10      	ldr	r3, [pc, #64]	@ (8000fc0 <MX_TIM6_Init+0x64>)
 8000f80:	2213      	movs	r2, #19
 8000f82:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f84:	4b0e      	ldr	r3, [pc, #56]	@ (8000fc0 <MX_TIM6_Init+0x64>)
 8000f86:	2280      	movs	r2, #128	@ 0x80
 8000f88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000f8a:	480d      	ldr	r0, [pc, #52]	@ (8000fc0 <MX_TIM6_Init+0x64>)
 8000f8c:	f003 ff56 	bl	8004e3c <HAL_TIM_Base_Init>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000f96:	f7ff fcbf 	bl	8000918 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000f9a:	2320      	movs	r3, #32
 8000f9c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000fa2:	1d3b      	adds	r3, r7, #4
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	4806      	ldr	r0, [pc, #24]	@ (8000fc0 <MX_TIM6_Init+0x64>)
 8000fa8:	f004 fbf4 	bl	8005794 <HAL_TIMEx_MasterConfigSynchronization>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000fb2:	f7ff fcb1 	bl	8000918 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000fb6:	bf00      	nop
 8000fb8:	3710      	adds	r7, #16
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	20000268 	.word	0x20000268
 8000fc4:	40001000 	.word	0x40001000

08000fc8 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fce:	1d3b      	adds	r3, r7, #4
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	605a      	str	r2, [r3, #4]
 8000fd6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000fd8:	4b14      	ldr	r3, [pc, #80]	@ (800102c <MX_TIM7_Init+0x64>)
 8000fda:	4a15      	ldr	r2, [pc, #84]	@ (8001030 <MX_TIM7_Init+0x68>)
 8000fdc:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 7999;
 8000fde:	4b13      	ldr	r3, [pc, #76]	@ (800102c <MX_TIM7_Init+0x64>)
 8000fe0:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000fe4:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fe6:	4b11      	ldr	r3, [pc, #68]	@ (800102c <MX_TIM7_Init+0x64>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9;
 8000fec:	4b0f      	ldr	r3, [pc, #60]	@ (800102c <MX_TIM7_Init+0x64>)
 8000fee:	2209      	movs	r2, #9
 8000ff0:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ff2:	4b0e      	ldr	r3, [pc, #56]	@ (800102c <MX_TIM7_Init+0x64>)
 8000ff4:	2280      	movs	r2, #128	@ 0x80
 8000ff6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000ff8:	480c      	ldr	r0, [pc, #48]	@ (800102c <MX_TIM7_Init+0x64>)
 8000ffa:	f003 ff1f 	bl	8004e3c <HAL_TIM_Base_Init>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001004:	f7ff fc88 	bl	8000918 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001008:	2300      	movs	r3, #0
 800100a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800100c:	2300      	movs	r3, #0
 800100e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001010:	1d3b      	adds	r3, r7, #4
 8001012:	4619      	mov	r1, r3
 8001014:	4805      	ldr	r0, [pc, #20]	@ (800102c <MX_TIM7_Init+0x64>)
 8001016:	f004 fbbd 	bl	8005794 <HAL_TIMEx_MasterConfigSynchronization>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001020:	f7ff fc7a 	bl	8000918 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001024:	bf00      	nop
 8001026:	3710      	adds	r7, #16
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	200002b4 	.word	0x200002b4
 8001030:	40001400 	.word	0x40001400

08001034 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b08e      	sub	sp, #56	@ 0x38
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800103c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	605a      	str	r2, [r3, #4]
 8001046:	609a      	str	r2, [r3, #8]
 8001048:	60da      	str	r2, [r3, #12]
 800104a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001054:	d146      	bne.n	80010e4 <HAL_TIM_Encoder_MspInit+0xb0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001056:	4b53      	ldr	r3, [pc, #332]	@ (80011a4 <HAL_TIM_Encoder_MspInit+0x170>)
 8001058:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800105a:	4a52      	ldr	r2, [pc, #328]	@ (80011a4 <HAL_TIM_Encoder_MspInit+0x170>)
 800105c:	f043 0301 	orr.w	r3, r3, #1
 8001060:	6593      	str	r3, [r2, #88]	@ 0x58
 8001062:	4b50      	ldr	r3, [pc, #320]	@ (80011a4 <HAL_TIM_Encoder_MspInit+0x170>)
 8001064:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001066:	f003 0301 	and.w	r3, r3, #1
 800106a:	623b      	str	r3, [r7, #32]
 800106c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800106e:	4b4d      	ldr	r3, [pc, #308]	@ (80011a4 <HAL_TIM_Encoder_MspInit+0x170>)
 8001070:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001072:	4a4c      	ldr	r2, [pc, #304]	@ (80011a4 <HAL_TIM_Encoder_MspInit+0x170>)
 8001074:	f043 0301 	orr.w	r3, r3, #1
 8001078:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800107a:	4b4a      	ldr	r3, [pc, #296]	@ (80011a4 <HAL_TIM_Encoder_MspInit+0x170>)
 800107c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800107e:	f003 0301 	and.w	r3, r3, #1
 8001082:	61fb      	str	r3, [r7, #28]
 8001084:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001086:	4b47      	ldr	r3, [pc, #284]	@ (80011a4 <HAL_TIM_Encoder_MspInit+0x170>)
 8001088:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800108a:	4a46      	ldr	r2, [pc, #280]	@ (80011a4 <HAL_TIM_Encoder_MspInit+0x170>)
 800108c:	f043 0302 	orr.w	r3, r3, #2
 8001090:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001092:	4b44      	ldr	r3, [pc, #272]	@ (80011a4 <HAL_TIM_Encoder_MspInit+0x170>)
 8001094:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001096:	f003 0302 	and.w	r3, r3, #2
 800109a:	61bb      	str	r3, [r7, #24]
 800109c:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA15 (JTDI)     ------> TIM2_CH1
    PB3 (JTDO-TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800109e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80010a2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a4:	2302      	movs	r3, #2
 80010a6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a8:	2300      	movs	r3, #0
 80010aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ac:	2300      	movs	r3, #0
 80010ae:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80010b0:	2301      	movs	r3, #1
 80010b2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010b8:	4619      	mov	r1, r3
 80010ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010be:	f000 fe6f 	bl	8001da0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80010c2:	2308      	movs	r3, #8
 80010c4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c6:	2302      	movs	r3, #2
 80010c8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ca:	2300      	movs	r3, #0
 80010cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ce:	2300      	movs	r3, #0
 80010d0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80010d2:	2301      	movs	r3, #1
 80010d4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010da:	4619      	mov	r1, r3
 80010dc:	4832      	ldr	r0, [pc, #200]	@ (80011a8 <HAL_TIM_Encoder_MspInit+0x174>)
 80010de:	f000 fe5f 	bl	8001da0 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 80010e2:	e05b      	b.n	800119c <HAL_TIM_Encoder_MspInit+0x168>
  else if(tim_encoderHandle->Instance==TIM3)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a30      	ldr	r2, [pc, #192]	@ (80011ac <HAL_TIM_Encoder_MspInit+0x178>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d128      	bne.n	8001140 <HAL_TIM_Encoder_MspInit+0x10c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80010ee:	4b2d      	ldr	r3, [pc, #180]	@ (80011a4 <HAL_TIM_Encoder_MspInit+0x170>)
 80010f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010f2:	4a2c      	ldr	r2, [pc, #176]	@ (80011a4 <HAL_TIM_Encoder_MspInit+0x170>)
 80010f4:	f043 0302 	orr.w	r3, r3, #2
 80010f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80010fa:	4b2a      	ldr	r3, [pc, #168]	@ (80011a4 <HAL_TIM_Encoder_MspInit+0x170>)
 80010fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010fe:	f003 0302 	and.w	r3, r3, #2
 8001102:	617b      	str	r3, [r7, #20]
 8001104:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001106:	4b27      	ldr	r3, [pc, #156]	@ (80011a4 <HAL_TIM_Encoder_MspInit+0x170>)
 8001108:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800110a:	4a26      	ldr	r2, [pc, #152]	@ (80011a4 <HAL_TIM_Encoder_MspInit+0x170>)
 800110c:	f043 0310 	orr.w	r3, r3, #16
 8001110:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001112:	4b24      	ldr	r3, [pc, #144]	@ (80011a4 <HAL_TIM_Encoder_MspInit+0x170>)
 8001114:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001116:	f003 0310 	and.w	r3, r3, #16
 800111a:	613b      	str	r3, [r7, #16]
 800111c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 800111e:	2318      	movs	r3, #24
 8001120:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001122:	2302      	movs	r3, #2
 8001124:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001126:	2300      	movs	r3, #0
 8001128:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112a:	2300      	movs	r3, #0
 800112c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800112e:	2302      	movs	r3, #2
 8001130:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001132:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001136:	4619      	mov	r1, r3
 8001138:	481d      	ldr	r0, [pc, #116]	@ (80011b0 <HAL_TIM_Encoder_MspInit+0x17c>)
 800113a:	f000 fe31 	bl	8001da0 <HAL_GPIO_Init>
}
 800113e:	e02d      	b.n	800119c <HAL_TIM_Encoder_MspInit+0x168>
  else if(tim_encoderHandle->Instance==TIM5)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a1b      	ldr	r2, [pc, #108]	@ (80011b4 <HAL_TIM_Encoder_MspInit+0x180>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d128      	bne.n	800119c <HAL_TIM_Encoder_MspInit+0x168>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800114a:	4b16      	ldr	r3, [pc, #88]	@ (80011a4 <HAL_TIM_Encoder_MspInit+0x170>)
 800114c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800114e:	4a15      	ldr	r2, [pc, #84]	@ (80011a4 <HAL_TIM_Encoder_MspInit+0x170>)
 8001150:	f043 0308 	orr.w	r3, r3, #8
 8001154:	6593      	str	r3, [r2, #88]	@ 0x58
 8001156:	4b13      	ldr	r3, [pc, #76]	@ (80011a4 <HAL_TIM_Encoder_MspInit+0x170>)
 8001158:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800115a:	f003 0308 	and.w	r3, r3, #8
 800115e:	60fb      	str	r3, [r7, #12]
 8001160:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001162:	4b10      	ldr	r3, [pc, #64]	@ (80011a4 <HAL_TIM_Encoder_MspInit+0x170>)
 8001164:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001166:	4a0f      	ldr	r2, [pc, #60]	@ (80011a4 <HAL_TIM_Encoder_MspInit+0x170>)
 8001168:	f043 0301 	orr.w	r3, r3, #1
 800116c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800116e:	4b0d      	ldr	r3, [pc, #52]	@ (80011a4 <HAL_TIM_Encoder_MspInit+0x170>)
 8001170:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001172:	f003 0301 	and.w	r3, r3, #1
 8001176:	60bb      	str	r3, [r7, #8]
 8001178:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800117a:	2303      	movs	r3, #3
 800117c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117e:	2302      	movs	r3, #2
 8001180:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001182:	2300      	movs	r3, #0
 8001184:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001186:	2300      	movs	r3, #0
 8001188:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800118a:	2302      	movs	r3, #2
 800118c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800118e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001192:	4619      	mov	r1, r3
 8001194:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001198:	f000 fe02 	bl	8001da0 <HAL_GPIO_Init>
}
 800119c:	bf00      	nop
 800119e:	3738      	adds	r7, #56	@ 0x38
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	40021000 	.word	0x40021000
 80011a8:	48000400 	.word	0x48000400
 80011ac:	40000400 	.word	0x40000400
 80011b0:	48001000 	.word	0x48001000
 80011b4:	40000c00 	.word	0x40000c00

080011b8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a1a      	ldr	r2, [pc, #104]	@ (8001230 <HAL_TIM_Base_MspInit+0x78>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d114      	bne.n	80011f4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80011ca:	4b1a      	ldr	r3, [pc, #104]	@ (8001234 <HAL_TIM_Base_MspInit+0x7c>)
 80011cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011ce:	4a19      	ldr	r2, [pc, #100]	@ (8001234 <HAL_TIM_Base_MspInit+0x7c>)
 80011d0:	f043 0310 	orr.w	r3, r3, #16
 80011d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80011d6:	4b17      	ldr	r3, [pc, #92]	@ (8001234 <HAL_TIM_Base_MspInit+0x7c>)
 80011d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011da:	f003 0310 	and.w	r3, r3, #16
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80011e2:	2200      	movs	r2, #0
 80011e4:	2100      	movs	r1, #0
 80011e6:	2036      	movs	r0, #54	@ 0x36
 80011e8:	f000 fa44 	bl	8001674 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80011ec:	2036      	movs	r0, #54	@ 0x36
 80011ee:	f000 fa6d 	bl	80016cc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 80011f2:	e018      	b.n	8001226 <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM7)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a0f      	ldr	r2, [pc, #60]	@ (8001238 <HAL_TIM_Base_MspInit+0x80>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d113      	bne.n	8001226 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80011fe:	4b0d      	ldr	r3, [pc, #52]	@ (8001234 <HAL_TIM_Base_MspInit+0x7c>)
 8001200:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001202:	4a0c      	ldr	r2, [pc, #48]	@ (8001234 <HAL_TIM_Base_MspInit+0x7c>)
 8001204:	f043 0320 	orr.w	r3, r3, #32
 8001208:	6593      	str	r3, [r2, #88]	@ 0x58
 800120a:	4b0a      	ldr	r3, [pc, #40]	@ (8001234 <HAL_TIM_Base_MspInit+0x7c>)
 800120c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800120e:	f003 0320 	and.w	r3, r3, #32
 8001212:	60bb      	str	r3, [r7, #8]
 8001214:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001216:	2200      	movs	r2, #0
 8001218:	2100      	movs	r1, #0
 800121a:	2037      	movs	r0, #55	@ 0x37
 800121c:	f000 fa2a 	bl	8001674 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001220:	2037      	movs	r0, #55	@ 0x37
 8001222:	f000 fa53 	bl	80016cc <HAL_NVIC_EnableIRQ>
}
 8001226:	bf00      	nop
 8001228:	3710      	adds	r7, #16
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	40001000 	.word	0x40001000
 8001234:	40021000 	.word	0x40021000
 8001238:	40001400 	.word	0x40001400

0800123c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001240:	4b14      	ldr	r3, [pc, #80]	@ (8001294 <MX_USART1_UART_Init+0x58>)
 8001242:	4a15      	ldr	r2, [pc, #84]	@ (8001298 <MX_USART1_UART_Init+0x5c>)
 8001244:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001246:	4b13      	ldr	r3, [pc, #76]	@ (8001294 <MX_USART1_UART_Init+0x58>)
 8001248:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800124c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800124e:	4b11      	ldr	r3, [pc, #68]	@ (8001294 <MX_USART1_UART_Init+0x58>)
 8001250:	2200      	movs	r2, #0
 8001252:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001254:	4b0f      	ldr	r3, [pc, #60]	@ (8001294 <MX_USART1_UART_Init+0x58>)
 8001256:	2200      	movs	r2, #0
 8001258:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800125a:	4b0e      	ldr	r3, [pc, #56]	@ (8001294 <MX_USART1_UART_Init+0x58>)
 800125c:	2200      	movs	r2, #0
 800125e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001260:	4b0c      	ldr	r3, [pc, #48]	@ (8001294 <MX_USART1_UART_Init+0x58>)
 8001262:	220c      	movs	r2, #12
 8001264:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001266:	4b0b      	ldr	r3, [pc, #44]	@ (8001294 <MX_USART1_UART_Init+0x58>)
 8001268:	2200      	movs	r2, #0
 800126a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800126c:	4b09      	ldr	r3, [pc, #36]	@ (8001294 <MX_USART1_UART_Init+0x58>)
 800126e:	2200      	movs	r2, #0
 8001270:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001272:	4b08      	ldr	r3, [pc, #32]	@ (8001294 <MX_USART1_UART_Init+0x58>)
 8001274:	2200      	movs	r2, #0
 8001276:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001278:	4b06      	ldr	r3, [pc, #24]	@ (8001294 <MX_USART1_UART_Init+0x58>)
 800127a:	2200      	movs	r2, #0
 800127c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800127e:	4805      	ldr	r0, [pc, #20]	@ (8001294 <MX_USART1_UART_Init+0x58>)
 8001280:	f004 fbfc 	bl	8005a7c <HAL_UART_Init>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800128a:	f7ff fb45 	bl	8000918 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800128e:	bf00      	nop
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	20000300 	.word	0x20000300
 8001298:	40013800 	.word	0x40013800

0800129c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b0ac      	sub	sp, #176	@ 0xb0
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	605a      	str	r2, [r3, #4]
 80012ae:	609a      	str	r2, [r3, #8]
 80012b0:	60da      	str	r2, [r3, #12]
 80012b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012b4:	f107 0314 	add.w	r3, r7, #20
 80012b8:	2288      	movs	r2, #136	@ 0x88
 80012ba:	2100      	movs	r1, #0
 80012bc:	4618      	mov	r0, r3
 80012be:	f005 fd0c 	bl	8006cda <memset>
  if(uartHandle->Instance==USART1)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a21      	ldr	r2, [pc, #132]	@ (800134c <HAL_UART_MspInit+0xb0>)
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d13a      	bne.n	8001342 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80012cc:	2301      	movs	r3, #1
 80012ce:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80012d0:	2300      	movs	r3, #0
 80012d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012d4:	f107 0314 	add.w	r3, r7, #20
 80012d8:	4618      	mov	r0, r3
 80012da:	f002 f823 	bl	8003324 <HAL_RCCEx_PeriphCLKConfig>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80012e4:	f7ff fb18 	bl	8000918 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80012e8:	4b19      	ldr	r3, [pc, #100]	@ (8001350 <HAL_UART_MspInit+0xb4>)
 80012ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012ec:	4a18      	ldr	r2, [pc, #96]	@ (8001350 <HAL_UART_MspInit+0xb4>)
 80012ee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012f2:	6613      	str	r3, [r2, #96]	@ 0x60
 80012f4:	4b16      	ldr	r3, [pc, #88]	@ (8001350 <HAL_UART_MspInit+0xb4>)
 80012f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012fc:	613b      	str	r3, [r7, #16]
 80012fe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001300:	4b13      	ldr	r3, [pc, #76]	@ (8001350 <HAL_UART_MspInit+0xb4>)
 8001302:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001304:	4a12      	ldr	r2, [pc, #72]	@ (8001350 <HAL_UART_MspInit+0xb4>)
 8001306:	f043 0302 	orr.w	r3, r3, #2
 800130a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800130c:	4b10      	ldr	r3, [pc, #64]	@ (8001350 <HAL_UART_MspInit+0xb4>)
 800130e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001310:	f003 0302 	and.w	r3, r3, #2
 8001314:	60fb      	str	r3, [r7, #12]
 8001316:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001318:	23c0      	movs	r3, #192	@ 0xc0
 800131a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131e:	2302      	movs	r3, #2
 8001320:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001324:	2300      	movs	r3, #0
 8001326:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800132a:	2303      	movs	r3, #3
 800132c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001330:	2307      	movs	r3, #7
 8001332:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001336:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800133a:	4619      	mov	r1, r3
 800133c:	4805      	ldr	r0, [pc, #20]	@ (8001354 <HAL_UART_MspInit+0xb8>)
 800133e:	f000 fd2f 	bl	8001da0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001342:	bf00      	nop
 8001344:	37b0      	adds	r7, #176	@ 0xb0
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	40013800 	.word	0x40013800
 8001350:	40021000 	.word	0x40021000
 8001354:	48000400 	.word	0x48000400

08001358 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001358:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001390 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800135c:	f7ff fcec 	bl	8000d38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001360:	480c      	ldr	r0, [pc, #48]	@ (8001394 <LoopForever+0x6>)
  ldr r1, =_edata
 8001362:	490d      	ldr	r1, [pc, #52]	@ (8001398 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001364:	4a0d      	ldr	r2, [pc, #52]	@ (800139c <LoopForever+0xe>)
  movs r3, #0
 8001366:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001368:	e002      	b.n	8001370 <LoopCopyDataInit>

0800136a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800136a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800136c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800136e:	3304      	adds	r3, #4

08001370 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001370:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001372:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001374:	d3f9      	bcc.n	800136a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001376:	4a0a      	ldr	r2, [pc, #40]	@ (80013a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001378:	4c0a      	ldr	r4, [pc, #40]	@ (80013a4 <LoopForever+0x16>)
  movs r3, #0
 800137a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800137c:	e001      	b.n	8001382 <LoopFillZerobss>

0800137e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800137e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001380:	3204      	adds	r2, #4

08001382 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001382:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001384:	d3fb      	bcc.n	800137e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001386:	f005 fd0d 	bl	8006da4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800138a:	f7ff fa3d 	bl	8000808 <main>

0800138e <LoopForever>:

LoopForever:
    b LoopForever
 800138e:	e7fe      	b.n	800138e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001390:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001394:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001398:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800139c:	08007afc 	.word	0x08007afc
  ldr r2, =_sbss
 80013a0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80013a4:	200004d8 	.word	0x200004d8

080013a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80013a8:	e7fe      	b.n	80013a8 <ADC1_2_IRQHandler>

080013aa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013aa:	b580      	push	{r7, lr}
 80013ac:	b082      	sub	sp, #8
 80013ae:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80013b0:	2300      	movs	r3, #0
 80013b2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013b4:	2003      	movs	r0, #3
 80013b6:	f000 f93d 	bl	8001634 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013ba:	200f      	movs	r0, #15
 80013bc:	f000 f80e 	bl	80013dc <HAL_InitTick>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d002      	beq.n	80013cc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	71fb      	strb	r3, [r7, #7]
 80013ca:	e001      	b.n	80013d0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80013cc:	f7ff fba6 	bl	8000b1c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80013d0:	79fb      	ldrb	r3, [r7, #7]
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
	...

080013dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b084      	sub	sp, #16
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80013e4:	2300      	movs	r3, #0
 80013e6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80013e8:	4b17      	ldr	r3, [pc, #92]	@ (8001448 <HAL_InitTick+0x6c>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d023      	beq.n	8001438 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80013f0:	4b16      	ldr	r3, [pc, #88]	@ (800144c <HAL_InitTick+0x70>)
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	4b14      	ldr	r3, [pc, #80]	@ (8001448 <HAL_InitTick+0x6c>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	4619      	mov	r1, r3
 80013fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001402:	fbb2 f3f3 	udiv	r3, r2, r3
 8001406:	4618      	mov	r0, r3
 8001408:	f000 f978 	bl	80016fc <HAL_SYSTICK_Config>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d10f      	bne.n	8001432 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2b0f      	cmp	r3, #15
 8001416:	d809      	bhi.n	800142c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001418:	2200      	movs	r2, #0
 800141a:	6879      	ldr	r1, [r7, #4]
 800141c:	f04f 30ff 	mov.w	r0, #4294967295
 8001420:	f000 f928 	bl	8001674 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001424:	4a0a      	ldr	r2, [pc, #40]	@ (8001450 <HAL_InitTick+0x74>)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6013      	str	r3, [r2, #0]
 800142a:	e007      	b.n	800143c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800142c:	2301      	movs	r3, #1
 800142e:	73fb      	strb	r3, [r7, #15]
 8001430:	e004      	b.n	800143c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	73fb      	strb	r3, [r7, #15]
 8001436:	e001      	b.n	800143c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001438:	2301      	movs	r3, #1
 800143a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800143c:	7bfb      	ldrb	r3, [r7, #15]
}
 800143e:	4618      	mov	r0, r3
 8001440:	3710      	adds	r7, #16
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	20000010 	.word	0x20000010
 800144c:	20000008 	.word	0x20000008
 8001450:	2000000c 	.word	0x2000000c

08001454 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001458:	4b06      	ldr	r3, [pc, #24]	@ (8001474 <HAL_IncTick+0x20>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	461a      	mov	r2, r3
 800145e:	4b06      	ldr	r3, [pc, #24]	@ (8001478 <HAL_IncTick+0x24>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4413      	add	r3, r2
 8001464:	4a04      	ldr	r2, [pc, #16]	@ (8001478 <HAL_IncTick+0x24>)
 8001466:	6013      	str	r3, [r2, #0]
}
 8001468:	bf00      	nop
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	20000010 	.word	0x20000010
 8001478:	20000388 	.word	0x20000388

0800147c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  return uwTick;
 8001480:	4b03      	ldr	r3, [pc, #12]	@ (8001490 <HAL_GetTick+0x14>)
 8001482:	681b      	ldr	r3, [r3, #0]
}
 8001484:	4618      	mov	r0, r3
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	20000388 	.word	0x20000388

08001494 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001494:	b480      	push	{r7}
 8001496:	b085      	sub	sp, #20
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	f003 0307 	and.w	r3, r3, #7
 80014a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014a4:	4b0c      	ldr	r3, [pc, #48]	@ (80014d8 <__NVIC_SetPriorityGrouping+0x44>)
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014aa:	68ba      	ldr	r2, [r7, #8]
 80014ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80014b0:	4013      	ands	r3, r2
 80014b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80014c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014c6:	4a04      	ldr	r2, [pc, #16]	@ (80014d8 <__NVIC_SetPriorityGrouping+0x44>)
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	60d3      	str	r3, [r2, #12]
}
 80014cc:	bf00      	nop
 80014ce:	3714      	adds	r7, #20
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr
 80014d8:	e000ed00 	.word	0xe000ed00

080014dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014e0:	4b04      	ldr	r3, [pc, #16]	@ (80014f4 <__NVIC_GetPriorityGrouping+0x18>)
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	0a1b      	lsrs	r3, r3, #8
 80014e6:	f003 0307 	and.w	r3, r3, #7
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr
 80014f4:	e000ed00 	.word	0xe000ed00

080014f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	4603      	mov	r3, r0
 8001500:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001506:	2b00      	cmp	r3, #0
 8001508:	db0b      	blt.n	8001522 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800150a:	79fb      	ldrb	r3, [r7, #7]
 800150c:	f003 021f 	and.w	r2, r3, #31
 8001510:	4907      	ldr	r1, [pc, #28]	@ (8001530 <__NVIC_EnableIRQ+0x38>)
 8001512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001516:	095b      	lsrs	r3, r3, #5
 8001518:	2001      	movs	r0, #1
 800151a:	fa00 f202 	lsl.w	r2, r0, r2
 800151e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001522:	bf00      	nop
 8001524:	370c      	adds	r7, #12
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	e000e100 	.word	0xe000e100

08001534 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	4603      	mov	r3, r0
 800153c:	6039      	str	r1, [r7, #0]
 800153e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001540:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001544:	2b00      	cmp	r3, #0
 8001546:	db0a      	blt.n	800155e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	b2da      	uxtb	r2, r3
 800154c:	490c      	ldr	r1, [pc, #48]	@ (8001580 <__NVIC_SetPriority+0x4c>)
 800154e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001552:	0112      	lsls	r2, r2, #4
 8001554:	b2d2      	uxtb	r2, r2
 8001556:	440b      	add	r3, r1
 8001558:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800155c:	e00a      	b.n	8001574 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	b2da      	uxtb	r2, r3
 8001562:	4908      	ldr	r1, [pc, #32]	@ (8001584 <__NVIC_SetPriority+0x50>)
 8001564:	79fb      	ldrb	r3, [r7, #7]
 8001566:	f003 030f 	and.w	r3, r3, #15
 800156a:	3b04      	subs	r3, #4
 800156c:	0112      	lsls	r2, r2, #4
 800156e:	b2d2      	uxtb	r2, r2
 8001570:	440b      	add	r3, r1
 8001572:	761a      	strb	r2, [r3, #24]
}
 8001574:	bf00      	nop
 8001576:	370c      	adds	r7, #12
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr
 8001580:	e000e100 	.word	0xe000e100
 8001584:	e000ed00 	.word	0xe000ed00

08001588 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001588:	b480      	push	{r7}
 800158a:	b089      	sub	sp, #36	@ 0x24
 800158c:	af00      	add	r7, sp, #0
 800158e:	60f8      	str	r0, [r7, #12]
 8001590:	60b9      	str	r1, [r7, #8]
 8001592:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	f003 0307 	and.w	r3, r3, #7
 800159a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	f1c3 0307 	rsb	r3, r3, #7
 80015a2:	2b04      	cmp	r3, #4
 80015a4:	bf28      	it	cs
 80015a6:	2304      	movcs	r3, #4
 80015a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	3304      	adds	r3, #4
 80015ae:	2b06      	cmp	r3, #6
 80015b0:	d902      	bls.n	80015b8 <NVIC_EncodePriority+0x30>
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	3b03      	subs	r3, #3
 80015b6:	e000      	b.n	80015ba <NVIC_EncodePriority+0x32>
 80015b8:	2300      	movs	r3, #0
 80015ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015bc:	f04f 32ff 	mov.w	r2, #4294967295
 80015c0:	69bb      	ldr	r3, [r7, #24]
 80015c2:	fa02 f303 	lsl.w	r3, r2, r3
 80015c6:	43da      	mvns	r2, r3
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	401a      	ands	r2, r3
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015d0:	f04f 31ff 	mov.w	r1, #4294967295
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	fa01 f303 	lsl.w	r3, r1, r3
 80015da:	43d9      	mvns	r1, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015e0:	4313      	orrs	r3, r2
         );
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3724      	adds	r7, #36	@ 0x24
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
	...

080015f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	3b01      	subs	r3, #1
 80015fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001600:	d301      	bcc.n	8001606 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001602:	2301      	movs	r3, #1
 8001604:	e00f      	b.n	8001626 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001606:	4a0a      	ldr	r2, [pc, #40]	@ (8001630 <SysTick_Config+0x40>)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	3b01      	subs	r3, #1
 800160c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800160e:	210f      	movs	r1, #15
 8001610:	f04f 30ff 	mov.w	r0, #4294967295
 8001614:	f7ff ff8e 	bl	8001534 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001618:	4b05      	ldr	r3, [pc, #20]	@ (8001630 <SysTick_Config+0x40>)
 800161a:	2200      	movs	r2, #0
 800161c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800161e:	4b04      	ldr	r3, [pc, #16]	@ (8001630 <SysTick_Config+0x40>)
 8001620:	2207      	movs	r2, #7
 8001622:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001624:	2300      	movs	r3, #0
}
 8001626:	4618      	mov	r0, r3
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	e000e010 	.word	0xe000e010

08001634 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2b07      	cmp	r3, #7
 8001640:	d00f      	beq.n	8001662 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2b06      	cmp	r3, #6
 8001646:	d00c      	beq.n	8001662 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2b05      	cmp	r3, #5
 800164c:	d009      	beq.n	8001662 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2b04      	cmp	r3, #4
 8001652:	d006      	beq.n	8001662 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2b03      	cmp	r3, #3
 8001658:	d003      	beq.n	8001662 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800165a:	21a6      	movs	r1, #166	@ 0xa6
 800165c:	4804      	ldr	r0, [pc, #16]	@ (8001670 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 800165e:	f7ff f973 	bl	8000948 <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	f7ff ff16 	bl	8001494 <__NVIC_SetPriorityGrouping>
}
 8001668:	bf00      	nop
 800166a:	3708      	adds	r7, #8
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	08007828 	.word	0x08007828

08001674 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b086      	sub	sp, #24
 8001678:	af00      	add	r7, sp, #0
 800167a:	4603      	mov	r3, r0
 800167c:	60b9      	str	r1, [r7, #8]
 800167e:	607a      	str	r2, [r7, #4]
 8001680:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001682:	2300      	movs	r3, #0
 8001684:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2b0f      	cmp	r3, #15
 800168a:	d903      	bls.n	8001694 <HAL_NVIC_SetPriority+0x20>
 800168c:	21be      	movs	r1, #190	@ 0xbe
 800168e:	480e      	ldr	r0, [pc, #56]	@ (80016c8 <HAL_NVIC_SetPriority+0x54>)
 8001690:	f7ff f95a 	bl	8000948 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	2b0f      	cmp	r3, #15
 8001698:	d903      	bls.n	80016a2 <HAL_NVIC_SetPriority+0x2e>
 800169a:	21bf      	movs	r1, #191	@ 0xbf
 800169c:	480a      	ldr	r0, [pc, #40]	@ (80016c8 <HAL_NVIC_SetPriority+0x54>)
 800169e:	f7ff f953 	bl	8000948 <assert_failed>

  prioritygroup = NVIC_GetPriorityGrouping();
 80016a2:	f7ff ff1b 	bl	80014dc <__NVIC_GetPriorityGrouping>
 80016a6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016a8:	687a      	ldr	r2, [r7, #4]
 80016aa:	68b9      	ldr	r1, [r7, #8]
 80016ac:	6978      	ldr	r0, [r7, #20]
 80016ae:	f7ff ff6b 	bl	8001588 <NVIC_EncodePriority>
 80016b2:	4602      	mov	r2, r0
 80016b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016b8:	4611      	mov	r1, r2
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7ff ff3a 	bl	8001534 <__NVIC_SetPriority>
}
 80016c0:	bf00      	nop
 80016c2:	3718      	adds	r7, #24
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	08007828 	.word	0x08007828

080016cc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	4603      	mov	r3, r0
 80016d4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80016d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	da03      	bge.n	80016e6 <HAL_NVIC_EnableIRQ+0x1a>
 80016de:	21d2      	movs	r1, #210	@ 0xd2
 80016e0:	4805      	ldr	r0, [pc, #20]	@ (80016f8 <HAL_NVIC_EnableIRQ+0x2c>)
 80016e2:	f7ff f931 	bl	8000948 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7ff ff04 	bl	80014f8 <__NVIC_EnableIRQ>
}
 80016f0:	bf00      	nop
 80016f2:	3708      	adds	r7, #8
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	08007828 	.word	0x08007828

080016fc <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	f7ff ff73 	bl	80015f0 <SysTick_Config>
 800170a:	4603      	mov	r3, r0
}
 800170c:	4618      	mov	r0, r3
 800170e:	3708      	adds	r7, #8
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}

08001714 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d101      	bne.n	8001726 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e19d      	b.n	8001a62 <HAL_DMA_Init+0x34e>
  }

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a79      	ldr	r2, [pc, #484]	@ (8001910 <HAL_DMA_Init+0x1fc>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d044      	beq.n	80017ba <HAL_DMA_Init+0xa6>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a77      	ldr	r2, [pc, #476]	@ (8001914 <HAL_DMA_Init+0x200>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d03f      	beq.n	80017ba <HAL_DMA_Init+0xa6>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a76      	ldr	r2, [pc, #472]	@ (8001918 <HAL_DMA_Init+0x204>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d03a      	beq.n	80017ba <HAL_DMA_Init+0xa6>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a74      	ldr	r2, [pc, #464]	@ (800191c <HAL_DMA_Init+0x208>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d035      	beq.n	80017ba <HAL_DMA_Init+0xa6>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a73      	ldr	r2, [pc, #460]	@ (8001920 <HAL_DMA_Init+0x20c>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d030      	beq.n	80017ba <HAL_DMA_Init+0xa6>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a71      	ldr	r2, [pc, #452]	@ (8001924 <HAL_DMA_Init+0x210>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d02b      	beq.n	80017ba <HAL_DMA_Init+0xa6>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a70      	ldr	r2, [pc, #448]	@ (8001928 <HAL_DMA_Init+0x214>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d026      	beq.n	80017ba <HAL_DMA_Init+0xa6>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a6e      	ldr	r2, [pc, #440]	@ (800192c <HAL_DMA_Init+0x218>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d021      	beq.n	80017ba <HAL_DMA_Init+0xa6>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a6d      	ldr	r2, [pc, #436]	@ (8001930 <HAL_DMA_Init+0x21c>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d01c      	beq.n	80017ba <HAL_DMA_Init+0xa6>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a6b      	ldr	r2, [pc, #428]	@ (8001934 <HAL_DMA_Init+0x220>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d017      	beq.n	80017ba <HAL_DMA_Init+0xa6>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a6a      	ldr	r2, [pc, #424]	@ (8001938 <HAL_DMA_Init+0x224>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d012      	beq.n	80017ba <HAL_DMA_Init+0xa6>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a68      	ldr	r2, [pc, #416]	@ (800193c <HAL_DMA_Init+0x228>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d00d      	beq.n	80017ba <HAL_DMA_Init+0xa6>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a67      	ldr	r2, [pc, #412]	@ (8001940 <HAL_DMA_Init+0x22c>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d008      	beq.n	80017ba <HAL_DMA_Init+0xa6>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a65      	ldr	r2, [pc, #404]	@ (8001944 <HAL_DMA_Init+0x230>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d003      	beq.n	80017ba <HAL_DMA_Init+0xa6>
 80017b2:	21a5      	movs	r1, #165	@ 0xa5
 80017b4:	4864      	ldr	r0, [pc, #400]	@ (8001948 <HAL_DMA_Init+0x234>)
 80017b6:	f7ff f8c7 	bl	8000948 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d00c      	beq.n	80017dc <HAL_DMA_Init+0xc8>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	2b10      	cmp	r3, #16
 80017c8:	d008      	beq.n	80017dc <HAL_DMA_Init+0xc8>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80017d2:	d003      	beq.n	80017dc <HAL_DMA_Init+0xc8>
 80017d4:	21a6      	movs	r1, #166	@ 0xa6
 80017d6:	485c      	ldr	r0, [pc, #368]	@ (8001948 <HAL_DMA_Init+0x234>)
 80017d8:	f7ff f8b6 	bl	8000948 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	2b40      	cmp	r3, #64	@ 0x40
 80017e2:	d007      	beq.n	80017f4 <HAL_DMA_Init+0xe0>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d003      	beq.n	80017f4 <HAL_DMA_Init+0xe0>
 80017ec:	21a7      	movs	r1, #167	@ 0xa7
 80017ee:	4856      	ldr	r0, [pc, #344]	@ (8001948 <HAL_DMA_Init+0x234>)
 80017f0:	f7ff f8aa 	bl	8000948 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	691b      	ldr	r3, [r3, #16]
 80017f8:	2b80      	cmp	r3, #128	@ 0x80
 80017fa:	d007      	beq.n	800180c <HAL_DMA_Init+0xf8>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	691b      	ldr	r3, [r3, #16]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d003      	beq.n	800180c <HAL_DMA_Init+0xf8>
 8001804:	21a8      	movs	r1, #168	@ 0xa8
 8001806:	4850      	ldr	r0, [pc, #320]	@ (8001948 <HAL_DMA_Init+0x234>)
 8001808:	f7ff f89e 	bl	8000948 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	695b      	ldr	r3, [r3, #20]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d00d      	beq.n	8001830 <HAL_DMA_Init+0x11c>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	695b      	ldr	r3, [r3, #20]
 8001818:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800181c:	d008      	beq.n	8001830 <HAL_DMA_Init+0x11c>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	695b      	ldr	r3, [r3, #20]
 8001822:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001826:	d003      	beq.n	8001830 <HAL_DMA_Init+0x11c>
 8001828:	21a9      	movs	r1, #169	@ 0xa9
 800182a:	4847      	ldr	r0, [pc, #284]	@ (8001948 <HAL_DMA_Init+0x234>)
 800182c:	f7ff f88c 	bl	8000948 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	699b      	ldr	r3, [r3, #24]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d00d      	beq.n	8001854 <HAL_DMA_Init+0x140>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	699b      	ldr	r3, [r3, #24]
 800183c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001840:	d008      	beq.n	8001854 <HAL_DMA_Init+0x140>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	699b      	ldr	r3, [r3, #24]
 8001846:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800184a:	d003      	beq.n	8001854 <HAL_DMA_Init+0x140>
 800184c:	21aa      	movs	r1, #170	@ 0xaa
 800184e:	483e      	ldr	r0, [pc, #248]	@ (8001948 <HAL_DMA_Init+0x234>)
 8001850:	f7ff f87a 	bl	8000948 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	69db      	ldr	r3, [r3, #28]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d007      	beq.n	800186c <HAL_DMA_Init+0x158>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	69db      	ldr	r3, [r3, #28]
 8001860:	2b20      	cmp	r3, #32
 8001862:	d003      	beq.n	800186c <HAL_DMA_Init+0x158>
 8001864:	21ab      	movs	r1, #171	@ 0xab
 8001866:	4838      	ldr	r0, [pc, #224]	@ (8001948 <HAL_DMA_Init+0x234>)
 8001868:	f7ff f86e 	bl	8000948 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6a1b      	ldr	r3, [r3, #32]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d012      	beq.n	800189a <HAL_DMA_Init+0x186>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6a1b      	ldr	r3, [r3, #32]
 8001878:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800187c:	d00d      	beq.n	800189a <HAL_DMA_Init+0x186>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6a1b      	ldr	r3, [r3, #32]
 8001882:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001886:	d008      	beq.n	800189a <HAL_DMA_Init+0x186>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6a1b      	ldr	r3, [r3, #32]
 800188c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8001890:	d003      	beq.n	800189a <HAL_DMA_Init+0x186>
 8001892:	21ac      	movs	r1, #172	@ 0xac
 8001894:	482c      	ldr	r0, [pc, #176]	@ (8001948 <HAL_DMA_Init+0x234>)
 8001896:	f7ff f857 	bl	8000948 <assert_failed>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d01f      	beq.n	80018e2 <HAL_DMA_Init+0x1ce>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d01b      	beq.n	80018e2 <HAL_DMA_Init+0x1ce>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	2b02      	cmp	r3, #2
 80018b0:	d017      	beq.n	80018e2 <HAL_DMA_Init+0x1ce>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	2b03      	cmp	r3, #3
 80018b8:	d013      	beq.n	80018e2 <HAL_DMA_Init+0x1ce>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	2b04      	cmp	r3, #4
 80018c0:	d00f      	beq.n	80018e2 <HAL_DMA_Init+0x1ce>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	2b05      	cmp	r3, #5
 80018c8:	d00b      	beq.n	80018e2 <HAL_DMA_Init+0x1ce>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	2b06      	cmp	r3, #6
 80018d0:	d007      	beq.n	80018e2 <HAL_DMA_Init+0x1ce>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	2b07      	cmp	r3, #7
 80018d8:	d003      	beq.n	80018e2 <HAL_DMA_Init+0x1ce>
 80018da:	21ae      	movs	r1, #174	@ 0xae
 80018dc:	481a      	ldr	r0, [pc, #104]	@ (8001948 <HAL_DMA_Init+0x234>)
 80018de:	f7ff f833 	bl	8000948 <assert_failed>

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	461a      	mov	r2, r3
 80018e8:	4b18      	ldr	r3, [pc, #96]	@ (800194c <HAL_DMA_Init+0x238>)
 80018ea:	429a      	cmp	r2, r3
 80018ec:	d836      	bhi.n	800195c <HAL_DMA_Init+0x248>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	461a      	mov	r2, r3
 80018f4:	4b16      	ldr	r3, [pc, #88]	@ (8001950 <HAL_DMA_Init+0x23c>)
 80018f6:	4413      	add	r3, r2
 80018f8:	4a16      	ldr	r2, [pc, #88]	@ (8001954 <HAL_DMA_Init+0x240>)
 80018fa:	fba2 2303 	umull	r2, r3, r2, r3
 80018fe:	091b      	lsrs	r3, r3, #4
 8001900:	009a      	lsls	r2, r3, #2
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4a13      	ldr	r2, [pc, #76]	@ (8001958 <HAL_DMA_Init+0x244>)
 800190a:	641a      	str	r2, [r3, #64]	@ 0x40
 800190c:	e035      	b.n	800197a <HAL_DMA_Init+0x266>
 800190e:	bf00      	nop
 8001910:	40020008 	.word	0x40020008
 8001914:	4002001c 	.word	0x4002001c
 8001918:	40020030 	.word	0x40020030
 800191c:	40020044 	.word	0x40020044
 8001920:	40020058 	.word	0x40020058
 8001924:	4002006c 	.word	0x4002006c
 8001928:	40020080 	.word	0x40020080
 800192c:	40020408 	.word	0x40020408
 8001930:	4002041c 	.word	0x4002041c
 8001934:	40020430 	.word	0x40020430
 8001938:	40020444 	.word	0x40020444
 800193c:	40020458 	.word	0x40020458
 8001940:	4002046c 	.word	0x4002046c
 8001944:	40020480 	.word	0x40020480
 8001948:	08007864 	.word	0x08007864
 800194c:	40020407 	.word	0x40020407
 8001950:	bffdfff8 	.word	0xbffdfff8
 8001954:	cccccccd 	.word	0xcccccccd
 8001958:	40020000 	.word	0x40020000
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	461a      	mov	r2, r3
 8001962:	4b42      	ldr	r3, [pc, #264]	@ (8001a6c <HAL_DMA_Init+0x358>)
 8001964:	4413      	add	r3, r2
 8001966:	4a42      	ldr	r2, [pc, #264]	@ (8001a70 <HAL_DMA_Init+0x35c>)
 8001968:	fba2 2303 	umull	r2, r3, r2, r3
 800196c:	091b      	lsrs	r3, r3, #4
 800196e:	009a      	lsls	r2, r3, #2
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	4a3f      	ldr	r2, [pc, #252]	@ (8001a74 <HAL_DMA_Init+0x360>)
 8001978:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2202      	movs	r2, #2
 800197e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8001990:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001994:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800199e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	691b      	ldr	r3, [r3, #16]
 80019a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	699b      	ldr	r3, [r3, #24]
 80019b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6a1b      	ldr	r3, [r3, #32]
 80019bc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80019be:	68fa      	ldr	r2, [r7, #12]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	68fa      	ldr	r2, [r7, #12]
 80019ca:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80019d4:	d039      	beq.n	8001a4a <HAL_DMA_Init+0x336>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019da:	4a27      	ldr	r2, [pc, #156]	@ (8001a78 <HAL_DMA_Init+0x364>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d11a      	bne.n	8001a16 <HAL_DMA_Init+0x302>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80019e0:	4b26      	ldr	r3, [pc, #152]	@ (8001a7c <HAL_DMA_Init+0x368>)
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019e8:	f003 031c 	and.w	r3, r3, #28
 80019ec:	210f      	movs	r1, #15
 80019ee:	fa01 f303 	lsl.w	r3, r1, r3
 80019f2:	43db      	mvns	r3, r3
 80019f4:	4921      	ldr	r1, [pc, #132]	@ (8001a7c <HAL_DMA_Init+0x368>)
 80019f6:	4013      	ands	r3, r2
 80019f8:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80019fa:	4b20      	ldr	r3, [pc, #128]	@ (8001a7c <HAL_DMA_Init+0x368>)
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6859      	ldr	r1, [r3, #4]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a06:	f003 031c 	and.w	r3, r3, #28
 8001a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a0e:	491b      	ldr	r1, [pc, #108]	@ (8001a7c <HAL_DMA_Init+0x368>)
 8001a10:	4313      	orrs	r3, r2
 8001a12:	600b      	str	r3, [r1, #0]
 8001a14:	e019      	b.n	8001a4a <HAL_DMA_Init+0x336>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001a16:	4b1a      	ldr	r3, [pc, #104]	@ (8001a80 <HAL_DMA_Init+0x36c>)
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a1e:	f003 031c 	and.w	r3, r3, #28
 8001a22:	210f      	movs	r1, #15
 8001a24:	fa01 f303 	lsl.w	r3, r1, r3
 8001a28:	43db      	mvns	r3, r3
 8001a2a:	4915      	ldr	r1, [pc, #84]	@ (8001a80 <HAL_DMA_Init+0x36c>)
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001a30:	4b13      	ldr	r3, [pc, #76]	@ (8001a80 <HAL_DMA_Init+0x36c>)
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6859      	ldr	r1, [r3, #4]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a3c:	f003 031c 	and.w	r3, r3, #28
 8001a40:	fa01 f303 	lsl.w	r3, r1, r3
 8001a44:	490e      	ldr	r1, [pc, #56]	@ (8001a80 <HAL_DMA_Init+0x36c>)
 8001a46:	4313      	orrs	r3, r2
 8001a48:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2201      	movs	r2, #1
 8001a54:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001a60:	2300      	movs	r3, #0
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3710      	adds	r7, #16
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	bffdfbf8 	.word	0xbffdfbf8
 8001a70:	cccccccd 	.word	0xcccccccd
 8001a74:	40020400 	.word	0x40020400
 8001a78:	40020000 	.word	0x40020000
 8001a7c:	400200a8 	.word	0x400200a8
 8001a80:	400204a8 	.word	0x400204a8

08001a84 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b086      	sub	sp, #24
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	60f8      	str	r0, [r7, #12]
 8001a8c:	60b9      	str	r1, [r7, #8]
 8001a8e:	607a      	str	r2, [r7, #4]
 8001a90:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a92:	2300      	movs	r3, #0
 8001a94:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d003      	beq.n	8001aa4 <HAL_DMA_Start_IT+0x20>
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001aa2:	d304      	bcc.n	8001aae <HAL_DMA_Start_IT+0x2a>
 8001aa4:	f240 11df 	movw	r1, #479	@ 0x1df
 8001aa8:	482c      	ldr	r0, [pc, #176]	@ (8001b5c <HAL_DMA_Start_IT+0xd8>)
 8001aaa:	f7fe ff4d 	bl	8000948 <assert_failed>

  /* Process locked */
  __HAL_LOCK(hdma);
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d101      	bne.n	8001abc <HAL_DMA_Start_IT+0x38>
 8001ab8:	2302      	movs	r3, #2
 8001aba:	e04b      	b.n	8001b54 <HAL_DMA_Start_IT+0xd0>
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	2201      	movs	r2, #1
 8001ac0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d13a      	bne.n	8001b46 <HAL_DMA_Start_IT+0xc2>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	2202      	movs	r2, #2
 8001ad4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	2200      	movs	r2, #0
 8001adc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f022 0201 	bic.w	r2, r2, #1
 8001aec:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	687a      	ldr	r2, [r7, #4]
 8001af2:	68b9      	ldr	r1, [r7, #8]
 8001af4:	68f8      	ldr	r0, [r7, #12]
 8001af6:	f000 f923 	bl	8001d40 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d008      	beq.n	8001b14 <HAL_DMA_Start_IT+0x90>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f042 020e 	orr.w	r2, r2, #14
 8001b10:	601a      	str	r2, [r3, #0]
 8001b12:	e00f      	b.n	8001b34 <HAL_DMA_Start_IT+0xb0>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f022 0204 	bic.w	r2, r2, #4
 8001b22:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f042 020a 	orr.w	r2, r2, #10
 8001b32:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f042 0201 	orr.w	r2, r2, #1
 8001b42:	601a      	str	r2, [r3, #0]
 8001b44:	e005      	b.n	8001b52 <HAL_DMA_Start_IT+0xce>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001b4e:	2302      	movs	r3, #2
 8001b50:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001b52:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3718      	adds	r7, #24
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	08007864 	.word	0x08007864

08001b60 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b084      	sub	sp, #16
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	d005      	beq.n	8001b84 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2204      	movs	r2, #4
 8001b7c:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	73fb      	strb	r3, [r7, #15]
 8001b82:	e029      	b.n	8001bd8 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f022 020e 	bic.w	r2, r2, #14
 8001b92:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f022 0201 	bic.w	r2, r2, #1
 8001ba2:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ba8:	f003 021c 	and.w	r2, r3, #28
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bb0:	2101      	movs	r1, #1
 8001bb2:	fa01 f202 	lsl.w	r2, r1, r2
 8001bb6:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2201      	movs	r2, #1
 8001bbc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d003      	beq.n	8001bd8 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001bd4:	6878      	ldr	r0, [r7, #4]
 8001bd6:	4798      	blx	r3
    }
  }
  return status;
 8001bd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3710      	adds	r7, #16
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}

08001be2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001be2:	b580      	push	{r7, lr}
 8001be4:	b084      	sub	sp, #16
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bfe:	f003 031c 	and.w	r3, r3, #28
 8001c02:	2204      	movs	r2, #4
 8001c04:	409a      	lsls	r2, r3
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	4013      	ands	r3, r2
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d026      	beq.n	8001c5c <HAL_DMA_IRQHandler+0x7a>
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	f003 0304 	and.w	r3, r3, #4
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d021      	beq.n	8001c5c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0320 	and.w	r3, r3, #32
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d107      	bne.n	8001c36 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f022 0204 	bic.w	r2, r2, #4
 8001c34:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c3a:	f003 021c 	and.w	r2, r3, #28
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c42:	2104      	movs	r1, #4
 8001c44:	fa01 f202 	lsl.w	r2, r1, r2
 8001c48:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d071      	beq.n	8001d36 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001c5a:	e06c      	b.n	8001d36 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c60:	f003 031c 	and.w	r3, r3, #28
 8001c64:	2202      	movs	r2, #2
 8001c66:	409a      	lsls	r2, r3
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d02e      	beq.n	8001cce <HAL_DMA_IRQHandler+0xec>
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	f003 0302 	and.w	r3, r3, #2
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d029      	beq.n	8001cce <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0320 	and.w	r3, r3, #32
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d10b      	bne.n	8001ca0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f022 020a 	bic.w	r2, r2, #10
 8001c96:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ca4:	f003 021c 	and.w	r2, r3, #28
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cac:	2102      	movs	r1, #2
 8001cae:	fa01 f202 	lsl.w	r2, r1, r2
 8001cb2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d038      	beq.n	8001d36 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cc8:	6878      	ldr	r0, [r7, #4]
 8001cca:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001ccc:	e033      	b.n	8001d36 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cd2:	f003 031c 	and.w	r3, r3, #28
 8001cd6:	2208      	movs	r2, #8
 8001cd8:	409a      	lsls	r2, r3
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	4013      	ands	r3, r2
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d02a      	beq.n	8001d38 <HAL_DMA_IRQHandler+0x156>
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	f003 0308 	and.w	r3, r3, #8
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d025      	beq.n	8001d38 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f022 020e 	bic.w	r2, r2, #14
 8001cfa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d00:	f003 021c 	and.w	r2, r3, #28
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d08:	2101      	movs	r1, #1
 8001d0a:	fa01 f202 	lsl.w	r2, r1, r2
 8001d0e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2201      	movs	r2, #1
 8001d14:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2201      	movs	r2, #1
 8001d1a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2200      	movs	r2, #0
 8001d22:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d004      	beq.n	8001d38 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001d36:	bf00      	nop
 8001d38:	bf00      	nop
}
 8001d3a:	3710      	adds	r7, #16
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}

08001d40 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b085      	sub	sp, #20
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	60f8      	str	r0, [r7, #12]
 8001d48:	60b9      	str	r1, [r7, #8]
 8001d4a:	607a      	str	r2, [r7, #4]
 8001d4c:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d52:	f003 021c 	and.w	r2, r3, #28
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d5a:	2101      	movs	r1, #1
 8001d5c:	fa01 f202 	lsl.w	r2, r1, r2
 8001d60:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	683a      	ldr	r2, [r7, #0]
 8001d68:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	2b10      	cmp	r3, #16
 8001d70:	d108      	bne.n	8001d84 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	68ba      	ldr	r2, [r7, #8]
 8001d80:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001d82:	e007      	b.n	8001d94 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	68ba      	ldr	r2, [r7, #8]
 8001d8a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	687a      	ldr	r2, [r7, #4]
 8001d92:	60da      	str	r2, [r3, #12]
}
 8001d94:	bf00      	nop
 8001d96:	3714      	adds	r7, #20
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr

08001da0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b086      	sub	sp, #24
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001daa:	2300      	movs	r3, #0
 8001dac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001db4:	d01f      	beq.n	8001df6 <HAL_GPIO_Init+0x56>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4a3c      	ldr	r2, [pc, #240]	@ (8001eac <HAL_GPIO_Init+0x10c>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d01b      	beq.n	8001df6 <HAL_GPIO_Init+0x56>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4a3b      	ldr	r2, [pc, #236]	@ (8001eb0 <HAL_GPIO_Init+0x110>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d017      	beq.n	8001df6 <HAL_GPIO_Init+0x56>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4a3a      	ldr	r2, [pc, #232]	@ (8001eb4 <HAL_GPIO_Init+0x114>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d013      	beq.n	8001df6 <HAL_GPIO_Init+0x56>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4a39      	ldr	r2, [pc, #228]	@ (8001eb8 <HAL_GPIO_Init+0x118>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d00f      	beq.n	8001df6 <HAL_GPIO_Init+0x56>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4a38      	ldr	r2, [pc, #224]	@ (8001ebc <HAL_GPIO_Init+0x11c>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d00b      	beq.n	8001df6 <HAL_GPIO_Init+0x56>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4a37      	ldr	r2, [pc, #220]	@ (8001ec0 <HAL_GPIO_Init+0x120>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d007      	beq.n	8001df6 <HAL_GPIO_Init+0x56>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4a36      	ldr	r2, [pc, #216]	@ (8001ec4 <HAL_GPIO_Init+0x124>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d003      	beq.n	8001df6 <HAL_GPIO_Init+0x56>
 8001dee:	21aa      	movs	r1, #170	@ 0xaa
 8001df0:	4835      	ldr	r0, [pc, #212]	@ (8001ec8 <HAL_GPIO_Init+0x128>)
 8001df2:	f7fe fda9 	bl	8000948 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	b29b      	uxth	r3, r3
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d004      	beq.n	8001e0a <HAL_GPIO_Init+0x6a>
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e08:	d303      	bcc.n	8001e12 <HAL_GPIO_Init+0x72>
 8001e0a:	21ab      	movs	r1, #171	@ 0xab
 8001e0c:	482e      	ldr	r0, [pc, #184]	@ (8001ec8 <HAL_GPIO_Init+0x128>)
 8001e0e:	f7fe fd9b 	bl	8000948 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	f000 823d 	beq.w	8002296 <HAL_GPIO_Init+0x4f6>
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	f000 8238 	beq.w	8002296 <HAL_GPIO_Init+0x4f6>
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	2b11      	cmp	r3, #17
 8001e2c:	f000 8233 	beq.w	8002296 <HAL_GPIO_Init+0x4f6>
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	2b02      	cmp	r3, #2
 8001e36:	f000 822e 	beq.w	8002296 <HAL_GPIO_Init+0x4f6>
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	2b12      	cmp	r3, #18
 8001e40:	f000 8229 	beq.w	8002296 <HAL_GPIO_Init+0x4f6>
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 8001e4c:	f000 8223 	beq.w	8002296 <HAL_GPIO_Init+0x4f6>
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8001e58:	f000 821d 	beq.w	8002296 <HAL_GPIO_Init+0x4f6>
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f5b3 1f44 	cmp.w	r3, #3211264	@ 0x310000
 8001e64:	f000 8217 	beq.w	8002296 <HAL_GPIO_Init+0x4f6>
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f5b3 1f90 	cmp.w	r3, #1179648	@ 0x120000
 8001e70:	f000 8211 	beq.w	8002296 <HAL_GPIO_Init+0x4f6>
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f5b3 1f08 	cmp.w	r3, #2228224	@ 0x220000
 8001e7c:	f000 820b 	beq.w	8002296 <HAL_GPIO_Init+0x4f6>
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f5b3 1f48 	cmp.w	r3, #3276800	@ 0x320000
 8001e88:	f000 8205 	beq.w	8002296 <HAL_GPIO_Init+0x4f6>
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	2b03      	cmp	r3, #3
 8001e92:	f000 8200 	beq.w	8002296 <HAL_GPIO_Init+0x4f6>
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	2b0b      	cmp	r3, #11
 8001e9c:	f000 81fb 	beq.w	8002296 <HAL_GPIO_Init+0x4f6>
 8001ea0:	21ac      	movs	r1, #172	@ 0xac
 8001ea2:	4809      	ldr	r0, [pc, #36]	@ (8001ec8 <HAL_GPIO_Init+0x128>)
 8001ea4:	f7fe fd50 	bl	8000948 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ea8:	e1f5      	b.n	8002296 <HAL_GPIO_Init+0x4f6>
 8001eaa:	bf00      	nop
 8001eac:	48000400 	.word	0x48000400
 8001eb0:	48000800 	.word	0x48000800
 8001eb4:	48000c00 	.word	0x48000c00
 8001eb8:	48001000 	.word	0x48001000
 8001ebc:	48001400 	.word	0x48001400
 8001ec0:	48001800 	.word	0x48001800
 8001ec4:	48001c00 	.word	0x48001c00
 8001ec8:	0800789c 	.word	0x0800789c
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	2101      	movs	r1, #1
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed8:	4013      	ands	r3, r2
 8001eda:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	f000 81d6 	beq.w	8002290 <HAL_GPIO_Init+0x4f0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f003 0303 	and.w	r3, r3, #3
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d005      	beq.n	8001efc <HAL_GPIO_Init+0x15c>
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f003 0303 	and.w	r3, r3, #3
 8001ef8:	2b02      	cmp	r3, #2
 8001efa:	d144      	bne.n	8001f86 <HAL_GPIO_Init+0x1e6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d00f      	beq.n	8001f24 <HAL_GPIO_Init+0x184>
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d00b      	beq.n	8001f24 <HAL_GPIO_Init+0x184>
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	2b02      	cmp	r3, #2
 8001f12:	d007      	beq.n	8001f24 <HAL_GPIO_Init+0x184>
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	2b03      	cmp	r3, #3
 8001f1a:	d003      	beq.n	8001f24 <HAL_GPIO_Init+0x184>
 8001f1c:	21bb      	movs	r1, #187	@ 0xbb
 8001f1e:	489c      	ldr	r0, [pc, #624]	@ (8002190 <HAL_GPIO_Init+0x3f0>)
 8001f20:	f7fe fd12 	bl	8000948 <assert_failed>

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	005b      	lsls	r3, r3, #1
 8001f2e:	2203      	movs	r2, #3
 8001f30:	fa02 f303 	lsl.w	r3, r2, r3
 8001f34:	43db      	mvns	r3, r3
 8001f36:	693a      	ldr	r2, [r7, #16]
 8001f38:	4013      	ands	r3, r2
 8001f3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	68da      	ldr	r2, [r3, #12]
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	005b      	lsls	r3, r3, #1
 8001f44:	fa02 f303 	lsl.w	r3, r2, r3
 8001f48:	693a      	ldr	r2, [r7, #16]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	693a      	ldr	r2, [r7, #16]
 8001f52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f62:	43db      	mvns	r3, r3
 8001f64:	693a      	ldr	r2, [r7, #16]
 8001f66:	4013      	ands	r3, r2
 8001f68:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	091b      	lsrs	r3, r3, #4
 8001f70:	f003 0201 	and.w	r2, r3, #1
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7a:	693a      	ldr	r2, [r7, #16]
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	693a      	ldr	r2, [r7, #16]
 8001f84:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	f003 0303 	and.w	r3, r3, #3
 8001f8e:	2b03      	cmp	r3, #3
 8001f90:	d118      	bne.n	8001fc4 <HAL_GPIO_Init+0x224>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f96:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001f98:	2201      	movs	r2, #1
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa0:	43db      	mvns	r3, r3
 8001fa2:	693a      	ldr	r2, [r7, #16]
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	08db      	lsrs	r3, r3, #3
 8001fae:	f003 0201 	and.w	r2, r3, #1
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb8:	693a      	ldr	r2, [r7, #16]
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	693a      	ldr	r2, [r7, #16]
 8001fc2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f003 0303 	and.w	r3, r3, #3
 8001fcc:	2b03      	cmp	r3, #3
 8001fce:	d027      	beq.n	8002020 <HAL_GPIO_Init+0x280>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d00b      	beq.n	8001ff0 <HAL_GPIO_Init+0x250>
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d007      	beq.n	8001ff0 <HAL_GPIO_Init+0x250>
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	2b02      	cmp	r3, #2
 8001fe6:	d003      	beq.n	8001ff0 <HAL_GPIO_Init+0x250>
 8001fe8:	21dc      	movs	r1, #220	@ 0xdc
 8001fea:	4869      	ldr	r0, [pc, #420]	@ (8002190 <HAL_GPIO_Init+0x3f0>)
 8001fec:	f7fe fcac 	bl	8000948 <assert_failed>

        temp = GPIOx->PUPDR;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	005b      	lsls	r3, r3, #1
 8001ffa:	2203      	movs	r2, #3
 8001ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8002000:	43db      	mvns	r3, r3
 8002002:	693a      	ldr	r2, [r7, #16]
 8002004:	4013      	ands	r3, r2
 8002006:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	689a      	ldr	r2, [r3, #8]
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	005b      	lsls	r3, r3, #1
 8002010:	fa02 f303 	lsl.w	r3, r2, r3
 8002014:	693a      	ldr	r2, [r7, #16]
 8002016:	4313      	orrs	r3, r2
 8002018:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	693a      	ldr	r2, [r7, #16]
 800201e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f003 0303 	and.w	r3, r3, #3
 8002028:	2b02      	cmp	r3, #2
 800202a:	d14f      	bne.n	80020cc <HAL_GPIO_Init+0x32c>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002032:	d01f      	beq.n	8002074 <HAL_GPIO_Init+0x2d4>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	4a57      	ldr	r2, [pc, #348]	@ (8002194 <HAL_GPIO_Init+0x3f4>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d01b      	beq.n	8002074 <HAL_GPIO_Init+0x2d4>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	4a56      	ldr	r2, [pc, #344]	@ (8002198 <HAL_GPIO_Init+0x3f8>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d017      	beq.n	8002074 <HAL_GPIO_Init+0x2d4>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	4a55      	ldr	r2, [pc, #340]	@ (800219c <HAL_GPIO_Init+0x3fc>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d013      	beq.n	8002074 <HAL_GPIO_Init+0x2d4>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	4a54      	ldr	r2, [pc, #336]	@ (80021a0 <HAL_GPIO_Init+0x400>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d00f      	beq.n	8002074 <HAL_GPIO_Init+0x2d4>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	4a53      	ldr	r2, [pc, #332]	@ (80021a4 <HAL_GPIO_Init+0x404>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d00b      	beq.n	8002074 <HAL_GPIO_Init+0x2d4>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	4a52      	ldr	r2, [pc, #328]	@ (80021a8 <HAL_GPIO_Init+0x408>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d007      	beq.n	8002074 <HAL_GPIO_Init+0x2d4>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	4a51      	ldr	r2, [pc, #324]	@ (80021ac <HAL_GPIO_Init+0x40c>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d003      	beq.n	8002074 <HAL_GPIO_Init+0x2d4>
 800206c:	21e8      	movs	r1, #232	@ 0xe8
 800206e:	4848      	ldr	r0, [pc, #288]	@ (8002190 <HAL_GPIO_Init+0x3f0>)
 8002070:	f7fe fc6a 	bl	8000948 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	691b      	ldr	r3, [r3, #16]
 8002078:	2b0f      	cmp	r3, #15
 800207a:	d903      	bls.n	8002084 <HAL_GPIO_Init+0x2e4>
 800207c:	21e9      	movs	r1, #233	@ 0xe9
 800207e:	4844      	ldr	r0, [pc, #272]	@ (8002190 <HAL_GPIO_Init+0x3f0>)
 8002080:	f7fe fc62 	bl	8000948 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	08da      	lsrs	r2, r3, #3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	3208      	adds	r2, #8
 800208c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002090:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	f003 0307 	and.w	r3, r3, #7
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	220f      	movs	r2, #15
 800209c:	fa02 f303 	lsl.w	r3, r2, r3
 80020a0:	43db      	mvns	r3, r3
 80020a2:	693a      	ldr	r2, [r7, #16]
 80020a4:	4013      	ands	r3, r2
 80020a6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	691a      	ldr	r2, [r3, #16]
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	f003 0307 	and.w	r3, r3, #7
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	fa02 f303 	lsl.w	r3, r2, r3
 80020b8:	693a      	ldr	r2, [r7, #16]
 80020ba:	4313      	orrs	r3, r2
 80020bc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	08da      	lsrs	r2, r3, #3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	3208      	adds	r2, #8
 80020c6:	6939      	ldr	r1, [r7, #16]
 80020c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	005b      	lsls	r3, r3, #1
 80020d6:	2203      	movs	r2, #3
 80020d8:	fa02 f303 	lsl.w	r3, r2, r3
 80020dc:	43db      	mvns	r3, r3
 80020de:	693a      	ldr	r2, [r7, #16]
 80020e0:	4013      	ands	r3, r2
 80020e2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f003 0203 	and.w	r2, r3, #3
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	005b      	lsls	r3, r3, #1
 80020f0:	fa02 f303 	lsl.w	r3, r2, r3
 80020f4:	693a      	ldr	r2, [r7, #16]
 80020f6:	4313      	orrs	r3, r2
 80020f8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	693a      	ldr	r2, [r7, #16]
 80020fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002108:	2b00      	cmp	r3, #0
 800210a:	f000 80c1 	beq.w	8002290 <HAL_GPIO_Init+0x4f0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800210e:	4b28      	ldr	r3, [pc, #160]	@ (80021b0 <HAL_GPIO_Init+0x410>)
 8002110:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002112:	4a27      	ldr	r2, [pc, #156]	@ (80021b0 <HAL_GPIO_Init+0x410>)
 8002114:	f043 0301 	orr.w	r3, r3, #1
 8002118:	6613      	str	r3, [r2, #96]	@ 0x60
 800211a:	4b25      	ldr	r3, [pc, #148]	@ (80021b0 <HAL_GPIO_Init+0x410>)
 800211c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800211e:	f003 0301 	and.w	r3, r3, #1
 8002122:	60bb      	str	r3, [r7, #8]
 8002124:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002126:	4a23      	ldr	r2, [pc, #140]	@ (80021b4 <HAL_GPIO_Init+0x414>)
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	089b      	lsrs	r3, r3, #2
 800212c:	3302      	adds	r3, #2
 800212e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002132:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	f003 0303 	and.w	r3, r3, #3
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	220f      	movs	r2, #15
 800213e:	fa02 f303 	lsl.w	r3, r2, r3
 8002142:	43db      	mvns	r3, r3
 8002144:	693a      	ldr	r2, [r7, #16]
 8002146:	4013      	ands	r3, r2
 8002148:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002150:	d03a      	beq.n	80021c8 <HAL_GPIO_Init+0x428>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4a0f      	ldr	r2, [pc, #60]	@ (8002194 <HAL_GPIO_Init+0x3f4>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d034      	beq.n	80021c4 <HAL_GPIO_Init+0x424>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4a0e      	ldr	r2, [pc, #56]	@ (8002198 <HAL_GPIO_Init+0x3f8>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d02e      	beq.n	80021c0 <HAL_GPIO_Init+0x420>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a0d      	ldr	r2, [pc, #52]	@ (800219c <HAL_GPIO_Init+0x3fc>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d028      	beq.n	80021bc <HAL_GPIO_Init+0x41c>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a0c      	ldr	r2, [pc, #48]	@ (80021a0 <HAL_GPIO_Init+0x400>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d022      	beq.n	80021b8 <HAL_GPIO_Init+0x418>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a0b      	ldr	r2, [pc, #44]	@ (80021a4 <HAL_GPIO_Init+0x404>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d007      	beq.n	800218a <HAL_GPIO_Init+0x3ea>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a0a      	ldr	r2, [pc, #40]	@ (80021a8 <HAL_GPIO_Init+0x408>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d101      	bne.n	8002186 <HAL_GPIO_Init+0x3e6>
 8002182:	2306      	movs	r3, #6
 8002184:	e021      	b.n	80021ca <HAL_GPIO_Init+0x42a>
 8002186:	2307      	movs	r3, #7
 8002188:	e01f      	b.n	80021ca <HAL_GPIO_Init+0x42a>
 800218a:	2305      	movs	r3, #5
 800218c:	e01d      	b.n	80021ca <HAL_GPIO_Init+0x42a>
 800218e:	bf00      	nop
 8002190:	0800789c 	.word	0x0800789c
 8002194:	48000400 	.word	0x48000400
 8002198:	48000800 	.word	0x48000800
 800219c:	48000c00 	.word	0x48000c00
 80021a0:	48001000 	.word	0x48001000
 80021a4:	48001400 	.word	0x48001400
 80021a8:	48001800 	.word	0x48001800
 80021ac:	48001c00 	.word	0x48001c00
 80021b0:	40021000 	.word	0x40021000
 80021b4:	40010000 	.word	0x40010000
 80021b8:	2304      	movs	r3, #4
 80021ba:	e006      	b.n	80021ca <HAL_GPIO_Init+0x42a>
 80021bc:	2303      	movs	r3, #3
 80021be:	e004      	b.n	80021ca <HAL_GPIO_Init+0x42a>
 80021c0:	2302      	movs	r3, #2
 80021c2:	e002      	b.n	80021ca <HAL_GPIO_Init+0x42a>
 80021c4:	2301      	movs	r3, #1
 80021c6:	e000      	b.n	80021ca <HAL_GPIO_Init+0x42a>
 80021c8:	2300      	movs	r3, #0
 80021ca:	697a      	ldr	r2, [r7, #20]
 80021cc:	f002 0203 	and.w	r2, r2, #3
 80021d0:	0092      	lsls	r2, r2, #2
 80021d2:	4093      	lsls	r3, r2
 80021d4:	693a      	ldr	r2, [r7, #16]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80021da:	4935      	ldr	r1, [pc, #212]	@ (80022b0 <HAL_GPIO_Init+0x510>)
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	089b      	lsrs	r3, r3, #2
 80021e0:	3302      	adds	r3, #2
 80021e2:	693a      	ldr	r2, [r7, #16]
 80021e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80021e8:	4b32      	ldr	r3, [pc, #200]	@ (80022b4 <HAL_GPIO_Init+0x514>)
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	43db      	mvns	r3, r3
 80021f2:	693a      	ldr	r2, [r7, #16]
 80021f4:	4013      	ands	r3, r2
 80021f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002200:	2b00      	cmp	r3, #0
 8002202:	d003      	beq.n	800220c <HAL_GPIO_Init+0x46c>
        {
          temp |= iocurrent;
 8002204:	693a      	ldr	r2, [r7, #16]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	4313      	orrs	r3, r2
 800220a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800220c:	4a29      	ldr	r2, [pc, #164]	@ (80022b4 <HAL_GPIO_Init+0x514>)
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002212:	4b28      	ldr	r3, [pc, #160]	@ (80022b4 <HAL_GPIO_Init+0x514>)
 8002214:	68db      	ldr	r3, [r3, #12]
 8002216:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	43db      	mvns	r3, r3
 800221c:	693a      	ldr	r2, [r7, #16]
 800221e:	4013      	ands	r3, r2
 8002220:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d003      	beq.n	8002236 <HAL_GPIO_Init+0x496>
        {
          temp |= iocurrent;
 800222e:	693a      	ldr	r2, [r7, #16]
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	4313      	orrs	r3, r2
 8002234:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002236:	4a1f      	ldr	r2, [pc, #124]	@ (80022b4 <HAL_GPIO_Init+0x514>)
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800223c:	4b1d      	ldr	r3, [pc, #116]	@ (80022b4 <HAL_GPIO_Init+0x514>)
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	43db      	mvns	r3, r3
 8002246:	693a      	ldr	r2, [r7, #16]
 8002248:	4013      	ands	r3, r2
 800224a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002254:	2b00      	cmp	r3, #0
 8002256:	d003      	beq.n	8002260 <HAL_GPIO_Init+0x4c0>
        {
          temp |= iocurrent;
 8002258:	693a      	ldr	r2, [r7, #16]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	4313      	orrs	r3, r2
 800225e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002260:	4a14      	ldr	r2, [pc, #80]	@ (80022b4 <HAL_GPIO_Init+0x514>)
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002266:	4b13      	ldr	r3, [pc, #76]	@ (80022b4 <HAL_GPIO_Init+0x514>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	43db      	mvns	r3, r3
 8002270:	693a      	ldr	r2, [r7, #16]
 8002272:	4013      	ands	r3, r2
 8002274:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d003      	beq.n	800228a <HAL_GPIO_Init+0x4ea>
        {
          temp |= iocurrent;
 8002282:	693a      	ldr	r2, [r7, #16]
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	4313      	orrs	r3, r2
 8002288:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800228a:	4a0a      	ldr	r2, [pc, #40]	@ (80022b4 <HAL_GPIO_Init+0x514>)
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	3301      	adds	r3, #1
 8002294:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	fa22 f303 	lsr.w	r3, r2, r3
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	f47f ae13 	bne.w	8001ecc <HAL_GPIO_Init+0x12c>
  }
}
 80022a6:	bf00      	nop
 80022a8:	bf00      	nop
 80022aa:	3718      	adds	r7, #24
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	40010000 	.word	0x40010000
 80022b4:	40010400 	.word	0x40010400

080022b8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80022bc:	4b04      	ldr	r3, [pc, #16]	@ (80022d0 <HAL_PWREx_GetVoltageRange+0x18>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr
 80022ce:	bf00      	nop
 80022d0:	40007000 	.word	0x40007000

080022d4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b084      	sub	sp, #16
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80022e2:	d007      	beq.n	80022f4 <HAL_PWREx_ControlVoltageScaling+0x20>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022ea:	d003      	beq.n	80022f4 <HAL_PWREx_ControlVoltageScaling+0x20>
 80022ec:	21a7      	movs	r1, #167	@ 0xa7
 80022ee:	4826      	ldr	r0, [pc, #152]	@ (8002388 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 80022f0:	f7fe fb2a 	bl	8000948 <assert_failed>
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80022fa:	d130      	bne.n	800235e <HAL_PWREx_ControlVoltageScaling+0x8a>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80022fc:	4b23      	ldr	r3, [pc, #140]	@ (800238c <HAL_PWREx_ControlVoltageScaling+0xb8>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002304:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002308:	d038      	beq.n	800237c <HAL_PWREx_ControlVoltageScaling+0xa8>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800230a:	4b20      	ldr	r3, [pc, #128]	@ (800238c <HAL_PWREx_ControlVoltageScaling+0xb8>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002312:	4a1e      	ldr	r2, [pc, #120]	@ (800238c <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8002314:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002318:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800231a:	4b1d      	ldr	r3, [pc, #116]	@ (8002390 <HAL_PWREx_ControlVoltageScaling+0xbc>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	2232      	movs	r2, #50	@ 0x32
 8002320:	fb02 f303 	mul.w	r3, r2, r3
 8002324:	4a1b      	ldr	r2, [pc, #108]	@ (8002394 <HAL_PWREx_ControlVoltageScaling+0xc0>)
 8002326:	fba2 2303 	umull	r2, r3, r2, r3
 800232a:	0c9b      	lsrs	r3, r3, #18
 800232c:	3301      	adds	r3, #1
 800232e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002330:	e002      	b.n	8002338 <HAL_PWREx_ControlVoltageScaling+0x64>
      {
        wait_loop_index--;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	3b01      	subs	r3, #1
 8002336:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002338:	4b14      	ldr	r3, [pc, #80]	@ (800238c <HAL_PWREx_ControlVoltageScaling+0xb8>)
 800233a:	695b      	ldr	r3, [r3, #20]
 800233c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002340:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002344:	d102      	bne.n	800234c <HAL_PWREx_ControlVoltageScaling+0x78>
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d1f2      	bne.n	8002332 <HAL_PWREx_ControlVoltageScaling+0x5e>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800234c:	4b0f      	ldr	r3, [pc, #60]	@ (800238c <HAL_PWREx_ControlVoltageScaling+0xb8>)
 800234e:	695b      	ldr	r3, [r3, #20]
 8002350:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002354:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002358:	d110      	bne.n	800237c <HAL_PWREx_ControlVoltageScaling+0xa8>
      {
        return HAL_TIMEOUT;
 800235a:	2303      	movs	r3, #3
 800235c:	e00f      	b.n	800237e <HAL_PWREx_ControlVoltageScaling+0xaa>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800235e:	4b0b      	ldr	r3, [pc, #44]	@ (800238c <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002366:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800236a:	d007      	beq.n	800237c <HAL_PWREx_ControlVoltageScaling+0xa8>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800236c:	4b07      	ldr	r3, [pc, #28]	@ (800238c <HAL_PWREx_ControlVoltageScaling+0xb8>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002374:	4a05      	ldr	r2, [pc, #20]	@ (800238c <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8002376:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800237a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800237c:	2300      	movs	r3, #0
}
 800237e:	4618      	mov	r0, r3
 8002380:	3710      	adds	r7, #16
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	080078d8 	.word	0x080078d8
 800238c:	40007000 	.word	0x40007000
 8002390:	20000008 	.word	0x20000008
 8002394:	431bde83 	.word	0x431bde83

08002398 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b088      	sub	sp, #32
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d102      	bne.n	80023ac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	f000 bcef 	b.w	8002d8a <HAL_RCC_OscConfig+0x9f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d008      	beq.n	80023c6 <HAL_RCC_OscConfig+0x2e>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	2b1f      	cmp	r3, #31
 80023ba:	d904      	bls.n	80023c6 <HAL_RCC_OscConfig+0x2e>
 80023bc:	f44f 71d1 	mov.w	r1, #418	@ 0x1a2
 80023c0:	489a      	ldr	r0, [pc, #616]	@ (800262c <HAL_RCC_OscConfig+0x294>)
 80023c2:	f7fe fac1 	bl	8000948 <assert_failed>

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023c6:	4b9a      	ldr	r3, [pc, #616]	@ (8002630 <HAL_RCC_OscConfig+0x298>)
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	f003 030c 	and.w	r3, r3, #12
 80023ce:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023d0:	4b97      	ldr	r3, [pc, #604]	@ (8002630 <HAL_RCC_OscConfig+0x298>)
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	f003 0303 	and.w	r3, r3, #3
 80023d8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0310 	and.w	r3, r3, #16
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	f000 813d 	beq.w	8002662 <HAL_RCC_OscConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	699b      	ldr	r3, [r3, #24]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d008      	beq.n	8002402 <HAL_RCC_OscConfig+0x6a>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	699b      	ldr	r3, [r3, #24]
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d004      	beq.n	8002402 <HAL_RCC_OscConfig+0x6a>
 80023f8:	f240 11ab 	movw	r1, #427	@ 0x1ab
 80023fc:	488b      	ldr	r0, [pc, #556]	@ (800262c <HAL_RCC_OscConfig+0x294>)
 80023fe:	f7fe faa3 	bl	8000948 <assert_failed>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	69db      	ldr	r3, [r3, #28]
 8002406:	2bff      	cmp	r3, #255	@ 0xff
 8002408:	d904      	bls.n	8002414 <HAL_RCC_OscConfig+0x7c>
 800240a:	f44f 71d6 	mov.w	r1, #428	@ 0x1ac
 800240e:	4887      	ldr	r0, [pc, #540]	@ (800262c <HAL_RCC_OscConfig+0x294>)
 8002410:	f7fe fa9a 	bl	8000948 <assert_failed>
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6a1b      	ldr	r3, [r3, #32]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d030      	beq.n	800247e <HAL_RCC_OscConfig+0xe6>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6a1b      	ldr	r3, [r3, #32]
 8002420:	2b10      	cmp	r3, #16
 8002422:	d02c      	beq.n	800247e <HAL_RCC_OscConfig+0xe6>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6a1b      	ldr	r3, [r3, #32]
 8002428:	2b20      	cmp	r3, #32
 800242a:	d028      	beq.n	800247e <HAL_RCC_OscConfig+0xe6>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6a1b      	ldr	r3, [r3, #32]
 8002430:	2b30      	cmp	r3, #48	@ 0x30
 8002432:	d024      	beq.n	800247e <HAL_RCC_OscConfig+0xe6>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6a1b      	ldr	r3, [r3, #32]
 8002438:	2b40      	cmp	r3, #64	@ 0x40
 800243a:	d020      	beq.n	800247e <HAL_RCC_OscConfig+0xe6>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6a1b      	ldr	r3, [r3, #32]
 8002440:	2b50      	cmp	r3, #80	@ 0x50
 8002442:	d01c      	beq.n	800247e <HAL_RCC_OscConfig+0xe6>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6a1b      	ldr	r3, [r3, #32]
 8002448:	2b60      	cmp	r3, #96	@ 0x60
 800244a:	d018      	beq.n	800247e <HAL_RCC_OscConfig+0xe6>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6a1b      	ldr	r3, [r3, #32]
 8002450:	2b70      	cmp	r3, #112	@ 0x70
 8002452:	d014      	beq.n	800247e <HAL_RCC_OscConfig+0xe6>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6a1b      	ldr	r3, [r3, #32]
 8002458:	2b80      	cmp	r3, #128	@ 0x80
 800245a:	d010      	beq.n	800247e <HAL_RCC_OscConfig+0xe6>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6a1b      	ldr	r3, [r3, #32]
 8002460:	2b90      	cmp	r3, #144	@ 0x90
 8002462:	d00c      	beq.n	800247e <HAL_RCC_OscConfig+0xe6>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6a1b      	ldr	r3, [r3, #32]
 8002468:	2ba0      	cmp	r3, #160	@ 0xa0
 800246a:	d008      	beq.n	800247e <HAL_RCC_OscConfig+0xe6>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6a1b      	ldr	r3, [r3, #32]
 8002470:	2bb0      	cmp	r3, #176	@ 0xb0
 8002472:	d004      	beq.n	800247e <HAL_RCC_OscConfig+0xe6>
 8002474:	f240 11ad 	movw	r1, #429	@ 0x1ad
 8002478:	486c      	ldr	r0, [pc, #432]	@ (800262c <HAL_RCC_OscConfig+0x294>)
 800247a:	f7fe fa65 	bl	8000948 <assert_failed>

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800247e:	69bb      	ldr	r3, [r7, #24]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d007      	beq.n	8002494 <HAL_RCC_OscConfig+0xfc>
 8002484:	69bb      	ldr	r3, [r7, #24]
 8002486:	2b0c      	cmp	r3, #12
 8002488:	f040 808e 	bne.w	80025a8 <HAL_RCC_OscConfig+0x210>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	2b01      	cmp	r3, #1
 8002490:	f040 808a 	bne.w	80025a8 <HAL_RCC_OscConfig+0x210>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002494:	4b66      	ldr	r3, [pc, #408]	@ (8002630 <HAL_RCC_OscConfig+0x298>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 0302 	and.w	r3, r3, #2
 800249c:	2b00      	cmp	r3, #0
 800249e:	d006      	beq.n	80024ae <HAL_RCC_OscConfig+0x116>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	699b      	ldr	r3, [r3, #24]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d102      	bne.n	80024ae <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	f000 bc6e 	b.w	8002d8a <HAL_RCC_OscConfig+0x9f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6a1a      	ldr	r2, [r3, #32]
 80024b2:	4b5f      	ldr	r3, [pc, #380]	@ (8002630 <HAL_RCC_OscConfig+0x298>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0308 	and.w	r3, r3, #8
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d004      	beq.n	80024c8 <HAL_RCC_OscConfig+0x130>
 80024be:	4b5c      	ldr	r3, [pc, #368]	@ (8002630 <HAL_RCC_OscConfig+0x298>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80024c6:	e005      	b.n	80024d4 <HAL_RCC_OscConfig+0x13c>
 80024c8:	4b59      	ldr	r3, [pc, #356]	@ (8002630 <HAL_RCC_OscConfig+0x298>)
 80024ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024ce:	091b      	lsrs	r3, r3, #4
 80024d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d224      	bcs.n	8002522 <HAL_RCC_OscConfig+0x18a>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6a1b      	ldr	r3, [r3, #32]
 80024dc:	4618      	mov	r0, r3
 80024de:	f000 fec1 	bl	8003264 <RCC_SetFlashLatencyFromMSIRange>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d002      	beq.n	80024ee <HAL_RCC_OscConfig+0x156>
          {
            return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	f000 bc4e 	b.w	8002d8a <HAL_RCC_OscConfig+0x9f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024ee:	4b50      	ldr	r3, [pc, #320]	@ (8002630 <HAL_RCC_OscConfig+0x298>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a4f      	ldr	r2, [pc, #316]	@ (8002630 <HAL_RCC_OscConfig+0x298>)
 80024f4:	f043 0308 	orr.w	r3, r3, #8
 80024f8:	6013      	str	r3, [r2, #0]
 80024fa:	4b4d      	ldr	r3, [pc, #308]	@ (8002630 <HAL_RCC_OscConfig+0x298>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6a1b      	ldr	r3, [r3, #32]
 8002506:	494a      	ldr	r1, [pc, #296]	@ (8002630 <HAL_RCC_OscConfig+0x298>)
 8002508:	4313      	orrs	r3, r2
 800250a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800250c:	4b48      	ldr	r3, [pc, #288]	@ (8002630 <HAL_RCC_OscConfig+0x298>)
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	69db      	ldr	r3, [r3, #28]
 8002518:	021b      	lsls	r3, r3, #8
 800251a:	4945      	ldr	r1, [pc, #276]	@ (8002630 <HAL_RCC_OscConfig+0x298>)
 800251c:	4313      	orrs	r3, r2
 800251e:	604b      	str	r3, [r1, #4]
 8002520:	e026      	b.n	8002570 <HAL_RCC_OscConfig+0x1d8>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002522:	4b43      	ldr	r3, [pc, #268]	@ (8002630 <HAL_RCC_OscConfig+0x298>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a42      	ldr	r2, [pc, #264]	@ (8002630 <HAL_RCC_OscConfig+0x298>)
 8002528:	f043 0308 	orr.w	r3, r3, #8
 800252c:	6013      	str	r3, [r2, #0]
 800252e:	4b40      	ldr	r3, [pc, #256]	@ (8002630 <HAL_RCC_OscConfig+0x298>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6a1b      	ldr	r3, [r3, #32]
 800253a:	493d      	ldr	r1, [pc, #244]	@ (8002630 <HAL_RCC_OscConfig+0x298>)
 800253c:	4313      	orrs	r3, r2
 800253e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002540:	4b3b      	ldr	r3, [pc, #236]	@ (8002630 <HAL_RCC_OscConfig+0x298>)
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	69db      	ldr	r3, [r3, #28]
 800254c:	021b      	lsls	r3, r3, #8
 800254e:	4938      	ldr	r1, [pc, #224]	@ (8002630 <HAL_RCC_OscConfig+0x298>)
 8002550:	4313      	orrs	r3, r2
 8002552:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002554:	69bb      	ldr	r3, [r7, #24]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d10a      	bne.n	8002570 <HAL_RCC_OscConfig+0x1d8>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6a1b      	ldr	r3, [r3, #32]
 800255e:	4618      	mov	r0, r3
 8002560:	f000 fe80 	bl	8003264 <RCC_SetFlashLatencyFromMSIRange>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d002      	beq.n	8002570 <HAL_RCC_OscConfig+0x1d8>
            {
              return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	f000 bc0d 	b.w	8002d8a <HAL_RCC_OscConfig+0x9f2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002570:	f000 fdb4 	bl	80030dc <HAL_RCC_GetSysClockFreq>
 8002574:	4602      	mov	r2, r0
 8002576:	4b2e      	ldr	r3, [pc, #184]	@ (8002630 <HAL_RCC_OscConfig+0x298>)
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	091b      	lsrs	r3, r3, #4
 800257c:	f003 030f 	and.w	r3, r3, #15
 8002580:	492c      	ldr	r1, [pc, #176]	@ (8002634 <HAL_RCC_OscConfig+0x29c>)
 8002582:	5ccb      	ldrb	r3, [r1, r3]
 8002584:	f003 031f 	and.w	r3, r3, #31
 8002588:	fa22 f303 	lsr.w	r3, r2, r3
 800258c:	4a2a      	ldr	r2, [pc, #168]	@ (8002638 <HAL_RCC_OscConfig+0x2a0>)
 800258e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002590:	4b2a      	ldr	r3, [pc, #168]	@ (800263c <HAL_RCC_OscConfig+0x2a4>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4618      	mov	r0, r3
 8002596:	f7fe ff21 	bl	80013dc <HAL_InitTick>
 800259a:	4603      	mov	r3, r0
 800259c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800259e:	7bfb      	ldrb	r3, [r7, #15]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d05d      	beq.n	8002660 <HAL_RCC_OscConfig+0x2c8>
        {
          return status;
 80025a4:	7bfb      	ldrb	r3, [r7, #15]
 80025a6:	e3f0      	b.n	8002d8a <HAL_RCC_OscConfig+0x9f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	699b      	ldr	r3, [r3, #24]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d032      	beq.n	8002616 <HAL_RCC_OscConfig+0x27e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80025b0:	4b1f      	ldr	r3, [pc, #124]	@ (8002630 <HAL_RCC_OscConfig+0x298>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a1e      	ldr	r2, [pc, #120]	@ (8002630 <HAL_RCC_OscConfig+0x298>)
 80025b6:	f043 0301 	orr.w	r3, r3, #1
 80025ba:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80025bc:	f7fe ff5e 	bl	800147c <HAL_GetTick>
 80025c0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80025c2:	e008      	b.n	80025d6 <HAL_RCC_OscConfig+0x23e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80025c4:	f7fe ff5a 	bl	800147c <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	d901      	bls.n	80025d6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	e3d9      	b.n	8002d8a <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80025d6:	4b16      	ldr	r3, [pc, #88]	@ (8002630 <HAL_RCC_OscConfig+0x298>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0302 	and.w	r3, r3, #2
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d0f0      	beq.n	80025c4 <HAL_RCC_OscConfig+0x22c>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025e2:	4b13      	ldr	r3, [pc, #76]	@ (8002630 <HAL_RCC_OscConfig+0x298>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a12      	ldr	r2, [pc, #72]	@ (8002630 <HAL_RCC_OscConfig+0x298>)
 80025e8:	f043 0308 	orr.w	r3, r3, #8
 80025ec:	6013      	str	r3, [r2, #0]
 80025ee:	4b10      	ldr	r3, [pc, #64]	@ (8002630 <HAL_RCC_OscConfig+0x298>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6a1b      	ldr	r3, [r3, #32]
 80025fa:	490d      	ldr	r1, [pc, #52]	@ (8002630 <HAL_RCC_OscConfig+0x298>)
 80025fc:	4313      	orrs	r3, r2
 80025fe:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002600:	4b0b      	ldr	r3, [pc, #44]	@ (8002630 <HAL_RCC_OscConfig+0x298>)
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	69db      	ldr	r3, [r3, #28]
 800260c:	021b      	lsls	r3, r3, #8
 800260e:	4908      	ldr	r1, [pc, #32]	@ (8002630 <HAL_RCC_OscConfig+0x298>)
 8002610:	4313      	orrs	r3, r2
 8002612:	604b      	str	r3, [r1, #4]
 8002614:	e025      	b.n	8002662 <HAL_RCC_OscConfig+0x2ca>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002616:	4b06      	ldr	r3, [pc, #24]	@ (8002630 <HAL_RCC_OscConfig+0x298>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a05      	ldr	r2, [pc, #20]	@ (8002630 <HAL_RCC_OscConfig+0x298>)
 800261c:	f023 0301 	bic.w	r3, r3, #1
 8002620:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002622:	f7fe ff2b 	bl	800147c <HAL_GetTick>
 8002626:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002628:	e013      	b.n	8002652 <HAL_RCC_OscConfig+0x2ba>
 800262a:	bf00      	nop
 800262c:	08007914 	.word	0x08007914
 8002630:	40021000 	.word	0x40021000
 8002634:	08007a70 	.word	0x08007a70
 8002638:	20000008 	.word	0x20000008
 800263c:	2000000c 	.word	0x2000000c
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002640:	f7fe ff1c 	bl	800147c <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	2b02      	cmp	r3, #2
 800264c:	d901      	bls.n	8002652 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800264e:	2303      	movs	r3, #3
 8002650:	e39b      	b.n	8002d8a <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002652:	4b97      	ldr	r3, [pc, #604]	@ (80028b0 <HAL_RCC_OscConfig+0x518>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0302 	and.w	r3, r3, #2
 800265a:	2b00      	cmp	r3, #0
 800265c:	d1f0      	bne.n	8002640 <HAL_RCC_OscConfig+0x2a8>
 800265e:	e000      	b.n	8002662 <HAL_RCC_OscConfig+0x2ca>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002660:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0301 	and.w	r3, r3, #1
 800266a:	2b00      	cmp	r3, #0
 800266c:	d07e      	beq.n	800276c <HAL_RCC_OscConfig+0x3d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d00e      	beq.n	8002694 <HAL_RCC_OscConfig+0x2fc>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800267e:	d009      	beq.n	8002694 <HAL_RCC_OscConfig+0x2fc>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002688:	d004      	beq.n	8002694 <HAL_RCC_OscConfig+0x2fc>
 800268a:	f240 2119 	movw	r1, #537	@ 0x219
 800268e:	4889      	ldr	r0, [pc, #548]	@ (80028b4 <HAL_RCC_OscConfig+0x51c>)
 8002690:	f7fe f95a 	bl	8000948 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002694:	69bb      	ldr	r3, [r7, #24]
 8002696:	2b08      	cmp	r3, #8
 8002698:	d005      	beq.n	80026a6 <HAL_RCC_OscConfig+0x30e>
 800269a:	69bb      	ldr	r3, [r7, #24]
 800269c:	2b0c      	cmp	r3, #12
 800269e:	d10e      	bne.n	80026be <HAL_RCC_OscConfig+0x326>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	2b03      	cmp	r3, #3
 80026a4:	d10b      	bne.n	80026be <HAL_RCC_OscConfig+0x326>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026a6:	4b82      	ldr	r3, [pc, #520]	@ (80028b0 <HAL_RCC_OscConfig+0x518>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d05b      	beq.n	800276a <HAL_RCC_OscConfig+0x3d2>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d157      	bne.n	800276a <HAL_RCC_OscConfig+0x3d2>
      {
        return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e365      	b.n	8002d8a <HAL_RCC_OscConfig+0x9f2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026c6:	d106      	bne.n	80026d6 <HAL_RCC_OscConfig+0x33e>
 80026c8:	4b79      	ldr	r3, [pc, #484]	@ (80028b0 <HAL_RCC_OscConfig+0x518>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a78      	ldr	r2, [pc, #480]	@ (80028b0 <HAL_RCC_OscConfig+0x518>)
 80026ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026d2:	6013      	str	r3, [r2, #0]
 80026d4:	e01d      	b.n	8002712 <HAL_RCC_OscConfig+0x37a>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80026de:	d10c      	bne.n	80026fa <HAL_RCC_OscConfig+0x362>
 80026e0:	4b73      	ldr	r3, [pc, #460]	@ (80028b0 <HAL_RCC_OscConfig+0x518>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a72      	ldr	r2, [pc, #456]	@ (80028b0 <HAL_RCC_OscConfig+0x518>)
 80026e6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80026ea:	6013      	str	r3, [r2, #0]
 80026ec:	4b70      	ldr	r3, [pc, #448]	@ (80028b0 <HAL_RCC_OscConfig+0x518>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a6f      	ldr	r2, [pc, #444]	@ (80028b0 <HAL_RCC_OscConfig+0x518>)
 80026f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026f6:	6013      	str	r3, [r2, #0]
 80026f8:	e00b      	b.n	8002712 <HAL_RCC_OscConfig+0x37a>
 80026fa:	4b6d      	ldr	r3, [pc, #436]	@ (80028b0 <HAL_RCC_OscConfig+0x518>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a6c      	ldr	r2, [pc, #432]	@ (80028b0 <HAL_RCC_OscConfig+0x518>)
 8002700:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002704:	6013      	str	r3, [r2, #0]
 8002706:	4b6a      	ldr	r3, [pc, #424]	@ (80028b0 <HAL_RCC_OscConfig+0x518>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a69      	ldr	r2, [pc, #420]	@ (80028b0 <HAL_RCC_OscConfig+0x518>)
 800270c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002710:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d013      	beq.n	8002742 <HAL_RCC_OscConfig+0x3aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800271a:	f7fe feaf 	bl	800147c <HAL_GetTick>
 800271e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002720:	e008      	b.n	8002734 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002722:	f7fe feab 	bl	800147c <HAL_GetTick>
 8002726:	4602      	mov	r2, r0
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	1ad3      	subs	r3, r2, r3
 800272c:	2b64      	cmp	r3, #100	@ 0x64
 800272e:	d901      	bls.n	8002734 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8002730:	2303      	movs	r3, #3
 8002732:	e32a      	b.n	8002d8a <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002734:	4b5e      	ldr	r3, [pc, #376]	@ (80028b0 <HAL_RCC_OscConfig+0x518>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800273c:	2b00      	cmp	r3, #0
 800273e:	d0f0      	beq.n	8002722 <HAL_RCC_OscConfig+0x38a>
 8002740:	e014      	b.n	800276c <HAL_RCC_OscConfig+0x3d4>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002742:	f7fe fe9b 	bl	800147c <HAL_GetTick>
 8002746:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002748:	e008      	b.n	800275c <HAL_RCC_OscConfig+0x3c4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800274a:	f7fe fe97 	bl	800147c <HAL_GetTick>
 800274e:	4602      	mov	r2, r0
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	2b64      	cmp	r3, #100	@ 0x64
 8002756:	d901      	bls.n	800275c <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8002758:	2303      	movs	r3, #3
 800275a:	e316      	b.n	8002d8a <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800275c:	4b54      	ldr	r3, [pc, #336]	@ (80028b0 <HAL_RCC_OscConfig+0x518>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d1f0      	bne.n	800274a <HAL_RCC_OscConfig+0x3b2>
 8002768:	e000      	b.n	800276c <HAL_RCC_OscConfig+0x3d4>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800276a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 0302 	and.w	r3, r3, #2
 8002774:	2b00      	cmp	r3, #0
 8002776:	d077      	beq.n	8002868 <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d009      	beq.n	8002794 <HAL_RCC_OscConfig+0x3fc>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002788:	d004      	beq.n	8002794 <HAL_RCC_OscConfig+0x3fc>
 800278a:	f44f 7113 	mov.w	r1, #588	@ 0x24c
 800278e:	4849      	ldr	r0, [pc, #292]	@ (80028b4 <HAL_RCC_OscConfig+0x51c>)
 8002790:	f7fe f8da 	bl	8000948 <assert_failed>
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	691b      	ldr	r3, [r3, #16]
 8002798:	2b1f      	cmp	r3, #31
 800279a:	d904      	bls.n	80027a6 <HAL_RCC_OscConfig+0x40e>
 800279c:	f240 214d 	movw	r1, #589	@ 0x24d
 80027a0:	4844      	ldr	r0, [pc, #272]	@ (80028b4 <HAL_RCC_OscConfig+0x51c>)
 80027a2:	f7fe f8d1 	bl	8000948 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80027a6:	69bb      	ldr	r3, [r7, #24]
 80027a8:	2b04      	cmp	r3, #4
 80027aa:	d005      	beq.n	80027b8 <HAL_RCC_OscConfig+0x420>
 80027ac:	69bb      	ldr	r3, [r7, #24]
 80027ae:	2b0c      	cmp	r3, #12
 80027b0:	d119      	bne.n	80027e6 <HAL_RCC_OscConfig+0x44e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	2b02      	cmp	r3, #2
 80027b6:	d116      	bne.n	80027e6 <HAL_RCC_OscConfig+0x44e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027b8:	4b3d      	ldr	r3, [pc, #244]	@ (80028b0 <HAL_RCC_OscConfig+0x518>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d005      	beq.n	80027d0 <HAL_RCC_OscConfig+0x438>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d101      	bne.n	80027d0 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e2dc      	b.n	8002d8a <HAL_RCC_OscConfig+0x9f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027d0:	4b37      	ldr	r3, [pc, #220]	@ (80028b0 <HAL_RCC_OscConfig+0x518>)
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	691b      	ldr	r3, [r3, #16]
 80027dc:	061b      	lsls	r3, r3, #24
 80027de:	4934      	ldr	r1, [pc, #208]	@ (80028b0 <HAL_RCC_OscConfig+0x518>)
 80027e0:	4313      	orrs	r3, r2
 80027e2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027e4:	e040      	b.n	8002868 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	68db      	ldr	r3, [r3, #12]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d023      	beq.n	8002836 <HAL_RCC_OscConfig+0x49e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027ee:	4b30      	ldr	r3, [pc, #192]	@ (80028b0 <HAL_RCC_OscConfig+0x518>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a2f      	ldr	r2, [pc, #188]	@ (80028b0 <HAL_RCC_OscConfig+0x518>)
 80027f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027fa:	f7fe fe3f 	bl	800147c <HAL_GetTick>
 80027fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002800:	e008      	b.n	8002814 <HAL_RCC_OscConfig+0x47c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002802:	f7fe fe3b 	bl	800147c <HAL_GetTick>
 8002806:	4602      	mov	r2, r0
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	2b02      	cmp	r3, #2
 800280e:	d901      	bls.n	8002814 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002810:	2303      	movs	r3, #3
 8002812:	e2ba      	b.n	8002d8a <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002814:	4b26      	ldr	r3, [pc, #152]	@ (80028b0 <HAL_RCC_OscConfig+0x518>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800281c:	2b00      	cmp	r3, #0
 800281e:	d0f0      	beq.n	8002802 <HAL_RCC_OscConfig+0x46a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002820:	4b23      	ldr	r3, [pc, #140]	@ (80028b0 <HAL_RCC_OscConfig+0x518>)
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	691b      	ldr	r3, [r3, #16]
 800282c:	061b      	lsls	r3, r3, #24
 800282e:	4920      	ldr	r1, [pc, #128]	@ (80028b0 <HAL_RCC_OscConfig+0x518>)
 8002830:	4313      	orrs	r3, r2
 8002832:	604b      	str	r3, [r1, #4]
 8002834:	e018      	b.n	8002868 <HAL_RCC_OscConfig+0x4d0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002836:	4b1e      	ldr	r3, [pc, #120]	@ (80028b0 <HAL_RCC_OscConfig+0x518>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a1d      	ldr	r2, [pc, #116]	@ (80028b0 <HAL_RCC_OscConfig+0x518>)
 800283c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002840:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002842:	f7fe fe1b 	bl	800147c <HAL_GetTick>
 8002846:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002848:	e008      	b.n	800285c <HAL_RCC_OscConfig+0x4c4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800284a:	f7fe fe17 	bl	800147c <HAL_GetTick>
 800284e:	4602      	mov	r2, r0
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	1ad3      	subs	r3, r2, r3
 8002854:	2b02      	cmp	r3, #2
 8002856:	d901      	bls.n	800285c <HAL_RCC_OscConfig+0x4c4>
          {
            return HAL_TIMEOUT;
 8002858:	2303      	movs	r3, #3
 800285a:	e296      	b.n	8002d8a <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800285c:	4b14      	ldr	r3, [pc, #80]	@ (80028b0 <HAL_RCC_OscConfig+0x518>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002864:	2b00      	cmp	r3, #0
 8002866:	d1f0      	bne.n	800284a <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 0308 	and.w	r3, r3, #8
 8002870:	2b00      	cmp	r3, #0
 8002872:	d04e      	beq.n	8002912 <HAL_RCC_OscConfig+0x57a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	695b      	ldr	r3, [r3, #20]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d008      	beq.n	800288e <HAL_RCC_OscConfig+0x4f6>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	695b      	ldr	r3, [r3, #20]
 8002880:	2b01      	cmp	r3, #1
 8002882:	d004      	beq.n	800288e <HAL_RCC_OscConfig+0x4f6>
 8002884:	f240 218d 	movw	r1, #653	@ 0x28d
 8002888:	480a      	ldr	r0, [pc, #40]	@ (80028b4 <HAL_RCC_OscConfig+0x51c>)
 800288a:	f7fe f85d 	bl	8000948 <assert_failed>

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	695b      	ldr	r3, [r3, #20]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d021      	beq.n	80028da <HAL_RCC_OscConfig+0x542>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002896:	4b06      	ldr	r3, [pc, #24]	@ (80028b0 <HAL_RCC_OscConfig+0x518>)
 8002898:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800289c:	4a04      	ldr	r2, [pc, #16]	@ (80028b0 <HAL_RCC_OscConfig+0x518>)
 800289e:	f043 0301 	orr.w	r3, r3, #1
 80028a2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028a6:	f7fe fde9 	bl	800147c <HAL_GetTick>
 80028aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028ac:	e00d      	b.n	80028ca <HAL_RCC_OscConfig+0x532>
 80028ae:	bf00      	nop
 80028b0:	40021000 	.word	0x40021000
 80028b4:	08007914 	.word	0x08007914
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028b8:	f7fe fde0 	bl	800147c <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	2b02      	cmp	r3, #2
 80028c4:	d901      	bls.n	80028ca <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e25f      	b.n	8002d8a <HAL_RCC_OscConfig+0x9f2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028ca:	4b66      	ldr	r3, [pc, #408]	@ (8002a64 <HAL_RCC_OscConfig+0x6cc>)
 80028cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028d0:	f003 0302 	and.w	r3, r3, #2
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d0ef      	beq.n	80028b8 <HAL_RCC_OscConfig+0x520>
 80028d8:	e01b      	b.n	8002912 <HAL_RCC_OscConfig+0x57a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028da:	4b62      	ldr	r3, [pc, #392]	@ (8002a64 <HAL_RCC_OscConfig+0x6cc>)
 80028dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028e0:	4a60      	ldr	r2, [pc, #384]	@ (8002a64 <HAL_RCC_OscConfig+0x6cc>)
 80028e2:	f023 0301 	bic.w	r3, r3, #1
 80028e6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028ea:	f7fe fdc7 	bl	800147c <HAL_GetTick>
 80028ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80028f0:	e008      	b.n	8002904 <HAL_RCC_OscConfig+0x56c>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028f2:	f7fe fdc3 	bl	800147c <HAL_GetTick>
 80028f6:	4602      	mov	r2, r0
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	d901      	bls.n	8002904 <HAL_RCC_OscConfig+0x56c>
        {
          return HAL_TIMEOUT;
 8002900:	2303      	movs	r3, #3
 8002902:	e242      	b.n	8002d8a <HAL_RCC_OscConfig+0x9f2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002904:	4b57      	ldr	r3, [pc, #348]	@ (8002a64 <HAL_RCC_OscConfig+0x6cc>)
 8002906:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800290a:	f003 0302 	and.w	r3, r3, #2
 800290e:	2b00      	cmp	r3, #0
 8002910:	d1ef      	bne.n	80028f2 <HAL_RCC_OscConfig+0x55a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0304 	and.w	r3, r3, #4
 800291a:	2b00      	cmp	r3, #0
 800291c:	f000 80b8 	beq.w	8002a90 <HAL_RCC_OscConfig+0x6f8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002920:	2300      	movs	r3, #0
 8002922:	77fb      	strb	r3, [r7, #31]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d00c      	beq.n	8002946 <HAL_RCC_OscConfig+0x5ae>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	2b01      	cmp	r3, #1
 8002932:	d008      	beq.n	8002946 <HAL_RCC_OscConfig+0x5ae>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	2b05      	cmp	r3, #5
 800293a:	d004      	beq.n	8002946 <HAL_RCC_OscConfig+0x5ae>
 800293c:	f44f 7138 	mov.w	r1, #736	@ 0x2e0
 8002940:	4849      	ldr	r0, [pc, #292]	@ (8002a68 <HAL_RCC_OscConfig+0x6d0>)
 8002942:	f7fe f801 	bl	8000948 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002946:	4b47      	ldr	r3, [pc, #284]	@ (8002a64 <HAL_RCC_OscConfig+0x6cc>)
 8002948:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800294a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d10d      	bne.n	800296e <HAL_RCC_OscConfig+0x5d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002952:	4b44      	ldr	r3, [pc, #272]	@ (8002a64 <HAL_RCC_OscConfig+0x6cc>)
 8002954:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002956:	4a43      	ldr	r2, [pc, #268]	@ (8002a64 <HAL_RCC_OscConfig+0x6cc>)
 8002958:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800295c:	6593      	str	r3, [r2, #88]	@ 0x58
 800295e:	4b41      	ldr	r3, [pc, #260]	@ (8002a64 <HAL_RCC_OscConfig+0x6cc>)
 8002960:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002962:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002966:	60bb      	str	r3, [r7, #8]
 8002968:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800296a:	2301      	movs	r3, #1
 800296c:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800296e:	4b3f      	ldr	r3, [pc, #252]	@ (8002a6c <HAL_RCC_OscConfig+0x6d4>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002976:	2b00      	cmp	r3, #0
 8002978:	d118      	bne.n	80029ac <HAL_RCC_OscConfig+0x614>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800297a:	4b3c      	ldr	r3, [pc, #240]	@ (8002a6c <HAL_RCC_OscConfig+0x6d4>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a3b      	ldr	r2, [pc, #236]	@ (8002a6c <HAL_RCC_OscConfig+0x6d4>)
 8002980:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002984:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002986:	f7fe fd79 	bl	800147c <HAL_GetTick>
 800298a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800298c:	e008      	b.n	80029a0 <HAL_RCC_OscConfig+0x608>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800298e:	f7fe fd75 	bl	800147c <HAL_GetTick>
 8002992:	4602      	mov	r2, r0
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	2b02      	cmp	r3, #2
 800299a:	d901      	bls.n	80029a0 <HAL_RCC_OscConfig+0x608>
        {
          return HAL_TIMEOUT;
 800299c:	2303      	movs	r3, #3
 800299e:	e1f4      	b.n	8002d8a <HAL_RCC_OscConfig+0x9f2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029a0:	4b32      	ldr	r3, [pc, #200]	@ (8002a6c <HAL_RCC_OscConfig+0x6d4>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d0f0      	beq.n	800298e <HAL_RCC_OscConfig+0x5f6>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d108      	bne.n	80029c6 <HAL_RCC_OscConfig+0x62e>
 80029b4:	4b2b      	ldr	r3, [pc, #172]	@ (8002a64 <HAL_RCC_OscConfig+0x6cc>)
 80029b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029ba:	4a2a      	ldr	r2, [pc, #168]	@ (8002a64 <HAL_RCC_OscConfig+0x6cc>)
 80029bc:	f043 0301 	orr.w	r3, r3, #1
 80029c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80029c4:	e024      	b.n	8002a10 <HAL_RCC_OscConfig+0x678>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	2b05      	cmp	r3, #5
 80029cc:	d110      	bne.n	80029f0 <HAL_RCC_OscConfig+0x658>
 80029ce:	4b25      	ldr	r3, [pc, #148]	@ (8002a64 <HAL_RCC_OscConfig+0x6cc>)
 80029d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029d4:	4a23      	ldr	r2, [pc, #140]	@ (8002a64 <HAL_RCC_OscConfig+0x6cc>)
 80029d6:	f043 0304 	orr.w	r3, r3, #4
 80029da:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80029de:	4b21      	ldr	r3, [pc, #132]	@ (8002a64 <HAL_RCC_OscConfig+0x6cc>)
 80029e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029e4:	4a1f      	ldr	r2, [pc, #124]	@ (8002a64 <HAL_RCC_OscConfig+0x6cc>)
 80029e6:	f043 0301 	orr.w	r3, r3, #1
 80029ea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80029ee:	e00f      	b.n	8002a10 <HAL_RCC_OscConfig+0x678>
 80029f0:	4b1c      	ldr	r3, [pc, #112]	@ (8002a64 <HAL_RCC_OscConfig+0x6cc>)
 80029f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029f6:	4a1b      	ldr	r2, [pc, #108]	@ (8002a64 <HAL_RCC_OscConfig+0x6cc>)
 80029f8:	f023 0301 	bic.w	r3, r3, #1
 80029fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002a00:	4b18      	ldr	r3, [pc, #96]	@ (8002a64 <HAL_RCC_OscConfig+0x6cc>)
 8002a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a06:	4a17      	ldr	r2, [pc, #92]	@ (8002a64 <HAL_RCC_OscConfig+0x6cc>)
 8002a08:	f023 0304 	bic.w	r3, r3, #4
 8002a0c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d016      	beq.n	8002a46 <HAL_RCC_OscConfig+0x6ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a18:	f7fe fd30 	bl	800147c <HAL_GetTick>
 8002a1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a1e:	e00a      	b.n	8002a36 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a20:	f7fe fd2c 	bl	800147c <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d901      	bls.n	8002a36 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8002a32:	2303      	movs	r3, #3
 8002a34:	e1a9      	b.n	8002d8a <HAL_RCC_OscConfig+0x9f2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a36:	4b0b      	ldr	r3, [pc, #44]	@ (8002a64 <HAL_RCC_OscConfig+0x6cc>)
 8002a38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a3c:	f003 0302 	and.w	r3, r3, #2
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d0ed      	beq.n	8002a20 <HAL_RCC_OscConfig+0x688>
 8002a44:	e01b      	b.n	8002a7e <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a46:	f7fe fd19 	bl	800147c <HAL_GetTick>
 8002a4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a4c:	e010      	b.n	8002a70 <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a4e:	f7fe fd15 	bl	800147c <HAL_GetTick>
 8002a52:	4602      	mov	r2, r0
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	1ad3      	subs	r3, r2, r3
 8002a58:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d907      	bls.n	8002a70 <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 8002a60:	2303      	movs	r3, #3
 8002a62:	e192      	b.n	8002d8a <HAL_RCC_OscConfig+0x9f2>
 8002a64:	40021000 	.word	0x40021000
 8002a68:	08007914 	.word	0x08007914
 8002a6c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a70:	4b98      	ldr	r3, [pc, #608]	@ (8002cd4 <HAL_RCC_OscConfig+0x93c>)
 8002a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a76:	f003 0302 	and.w	r3, r3, #2
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d1e7      	bne.n	8002a4e <HAL_RCC_OscConfig+0x6b6>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a7e:	7ffb      	ldrb	r3, [r7, #31]
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d105      	bne.n	8002a90 <HAL_RCC_OscConfig+0x6f8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a84:	4b93      	ldr	r3, [pc, #588]	@ (8002cd4 <HAL_RCC_OscConfig+0x93c>)
 8002a86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a88:	4a92      	ldr	r2, [pc, #584]	@ (8002cd4 <HAL_RCC_OscConfig+0x93c>)
 8002a8a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a8e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d00c      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x71a>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d008      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x71a>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aa4:	2b02      	cmp	r3, #2
 8002aa6:	d004      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x71a>
 8002aa8:	f240 316e 	movw	r1, #878	@ 0x36e
 8002aac:	488a      	ldr	r0, [pc, #552]	@ (8002cd8 <HAL_RCC_OscConfig+0x940>)
 8002aae:	f7fd ff4b 	bl	8000948 <assert_failed>

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	f000 8166 	beq.w	8002d88 <HAL_RCC_OscConfig+0x9f0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ac0:	2b02      	cmp	r3, #2
 8002ac2:	f040 813c 	bne.w	8002d3e <HAL_RCC_OscConfig+0x9a6>
    {
      /* Check the parameters */
      assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d010      	beq.n	8002af0 <HAL_RCC_OscConfig+0x758>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d00c      	beq.n	8002af0 <HAL_RCC_OscConfig+0x758>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	d008      	beq.n	8002af0 <HAL_RCC_OscConfig+0x758>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ae2:	2b03      	cmp	r3, #3
 8002ae4:	d004      	beq.n	8002af0 <HAL_RCC_OscConfig+0x758>
 8002ae6:	f240 3176 	movw	r1, #886	@ 0x376
 8002aea:	487b      	ldr	r0, [pc, #492]	@ (8002cd8 <HAL_RCC_OscConfig+0x940>)
 8002aec:	f7fd ff2c 	bl	8000948 <assert_failed>
      assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d003      	beq.n	8002b00 <HAL_RCC_OscConfig+0x768>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002afc:	2b08      	cmp	r3, #8
 8002afe:	d904      	bls.n	8002b0a <HAL_RCC_OscConfig+0x772>
 8002b00:	f240 3177 	movw	r1, #887	@ 0x377
 8002b04:	4874      	ldr	r0, [pc, #464]	@ (8002cd8 <HAL_RCC_OscConfig+0x940>)
 8002b06:	f7fd ff1f 	bl	8000948 <assert_failed>
      assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b0e:	2b07      	cmp	r3, #7
 8002b10:	d903      	bls.n	8002b1a <HAL_RCC_OscConfig+0x782>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b16:	2b56      	cmp	r3, #86	@ 0x56
 8002b18:	d904      	bls.n	8002b24 <HAL_RCC_OscConfig+0x78c>
 8002b1a:	f44f 715e 	mov.w	r1, #888	@ 0x378
 8002b1e:	486e      	ldr	r0, [pc, #440]	@ (8002cd8 <HAL_RCC_OscConfig+0x940>)
 8002b20:	f7fd ff12 	bl	8000948 <assert_failed>
#if defined(RCC_PLLP_SUPPORT)
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b28:	2b07      	cmp	r3, #7
 8002b2a:	d008      	beq.n	8002b3e <HAL_RCC_OscConfig+0x7a6>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b30:	2b11      	cmp	r3, #17
 8002b32:	d004      	beq.n	8002b3e <HAL_RCC_OscConfig+0x7a6>
 8002b34:	f240 317a 	movw	r1, #890	@ 0x37a
 8002b38:	4867      	ldr	r0, [pc, #412]	@ (8002cd8 <HAL_RCC_OscConfig+0x940>)
 8002b3a:	f7fd ff05 	bl	8000948 <assert_failed>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	d010      	beq.n	8002b68 <HAL_RCC_OscConfig+0x7d0>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b4a:	2b04      	cmp	r3, #4
 8002b4c:	d00c      	beq.n	8002b68 <HAL_RCC_OscConfig+0x7d0>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b52:	2b06      	cmp	r3, #6
 8002b54:	d008      	beq.n	8002b68 <HAL_RCC_OscConfig+0x7d0>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b5a:	2b08      	cmp	r3, #8
 8002b5c:	d004      	beq.n	8002b68 <HAL_RCC_OscConfig+0x7d0>
 8002b5e:	f44f 715f 	mov.w	r1, #892	@ 0x37c
 8002b62:	485d      	ldr	r0, [pc, #372]	@ (8002cd8 <HAL_RCC_OscConfig+0x940>)
 8002b64:	f7fd fef0 	bl	8000948 <assert_failed>
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	d010      	beq.n	8002b92 <HAL_RCC_OscConfig+0x7fa>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b74:	2b04      	cmp	r3, #4
 8002b76:	d00c      	beq.n	8002b92 <HAL_RCC_OscConfig+0x7fa>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b7c:	2b06      	cmp	r3, #6
 8002b7e:	d008      	beq.n	8002b92 <HAL_RCC_OscConfig+0x7fa>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b84:	2b08      	cmp	r3, #8
 8002b86:	d004      	beq.n	8002b92 <HAL_RCC_OscConfig+0x7fa>
 8002b88:	f240 317d 	movw	r1, #893	@ 0x37d
 8002b8c:	4852      	ldr	r0, [pc, #328]	@ (8002cd8 <HAL_RCC_OscConfig+0x940>)
 8002b8e:	f7fd fedb 	bl	8000948 <assert_failed>

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002b92:	4b50      	ldr	r3, [pc, #320]	@ (8002cd4 <HAL_RCC_OscConfig+0x93c>)
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	f003 0203 	and.w	r2, r3, #3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d130      	bne.n	8002c08 <HAL_RCC_OscConfig+0x870>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bb0:	3b01      	subs	r3, #1
 8002bb2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d127      	bne.n	8002c08 <HAL_RCC_OscConfig+0x870>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bc2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d11f      	bne.n	8002c08 <HAL_RCC_OscConfig+0x870>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bce:	687a      	ldr	r2, [r7, #4]
 8002bd0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002bd2:	2a07      	cmp	r2, #7
 8002bd4:	bf14      	ite	ne
 8002bd6:	2201      	movne	r2, #1
 8002bd8:	2200      	moveq	r2, #0
 8002bda:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d113      	bne.n	8002c08 <HAL_RCC_OscConfig+0x870>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bea:	085b      	lsrs	r3, r3, #1
 8002bec:	3b01      	subs	r3, #1
 8002bee:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d109      	bne.n	8002c08 <HAL_RCC_OscConfig+0x870>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bfe:	085b      	lsrs	r3, r3, #1
 8002c00:	3b01      	subs	r3, #1
 8002c02:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d074      	beq.n	8002cf2 <HAL_RCC_OscConfig+0x95a>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c08:	69bb      	ldr	r3, [r7, #24]
 8002c0a:	2b0c      	cmp	r3, #12
 8002c0c:	d06f      	beq.n	8002cee <HAL_RCC_OscConfig+0x956>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002c0e:	4b31      	ldr	r3, [pc, #196]	@ (8002cd4 <HAL_RCC_OscConfig+0x93c>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d105      	bne.n	8002c26 <HAL_RCC_OscConfig+0x88e>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002c1a:	4b2e      	ldr	r3, [pc, #184]	@ (8002cd4 <HAL_RCC_OscConfig+0x93c>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d001      	beq.n	8002c2a <HAL_RCC_OscConfig+0x892>
#endif
            )
          {
            return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e0af      	b.n	8002d8a <HAL_RCC_OscConfig+0x9f2>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002c2a:	4b2a      	ldr	r3, [pc, #168]	@ (8002cd4 <HAL_RCC_OscConfig+0x93c>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a29      	ldr	r2, [pc, #164]	@ (8002cd4 <HAL_RCC_OscConfig+0x93c>)
 8002c30:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002c34:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c36:	f7fe fc21 	bl	800147c <HAL_GetTick>
 8002c3a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c3c:	e008      	b.n	8002c50 <HAL_RCC_OscConfig+0x8b8>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c3e:	f7fe fc1d 	bl	800147c <HAL_GetTick>
 8002c42:	4602      	mov	r2, r0
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	2b02      	cmp	r3, #2
 8002c4a:	d901      	bls.n	8002c50 <HAL_RCC_OscConfig+0x8b8>
              {
                return HAL_TIMEOUT;
 8002c4c:	2303      	movs	r3, #3
 8002c4e:	e09c      	b.n	8002d8a <HAL_RCC_OscConfig+0x9f2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c50:	4b20      	ldr	r3, [pc, #128]	@ (8002cd4 <HAL_RCC_OscConfig+0x93c>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d1f0      	bne.n	8002c3e <HAL_RCC_OscConfig+0x8a6>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c5c:	4b1d      	ldr	r3, [pc, #116]	@ (8002cd4 <HAL_RCC_OscConfig+0x93c>)
 8002c5e:	68da      	ldr	r2, [r3, #12]
 8002c60:	4b1e      	ldr	r3, [pc, #120]	@ (8002cdc <HAL_RCC_OscConfig+0x944>)
 8002c62:	4013      	ands	r3, r2
 8002c64:	687a      	ldr	r2, [r7, #4]
 8002c66:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002c6c:	3a01      	subs	r2, #1
 8002c6e:	0112      	lsls	r2, r2, #4
 8002c70:	4311      	orrs	r1, r2
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002c76:	0212      	lsls	r2, r2, #8
 8002c78:	4311      	orrs	r1, r2
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002c7e:	0852      	lsrs	r2, r2, #1
 8002c80:	3a01      	subs	r2, #1
 8002c82:	0552      	lsls	r2, r2, #21
 8002c84:	4311      	orrs	r1, r2
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002c8a:	0852      	lsrs	r2, r2, #1
 8002c8c:	3a01      	subs	r2, #1
 8002c8e:	0652      	lsls	r2, r2, #25
 8002c90:	4311      	orrs	r1, r2
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002c96:	0912      	lsrs	r2, r2, #4
 8002c98:	0452      	lsls	r2, r2, #17
 8002c9a:	430a      	orrs	r2, r1
 8002c9c:	490d      	ldr	r1, [pc, #52]	@ (8002cd4 <HAL_RCC_OscConfig+0x93c>)
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002ca2:	4b0c      	ldr	r3, [pc, #48]	@ (8002cd4 <HAL_RCC_OscConfig+0x93c>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a0b      	ldr	r2, [pc, #44]	@ (8002cd4 <HAL_RCC_OscConfig+0x93c>)
 8002ca8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002cac:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002cae:	4b09      	ldr	r3, [pc, #36]	@ (8002cd4 <HAL_RCC_OscConfig+0x93c>)
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	4a08      	ldr	r2, [pc, #32]	@ (8002cd4 <HAL_RCC_OscConfig+0x93c>)
 8002cb4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002cb8:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002cba:	f7fe fbdf 	bl	800147c <HAL_GetTick>
 8002cbe:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cc0:	e00e      	b.n	8002ce0 <HAL_RCC_OscConfig+0x948>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cc2:	f7fe fbdb 	bl	800147c <HAL_GetTick>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	1ad3      	subs	r3, r2, r3
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d907      	bls.n	8002ce0 <HAL_RCC_OscConfig+0x948>
              {
                return HAL_TIMEOUT;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	e05a      	b.n	8002d8a <HAL_RCC_OscConfig+0x9f2>
 8002cd4:	40021000 	.word	0x40021000
 8002cd8:	08007914 	.word	0x08007914
 8002cdc:	f99d808c 	.word	0xf99d808c
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ce0:	4b2c      	ldr	r3, [pc, #176]	@ (8002d94 <HAL_RCC_OscConfig+0x9fc>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d0ea      	beq.n	8002cc2 <HAL_RCC_OscConfig+0x92a>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002cec:	e04c      	b.n	8002d88 <HAL_RCC_OscConfig+0x9f0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e04b      	b.n	8002d8a <HAL_RCC_OscConfig+0x9f2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cf2:	4b28      	ldr	r3, [pc, #160]	@ (8002d94 <HAL_RCC_OscConfig+0x9fc>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d144      	bne.n	8002d88 <HAL_RCC_OscConfig+0x9f0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002cfe:	4b25      	ldr	r3, [pc, #148]	@ (8002d94 <HAL_RCC_OscConfig+0x9fc>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a24      	ldr	r2, [pc, #144]	@ (8002d94 <HAL_RCC_OscConfig+0x9fc>)
 8002d04:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d08:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d0a:	4b22      	ldr	r3, [pc, #136]	@ (8002d94 <HAL_RCC_OscConfig+0x9fc>)
 8002d0c:	68db      	ldr	r3, [r3, #12]
 8002d0e:	4a21      	ldr	r2, [pc, #132]	@ (8002d94 <HAL_RCC_OscConfig+0x9fc>)
 8002d10:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d14:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002d16:	f7fe fbb1 	bl	800147c <HAL_GetTick>
 8002d1a:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d1c:	e008      	b.n	8002d30 <HAL_RCC_OscConfig+0x998>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d1e:	f7fe fbad 	bl	800147c <HAL_GetTick>
 8002d22:	4602      	mov	r2, r0
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	1ad3      	subs	r3, r2, r3
 8002d28:	2b02      	cmp	r3, #2
 8002d2a:	d901      	bls.n	8002d30 <HAL_RCC_OscConfig+0x998>
            {
              return HAL_TIMEOUT;
 8002d2c:	2303      	movs	r3, #3
 8002d2e:	e02c      	b.n	8002d8a <HAL_RCC_OscConfig+0x9f2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d30:	4b18      	ldr	r3, [pc, #96]	@ (8002d94 <HAL_RCC_OscConfig+0x9fc>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d0f0      	beq.n	8002d1e <HAL_RCC_OscConfig+0x986>
 8002d3c:	e024      	b.n	8002d88 <HAL_RCC_OscConfig+0x9f0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d3e:	69bb      	ldr	r3, [r7, #24]
 8002d40:	2b0c      	cmp	r3, #12
 8002d42:	d01f      	beq.n	8002d84 <HAL_RCC_OscConfig+0x9ec>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d44:	4b13      	ldr	r3, [pc, #76]	@ (8002d94 <HAL_RCC_OscConfig+0x9fc>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a12      	ldr	r2, [pc, #72]	@ (8002d94 <HAL_RCC_OscConfig+0x9fc>)
 8002d4a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002d4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d50:	f7fe fb94 	bl	800147c <HAL_GetTick>
 8002d54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d56:	e008      	b.n	8002d6a <HAL_RCC_OscConfig+0x9d2>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d58:	f7fe fb90 	bl	800147c <HAL_GetTick>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	2b02      	cmp	r3, #2
 8002d64:	d901      	bls.n	8002d6a <HAL_RCC_OscConfig+0x9d2>
          {
            return HAL_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
 8002d68:	e00f      	b.n	8002d8a <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d6a:	4b0a      	ldr	r3, [pc, #40]	@ (8002d94 <HAL_RCC_OscConfig+0x9fc>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d1f0      	bne.n	8002d58 <HAL_RCC_OscConfig+0x9c0>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002d76:	4b07      	ldr	r3, [pc, #28]	@ (8002d94 <HAL_RCC_OscConfig+0x9fc>)
 8002d78:	68da      	ldr	r2, [r3, #12]
 8002d7a:	4906      	ldr	r1, [pc, #24]	@ (8002d94 <HAL_RCC_OscConfig+0x9fc>)
 8002d7c:	4b06      	ldr	r3, [pc, #24]	@ (8002d98 <HAL_RCC_OscConfig+0xa00>)
 8002d7e:	4013      	ands	r3, r2
 8002d80:	60cb      	str	r3, [r1, #12]
 8002d82:	e001      	b.n	8002d88 <HAL_RCC_OscConfig+0x9f0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e000      	b.n	8002d8a <HAL_RCC_OscConfig+0x9f2>
      }
    }
  }
  return HAL_OK;
 8002d88:	2300      	movs	r3, #0
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3720      	adds	r7, #32
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	40021000 	.word	0x40021000
 8002d98:	feeefffc 	.word	0xfeeefffc

08002d9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b084      	sub	sp, #16
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d101      	bne.n	8002db0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	e186      	b.n	80030be <HAL_RCC_ClockConfig+0x322>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d003      	beq.n	8002dc0 <HAL_RCC_ClockConfig+0x24>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	2b0f      	cmp	r3, #15
 8002dbe:	d904      	bls.n	8002dca <HAL_RCC_ClockConfig+0x2e>
 8002dc0:	f240 4159 	movw	r1, #1113	@ 0x459
 8002dc4:	4882      	ldr	r0, [pc, #520]	@ (8002fd0 <HAL_RCC_ClockConfig+0x234>)
 8002dc6:	f7fd fdbf 	bl	8000948 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d010      	beq.n	8002df2 <HAL_RCC_ClockConfig+0x56>
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d00d      	beq.n	8002df2 <HAL_RCC_ClockConfig+0x56>
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	d00a      	beq.n	8002df2 <HAL_RCC_ClockConfig+0x56>
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	2b03      	cmp	r3, #3
 8002de0:	d007      	beq.n	8002df2 <HAL_RCC_ClockConfig+0x56>
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	2b04      	cmp	r3, #4
 8002de6:	d004      	beq.n	8002df2 <HAL_RCC_ClockConfig+0x56>
 8002de8:	f240 415a 	movw	r1, #1114	@ 0x45a
 8002dec:	4878      	ldr	r0, [pc, #480]	@ (8002fd0 <HAL_RCC_ClockConfig+0x234>)
 8002dee:	f7fd fdab 	bl	8000948 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002df2:	4b78      	ldr	r3, [pc, #480]	@ (8002fd4 <HAL_RCC_ClockConfig+0x238>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0307 	and.w	r3, r3, #7
 8002dfa:	683a      	ldr	r2, [r7, #0]
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d910      	bls.n	8002e22 <HAL_RCC_ClockConfig+0x86>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e00:	4b74      	ldr	r3, [pc, #464]	@ (8002fd4 <HAL_RCC_ClockConfig+0x238>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f023 0207 	bic.w	r2, r3, #7
 8002e08:	4972      	ldr	r1, [pc, #456]	@ (8002fd4 <HAL_RCC_ClockConfig+0x238>)
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e10:	4b70      	ldr	r3, [pc, #448]	@ (8002fd4 <HAL_RCC_ClockConfig+0x238>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0307 	and.w	r3, r3, #7
 8002e18:	683a      	ldr	r2, [r7, #0]
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d001      	beq.n	8002e22 <HAL_RCC_ClockConfig+0x86>
    {
      return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e14d      	b.n	80030be <HAL_RCC_ClockConfig+0x322>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0302 	and.w	r3, r3, #2
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d039      	beq.n	8002ea2 <HAL_RCC_ClockConfig+0x106>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d024      	beq.n	8002e80 <HAL_RCC_ClockConfig+0xe4>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	2b80      	cmp	r3, #128	@ 0x80
 8002e3c:	d020      	beq.n	8002e80 <HAL_RCC_ClockConfig+0xe4>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	2b90      	cmp	r3, #144	@ 0x90
 8002e44:	d01c      	beq.n	8002e80 <HAL_RCC_ClockConfig+0xe4>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	2ba0      	cmp	r3, #160	@ 0xa0
 8002e4c:	d018      	beq.n	8002e80 <HAL_RCC_ClockConfig+0xe4>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	2bb0      	cmp	r3, #176	@ 0xb0
 8002e54:	d014      	beq.n	8002e80 <HAL_RCC_ClockConfig+0xe4>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	2bc0      	cmp	r3, #192	@ 0xc0
 8002e5c:	d010      	beq.n	8002e80 <HAL_RCC_ClockConfig+0xe4>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	2bd0      	cmp	r3, #208	@ 0xd0
 8002e64:	d00c      	beq.n	8002e80 <HAL_RCC_ClockConfig+0xe4>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	2be0      	cmp	r3, #224	@ 0xe0
 8002e6c:	d008      	beq.n	8002e80 <HAL_RCC_ClockConfig+0xe4>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	2bf0      	cmp	r3, #240	@ 0xf0
 8002e74:	d004      	beq.n	8002e80 <HAL_RCC_ClockConfig+0xe4>
 8002e76:	f240 4172 	movw	r1, #1138	@ 0x472
 8002e7a:	4855      	ldr	r0, [pc, #340]	@ (8002fd0 <HAL_RCC_ClockConfig+0x234>)
 8002e7c:	f7fd fd64 	bl	8000948 <assert_failed>

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	689a      	ldr	r2, [r3, #8]
 8002e84:	4b54      	ldr	r3, [pc, #336]	@ (8002fd8 <HAL_RCC_ClockConfig+0x23c>)
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d908      	bls.n	8002ea2 <HAL_RCC_ClockConfig+0x106>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e90:	4b51      	ldr	r3, [pc, #324]	@ (8002fd8 <HAL_RCC_ClockConfig+0x23c>)
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	494e      	ldr	r1, [pc, #312]	@ (8002fd8 <HAL_RCC_ClockConfig+0x23c>)
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0301 	and.w	r3, r3, #1
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d061      	beq.n	8002f72 <HAL_RCC_ClockConfig+0x1d6>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d010      	beq.n	8002ed8 <HAL_RCC_ClockConfig+0x13c>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d00c      	beq.n	8002ed8 <HAL_RCC_ClockConfig+0x13c>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	2b02      	cmp	r3, #2
 8002ec4:	d008      	beq.n	8002ed8 <HAL_RCC_ClockConfig+0x13c>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	2b03      	cmp	r3, #3
 8002ecc:	d004      	beq.n	8002ed8 <HAL_RCC_ClockConfig+0x13c>
 8002ece:	f240 417d 	movw	r1, #1149	@ 0x47d
 8002ed2:	483f      	ldr	r0, [pc, #252]	@ (8002fd0 <HAL_RCC_ClockConfig+0x234>)
 8002ed4:	f7fd fd38 	bl	8000948 <assert_failed>

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	2b03      	cmp	r3, #3
 8002ede:	d107      	bne.n	8002ef0 <HAL_RCC_ClockConfig+0x154>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ee0:	4b3d      	ldr	r3, [pc, #244]	@ (8002fd8 <HAL_RCC_ClockConfig+0x23c>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d121      	bne.n	8002f30 <HAL_RCC_ClockConfig+0x194>
      {
        return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e0e6      	b.n	80030be <HAL_RCC_ClockConfig+0x322>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	2b02      	cmp	r3, #2
 8002ef6:	d107      	bne.n	8002f08 <HAL_RCC_ClockConfig+0x16c>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ef8:	4b37      	ldr	r3, [pc, #220]	@ (8002fd8 <HAL_RCC_ClockConfig+0x23c>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d115      	bne.n	8002f30 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e0da      	b.n	80030be <HAL_RCC_ClockConfig+0x322>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d107      	bne.n	8002f20 <HAL_RCC_ClockConfig+0x184>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f10:	4b31      	ldr	r3, [pc, #196]	@ (8002fd8 <HAL_RCC_ClockConfig+0x23c>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 0302 	and.w	r3, r3, #2
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d109      	bne.n	8002f30 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e0ce      	b.n	80030be <HAL_RCC_ClockConfig+0x322>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f20:	4b2d      	ldr	r3, [pc, #180]	@ (8002fd8 <HAL_RCC_ClockConfig+0x23c>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d101      	bne.n	8002f30 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e0c6      	b.n	80030be <HAL_RCC_ClockConfig+0x322>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f30:	4b29      	ldr	r3, [pc, #164]	@ (8002fd8 <HAL_RCC_ClockConfig+0x23c>)
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	f023 0203 	bic.w	r2, r3, #3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	4926      	ldr	r1, [pc, #152]	@ (8002fd8 <HAL_RCC_ClockConfig+0x23c>)
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f42:	f7fe fa9b 	bl	800147c <HAL_GetTick>
 8002f46:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f48:	e00a      	b.n	8002f60 <HAL_RCC_ClockConfig+0x1c4>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f4a:	f7fe fa97 	bl	800147c <HAL_GetTick>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	1ad3      	subs	r3, r2, r3
 8002f54:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d901      	bls.n	8002f60 <HAL_RCC_ClockConfig+0x1c4>
      {
        return HAL_TIMEOUT;
 8002f5c:	2303      	movs	r3, #3
 8002f5e:	e0ae      	b.n	80030be <HAL_RCC_ClockConfig+0x322>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f60:	4b1d      	ldr	r3, [pc, #116]	@ (8002fd8 <HAL_RCC_ClockConfig+0x23c>)
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	f003 020c 	and.w	r2, r3, #12
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	d1eb      	bne.n	8002f4a <HAL_RCC_ClockConfig+0x1ae>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 0302 	and.w	r3, r3, #2
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d010      	beq.n	8002fa0 <HAL_RCC_ClockConfig+0x204>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	689a      	ldr	r2, [r3, #8]
 8002f82:	4b15      	ldr	r3, [pc, #84]	@ (8002fd8 <HAL_RCC_ClockConfig+0x23c>)
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d208      	bcs.n	8002fa0 <HAL_RCC_ClockConfig+0x204>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f8e:	4b12      	ldr	r3, [pc, #72]	@ (8002fd8 <HAL_RCC_ClockConfig+0x23c>)
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	490f      	ldr	r1, [pc, #60]	@ (8002fd8 <HAL_RCC_ClockConfig+0x23c>)
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fa0:	4b0c      	ldr	r3, [pc, #48]	@ (8002fd4 <HAL_RCC_ClockConfig+0x238>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0307 	and.w	r3, r3, #7
 8002fa8:	683a      	ldr	r2, [r7, #0]
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d216      	bcs.n	8002fdc <HAL_RCC_ClockConfig+0x240>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fae:	4b09      	ldr	r3, [pc, #36]	@ (8002fd4 <HAL_RCC_ClockConfig+0x238>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f023 0207 	bic.w	r2, r3, #7
 8002fb6:	4907      	ldr	r1, [pc, #28]	@ (8002fd4 <HAL_RCC_ClockConfig+0x238>)
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fbe:	4b05      	ldr	r3, [pc, #20]	@ (8002fd4 <HAL_RCC_ClockConfig+0x238>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0307 	and.w	r3, r3, #7
 8002fc6:	683a      	ldr	r2, [r7, #0]
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d007      	beq.n	8002fdc <HAL_RCC_ClockConfig+0x240>
    {
      return HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e076      	b.n	80030be <HAL_RCC_ClockConfig+0x322>
 8002fd0:	08007914 	.word	0x08007914
 8002fd4:	40022000 	.word	0x40022000
 8002fd8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0304 	and.w	r3, r3, #4
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d025      	beq.n	8003034 <HAL_RCC_ClockConfig+0x298>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d018      	beq.n	8003022 <HAL_RCC_ClockConfig+0x286>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ff8:	d013      	beq.n	8003022 <HAL_RCC_ClockConfig+0x286>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8003002:	d00e      	beq.n	8003022 <HAL_RCC_ClockConfig+0x286>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800300c:	d009      	beq.n	8003022 <HAL_RCC_ClockConfig+0x286>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003016:	d004      	beq.n	8003022 <HAL_RCC_ClockConfig+0x286>
 8003018:	f240 41f5 	movw	r1, #1269	@ 0x4f5
 800301c:	482a      	ldr	r0, [pc, #168]	@ (80030c8 <HAL_RCC_ClockConfig+0x32c>)
 800301e:	f7fd fc93 	bl	8000948 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003022:	4b2a      	ldr	r3, [pc, #168]	@ (80030cc <HAL_RCC_ClockConfig+0x330>)
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	68db      	ldr	r3, [r3, #12]
 800302e:	4927      	ldr	r1, [pc, #156]	@ (80030cc <HAL_RCC_ClockConfig+0x330>)
 8003030:	4313      	orrs	r3, r2
 8003032:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 0308 	and.w	r3, r3, #8
 800303c:	2b00      	cmp	r3, #0
 800303e:	d026      	beq.n	800308e <HAL_RCC_ClockConfig+0x2f2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	691b      	ldr	r3, [r3, #16]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d018      	beq.n	800307a <HAL_RCC_ClockConfig+0x2de>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	691b      	ldr	r3, [r3, #16]
 800304c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003050:	d013      	beq.n	800307a <HAL_RCC_ClockConfig+0x2de>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	691b      	ldr	r3, [r3, #16]
 8003056:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800305a:	d00e      	beq.n	800307a <HAL_RCC_ClockConfig+0x2de>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	691b      	ldr	r3, [r3, #16]
 8003060:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003064:	d009      	beq.n	800307a <HAL_RCC_ClockConfig+0x2de>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	691b      	ldr	r3, [r3, #16]
 800306a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800306e:	d004      	beq.n	800307a <HAL_RCC_ClockConfig+0x2de>
 8003070:	f240 41fc 	movw	r1, #1276	@ 0x4fc
 8003074:	4814      	ldr	r0, [pc, #80]	@ (80030c8 <HAL_RCC_ClockConfig+0x32c>)
 8003076:	f7fd fc67 	bl	8000948 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800307a:	4b14      	ldr	r3, [pc, #80]	@ (80030cc <HAL_RCC_ClockConfig+0x330>)
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	691b      	ldr	r3, [r3, #16]
 8003086:	00db      	lsls	r3, r3, #3
 8003088:	4910      	ldr	r1, [pc, #64]	@ (80030cc <HAL_RCC_ClockConfig+0x330>)
 800308a:	4313      	orrs	r3, r2
 800308c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800308e:	f000 f825 	bl	80030dc <HAL_RCC_GetSysClockFreq>
 8003092:	4602      	mov	r2, r0
 8003094:	4b0d      	ldr	r3, [pc, #52]	@ (80030cc <HAL_RCC_ClockConfig+0x330>)
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	091b      	lsrs	r3, r3, #4
 800309a:	f003 030f 	and.w	r3, r3, #15
 800309e:	490c      	ldr	r1, [pc, #48]	@ (80030d0 <HAL_RCC_ClockConfig+0x334>)
 80030a0:	5ccb      	ldrb	r3, [r1, r3]
 80030a2:	f003 031f 	and.w	r3, r3, #31
 80030a6:	fa22 f303 	lsr.w	r3, r2, r3
 80030aa:	4a0a      	ldr	r2, [pc, #40]	@ (80030d4 <HAL_RCC_ClockConfig+0x338>)
 80030ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80030ae:	4b0a      	ldr	r3, [pc, #40]	@ (80030d8 <HAL_RCC_ClockConfig+0x33c>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4618      	mov	r0, r3
 80030b4:	f7fe f992 	bl	80013dc <HAL_InitTick>
 80030b8:	4603      	mov	r3, r0
 80030ba:	72fb      	strb	r3, [r7, #11]

  return status;
 80030bc:	7afb      	ldrb	r3, [r7, #11]
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3710      	adds	r7, #16
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	08007914 	.word	0x08007914
 80030cc:	40021000 	.word	0x40021000
 80030d0:	08007a70 	.word	0x08007a70
 80030d4:	20000008 	.word	0x20000008
 80030d8:	2000000c 	.word	0x2000000c

080030dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030dc:	b480      	push	{r7}
 80030de:	b089      	sub	sp, #36	@ 0x24
 80030e0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80030e2:	2300      	movs	r3, #0
 80030e4:	61fb      	str	r3, [r7, #28]
 80030e6:	2300      	movs	r3, #0
 80030e8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030ea:	4b3e      	ldr	r3, [pc, #248]	@ (80031e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	f003 030c 	and.w	r3, r3, #12
 80030f2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80030f4:	4b3b      	ldr	r3, [pc, #236]	@ (80031e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	f003 0303 	and.w	r3, r3, #3
 80030fc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d005      	beq.n	8003110 <HAL_RCC_GetSysClockFreq+0x34>
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	2b0c      	cmp	r3, #12
 8003108:	d121      	bne.n	800314e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2b01      	cmp	r3, #1
 800310e:	d11e      	bne.n	800314e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003110:	4b34      	ldr	r3, [pc, #208]	@ (80031e4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 0308 	and.w	r3, r3, #8
 8003118:	2b00      	cmp	r3, #0
 800311a:	d107      	bne.n	800312c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800311c:	4b31      	ldr	r3, [pc, #196]	@ (80031e4 <HAL_RCC_GetSysClockFreq+0x108>)
 800311e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003122:	0a1b      	lsrs	r3, r3, #8
 8003124:	f003 030f 	and.w	r3, r3, #15
 8003128:	61fb      	str	r3, [r7, #28]
 800312a:	e005      	b.n	8003138 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800312c:	4b2d      	ldr	r3, [pc, #180]	@ (80031e4 <HAL_RCC_GetSysClockFreq+0x108>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	091b      	lsrs	r3, r3, #4
 8003132:	f003 030f 	and.w	r3, r3, #15
 8003136:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003138:	4a2b      	ldr	r2, [pc, #172]	@ (80031e8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003140:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d10d      	bne.n	8003164 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800314c:	e00a      	b.n	8003164 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	2b04      	cmp	r3, #4
 8003152:	d102      	bne.n	800315a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003154:	4b25      	ldr	r3, [pc, #148]	@ (80031ec <HAL_RCC_GetSysClockFreq+0x110>)
 8003156:	61bb      	str	r3, [r7, #24]
 8003158:	e004      	b.n	8003164 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	2b08      	cmp	r3, #8
 800315e:	d101      	bne.n	8003164 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003160:	4b23      	ldr	r3, [pc, #140]	@ (80031f0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003162:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	2b0c      	cmp	r3, #12
 8003168:	d134      	bne.n	80031d4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800316a:	4b1e      	ldr	r3, [pc, #120]	@ (80031e4 <HAL_RCC_GetSysClockFreq+0x108>)
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	f003 0303 	and.w	r3, r3, #3
 8003172:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	2b02      	cmp	r3, #2
 8003178:	d003      	beq.n	8003182 <HAL_RCC_GetSysClockFreq+0xa6>
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	2b03      	cmp	r3, #3
 800317e:	d003      	beq.n	8003188 <HAL_RCC_GetSysClockFreq+0xac>
 8003180:	e005      	b.n	800318e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003182:	4b1a      	ldr	r3, [pc, #104]	@ (80031ec <HAL_RCC_GetSysClockFreq+0x110>)
 8003184:	617b      	str	r3, [r7, #20]
      break;
 8003186:	e005      	b.n	8003194 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003188:	4b19      	ldr	r3, [pc, #100]	@ (80031f0 <HAL_RCC_GetSysClockFreq+0x114>)
 800318a:	617b      	str	r3, [r7, #20]
      break;
 800318c:	e002      	b.n	8003194 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	617b      	str	r3, [r7, #20]
      break;
 8003192:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003194:	4b13      	ldr	r3, [pc, #76]	@ (80031e4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	091b      	lsrs	r3, r3, #4
 800319a:	f003 0307 	and.w	r3, r3, #7
 800319e:	3301      	adds	r3, #1
 80031a0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80031a2:	4b10      	ldr	r3, [pc, #64]	@ (80031e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	0a1b      	lsrs	r3, r3, #8
 80031a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80031ac:	697a      	ldr	r2, [r7, #20]
 80031ae:	fb03 f202 	mul.w	r2, r3, r2
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80031b8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80031ba:	4b0a      	ldr	r3, [pc, #40]	@ (80031e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	0e5b      	lsrs	r3, r3, #25
 80031c0:	f003 0303 	and.w	r3, r3, #3
 80031c4:	3301      	adds	r3, #1
 80031c6:	005b      	lsls	r3, r3, #1
 80031c8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80031ca:	697a      	ldr	r2, [r7, #20]
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80031d2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80031d4:	69bb      	ldr	r3, [r7, #24]
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3724      	adds	r7, #36	@ 0x24
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr
 80031e2:	bf00      	nop
 80031e4:	40021000 	.word	0x40021000
 80031e8:	08007a88 	.word	0x08007a88
 80031ec:	00f42400 	.word	0x00f42400
 80031f0:	007a1200 	.word	0x007a1200

080031f4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031f4:	b480      	push	{r7}
 80031f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031f8:	4b03      	ldr	r3, [pc, #12]	@ (8003208 <HAL_RCC_GetHCLKFreq+0x14>)
 80031fa:	681b      	ldr	r3, [r3, #0]
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	46bd      	mov	sp, r7
 8003200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003204:	4770      	bx	lr
 8003206:	bf00      	nop
 8003208:	20000008 	.word	0x20000008

0800320c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003210:	f7ff fff0 	bl	80031f4 <HAL_RCC_GetHCLKFreq>
 8003214:	4602      	mov	r2, r0
 8003216:	4b06      	ldr	r3, [pc, #24]	@ (8003230 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	0a1b      	lsrs	r3, r3, #8
 800321c:	f003 0307 	and.w	r3, r3, #7
 8003220:	4904      	ldr	r1, [pc, #16]	@ (8003234 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003222:	5ccb      	ldrb	r3, [r1, r3]
 8003224:	f003 031f 	and.w	r3, r3, #31
 8003228:	fa22 f303 	lsr.w	r3, r2, r3
}
 800322c:	4618      	mov	r0, r3
 800322e:	bd80      	pop	{r7, pc}
 8003230:	40021000 	.word	0x40021000
 8003234:	08007a80 	.word	0x08007a80

08003238 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800323c:	f7ff ffda 	bl	80031f4 <HAL_RCC_GetHCLKFreq>
 8003240:	4602      	mov	r2, r0
 8003242:	4b06      	ldr	r3, [pc, #24]	@ (800325c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	0adb      	lsrs	r3, r3, #11
 8003248:	f003 0307 	and.w	r3, r3, #7
 800324c:	4904      	ldr	r1, [pc, #16]	@ (8003260 <HAL_RCC_GetPCLK2Freq+0x28>)
 800324e:	5ccb      	ldrb	r3, [r1, r3]
 8003250:	f003 031f 	and.w	r3, r3, #31
 8003254:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003258:	4618      	mov	r0, r3
 800325a:	bd80      	pop	{r7, pc}
 800325c:	40021000 	.word	0x40021000
 8003260:	08007a80 	.word	0x08007a80

08003264 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b086      	sub	sp, #24
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800326c:	2300      	movs	r3, #0
 800326e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003270:	4b2a      	ldr	r3, [pc, #168]	@ (800331c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003272:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003274:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003278:	2b00      	cmp	r3, #0
 800327a:	d003      	beq.n	8003284 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800327c:	f7ff f81c 	bl	80022b8 <HAL_PWREx_GetVoltageRange>
 8003280:	6178      	str	r0, [r7, #20]
 8003282:	e014      	b.n	80032ae <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003284:	4b25      	ldr	r3, [pc, #148]	@ (800331c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003286:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003288:	4a24      	ldr	r2, [pc, #144]	@ (800331c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800328a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800328e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003290:	4b22      	ldr	r3, [pc, #136]	@ (800331c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003292:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003294:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003298:	60fb      	str	r3, [r7, #12]
 800329a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800329c:	f7ff f80c 	bl	80022b8 <HAL_PWREx_GetVoltageRange>
 80032a0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80032a2:	4b1e      	ldr	r3, [pc, #120]	@ (800331c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032a6:	4a1d      	ldr	r2, [pc, #116]	@ (800331c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80032ac:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80032b4:	d10b      	bne.n	80032ce <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2b80      	cmp	r3, #128	@ 0x80
 80032ba:	d919      	bls.n	80032f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2ba0      	cmp	r3, #160	@ 0xa0
 80032c0:	d902      	bls.n	80032c8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80032c2:	2302      	movs	r3, #2
 80032c4:	613b      	str	r3, [r7, #16]
 80032c6:	e013      	b.n	80032f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80032c8:	2301      	movs	r3, #1
 80032ca:	613b      	str	r3, [r7, #16]
 80032cc:	e010      	b.n	80032f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2b80      	cmp	r3, #128	@ 0x80
 80032d2:	d902      	bls.n	80032da <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80032d4:	2303      	movs	r3, #3
 80032d6:	613b      	str	r3, [r7, #16]
 80032d8:	e00a      	b.n	80032f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2b80      	cmp	r3, #128	@ 0x80
 80032de:	d102      	bne.n	80032e6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80032e0:	2302      	movs	r3, #2
 80032e2:	613b      	str	r3, [r7, #16]
 80032e4:	e004      	b.n	80032f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2b70      	cmp	r3, #112	@ 0x70
 80032ea:	d101      	bne.n	80032f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80032ec:	2301      	movs	r3, #1
 80032ee:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80032f0:	4b0b      	ldr	r3, [pc, #44]	@ (8003320 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f023 0207 	bic.w	r2, r3, #7
 80032f8:	4909      	ldr	r1, [pc, #36]	@ (8003320 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003300:	4b07      	ldr	r3, [pc, #28]	@ (8003320 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 0307 	and.w	r3, r3, #7
 8003308:	693a      	ldr	r2, [r7, #16]
 800330a:	429a      	cmp	r2, r3
 800330c:	d001      	beq.n	8003312 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e000      	b.n	8003314 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003312:	2300      	movs	r3, #0
}
 8003314:	4618      	mov	r0, r3
 8003316:	3718      	adds	r7, #24
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}
 800331c:	40021000 	.word	0x40021000
 8003320:	40022000 	.word	0x40022000

08003324 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b086      	sub	sp, #24
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800332c:	2300      	movs	r3, #0
 800332e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003330:	2300      	movs	r3, #0
 8003332:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800333c:	2b00      	cmp	r3, #0
 800333e:	d004      	beq.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003348:	d303      	bcc.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x2e>
 800334a:	21c9      	movs	r1, #201	@ 0xc9
 800334c:	4889      	ldr	r0, [pc, #548]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800334e:	f7fd fafb 	bl	8000948 <assert_failed>

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800335a:	2b00      	cmp	r3, #0
 800335c:	d058      	beq.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003362:	2b00      	cmp	r3, #0
 8003364:	d012      	beq.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x68>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800336a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800336e:	d00d      	beq.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x68>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003374:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003378:	d008      	beq.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x68>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800337e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003382:	d003      	beq.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x68>
 8003384:	21d1      	movs	r1, #209	@ 0xd1
 8003386:	487b      	ldr	r0, [pc, #492]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003388:	f7fd fade 	bl	8000948 <assert_failed>

    switch(PeriphClkInit->Sai1ClockSelection)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003390:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003394:	d02a      	beq.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0xc8>
 8003396:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800339a:	d824      	bhi.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
 800339c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80033a0:	d008      	beq.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80033a2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80033a6:	d81e      	bhi.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d00a      	beq.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 80033ac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80033b0:	d010      	beq.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0xb0>
 80033b2:	e018      	b.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80033b4:	4b70      	ldr	r3, [pc, #448]	@ (8003578 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	4a6f      	ldr	r2, [pc, #444]	@ (8003578 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80033ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033be:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80033c0:	e015      	b.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0xca>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	3304      	adds	r3, #4
 80033c6:	2100      	movs	r1, #0
 80033c8:	4618      	mov	r0, r3
 80033ca:	f000 fc69 	bl	8003ca0 <RCCEx_PLLSAI1_Config>
 80033ce:	4603      	mov	r3, r0
 80033d0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80033d2:	e00c      	b.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0xca>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	3320      	adds	r3, #32
 80033d8:	2100      	movs	r1, #0
 80033da:	4618      	mov	r0, r3
 80033dc:	f000 fde0 	bl	8003fa0 <RCCEx_PLLSAI2_Config>
 80033e0:	4603      	mov	r3, r0
 80033e2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80033e4:	e003      	b.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0xca>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	74fb      	strb	r3, [r7, #19]
      break;
 80033ea:	e000      	b.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0xca>
      break;
 80033ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033ee:	7cfb      	ldrb	r3, [r7, #19]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d10b      	bne.n	800340c <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80033f4:	4b60      	ldr	r3, [pc, #384]	@ (8003578 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80033f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033fa:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003402:	495d      	ldr	r1, [pc, #372]	@ (8003578 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003404:	4313      	orrs	r3, r2
 8003406:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800340a:	e001      	b.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0xec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800340c:	7cfb      	ldrb	r3, [r7, #19]
 800340e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003418:	2b00      	cmp	r3, #0
 800341a:	d059      	beq.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003420:	2b00      	cmp	r3, #0
 8003422:	d013      	beq.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x128>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003428:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800342c:	d00e      	beq.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x128>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003432:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003436:	d009      	beq.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x128>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800343c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003440:	d004      	beq.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x128>
 8003442:	f240 110f 	movw	r1, #271	@ 0x10f
 8003446:	484b      	ldr	r0, [pc, #300]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003448:	f7fd fa7e 	bl	8000948 <assert_failed>

    switch(PeriphClkInit->Sai2ClockSelection)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003450:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003454:	d02a      	beq.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x188>
 8003456:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800345a:	d824      	bhi.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x182>
 800345c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003460:	d008      	beq.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x150>
 8003462:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003466:	d81e      	bhi.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x182>
 8003468:	2b00      	cmp	r3, #0
 800346a:	d00a      	beq.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800346c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003470:	d010      	beq.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x170>
 8003472:	e018      	b.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003474:	4b40      	ldr	r3, [pc, #256]	@ (8003578 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	4a3f      	ldr	r2, [pc, #252]	@ (8003578 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800347a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800347e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003480:	e015      	b.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x18a>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	3304      	adds	r3, #4
 8003486:	2100      	movs	r1, #0
 8003488:	4618      	mov	r0, r3
 800348a:	f000 fc09 	bl	8003ca0 <RCCEx_PLLSAI1_Config>
 800348e:	4603      	mov	r3, r0
 8003490:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003492:	e00c      	b.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x18a>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	3320      	adds	r3, #32
 8003498:	2100      	movs	r1, #0
 800349a:	4618      	mov	r0, r3
 800349c:	f000 fd80 	bl	8003fa0 <RCCEx_PLLSAI2_Config>
 80034a0:	4603      	mov	r3, r0
 80034a2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80034a4:	e003      	b.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x18a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	74fb      	strb	r3, [r7, #19]
      break;
 80034aa:	e000      	b.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x18a>
      break;
 80034ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034ae:	7cfb      	ldrb	r3, [r7, #19]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d10b      	bne.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80034b4:	4b30      	ldr	r3, [pc, #192]	@ (8003578 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80034b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034ba:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80034c2:	492d      	ldr	r1, [pc, #180]	@ (8003578 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80034c4:	4313      	orrs	r3, r2
 80034c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80034ca:	e001      	b.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034cc:	7cfb      	ldrb	r3, [r7, #19]
 80034ce:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034d8:	2b00      	cmp	r3, #0
 80034da:	f000 80c2 	beq.w	8003662 <HAL_RCCEx_PeriphCLKConfig+0x33e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034de:	2300      	movs	r3, #0
 80034e0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d016      	beq.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80034f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80034f6:	d010      	beq.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80034fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003502:	d00a      	beq.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800350a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800350e:	d004      	beq.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8003510:	f44f 71a2 	mov.w	r1, #324	@ 0x144
 8003514:	4817      	ldr	r0, [pc, #92]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003516:	f7fd fa17 	bl	8000948 <assert_failed>

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800351a:	4b17      	ldr	r3, [pc, #92]	@ (8003578 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800351c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800351e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d101      	bne.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x206>
 8003526:	2301      	movs	r3, #1
 8003528:	e000      	b.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x208>
 800352a:	2300      	movs	r3, #0
 800352c:	2b00      	cmp	r3, #0
 800352e:	d00d      	beq.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x228>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003530:	4b11      	ldr	r3, [pc, #68]	@ (8003578 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003532:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003534:	4a10      	ldr	r2, [pc, #64]	@ (8003578 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003536:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800353a:	6593      	str	r3, [r2, #88]	@ 0x58
 800353c:	4b0e      	ldr	r3, [pc, #56]	@ (8003578 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800353e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003540:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003544:	60bb      	str	r3, [r7, #8]
 8003546:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003548:	2301      	movs	r3, #1
 800354a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800354c:	4b0b      	ldr	r3, [pc, #44]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a0a      	ldr	r2, [pc, #40]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003552:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003556:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003558:	f7fd ff90 	bl	800147c <HAL_GetTick>
 800355c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800355e:	e00f      	b.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x25c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003560:	f7fd ff8c 	bl	800147c <HAL_GetTick>
 8003564:	4602      	mov	r2, r0
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	1ad3      	subs	r3, r2, r3
 800356a:	2b02      	cmp	r3, #2
 800356c:	d908      	bls.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x25c>
      {
        ret = HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	74fb      	strb	r3, [r7, #19]
        break;
 8003572:	e00b      	b.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x268>
 8003574:	0800794c 	.word	0x0800794c
 8003578:	40021000 	.word	0x40021000
 800357c:	40007000 	.word	0x40007000
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003580:	4b30      	ldr	r3, [pc, #192]	@ (8003644 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003588:	2b00      	cmp	r3, #0
 800358a:	d0e9      	beq.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x23c>
      }
    }

    if(ret == HAL_OK)
 800358c:	7cfb      	ldrb	r3, [r7, #19]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d15c      	bne.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003592:	4b2d      	ldr	r3, [pc, #180]	@ (8003648 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8003594:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003598:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800359c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d01f      	beq.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80035aa:	697a      	ldr	r2, [r7, #20]
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d019      	beq.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80035b0:	4b25      	ldr	r3, [pc, #148]	@ (8003648 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 80035b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80035ba:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80035bc:	4b22      	ldr	r3, [pc, #136]	@ (8003648 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 80035be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035c2:	4a21      	ldr	r2, [pc, #132]	@ (8003648 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 80035c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80035cc:	4b1e      	ldr	r3, [pc, #120]	@ (8003648 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 80035ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035d2:	4a1d      	ldr	r2, [pc, #116]	@ (8003648 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 80035d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80035dc:	4a1a      	ldr	r2, [pc, #104]	@ (8003648 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	f003 0301 	and.w	r3, r3, #1
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d016      	beq.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035ee:	f7fd ff45 	bl	800147c <HAL_GetTick>
 80035f2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035f4:	e00b      	b.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x2ea>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035f6:	f7fd ff41 	bl	800147c <HAL_GetTick>
 80035fa:	4602      	mov	r2, r0
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	1ad3      	subs	r3, r2, r3
 8003600:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003604:	4293      	cmp	r3, r2
 8003606:	d902      	bls.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x2ea>
          {
            ret = HAL_TIMEOUT;
 8003608:	2303      	movs	r3, #3
 800360a:	74fb      	strb	r3, [r7, #19]
            break;
 800360c:	e006      	b.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800360e:	4b0e      	ldr	r3, [pc, #56]	@ (8003648 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8003610:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003614:	f003 0302 	and.w	r3, r3, #2
 8003618:	2b00      	cmp	r3, #0
 800361a:	d0ec      	beq.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
          }
        }
      }

      if(ret == HAL_OK)
 800361c:	7cfb      	ldrb	r3, [r7, #19]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d10c      	bne.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x318>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003622:	4b09      	ldr	r3, [pc, #36]	@ (8003648 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8003624:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003628:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003632:	4905      	ldr	r1, [pc, #20]	@ (8003648 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8003634:	4313      	orrs	r3, r2
 8003636:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800363a:	e009      	b.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x32c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800363c:	7cfb      	ldrb	r3, [r7, #19]
 800363e:	74bb      	strb	r3, [r7, #18]
 8003640:	e006      	b.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x32c>
 8003642:	bf00      	nop
 8003644:	40007000 	.word	0x40007000
 8003648:	40021000 	.word	0x40021000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800364c:	7cfb      	ldrb	r3, [r7, #19]
 800364e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003650:	7c7b      	ldrb	r3, [r7, #17]
 8003652:	2b01      	cmp	r3, #1
 8003654:	d105      	bne.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x33e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003656:	4b8d      	ldr	r3, [pc, #564]	@ (800388c <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8003658:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800365a:	4a8c      	ldr	r2, [pc, #560]	@ (800388c <HAL_RCCEx_PeriphCLKConfig+0x568>)
 800365c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003660:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 0301 	and.w	r3, r3, #1
 800366a:	2b00      	cmp	r3, #0
 800366c:	d01f      	beq.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003672:	2b00      	cmp	r3, #0
 8003674:	d010      	beq.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800367a:	2b01      	cmp	r3, #1
 800367c:	d00c      	beq.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x374>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003682:	2b03      	cmp	r3, #3
 8003684:	d008      	beq.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800368a:	2b02      	cmp	r3, #2
 800368c:	d004      	beq.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x374>
 800368e:	f240 1199 	movw	r1, #409	@ 0x199
 8003692:	487f      	ldr	r0, [pc, #508]	@ (8003890 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 8003694:	f7fd f958 	bl	8000948 <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003698:	4b7c      	ldr	r3, [pc, #496]	@ (800388c <HAL_RCCEx_PeriphCLKConfig+0x568>)
 800369a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800369e:	f023 0203 	bic.w	r2, r3, #3
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036a6:	4979      	ldr	r1, [pc, #484]	@ (800388c <HAL_RCCEx_PeriphCLKConfig+0x568>)
 80036a8:	4313      	orrs	r3, r2
 80036aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 0302 	and.w	r3, r3, #2
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d01f      	beq.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x3d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d010      	beq.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036c6:	2b04      	cmp	r3, #4
 80036c8:	d00c      	beq.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036ce:	2b0c      	cmp	r3, #12
 80036d0:	d008      	beq.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036d6:	2b08      	cmp	r3, #8
 80036d8:	d004      	beq.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 80036da:	f240 11a3 	movw	r1, #419	@ 0x1a3
 80036de:	486c      	ldr	r0, [pc, #432]	@ (8003890 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 80036e0:	f7fd f932 	bl	8000948 <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80036e4:	4b69      	ldr	r3, [pc, #420]	@ (800388c <HAL_RCCEx_PeriphCLKConfig+0x568>)
 80036e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036ea:	f023 020c 	bic.w	r2, r3, #12
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036f2:	4966      	ldr	r1, [pc, #408]	@ (800388c <HAL_RCCEx_PeriphCLKConfig+0x568>)
 80036f4:	4313      	orrs	r3, r2
 80036f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0304 	and.w	r3, r3, #4
 8003702:	2b00      	cmp	r3, #0
 8003704:	d01f      	beq.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800370a:	2b00      	cmp	r3, #0
 800370c:	d010      	beq.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003712:	2b10      	cmp	r3, #16
 8003714:	d00c      	beq.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800371a:	2b30      	cmp	r3, #48	@ 0x30
 800371c:	d008      	beq.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003722:	2b20      	cmp	r3, #32
 8003724:	d004      	beq.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8003726:	f240 11af 	movw	r1, #431	@ 0x1af
 800372a:	4859      	ldr	r0, [pc, #356]	@ (8003890 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 800372c:	f7fd f90c 	bl	8000948 <assert_failed>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003730:	4b56      	ldr	r3, [pc, #344]	@ (800388c <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8003732:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003736:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800373e:	4953      	ldr	r1, [pc, #332]	@ (800388c <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8003740:	4313      	orrs	r3, r2
 8003742:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0308 	and.w	r3, r3, #8
 800374e:	2b00      	cmp	r3, #0
 8003750:	d01f      	beq.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x46e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003756:	2b00      	cmp	r3, #0
 8003758:	d010      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x458>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800375e:	2b40      	cmp	r3, #64	@ 0x40
 8003760:	d00c      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x458>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003766:	2bc0      	cmp	r3, #192	@ 0xc0
 8003768:	d008      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x458>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800376e:	2b80      	cmp	r3, #128	@ 0x80
 8003770:	d004      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x458>
 8003772:	f240 11bd 	movw	r1, #445	@ 0x1bd
 8003776:	4846      	ldr	r0, [pc, #280]	@ (8003890 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 8003778:	f7fd f8e6 	bl	8000948 <assert_failed>

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800377c:	4b43      	ldr	r3, [pc, #268]	@ (800388c <HAL_RCCEx_PeriphCLKConfig+0x568>)
 800377e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003782:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800378a:	4940      	ldr	r1, [pc, #256]	@ (800388c <HAL_RCCEx_PeriphCLKConfig+0x568>)
 800378c:	4313      	orrs	r3, r2
 800378e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 0310 	and.w	r3, r3, #16
 800379a:	2b00      	cmp	r3, #0
 800379c:	d022      	beq.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x4c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d013      	beq.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80037ae:	d00e      	beq.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037b4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80037b8:	d009      	beq.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80037c2:	d004      	beq.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 80037c4:	f240 11cb 	movw	r1, #459	@ 0x1cb
 80037c8:	4831      	ldr	r0, [pc, #196]	@ (8003890 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 80037ca:	f7fd f8bd 	bl	8000948 <assert_failed>

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80037ce:	4b2f      	ldr	r3, [pc, #188]	@ (800388c <HAL_RCCEx_PeriphCLKConfig+0x568>)
 80037d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037d4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037dc:	492b      	ldr	r1, [pc, #172]	@ (800388c <HAL_RCCEx_PeriphCLKConfig+0x568>)
 80037de:	4313      	orrs	r3, r2
 80037e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0320 	and.w	r3, r3, #32
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d022      	beq.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x512>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d013      	beq.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003800:	d00e      	beq.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003806:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800380a:	d009      	beq.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003810:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003814:	d004      	beq.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
 8003816:	f240 11d7 	movw	r1, #471	@ 0x1d7
 800381a:	481d      	ldr	r0, [pc, #116]	@ (8003890 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 800381c:	f7fd f894 	bl	8000948 <assert_failed>

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003820:	4b1a      	ldr	r3, [pc, #104]	@ (800388c <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8003822:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003826:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800382e:	4917      	ldr	r1, [pc, #92]	@ (800388c <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8003830:	4313      	orrs	r3, r2
 8003832:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800383e:	2b00      	cmp	r3, #0
 8003840:	d028      	beq.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003846:	2b00      	cmp	r3, #0
 8003848:	d013      	beq.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x54e>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800384e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003852:	d00e      	beq.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x54e>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003858:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800385c:	d009      	beq.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x54e>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003862:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003866:	d004      	beq.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x54e>
 8003868:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 800386c:	4808      	ldr	r0, [pc, #32]	@ (8003890 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 800386e:	f7fd f86b 	bl	8000948 <assert_failed>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003872:	4b06      	ldr	r3, [pc, #24]	@ (800388c <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8003874:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003878:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003880:	4902      	ldr	r1, [pc, #8]	@ (800388c <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8003882:	4313      	orrs	r3, r2
 8003884:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003888:	e004      	b.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x570>
 800388a:	bf00      	nop
 800388c:	40021000 	.word	0x40021000
 8003890:	0800794c 	.word	0x0800794c
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800389c:	2b00      	cmp	r3, #0
 800389e:	d022      	beq.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d013      	beq.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038ac:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80038b0:	d00e      	beq.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038b6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80038ba:	d009      	beq.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038c0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80038c4:	d004      	beq.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80038c6:	f240 11e7 	movw	r1, #487	@ 0x1e7
 80038ca:	489e      	ldr	r0, [pc, #632]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 80038cc:	f7fd f83c 	bl	8000948 <assert_failed>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80038d0:	4b9d      	ldr	r3, [pc, #628]	@ (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80038d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038d6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038de:	499a      	ldr	r1, [pc, #616]	@ (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80038e0:	4313      	orrs	r3, r2
 80038e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d01d      	beq.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x60a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d00e      	beq.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003902:	d009      	beq.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003908:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800390c:	d004      	beq.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 800390e:	f240 11ef 	movw	r1, #495	@ 0x1ef
 8003912:	488c      	ldr	r0, [pc, #560]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 8003914:	f7fd f818 	bl	8000948 <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003918:	4b8b      	ldr	r3, [pc, #556]	@ (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 800391a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800391e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003926:	4988      	ldr	r1, [pc, #544]	@ (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8003928:	4313      	orrs	r3, r2
 800392a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003936:	2b00      	cmp	r3, #0
 8003938:	d01d      	beq.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x652>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800393e:	2b00      	cmp	r3, #0
 8003940:	d00e      	beq.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x63c>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003946:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800394a:	d009      	beq.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x63c>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003950:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003954:	d004      	beq.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x63c>
 8003956:	f240 11fb 	movw	r1, #507	@ 0x1fb
 800395a:	487a      	ldr	r0, [pc, #488]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 800395c:	f7fc fff4 	bl	8000948 <assert_failed>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003960:	4b79      	ldr	r3, [pc, #484]	@ (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8003962:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003966:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800396e:	4976      	ldr	r1, [pc, #472]	@ (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8003970:	4313      	orrs	r3, r2
 8003972:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800397e:	2b00      	cmp	r3, #0
 8003980:	d01d      	beq.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003986:	2b00      	cmp	r3, #0
 8003988:	d00e      	beq.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x684>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800398e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003992:	d009      	beq.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x684>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003998:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800399c:	d004      	beq.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x684>
 800399e:	f240 2107 	movw	r1, #519	@ 0x207
 80039a2:	4868      	ldr	r0, [pc, #416]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 80039a4:	f7fc ffd0 	bl	8000948 <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80039a8:	4b67      	ldr	r3, [pc, #412]	@ (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80039aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039ae:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039b6:	4964      	ldr	r1, [pc, #400]	@ (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80039b8:	4313      	orrs	r3, r2
 80039ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d040      	beq.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d013      	beq.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80039d6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80039da:	d00e      	beq.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80039e0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80039e4:	d009      	beq.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80039ea:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80039ee:	d004      	beq.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 80039f0:	f44f 7108 	mov.w	r1, #544	@ 0x220
 80039f4:	4853      	ldr	r0, [pc, #332]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 80039f6:	f7fc ffa7 	bl	8000948 <assert_failed>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80039fa:	4b53      	ldr	r3, [pc, #332]	@ (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80039fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a00:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003a08:	494f      	ldr	r1, [pc, #316]	@ (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003a14:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003a18:	d106      	bne.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x704>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a1a:	4b4b      	ldr	r3, [pc, #300]	@ (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8003a1c:	68db      	ldr	r3, [r3, #12]
 8003a1e:	4a4a      	ldr	r2, [pc, #296]	@ (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8003a20:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003a24:	60d3      	str	r3, [r2, #12]
 8003a26:	e011      	b.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003a2c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003a30:	d10c      	bne.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x728>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	3304      	adds	r3, #4
 8003a36:	2101      	movs	r1, #1
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f000 f931 	bl	8003ca0 <RCCEx_PLLSAI1_Config>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003a42:	7cfb      	ldrb	r3, [r7, #19]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d001      	beq.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x728>
        {
          /* set overall return value */
          status = ret;
 8003a48:	7cfb      	ldrb	r3, [r7, #19]
 8003a4a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d040      	beq.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x7b6>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d013      	beq.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x764>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a64:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003a68:	d00e      	beq.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x764>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a6e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003a72:	d009      	beq.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x764>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a78:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8003a7c:	d004      	beq.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x764>
 8003a7e:	f240 2141 	movw	r1, #577	@ 0x241
 8003a82:	4830      	ldr	r0, [pc, #192]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 8003a84:	f7fc ff60 	bl	8000948 <assert_failed>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003a88:	4b2f      	ldr	r3, [pc, #188]	@ (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8003a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a8e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a96:	492c      	ldr	r1, [pc, #176]	@ (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aa2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003aa6:	d106      	bne.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x792>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003aa8:	4b27      	ldr	r3, [pc, #156]	@ (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	4a26      	ldr	r2, [pc, #152]	@ (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8003aae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003ab2:	60d3      	str	r3, [r2, #12]
 8003ab4:	e011      	b.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x7b6>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aba:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003abe:	d10c      	bne.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x7b6>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	3304      	adds	r3, #4
 8003ac4:	2101      	movs	r1, #1
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f000 f8ea 	bl	8003ca0 <RCCEx_PLLSAI1_Config>
 8003acc:	4603      	mov	r3, r0
 8003ace:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ad0:	7cfb      	ldrb	r3, [r7, #19]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d001      	beq.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x7b6>
      {
        /* set overall return value */
        status = ret;
 8003ad6:	7cfb      	ldrb	r3, [r7, #19]
 8003ad8:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d044      	beq.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d013      	beq.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003af2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003af6:	d00e      	beq.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003afc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003b00:	d009      	beq.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b06:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8003b0a:	d004      	beq.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
 8003b0c:	f240 2166 	movw	r1, #614	@ 0x266
 8003b10:	480c      	ldr	r0, [pc, #48]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 8003b12:	f7fc ff19 	bl	8000948 <assert_failed>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003b16:	4b0c      	ldr	r3, [pc, #48]	@ (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8003b18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b1c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b24:	4908      	ldr	r1, [pc, #32]	@ (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8003b26:	4313      	orrs	r3, r2
 8003b28:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b30:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003b34:	d10a      	bne.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x828>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b36:	4b04      	ldr	r3, [pc, #16]	@ (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8003b38:	68db      	ldr	r3, [r3, #12]
 8003b3a:	4a03      	ldr	r2, [pc, #12]	@ (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8003b3c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003b40:	60d3      	str	r3, [r2, #12]
 8003b42:	e015      	b.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x84c>
 8003b44:	0800794c 	.word	0x0800794c
 8003b48:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b50:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003b54:	d10c      	bne.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x84c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	3304      	adds	r3, #4
 8003b5a:	2101      	movs	r1, #1
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f000 f89f 	bl	8003ca0 <RCCEx_PLLSAI1_Config>
 8003b62:	4603      	mov	r3, r0
 8003b64:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b66:	7cfb      	ldrb	r3, [r7, #19]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d001      	beq.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x84c>
      {
        /* set overall return value */
        status = ret;
 8003b6c:	7cfb      	ldrb	r3, [r7, #19]
 8003b6e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d047      	beq.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x8e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d013      	beq.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x888>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003b88:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003b8c:	d00e      	beq.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x888>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003b92:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b96:	d009      	beq.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x888>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003b9c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003ba0:	d004      	beq.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x888>
 8003ba2:	f240 2186 	movw	r1, #646	@ 0x286
 8003ba6:	483c      	ldr	r0, [pc, #240]	@ (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x974>)
 8003ba8:	f7fc fece 	bl	8000948 <assert_failed>

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003bac:	4b3b      	ldr	r3, [pc, #236]	@ (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x978>)
 8003bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bb2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003bba:	4938      	ldr	r1, [pc, #224]	@ (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x978>)
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003bc6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003bca:	d10d      	bne.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	3304      	adds	r3, #4
 8003bd0:	2102      	movs	r1, #2
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f000 f864 	bl	8003ca0 <RCCEx_PLLSAI1_Config>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003bdc:	7cfb      	ldrb	r3, [r7, #19]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d014      	beq.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x8e8>
      {
        /* set overall return value */
        status = ret;
 8003be2:	7cfb      	ldrb	r3, [r7, #19]
 8003be4:	74bb      	strb	r3, [r7, #18]
 8003be6:	e011      	b.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003bec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003bf0:	d10c      	bne.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	3320      	adds	r3, #32
 8003bf6:	2102      	movs	r1, #2
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f000 f9d1 	bl	8003fa0 <RCCEx_PLLSAI2_Config>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c02:	7cfb      	ldrb	r3, [r7, #19]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d001      	beq.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x8e8>
      {
        /* set overall return value */
        status = ret;
 8003c08:	7cfb      	ldrb	r3, [r7, #19]
 8003c0a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d018      	beq.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x926>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d009      	beq.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x910>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c28:	d004      	beq.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x910>
 8003c2a:	f240 21b6 	movw	r1, #694	@ 0x2b6
 8003c2e:	481a      	ldr	r0, [pc, #104]	@ (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x974>)
 8003c30:	f7fc fe8a 	bl	8000948 <assert_failed>

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003c34:	4b19      	ldr	r3, [pc, #100]	@ (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x978>)
 8003c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c3a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c42:	4916      	ldr	r1, [pc, #88]	@ (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x978>)
 8003c44:	4313      	orrs	r3, r2
 8003c46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d01b      	beq.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x96a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d00a      	beq.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x952>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003c66:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003c6a:	d004      	beq.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x952>
 8003c6c:	f44f 7131 	mov.w	r1, #708	@ 0x2c4
 8003c70:	4809      	ldr	r0, [pc, #36]	@ (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x974>)
 8003c72:	f7fc fe69 	bl	8000948 <assert_failed>

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003c76:	4b09      	ldr	r3, [pc, #36]	@ (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x978>)
 8003c78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c7c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003c86:	4905      	ldr	r1, [pc, #20]	@ (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x978>)
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003c8e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	3718      	adds	r7, #24
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}
 8003c98:	0800794c 	.word	0x0800794c
 8003c9c:	40021000 	.word	0x40021000

08003ca0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b084      	sub	sp, #16
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003caa:	2300      	movs	r3, #0
 8003cac:	73fb      	strb	r3, [r7, #15]

  /* check for PLLSAI1 Parameters used to output PLLSAI1CLK */
  /* P, Q and R dividers are verified in each specific divider case below */
  assert_param(IS_RCC_PLLSAI1SOURCE(PllSai1->PLLSAI1Source));
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d010      	beq.n	8003cd8 <RCCEx_PLLSAI1_Config+0x38>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d00c      	beq.n	8003cd8 <RCCEx_PLLSAI1_Config+0x38>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	2b02      	cmp	r3, #2
 8003cc4:	d008      	beq.n	8003cd8 <RCCEx_PLLSAI1_Config+0x38>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	2b03      	cmp	r3, #3
 8003ccc:	d004      	beq.n	8003cd8 <RCCEx_PLLSAI1_Config+0x38>
 8003cce:	f640 3162 	movw	r1, #2914	@ 0xb62
 8003cd2:	4887      	ldr	r0, [pc, #540]	@ (8003ef0 <RCCEx_PLLSAI1_Config+0x250>)
 8003cd4:	f7fc fe38 	bl	8000948 <assert_failed>
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d003      	beq.n	8003ce8 <RCCEx_PLLSAI1_Config+0x48>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	2b08      	cmp	r3, #8
 8003ce6:	d904      	bls.n	8003cf2 <RCCEx_PLLSAI1_Config+0x52>
 8003ce8:	f640 3163 	movw	r1, #2915	@ 0xb63
 8003cec:	4880      	ldr	r0, [pc, #512]	@ (8003ef0 <RCCEx_PLLSAI1_Config+0x250>)
 8003cee:	f7fc fe2b 	bl	8000948 <assert_failed>
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	2b07      	cmp	r3, #7
 8003cf8:	d903      	bls.n	8003d02 <RCCEx_PLLSAI1_Config+0x62>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	2b56      	cmp	r3, #86	@ 0x56
 8003d00:	d904      	bls.n	8003d0c <RCCEx_PLLSAI1_Config+0x6c>
 8003d02:	f640 3164 	movw	r1, #2916	@ 0xb64
 8003d06:	487a      	ldr	r0, [pc, #488]	@ (8003ef0 <RCCEx_PLLSAI1_Config+0x250>)
 8003d08:	f7fc fe1e 	bl	8000948 <assert_failed>
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	699b      	ldr	r3, [r3, #24]
 8003d10:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d10b      	bne.n	8003d30 <RCCEx_PLLSAI1_Config+0x90>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	699b      	ldr	r3, [r3, #24]
 8003d1c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d105      	bne.n	8003d30 <RCCEx_PLLSAI1_Config+0x90>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	699b      	ldr	r3, [r3, #24]
 8003d28:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d007      	beq.n	8003d40 <RCCEx_PLLSAI1_Config+0xa0>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	699b      	ldr	r3, [r3, #24]
 8003d34:	f023 7388 	bic.w	r3, r3, #17825792	@ 0x1100000
 8003d38:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d004      	beq.n	8003d4a <RCCEx_PLLSAI1_Config+0xaa>
 8003d40:	f640 3165 	movw	r1, #2917	@ 0xb65
 8003d44:	486a      	ldr	r0, [pc, #424]	@ (8003ef0 <RCCEx_PLLSAI1_Config+0x250>)
 8003d46:	f7fc fdff 	bl	8000948 <assert_failed>

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003d4a:	4b6a      	ldr	r3, [pc, #424]	@ (8003ef4 <RCCEx_PLLSAI1_Config+0x254>)
 8003d4c:	68db      	ldr	r3, [r3, #12]
 8003d4e:	f003 0303 	and.w	r3, r3, #3
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d018      	beq.n	8003d88 <RCCEx_PLLSAI1_Config+0xe8>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003d56:	4b67      	ldr	r3, [pc, #412]	@ (8003ef4 <RCCEx_PLLSAI1_Config+0x254>)
 8003d58:	68db      	ldr	r3, [r3, #12]
 8003d5a:	f003 0203 	and.w	r2, r3, #3
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d10d      	bne.n	8003d82 <RCCEx_PLLSAI1_Config+0xe2>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
       ||
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d009      	beq.n	8003d82 <RCCEx_PLLSAI1_Config+0xe2>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003d6e:	4b61      	ldr	r3, [pc, #388]	@ (8003ef4 <RCCEx_PLLSAI1_Config+0x254>)
 8003d70:	68db      	ldr	r3, [r3, #12]
 8003d72:	091b      	lsrs	r3, r3, #4
 8003d74:	f003 0307 	and.w	r3, r3, #7
 8003d78:	1c5a      	adds	r2, r3, #1
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	685b      	ldr	r3, [r3, #4]
       ||
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d047      	beq.n	8003e12 <RCCEx_PLLSAI1_Config+0x172>
#endif
      )
    {
      status = HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	73fb      	strb	r3, [r7, #15]
 8003d86:	e044      	b.n	8003e12 <RCCEx_PLLSAI1_Config+0x172>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	2b03      	cmp	r3, #3
 8003d8e:	d018      	beq.n	8003dc2 <RCCEx_PLLSAI1_Config+0x122>
 8003d90:	2b03      	cmp	r3, #3
 8003d92:	d825      	bhi.n	8003de0 <RCCEx_PLLSAI1_Config+0x140>
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d002      	beq.n	8003d9e <RCCEx_PLLSAI1_Config+0xfe>
 8003d98:	2b02      	cmp	r3, #2
 8003d9a:	d009      	beq.n	8003db0 <RCCEx_PLLSAI1_Config+0x110>
 8003d9c:	e020      	b.n	8003de0 <RCCEx_PLLSAI1_Config+0x140>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003d9e:	4b55      	ldr	r3, [pc, #340]	@ (8003ef4 <RCCEx_PLLSAI1_Config+0x254>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 0302 	and.w	r3, r3, #2
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d11d      	bne.n	8003de6 <RCCEx_PLLSAI1_Config+0x146>
      {
        status = HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003dae:	e01a      	b.n	8003de6 <RCCEx_PLLSAI1_Config+0x146>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003db0:	4b50      	ldr	r3, [pc, #320]	@ (8003ef4 <RCCEx_PLLSAI1_Config+0x254>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d116      	bne.n	8003dea <RCCEx_PLLSAI1_Config+0x14a>
      {
        status = HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003dc0:	e013      	b.n	8003dea <RCCEx_PLLSAI1_Config+0x14a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003dc2:	4b4c      	ldr	r3, [pc, #304]	@ (8003ef4 <RCCEx_PLLSAI1_Config+0x254>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d10f      	bne.n	8003dee <RCCEx_PLLSAI1_Config+0x14e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003dce:	4b49      	ldr	r3, [pc, #292]	@ (8003ef4 <RCCEx_PLLSAI1_Config+0x254>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d109      	bne.n	8003dee <RCCEx_PLLSAI1_Config+0x14e>
        {
          status = HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003dde:	e006      	b.n	8003dee <RCCEx_PLLSAI1_Config+0x14e>
    default:
      status = HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	73fb      	strb	r3, [r7, #15]
      break;
 8003de4:	e004      	b.n	8003df0 <RCCEx_PLLSAI1_Config+0x150>
      break;
 8003de6:	bf00      	nop
 8003de8:	e002      	b.n	8003df0 <RCCEx_PLLSAI1_Config+0x150>
      break;
 8003dea:	bf00      	nop
 8003dec:	e000      	b.n	8003df0 <RCCEx_PLLSAI1_Config+0x150>
      break;
 8003dee:	bf00      	nop
    }

    if(status == HAL_OK)
 8003df0:	7bfb      	ldrb	r3, [r7, #15]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d10d      	bne.n	8003e12 <RCCEx_PLLSAI1_Config+0x172>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003df6:	4b3f      	ldr	r3, [pc, #252]	@ (8003ef4 <RCCEx_PLLSAI1_Config+0x254>)
 8003df8:	68db      	ldr	r3, [r3, #12]
 8003dfa:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6819      	ldr	r1, [r3, #0]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	3b01      	subs	r3, #1
 8003e08:	011b      	lsls	r3, r3, #4
 8003e0a:	430b      	orrs	r3, r1
 8003e0c:	4939      	ldr	r1, [pc, #228]	@ (8003ef4 <RCCEx_PLLSAI1_Config+0x254>)
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003e12:	7bfb      	ldrb	r3, [r7, #15]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	f040 80ba 	bne.w	8003f8e <RCCEx_PLLSAI1_Config+0x2ee>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003e1a:	4b36      	ldr	r3, [pc, #216]	@ (8003ef4 <RCCEx_PLLSAI1_Config+0x254>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a35      	ldr	r2, [pc, #212]	@ (8003ef4 <RCCEx_PLLSAI1_Config+0x254>)
 8003e20:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003e24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e26:	f7fd fb29 	bl	800147c <HAL_GetTick>
 8003e2a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003e2c:	e009      	b.n	8003e42 <RCCEx_PLLSAI1_Config+0x1a2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003e2e:	f7fd fb25 	bl	800147c <HAL_GetTick>
 8003e32:	4602      	mov	r2, r0
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	1ad3      	subs	r3, r2, r3
 8003e38:	2b02      	cmp	r3, #2
 8003e3a:	d902      	bls.n	8003e42 <RCCEx_PLLSAI1_Config+0x1a2>
      {
        status = HAL_TIMEOUT;
 8003e3c:	2303      	movs	r3, #3
 8003e3e:	73fb      	strb	r3, [r7, #15]
        break;
 8003e40:	e005      	b.n	8003e4e <RCCEx_PLLSAI1_Config+0x1ae>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003e42:	4b2c      	ldr	r3, [pc, #176]	@ (8003ef4 <RCCEx_PLLSAI1_Config+0x254>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d1ef      	bne.n	8003e2e <RCCEx_PLLSAI1_Config+0x18e>
      }
    }

    if(status == HAL_OK)
 8003e4e:	7bfb      	ldrb	r3, [r7, #15]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	f040 809c 	bne.w	8003f8e <RCCEx_PLLSAI1_Config+0x2ee>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d11e      	bne.n	8003e9a <RCCEx_PLLSAI1_Config+0x1fa>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	68db      	ldr	r3, [r3, #12]
 8003e60:	2b07      	cmp	r3, #7
 8003e62:	d008      	beq.n	8003e76 <RCCEx_PLLSAI1_Config+0x1d6>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	68db      	ldr	r3, [r3, #12]
 8003e68:	2b11      	cmp	r3, #17
 8003e6a:	d004      	beq.n	8003e76 <RCCEx_PLLSAI1_Config+0x1d6>
 8003e6c:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 8003e70:	481f      	ldr	r0, [pc, #124]	@ (8003ef0 <RCCEx_PLLSAI1_Config+0x250>)
 8003e72:	f7fc fd69 	bl	8000948 <assert_failed>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e76:	4b1f      	ldr	r3, [pc, #124]	@ (8003ef4 <RCCEx_PLLSAI1_Config+0x254>)
 8003e78:	691b      	ldr	r3, [r3, #16]
 8003e7a:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003e7e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	6892      	ldr	r2, [r2, #8]
 8003e86:	0211      	lsls	r1, r2, #8
 8003e88:	687a      	ldr	r2, [r7, #4]
 8003e8a:	68d2      	ldr	r2, [r2, #12]
 8003e8c:	0912      	lsrs	r2, r2, #4
 8003e8e:	0452      	lsls	r2, r2, #17
 8003e90:	430a      	orrs	r2, r1
 8003e92:	4918      	ldr	r1, [pc, #96]	@ (8003ef4 <RCCEx_PLLSAI1_Config+0x254>)
 8003e94:	4313      	orrs	r3, r2
 8003e96:	610b      	str	r3, [r1, #16]
 8003e98:	e055      	b.n	8003f46 <RCCEx_PLLSAI1_Config+0x2a6>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d12b      	bne.n	8003ef8 <RCCEx_PLLSAI1_Config+0x258>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	691b      	ldr	r3, [r3, #16]
 8003ea4:	2b02      	cmp	r3, #2
 8003ea6:	d010      	beq.n	8003eca <RCCEx_PLLSAI1_Config+0x22a>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	691b      	ldr	r3, [r3, #16]
 8003eac:	2b04      	cmp	r3, #4
 8003eae:	d00c      	beq.n	8003eca <RCCEx_PLLSAI1_Config+0x22a>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	691b      	ldr	r3, [r3, #16]
 8003eb4:	2b06      	cmp	r3, #6
 8003eb6:	d008      	beq.n	8003eca <RCCEx_PLLSAI1_Config+0x22a>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	691b      	ldr	r3, [r3, #16]
 8003ebc:	2b08      	cmp	r3, #8
 8003ebe:	d004      	beq.n	8003eca <RCCEx_PLLSAI1_Config+0x22a>
 8003ec0:	f640 31dc 	movw	r1, #3036	@ 0xbdc
 8003ec4:	480a      	ldr	r0, [pc, #40]	@ (8003ef0 <RCCEx_PLLSAI1_Config+0x250>)
 8003ec6:	f7fc fd3f 	bl	8000948 <assert_failed>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003eca:	4b0a      	ldr	r3, [pc, #40]	@ (8003ef4 <RCCEx_PLLSAI1_Config+0x254>)
 8003ecc:	691b      	ldr	r3, [r3, #16]
 8003ece:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003ed2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003ed6:	687a      	ldr	r2, [r7, #4]
 8003ed8:	6892      	ldr	r2, [r2, #8]
 8003eda:	0211      	lsls	r1, r2, #8
 8003edc:	687a      	ldr	r2, [r7, #4]
 8003ede:	6912      	ldr	r2, [r2, #16]
 8003ee0:	0852      	lsrs	r2, r2, #1
 8003ee2:	3a01      	subs	r2, #1
 8003ee4:	0552      	lsls	r2, r2, #21
 8003ee6:	430a      	orrs	r2, r1
 8003ee8:	4902      	ldr	r1, [pc, #8]	@ (8003ef4 <RCCEx_PLLSAI1_Config+0x254>)
 8003eea:	4313      	orrs	r3, r2
 8003eec:	610b      	str	r3, [r1, #16]
 8003eee:	e02a      	b.n	8003f46 <RCCEx_PLLSAI1_Config+0x2a6>
 8003ef0:	0800794c 	.word	0x0800794c
 8003ef4:	40021000 	.word	0x40021000
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	695b      	ldr	r3, [r3, #20]
 8003efc:	2b02      	cmp	r3, #2
 8003efe:	d010      	beq.n	8003f22 <RCCEx_PLLSAI1_Config+0x282>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	695b      	ldr	r3, [r3, #20]
 8003f04:	2b04      	cmp	r3, #4
 8003f06:	d00c      	beq.n	8003f22 <RCCEx_PLLSAI1_Config+0x282>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	695b      	ldr	r3, [r3, #20]
 8003f0c:	2b06      	cmp	r3, #6
 8003f0e:	d008      	beq.n	8003f22 <RCCEx_PLLSAI1_Config+0x282>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	695b      	ldr	r3, [r3, #20]
 8003f14:	2b08      	cmp	r3, #8
 8003f16:	d004      	beq.n	8003f22 <RCCEx_PLLSAI1_Config+0x282>
 8003f18:	f640 31ee 	movw	r1, #3054	@ 0xbee
 8003f1c:	481e      	ldr	r0, [pc, #120]	@ (8003f98 <RCCEx_PLLSAI1_Config+0x2f8>)
 8003f1e:	f7fc fd13 	bl	8000948 <assert_failed>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003f22:	4b1e      	ldr	r3, [pc, #120]	@ (8003f9c <RCCEx_PLLSAI1_Config+0x2fc>)
 8003f24:	691b      	ldr	r3, [r3, #16]
 8003f26:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003f2a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003f2e:	687a      	ldr	r2, [r7, #4]
 8003f30:	6892      	ldr	r2, [r2, #8]
 8003f32:	0211      	lsls	r1, r2, #8
 8003f34:	687a      	ldr	r2, [r7, #4]
 8003f36:	6952      	ldr	r2, [r2, #20]
 8003f38:	0852      	lsrs	r2, r2, #1
 8003f3a:	3a01      	subs	r2, #1
 8003f3c:	0652      	lsls	r2, r2, #25
 8003f3e:	430a      	orrs	r2, r1
 8003f40:	4916      	ldr	r1, [pc, #88]	@ (8003f9c <RCCEx_PLLSAI1_Config+0x2fc>)
 8003f42:	4313      	orrs	r3, r2
 8003f44:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003f46:	4b15      	ldr	r3, [pc, #84]	@ (8003f9c <RCCEx_PLLSAI1_Config+0x2fc>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a14      	ldr	r2, [pc, #80]	@ (8003f9c <RCCEx_PLLSAI1_Config+0x2fc>)
 8003f4c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003f50:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f52:	f7fd fa93 	bl	800147c <HAL_GetTick>
 8003f56:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003f58:	e009      	b.n	8003f6e <RCCEx_PLLSAI1_Config+0x2ce>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003f5a:	f7fd fa8f 	bl	800147c <HAL_GetTick>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	1ad3      	subs	r3, r2, r3
 8003f64:	2b02      	cmp	r3, #2
 8003f66:	d902      	bls.n	8003f6e <RCCEx_PLLSAI1_Config+0x2ce>
        {
          status = HAL_TIMEOUT;
 8003f68:	2303      	movs	r3, #3
 8003f6a:	73fb      	strb	r3, [r7, #15]
          break;
 8003f6c:	e005      	b.n	8003f7a <RCCEx_PLLSAI1_Config+0x2da>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003f6e:	4b0b      	ldr	r3, [pc, #44]	@ (8003f9c <RCCEx_PLLSAI1_Config+0x2fc>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d0ef      	beq.n	8003f5a <RCCEx_PLLSAI1_Config+0x2ba>
        }
      }

      if(status == HAL_OK)
 8003f7a:	7bfb      	ldrb	r3, [r7, #15]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d106      	bne.n	8003f8e <RCCEx_PLLSAI1_Config+0x2ee>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003f80:	4b06      	ldr	r3, [pc, #24]	@ (8003f9c <RCCEx_PLLSAI1_Config+0x2fc>)
 8003f82:	691a      	ldr	r2, [r3, #16]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	699b      	ldr	r3, [r3, #24]
 8003f88:	4904      	ldr	r1, [pc, #16]	@ (8003f9c <RCCEx_PLLSAI1_Config+0x2fc>)
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003f8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	3710      	adds	r7, #16
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}
 8003f98:	0800794c 	.word	0x0800794c
 8003f9c:	40021000 	.word	0x40021000

08003fa0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b084      	sub	sp, #16
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003faa:	2300      	movs	r3, #0
 8003fac:	73fb      	strb	r3, [r7, #15]

  /* check for PLLSAI2 Parameters used to output PLLSAI2CLK */
  /* P, Q and R dividers are verified in each specific divider case below */
  assert_param(IS_RCC_PLLSAI2SOURCE(PllSai2->PLLSAI2Source));
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d010      	beq.n	8003fd8 <RCCEx_PLLSAI2_Config+0x38>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	d00c      	beq.n	8003fd8 <RCCEx_PLLSAI2_Config+0x38>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	2b02      	cmp	r3, #2
 8003fc4:	d008      	beq.n	8003fd8 <RCCEx_PLLSAI2_Config+0x38>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	2b03      	cmp	r3, #3
 8003fcc:	d004      	beq.n	8003fd8 <RCCEx_PLLSAI2_Config+0x38>
 8003fce:	f640 412f 	movw	r1, #3119	@ 0xc2f
 8003fd2:	4896      	ldr	r0, [pc, #600]	@ (800422c <RCCEx_PLLSAI2_Config+0x28c>)
 8003fd4:	f7fc fcb8 	bl	8000948 <assert_failed>
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d003      	beq.n	8003fe8 <RCCEx_PLLSAI2_Config+0x48>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	2b08      	cmp	r3, #8
 8003fe6:	d904      	bls.n	8003ff2 <RCCEx_PLLSAI2_Config+0x52>
 8003fe8:	f44f 6143 	mov.w	r1, #3120	@ 0xc30
 8003fec:	488f      	ldr	r0, [pc, #572]	@ (800422c <RCCEx_PLLSAI2_Config+0x28c>)
 8003fee:	f7fc fcab 	bl	8000948 <assert_failed>
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	2b07      	cmp	r3, #7
 8003ff8:	d903      	bls.n	8004002 <RCCEx_PLLSAI2_Config+0x62>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	2b56      	cmp	r3, #86	@ 0x56
 8004000:	d904      	bls.n	800400c <RCCEx_PLLSAI2_Config+0x6c>
 8004002:	f640 4131 	movw	r1, #3121	@ 0xc31
 8004006:	4889      	ldr	r0, [pc, #548]	@ (800422c <RCCEx_PLLSAI2_Config+0x28c>)
 8004008:	f7fc fc9e 	bl	8000948 <assert_failed>
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	695b      	ldr	r3, [r3, #20]
 8004010:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004014:	2b00      	cmp	r3, #0
 8004016:	d105      	bne.n	8004024 <RCCEx_PLLSAI2_Config+0x84>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	695b      	ldr	r3, [r3, #20]
 800401c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004020:	2b00      	cmp	r3, #0
 8004022:	d007      	beq.n	8004034 <RCCEx_PLLSAI2_Config+0x94>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	695b      	ldr	r3, [r3, #20]
 8004028:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800402c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004030:	2b00      	cmp	r3, #0
 8004032:	d004      	beq.n	800403e <RCCEx_PLLSAI2_Config+0x9e>
 8004034:	f640 4132 	movw	r1, #3122	@ 0xc32
 8004038:	487c      	ldr	r0, [pc, #496]	@ (800422c <RCCEx_PLLSAI2_Config+0x28c>)
 800403a:	f7fc fc85 	bl	8000948 <assert_failed>

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800403e:	4b7c      	ldr	r3, [pc, #496]	@ (8004230 <RCCEx_PLLSAI2_Config+0x290>)
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	f003 0303 	and.w	r3, r3, #3
 8004046:	2b00      	cmp	r3, #0
 8004048:	d018      	beq.n	800407c <RCCEx_PLLSAI2_Config+0xdc>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800404a:	4b79      	ldr	r3, [pc, #484]	@ (8004230 <RCCEx_PLLSAI2_Config+0x290>)
 800404c:	68db      	ldr	r3, [r3, #12]
 800404e:	f003 0203 	and.w	r2, r3, #3
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	429a      	cmp	r2, r3
 8004058:	d10d      	bne.n	8004076 <RCCEx_PLLSAI2_Config+0xd6>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
       ||
 800405e:	2b00      	cmp	r3, #0
 8004060:	d009      	beq.n	8004076 <RCCEx_PLLSAI2_Config+0xd6>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004062:	4b73      	ldr	r3, [pc, #460]	@ (8004230 <RCCEx_PLLSAI2_Config+0x290>)
 8004064:	68db      	ldr	r3, [r3, #12]
 8004066:	091b      	lsrs	r3, r3, #4
 8004068:	f003 0307 	and.w	r3, r3, #7
 800406c:	1c5a      	adds	r2, r3, #1
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	685b      	ldr	r3, [r3, #4]
       ||
 8004072:	429a      	cmp	r2, r3
 8004074:	d047      	beq.n	8004106 <RCCEx_PLLSAI2_Config+0x166>
#endif
      )
    {
      status = HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	73fb      	strb	r3, [r7, #15]
 800407a:	e044      	b.n	8004106 <RCCEx_PLLSAI2_Config+0x166>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	2b03      	cmp	r3, #3
 8004082:	d018      	beq.n	80040b6 <RCCEx_PLLSAI2_Config+0x116>
 8004084:	2b03      	cmp	r3, #3
 8004086:	d825      	bhi.n	80040d4 <RCCEx_PLLSAI2_Config+0x134>
 8004088:	2b01      	cmp	r3, #1
 800408a:	d002      	beq.n	8004092 <RCCEx_PLLSAI2_Config+0xf2>
 800408c:	2b02      	cmp	r3, #2
 800408e:	d009      	beq.n	80040a4 <RCCEx_PLLSAI2_Config+0x104>
 8004090:	e020      	b.n	80040d4 <RCCEx_PLLSAI2_Config+0x134>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004092:	4b67      	ldr	r3, [pc, #412]	@ (8004230 <RCCEx_PLLSAI2_Config+0x290>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 0302 	and.w	r3, r3, #2
 800409a:	2b00      	cmp	r3, #0
 800409c:	d11d      	bne.n	80040da <RCCEx_PLLSAI2_Config+0x13a>
      {
        status = HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040a2:	e01a      	b.n	80040da <RCCEx_PLLSAI2_Config+0x13a>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80040a4:	4b62      	ldr	r3, [pc, #392]	@ (8004230 <RCCEx_PLLSAI2_Config+0x290>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d116      	bne.n	80040de <RCCEx_PLLSAI2_Config+0x13e>
      {
        status = HAL_ERROR;
 80040b0:	2301      	movs	r3, #1
 80040b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040b4:	e013      	b.n	80040de <RCCEx_PLLSAI2_Config+0x13e>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80040b6:	4b5e      	ldr	r3, [pc, #376]	@ (8004230 <RCCEx_PLLSAI2_Config+0x290>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d10f      	bne.n	80040e2 <RCCEx_PLLSAI2_Config+0x142>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80040c2:	4b5b      	ldr	r3, [pc, #364]	@ (8004230 <RCCEx_PLLSAI2_Config+0x290>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d109      	bne.n	80040e2 <RCCEx_PLLSAI2_Config+0x142>
        {
          status = HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80040d2:	e006      	b.n	80040e2 <RCCEx_PLLSAI2_Config+0x142>
    default:
      status = HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	73fb      	strb	r3, [r7, #15]
      break;
 80040d8:	e004      	b.n	80040e4 <RCCEx_PLLSAI2_Config+0x144>
      break;
 80040da:	bf00      	nop
 80040dc:	e002      	b.n	80040e4 <RCCEx_PLLSAI2_Config+0x144>
      break;
 80040de:	bf00      	nop
 80040e0:	e000      	b.n	80040e4 <RCCEx_PLLSAI2_Config+0x144>
      break;
 80040e2:	bf00      	nop
    }

    if(status == HAL_OK)
 80040e4:	7bfb      	ldrb	r3, [r7, #15]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d10d      	bne.n	8004106 <RCCEx_PLLSAI2_Config+0x166>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80040ea:	4b51      	ldr	r3, [pc, #324]	@ (8004230 <RCCEx_PLLSAI2_Config+0x290>)
 80040ec:	68db      	ldr	r3, [r3, #12]
 80040ee:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6819      	ldr	r1, [r3, #0]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	3b01      	subs	r3, #1
 80040fc:	011b      	lsls	r3, r3, #4
 80040fe:	430b      	orrs	r3, r1
 8004100:	494b      	ldr	r1, [pc, #300]	@ (8004230 <RCCEx_PLLSAI2_Config+0x290>)
 8004102:	4313      	orrs	r3, r2
 8004104:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004106:	7bfb      	ldrb	r3, [r7, #15]
 8004108:	2b00      	cmp	r3, #0
 800410a:	f040 808a 	bne.w	8004222 <RCCEx_PLLSAI2_Config+0x282>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800410e:	4b48      	ldr	r3, [pc, #288]	@ (8004230 <RCCEx_PLLSAI2_Config+0x290>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a47      	ldr	r2, [pc, #284]	@ (8004230 <RCCEx_PLLSAI2_Config+0x290>)
 8004114:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004118:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800411a:	f7fd f9af 	bl	800147c <HAL_GetTick>
 800411e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004120:	e009      	b.n	8004136 <RCCEx_PLLSAI2_Config+0x196>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004122:	f7fd f9ab 	bl	800147c <HAL_GetTick>
 8004126:	4602      	mov	r2, r0
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	1ad3      	subs	r3, r2, r3
 800412c:	2b02      	cmp	r3, #2
 800412e:	d902      	bls.n	8004136 <RCCEx_PLLSAI2_Config+0x196>
      {
        status = HAL_TIMEOUT;
 8004130:	2303      	movs	r3, #3
 8004132:	73fb      	strb	r3, [r7, #15]
        break;
 8004134:	e005      	b.n	8004142 <RCCEx_PLLSAI2_Config+0x1a2>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004136:	4b3e      	ldr	r3, [pc, #248]	@ (8004230 <RCCEx_PLLSAI2_Config+0x290>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800413e:	2b00      	cmp	r3, #0
 8004140:	d1ef      	bne.n	8004122 <RCCEx_PLLSAI2_Config+0x182>
      }
    }

    if(status == HAL_OK)
 8004142:	7bfb      	ldrb	r3, [r7, #15]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d16c      	bne.n	8004222 <RCCEx_PLLSAI2_Config+0x282>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d11e      	bne.n	800418c <RCCEx_PLLSAI2_Config+0x1ec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	68db      	ldr	r3, [r3, #12]
 8004152:	2b07      	cmp	r3, #7
 8004154:	d008      	beq.n	8004168 <RCCEx_PLLSAI2_Config+0x1c8>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	68db      	ldr	r3, [r3, #12]
 800415a:	2b11      	cmp	r3, #17
 800415c:	d004      	beq.n	8004168 <RCCEx_PLLSAI2_Config+0x1c8>
 800415e:	f640 4185 	movw	r1, #3205	@ 0xc85
 8004162:	4832      	ldr	r0, [pc, #200]	@ (800422c <RCCEx_PLLSAI2_Config+0x28c>)
 8004164:	f7fc fbf0 	bl	8000948 <assert_failed>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004168:	4b31      	ldr	r3, [pc, #196]	@ (8004230 <RCCEx_PLLSAI2_Config+0x290>)
 800416a:	695b      	ldr	r3, [r3, #20]
 800416c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004170:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004174:	687a      	ldr	r2, [r7, #4]
 8004176:	6892      	ldr	r2, [r2, #8]
 8004178:	0211      	lsls	r1, r2, #8
 800417a:	687a      	ldr	r2, [r7, #4]
 800417c:	68d2      	ldr	r2, [r2, #12]
 800417e:	0912      	lsrs	r2, r2, #4
 8004180:	0452      	lsls	r2, r2, #17
 8004182:	430a      	orrs	r2, r1
 8004184:	492a      	ldr	r1, [pc, #168]	@ (8004230 <RCCEx_PLLSAI2_Config+0x290>)
 8004186:	4313      	orrs	r3, r2
 8004188:	614b      	str	r3, [r1, #20]
 800418a:	e026      	b.n	80041da <RCCEx_PLLSAI2_Config+0x23a>
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#endif /* RCC_PLLSAI2Q_DIV_SUPPORT */
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	691b      	ldr	r3, [r3, #16]
 8004190:	2b02      	cmp	r3, #2
 8004192:	d010      	beq.n	80041b6 <RCCEx_PLLSAI2_Config+0x216>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	691b      	ldr	r3, [r3, #16]
 8004198:	2b04      	cmp	r3, #4
 800419a:	d00c      	beq.n	80041b6 <RCCEx_PLLSAI2_Config+0x216>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	691b      	ldr	r3, [r3, #16]
 80041a0:	2b06      	cmp	r3, #6
 80041a2:	d008      	beq.n	80041b6 <RCCEx_PLLSAI2_Config+0x216>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	691b      	ldr	r3, [r3, #16]
 80041a8:	2b08      	cmp	r3, #8
 80041aa:	d004      	beq.n	80041b6 <RCCEx_PLLSAI2_Config+0x216>
 80041ac:	f640 41bd 	movw	r1, #3261	@ 0xcbd
 80041b0:	481e      	ldr	r0, [pc, #120]	@ (800422c <RCCEx_PLLSAI2_Config+0x28c>)
 80041b2:	f7fc fbc9 	bl	8000948 <assert_failed>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80041b6:	4b1e      	ldr	r3, [pc, #120]	@ (8004230 <RCCEx_PLLSAI2_Config+0x290>)
 80041b8:	695b      	ldr	r3, [r3, #20]
 80041ba:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80041be:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80041c2:	687a      	ldr	r2, [r7, #4]
 80041c4:	6892      	ldr	r2, [r2, #8]
 80041c6:	0211      	lsls	r1, r2, #8
 80041c8:	687a      	ldr	r2, [r7, #4]
 80041ca:	6912      	ldr	r2, [r2, #16]
 80041cc:	0852      	lsrs	r2, r2, #1
 80041ce:	3a01      	subs	r2, #1
 80041d0:	0652      	lsls	r2, r2, #25
 80041d2:	430a      	orrs	r2, r1
 80041d4:	4916      	ldr	r1, [pc, #88]	@ (8004230 <RCCEx_PLLSAI2_Config+0x290>)
 80041d6:	4313      	orrs	r3, r2
 80041d8:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80041da:	4b15      	ldr	r3, [pc, #84]	@ (8004230 <RCCEx_PLLSAI2_Config+0x290>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a14      	ldr	r2, [pc, #80]	@ (8004230 <RCCEx_PLLSAI2_Config+0x290>)
 80041e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041e4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041e6:	f7fd f949 	bl	800147c <HAL_GetTick>
 80041ea:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80041ec:	e009      	b.n	8004202 <RCCEx_PLLSAI2_Config+0x262>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80041ee:	f7fd f945 	bl	800147c <HAL_GetTick>
 80041f2:	4602      	mov	r2, r0
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	1ad3      	subs	r3, r2, r3
 80041f8:	2b02      	cmp	r3, #2
 80041fa:	d902      	bls.n	8004202 <RCCEx_PLLSAI2_Config+0x262>
        {
          status = HAL_TIMEOUT;
 80041fc:	2303      	movs	r3, #3
 80041fe:	73fb      	strb	r3, [r7, #15]
          break;
 8004200:	e005      	b.n	800420e <RCCEx_PLLSAI2_Config+0x26e>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004202:	4b0b      	ldr	r3, [pc, #44]	@ (8004230 <RCCEx_PLLSAI2_Config+0x290>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800420a:	2b00      	cmp	r3, #0
 800420c:	d0ef      	beq.n	80041ee <RCCEx_PLLSAI2_Config+0x24e>
        }
      }

      if(status == HAL_OK)
 800420e:	7bfb      	ldrb	r3, [r7, #15]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d106      	bne.n	8004222 <RCCEx_PLLSAI2_Config+0x282>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004214:	4b06      	ldr	r3, [pc, #24]	@ (8004230 <RCCEx_PLLSAI2_Config+0x290>)
 8004216:	695a      	ldr	r2, [r3, #20]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	695b      	ldr	r3, [r3, #20]
 800421c:	4904      	ldr	r1, [pc, #16]	@ (8004230 <RCCEx_PLLSAI2_Config+0x290>)
 800421e:	4313      	orrs	r3, r2
 8004220:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004222:	7bfb      	ldrb	r3, [r7, #15]
}
 8004224:	4618      	mov	r0, r3
 8004226:	3710      	adds	r7, #16
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}
 800422c:	0800794c 	.word	0x0800794c
 8004230:	40021000 	.word	0x40021000

08004234 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b084      	sub	sp, #16
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d101      	bne.n	8004246 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e1dd      	b.n	8004602 <HAL_SPI_Init+0x3ce>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a7b      	ldr	r2, [pc, #492]	@ (8004438 <HAL_SPI_Init+0x204>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d00e      	beq.n	800426e <HAL_SPI_Init+0x3a>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a79      	ldr	r2, [pc, #484]	@ (800443c <HAL_SPI_Init+0x208>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d009      	beq.n	800426e <HAL_SPI_Init+0x3a>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a78      	ldr	r2, [pc, #480]	@ (8004440 <HAL_SPI_Init+0x20c>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d004      	beq.n	800426e <HAL_SPI_Init+0x3a>
 8004264:	f240 1147 	movw	r1, #327	@ 0x147
 8004268:	4876      	ldr	r0, [pc, #472]	@ (8004444 <HAL_SPI_Init+0x210>)
 800426a:	f7fc fb6d 	bl	8000948 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d009      	beq.n	800428a <HAL_SPI_Init+0x56>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800427e:	d004      	beq.n	800428a <HAL_SPI_Init+0x56>
 8004280:	f44f 71a4 	mov.w	r1, #328	@ 0x148
 8004284:	486f      	ldr	r0, [pc, #444]	@ (8004444 <HAL_SPI_Init+0x210>)
 8004286:	f7fc fb5f 	bl	8000948 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d00e      	beq.n	80042b0 <HAL_SPI_Init+0x7c>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800429a:	d009      	beq.n	80042b0 <HAL_SPI_Init+0x7c>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80042a4:	d004      	beq.n	80042b0 <HAL_SPI_Init+0x7c>
 80042a6:	f240 1149 	movw	r1, #329	@ 0x149
 80042aa:	4866      	ldr	r0, [pc, #408]	@ (8004444 <HAL_SPI_Init+0x210>)
 80042ac:	f7fc fb4c 	bl	8000948 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80042b8:	d040      	beq.n	800433c <HAL_SPI_Init+0x108>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	68db      	ldr	r3, [r3, #12]
 80042be:	f5b3 6f60 	cmp.w	r3, #3584	@ 0xe00
 80042c2:	d03b      	beq.n	800433c <HAL_SPI_Init+0x108>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	f5b3 6f50 	cmp.w	r3, #3328	@ 0xd00
 80042cc:	d036      	beq.n	800433c <HAL_SPI_Init+0x108>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	68db      	ldr	r3, [r3, #12]
 80042d2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80042d6:	d031      	beq.n	800433c <HAL_SPI_Init+0x108>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	68db      	ldr	r3, [r3, #12]
 80042dc:	f5b3 6f30 	cmp.w	r3, #2816	@ 0xb00
 80042e0:	d02c      	beq.n	800433c <HAL_SPI_Init+0x108>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	68db      	ldr	r3, [r3, #12]
 80042e6:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80042ea:	d027      	beq.n	800433c <HAL_SPI_Init+0x108>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	f5b3 6f10 	cmp.w	r3, #2304	@ 0x900
 80042f4:	d022      	beq.n	800433c <HAL_SPI_Init+0x108>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	68db      	ldr	r3, [r3, #12]
 80042fa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80042fe:	d01d      	beq.n	800433c <HAL_SPI_Init+0x108>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	68db      	ldr	r3, [r3, #12]
 8004304:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004308:	d018      	beq.n	800433c <HAL_SPI_Init+0x108>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	68db      	ldr	r3, [r3, #12]
 800430e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004312:	d013      	beq.n	800433c <HAL_SPI_Init+0x108>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800431c:	d00e      	beq.n	800433c <HAL_SPI_Init+0x108>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004326:	d009      	beq.n	800433c <HAL_SPI_Init+0x108>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	68db      	ldr	r3, [r3, #12]
 800432c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004330:	d004      	beq.n	800433c <HAL_SPI_Init+0x108>
 8004332:	f44f 71a5 	mov.w	r1, #330	@ 0x14a
 8004336:	4843      	ldr	r0, [pc, #268]	@ (8004444 <HAL_SPI_Init+0x210>)
 8004338:	f7fc fb06 	bl	8000948 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	699b      	ldr	r3, [r3, #24]
 8004340:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004344:	d00d      	beq.n	8004362 <HAL_SPI_Init+0x12e>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	699b      	ldr	r3, [r3, #24]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d009      	beq.n	8004362 <HAL_SPI_Init+0x12e>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	699b      	ldr	r3, [r3, #24]
 8004352:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004356:	d004      	beq.n	8004362 <HAL_SPI_Init+0x12e>
 8004358:	f240 114b 	movw	r1, #331	@ 0x14b
 800435c:	4839      	ldr	r0, [pc, #228]	@ (8004444 <HAL_SPI_Init+0x210>)
 800435e:	f7fc faf3 	bl	8000948 <assert_failed>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004366:	2b08      	cmp	r3, #8
 8004368:	d008      	beq.n	800437c <HAL_SPI_Init+0x148>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800436e:	2b00      	cmp	r3, #0
 8004370:	d004      	beq.n	800437c <HAL_SPI_Init+0x148>
 8004372:	f44f 71a6 	mov.w	r1, #332	@ 0x14c
 8004376:	4833      	ldr	r0, [pc, #204]	@ (8004444 <HAL_SPI_Init+0x210>)
 8004378:	f7fc fae6 	bl	8000948 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	69db      	ldr	r3, [r3, #28]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d020      	beq.n	80043c6 <HAL_SPI_Init+0x192>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	69db      	ldr	r3, [r3, #28]
 8004388:	2b08      	cmp	r3, #8
 800438a:	d01c      	beq.n	80043c6 <HAL_SPI_Init+0x192>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	69db      	ldr	r3, [r3, #28]
 8004390:	2b10      	cmp	r3, #16
 8004392:	d018      	beq.n	80043c6 <HAL_SPI_Init+0x192>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	69db      	ldr	r3, [r3, #28]
 8004398:	2b18      	cmp	r3, #24
 800439a:	d014      	beq.n	80043c6 <HAL_SPI_Init+0x192>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	69db      	ldr	r3, [r3, #28]
 80043a0:	2b20      	cmp	r3, #32
 80043a2:	d010      	beq.n	80043c6 <HAL_SPI_Init+0x192>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	69db      	ldr	r3, [r3, #28]
 80043a8:	2b28      	cmp	r3, #40	@ 0x28
 80043aa:	d00c      	beq.n	80043c6 <HAL_SPI_Init+0x192>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	69db      	ldr	r3, [r3, #28]
 80043b0:	2b30      	cmp	r3, #48	@ 0x30
 80043b2:	d008      	beq.n	80043c6 <HAL_SPI_Init+0x192>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	69db      	ldr	r3, [r3, #28]
 80043b8:	2b38      	cmp	r3, #56	@ 0x38
 80043ba:	d004      	beq.n	80043c6 <HAL_SPI_Init+0x192>
 80043bc:	f240 114d 	movw	r1, #333	@ 0x14d
 80043c0:	4820      	ldr	r0, [pc, #128]	@ (8004444 <HAL_SPI_Init+0x210>)
 80043c2:	f7fc fac1 	bl	8000948 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6a1b      	ldr	r3, [r3, #32]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d008      	beq.n	80043e0 <HAL_SPI_Init+0x1ac>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6a1b      	ldr	r3, [r3, #32]
 80043d2:	2b80      	cmp	r3, #128	@ 0x80
 80043d4:	d004      	beq.n	80043e0 <HAL_SPI_Init+0x1ac>
 80043d6:	f44f 71a7 	mov.w	r1, #334	@ 0x14e
 80043da:	481a      	ldr	r0, [pc, #104]	@ (8004444 <HAL_SPI_Init+0x210>)
 80043dc:	f7fc fab4 	bl	8000948 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d008      	beq.n	80043fa <HAL_SPI_Init+0x1c6>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ec:	2b10      	cmp	r3, #16
 80043ee:	d004      	beq.n	80043fa <HAL_SPI_Init+0x1c6>
 80043f0:	f240 114f 	movw	r1, #335	@ 0x14f
 80043f4:	4813      	ldr	r0, [pc, #76]	@ (8004444 <HAL_SPI_Init+0x210>)
 80043f6:	f7fc faa7 	bl	8000948 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d151      	bne.n	80044a6 <HAL_SPI_Init+0x272>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	691b      	ldr	r3, [r3, #16]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d008      	beq.n	800441c <HAL_SPI_Init+0x1e8>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	691b      	ldr	r3, [r3, #16]
 800440e:	2b02      	cmp	r3, #2
 8004410:	d004      	beq.n	800441c <HAL_SPI_Init+0x1e8>
 8004412:	f44f 71a9 	mov.w	r1, #338	@ 0x152
 8004416:	480b      	ldr	r0, [pc, #44]	@ (8004444 <HAL_SPI_Init+0x210>)
 8004418:	f7fc fa96 	bl	8000948 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	695b      	ldr	r3, [r3, #20]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d011      	beq.n	8004448 <HAL_SPI_Init+0x214>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	695b      	ldr	r3, [r3, #20]
 8004428:	2b01      	cmp	r3, #1
 800442a:	d00d      	beq.n	8004448 <HAL_SPI_Init+0x214>
 800442c:	f240 1153 	movw	r1, #339	@ 0x153
 8004430:	4804      	ldr	r0, [pc, #16]	@ (8004444 <HAL_SPI_Init+0x210>)
 8004432:	f7fc fa89 	bl	8000948 <assert_failed>
 8004436:	e007      	b.n	8004448 <HAL_SPI_Init+0x214>
 8004438:	40013000 	.word	0x40013000
 800443c:	40003800 	.word	0x40003800
 8004440:	40003c00 	.word	0x40003c00
 8004444:	08007988 	.word	0x08007988

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004450:	d125      	bne.n	800449e <HAL_SPI_Init+0x26a>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	69db      	ldr	r3, [r3, #28]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d050      	beq.n	80044fc <HAL_SPI_Init+0x2c8>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	69db      	ldr	r3, [r3, #28]
 800445e:	2b08      	cmp	r3, #8
 8004460:	d04c      	beq.n	80044fc <HAL_SPI_Init+0x2c8>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	69db      	ldr	r3, [r3, #28]
 8004466:	2b10      	cmp	r3, #16
 8004468:	d048      	beq.n	80044fc <HAL_SPI_Init+0x2c8>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	69db      	ldr	r3, [r3, #28]
 800446e:	2b18      	cmp	r3, #24
 8004470:	d044      	beq.n	80044fc <HAL_SPI_Init+0x2c8>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	69db      	ldr	r3, [r3, #28]
 8004476:	2b20      	cmp	r3, #32
 8004478:	d040      	beq.n	80044fc <HAL_SPI_Init+0x2c8>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	69db      	ldr	r3, [r3, #28]
 800447e:	2b28      	cmp	r3, #40	@ 0x28
 8004480:	d03c      	beq.n	80044fc <HAL_SPI_Init+0x2c8>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	69db      	ldr	r3, [r3, #28]
 8004486:	2b30      	cmp	r3, #48	@ 0x30
 8004488:	d038      	beq.n	80044fc <HAL_SPI_Init+0x2c8>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	69db      	ldr	r3, [r3, #28]
 800448e:	2b38      	cmp	r3, #56	@ 0x38
 8004490:	d034      	beq.n	80044fc <HAL_SPI_Init+0x2c8>
 8004492:	f240 1157 	movw	r1, #343	@ 0x157
 8004496:	485d      	ldr	r0, [pc, #372]	@ (800460c <HAL_SPI_Init+0x3d8>)
 8004498:	f7fc fa56 	bl	8000948 <assert_failed>
 800449c:	e02e      	b.n	80044fc <HAL_SPI_Init+0x2c8>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2200      	movs	r2, #0
 80044a2:	61da      	str	r2, [r3, #28]
 80044a4:	e02a      	b.n	80044fc <HAL_SPI_Init+0x2c8>
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	69db      	ldr	r3, [r3, #28]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d020      	beq.n	80044f0 <HAL_SPI_Init+0x2bc>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	69db      	ldr	r3, [r3, #28]
 80044b2:	2b08      	cmp	r3, #8
 80044b4:	d01c      	beq.n	80044f0 <HAL_SPI_Init+0x2bc>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	69db      	ldr	r3, [r3, #28]
 80044ba:	2b10      	cmp	r3, #16
 80044bc:	d018      	beq.n	80044f0 <HAL_SPI_Init+0x2bc>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	69db      	ldr	r3, [r3, #28]
 80044c2:	2b18      	cmp	r3, #24
 80044c4:	d014      	beq.n	80044f0 <HAL_SPI_Init+0x2bc>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	69db      	ldr	r3, [r3, #28]
 80044ca:	2b20      	cmp	r3, #32
 80044cc:	d010      	beq.n	80044f0 <HAL_SPI_Init+0x2bc>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	69db      	ldr	r3, [r3, #28]
 80044d2:	2b28      	cmp	r3, #40	@ 0x28
 80044d4:	d00c      	beq.n	80044f0 <HAL_SPI_Init+0x2bc>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	69db      	ldr	r3, [r3, #28]
 80044da:	2b30      	cmp	r3, #48	@ 0x30
 80044dc:	d008      	beq.n	80044f0 <HAL_SPI_Init+0x2bc>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	69db      	ldr	r3, [r3, #28]
 80044e2:	2b38      	cmp	r3, #56	@ 0x38
 80044e4:	d004      	beq.n	80044f0 <HAL_SPI_Init+0x2bc>
 80044e6:	f240 1161 	movw	r1, #353	@ 0x161
 80044ea:	4848      	ldr	r0, [pc, #288]	@ (800460c <HAL_SPI_Init+0x3d8>)
 80044ec:	f7fc fa2c 	bl	8000948 <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2200      	movs	r2, #0
 80044f4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2200      	movs	r2, #0
 80044fa:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2200      	movs	r2, #0
 8004500:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004508:	b2db      	uxtb	r3, r3
 800450a:	2b00      	cmp	r3, #0
 800450c:	d106      	bne.n	800451c <HAL_SPI_Init+0x2e8>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2200      	movs	r2, #0
 8004512:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f7fc fa5a 	bl	80009d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2202      	movs	r2, #2
 8004520:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004532:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	68db      	ldr	r3, [r3, #12]
 8004538:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800453c:	d902      	bls.n	8004544 <HAL_SPI_Init+0x310>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800453e:	2300      	movs	r3, #0
 8004540:	60fb      	str	r3, [r7, #12]
 8004542:	e002      	b.n	800454a <HAL_SPI_Init+0x316>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004544:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004548:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	68db      	ldr	r3, [r3, #12]
 800454e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004552:	d007      	beq.n	8004564 <HAL_SPI_Init+0x330>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800455c:	d002      	beq.n	8004564 <HAL_SPI_Init+0x330>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2200      	movs	r2, #0
 8004562:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004574:	431a      	orrs	r2, r3
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	691b      	ldr	r3, [r3, #16]
 800457a:	f003 0302 	and.w	r3, r3, #2
 800457e:	431a      	orrs	r2, r3
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	695b      	ldr	r3, [r3, #20]
 8004584:	f003 0301 	and.w	r3, r3, #1
 8004588:	431a      	orrs	r2, r3
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	699b      	ldr	r3, [r3, #24]
 800458e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004592:	431a      	orrs	r2, r3
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	69db      	ldr	r3, [r3, #28]
 8004598:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800459c:	431a      	orrs	r2, r3
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6a1b      	ldr	r3, [r3, #32]
 80045a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045a6:	ea42 0103 	orr.w	r1, r2, r3
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045ae:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	430a      	orrs	r2, r1
 80045b8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	699b      	ldr	r3, [r3, #24]
 80045be:	0c1b      	lsrs	r3, r3, #16
 80045c0:	f003 0204 	and.w	r2, r3, #4
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045c8:	f003 0310 	and.w	r3, r3, #16
 80045cc:	431a      	orrs	r2, r3
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045d2:	f003 0308 	and.w	r3, r3, #8
 80045d6:	431a      	orrs	r2, r3
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80045e0:	ea42 0103 	orr.w	r1, r2, r3
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	430a      	orrs	r2, r1
 80045f0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2200      	movs	r2, #0
 80045f6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004600:	2300      	movs	r3, #0
}
 8004602:	4618      	mov	r0, r3
 8004604:	3710      	adds	r7, #16
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}
 800460a:	bf00      	nop
 800460c:	08007988 	.word	0x08007988

08004610 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b084      	sub	sp, #16
 8004614:	af00      	add	r7, sp, #0
 8004616:	60f8      	str	r0, [r7, #12]
 8004618:	60b9      	str	r1, [r7, #8]
 800461a:	4613      	mov	r3, r2
 800461c:	80fb      	strh	r3, [r7, #6]

  /* Check tx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004622:	2b00      	cmp	r3, #0
 8004624:	d104      	bne.n	8004630 <HAL_SPI_Transmit_DMA+0x20>
 8004626:	f240 716a 	movw	r1, #1898	@ 0x76a
 800462a:	4879      	ldr	r0, [pc, #484]	@ (8004810 <HAL_SPI_Transmit_DMA+0x200>)
 800462c:	f7fc f98c 	bl	8000948 <assert_failed>

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d009      	beq.n	800464c <HAL_SPI_Transmit_DMA+0x3c>
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004640:	d004      	beq.n	800464c <HAL_SPI_Transmit_DMA+0x3c>
 8004642:	f240 716d 	movw	r1, #1901	@ 0x76d
 8004646:	4872      	ldr	r0, [pc, #456]	@ (8004810 <HAL_SPI_Transmit_DMA+0x200>)
 8004648:	f7fc f97e 	bl	8000948 <assert_failed>

  if (hspi->State != HAL_SPI_STATE_READY)
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004652:	b2db      	uxtb	r3, r3
 8004654:	2b01      	cmp	r3, #1
 8004656:	d001      	beq.n	800465c <HAL_SPI_Transmit_DMA+0x4c>
  {
    return HAL_BUSY;
 8004658:	2302      	movs	r3, #2
 800465a:	e0d4      	b.n	8004806 <HAL_SPI_Transmit_DMA+0x1f6>
  }

  if ((pData == NULL) || (Size == 0U))
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d002      	beq.n	8004668 <HAL_SPI_Transmit_DMA+0x58>
 8004662:	88fb      	ldrh	r3, [r7, #6]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d101      	bne.n	800466c <HAL_SPI_Transmit_DMA+0x5c>
  {
    return HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	e0cc      	b.n	8004806 <HAL_SPI_Transmit_DMA+0x1f6>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004672:	2b01      	cmp	r3, #1
 8004674:	d101      	bne.n	800467a <HAL_SPI_Transmit_DMA+0x6a>
 8004676:	2302      	movs	r3, #2
 8004678:	e0c5      	b.n	8004806 <HAL_SPI_Transmit_DMA+0x1f6>
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2201      	movs	r2, #1
 800467e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2203      	movs	r2, #3
 8004686:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2200      	movs	r2, #0
 800468e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	68ba      	ldr	r2, [r7, #8]
 8004694:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	88fa      	ldrh	r2, [r7, #6]
 800469a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	88fa      	ldrh	r2, [r7, #6]
 80046a0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2200      	movs	r2, #0
 80046a6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2200      	movs	r2, #0
 80046ac:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2200      	movs	r2, #0
 80046b2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->RxXferSize  = 0U;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2200      	movs	r2, #0
 80046b8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2200      	movs	r2, #0
 80046c0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80046cc:	d10f      	bne.n	80046ee <HAL_SPI_Transmit_DMA+0xde>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80046dc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80046ec:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046f2:	4a48      	ldr	r2, [pc, #288]	@ (8004814 <HAL_SPI_Transmit_DMA+0x204>)
 80046f4:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046fa:	4a47      	ldr	r2, [pc, #284]	@ (8004818 <HAL_SPI_Transmit_DMA+0x208>)
 80046fc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004702:	4a46      	ldr	r2, [pc, #280]	@ (800481c <HAL_SPI_Transmit_DMA+0x20c>)
 8004704:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800470a:	2200      	movs	r2, #0
 800470c:	639a      	str	r2, [r3, #56]	@ 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	685a      	ldr	r2, [r3, #4]
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800471c:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	68db      	ldr	r3, [r3, #12]
 8004722:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004726:	d82d      	bhi.n	8004784 <HAL_SPI_Transmit_DMA+0x174>
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800472c:	699b      	ldr	r3, [r3, #24]
 800472e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004732:	d127      	bne.n	8004784 <HAL_SPI_Transmit_DMA+0x174>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004738:	b29b      	uxth	r3, r3
 800473a:	f003 0301 	and.w	r3, r3, #1
 800473e:	2b00      	cmp	r3, #0
 8004740:	d10f      	bne.n	8004762 <HAL_SPI_Transmit_DMA+0x152>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	685a      	ldr	r2, [r3, #4]
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004750:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004756:	b29b      	uxth	r3, r3
 8004758:	085b      	lsrs	r3, r3, #1
 800475a:	b29a      	uxth	r2, r3
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004760:	e010      	b.n	8004784 <HAL_SPI_Transmit_DMA+0x174>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	685a      	ldr	r2, [r3, #4]
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004770:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004776:	b29b      	uxth	r3, r3
 8004778:	085b      	lsrs	r3, r3, #1
 800477a:	b29b      	uxth	r3, r3
 800477c:	3301      	adds	r3, #1
 800477e:	b29a      	uxth	r2, r3
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800478c:	4619      	mov	r1, r3
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	330c      	adds	r3, #12
 8004794:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800479a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800479c:	f7fd f972 	bl	8001a84 <HAL_DMA_Start_IT>
 80047a0:	4603      	mov	r3, r0
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d00b      	beq.n	80047be <HAL_SPI_Transmit_DMA+0x1ae>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047aa:	f043 0210 	orr.w	r2, r3, #16
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2200      	movs	r2, #0
 80047b6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	e023      	b.n	8004806 <HAL_SPI_Transmit_DMA+0x1f6>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047c8:	2b40      	cmp	r3, #64	@ 0x40
 80047ca:	d007      	beq.n	80047dc <HAL_SPI_Transmit_DMA+0x1cc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80047da:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2200      	movs	r2, #0
 80047e0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	685a      	ldr	r2, [r3, #4]
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f042 0220 	orr.w	r2, r2, #32
 80047f2:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	685a      	ldr	r2, [r3, #4]
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f042 0202 	orr.w	r2, r2, #2
 8004802:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8004804:	2300      	movs	r3, #0
}
 8004806:	4618      	mov	r0, r3
 8004808:	3710      	adds	r7, #16
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}
 800480e:	bf00      	nop
 8004810:	08007988 	.word	0x08007988
 8004814:	08004aef 	.word	0x08004aef
 8004818:	08004a49 	.word	0x08004a49
 800481c:	08004b0b 	.word	0x08004b0b

08004820 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b088      	sub	sp, #32
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004838:	69bb      	ldr	r3, [r7, #24]
 800483a:	099b      	lsrs	r3, r3, #6
 800483c:	f003 0301 	and.w	r3, r3, #1
 8004840:	2b00      	cmp	r3, #0
 8004842:	d10f      	bne.n	8004864 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004844:	69bb      	ldr	r3, [r7, #24]
 8004846:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800484a:	2b00      	cmp	r3, #0
 800484c:	d00a      	beq.n	8004864 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800484e:	69fb      	ldr	r3, [r7, #28]
 8004850:	099b      	lsrs	r3, r3, #6
 8004852:	f003 0301 	and.w	r3, r3, #1
 8004856:	2b00      	cmp	r3, #0
 8004858:	d004      	beq.n	8004864 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	4798      	blx	r3
    return;
 8004862:	e0d7      	b.n	8004a14 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004864:	69bb      	ldr	r3, [r7, #24]
 8004866:	085b      	lsrs	r3, r3, #1
 8004868:	f003 0301 	and.w	r3, r3, #1
 800486c:	2b00      	cmp	r3, #0
 800486e:	d00a      	beq.n	8004886 <HAL_SPI_IRQHandler+0x66>
 8004870:	69fb      	ldr	r3, [r7, #28]
 8004872:	09db      	lsrs	r3, r3, #7
 8004874:	f003 0301 	and.w	r3, r3, #1
 8004878:	2b00      	cmp	r3, #0
 800487a:	d004      	beq.n	8004886 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	4798      	blx	r3
    return;
 8004884:	e0c6      	b.n	8004a14 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004886:	69bb      	ldr	r3, [r7, #24]
 8004888:	095b      	lsrs	r3, r3, #5
 800488a:	f003 0301 	and.w	r3, r3, #1
 800488e:	2b00      	cmp	r3, #0
 8004890:	d10c      	bne.n	80048ac <HAL_SPI_IRQHandler+0x8c>
 8004892:	69bb      	ldr	r3, [r7, #24]
 8004894:	099b      	lsrs	r3, r3, #6
 8004896:	f003 0301 	and.w	r3, r3, #1
 800489a:	2b00      	cmp	r3, #0
 800489c:	d106      	bne.n	80048ac <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800489e:	69bb      	ldr	r3, [r7, #24]
 80048a0:	0a1b      	lsrs	r3, r3, #8
 80048a2:	f003 0301 	and.w	r3, r3, #1
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	f000 80b4 	beq.w	8004a14 <HAL_SPI_IRQHandler+0x1f4>
 80048ac:	69fb      	ldr	r3, [r7, #28]
 80048ae:	095b      	lsrs	r3, r3, #5
 80048b0:	f003 0301 	and.w	r3, r3, #1
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	f000 80ad 	beq.w	8004a14 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80048ba:	69bb      	ldr	r3, [r7, #24]
 80048bc:	099b      	lsrs	r3, r3, #6
 80048be:	f003 0301 	and.w	r3, r3, #1
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d023      	beq.n	800490e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80048cc:	b2db      	uxtb	r3, r3
 80048ce:	2b03      	cmp	r3, #3
 80048d0:	d011      	beq.n	80048f6 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048d6:	f043 0204 	orr.w	r2, r3, #4
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80048de:	2300      	movs	r3, #0
 80048e0:	617b      	str	r3, [r7, #20]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	68db      	ldr	r3, [r3, #12]
 80048e8:	617b      	str	r3, [r7, #20]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	617b      	str	r3, [r7, #20]
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	e00b      	b.n	800490e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80048f6:	2300      	movs	r3, #0
 80048f8:	613b      	str	r3, [r7, #16]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	613b      	str	r3, [r7, #16]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	613b      	str	r3, [r7, #16]
 800490a:	693b      	ldr	r3, [r7, #16]
        return;
 800490c:	e082      	b.n	8004a14 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800490e:	69bb      	ldr	r3, [r7, #24]
 8004910:	095b      	lsrs	r3, r3, #5
 8004912:	f003 0301 	and.w	r3, r3, #1
 8004916:	2b00      	cmp	r3, #0
 8004918:	d014      	beq.n	8004944 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800491e:	f043 0201 	orr.w	r2, r3, #1
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004926:	2300      	movs	r3, #0
 8004928:	60fb      	str	r3, [r7, #12]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	60fb      	str	r3, [r7, #12]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	681a      	ldr	r2, [r3, #0]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004940:	601a      	str	r2, [r3, #0]
 8004942:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004944:	69bb      	ldr	r3, [r7, #24]
 8004946:	0a1b      	lsrs	r3, r3, #8
 8004948:	f003 0301 	and.w	r3, r3, #1
 800494c:	2b00      	cmp	r3, #0
 800494e:	d00c      	beq.n	800496a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004954:	f043 0208 	orr.w	r2, r3, #8
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800495c:	2300      	movs	r3, #0
 800495e:	60bb      	str	r3, [r7, #8]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	60bb      	str	r3, [r7, #8]
 8004968:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800496e:	2b00      	cmp	r3, #0
 8004970:	d04f      	beq.n	8004a12 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	685a      	ldr	r2, [r3, #4]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004980:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2201      	movs	r2, #1
 8004986:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800498a:	69fb      	ldr	r3, [r7, #28]
 800498c:	f003 0302 	and.w	r3, r3, #2
 8004990:	2b00      	cmp	r3, #0
 8004992:	d104      	bne.n	800499e <HAL_SPI_IRQHandler+0x17e>
 8004994:	69fb      	ldr	r3, [r7, #28]
 8004996:	f003 0301 	and.w	r3, r3, #1
 800499a:	2b00      	cmp	r3, #0
 800499c:	d034      	beq.n	8004a08 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	685a      	ldr	r2, [r3, #4]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f022 0203 	bic.w	r2, r2, #3
 80049ac:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d011      	beq.n	80049da <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049ba:	4a18      	ldr	r2, [pc, #96]	@ (8004a1c <HAL_SPI_IRQHandler+0x1fc>)
 80049bc:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049c2:	4618      	mov	r0, r3
 80049c4:	f7fd f8cc 	bl	8001b60 <HAL_DMA_Abort_IT>
 80049c8:	4603      	mov	r3, r0
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d005      	beq.n	80049da <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049d2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d016      	beq.n	8004a10 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049e6:	4a0d      	ldr	r2, [pc, #52]	@ (8004a1c <HAL_SPI_IRQHandler+0x1fc>)
 80049e8:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049ee:	4618      	mov	r0, r3
 80049f0:	f7fd f8b6 	bl	8001b60 <HAL_DMA_Abort_IT>
 80049f4:	4603      	mov	r3, r0
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d00a      	beq.n	8004a10 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049fe:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8004a06:	e003      	b.n	8004a10 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	f000 f813 	bl	8004a34 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004a0e:	e000      	b.n	8004a12 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8004a10:	bf00      	nop
    return;
 8004a12:	bf00      	nop
  }
}
 8004a14:	3720      	adds	r7, #32
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}
 8004a1a:	bf00      	nop
 8004a1c:	08004b4b 	.word	0x08004b4b

08004a20 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b083      	sub	sp, #12
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8004a28:	bf00      	nop
 8004a2a:	370c      	adds	r7, #12
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a32:	4770      	bx	lr

08004a34 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b083      	sub	sp, #12
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004a3c:	bf00      	nop
 8004a3e:	370c      	adds	r7, #12
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	4770      	bx	lr

08004a48 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b086      	sub	sp, #24
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a54:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a56:	f7fc fd11 	bl	800147c <HAL_GetTick>
 8004a5a:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 0320 	and.w	r3, r3, #32
 8004a66:	2b20      	cmp	r3, #32
 8004a68:	d03b      	beq.n	8004ae2 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	685a      	ldr	r2, [r3, #4]
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f022 0220 	bic.w	r2, r2, #32
 8004a78:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	685a      	ldr	r2, [r3, #4]
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f022 0202 	bic.w	r2, r2, #2
 8004a88:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004a8a:	693a      	ldr	r2, [r7, #16]
 8004a8c:	2164      	movs	r1, #100	@ 0x64
 8004a8e:	6978      	ldr	r0, [r7, #20]
 8004a90:	f000 f98e 	bl	8004db0 <SPI_EndRxTxTransaction>
 8004a94:	4603      	mov	r3, r0
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d005      	beq.n	8004aa6 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a9e:	f043 0220 	orr.w	r2, r3, #32
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d10a      	bne.n	8004ac4 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004aae:	2300      	movs	r3, #0
 8004ab0:	60fb      	str	r3, [r7, #12]
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	68db      	ldr	r3, [r3, #12]
 8004ab8:	60fb      	str	r3, [r7, #12]
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	60fb      	str	r3, [r7, #12]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	2201      	movs	r2, #1
 8004ace:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d003      	beq.n	8004ae2 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004ada:	6978      	ldr	r0, [r7, #20]
 8004adc:	f7ff ffaa 	bl	8004a34 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004ae0:	e002      	b.n	8004ae8 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8004ae2:	6978      	ldr	r0, [r7, #20]
 8004ae4:	f7fb ff0d 	bl	8000902 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004ae8:	3718      	adds	r7, #24
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}

08004aee <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004aee:	b580      	push	{r7, lr}
 8004af0:	b084      	sub	sp, #16
 8004af2:	af00      	add	r7, sp, #0
 8004af4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004afa:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8004afc:	68f8      	ldr	r0, [r7, #12]
 8004afe:	f7ff ff8f 	bl	8004a20 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004b02:	bf00      	nop
 8004b04:	3710      	adds	r7, #16
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}

08004b0a <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004b0a:	b580      	push	{r7, lr}
 8004b0c:	b084      	sub	sp, #16
 8004b0e:	af00      	add	r7, sp, #0
 8004b10:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b16:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	685a      	ldr	r2, [r3, #4]
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f022 0203 	bic.w	r2, r2, #3
 8004b26:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b2c:	f043 0210 	orr.w	r2, r3, #16
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2201      	movs	r2, #1
 8004b38:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004b3c:	68f8      	ldr	r0, [r7, #12]
 8004b3e:	f7ff ff79 	bl	8004a34 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004b42:	bf00      	nop
 8004b44:	3710      	adds	r7, #16
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}

08004b4a <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004b4a:	b580      	push	{r7, lr}
 8004b4c:	b084      	sub	sp, #16
 8004b4e:	af00      	add	r7, sp, #0
 8004b50:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b56:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2200      	movs	r2, #0
 8004b64:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004b66:	68f8      	ldr	r0, [r7, #12]
 8004b68:	f7ff ff64 	bl	8004a34 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004b6c:	bf00      	nop
 8004b6e:	3710      	adds	r7, #16
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}

08004b74 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b088      	sub	sp, #32
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	60f8      	str	r0, [r7, #12]
 8004b7c:	60b9      	str	r1, [r7, #8]
 8004b7e:	603b      	str	r3, [r7, #0]
 8004b80:	4613      	mov	r3, r2
 8004b82:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004b84:	f7fc fc7a 	bl	800147c <HAL_GetTick>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b8c:	1a9b      	subs	r3, r3, r2
 8004b8e:	683a      	ldr	r2, [r7, #0]
 8004b90:	4413      	add	r3, r2
 8004b92:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004b94:	f7fc fc72 	bl	800147c <HAL_GetTick>
 8004b98:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004b9a:	4b39      	ldr	r3, [pc, #228]	@ (8004c80 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	015b      	lsls	r3, r3, #5
 8004ba0:	0d1b      	lsrs	r3, r3, #20
 8004ba2:	69fa      	ldr	r2, [r7, #28]
 8004ba4:	fb02 f303 	mul.w	r3, r2, r3
 8004ba8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004baa:	e054      	b.n	8004c56 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bb2:	d050      	beq.n	8004c56 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004bb4:	f7fc fc62 	bl	800147c <HAL_GetTick>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	69bb      	ldr	r3, [r7, #24]
 8004bbc:	1ad3      	subs	r3, r2, r3
 8004bbe:	69fa      	ldr	r2, [r7, #28]
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	d902      	bls.n	8004bca <SPI_WaitFlagStateUntilTimeout+0x56>
 8004bc4:	69fb      	ldr	r3, [r7, #28]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d13d      	bne.n	8004c46 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	685a      	ldr	r2, [r3, #4]
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004bd8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004be2:	d111      	bne.n	8004c08 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004bec:	d004      	beq.n	8004bf8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004bf6:	d107      	bne.n	8004c08 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c06:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c0c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c10:	d10f      	bne.n	8004c32 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	681a      	ldr	r2, [r3, #0]
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004c20:	601a      	str	r2, [r3, #0]
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004c30:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2201      	movs	r2, #1
 8004c36:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004c42:	2303      	movs	r3, #3
 8004c44:	e017      	b.n	8004c76 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d101      	bne.n	8004c50 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	3b01      	subs	r3, #1
 8004c54:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	689a      	ldr	r2, [r3, #8]
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	4013      	ands	r3, r2
 8004c60:	68ba      	ldr	r2, [r7, #8]
 8004c62:	429a      	cmp	r2, r3
 8004c64:	bf0c      	ite	eq
 8004c66:	2301      	moveq	r3, #1
 8004c68:	2300      	movne	r3, #0
 8004c6a:	b2db      	uxtb	r3, r3
 8004c6c:	461a      	mov	r2, r3
 8004c6e:	79fb      	ldrb	r3, [r7, #7]
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d19b      	bne.n	8004bac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004c74:	2300      	movs	r3, #0
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3720      	adds	r7, #32
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}
 8004c7e:	bf00      	nop
 8004c80:	20000008 	.word	0x20000008

08004c84 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b08a      	sub	sp, #40	@ 0x28
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	60f8      	str	r0, [r7, #12]
 8004c8c:	60b9      	str	r1, [r7, #8]
 8004c8e:	607a      	str	r2, [r7, #4]
 8004c90:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004c92:	2300      	movs	r3, #0
 8004c94:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004c96:	f7fc fbf1 	bl	800147c <HAL_GetTick>
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c9e:	1a9b      	subs	r3, r3, r2
 8004ca0:	683a      	ldr	r2, [r7, #0]
 8004ca2:	4413      	add	r3, r2
 8004ca4:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8004ca6:	f7fc fbe9 	bl	800147c <HAL_GetTick>
 8004caa:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	330c      	adds	r3, #12
 8004cb2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004cb4:	4b3d      	ldr	r3, [pc, #244]	@ (8004dac <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	4613      	mov	r3, r2
 8004cba:	009b      	lsls	r3, r3, #2
 8004cbc:	4413      	add	r3, r2
 8004cbe:	00da      	lsls	r2, r3, #3
 8004cc0:	1ad3      	subs	r3, r2, r3
 8004cc2:	0d1b      	lsrs	r3, r3, #20
 8004cc4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cc6:	fb02 f303 	mul.w	r3, r2, r3
 8004cca:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004ccc:	e060      	b.n	8004d90 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004cd4:	d107      	bne.n	8004ce6 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d104      	bne.n	8004ce6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004cdc:	69fb      	ldr	r3, [r7, #28]
 8004cde:	781b      	ldrb	r3, [r3, #0]
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004ce4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cec:	d050      	beq.n	8004d90 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004cee:	f7fc fbc5 	bl	800147c <HAL_GetTick>
 8004cf2:	4602      	mov	r2, r0
 8004cf4:	6a3b      	ldr	r3, [r7, #32]
 8004cf6:	1ad3      	subs	r3, r2, r3
 8004cf8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d902      	bls.n	8004d04 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d13d      	bne.n	8004d80 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	685a      	ldr	r2, [r3, #4]
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004d12:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004d1c:	d111      	bne.n	8004d42 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d26:	d004      	beq.n	8004d32 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d30:	d107      	bne.n	8004d42 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004d40:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d46:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d4a:	d10f      	bne.n	8004d6c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004d5a:	601a      	str	r2, [r3, #0]
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004d6a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2201      	movs	r2, #1
 8004d70:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2200      	movs	r2, #0
 8004d78:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004d7c:	2303      	movs	r3, #3
 8004d7e:	e010      	b.n	8004da2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004d80:	69bb      	ldr	r3, [r7, #24]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d101      	bne.n	8004d8a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004d86:	2300      	movs	r3, #0
 8004d88:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8004d8a:	69bb      	ldr	r3, [r7, #24]
 8004d8c:	3b01      	subs	r3, #1
 8004d8e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	689a      	ldr	r2, [r3, #8]
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	4013      	ands	r3, r2
 8004d9a:	687a      	ldr	r2, [r7, #4]
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	d196      	bne.n	8004cce <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004da0:	2300      	movs	r3, #0
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	3728      	adds	r7, #40	@ 0x28
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}
 8004daa:	bf00      	nop
 8004dac:	20000008 	.word	0x20000008

08004db0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b086      	sub	sp, #24
 8004db4:	af02      	add	r7, sp, #8
 8004db6:	60f8      	str	r0, [r7, #12]
 8004db8:	60b9      	str	r1, [r7, #8]
 8004dba:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	9300      	str	r3, [sp, #0]
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8004dc8:	68f8      	ldr	r0, [r7, #12]
 8004dca:	f7ff ff5b 	bl	8004c84 <SPI_WaitFifoStateUntilTimeout>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d007      	beq.n	8004de4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004dd8:	f043 0220 	orr.w	r2, r3, #32
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004de0:	2303      	movs	r3, #3
 8004de2:	e027      	b.n	8004e34 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	9300      	str	r3, [sp, #0]
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	2200      	movs	r2, #0
 8004dec:	2180      	movs	r1, #128	@ 0x80
 8004dee:	68f8      	ldr	r0, [r7, #12]
 8004df0:	f7ff fec0 	bl	8004b74 <SPI_WaitFlagStateUntilTimeout>
 8004df4:	4603      	mov	r3, r0
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d007      	beq.n	8004e0a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004dfe:	f043 0220 	orr.w	r2, r3, #32
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004e06:	2303      	movs	r3, #3
 8004e08:	e014      	b.n	8004e34 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	9300      	str	r3, [sp, #0]
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	2200      	movs	r2, #0
 8004e12:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004e16:	68f8      	ldr	r0, [r7, #12]
 8004e18:	f7ff ff34 	bl	8004c84 <SPI_WaitFifoStateUntilTimeout>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d007      	beq.n	8004e32 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e26:	f043 0220 	orr.w	r2, r3, #32
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004e2e:	2303      	movs	r3, #3
 8004e30:	e000      	b.n	8004e34 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004e32:	2300      	movs	r3, #0
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	3710      	adds	r7, #16
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}

08004e3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b082      	sub	sp, #8
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d101      	bne.n	8004e4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	e0e6      	b.n	800501c <HAL_TIM_Base_Init+0x1e0>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a74      	ldr	r2, [pc, #464]	@ (8005024 <HAL_TIM_Base_Init+0x1e8>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d036      	beq.n	8004ec6 <HAL_TIM_Base_Init+0x8a>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e60:	d031      	beq.n	8004ec6 <HAL_TIM_Base_Init+0x8a>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a70      	ldr	r2, [pc, #448]	@ (8005028 <HAL_TIM_Base_Init+0x1ec>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d02c      	beq.n	8004ec6 <HAL_TIM_Base_Init+0x8a>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a6e      	ldr	r2, [pc, #440]	@ (800502c <HAL_TIM_Base_Init+0x1f0>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d027      	beq.n	8004ec6 <HAL_TIM_Base_Init+0x8a>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a6d      	ldr	r2, [pc, #436]	@ (8005030 <HAL_TIM_Base_Init+0x1f4>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d022      	beq.n	8004ec6 <HAL_TIM_Base_Init+0x8a>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a6b      	ldr	r2, [pc, #428]	@ (8005034 <HAL_TIM_Base_Init+0x1f8>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d01d      	beq.n	8004ec6 <HAL_TIM_Base_Init+0x8a>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a6a      	ldr	r2, [pc, #424]	@ (8005038 <HAL_TIM_Base_Init+0x1fc>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d018      	beq.n	8004ec6 <HAL_TIM_Base_Init+0x8a>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a68      	ldr	r2, [pc, #416]	@ (800503c <HAL_TIM_Base_Init+0x200>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d013      	beq.n	8004ec6 <HAL_TIM_Base_Init+0x8a>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a67      	ldr	r2, [pc, #412]	@ (8005040 <HAL_TIM_Base_Init+0x204>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d00e      	beq.n	8004ec6 <HAL_TIM_Base_Init+0x8a>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a65      	ldr	r2, [pc, #404]	@ (8005044 <HAL_TIM_Base_Init+0x208>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d009      	beq.n	8004ec6 <HAL_TIM_Base_Init+0x8a>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a64      	ldr	r2, [pc, #400]	@ (8005048 <HAL_TIM_Base_Init+0x20c>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d004      	beq.n	8004ec6 <HAL_TIM_Base_Init+0x8a>
 8004ebc:	f44f 718b 	mov.w	r1, #278	@ 0x116
 8004ec0:	4862      	ldr	r0, [pc, #392]	@ (800504c <HAL_TIM_Base_Init+0x210>)
 8004ec2:	f7fb fd41 	bl	8000948 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d014      	beq.n	8004ef8 <HAL_TIM_Base_Init+0xbc>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	2b10      	cmp	r3, #16
 8004ed4:	d010      	beq.n	8004ef8 <HAL_TIM_Base_Init+0xbc>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	2b20      	cmp	r3, #32
 8004edc:	d00c      	beq.n	8004ef8 <HAL_TIM_Base_Init+0xbc>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	2b40      	cmp	r3, #64	@ 0x40
 8004ee4:	d008      	beq.n	8004ef8 <HAL_TIM_Base_Init+0xbc>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	2b60      	cmp	r3, #96	@ 0x60
 8004eec:	d004      	beq.n	8004ef8 <HAL_TIM_Base_Init+0xbc>
 8004eee:	f240 1117 	movw	r1, #279	@ 0x117
 8004ef2:	4856      	ldr	r0, [pc, #344]	@ (800504c <HAL_TIM_Base_Init+0x210>)
 8004ef4:	f7fb fd28 	bl	8000948 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	691b      	ldr	r3, [r3, #16]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d00e      	beq.n	8004f1e <HAL_TIM_Base_Init+0xe2>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	691b      	ldr	r3, [r3, #16]
 8004f04:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f08:	d009      	beq.n	8004f1e <HAL_TIM_Base_Init+0xe2>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	691b      	ldr	r3, [r3, #16]
 8004f0e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f12:	d004      	beq.n	8004f1e <HAL_TIM_Base_Init+0xe2>
 8004f14:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8004f18:	484c      	ldr	r0, [pc, #304]	@ (800504c <HAL_TIM_Base_Init+0x210>)
 8004f1a:	f7fb fd15 	bl	8000948 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f26:	d004      	beq.n	8004f32 <HAL_TIM_Base_Init+0xf6>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a40      	ldr	r2, [pc, #256]	@ (8005030 <HAL_TIM_Base_Init+0x1f4>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d107      	bne.n	8004f42 <HAL_TIM_Base_Init+0x106>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	68db      	ldr	r3, [r3, #12]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	bf14      	ite	ne
 8004f3a:	2301      	movne	r3, #1
 8004f3c:	2300      	moveq	r3, #0
 8004f3e:	b2db      	uxtb	r3, r3
 8004f40:	e00e      	b.n	8004f60 <HAL_TIM_Base_Init+0x124>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	68db      	ldr	r3, [r3, #12]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d006      	beq.n	8004f58 <HAL_TIM_Base_Init+0x11c>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	68db      	ldr	r3, [r3, #12]
 8004f4e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f52:	d201      	bcs.n	8004f58 <HAL_TIM_Base_Init+0x11c>
 8004f54:	2301      	movs	r3, #1
 8004f56:	e000      	b.n	8004f5a <HAL_TIM_Base_Init+0x11e>
 8004f58:	2300      	movs	r3, #0
 8004f5a:	f003 0301 	and.w	r3, r3, #1
 8004f5e:	b2db      	uxtb	r3, r3
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d104      	bne.n	8004f6e <HAL_TIM_Base_Init+0x132>
 8004f64:	f240 1119 	movw	r1, #281	@ 0x119
 8004f68:	4838      	ldr	r0, [pc, #224]	@ (800504c <HAL_TIM_Base_Init+0x210>)
 8004f6a:	f7fb fced 	bl	8000948 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	699b      	ldr	r3, [r3, #24]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d008      	beq.n	8004f88 <HAL_TIM_Base_Init+0x14c>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	699b      	ldr	r3, [r3, #24]
 8004f7a:	2b80      	cmp	r3, #128	@ 0x80
 8004f7c:	d004      	beq.n	8004f88 <HAL_TIM_Base_Init+0x14c>
 8004f7e:	f44f 718d 	mov.w	r1, #282	@ 0x11a
 8004f82:	4832      	ldr	r0, [pc, #200]	@ (800504c <HAL_TIM_Base_Init+0x210>)
 8004f84:	f7fb fce0 	bl	8000948 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f8e:	b2db      	uxtb	r3, r3
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d106      	bne.n	8004fa2 <HAL_TIM_Base_Init+0x166>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2200      	movs	r2, #0
 8004f98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	f7fc f90b 	bl	80011b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2202      	movs	r2, #2
 8004fa6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681a      	ldr	r2, [r3, #0]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	3304      	adds	r3, #4
 8004fb2:	4619      	mov	r1, r3
 8004fb4:	4610      	mov	r0, r2
 8004fb6:	f000 fb47 	bl	8005648 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2201      	movs	r2, #1
 8004fbe:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2201      	movs	r2, #1
 8004fc6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2201      	movs	r2, #1
 8004fce:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2201      	movs	r2, #1
 8004fd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2201      	movs	r2, #1
 8004fde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2201      	movs	r2, #1
 8004fee:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2201      	movs	r2, #1
 8004ff6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2201      	movs	r2, #1
 8005006:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2201      	movs	r2, #1
 800500e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2201      	movs	r2, #1
 8005016:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800501a:	2300      	movs	r3, #0
}
 800501c:	4618      	mov	r0, r3
 800501e:	3708      	adds	r7, #8
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}
 8005024:	40012c00 	.word	0x40012c00
 8005028:	40000400 	.word	0x40000400
 800502c:	40000800 	.word	0x40000800
 8005030:	40000c00 	.word	0x40000c00
 8005034:	40001000 	.word	0x40001000
 8005038:	40001400 	.word	0x40001400
 800503c:	40013400 	.word	0x40013400
 8005040:	40014000 	.word	0x40014000
 8005044:	40014400 	.word	0x40014400
 8005048:	40014800 	.word	0x40014800
 800504c:	080079c0 	.word	0x080079c0

08005050 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b086      	sub	sp, #24
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
 8005058:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d101      	bne.n	8005064 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	e1b0      	b.n	80053c6 <HAL_TIM_Encoder_Init+0x376>
  }

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a7f      	ldr	r2, [pc, #508]	@ (8005268 <HAL_TIM_Encoder_Init+0x218>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d01d      	beq.n	80050aa <HAL_TIM_Encoder_Init+0x5a>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005076:	d018      	beq.n	80050aa <HAL_TIM_Encoder_Init+0x5a>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a7b      	ldr	r2, [pc, #492]	@ (800526c <HAL_TIM_Encoder_Init+0x21c>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d013      	beq.n	80050aa <HAL_TIM_Encoder_Init+0x5a>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a7a      	ldr	r2, [pc, #488]	@ (8005270 <HAL_TIM_Encoder_Init+0x220>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d00e      	beq.n	80050aa <HAL_TIM_Encoder_Init+0x5a>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a78      	ldr	r2, [pc, #480]	@ (8005274 <HAL_TIM_Encoder_Init+0x224>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d009      	beq.n	80050aa <HAL_TIM_Encoder_Init+0x5a>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a77      	ldr	r2, [pc, #476]	@ (8005278 <HAL_TIM_Encoder_Init+0x228>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d004      	beq.n	80050aa <HAL_TIM_Encoder_Init+0x5a>
 80050a0:	f640 31e3 	movw	r1, #3043	@ 0xbe3
 80050a4:	4875      	ldr	r0, [pc, #468]	@ (800527c <HAL_TIM_Encoder_Init+0x22c>)
 80050a6:	f7fb fc4f 	bl	8000948 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d014      	beq.n	80050dc <HAL_TIM_Encoder_Init+0x8c>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	2b10      	cmp	r3, #16
 80050b8:	d010      	beq.n	80050dc <HAL_TIM_Encoder_Init+0x8c>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	2b20      	cmp	r3, #32
 80050c0:	d00c      	beq.n	80050dc <HAL_TIM_Encoder_Init+0x8c>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	2b40      	cmp	r3, #64	@ 0x40
 80050c8:	d008      	beq.n	80050dc <HAL_TIM_Encoder_Init+0x8c>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	2b60      	cmp	r3, #96	@ 0x60
 80050d0:	d004      	beq.n	80050dc <HAL_TIM_Encoder_Init+0x8c>
 80050d2:	f640 31e4 	movw	r1, #3044	@ 0xbe4
 80050d6:	4869      	ldr	r0, [pc, #420]	@ (800527c <HAL_TIM_Encoder_Init+0x22c>)
 80050d8:	f7fb fc36 	bl	8000948 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	691b      	ldr	r3, [r3, #16]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d00e      	beq.n	8005102 <HAL_TIM_Encoder_Init+0xb2>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	691b      	ldr	r3, [r3, #16]
 80050e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80050ec:	d009      	beq.n	8005102 <HAL_TIM_Encoder_Init+0xb2>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	691b      	ldr	r3, [r3, #16]
 80050f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80050f6:	d004      	beq.n	8005102 <HAL_TIM_Encoder_Init+0xb2>
 80050f8:	f640 31e5 	movw	r1, #3045	@ 0xbe5
 80050fc:	485f      	ldr	r0, [pc, #380]	@ (800527c <HAL_TIM_Encoder_Init+0x22c>)
 80050fe:	f7fb fc23 	bl	8000948 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	699b      	ldr	r3, [r3, #24]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d008      	beq.n	800511c <HAL_TIM_Encoder_Init+0xcc>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	699b      	ldr	r3, [r3, #24]
 800510e:	2b80      	cmp	r3, #128	@ 0x80
 8005110:	d004      	beq.n	800511c <HAL_TIM_Encoder_Init+0xcc>
 8005112:	f640 31e6 	movw	r1, #3046	@ 0xbe6
 8005116:	4859      	ldr	r0, [pc, #356]	@ (800527c <HAL_TIM_Encoder_Init+0x22c>)
 8005118:	f7fb fc16 	bl	8000948 <assert_failed>
  assert_param(IS_TIM_ENCODER_MODE(sConfig->EncoderMode));
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	2b01      	cmp	r3, #1
 8005122:	d00c      	beq.n	800513e <HAL_TIM_Encoder_Init+0xee>
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	2b02      	cmp	r3, #2
 800512a:	d008      	beq.n	800513e <HAL_TIM_Encoder_Init+0xee>
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	2b03      	cmp	r3, #3
 8005132:	d004      	beq.n	800513e <HAL_TIM_Encoder_Init+0xee>
 8005134:	f640 31e7 	movw	r1, #3047	@ 0xbe7
 8005138:	4850      	ldr	r0, [pc, #320]	@ (800527c <HAL_TIM_Encoder_Init+0x22c>)
 800513a:	f7fb fc05 	bl	8000948 <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC1Selection));
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	2b01      	cmp	r3, #1
 8005144:	d00c      	beq.n	8005160 <HAL_TIM_Encoder_Init+0x110>
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	2b02      	cmp	r3, #2
 800514c:	d008      	beq.n	8005160 <HAL_TIM_Encoder_Init+0x110>
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	2b03      	cmp	r3, #3
 8005154:	d004      	beq.n	8005160 <HAL_TIM_Encoder_Init+0x110>
 8005156:	f640 31e8 	movw	r1, #3048	@ 0xbe8
 800515a:	4848      	ldr	r0, [pc, #288]	@ (800527c <HAL_TIM_Encoder_Init+0x22c>)
 800515c:	f7fb fbf4 	bl	8000948 <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC2Selection));
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	699b      	ldr	r3, [r3, #24]
 8005164:	2b01      	cmp	r3, #1
 8005166:	d00c      	beq.n	8005182 <HAL_TIM_Encoder_Init+0x132>
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	699b      	ldr	r3, [r3, #24]
 800516c:	2b02      	cmp	r3, #2
 800516e:	d008      	beq.n	8005182 <HAL_TIM_Encoder_Init+0x132>
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	699b      	ldr	r3, [r3, #24]
 8005174:	2b03      	cmp	r3, #3
 8005176:	d004      	beq.n	8005182 <HAL_TIM_Encoder_Init+0x132>
 8005178:	f640 31e9 	movw	r1, #3049	@ 0xbe9
 800517c:	483f      	ldr	r0, [pc, #252]	@ (800527c <HAL_TIM_Encoder_Init+0x22c>)
 800517e:	f7fb fbe3 	bl	8000948 <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC1Polarity));
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d008      	beq.n	800519c <HAL_TIM_Encoder_Init+0x14c>
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	2b02      	cmp	r3, #2
 8005190:	d004      	beq.n	800519c <HAL_TIM_Encoder_Init+0x14c>
 8005192:	f640 31ea 	movw	r1, #3050	@ 0xbea
 8005196:	4839      	ldr	r0, [pc, #228]	@ (800527c <HAL_TIM_Encoder_Init+0x22c>)
 8005198:	f7fb fbd6 	bl	8000948 <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC2Polarity));
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	695b      	ldr	r3, [r3, #20]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d008      	beq.n	80051b6 <HAL_TIM_Encoder_Init+0x166>
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	695b      	ldr	r3, [r3, #20]
 80051a8:	2b02      	cmp	r3, #2
 80051aa:	d004      	beq.n	80051b6 <HAL_TIM_Encoder_Init+0x166>
 80051ac:	f640 31eb 	movw	r1, #3051	@ 0xbeb
 80051b0:	4832      	ldr	r0, [pc, #200]	@ (800527c <HAL_TIM_Encoder_Init+0x22c>)
 80051b2:	f7fb fbc9 	bl	8000948 <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	68db      	ldr	r3, [r3, #12]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d010      	beq.n	80051e0 <HAL_TIM_Encoder_Init+0x190>
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	68db      	ldr	r3, [r3, #12]
 80051c2:	2b04      	cmp	r3, #4
 80051c4:	d00c      	beq.n	80051e0 <HAL_TIM_Encoder_Init+0x190>
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	68db      	ldr	r3, [r3, #12]
 80051ca:	2b08      	cmp	r3, #8
 80051cc:	d008      	beq.n	80051e0 <HAL_TIM_Encoder_Init+0x190>
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	68db      	ldr	r3, [r3, #12]
 80051d2:	2b0c      	cmp	r3, #12
 80051d4:	d004      	beq.n	80051e0 <HAL_TIM_Encoder_Init+0x190>
 80051d6:	f640 31ec 	movw	r1, #3052	@ 0xbec
 80051da:	4828      	ldr	r0, [pc, #160]	@ (800527c <HAL_TIM_Encoder_Init+0x22c>)
 80051dc:	f7fb fbb4 	bl	8000948 <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	69db      	ldr	r3, [r3, #28]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d010      	beq.n	800520a <HAL_TIM_Encoder_Init+0x1ba>
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	69db      	ldr	r3, [r3, #28]
 80051ec:	2b04      	cmp	r3, #4
 80051ee:	d00c      	beq.n	800520a <HAL_TIM_Encoder_Init+0x1ba>
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	69db      	ldr	r3, [r3, #28]
 80051f4:	2b08      	cmp	r3, #8
 80051f6:	d008      	beq.n	800520a <HAL_TIM_Encoder_Init+0x1ba>
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	69db      	ldr	r3, [r3, #28]
 80051fc:	2b0c      	cmp	r3, #12
 80051fe:	d004      	beq.n	800520a <HAL_TIM_Encoder_Init+0x1ba>
 8005200:	f640 31ed 	movw	r1, #3053	@ 0xbed
 8005204:	481d      	ldr	r0, [pc, #116]	@ (800527c <HAL_TIM_Encoder_Init+0x22c>)
 8005206:	f7fb fb9f 	bl	8000948 <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	691b      	ldr	r3, [r3, #16]
 800520e:	2b0f      	cmp	r3, #15
 8005210:	d904      	bls.n	800521c <HAL_TIM_Encoder_Init+0x1cc>
 8005212:	f640 31ee 	movw	r1, #3054	@ 0xbee
 8005216:	4819      	ldr	r0, [pc, #100]	@ (800527c <HAL_TIM_Encoder_Init+0x22c>)
 8005218:	f7fb fb96 	bl	8000948 <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	6a1b      	ldr	r3, [r3, #32]
 8005220:	2b0f      	cmp	r3, #15
 8005222:	d904      	bls.n	800522e <HAL_TIM_Encoder_Init+0x1de>
 8005224:	f640 31ef 	movw	r1, #3055	@ 0xbef
 8005228:	4814      	ldr	r0, [pc, #80]	@ (800527c <HAL_TIM_Encoder_Init+0x22c>)
 800522a:	f7fb fb8d 	bl	8000948 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005236:	d004      	beq.n	8005242 <HAL_TIM_Encoder_Init+0x1f2>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a0d      	ldr	r2, [pc, #52]	@ (8005274 <HAL_TIM_Encoder_Init+0x224>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d107      	bne.n	8005252 <HAL_TIM_Encoder_Init+0x202>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	68db      	ldr	r3, [r3, #12]
 8005246:	2b00      	cmp	r3, #0
 8005248:	bf14      	ite	ne
 800524a:	2301      	movne	r3, #1
 800524c:	2300      	moveq	r3, #0
 800524e:	b2db      	uxtb	r3, r3
 8005250:	e01a      	b.n	8005288 <HAL_TIM_Encoder_Init+0x238>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	68db      	ldr	r3, [r3, #12]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d012      	beq.n	8005280 <HAL_TIM_Encoder_Init+0x230>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	68db      	ldr	r3, [r3, #12]
 800525e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005262:	d20d      	bcs.n	8005280 <HAL_TIM_Encoder_Init+0x230>
 8005264:	2301      	movs	r3, #1
 8005266:	e00c      	b.n	8005282 <HAL_TIM_Encoder_Init+0x232>
 8005268:	40012c00 	.word	0x40012c00
 800526c:	40000400 	.word	0x40000400
 8005270:	40000800 	.word	0x40000800
 8005274:	40000c00 	.word	0x40000c00
 8005278:	40013400 	.word	0x40013400
 800527c:	080079c0 	.word	0x080079c0
 8005280:	2300      	movs	r3, #0
 8005282:	f003 0301 	and.w	r3, r3, #1
 8005286:	b2db      	uxtb	r3, r3
 8005288:	2b00      	cmp	r3, #0
 800528a:	d104      	bne.n	8005296 <HAL_TIM_Encoder_Init+0x246>
 800528c:	f44f 613f 	mov.w	r1, #3056	@ 0xbf0
 8005290:	484f      	ldr	r0, [pc, #316]	@ (80053d0 <HAL_TIM_Encoder_Init+0x380>)
 8005292:	f7fb fb59 	bl	8000948 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800529c:	b2db      	uxtb	r3, r3
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d106      	bne.n	80052b0 <HAL_TIM_Encoder_Init+0x260>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2200      	movs	r2, #0
 80052a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f7fb fec2 	bl	8001034 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2202      	movs	r2, #2
 80052b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	689b      	ldr	r3, [r3, #8]
 80052be:	687a      	ldr	r2, [r7, #4]
 80052c0:	6812      	ldr	r2, [r2, #0]
 80052c2:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 80052c6:	f023 0307 	bic.w	r3, r3, #7
 80052ca:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681a      	ldr	r2, [r3, #0]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	3304      	adds	r3, #4
 80052d4:	4619      	mov	r1, r3
 80052d6:	4610      	mov	r0, r2
 80052d8:	f000 f9b6 	bl	8005648 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	699b      	ldr	r3, [r3, #24]
 80052ea:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	6a1b      	ldr	r3, [r3, #32]
 80052f2:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	697a      	ldr	r2, [r7, #20]
 80052fa:	4313      	orrs	r3, r2
 80052fc:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005304:	f023 0303 	bic.w	r3, r3, #3
 8005308:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	689a      	ldr	r2, [r3, #8]
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	699b      	ldr	r3, [r3, #24]
 8005312:	021b      	lsls	r3, r3, #8
 8005314:	4313      	orrs	r3, r2
 8005316:	693a      	ldr	r2, [r7, #16]
 8005318:	4313      	orrs	r3, r2
 800531a:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005322:	f023 030c 	bic.w	r3, r3, #12
 8005326:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800532e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005332:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	68da      	ldr	r2, [r3, #12]
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	69db      	ldr	r3, [r3, #28]
 800533c:	021b      	lsls	r3, r3, #8
 800533e:	4313      	orrs	r3, r2
 8005340:	693a      	ldr	r2, [r7, #16]
 8005342:	4313      	orrs	r3, r2
 8005344:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	691b      	ldr	r3, [r3, #16]
 800534a:	011a      	lsls	r2, r3, #4
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	6a1b      	ldr	r3, [r3, #32]
 8005350:	031b      	lsls	r3, r3, #12
 8005352:	4313      	orrs	r3, r2
 8005354:	693a      	ldr	r2, [r7, #16]
 8005356:	4313      	orrs	r3, r2
 8005358:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005360:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005368:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	685a      	ldr	r2, [r3, #4]
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	695b      	ldr	r3, [r3, #20]
 8005372:	011b      	lsls	r3, r3, #4
 8005374:	4313      	orrs	r3, r2
 8005376:	68fa      	ldr	r2, [r7, #12]
 8005378:	4313      	orrs	r3, r2
 800537a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	697a      	ldr	r2, [r7, #20]
 8005382:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	693a      	ldr	r2, [r7, #16]
 800538a:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	68fa      	ldr	r2, [r7, #12]
 8005392:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2201      	movs	r2, #1
 8005398:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2201      	movs	r2, #1
 80053a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2201      	movs	r2, #1
 80053a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2201      	movs	r2, #1
 80053b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2201      	movs	r2, #1
 80053b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2201      	movs	r2, #1
 80053c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80053c4:	2300      	movs	r3, #0
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	3718      	adds	r7, #24
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}
 80053ce:	bf00      	nop
 80053d0:	080079c0 	.word	0x080079c0

080053d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b084      	sub	sp, #16
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	68db      	ldr	r3, [r3, #12]
 80053e2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	691b      	ldr	r3, [r3, #16]
 80053ea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	f003 0302 	and.w	r3, r3, #2
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d020      	beq.n	8005438 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	f003 0302 	and.w	r3, r3, #2
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d01b      	beq.n	8005438 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f06f 0202 	mvn.w	r2, #2
 8005408:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2201      	movs	r2, #1
 800540e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	699b      	ldr	r3, [r3, #24]
 8005416:	f003 0303 	and.w	r3, r3, #3
 800541a:	2b00      	cmp	r3, #0
 800541c:	d003      	beq.n	8005426 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f000 f8f3 	bl	800560a <HAL_TIM_IC_CaptureCallback>
 8005424:	e005      	b.n	8005432 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f000 f8e5 	bl	80055f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f000 f8f6 	bl	800561e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2200      	movs	r2, #0
 8005436:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	f003 0304 	and.w	r3, r3, #4
 800543e:	2b00      	cmp	r3, #0
 8005440:	d020      	beq.n	8005484 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	f003 0304 	and.w	r3, r3, #4
 8005448:	2b00      	cmp	r3, #0
 800544a:	d01b      	beq.n	8005484 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f06f 0204 	mvn.w	r2, #4
 8005454:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2202      	movs	r2, #2
 800545a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	699b      	ldr	r3, [r3, #24]
 8005462:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005466:	2b00      	cmp	r3, #0
 8005468:	d003      	beq.n	8005472 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f000 f8cd 	bl	800560a <HAL_TIM_IC_CaptureCallback>
 8005470:	e005      	b.n	800547e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f000 f8bf 	bl	80055f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f000 f8d0 	bl	800561e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2200      	movs	r2, #0
 8005482:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	f003 0308 	and.w	r3, r3, #8
 800548a:	2b00      	cmp	r3, #0
 800548c:	d020      	beq.n	80054d0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	f003 0308 	and.w	r3, r3, #8
 8005494:	2b00      	cmp	r3, #0
 8005496:	d01b      	beq.n	80054d0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f06f 0208 	mvn.w	r2, #8
 80054a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2204      	movs	r2, #4
 80054a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	69db      	ldr	r3, [r3, #28]
 80054ae:	f003 0303 	and.w	r3, r3, #3
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d003      	beq.n	80054be <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f000 f8a7 	bl	800560a <HAL_TIM_IC_CaptureCallback>
 80054bc:	e005      	b.n	80054ca <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f000 f899 	bl	80055f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	f000 f8aa 	bl	800561e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2200      	movs	r2, #0
 80054ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	f003 0310 	and.w	r3, r3, #16
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d020      	beq.n	800551c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	f003 0310 	and.w	r3, r3, #16
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d01b      	beq.n	800551c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f06f 0210 	mvn.w	r2, #16
 80054ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2208      	movs	r2, #8
 80054f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	69db      	ldr	r3, [r3, #28]
 80054fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d003      	beq.n	800550a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f000 f881 	bl	800560a <HAL_TIM_IC_CaptureCallback>
 8005508:	e005      	b.n	8005516 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f000 f873 	bl	80055f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005510:	6878      	ldr	r0, [r7, #4]
 8005512:	f000 f884 	bl	800561e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2200      	movs	r2, #0
 800551a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	f003 0301 	and.w	r3, r3, #1
 8005522:	2b00      	cmp	r3, #0
 8005524:	d00c      	beq.n	8005540 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	f003 0301 	and.w	r3, r3, #1
 800552c:	2b00      	cmp	r3, #0
 800552e:	d007      	beq.n	8005540 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f06f 0201 	mvn.w	r2, #1
 8005538:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f000 f851 	bl	80055e2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005546:	2b00      	cmp	r3, #0
 8005548:	d104      	bne.n	8005554 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005550:	2b00      	cmp	r3, #0
 8005552:	d00c      	beq.n	800556e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800555a:	2b00      	cmp	r3, #0
 800555c:	d007      	beq.n	800556e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005566:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f000 fa73 	bl	8005a54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005574:	2b00      	cmp	r3, #0
 8005576:	d00c      	beq.n	8005592 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800557e:	2b00      	cmp	r3, #0
 8005580:	d007      	beq.n	8005592 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800558a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800558c:	6878      	ldr	r0, [r7, #4]
 800558e:	f000 fa6b 	bl	8005a68 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005598:	2b00      	cmp	r3, #0
 800559a:	d00c      	beq.n	80055b6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d007      	beq.n	80055b6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80055ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f000 f83e 	bl	8005632 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	f003 0320 	and.w	r3, r3, #32
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d00c      	beq.n	80055da <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	f003 0320 	and.w	r3, r3, #32
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d007      	beq.n	80055da <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f06f 0220 	mvn.w	r2, #32
 80055d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f000 fa33 	bl	8005a40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80055da:	bf00      	nop
 80055dc:	3710      	adds	r7, #16
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}

080055e2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80055e2:	b480      	push	{r7}
 80055e4:	b083      	sub	sp, #12
 80055e6:	af00      	add	r7, sp, #0
 80055e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80055ea:	bf00      	nop
 80055ec:	370c      	adds	r7, #12
 80055ee:	46bd      	mov	sp, r7
 80055f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f4:	4770      	bx	lr

080055f6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80055f6:	b480      	push	{r7}
 80055f8:	b083      	sub	sp, #12
 80055fa:	af00      	add	r7, sp, #0
 80055fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80055fe:	bf00      	nop
 8005600:	370c      	adds	r7, #12
 8005602:	46bd      	mov	sp, r7
 8005604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005608:	4770      	bx	lr

0800560a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800560a:	b480      	push	{r7}
 800560c:	b083      	sub	sp, #12
 800560e:	af00      	add	r7, sp, #0
 8005610:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005612:	bf00      	nop
 8005614:	370c      	adds	r7, #12
 8005616:	46bd      	mov	sp, r7
 8005618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561c:	4770      	bx	lr

0800561e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800561e:	b480      	push	{r7}
 8005620:	b083      	sub	sp, #12
 8005622:	af00      	add	r7, sp, #0
 8005624:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005626:	bf00      	nop
 8005628:	370c      	adds	r7, #12
 800562a:	46bd      	mov	sp, r7
 800562c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005630:	4770      	bx	lr

08005632 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005632:	b480      	push	{r7}
 8005634:	b083      	sub	sp, #12
 8005636:	af00      	add	r7, sp, #0
 8005638:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800563a:	bf00      	nop
 800563c:	370c      	adds	r7, #12
 800563e:	46bd      	mov	sp, r7
 8005640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005644:	4770      	bx	lr
	...

08005648 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005648:	b480      	push	{r7}
 800564a:	b085      	sub	sp, #20
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
 8005650:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	4a46      	ldr	r2, [pc, #280]	@ (8005774 <TIM_Base_SetConfig+0x12c>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d013      	beq.n	8005688 <TIM_Base_SetConfig+0x40>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005666:	d00f      	beq.n	8005688 <TIM_Base_SetConfig+0x40>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	4a43      	ldr	r2, [pc, #268]	@ (8005778 <TIM_Base_SetConfig+0x130>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d00b      	beq.n	8005688 <TIM_Base_SetConfig+0x40>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	4a42      	ldr	r2, [pc, #264]	@ (800577c <TIM_Base_SetConfig+0x134>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d007      	beq.n	8005688 <TIM_Base_SetConfig+0x40>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	4a41      	ldr	r2, [pc, #260]	@ (8005780 <TIM_Base_SetConfig+0x138>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d003      	beq.n	8005688 <TIM_Base_SetConfig+0x40>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	4a40      	ldr	r2, [pc, #256]	@ (8005784 <TIM_Base_SetConfig+0x13c>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d108      	bne.n	800569a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800568e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	68fa      	ldr	r2, [r7, #12]
 8005696:	4313      	orrs	r3, r2
 8005698:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	4a35      	ldr	r2, [pc, #212]	@ (8005774 <TIM_Base_SetConfig+0x12c>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d01f      	beq.n	80056e2 <TIM_Base_SetConfig+0x9a>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056a8:	d01b      	beq.n	80056e2 <TIM_Base_SetConfig+0x9a>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	4a32      	ldr	r2, [pc, #200]	@ (8005778 <TIM_Base_SetConfig+0x130>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d017      	beq.n	80056e2 <TIM_Base_SetConfig+0x9a>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	4a31      	ldr	r2, [pc, #196]	@ (800577c <TIM_Base_SetConfig+0x134>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d013      	beq.n	80056e2 <TIM_Base_SetConfig+0x9a>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	4a30      	ldr	r2, [pc, #192]	@ (8005780 <TIM_Base_SetConfig+0x138>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d00f      	beq.n	80056e2 <TIM_Base_SetConfig+0x9a>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	4a2f      	ldr	r2, [pc, #188]	@ (8005784 <TIM_Base_SetConfig+0x13c>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d00b      	beq.n	80056e2 <TIM_Base_SetConfig+0x9a>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	4a2e      	ldr	r2, [pc, #184]	@ (8005788 <TIM_Base_SetConfig+0x140>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d007      	beq.n	80056e2 <TIM_Base_SetConfig+0x9a>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	4a2d      	ldr	r2, [pc, #180]	@ (800578c <TIM_Base_SetConfig+0x144>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d003      	beq.n	80056e2 <TIM_Base_SetConfig+0x9a>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	4a2c      	ldr	r2, [pc, #176]	@ (8005790 <TIM_Base_SetConfig+0x148>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d108      	bne.n	80056f4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80056e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	68db      	ldr	r3, [r3, #12]
 80056ee:	68fa      	ldr	r2, [r7, #12]
 80056f0:	4313      	orrs	r3, r2
 80056f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	695b      	ldr	r3, [r3, #20]
 80056fe:	4313      	orrs	r3, r2
 8005700:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	68fa      	ldr	r2, [r7, #12]
 8005706:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	689a      	ldr	r2, [r3, #8]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	4a16      	ldr	r2, [pc, #88]	@ (8005774 <TIM_Base_SetConfig+0x12c>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d00f      	beq.n	8005740 <TIM_Base_SetConfig+0xf8>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	4a18      	ldr	r2, [pc, #96]	@ (8005784 <TIM_Base_SetConfig+0x13c>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d00b      	beq.n	8005740 <TIM_Base_SetConfig+0xf8>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	4a17      	ldr	r2, [pc, #92]	@ (8005788 <TIM_Base_SetConfig+0x140>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d007      	beq.n	8005740 <TIM_Base_SetConfig+0xf8>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	4a16      	ldr	r2, [pc, #88]	@ (800578c <TIM_Base_SetConfig+0x144>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d003      	beq.n	8005740 <TIM_Base_SetConfig+0xf8>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	4a15      	ldr	r2, [pc, #84]	@ (8005790 <TIM_Base_SetConfig+0x148>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d103      	bne.n	8005748 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	691a      	ldr	r2, [r3, #16]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2201      	movs	r2, #1
 800574c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	691b      	ldr	r3, [r3, #16]
 8005752:	f003 0301 	and.w	r3, r3, #1
 8005756:	2b01      	cmp	r3, #1
 8005758:	d105      	bne.n	8005766 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	691b      	ldr	r3, [r3, #16]
 800575e:	f023 0201 	bic.w	r2, r3, #1
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	611a      	str	r2, [r3, #16]
  }
}
 8005766:	bf00      	nop
 8005768:	3714      	adds	r7, #20
 800576a:	46bd      	mov	sp, r7
 800576c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005770:	4770      	bx	lr
 8005772:	bf00      	nop
 8005774:	40012c00 	.word	0x40012c00
 8005778:	40000400 	.word	0x40000400
 800577c:	40000800 	.word	0x40000800
 8005780:	40000c00 	.word	0x40000c00
 8005784:	40013400 	.word	0x40013400
 8005788:	40014000 	.word	0x40014000
 800578c:	40014400 	.word	0x40014400
 8005790:	40014800 	.word	0x40014800

08005794 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b084      	sub	sp, #16
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
 800579c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a34      	ldr	r2, [pc, #208]	@ (8005874 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d02c      	beq.n	8005802 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057b0:	d027      	beq.n	8005802 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a30      	ldr	r2, [pc, #192]	@ (8005878 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d022      	beq.n	8005802 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a2e      	ldr	r2, [pc, #184]	@ (800587c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d01d      	beq.n	8005802 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a2d      	ldr	r2, [pc, #180]	@ (8005880 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d018      	beq.n	8005802 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a2b      	ldr	r2, [pc, #172]	@ (8005884 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d013      	beq.n	8005802 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a2a      	ldr	r2, [pc, #168]	@ (8005888 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d00e      	beq.n	8005802 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a28      	ldr	r2, [pc, #160]	@ (800588c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d009      	beq.n	8005802 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a27      	ldr	r2, [pc, #156]	@ (8005890 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d004      	beq.n	8005802 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 80057f8:	f240 71ac 	movw	r1, #1964	@ 0x7ac
 80057fc:	4825      	ldr	r0, [pc, #148]	@ (8005894 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80057fe:	f7fb f8a3 	bl	8000948 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d020      	beq.n	800584c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	2b10      	cmp	r3, #16
 8005810:	d01c      	beq.n	800584c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	2b20      	cmp	r3, #32
 8005818:	d018      	beq.n	800584c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	2b30      	cmp	r3, #48	@ 0x30
 8005820:	d014      	beq.n	800584c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	2b40      	cmp	r3, #64	@ 0x40
 8005828:	d010      	beq.n	800584c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	2b50      	cmp	r3, #80	@ 0x50
 8005830:	d00c      	beq.n	800584c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	2b60      	cmp	r3, #96	@ 0x60
 8005838:	d008      	beq.n	800584c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	2b70      	cmp	r3, #112	@ 0x70
 8005840:	d004      	beq.n	800584c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005842:	f240 71ad 	movw	r1, #1965	@ 0x7ad
 8005846:	4813      	ldr	r0, [pc, #76]	@ (8005894 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005848:	f7fb f87e 	bl	8000948 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	689b      	ldr	r3, [r3, #8]
 8005850:	2b80      	cmp	r3, #128	@ 0x80
 8005852:	d008      	beq.n	8005866 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	689b      	ldr	r3, [r3, #8]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d004      	beq.n	8005866 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
 800585c:	f240 71ae 	movw	r1, #1966	@ 0x7ae
 8005860:	480c      	ldr	r0, [pc, #48]	@ (8005894 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005862:	f7fb f871 	bl	8000948 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800586c:	2b01      	cmp	r3, #1
 800586e:	d113      	bne.n	8005898 <HAL_TIMEx_MasterConfigSynchronization+0x104>
 8005870:	2302      	movs	r3, #2
 8005872:	e0d3      	b.n	8005a1c <HAL_TIMEx_MasterConfigSynchronization+0x288>
 8005874:	40012c00 	.word	0x40012c00
 8005878:	40000400 	.word	0x40000400
 800587c:	40000800 	.word	0x40000800
 8005880:	40000c00 	.word	0x40000c00
 8005884:	40001000 	.word	0x40001000
 8005888:	40001400 	.word	0x40001400
 800588c:	40013400 	.word	0x40013400
 8005890:	40014000 	.word	0x40014000
 8005894:	080079f8 	.word	0x080079f8
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2201      	movs	r2, #1
 800589c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2202      	movs	r2, #2
 80058a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	689b      	ldr	r3, [r3, #8]
 80058b6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a59      	ldr	r2, [pc, #356]	@ (8005a24 <HAL_TIMEx_MasterConfigSynchronization+0x290>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d004      	beq.n	80058cc <HAL_TIMEx_MasterConfigSynchronization+0x138>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a58      	ldr	r2, [pc, #352]	@ (8005a28 <HAL_TIMEx_MasterConfigSynchronization+0x294>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d161      	bne.n	8005990 <HAL_TIMEx_MasterConfigSynchronization+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d054      	beq.n	800597e <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80058dc:	d04f      	beq.n	800597e <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80058e6:	d04a      	beq.n	800597e <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80058f0:	d045      	beq.n	800597e <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80058fa:	d040      	beq.n	800597e <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8005904:	d03b      	beq.n	800597e <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800590e:	d036      	beq.n	800597e <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005918:	d031      	beq.n	800597e <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	f5b3 0fe0 	cmp.w	r3, #7340032	@ 0x700000
 8005922:	d02c      	beq.n	800597e <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800592c:	d027      	beq.n	800597e <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	f5b3 0f10 	cmp.w	r3, #9437184	@ 0x900000
 8005936:	d022      	beq.n	800597e <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8005940:	d01d      	beq.n	800597e <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	f5b3 0f30 	cmp.w	r3, #11534336	@ 0xb00000
 800594a:	d018      	beq.n	800597e <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005954:	d013      	beq.n	800597e <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	f5b3 0f50 	cmp.w	r3, #13631488	@ 0xd00000
 800595e:	d00e      	beq.n	800597e <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	f5b3 0f60 	cmp.w	r3, #14680064	@ 0xe00000
 8005968:	d009      	beq.n	800597e <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	f5b3 0f70 	cmp.w	r3, #15728640	@ 0xf00000
 8005972:	d004      	beq.n	800597e <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8005974:	f44f 61f8 	mov.w	r1, #1984	@ 0x7c0
 8005978:	482c      	ldr	r0, [pc, #176]	@ (8005a2c <HAL_TIMEx_MasterConfigSynchronization+0x298>)
 800597a:	f7fa ffe5 	bl	8000948 <assert_failed>

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005984:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	68fa      	ldr	r2, [r7, #12]
 800598c:	4313      	orrs	r3, r2
 800598e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005996:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	68fa      	ldr	r2, [r7, #12]
 800599e:	4313      	orrs	r3, r2
 80059a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	68fa      	ldr	r2, [r7, #12]
 80059a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a1d      	ldr	r2, [pc, #116]	@ (8005a24 <HAL_TIMEx_MasterConfigSynchronization+0x290>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d01d      	beq.n	80059f0 <HAL_TIMEx_MasterConfigSynchronization+0x25c>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059bc:	d018      	beq.n	80059f0 <HAL_TIMEx_MasterConfigSynchronization+0x25c>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a1b      	ldr	r2, [pc, #108]	@ (8005a30 <HAL_TIMEx_MasterConfigSynchronization+0x29c>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d013      	beq.n	80059f0 <HAL_TIMEx_MasterConfigSynchronization+0x25c>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a19      	ldr	r2, [pc, #100]	@ (8005a34 <HAL_TIMEx_MasterConfigSynchronization+0x2a0>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d00e      	beq.n	80059f0 <HAL_TIMEx_MasterConfigSynchronization+0x25c>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a18      	ldr	r2, [pc, #96]	@ (8005a38 <HAL_TIMEx_MasterConfigSynchronization+0x2a4>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d009      	beq.n	80059f0 <HAL_TIMEx_MasterConfigSynchronization+0x25c>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a11      	ldr	r2, [pc, #68]	@ (8005a28 <HAL_TIMEx_MasterConfigSynchronization+0x294>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d004      	beq.n	80059f0 <HAL_TIMEx_MasterConfigSynchronization+0x25c>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a14      	ldr	r2, [pc, #80]	@ (8005a3c <HAL_TIMEx_MasterConfigSynchronization+0x2a8>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d10c      	bne.n	8005a0a <HAL_TIMEx_MasterConfigSynchronization+0x276>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80059f6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	689b      	ldr	r3, [r3, #8]
 80059fc:	68ba      	ldr	r2, [r7, #8]
 80059fe:	4313      	orrs	r3, r2
 8005a00:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	68ba      	ldr	r2, [r7, #8]
 8005a08:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2201      	movs	r2, #1
 8005a0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2200      	movs	r2, #0
 8005a16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005a1a:	2300      	movs	r3, #0
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	3710      	adds	r7, #16
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}
 8005a24:	40012c00 	.word	0x40012c00
 8005a28:	40013400 	.word	0x40013400
 8005a2c:	080079f8 	.word	0x080079f8
 8005a30:	40000400 	.word	0x40000400
 8005a34:	40000800 	.word	0x40000800
 8005a38:	40000c00 	.word	0x40000c00
 8005a3c:	40014000 	.word	0x40014000

08005a40 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b083      	sub	sp, #12
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a48:	bf00      	nop
 8005a4a:	370c      	adds	r7, #12
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a52:	4770      	bx	lr

08005a54 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b083      	sub	sp, #12
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a5c:	bf00      	nop
 8005a5e:	370c      	adds	r7, #12
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	4770      	bx	lr

08005a68 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b083      	sub	sp, #12
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005a70:	bf00      	nop
 8005a72:	370c      	adds	r7, #12
 8005a74:	46bd      	mov	sp, r7
 8005a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7a:	4770      	bx	lr

08005a7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b082      	sub	sp, #8
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d101      	bne.n	8005a8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	e08b      	b.n	8005ba6 <HAL_UART_Init+0x12a>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	699b      	ldr	r3, [r3, #24]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d023      	beq.n	8005ade <HAL_UART_Init+0x62>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a45      	ldr	r2, [pc, #276]	@ (8005bb0 <HAL_UART_Init+0x134>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d041      	beq.n	8005b24 <HAL_UART_Init+0xa8>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a43      	ldr	r2, [pc, #268]	@ (8005bb4 <HAL_UART_Init+0x138>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d03c      	beq.n	8005b24 <HAL_UART_Init+0xa8>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a42      	ldr	r2, [pc, #264]	@ (8005bb8 <HAL_UART_Init+0x13c>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d037      	beq.n	8005b24 <HAL_UART_Init+0xa8>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a40      	ldr	r2, [pc, #256]	@ (8005bbc <HAL_UART_Init+0x140>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d032      	beq.n	8005b24 <HAL_UART_Init+0xa8>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a3f      	ldr	r2, [pc, #252]	@ (8005bc0 <HAL_UART_Init+0x144>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d02d      	beq.n	8005b24 <HAL_UART_Init+0xa8>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a3d      	ldr	r2, [pc, #244]	@ (8005bc4 <HAL_UART_Init+0x148>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d028      	beq.n	8005b24 <HAL_UART_Init+0xa8>
 8005ad2:	f44f 71a9 	mov.w	r1, #338	@ 0x152
 8005ad6:	483c      	ldr	r0, [pc, #240]	@ (8005bc8 <HAL_UART_Init+0x14c>)
 8005ad8:	f7fa ff36 	bl	8000948 <assert_failed>
 8005adc:	e022      	b.n	8005b24 <HAL_UART_Init+0xa8>
  }
  else
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a33      	ldr	r2, [pc, #204]	@ (8005bb0 <HAL_UART_Init+0x134>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d01d      	beq.n	8005b24 <HAL_UART_Init+0xa8>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4a31      	ldr	r2, [pc, #196]	@ (8005bb4 <HAL_UART_Init+0x138>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d018      	beq.n	8005b24 <HAL_UART_Init+0xa8>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a30      	ldr	r2, [pc, #192]	@ (8005bb8 <HAL_UART_Init+0x13c>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d013      	beq.n	8005b24 <HAL_UART_Init+0xa8>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a2e      	ldr	r2, [pc, #184]	@ (8005bbc <HAL_UART_Init+0x140>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d00e      	beq.n	8005b24 <HAL_UART_Init+0xa8>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a2d      	ldr	r2, [pc, #180]	@ (8005bc0 <HAL_UART_Init+0x144>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d009      	beq.n	8005b24 <HAL_UART_Init+0xa8>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a2b      	ldr	r2, [pc, #172]	@ (8005bc4 <HAL_UART_Init+0x148>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d004      	beq.n	8005b24 <HAL_UART_Init+0xa8>
 8005b1a:	f240 1157 	movw	r1, #343	@ 0x157
 8005b1e:	482a      	ldr	r0, [pc, #168]	@ (8005bc8 <HAL_UART_Init+0x14c>)
 8005b20:	f7fa ff12 	bl	8000948 <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d106      	bne.n	8005b3a <HAL_UART_Init+0xbe>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f7fb fbb1 	bl	800129c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2224      	movs	r2, #36	@ 0x24
 8005b3e:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	681a      	ldr	r2, [r3, #0]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f022 0201 	bic.w	r2, r2, #1
 8005b4e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d002      	beq.n	8005b5e <HAL_UART_Init+0xe2>
  {
    UART_AdvFeatureConfig(huart);
 8005b58:	6878      	ldr	r0, [r7, #4]
 8005b5a:	f000 fc1f 	bl	800639c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f000 f8be 	bl	8005ce0 <UART_SetConfig>
 8005b64:	4603      	mov	r3, r0
 8005b66:	2b01      	cmp	r3, #1
 8005b68:	d101      	bne.n	8005b6e <HAL_UART_Init+0xf2>
  {
    return HAL_ERROR;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	e01b      	b.n	8005ba6 <HAL_UART_Init+0x12a>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	685a      	ldr	r2, [r3, #4]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005b7c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	689a      	ldr	r2, [r3, #8]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005b8c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	681a      	ldr	r2, [r3, #0]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f042 0201 	orr.w	r2, r2, #1
 8005b9c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f000 fd5c 	bl	800665c <UART_CheckIdleState>
 8005ba4:	4603      	mov	r3, r0
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3708      	adds	r7, #8
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}
 8005bae:	bf00      	nop
 8005bb0:	40013800 	.word	0x40013800
 8005bb4:	40004400 	.word	0x40004400
 8005bb8:	40004800 	.word	0x40004800
 8005bbc:	40004c00 	.word	0x40004c00
 8005bc0:	40005000 	.word	0x40005000
 8005bc4:	40008000 	.word	0x40008000
 8005bc8:	08007a34 	.word	0x08007a34

08005bcc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b08a      	sub	sp, #40	@ 0x28
 8005bd0:	af02      	add	r7, sp, #8
 8005bd2:	60f8      	str	r0, [r7, #12]
 8005bd4:	60b9      	str	r1, [r7, #8]
 8005bd6:	603b      	str	r3, [r7, #0]
 8005bd8:	4613      	mov	r3, r2
 8005bda:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005be0:	2b20      	cmp	r3, #32
 8005be2:	d177      	bne.n	8005cd4 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d002      	beq.n	8005bf0 <HAL_UART_Transmit+0x24>
 8005bea:	88fb      	ldrh	r3, [r7, #6]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d101      	bne.n	8005bf4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	e070      	b.n	8005cd6 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	2221      	movs	r2, #33	@ 0x21
 8005c00:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c02:	f7fb fc3b 	bl	800147c <HAL_GetTick>
 8005c06:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	88fa      	ldrh	r2, [r7, #6]
 8005c0c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	88fa      	ldrh	r2, [r7, #6]
 8005c14:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	689b      	ldr	r3, [r3, #8]
 8005c1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c20:	d108      	bne.n	8005c34 <HAL_UART_Transmit+0x68>
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	691b      	ldr	r3, [r3, #16]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d104      	bne.n	8005c34 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	61bb      	str	r3, [r7, #24]
 8005c32:	e003      	b.n	8005c3c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c38:	2300      	movs	r3, #0
 8005c3a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005c3c:	e02f      	b.n	8005c9e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	9300      	str	r3, [sp, #0]
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	2200      	movs	r2, #0
 8005c46:	2180      	movs	r1, #128	@ 0x80
 8005c48:	68f8      	ldr	r0, [r7, #12]
 8005c4a:	f000 fdaf 	bl	80067ac <UART_WaitOnFlagUntilTimeout>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d004      	beq.n	8005c5e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2220      	movs	r2, #32
 8005c58:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005c5a:	2303      	movs	r3, #3
 8005c5c:	e03b      	b.n	8005cd6 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005c5e:	69fb      	ldr	r3, [r7, #28]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d10b      	bne.n	8005c7c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005c64:	69bb      	ldr	r3, [r7, #24]
 8005c66:	881a      	ldrh	r2, [r3, #0]
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c70:	b292      	uxth	r2, r2
 8005c72:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005c74:	69bb      	ldr	r3, [r7, #24]
 8005c76:	3302      	adds	r3, #2
 8005c78:	61bb      	str	r3, [r7, #24]
 8005c7a:	e007      	b.n	8005c8c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005c7c:	69fb      	ldr	r3, [r7, #28]
 8005c7e:	781a      	ldrb	r2, [r3, #0]
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005c86:	69fb      	ldr	r3, [r7, #28]
 8005c88:	3301      	adds	r3, #1
 8005c8a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005c92:	b29b      	uxth	r3, r3
 8005c94:	3b01      	subs	r3, #1
 8005c96:	b29a      	uxth	r2, r3
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005ca4:	b29b      	uxth	r3, r3
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d1c9      	bne.n	8005c3e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	9300      	str	r3, [sp, #0]
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	2140      	movs	r1, #64	@ 0x40
 8005cb4:	68f8      	ldr	r0, [r7, #12]
 8005cb6:	f000 fd79 	bl	80067ac <UART_WaitOnFlagUntilTimeout>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d004      	beq.n	8005cca <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	2220      	movs	r2, #32
 8005cc4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005cc6:	2303      	movs	r3, #3
 8005cc8:	e005      	b.n	8005cd6 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	2220      	movs	r2, #32
 8005cce:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	e000      	b.n	8005cd6 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005cd4:	2302      	movs	r3, #2
  }
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	3720      	adds	r7, #32
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bd80      	pop	{r7, pc}
	...

08005ce0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ce0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ce4:	b08a      	sub	sp, #40	@ 0x28
 8005ce6:	af00      	add	r7, sp, #0
 8005ce8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005cea:	2300      	movs	r3, #0
 8005cec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  uint32_t lpuart_ker_ck_pres;
#endif /* USART_PRESC_PRESCALER */
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	4a9e      	ldr	r2, [pc, #632]	@ (8005f70 <UART_SetConfig+0x290>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d904      	bls.n	8005d04 <UART_SetConfig+0x24>
 8005cfa:	f640 4158 	movw	r1, #3160	@ 0xc58
 8005cfe:	489d      	ldr	r0, [pc, #628]	@ (8005f74 <UART_SetConfig+0x294>)
 8005d00:	f7fa fe22 	bl	8000948 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	689b      	ldr	r3, [r3, #8]
 8005d08:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005d0c:	d00d      	beq.n	8005d2a <UART_SetConfig+0x4a>
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	689b      	ldr	r3, [r3, #8]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d009      	beq.n	8005d2a <UART_SetConfig+0x4a>
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	689b      	ldr	r3, [r3, #8]
 8005d1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d1e:	d004      	beq.n	8005d2a <UART_SetConfig+0x4a>
 8005d20:	f640 4159 	movw	r1, #3161	@ 0xc59
 8005d24:	4893      	ldr	r0, [pc, #588]	@ (8005f74 <UART_SetConfig+0x294>)
 8005d26:	f7fa fe0f 	bl	8000948 <assert_failed>
  if (UART_INSTANCE_LOWPOWER(huart))
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a92      	ldr	r2, [pc, #584]	@ (8005f78 <UART_SetConfig+0x298>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d10e      	bne.n	8005d52 <UART_SetConfig+0x72>
  {
    assert_param(IS_LPUART_STOPBITS(huart->Init.StopBits));
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	68db      	ldr	r3, [r3, #12]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d030      	beq.n	8005d9e <UART_SetConfig+0xbe>
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	68db      	ldr	r3, [r3, #12]
 8005d40:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d44:	d02b      	beq.n	8005d9e <UART_SetConfig+0xbe>
 8005d46:	f640 415c 	movw	r1, #3164	@ 0xc5c
 8005d4a:	488a      	ldr	r0, [pc, #552]	@ (8005f74 <UART_SetConfig+0x294>)
 8005d4c:	f7fa fdfc 	bl	8000948 <assert_failed>
 8005d50:	e025      	b.n	8005d9e <UART_SetConfig+0xbe>
  }
  else
  {
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	68db      	ldr	r3, [r3, #12]
 8005d56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d5a:	d012      	beq.n	8005d82 <UART_SetConfig+0xa2>
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	68db      	ldr	r3, [r3, #12]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d00e      	beq.n	8005d82 <UART_SetConfig+0xa2>
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	68db      	ldr	r3, [r3, #12]
 8005d68:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005d6c:	d009      	beq.n	8005d82 <UART_SetConfig+0xa2>
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	68db      	ldr	r3, [r3, #12]
 8005d72:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d76:	d004      	beq.n	8005d82 <UART_SetConfig+0xa2>
 8005d78:	f44f 6146 	mov.w	r1, #3168	@ 0xc60
 8005d7c:	487d      	ldr	r0, [pc, #500]	@ (8005f74 <UART_SetConfig+0x294>)
 8005d7e:	f7fa fde3 	bl	8000948 <assert_failed>
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	6a1b      	ldr	r3, [r3, #32]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d009      	beq.n	8005d9e <UART_SetConfig+0xbe>
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	6a1b      	ldr	r3, [r3, #32]
 8005d8e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005d92:	d004      	beq.n	8005d9e <UART_SetConfig+0xbe>
 8005d94:	f640 4161 	movw	r1, #3169	@ 0xc61
 8005d98:	4876      	ldr	r0, [pc, #472]	@ (8005f74 <UART_SetConfig+0x294>)
 8005d9a:	f7fa fdd5 	bl	8000948 <assert_failed>
  }

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	691b      	ldr	r3, [r3, #16]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d00e      	beq.n	8005dc4 <UART_SetConfig+0xe4>
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	691b      	ldr	r3, [r3, #16]
 8005daa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005dae:	d009      	beq.n	8005dc4 <UART_SetConfig+0xe4>
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	691b      	ldr	r3, [r3, #16]
 8005db4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005db8:	d004      	beq.n	8005dc4 <UART_SetConfig+0xe4>
 8005dba:	f640 4164 	movw	r1, #3172	@ 0xc64
 8005dbe:	486d      	ldr	r0, [pc, #436]	@ (8005f74 <UART_SetConfig+0x294>)
 8005dc0:	f7fa fdc2 	bl	8000948 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	695b      	ldr	r3, [r3, #20]
 8005dc8:	f023 030c 	bic.w	r3, r3, #12
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d103      	bne.n	8005dd8 <UART_SetConfig+0xf8>
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	695b      	ldr	r3, [r3, #20]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d104      	bne.n	8005de2 <UART_SetConfig+0x102>
 8005dd8:	f640 4165 	movw	r1, #3173	@ 0xc65
 8005ddc:	4865      	ldr	r0, [pc, #404]	@ (8005f74 <UART_SetConfig+0x294>)
 8005dde:	f7fa fdb3 	bl	8000948 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	699b      	ldr	r3, [r3, #24]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d013      	beq.n	8005e12 <UART_SetConfig+0x132>
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	699b      	ldr	r3, [r3, #24]
 8005dee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005df2:	d00e      	beq.n	8005e12 <UART_SetConfig+0x132>
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	699b      	ldr	r3, [r3, #24]
 8005df8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005dfc:	d009      	beq.n	8005e12 <UART_SetConfig+0x132>
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	699b      	ldr	r3, [r3, #24]
 8005e02:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005e06:	d004      	beq.n	8005e12 <UART_SetConfig+0x132>
 8005e08:	f640 4166 	movw	r1, #3174	@ 0xc66
 8005e0c:	4859      	ldr	r0, [pc, #356]	@ (8005f74 <UART_SetConfig+0x294>)
 8005e0e:	f7fa fd9b 	bl	8000948 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	69db      	ldr	r3, [r3, #28]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d009      	beq.n	8005e2e <UART_SetConfig+0x14e>
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	69db      	ldr	r3, [r3, #28]
 8005e1e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005e22:	d004      	beq.n	8005e2e <UART_SetConfig+0x14e>
 8005e24:	f640 4167 	movw	r1, #3175	@ 0xc67
 8005e28:	4852      	ldr	r0, [pc, #328]	@ (8005f74 <UART_SetConfig+0x294>)
 8005e2a:	f7fa fd8d 	bl	8000948 <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	689a      	ldr	r2, [r3, #8]
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	691b      	ldr	r3, [r3, #16]
 8005e36:	431a      	orrs	r2, r3
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	695b      	ldr	r3, [r3, #20]
 8005e3c:	431a      	orrs	r2, r3
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	69db      	ldr	r3, [r3, #28]
 8005e42:	4313      	orrs	r3, r2
 8005e44:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	681a      	ldr	r2, [r3, #0]
 8005e4c:	4b4b      	ldr	r3, [pc, #300]	@ (8005f7c <UART_SetConfig+0x29c>)
 8005e4e:	4013      	ands	r3, r2
 8005e50:	68fa      	ldr	r2, [r7, #12]
 8005e52:	6812      	ldr	r2, [r2, #0]
 8005e54:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005e56:	430b      	orrs	r3, r1
 8005e58:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	68da      	ldr	r2, [r3, #12]
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	430a      	orrs	r2, r1
 8005e6e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	699b      	ldr	r3, [r3, #24]
 8005e74:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a3f      	ldr	r2, [pc, #252]	@ (8005f78 <UART_SetConfig+0x298>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d004      	beq.n	8005e8a <UART_SetConfig+0x1aa>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	6a1b      	ldr	r3, [r3, #32]
 8005e84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e86:	4313      	orrs	r3, r2
 8005e88:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	689b      	ldr	r3, [r3, #8]
 8005e90:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e9a:	430a      	orrs	r2, r1
 8005e9c:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4a37      	ldr	r2, [pc, #220]	@ (8005f80 <UART_SetConfig+0x2a0>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d125      	bne.n	8005ef4 <UART_SetConfig+0x214>
 8005ea8:	4b36      	ldr	r3, [pc, #216]	@ (8005f84 <UART_SetConfig+0x2a4>)
 8005eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005eae:	f003 0303 	and.w	r3, r3, #3
 8005eb2:	2b03      	cmp	r3, #3
 8005eb4:	d81a      	bhi.n	8005eec <UART_SetConfig+0x20c>
 8005eb6:	a201      	add	r2, pc, #4	@ (adr r2, 8005ebc <UART_SetConfig+0x1dc>)
 8005eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ebc:	08005ecd 	.word	0x08005ecd
 8005ec0:	08005edd 	.word	0x08005edd
 8005ec4:	08005ed5 	.word	0x08005ed5
 8005ec8:	08005ee5 	.word	0x08005ee5
 8005ecc:	2301      	movs	r3, #1
 8005ece:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ed2:	e114      	b.n	80060fe <UART_SetConfig+0x41e>
 8005ed4:	2302      	movs	r3, #2
 8005ed6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005eda:	e110      	b.n	80060fe <UART_SetConfig+0x41e>
 8005edc:	2304      	movs	r3, #4
 8005ede:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ee2:	e10c      	b.n	80060fe <UART_SetConfig+0x41e>
 8005ee4:	2308      	movs	r3, #8
 8005ee6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005eea:	e108      	b.n	80060fe <UART_SetConfig+0x41e>
 8005eec:	2310      	movs	r3, #16
 8005eee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ef2:	e104      	b.n	80060fe <UART_SetConfig+0x41e>
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a23      	ldr	r2, [pc, #140]	@ (8005f88 <UART_SetConfig+0x2a8>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d146      	bne.n	8005f8c <UART_SetConfig+0x2ac>
 8005efe:	4b21      	ldr	r3, [pc, #132]	@ (8005f84 <UART_SetConfig+0x2a4>)
 8005f00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f04:	f003 030c 	and.w	r3, r3, #12
 8005f08:	2b0c      	cmp	r3, #12
 8005f0a:	d82d      	bhi.n	8005f68 <UART_SetConfig+0x288>
 8005f0c:	a201      	add	r2, pc, #4	@ (adr r2, 8005f14 <UART_SetConfig+0x234>)
 8005f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f12:	bf00      	nop
 8005f14:	08005f49 	.word	0x08005f49
 8005f18:	08005f69 	.word	0x08005f69
 8005f1c:	08005f69 	.word	0x08005f69
 8005f20:	08005f69 	.word	0x08005f69
 8005f24:	08005f59 	.word	0x08005f59
 8005f28:	08005f69 	.word	0x08005f69
 8005f2c:	08005f69 	.word	0x08005f69
 8005f30:	08005f69 	.word	0x08005f69
 8005f34:	08005f51 	.word	0x08005f51
 8005f38:	08005f69 	.word	0x08005f69
 8005f3c:	08005f69 	.word	0x08005f69
 8005f40:	08005f69 	.word	0x08005f69
 8005f44:	08005f61 	.word	0x08005f61
 8005f48:	2300      	movs	r3, #0
 8005f4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f4e:	e0d6      	b.n	80060fe <UART_SetConfig+0x41e>
 8005f50:	2302      	movs	r3, #2
 8005f52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f56:	e0d2      	b.n	80060fe <UART_SetConfig+0x41e>
 8005f58:	2304      	movs	r3, #4
 8005f5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f5e:	e0ce      	b.n	80060fe <UART_SetConfig+0x41e>
 8005f60:	2308      	movs	r3, #8
 8005f62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f66:	e0ca      	b.n	80060fe <UART_SetConfig+0x41e>
 8005f68:	2310      	movs	r3, #16
 8005f6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f6e:	e0c6      	b.n	80060fe <UART_SetConfig+0x41e>
 8005f70:	00989680 	.word	0x00989680
 8005f74:	08007a34 	.word	0x08007a34
 8005f78:	40008000 	.word	0x40008000
 8005f7c:	efff69f3 	.word	0xefff69f3
 8005f80:	40013800 	.word	0x40013800
 8005f84:	40021000 	.word	0x40021000
 8005f88:	40004400 	.word	0x40004400
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4aae      	ldr	r2, [pc, #696]	@ (800624c <UART_SetConfig+0x56c>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d125      	bne.n	8005fe2 <UART_SetConfig+0x302>
 8005f96:	4bae      	ldr	r3, [pc, #696]	@ (8006250 <UART_SetConfig+0x570>)
 8005f98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f9c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005fa0:	2b30      	cmp	r3, #48	@ 0x30
 8005fa2:	d016      	beq.n	8005fd2 <UART_SetConfig+0x2f2>
 8005fa4:	2b30      	cmp	r3, #48	@ 0x30
 8005fa6:	d818      	bhi.n	8005fda <UART_SetConfig+0x2fa>
 8005fa8:	2b20      	cmp	r3, #32
 8005faa:	d00a      	beq.n	8005fc2 <UART_SetConfig+0x2e2>
 8005fac:	2b20      	cmp	r3, #32
 8005fae:	d814      	bhi.n	8005fda <UART_SetConfig+0x2fa>
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d002      	beq.n	8005fba <UART_SetConfig+0x2da>
 8005fb4:	2b10      	cmp	r3, #16
 8005fb6:	d008      	beq.n	8005fca <UART_SetConfig+0x2ea>
 8005fb8:	e00f      	b.n	8005fda <UART_SetConfig+0x2fa>
 8005fba:	2300      	movs	r3, #0
 8005fbc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005fc0:	e09d      	b.n	80060fe <UART_SetConfig+0x41e>
 8005fc2:	2302      	movs	r3, #2
 8005fc4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005fc8:	e099      	b.n	80060fe <UART_SetConfig+0x41e>
 8005fca:	2304      	movs	r3, #4
 8005fcc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005fd0:	e095      	b.n	80060fe <UART_SetConfig+0x41e>
 8005fd2:	2308      	movs	r3, #8
 8005fd4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005fd8:	e091      	b.n	80060fe <UART_SetConfig+0x41e>
 8005fda:	2310      	movs	r3, #16
 8005fdc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005fe0:	e08d      	b.n	80060fe <UART_SetConfig+0x41e>
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a9b      	ldr	r2, [pc, #620]	@ (8006254 <UART_SetConfig+0x574>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d125      	bne.n	8006038 <UART_SetConfig+0x358>
 8005fec:	4b98      	ldr	r3, [pc, #608]	@ (8006250 <UART_SetConfig+0x570>)
 8005fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ff2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005ff6:	2bc0      	cmp	r3, #192	@ 0xc0
 8005ff8:	d016      	beq.n	8006028 <UART_SetConfig+0x348>
 8005ffa:	2bc0      	cmp	r3, #192	@ 0xc0
 8005ffc:	d818      	bhi.n	8006030 <UART_SetConfig+0x350>
 8005ffe:	2b80      	cmp	r3, #128	@ 0x80
 8006000:	d00a      	beq.n	8006018 <UART_SetConfig+0x338>
 8006002:	2b80      	cmp	r3, #128	@ 0x80
 8006004:	d814      	bhi.n	8006030 <UART_SetConfig+0x350>
 8006006:	2b00      	cmp	r3, #0
 8006008:	d002      	beq.n	8006010 <UART_SetConfig+0x330>
 800600a:	2b40      	cmp	r3, #64	@ 0x40
 800600c:	d008      	beq.n	8006020 <UART_SetConfig+0x340>
 800600e:	e00f      	b.n	8006030 <UART_SetConfig+0x350>
 8006010:	2300      	movs	r3, #0
 8006012:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006016:	e072      	b.n	80060fe <UART_SetConfig+0x41e>
 8006018:	2302      	movs	r3, #2
 800601a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800601e:	e06e      	b.n	80060fe <UART_SetConfig+0x41e>
 8006020:	2304      	movs	r3, #4
 8006022:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006026:	e06a      	b.n	80060fe <UART_SetConfig+0x41e>
 8006028:	2308      	movs	r3, #8
 800602a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800602e:	e066      	b.n	80060fe <UART_SetConfig+0x41e>
 8006030:	2310      	movs	r3, #16
 8006032:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006036:	e062      	b.n	80060fe <UART_SetConfig+0x41e>
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a86      	ldr	r2, [pc, #536]	@ (8006258 <UART_SetConfig+0x578>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d12a      	bne.n	8006098 <UART_SetConfig+0x3b8>
 8006042:	4b83      	ldr	r3, [pc, #524]	@ (8006250 <UART_SetConfig+0x570>)
 8006044:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006048:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800604c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006050:	d01a      	beq.n	8006088 <UART_SetConfig+0x3a8>
 8006052:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006056:	d81b      	bhi.n	8006090 <UART_SetConfig+0x3b0>
 8006058:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800605c:	d00c      	beq.n	8006078 <UART_SetConfig+0x398>
 800605e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006062:	d815      	bhi.n	8006090 <UART_SetConfig+0x3b0>
 8006064:	2b00      	cmp	r3, #0
 8006066:	d003      	beq.n	8006070 <UART_SetConfig+0x390>
 8006068:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800606c:	d008      	beq.n	8006080 <UART_SetConfig+0x3a0>
 800606e:	e00f      	b.n	8006090 <UART_SetConfig+0x3b0>
 8006070:	2300      	movs	r3, #0
 8006072:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006076:	e042      	b.n	80060fe <UART_SetConfig+0x41e>
 8006078:	2302      	movs	r3, #2
 800607a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800607e:	e03e      	b.n	80060fe <UART_SetConfig+0x41e>
 8006080:	2304      	movs	r3, #4
 8006082:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006086:	e03a      	b.n	80060fe <UART_SetConfig+0x41e>
 8006088:	2308      	movs	r3, #8
 800608a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800608e:	e036      	b.n	80060fe <UART_SetConfig+0x41e>
 8006090:	2310      	movs	r3, #16
 8006092:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006096:	e032      	b.n	80060fe <UART_SetConfig+0x41e>
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a6f      	ldr	r2, [pc, #444]	@ (800625c <UART_SetConfig+0x57c>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d12a      	bne.n	80060f8 <UART_SetConfig+0x418>
 80060a2:	4b6b      	ldr	r3, [pc, #428]	@ (8006250 <UART_SetConfig+0x570>)
 80060a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060a8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80060ac:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80060b0:	d01a      	beq.n	80060e8 <UART_SetConfig+0x408>
 80060b2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80060b6:	d81b      	bhi.n	80060f0 <UART_SetConfig+0x410>
 80060b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80060bc:	d00c      	beq.n	80060d8 <UART_SetConfig+0x3f8>
 80060be:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80060c2:	d815      	bhi.n	80060f0 <UART_SetConfig+0x410>
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d003      	beq.n	80060d0 <UART_SetConfig+0x3f0>
 80060c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80060cc:	d008      	beq.n	80060e0 <UART_SetConfig+0x400>
 80060ce:	e00f      	b.n	80060f0 <UART_SetConfig+0x410>
 80060d0:	2300      	movs	r3, #0
 80060d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80060d6:	e012      	b.n	80060fe <UART_SetConfig+0x41e>
 80060d8:	2302      	movs	r3, #2
 80060da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80060de:	e00e      	b.n	80060fe <UART_SetConfig+0x41e>
 80060e0:	2304      	movs	r3, #4
 80060e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80060e6:	e00a      	b.n	80060fe <UART_SetConfig+0x41e>
 80060e8:	2308      	movs	r3, #8
 80060ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80060ee:	e006      	b.n	80060fe <UART_SetConfig+0x41e>
 80060f0:	2310      	movs	r3, #16
 80060f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80060f6:	e002      	b.n	80060fe <UART_SetConfig+0x41e>
 80060f8:	2310      	movs	r3, #16
 80060fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4a56      	ldr	r2, [pc, #344]	@ (800625c <UART_SetConfig+0x57c>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d17a      	bne.n	80061fe <UART_SetConfig+0x51e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006108:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800610c:	2b08      	cmp	r3, #8
 800610e:	d824      	bhi.n	800615a <UART_SetConfig+0x47a>
 8006110:	a201      	add	r2, pc, #4	@ (adr r2, 8006118 <UART_SetConfig+0x438>)
 8006112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006116:	bf00      	nop
 8006118:	0800613d 	.word	0x0800613d
 800611c:	0800615b 	.word	0x0800615b
 8006120:	08006145 	.word	0x08006145
 8006124:	0800615b 	.word	0x0800615b
 8006128:	0800614b 	.word	0x0800614b
 800612c:	0800615b 	.word	0x0800615b
 8006130:	0800615b 	.word	0x0800615b
 8006134:	0800615b 	.word	0x0800615b
 8006138:	08006153 	.word	0x08006153
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800613c:	f7fd f866 	bl	800320c <HAL_RCC_GetPCLK1Freq>
 8006140:	61f8      	str	r0, [r7, #28]
        break;
 8006142:	e010      	b.n	8006166 <UART_SetConfig+0x486>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006144:	4b46      	ldr	r3, [pc, #280]	@ (8006260 <UART_SetConfig+0x580>)
 8006146:	61fb      	str	r3, [r7, #28]
        break;
 8006148:	e00d      	b.n	8006166 <UART_SetConfig+0x486>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800614a:	f7fc ffc7 	bl	80030dc <HAL_RCC_GetSysClockFreq>
 800614e:	61f8      	str	r0, [r7, #28]
        break;
 8006150:	e009      	b.n	8006166 <UART_SetConfig+0x486>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006152:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006156:	61fb      	str	r3, [r7, #28]
        break;
 8006158:	e005      	b.n	8006166 <UART_SetConfig+0x486>
      default:
        pclk = 0U;
 800615a:	2300      	movs	r3, #0
 800615c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800615e:	2301      	movs	r3, #1
 8006160:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006164:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006166:	69fb      	ldr	r3, [r7, #28]
 8006168:	2b00      	cmp	r3, #0
 800616a:	f000 8107 	beq.w	800637c <UART_SetConfig+0x69c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	685a      	ldr	r2, [r3, #4]
 8006172:	4613      	mov	r3, r2
 8006174:	005b      	lsls	r3, r3, #1
 8006176:	4413      	add	r3, r2
 8006178:	69fa      	ldr	r2, [r7, #28]
 800617a:	429a      	cmp	r2, r3
 800617c:	d305      	bcc.n	800618a <UART_SetConfig+0x4aa>
          (pclk > (4096U * huart->Init.BaudRate)))
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006184:	69fa      	ldr	r2, [r7, #28]
 8006186:	429a      	cmp	r2, r3
 8006188:	d903      	bls.n	8006192 <UART_SetConfig+0x4b2>
      {
        ret = HAL_ERROR;
 800618a:	2301      	movs	r3, #1
 800618c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006190:	e0f4      	b.n	800637c <UART_SetConfig+0x69c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006192:	69fb      	ldr	r3, [r7, #28]
 8006194:	2200      	movs	r2, #0
 8006196:	461c      	mov	r4, r3
 8006198:	4615      	mov	r5, r2
 800619a:	f04f 0200 	mov.w	r2, #0
 800619e:	f04f 0300 	mov.w	r3, #0
 80061a2:	022b      	lsls	r3, r5, #8
 80061a4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80061a8:	0222      	lsls	r2, r4, #8
 80061aa:	68f9      	ldr	r1, [r7, #12]
 80061ac:	6849      	ldr	r1, [r1, #4]
 80061ae:	0849      	lsrs	r1, r1, #1
 80061b0:	2000      	movs	r0, #0
 80061b2:	4688      	mov	r8, r1
 80061b4:	4681      	mov	r9, r0
 80061b6:	eb12 0a08 	adds.w	sl, r2, r8
 80061ba:	eb43 0b09 	adc.w	fp, r3, r9
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	685b      	ldr	r3, [r3, #4]
 80061c2:	2200      	movs	r2, #0
 80061c4:	603b      	str	r3, [r7, #0]
 80061c6:	607a      	str	r2, [r7, #4]
 80061c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80061cc:	4650      	mov	r0, sl
 80061ce:	4659      	mov	r1, fp
 80061d0:	f7fa f84e 	bl	8000270 <__aeabi_uldivmod>
 80061d4:	4602      	mov	r2, r0
 80061d6:	460b      	mov	r3, r1
 80061d8:	4613      	mov	r3, r2
 80061da:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80061dc:	69bb      	ldr	r3, [r7, #24]
 80061de:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80061e2:	d308      	bcc.n	80061f6 <UART_SetConfig+0x516>
 80061e4:	69bb      	ldr	r3, [r7, #24]
 80061e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80061ea:	d204      	bcs.n	80061f6 <UART_SetConfig+0x516>
        {
          huart->Instance->BRR = usartdiv;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	69ba      	ldr	r2, [r7, #24]
 80061f2:	60da      	str	r2, [r3, #12]
 80061f4:	e0c2      	b.n	800637c <UART_SetConfig+0x69c>
        }
        else
        {
          ret = HAL_ERROR;
 80061f6:	2301      	movs	r3, #1
 80061f8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80061fc:	e0be      	b.n	800637c <UART_SetConfig+0x69c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	69db      	ldr	r3, [r3, #28]
 8006202:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006206:	d16a      	bne.n	80062de <UART_SetConfig+0x5fe>
  {
    switch (clocksource)
 8006208:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800620c:	2b08      	cmp	r3, #8
 800620e:	d834      	bhi.n	800627a <UART_SetConfig+0x59a>
 8006210:	a201      	add	r2, pc, #4	@ (adr r2, 8006218 <UART_SetConfig+0x538>)
 8006212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006216:	bf00      	nop
 8006218:	0800623d 	.word	0x0800623d
 800621c:	08006245 	.word	0x08006245
 8006220:	08006265 	.word	0x08006265
 8006224:	0800627b 	.word	0x0800627b
 8006228:	0800626b 	.word	0x0800626b
 800622c:	0800627b 	.word	0x0800627b
 8006230:	0800627b 	.word	0x0800627b
 8006234:	0800627b 	.word	0x0800627b
 8006238:	08006273 	.word	0x08006273
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800623c:	f7fc ffe6 	bl	800320c <HAL_RCC_GetPCLK1Freq>
 8006240:	61f8      	str	r0, [r7, #28]
        break;
 8006242:	e020      	b.n	8006286 <UART_SetConfig+0x5a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006244:	f7fc fff8 	bl	8003238 <HAL_RCC_GetPCLK2Freq>
 8006248:	61f8      	str	r0, [r7, #28]
        break;
 800624a:	e01c      	b.n	8006286 <UART_SetConfig+0x5a6>
 800624c:	40004800 	.word	0x40004800
 8006250:	40021000 	.word	0x40021000
 8006254:	40004c00 	.word	0x40004c00
 8006258:	40005000 	.word	0x40005000
 800625c:	40008000 	.word	0x40008000
 8006260:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006264:	4b4c      	ldr	r3, [pc, #304]	@ (8006398 <UART_SetConfig+0x6b8>)
 8006266:	61fb      	str	r3, [r7, #28]
        break;
 8006268:	e00d      	b.n	8006286 <UART_SetConfig+0x5a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800626a:	f7fc ff37 	bl	80030dc <HAL_RCC_GetSysClockFreq>
 800626e:	61f8      	str	r0, [r7, #28]
        break;
 8006270:	e009      	b.n	8006286 <UART_SetConfig+0x5a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006272:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006276:	61fb      	str	r3, [r7, #28]
        break;
 8006278:	e005      	b.n	8006286 <UART_SetConfig+0x5a6>
      default:
        pclk = 0U;
 800627a:	2300      	movs	r3, #0
 800627c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800627e:	2301      	movs	r3, #1
 8006280:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006284:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006286:	69fb      	ldr	r3, [r7, #28]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d077      	beq.n	800637c <UART_SetConfig+0x69c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800628c:	69fb      	ldr	r3, [r7, #28]
 800628e:	005a      	lsls	r2, r3, #1
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	685b      	ldr	r3, [r3, #4]
 8006294:	085b      	lsrs	r3, r3, #1
 8006296:	441a      	add	r2, r3
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	685b      	ldr	r3, [r3, #4]
 800629c:	fbb2 f3f3 	udiv	r3, r2, r3
 80062a0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80062a2:	69bb      	ldr	r3, [r7, #24]
 80062a4:	2b0f      	cmp	r3, #15
 80062a6:	d916      	bls.n	80062d6 <UART_SetConfig+0x5f6>
 80062a8:	69bb      	ldr	r3, [r7, #24]
 80062aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80062ae:	d212      	bcs.n	80062d6 <UART_SetConfig+0x5f6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80062b0:	69bb      	ldr	r3, [r7, #24]
 80062b2:	b29b      	uxth	r3, r3
 80062b4:	f023 030f 	bic.w	r3, r3, #15
 80062b8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80062ba:	69bb      	ldr	r3, [r7, #24]
 80062bc:	085b      	lsrs	r3, r3, #1
 80062be:	b29b      	uxth	r3, r3
 80062c0:	f003 0307 	and.w	r3, r3, #7
 80062c4:	b29a      	uxth	r2, r3
 80062c6:	8afb      	ldrh	r3, [r7, #22]
 80062c8:	4313      	orrs	r3, r2
 80062ca:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	8afa      	ldrh	r2, [r7, #22]
 80062d2:	60da      	str	r2, [r3, #12]
 80062d4:	e052      	b.n	800637c <UART_SetConfig+0x69c>
      }
      else
      {
        ret = HAL_ERROR;
 80062d6:	2301      	movs	r3, #1
 80062d8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80062dc:	e04e      	b.n	800637c <UART_SetConfig+0x69c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80062de:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80062e2:	2b08      	cmp	r3, #8
 80062e4:	d827      	bhi.n	8006336 <UART_SetConfig+0x656>
 80062e6:	a201      	add	r2, pc, #4	@ (adr r2, 80062ec <UART_SetConfig+0x60c>)
 80062e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062ec:	08006311 	.word	0x08006311
 80062f0:	08006319 	.word	0x08006319
 80062f4:	08006321 	.word	0x08006321
 80062f8:	08006337 	.word	0x08006337
 80062fc:	08006327 	.word	0x08006327
 8006300:	08006337 	.word	0x08006337
 8006304:	08006337 	.word	0x08006337
 8006308:	08006337 	.word	0x08006337
 800630c:	0800632f 	.word	0x0800632f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006310:	f7fc ff7c 	bl	800320c <HAL_RCC_GetPCLK1Freq>
 8006314:	61f8      	str	r0, [r7, #28]
        break;
 8006316:	e014      	b.n	8006342 <UART_SetConfig+0x662>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006318:	f7fc ff8e 	bl	8003238 <HAL_RCC_GetPCLK2Freq>
 800631c:	61f8      	str	r0, [r7, #28]
        break;
 800631e:	e010      	b.n	8006342 <UART_SetConfig+0x662>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006320:	4b1d      	ldr	r3, [pc, #116]	@ (8006398 <UART_SetConfig+0x6b8>)
 8006322:	61fb      	str	r3, [r7, #28]
        break;
 8006324:	e00d      	b.n	8006342 <UART_SetConfig+0x662>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006326:	f7fc fed9 	bl	80030dc <HAL_RCC_GetSysClockFreq>
 800632a:	61f8      	str	r0, [r7, #28]
        break;
 800632c:	e009      	b.n	8006342 <UART_SetConfig+0x662>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800632e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006332:	61fb      	str	r3, [r7, #28]
        break;
 8006334:	e005      	b.n	8006342 <UART_SetConfig+0x662>
      default:
        pclk = 0U;
 8006336:	2300      	movs	r3, #0
 8006338:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800633a:	2301      	movs	r3, #1
 800633c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006340:	bf00      	nop
    }

    if (pclk != 0U)
 8006342:	69fb      	ldr	r3, [r7, #28]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d019      	beq.n	800637c <UART_SetConfig+0x69c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	685b      	ldr	r3, [r3, #4]
 800634c:	085a      	lsrs	r2, r3, #1
 800634e:	69fb      	ldr	r3, [r7, #28]
 8006350:	441a      	add	r2, r3
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	685b      	ldr	r3, [r3, #4]
 8006356:	fbb2 f3f3 	udiv	r3, r2, r3
 800635a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800635c:	69bb      	ldr	r3, [r7, #24]
 800635e:	2b0f      	cmp	r3, #15
 8006360:	d909      	bls.n	8006376 <UART_SetConfig+0x696>
 8006362:	69bb      	ldr	r3, [r7, #24]
 8006364:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006368:	d205      	bcs.n	8006376 <UART_SetConfig+0x696>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800636a:	69bb      	ldr	r3, [r7, #24]
 800636c:	b29a      	uxth	r2, r3
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	60da      	str	r2, [r3, #12]
 8006374:	e002      	b.n	800637c <UART_SetConfig+0x69c>
      }
      else
      {
        ret = HAL_ERROR;
 8006376:	2301      	movs	r3, #1
 8006378:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	2200      	movs	r2, #0
 8006380:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	2200      	movs	r2, #0
 8006386:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006388:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800638c:	4618      	mov	r0, r3
 800638e:	3728      	adds	r7, #40	@ 0x28
 8006390:	46bd      	mov	sp, r7
 8006392:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006396:	bf00      	nop
 8006398:	00f42400 	.word	0x00f42400

0800639c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b082      	sub	sp, #8
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063a8:	2bff      	cmp	r3, #255	@ 0xff
 80063aa:	d904      	bls.n	80063b6 <UART_AdvFeatureConfig+0x1a>
 80063ac:	f640 514d 	movw	r1, #3405	@ 0xd4d
 80063b0:	4891      	ldr	r0, [pc, #580]	@ (80065f8 <UART_AdvFeatureConfig+0x25c>)
 80063b2:	f7fa fac9 	bl	8000948 <assert_failed>

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063ba:	f003 0308 	and.w	r3, r3, #8
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d018      	beq.n	80063f4 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d009      	beq.n	80063de <UART_AdvFeatureConfig+0x42>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80063d2:	d004      	beq.n	80063de <UART_AdvFeatureConfig+0x42>
 80063d4:	f640 5152 	movw	r1, #3410	@ 0xd52
 80063d8:	4887      	ldr	r0, [pc, #540]	@ (80065f8 <UART_AdvFeatureConfig+0x25c>)
 80063da:	f7fa fab5 	bl	8000948 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	685b      	ldr	r3, [r3, #4]
 80063e4:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	430a      	orrs	r2, r1
 80063f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063f8:	f003 0301 	and.w	r3, r3, #1
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d018      	beq.n	8006432 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006404:	2b00      	cmp	r3, #0
 8006406:	d009      	beq.n	800641c <UART_AdvFeatureConfig+0x80>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800640c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006410:	d004      	beq.n	800641c <UART_AdvFeatureConfig+0x80>
 8006412:	f640 5159 	movw	r1, #3417	@ 0xd59
 8006416:	4878      	ldr	r0, [pc, #480]	@ (80065f8 <UART_AdvFeatureConfig+0x25c>)
 8006418:	f7fa fa96 	bl	8000948 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	685b      	ldr	r3, [r3, #4]
 8006422:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	430a      	orrs	r2, r1
 8006430:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006436:	f003 0302 	and.w	r3, r3, #2
 800643a:	2b00      	cmp	r3, #0
 800643c:	d018      	beq.n	8006470 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006442:	2b00      	cmp	r3, #0
 8006444:	d009      	beq.n	800645a <UART_AdvFeatureConfig+0xbe>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800644a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800644e:	d004      	beq.n	800645a <UART_AdvFeatureConfig+0xbe>
 8006450:	f44f 6156 	mov.w	r1, #3424	@ 0xd60
 8006454:	4868      	ldr	r0, [pc, #416]	@ (80065f8 <UART_AdvFeatureConfig+0x25c>)
 8006456:	f7fa fa77 	bl	8000948 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	430a      	orrs	r2, r1
 800646e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006474:	f003 0304 	and.w	r3, r3, #4
 8006478:	2b00      	cmp	r3, #0
 800647a:	d018      	beq.n	80064ae <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006480:	2b00      	cmp	r3, #0
 8006482:	d009      	beq.n	8006498 <UART_AdvFeatureConfig+0xfc>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006488:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800648c:	d004      	beq.n	8006498 <UART_AdvFeatureConfig+0xfc>
 800648e:	f640 5167 	movw	r1, #3431	@ 0xd67
 8006492:	4859      	ldr	r0, [pc, #356]	@ (80065f8 <UART_AdvFeatureConfig+0x25c>)
 8006494:	f7fa fa58 	bl	8000948 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	430a      	orrs	r2, r1
 80064ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064b2:	f003 0310 	and.w	r3, r3, #16
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d018      	beq.n	80064ec <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d009      	beq.n	80064d6 <UART_AdvFeatureConfig+0x13a>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80064ca:	d004      	beq.n	80064d6 <UART_AdvFeatureConfig+0x13a>
 80064cc:	f640 516e 	movw	r1, #3438	@ 0xd6e
 80064d0:	4849      	ldr	r0, [pc, #292]	@ (80065f8 <UART_AdvFeatureConfig+0x25c>)
 80064d2:	f7fa fa39 	bl	8000948 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	689b      	ldr	r3, [r3, #8]
 80064dc:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	430a      	orrs	r2, r1
 80064ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064f0:	f003 0320 	and.w	r3, r3, #32
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d018      	beq.n	800652a <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d009      	beq.n	8006514 <UART_AdvFeatureConfig+0x178>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006504:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006508:	d004      	beq.n	8006514 <UART_AdvFeatureConfig+0x178>
 800650a:	f640 5175 	movw	r1, #3445	@ 0xd75
 800650e:	483a      	ldr	r0, [pc, #232]	@ (80065f8 <UART_AdvFeatureConfig+0x25c>)
 8006510:	f7fa fa1a 	bl	8000948 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	689b      	ldr	r3, [r3, #8]
 800651a:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	430a      	orrs	r2, r1
 8006528:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800652e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006532:	2b00      	cmp	r3, #0
 8006534:	d06c      	beq.n	8006610 <UART_AdvFeatureConfig+0x274>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a30      	ldr	r2, [pc, #192]	@ (80065fc <UART_AdvFeatureConfig+0x260>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d018      	beq.n	8006572 <UART_AdvFeatureConfig+0x1d6>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a2e      	ldr	r2, [pc, #184]	@ (8006600 <UART_AdvFeatureConfig+0x264>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d013      	beq.n	8006572 <UART_AdvFeatureConfig+0x1d6>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a2d      	ldr	r2, [pc, #180]	@ (8006604 <UART_AdvFeatureConfig+0x268>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d00e      	beq.n	8006572 <UART_AdvFeatureConfig+0x1d6>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a2b      	ldr	r2, [pc, #172]	@ (8006608 <UART_AdvFeatureConfig+0x26c>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d009      	beq.n	8006572 <UART_AdvFeatureConfig+0x1d6>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4a2a      	ldr	r2, [pc, #168]	@ (800660c <UART_AdvFeatureConfig+0x270>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d004      	beq.n	8006572 <UART_AdvFeatureConfig+0x1d6>
 8006568:	f640 517c 	movw	r1, #3452	@ 0xd7c
 800656c:	4822      	ldr	r0, [pc, #136]	@ (80065f8 <UART_AdvFeatureConfig+0x25c>)
 800656e:	f7fa f9eb 	bl	8000948 <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006576:	2b00      	cmp	r3, #0
 8006578:	d009      	beq.n	800658e <UART_AdvFeatureConfig+0x1f2>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800657e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006582:	d004      	beq.n	800658e <UART_AdvFeatureConfig+0x1f2>
 8006584:	f640 517d 	movw	r1, #3453	@ 0xd7d
 8006588:	481b      	ldr	r0, [pc, #108]	@ (80065f8 <UART_AdvFeatureConfig+0x25c>)
 800658a:	f7fa f9dd 	bl	8000948 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	430a      	orrs	r2, r1
 80065a2:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065a8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80065ac:	d130      	bne.n	8006610 <UART_AdvFeatureConfig+0x274>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d013      	beq.n	80065de <UART_AdvFeatureConfig+0x242>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065ba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80065be:	d00e      	beq.n	80065de <UART_AdvFeatureConfig+0x242>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065c4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80065c8:	d009      	beq.n	80065de <UART_AdvFeatureConfig+0x242>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065ce:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80065d2:	d004      	beq.n	80065de <UART_AdvFeatureConfig+0x242>
 80065d4:	f640 5182 	movw	r1, #3458	@ 0xd82
 80065d8:	4807      	ldr	r0, [pc, #28]	@ (80065f8 <UART_AdvFeatureConfig+0x25c>)
 80065da:	f7fa f9b5 	bl	8000948 <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	430a      	orrs	r2, r1
 80065f2:	605a      	str	r2, [r3, #4]
 80065f4:	e00c      	b.n	8006610 <UART_AdvFeatureConfig+0x274>
 80065f6:	bf00      	nop
 80065f8:	08007a34 	.word	0x08007a34
 80065fc:	40013800 	.word	0x40013800
 8006600:	40004400 	.word	0x40004400
 8006604:	40004800 	.word	0x40004800
 8006608:	40004c00 	.word	0x40004c00
 800660c:	40005000 	.word	0x40005000
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006614:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006618:	2b00      	cmp	r3, #0
 800661a:	d018      	beq.n	800664e <UART_AdvFeatureConfig+0x2b2>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006620:	2b00      	cmp	r3, #0
 8006622:	d009      	beq.n	8006638 <UART_AdvFeatureConfig+0x29c>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006628:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800662c:	d004      	beq.n	8006638 <UART_AdvFeatureConfig+0x29c>
 800662e:	f640 518a 	movw	r1, #3466	@ 0xd8a
 8006632:	4809      	ldr	r0, [pc, #36]	@ (8006658 <UART_AdvFeatureConfig+0x2bc>)
 8006634:	f7fa f988 	bl	8000948 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	685b      	ldr	r3, [r3, #4]
 800663e:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	430a      	orrs	r2, r1
 800664c:	605a      	str	r2, [r3, #4]
  }
}
 800664e:	bf00      	nop
 8006650:	3708      	adds	r7, #8
 8006652:	46bd      	mov	sp, r7
 8006654:	bd80      	pop	{r7, pc}
 8006656:	bf00      	nop
 8006658:	08007a34 	.word	0x08007a34

0800665c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b098      	sub	sp, #96	@ 0x60
 8006660:	af02      	add	r7, sp, #8
 8006662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2200      	movs	r2, #0
 8006668:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800666c:	f7fa ff06 	bl	800147c <HAL_GetTick>
 8006670:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f003 0308 	and.w	r3, r3, #8
 800667c:	2b08      	cmp	r3, #8
 800667e:	d12e      	bne.n	80066de <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006680:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006684:	9300      	str	r3, [sp, #0]
 8006686:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006688:	2200      	movs	r2, #0
 800668a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f000 f88c 	bl	80067ac <UART_WaitOnFlagUntilTimeout>
 8006694:	4603      	mov	r3, r0
 8006696:	2b00      	cmp	r3, #0
 8006698:	d021      	beq.n	80066de <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066a2:	e853 3f00 	ldrex	r3, [r3]
 80066a6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80066a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80066ae:	653b      	str	r3, [r7, #80]	@ 0x50
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	461a      	mov	r2, r3
 80066b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80066b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80066ba:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066bc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80066be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80066c0:	e841 2300 	strex	r3, r2, [r1]
 80066c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80066c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d1e6      	bne.n	800669a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2220      	movs	r2, #32
 80066d0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2200      	movs	r2, #0
 80066d6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80066da:	2303      	movs	r3, #3
 80066dc:	e062      	b.n	80067a4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f003 0304 	and.w	r3, r3, #4
 80066e8:	2b04      	cmp	r3, #4
 80066ea:	d149      	bne.n	8006780 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80066ec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80066f0:	9300      	str	r3, [sp, #0]
 80066f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80066f4:	2200      	movs	r2, #0
 80066f6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f000 f856 	bl	80067ac <UART_WaitOnFlagUntilTimeout>
 8006700:	4603      	mov	r3, r0
 8006702:	2b00      	cmp	r3, #0
 8006704:	d03c      	beq.n	8006780 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800670c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800670e:	e853 3f00 	ldrex	r3, [r3]
 8006712:	623b      	str	r3, [r7, #32]
   return(result);
 8006714:	6a3b      	ldr	r3, [r7, #32]
 8006716:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800671a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	461a      	mov	r2, r3
 8006722:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006724:	633b      	str	r3, [r7, #48]	@ 0x30
 8006726:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006728:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800672a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800672c:	e841 2300 	strex	r3, r2, [r1]
 8006730:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006732:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006734:	2b00      	cmp	r3, #0
 8006736:	d1e6      	bne.n	8006706 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	3308      	adds	r3, #8
 800673e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	e853 3f00 	ldrex	r3, [r3]
 8006746:	60fb      	str	r3, [r7, #12]
   return(result);
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	f023 0301 	bic.w	r3, r3, #1
 800674e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	3308      	adds	r3, #8
 8006756:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006758:	61fa      	str	r2, [r7, #28]
 800675a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800675c:	69b9      	ldr	r1, [r7, #24]
 800675e:	69fa      	ldr	r2, [r7, #28]
 8006760:	e841 2300 	strex	r3, r2, [r1]
 8006764:	617b      	str	r3, [r7, #20]
   return(result);
 8006766:	697b      	ldr	r3, [r7, #20]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d1e5      	bne.n	8006738 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2220      	movs	r2, #32
 8006770:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2200      	movs	r2, #0
 8006778:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800677c:	2303      	movs	r3, #3
 800677e:	e011      	b.n	80067a4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2220      	movs	r2, #32
 8006784:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2220      	movs	r2, #32
 800678a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2200      	movs	r2, #0
 8006792:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2200      	movs	r2, #0
 8006798:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2200      	movs	r2, #0
 800679e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80067a2:	2300      	movs	r3, #0
}
 80067a4:	4618      	mov	r0, r3
 80067a6:	3758      	adds	r7, #88	@ 0x58
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}

080067ac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b084      	sub	sp, #16
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	60f8      	str	r0, [r7, #12]
 80067b4:	60b9      	str	r1, [r7, #8]
 80067b6:	603b      	str	r3, [r7, #0]
 80067b8:	4613      	mov	r3, r2
 80067ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067bc:	e04f      	b.n	800685e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067be:	69bb      	ldr	r3, [r7, #24]
 80067c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067c4:	d04b      	beq.n	800685e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067c6:	f7fa fe59 	bl	800147c <HAL_GetTick>
 80067ca:	4602      	mov	r2, r0
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	1ad3      	subs	r3, r2, r3
 80067d0:	69ba      	ldr	r2, [r7, #24]
 80067d2:	429a      	cmp	r2, r3
 80067d4:	d302      	bcc.n	80067dc <UART_WaitOnFlagUntilTimeout+0x30>
 80067d6:	69bb      	ldr	r3, [r7, #24]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d101      	bne.n	80067e0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80067dc:	2303      	movs	r3, #3
 80067de:	e04e      	b.n	800687e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f003 0304 	and.w	r3, r3, #4
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d037      	beq.n	800685e <UART_WaitOnFlagUntilTimeout+0xb2>
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	2b80      	cmp	r3, #128	@ 0x80
 80067f2:	d034      	beq.n	800685e <UART_WaitOnFlagUntilTimeout+0xb2>
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	2b40      	cmp	r3, #64	@ 0x40
 80067f8:	d031      	beq.n	800685e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	69db      	ldr	r3, [r3, #28]
 8006800:	f003 0308 	and.w	r3, r3, #8
 8006804:	2b08      	cmp	r3, #8
 8006806:	d110      	bne.n	800682a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	2208      	movs	r2, #8
 800680e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006810:	68f8      	ldr	r0, [r7, #12]
 8006812:	f000 f838 	bl	8006886 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	2208      	movs	r2, #8
 800681a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	2200      	movs	r2, #0
 8006822:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006826:	2301      	movs	r3, #1
 8006828:	e029      	b.n	800687e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	69db      	ldr	r3, [r3, #28]
 8006830:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006834:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006838:	d111      	bne.n	800685e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006842:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006844:	68f8      	ldr	r0, [r7, #12]
 8006846:	f000 f81e 	bl	8006886 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	2220      	movs	r2, #32
 800684e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	2200      	movs	r2, #0
 8006856:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800685a:	2303      	movs	r3, #3
 800685c:	e00f      	b.n	800687e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	69da      	ldr	r2, [r3, #28]
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	4013      	ands	r3, r2
 8006868:	68ba      	ldr	r2, [r7, #8]
 800686a:	429a      	cmp	r2, r3
 800686c:	bf0c      	ite	eq
 800686e:	2301      	moveq	r3, #1
 8006870:	2300      	movne	r3, #0
 8006872:	b2db      	uxtb	r3, r3
 8006874:	461a      	mov	r2, r3
 8006876:	79fb      	ldrb	r3, [r7, #7]
 8006878:	429a      	cmp	r2, r3
 800687a:	d0a0      	beq.n	80067be <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800687c:	2300      	movs	r3, #0
}
 800687e:	4618      	mov	r0, r3
 8006880:	3710      	adds	r7, #16
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}

08006886 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006886:	b480      	push	{r7}
 8006888:	b095      	sub	sp, #84	@ 0x54
 800688a:	af00      	add	r7, sp, #0
 800688c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006894:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006896:	e853 3f00 	ldrex	r3, [r3]
 800689a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800689c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800689e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80068a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	461a      	mov	r2, r3
 80068aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80068ac:	643b      	str	r3, [r7, #64]	@ 0x40
 80068ae:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068b0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80068b2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80068b4:	e841 2300 	strex	r3, r2, [r1]
 80068b8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80068ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d1e6      	bne.n	800688e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	3308      	adds	r3, #8
 80068c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068c8:	6a3b      	ldr	r3, [r7, #32]
 80068ca:	e853 3f00 	ldrex	r3, [r3]
 80068ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80068d0:	69fb      	ldr	r3, [r7, #28]
 80068d2:	f023 0301 	bic.w	r3, r3, #1
 80068d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	3308      	adds	r3, #8
 80068de:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80068e0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80068e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80068e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80068e8:	e841 2300 	strex	r3, r2, [r1]
 80068ec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80068ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d1e5      	bne.n	80068c0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80068f8:	2b01      	cmp	r3, #1
 80068fa:	d118      	bne.n	800692e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	e853 3f00 	ldrex	r3, [r3]
 8006908:	60bb      	str	r3, [r7, #8]
   return(result);
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	f023 0310 	bic.w	r3, r3, #16
 8006910:	647b      	str	r3, [r7, #68]	@ 0x44
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	461a      	mov	r2, r3
 8006918:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800691a:	61bb      	str	r3, [r7, #24]
 800691c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800691e:	6979      	ldr	r1, [r7, #20]
 8006920:	69ba      	ldr	r2, [r7, #24]
 8006922:	e841 2300 	strex	r3, r2, [r1]
 8006926:	613b      	str	r3, [r7, #16]
   return(result);
 8006928:	693b      	ldr	r3, [r7, #16]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d1e6      	bne.n	80068fc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2220      	movs	r2, #32
 8006932:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2200      	movs	r2, #0
 800693a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2200      	movs	r2, #0
 8006940:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006942:	bf00      	nop
 8006944:	3754      	adds	r7, #84	@ 0x54
 8006946:	46bd      	mov	sp, r7
 8006948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694c:	4770      	bx	lr
	...

08006950 <sbrk_aligned>:
 8006950:	b570      	push	{r4, r5, r6, lr}
 8006952:	4e0f      	ldr	r6, [pc, #60]	@ (8006990 <sbrk_aligned+0x40>)
 8006954:	460c      	mov	r4, r1
 8006956:	6831      	ldr	r1, [r6, #0]
 8006958:	4605      	mov	r5, r0
 800695a:	b911      	cbnz	r1, 8006962 <sbrk_aligned+0x12>
 800695c:	f000 f9fa 	bl	8006d54 <_sbrk_r>
 8006960:	6030      	str	r0, [r6, #0]
 8006962:	4621      	mov	r1, r4
 8006964:	4628      	mov	r0, r5
 8006966:	f000 f9f5 	bl	8006d54 <_sbrk_r>
 800696a:	1c43      	adds	r3, r0, #1
 800696c:	d103      	bne.n	8006976 <sbrk_aligned+0x26>
 800696e:	f04f 34ff 	mov.w	r4, #4294967295
 8006972:	4620      	mov	r0, r4
 8006974:	bd70      	pop	{r4, r5, r6, pc}
 8006976:	1cc4      	adds	r4, r0, #3
 8006978:	f024 0403 	bic.w	r4, r4, #3
 800697c:	42a0      	cmp	r0, r4
 800697e:	d0f8      	beq.n	8006972 <sbrk_aligned+0x22>
 8006980:	1a21      	subs	r1, r4, r0
 8006982:	4628      	mov	r0, r5
 8006984:	f000 f9e6 	bl	8006d54 <_sbrk_r>
 8006988:	3001      	adds	r0, #1
 800698a:	d1f2      	bne.n	8006972 <sbrk_aligned+0x22>
 800698c:	e7ef      	b.n	800696e <sbrk_aligned+0x1e>
 800698e:	bf00      	nop
 8006990:	2000038c 	.word	0x2000038c

08006994 <_malloc_r>:
 8006994:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006998:	1ccd      	adds	r5, r1, #3
 800699a:	f025 0503 	bic.w	r5, r5, #3
 800699e:	3508      	adds	r5, #8
 80069a0:	2d0c      	cmp	r5, #12
 80069a2:	bf38      	it	cc
 80069a4:	250c      	movcc	r5, #12
 80069a6:	2d00      	cmp	r5, #0
 80069a8:	4606      	mov	r6, r0
 80069aa:	db01      	blt.n	80069b0 <_malloc_r+0x1c>
 80069ac:	42a9      	cmp	r1, r5
 80069ae:	d904      	bls.n	80069ba <_malloc_r+0x26>
 80069b0:	230c      	movs	r3, #12
 80069b2:	6033      	str	r3, [r6, #0]
 80069b4:	2000      	movs	r0, #0
 80069b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80069ba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006a90 <_malloc_r+0xfc>
 80069be:	f000 f869 	bl	8006a94 <__malloc_lock>
 80069c2:	f8d8 3000 	ldr.w	r3, [r8]
 80069c6:	461c      	mov	r4, r3
 80069c8:	bb44      	cbnz	r4, 8006a1c <_malloc_r+0x88>
 80069ca:	4629      	mov	r1, r5
 80069cc:	4630      	mov	r0, r6
 80069ce:	f7ff ffbf 	bl	8006950 <sbrk_aligned>
 80069d2:	1c43      	adds	r3, r0, #1
 80069d4:	4604      	mov	r4, r0
 80069d6:	d158      	bne.n	8006a8a <_malloc_r+0xf6>
 80069d8:	f8d8 4000 	ldr.w	r4, [r8]
 80069dc:	4627      	mov	r7, r4
 80069de:	2f00      	cmp	r7, #0
 80069e0:	d143      	bne.n	8006a6a <_malloc_r+0xd6>
 80069e2:	2c00      	cmp	r4, #0
 80069e4:	d04b      	beq.n	8006a7e <_malloc_r+0xea>
 80069e6:	6823      	ldr	r3, [r4, #0]
 80069e8:	4639      	mov	r1, r7
 80069ea:	4630      	mov	r0, r6
 80069ec:	eb04 0903 	add.w	r9, r4, r3
 80069f0:	f000 f9b0 	bl	8006d54 <_sbrk_r>
 80069f4:	4581      	cmp	r9, r0
 80069f6:	d142      	bne.n	8006a7e <_malloc_r+0xea>
 80069f8:	6821      	ldr	r1, [r4, #0]
 80069fa:	1a6d      	subs	r5, r5, r1
 80069fc:	4629      	mov	r1, r5
 80069fe:	4630      	mov	r0, r6
 8006a00:	f7ff ffa6 	bl	8006950 <sbrk_aligned>
 8006a04:	3001      	adds	r0, #1
 8006a06:	d03a      	beq.n	8006a7e <_malloc_r+0xea>
 8006a08:	6823      	ldr	r3, [r4, #0]
 8006a0a:	442b      	add	r3, r5
 8006a0c:	6023      	str	r3, [r4, #0]
 8006a0e:	f8d8 3000 	ldr.w	r3, [r8]
 8006a12:	685a      	ldr	r2, [r3, #4]
 8006a14:	bb62      	cbnz	r2, 8006a70 <_malloc_r+0xdc>
 8006a16:	f8c8 7000 	str.w	r7, [r8]
 8006a1a:	e00f      	b.n	8006a3c <_malloc_r+0xa8>
 8006a1c:	6822      	ldr	r2, [r4, #0]
 8006a1e:	1b52      	subs	r2, r2, r5
 8006a20:	d420      	bmi.n	8006a64 <_malloc_r+0xd0>
 8006a22:	2a0b      	cmp	r2, #11
 8006a24:	d917      	bls.n	8006a56 <_malloc_r+0xc2>
 8006a26:	1961      	adds	r1, r4, r5
 8006a28:	42a3      	cmp	r3, r4
 8006a2a:	6025      	str	r5, [r4, #0]
 8006a2c:	bf18      	it	ne
 8006a2e:	6059      	strne	r1, [r3, #4]
 8006a30:	6863      	ldr	r3, [r4, #4]
 8006a32:	bf08      	it	eq
 8006a34:	f8c8 1000 	streq.w	r1, [r8]
 8006a38:	5162      	str	r2, [r4, r5]
 8006a3a:	604b      	str	r3, [r1, #4]
 8006a3c:	4630      	mov	r0, r6
 8006a3e:	f000 f82f 	bl	8006aa0 <__malloc_unlock>
 8006a42:	f104 000b 	add.w	r0, r4, #11
 8006a46:	1d23      	adds	r3, r4, #4
 8006a48:	f020 0007 	bic.w	r0, r0, #7
 8006a4c:	1ac2      	subs	r2, r0, r3
 8006a4e:	bf1c      	itt	ne
 8006a50:	1a1b      	subne	r3, r3, r0
 8006a52:	50a3      	strne	r3, [r4, r2]
 8006a54:	e7af      	b.n	80069b6 <_malloc_r+0x22>
 8006a56:	6862      	ldr	r2, [r4, #4]
 8006a58:	42a3      	cmp	r3, r4
 8006a5a:	bf0c      	ite	eq
 8006a5c:	f8c8 2000 	streq.w	r2, [r8]
 8006a60:	605a      	strne	r2, [r3, #4]
 8006a62:	e7eb      	b.n	8006a3c <_malloc_r+0xa8>
 8006a64:	4623      	mov	r3, r4
 8006a66:	6864      	ldr	r4, [r4, #4]
 8006a68:	e7ae      	b.n	80069c8 <_malloc_r+0x34>
 8006a6a:	463c      	mov	r4, r7
 8006a6c:	687f      	ldr	r7, [r7, #4]
 8006a6e:	e7b6      	b.n	80069de <_malloc_r+0x4a>
 8006a70:	461a      	mov	r2, r3
 8006a72:	685b      	ldr	r3, [r3, #4]
 8006a74:	42a3      	cmp	r3, r4
 8006a76:	d1fb      	bne.n	8006a70 <_malloc_r+0xdc>
 8006a78:	2300      	movs	r3, #0
 8006a7a:	6053      	str	r3, [r2, #4]
 8006a7c:	e7de      	b.n	8006a3c <_malloc_r+0xa8>
 8006a7e:	230c      	movs	r3, #12
 8006a80:	6033      	str	r3, [r6, #0]
 8006a82:	4630      	mov	r0, r6
 8006a84:	f000 f80c 	bl	8006aa0 <__malloc_unlock>
 8006a88:	e794      	b.n	80069b4 <_malloc_r+0x20>
 8006a8a:	6005      	str	r5, [r0, #0]
 8006a8c:	e7d6      	b.n	8006a3c <_malloc_r+0xa8>
 8006a8e:	bf00      	nop
 8006a90:	20000390 	.word	0x20000390

08006a94 <__malloc_lock>:
 8006a94:	4801      	ldr	r0, [pc, #4]	@ (8006a9c <__malloc_lock+0x8>)
 8006a96:	f000 b9aa 	b.w	8006dee <__retarget_lock_acquire_recursive>
 8006a9a:	bf00      	nop
 8006a9c:	200004d4 	.word	0x200004d4

08006aa0 <__malloc_unlock>:
 8006aa0:	4801      	ldr	r0, [pc, #4]	@ (8006aa8 <__malloc_unlock+0x8>)
 8006aa2:	f000 b9a5 	b.w	8006df0 <__retarget_lock_release_recursive>
 8006aa6:	bf00      	nop
 8006aa8:	200004d4 	.word	0x200004d4

08006aac <std>:
 8006aac:	2300      	movs	r3, #0
 8006aae:	b510      	push	{r4, lr}
 8006ab0:	4604      	mov	r4, r0
 8006ab2:	e9c0 3300 	strd	r3, r3, [r0]
 8006ab6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006aba:	6083      	str	r3, [r0, #8]
 8006abc:	8181      	strh	r1, [r0, #12]
 8006abe:	6643      	str	r3, [r0, #100]	@ 0x64
 8006ac0:	81c2      	strh	r2, [r0, #14]
 8006ac2:	6183      	str	r3, [r0, #24]
 8006ac4:	4619      	mov	r1, r3
 8006ac6:	2208      	movs	r2, #8
 8006ac8:	305c      	adds	r0, #92	@ 0x5c
 8006aca:	f000 f906 	bl	8006cda <memset>
 8006ace:	4b0d      	ldr	r3, [pc, #52]	@ (8006b04 <std+0x58>)
 8006ad0:	6263      	str	r3, [r4, #36]	@ 0x24
 8006ad2:	4b0d      	ldr	r3, [pc, #52]	@ (8006b08 <std+0x5c>)
 8006ad4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006ad6:	4b0d      	ldr	r3, [pc, #52]	@ (8006b0c <std+0x60>)
 8006ad8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006ada:	4b0d      	ldr	r3, [pc, #52]	@ (8006b10 <std+0x64>)
 8006adc:	6323      	str	r3, [r4, #48]	@ 0x30
 8006ade:	4b0d      	ldr	r3, [pc, #52]	@ (8006b14 <std+0x68>)
 8006ae0:	6224      	str	r4, [r4, #32]
 8006ae2:	429c      	cmp	r4, r3
 8006ae4:	d006      	beq.n	8006af4 <std+0x48>
 8006ae6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006aea:	4294      	cmp	r4, r2
 8006aec:	d002      	beq.n	8006af4 <std+0x48>
 8006aee:	33d0      	adds	r3, #208	@ 0xd0
 8006af0:	429c      	cmp	r4, r3
 8006af2:	d105      	bne.n	8006b00 <std+0x54>
 8006af4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006af8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006afc:	f000 b976 	b.w	8006dec <__retarget_lock_init_recursive>
 8006b00:	bd10      	pop	{r4, pc}
 8006b02:	bf00      	nop
 8006b04:	08006c55 	.word	0x08006c55
 8006b08:	08006c77 	.word	0x08006c77
 8006b0c:	08006caf 	.word	0x08006caf
 8006b10:	08006cd3 	.word	0x08006cd3
 8006b14:	20000394 	.word	0x20000394

08006b18 <stdio_exit_handler>:
 8006b18:	4a02      	ldr	r2, [pc, #8]	@ (8006b24 <stdio_exit_handler+0xc>)
 8006b1a:	4903      	ldr	r1, [pc, #12]	@ (8006b28 <stdio_exit_handler+0x10>)
 8006b1c:	4803      	ldr	r0, [pc, #12]	@ (8006b2c <stdio_exit_handler+0x14>)
 8006b1e:	f000 b869 	b.w	8006bf4 <_fwalk_sglue>
 8006b22:	bf00      	nop
 8006b24:	20000014 	.word	0x20000014
 8006b28:	0800752d 	.word	0x0800752d
 8006b2c:	20000024 	.word	0x20000024

08006b30 <cleanup_stdio>:
 8006b30:	6841      	ldr	r1, [r0, #4]
 8006b32:	4b0c      	ldr	r3, [pc, #48]	@ (8006b64 <cleanup_stdio+0x34>)
 8006b34:	4299      	cmp	r1, r3
 8006b36:	b510      	push	{r4, lr}
 8006b38:	4604      	mov	r4, r0
 8006b3a:	d001      	beq.n	8006b40 <cleanup_stdio+0x10>
 8006b3c:	f000 fcf6 	bl	800752c <_fflush_r>
 8006b40:	68a1      	ldr	r1, [r4, #8]
 8006b42:	4b09      	ldr	r3, [pc, #36]	@ (8006b68 <cleanup_stdio+0x38>)
 8006b44:	4299      	cmp	r1, r3
 8006b46:	d002      	beq.n	8006b4e <cleanup_stdio+0x1e>
 8006b48:	4620      	mov	r0, r4
 8006b4a:	f000 fcef 	bl	800752c <_fflush_r>
 8006b4e:	68e1      	ldr	r1, [r4, #12]
 8006b50:	4b06      	ldr	r3, [pc, #24]	@ (8006b6c <cleanup_stdio+0x3c>)
 8006b52:	4299      	cmp	r1, r3
 8006b54:	d004      	beq.n	8006b60 <cleanup_stdio+0x30>
 8006b56:	4620      	mov	r0, r4
 8006b58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b5c:	f000 bce6 	b.w	800752c <_fflush_r>
 8006b60:	bd10      	pop	{r4, pc}
 8006b62:	bf00      	nop
 8006b64:	20000394 	.word	0x20000394
 8006b68:	200003fc 	.word	0x200003fc
 8006b6c:	20000464 	.word	0x20000464

08006b70 <global_stdio_init.part.0>:
 8006b70:	b510      	push	{r4, lr}
 8006b72:	4b0b      	ldr	r3, [pc, #44]	@ (8006ba0 <global_stdio_init.part.0+0x30>)
 8006b74:	4c0b      	ldr	r4, [pc, #44]	@ (8006ba4 <global_stdio_init.part.0+0x34>)
 8006b76:	4a0c      	ldr	r2, [pc, #48]	@ (8006ba8 <global_stdio_init.part.0+0x38>)
 8006b78:	601a      	str	r2, [r3, #0]
 8006b7a:	4620      	mov	r0, r4
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	2104      	movs	r1, #4
 8006b80:	f7ff ff94 	bl	8006aac <std>
 8006b84:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006b88:	2201      	movs	r2, #1
 8006b8a:	2109      	movs	r1, #9
 8006b8c:	f7ff ff8e 	bl	8006aac <std>
 8006b90:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006b94:	2202      	movs	r2, #2
 8006b96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b9a:	2112      	movs	r1, #18
 8006b9c:	f7ff bf86 	b.w	8006aac <std>
 8006ba0:	200004cc 	.word	0x200004cc
 8006ba4:	20000394 	.word	0x20000394
 8006ba8:	08006b19 	.word	0x08006b19

08006bac <__sfp_lock_acquire>:
 8006bac:	4801      	ldr	r0, [pc, #4]	@ (8006bb4 <__sfp_lock_acquire+0x8>)
 8006bae:	f000 b91e 	b.w	8006dee <__retarget_lock_acquire_recursive>
 8006bb2:	bf00      	nop
 8006bb4:	200004d5 	.word	0x200004d5

08006bb8 <__sfp_lock_release>:
 8006bb8:	4801      	ldr	r0, [pc, #4]	@ (8006bc0 <__sfp_lock_release+0x8>)
 8006bba:	f000 b919 	b.w	8006df0 <__retarget_lock_release_recursive>
 8006bbe:	bf00      	nop
 8006bc0:	200004d5 	.word	0x200004d5

08006bc4 <__sinit>:
 8006bc4:	b510      	push	{r4, lr}
 8006bc6:	4604      	mov	r4, r0
 8006bc8:	f7ff fff0 	bl	8006bac <__sfp_lock_acquire>
 8006bcc:	6a23      	ldr	r3, [r4, #32]
 8006bce:	b11b      	cbz	r3, 8006bd8 <__sinit+0x14>
 8006bd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006bd4:	f7ff bff0 	b.w	8006bb8 <__sfp_lock_release>
 8006bd8:	4b04      	ldr	r3, [pc, #16]	@ (8006bec <__sinit+0x28>)
 8006bda:	6223      	str	r3, [r4, #32]
 8006bdc:	4b04      	ldr	r3, [pc, #16]	@ (8006bf0 <__sinit+0x2c>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d1f5      	bne.n	8006bd0 <__sinit+0xc>
 8006be4:	f7ff ffc4 	bl	8006b70 <global_stdio_init.part.0>
 8006be8:	e7f2      	b.n	8006bd0 <__sinit+0xc>
 8006bea:	bf00      	nop
 8006bec:	08006b31 	.word	0x08006b31
 8006bf0:	200004cc 	.word	0x200004cc

08006bf4 <_fwalk_sglue>:
 8006bf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006bf8:	4607      	mov	r7, r0
 8006bfa:	4688      	mov	r8, r1
 8006bfc:	4614      	mov	r4, r2
 8006bfe:	2600      	movs	r6, #0
 8006c00:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006c04:	f1b9 0901 	subs.w	r9, r9, #1
 8006c08:	d505      	bpl.n	8006c16 <_fwalk_sglue+0x22>
 8006c0a:	6824      	ldr	r4, [r4, #0]
 8006c0c:	2c00      	cmp	r4, #0
 8006c0e:	d1f7      	bne.n	8006c00 <_fwalk_sglue+0xc>
 8006c10:	4630      	mov	r0, r6
 8006c12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c16:	89ab      	ldrh	r3, [r5, #12]
 8006c18:	2b01      	cmp	r3, #1
 8006c1a:	d907      	bls.n	8006c2c <_fwalk_sglue+0x38>
 8006c1c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006c20:	3301      	adds	r3, #1
 8006c22:	d003      	beq.n	8006c2c <_fwalk_sglue+0x38>
 8006c24:	4629      	mov	r1, r5
 8006c26:	4638      	mov	r0, r7
 8006c28:	47c0      	blx	r8
 8006c2a:	4306      	orrs	r6, r0
 8006c2c:	3568      	adds	r5, #104	@ 0x68
 8006c2e:	e7e9      	b.n	8006c04 <_fwalk_sglue+0x10>

08006c30 <iprintf>:
 8006c30:	b40f      	push	{r0, r1, r2, r3}
 8006c32:	b507      	push	{r0, r1, r2, lr}
 8006c34:	4906      	ldr	r1, [pc, #24]	@ (8006c50 <iprintf+0x20>)
 8006c36:	ab04      	add	r3, sp, #16
 8006c38:	6808      	ldr	r0, [r1, #0]
 8006c3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c3e:	6881      	ldr	r1, [r0, #8]
 8006c40:	9301      	str	r3, [sp, #4]
 8006c42:	f000 f94b 	bl	8006edc <_vfiprintf_r>
 8006c46:	b003      	add	sp, #12
 8006c48:	f85d eb04 	ldr.w	lr, [sp], #4
 8006c4c:	b004      	add	sp, #16
 8006c4e:	4770      	bx	lr
 8006c50:	20000020 	.word	0x20000020

08006c54 <__sread>:
 8006c54:	b510      	push	{r4, lr}
 8006c56:	460c      	mov	r4, r1
 8006c58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c5c:	f000 f868 	bl	8006d30 <_read_r>
 8006c60:	2800      	cmp	r0, #0
 8006c62:	bfab      	itete	ge
 8006c64:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006c66:	89a3      	ldrhlt	r3, [r4, #12]
 8006c68:	181b      	addge	r3, r3, r0
 8006c6a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006c6e:	bfac      	ite	ge
 8006c70:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006c72:	81a3      	strhlt	r3, [r4, #12]
 8006c74:	bd10      	pop	{r4, pc}

08006c76 <__swrite>:
 8006c76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c7a:	461f      	mov	r7, r3
 8006c7c:	898b      	ldrh	r3, [r1, #12]
 8006c7e:	05db      	lsls	r3, r3, #23
 8006c80:	4605      	mov	r5, r0
 8006c82:	460c      	mov	r4, r1
 8006c84:	4616      	mov	r6, r2
 8006c86:	d505      	bpl.n	8006c94 <__swrite+0x1e>
 8006c88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c8c:	2302      	movs	r3, #2
 8006c8e:	2200      	movs	r2, #0
 8006c90:	f000 f83c 	bl	8006d0c <_lseek_r>
 8006c94:	89a3      	ldrh	r3, [r4, #12]
 8006c96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c9a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006c9e:	81a3      	strh	r3, [r4, #12]
 8006ca0:	4632      	mov	r2, r6
 8006ca2:	463b      	mov	r3, r7
 8006ca4:	4628      	mov	r0, r5
 8006ca6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006caa:	f000 b863 	b.w	8006d74 <_write_r>

08006cae <__sseek>:
 8006cae:	b510      	push	{r4, lr}
 8006cb0:	460c      	mov	r4, r1
 8006cb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cb6:	f000 f829 	bl	8006d0c <_lseek_r>
 8006cba:	1c43      	adds	r3, r0, #1
 8006cbc:	89a3      	ldrh	r3, [r4, #12]
 8006cbe:	bf15      	itete	ne
 8006cc0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006cc2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006cc6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006cca:	81a3      	strheq	r3, [r4, #12]
 8006ccc:	bf18      	it	ne
 8006cce:	81a3      	strhne	r3, [r4, #12]
 8006cd0:	bd10      	pop	{r4, pc}

08006cd2 <__sclose>:
 8006cd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cd6:	f000 b809 	b.w	8006cec <_close_r>

08006cda <memset>:
 8006cda:	4402      	add	r2, r0
 8006cdc:	4603      	mov	r3, r0
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d100      	bne.n	8006ce4 <memset+0xa>
 8006ce2:	4770      	bx	lr
 8006ce4:	f803 1b01 	strb.w	r1, [r3], #1
 8006ce8:	e7f9      	b.n	8006cde <memset+0x4>
	...

08006cec <_close_r>:
 8006cec:	b538      	push	{r3, r4, r5, lr}
 8006cee:	4d06      	ldr	r5, [pc, #24]	@ (8006d08 <_close_r+0x1c>)
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	4604      	mov	r4, r0
 8006cf4:	4608      	mov	r0, r1
 8006cf6:	602b      	str	r3, [r5, #0]
 8006cf8:	f7f9 ffb3 	bl	8000c62 <_close>
 8006cfc:	1c43      	adds	r3, r0, #1
 8006cfe:	d102      	bne.n	8006d06 <_close_r+0x1a>
 8006d00:	682b      	ldr	r3, [r5, #0]
 8006d02:	b103      	cbz	r3, 8006d06 <_close_r+0x1a>
 8006d04:	6023      	str	r3, [r4, #0]
 8006d06:	bd38      	pop	{r3, r4, r5, pc}
 8006d08:	200004d0 	.word	0x200004d0

08006d0c <_lseek_r>:
 8006d0c:	b538      	push	{r3, r4, r5, lr}
 8006d0e:	4d07      	ldr	r5, [pc, #28]	@ (8006d2c <_lseek_r+0x20>)
 8006d10:	4604      	mov	r4, r0
 8006d12:	4608      	mov	r0, r1
 8006d14:	4611      	mov	r1, r2
 8006d16:	2200      	movs	r2, #0
 8006d18:	602a      	str	r2, [r5, #0]
 8006d1a:	461a      	mov	r2, r3
 8006d1c:	f7f9 ffc8 	bl	8000cb0 <_lseek>
 8006d20:	1c43      	adds	r3, r0, #1
 8006d22:	d102      	bne.n	8006d2a <_lseek_r+0x1e>
 8006d24:	682b      	ldr	r3, [r5, #0]
 8006d26:	b103      	cbz	r3, 8006d2a <_lseek_r+0x1e>
 8006d28:	6023      	str	r3, [r4, #0]
 8006d2a:	bd38      	pop	{r3, r4, r5, pc}
 8006d2c:	200004d0 	.word	0x200004d0

08006d30 <_read_r>:
 8006d30:	b538      	push	{r3, r4, r5, lr}
 8006d32:	4d07      	ldr	r5, [pc, #28]	@ (8006d50 <_read_r+0x20>)
 8006d34:	4604      	mov	r4, r0
 8006d36:	4608      	mov	r0, r1
 8006d38:	4611      	mov	r1, r2
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	602a      	str	r2, [r5, #0]
 8006d3e:	461a      	mov	r2, r3
 8006d40:	f7f9 ff72 	bl	8000c28 <_read>
 8006d44:	1c43      	adds	r3, r0, #1
 8006d46:	d102      	bne.n	8006d4e <_read_r+0x1e>
 8006d48:	682b      	ldr	r3, [r5, #0]
 8006d4a:	b103      	cbz	r3, 8006d4e <_read_r+0x1e>
 8006d4c:	6023      	str	r3, [r4, #0]
 8006d4e:	bd38      	pop	{r3, r4, r5, pc}
 8006d50:	200004d0 	.word	0x200004d0

08006d54 <_sbrk_r>:
 8006d54:	b538      	push	{r3, r4, r5, lr}
 8006d56:	4d06      	ldr	r5, [pc, #24]	@ (8006d70 <_sbrk_r+0x1c>)
 8006d58:	2300      	movs	r3, #0
 8006d5a:	4604      	mov	r4, r0
 8006d5c:	4608      	mov	r0, r1
 8006d5e:	602b      	str	r3, [r5, #0]
 8006d60:	f7f9 ffb4 	bl	8000ccc <_sbrk>
 8006d64:	1c43      	adds	r3, r0, #1
 8006d66:	d102      	bne.n	8006d6e <_sbrk_r+0x1a>
 8006d68:	682b      	ldr	r3, [r5, #0]
 8006d6a:	b103      	cbz	r3, 8006d6e <_sbrk_r+0x1a>
 8006d6c:	6023      	str	r3, [r4, #0]
 8006d6e:	bd38      	pop	{r3, r4, r5, pc}
 8006d70:	200004d0 	.word	0x200004d0

08006d74 <_write_r>:
 8006d74:	b538      	push	{r3, r4, r5, lr}
 8006d76:	4d07      	ldr	r5, [pc, #28]	@ (8006d94 <_write_r+0x20>)
 8006d78:	4604      	mov	r4, r0
 8006d7a:	4608      	mov	r0, r1
 8006d7c:	4611      	mov	r1, r2
 8006d7e:	2200      	movs	r2, #0
 8006d80:	602a      	str	r2, [r5, #0]
 8006d82:	461a      	mov	r2, r3
 8006d84:	f7f9 fc42 	bl	800060c <_write>
 8006d88:	1c43      	adds	r3, r0, #1
 8006d8a:	d102      	bne.n	8006d92 <_write_r+0x1e>
 8006d8c:	682b      	ldr	r3, [r5, #0]
 8006d8e:	b103      	cbz	r3, 8006d92 <_write_r+0x1e>
 8006d90:	6023      	str	r3, [r4, #0]
 8006d92:	bd38      	pop	{r3, r4, r5, pc}
 8006d94:	200004d0 	.word	0x200004d0

08006d98 <__errno>:
 8006d98:	4b01      	ldr	r3, [pc, #4]	@ (8006da0 <__errno+0x8>)
 8006d9a:	6818      	ldr	r0, [r3, #0]
 8006d9c:	4770      	bx	lr
 8006d9e:	bf00      	nop
 8006da0:	20000020 	.word	0x20000020

08006da4 <__libc_init_array>:
 8006da4:	b570      	push	{r4, r5, r6, lr}
 8006da6:	4d0d      	ldr	r5, [pc, #52]	@ (8006ddc <__libc_init_array+0x38>)
 8006da8:	4c0d      	ldr	r4, [pc, #52]	@ (8006de0 <__libc_init_array+0x3c>)
 8006daa:	1b64      	subs	r4, r4, r5
 8006dac:	10a4      	asrs	r4, r4, #2
 8006dae:	2600      	movs	r6, #0
 8006db0:	42a6      	cmp	r6, r4
 8006db2:	d109      	bne.n	8006dc8 <__libc_init_array+0x24>
 8006db4:	4d0b      	ldr	r5, [pc, #44]	@ (8006de4 <__libc_init_array+0x40>)
 8006db6:	4c0c      	ldr	r4, [pc, #48]	@ (8006de8 <__libc_init_array+0x44>)
 8006db8:	f000 fcf8 	bl	80077ac <_init>
 8006dbc:	1b64      	subs	r4, r4, r5
 8006dbe:	10a4      	asrs	r4, r4, #2
 8006dc0:	2600      	movs	r6, #0
 8006dc2:	42a6      	cmp	r6, r4
 8006dc4:	d105      	bne.n	8006dd2 <__libc_init_array+0x2e>
 8006dc6:	bd70      	pop	{r4, r5, r6, pc}
 8006dc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006dcc:	4798      	blx	r3
 8006dce:	3601      	adds	r6, #1
 8006dd0:	e7ee      	b.n	8006db0 <__libc_init_array+0xc>
 8006dd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006dd6:	4798      	blx	r3
 8006dd8:	3601      	adds	r6, #1
 8006dda:	e7f2      	b.n	8006dc2 <__libc_init_array+0x1e>
 8006ddc:	08007af4 	.word	0x08007af4
 8006de0:	08007af4 	.word	0x08007af4
 8006de4:	08007af4 	.word	0x08007af4
 8006de8:	08007af8 	.word	0x08007af8

08006dec <__retarget_lock_init_recursive>:
 8006dec:	4770      	bx	lr

08006dee <__retarget_lock_acquire_recursive>:
 8006dee:	4770      	bx	lr

08006df0 <__retarget_lock_release_recursive>:
 8006df0:	4770      	bx	lr
	...

08006df4 <_free_r>:
 8006df4:	b538      	push	{r3, r4, r5, lr}
 8006df6:	4605      	mov	r5, r0
 8006df8:	2900      	cmp	r1, #0
 8006dfa:	d041      	beq.n	8006e80 <_free_r+0x8c>
 8006dfc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e00:	1f0c      	subs	r4, r1, #4
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	bfb8      	it	lt
 8006e06:	18e4      	addlt	r4, r4, r3
 8006e08:	f7ff fe44 	bl	8006a94 <__malloc_lock>
 8006e0c:	4a1d      	ldr	r2, [pc, #116]	@ (8006e84 <_free_r+0x90>)
 8006e0e:	6813      	ldr	r3, [r2, #0]
 8006e10:	b933      	cbnz	r3, 8006e20 <_free_r+0x2c>
 8006e12:	6063      	str	r3, [r4, #4]
 8006e14:	6014      	str	r4, [r2, #0]
 8006e16:	4628      	mov	r0, r5
 8006e18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006e1c:	f7ff be40 	b.w	8006aa0 <__malloc_unlock>
 8006e20:	42a3      	cmp	r3, r4
 8006e22:	d908      	bls.n	8006e36 <_free_r+0x42>
 8006e24:	6820      	ldr	r0, [r4, #0]
 8006e26:	1821      	adds	r1, r4, r0
 8006e28:	428b      	cmp	r3, r1
 8006e2a:	bf01      	itttt	eq
 8006e2c:	6819      	ldreq	r1, [r3, #0]
 8006e2e:	685b      	ldreq	r3, [r3, #4]
 8006e30:	1809      	addeq	r1, r1, r0
 8006e32:	6021      	streq	r1, [r4, #0]
 8006e34:	e7ed      	b.n	8006e12 <_free_r+0x1e>
 8006e36:	461a      	mov	r2, r3
 8006e38:	685b      	ldr	r3, [r3, #4]
 8006e3a:	b10b      	cbz	r3, 8006e40 <_free_r+0x4c>
 8006e3c:	42a3      	cmp	r3, r4
 8006e3e:	d9fa      	bls.n	8006e36 <_free_r+0x42>
 8006e40:	6811      	ldr	r1, [r2, #0]
 8006e42:	1850      	adds	r0, r2, r1
 8006e44:	42a0      	cmp	r0, r4
 8006e46:	d10b      	bne.n	8006e60 <_free_r+0x6c>
 8006e48:	6820      	ldr	r0, [r4, #0]
 8006e4a:	4401      	add	r1, r0
 8006e4c:	1850      	adds	r0, r2, r1
 8006e4e:	4283      	cmp	r3, r0
 8006e50:	6011      	str	r1, [r2, #0]
 8006e52:	d1e0      	bne.n	8006e16 <_free_r+0x22>
 8006e54:	6818      	ldr	r0, [r3, #0]
 8006e56:	685b      	ldr	r3, [r3, #4]
 8006e58:	6053      	str	r3, [r2, #4]
 8006e5a:	4408      	add	r0, r1
 8006e5c:	6010      	str	r0, [r2, #0]
 8006e5e:	e7da      	b.n	8006e16 <_free_r+0x22>
 8006e60:	d902      	bls.n	8006e68 <_free_r+0x74>
 8006e62:	230c      	movs	r3, #12
 8006e64:	602b      	str	r3, [r5, #0]
 8006e66:	e7d6      	b.n	8006e16 <_free_r+0x22>
 8006e68:	6820      	ldr	r0, [r4, #0]
 8006e6a:	1821      	adds	r1, r4, r0
 8006e6c:	428b      	cmp	r3, r1
 8006e6e:	bf04      	itt	eq
 8006e70:	6819      	ldreq	r1, [r3, #0]
 8006e72:	685b      	ldreq	r3, [r3, #4]
 8006e74:	6063      	str	r3, [r4, #4]
 8006e76:	bf04      	itt	eq
 8006e78:	1809      	addeq	r1, r1, r0
 8006e7a:	6021      	streq	r1, [r4, #0]
 8006e7c:	6054      	str	r4, [r2, #4]
 8006e7e:	e7ca      	b.n	8006e16 <_free_r+0x22>
 8006e80:	bd38      	pop	{r3, r4, r5, pc}
 8006e82:	bf00      	nop
 8006e84:	20000390 	.word	0x20000390

08006e88 <__sfputc_r>:
 8006e88:	6893      	ldr	r3, [r2, #8]
 8006e8a:	3b01      	subs	r3, #1
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	b410      	push	{r4}
 8006e90:	6093      	str	r3, [r2, #8]
 8006e92:	da08      	bge.n	8006ea6 <__sfputc_r+0x1e>
 8006e94:	6994      	ldr	r4, [r2, #24]
 8006e96:	42a3      	cmp	r3, r4
 8006e98:	db01      	blt.n	8006e9e <__sfputc_r+0x16>
 8006e9a:	290a      	cmp	r1, #10
 8006e9c:	d103      	bne.n	8006ea6 <__sfputc_r+0x1e>
 8006e9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ea2:	f000 bbcd 	b.w	8007640 <__swbuf_r>
 8006ea6:	6813      	ldr	r3, [r2, #0]
 8006ea8:	1c58      	adds	r0, r3, #1
 8006eaa:	6010      	str	r0, [r2, #0]
 8006eac:	7019      	strb	r1, [r3, #0]
 8006eae:	4608      	mov	r0, r1
 8006eb0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006eb4:	4770      	bx	lr

08006eb6 <__sfputs_r>:
 8006eb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006eb8:	4606      	mov	r6, r0
 8006eba:	460f      	mov	r7, r1
 8006ebc:	4614      	mov	r4, r2
 8006ebe:	18d5      	adds	r5, r2, r3
 8006ec0:	42ac      	cmp	r4, r5
 8006ec2:	d101      	bne.n	8006ec8 <__sfputs_r+0x12>
 8006ec4:	2000      	movs	r0, #0
 8006ec6:	e007      	b.n	8006ed8 <__sfputs_r+0x22>
 8006ec8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ecc:	463a      	mov	r2, r7
 8006ece:	4630      	mov	r0, r6
 8006ed0:	f7ff ffda 	bl	8006e88 <__sfputc_r>
 8006ed4:	1c43      	adds	r3, r0, #1
 8006ed6:	d1f3      	bne.n	8006ec0 <__sfputs_r+0xa>
 8006ed8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006edc <_vfiprintf_r>:
 8006edc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ee0:	460d      	mov	r5, r1
 8006ee2:	b09d      	sub	sp, #116	@ 0x74
 8006ee4:	4614      	mov	r4, r2
 8006ee6:	4698      	mov	r8, r3
 8006ee8:	4606      	mov	r6, r0
 8006eea:	b118      	cbz	r0, 8006ef4 <_vfiprintf_r+0x18>
 8006eec:	6a03      	ldr	r3, [r0, #32]
 8006eee:	b90b      	cbnz	r3, 8006ef4 <_vfiprintf_r+0x18>
 8006ef0:	f7ff fe68 	bl	8006bc4 <__sinit>
 8006ef4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006ef6:	07d9      	lsls	r1, r3, #31
 8006ef8:	d405      	bmi.n	8006f06 <_vfiprintf_r+0x2a>
 8006efa:	89ab      	ldrh	r3, [r5, #12]
 8006efc:	059a      	lsls	r2, r3, #22
 8006efe:	d402      	bmi.n	8006f06 <_vfiprintf_r+0x2a>
 8006f00:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006f02:	f7ff ff74 	bl	8006dee <__retarget_lock_acquire_recursive>
 8006f06:	89ab      	ldrh	r3, [r5, #12]
 8006f08:	071b      	lsls	r3, r3, #28
 8006f0a:	d501      	bpl.n	8006f10 <_vfiprintf_r+0x34>
 8006f0c:	692b      	ldr	r3, [r5, #16]
 8006f0e:	b99b      	cbnz	r3, 8006f38 <_vfiprintf_r+0x5c>
 8006f10:	4629      	mov	r1, r5
 8006f12:	4630      	mov	r0, r6
 8006f14:	f000 fbd2 	bl	80076bc <__swsetup_r>
 8006f18:	b170      	cbz	r0, 8006f38 <_vfiprintf_r+0x5c>
 8006f1a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006f1c:	07dc      	lsls	r4, r3, #31
 8006f1e:	d504      	bpl.n	8006f2a <_vfiprintf_r+0x4e>
 8006f20:	f04f 30ff 	mov.w	r0, #4294967295
 8006f24:	b01d      	add	sp, #116	@ 0x74
 8006f26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f2a:	89ab      	ldrh	r3, [r5, #12]
 8006f2c:	0598      	lsls	r0, r3, #22
 8006f2e:	d4f7      	bmi.n	8006f20 <_vfiprintf_r+0x44>
 8006f30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006f32:	f7ff ff5d 	bl	8006df0 <__retarget_lock_release_recursive>
 8006f36:	e7f3      	b.n	8006f20 <_vfiprintf_r+0x44>
 8006f38:	2300      	movs	r3, #0
 8006f3a:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f3c:	2320      	movs	r3, #32
 8006f3e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006f42:	f8cd 800c 	str.w	r8, [sp, #12]
 8006f46:	2330      	movs	r3, #48	@ 0x30
 8006f48:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80070f8 <_vfiprintf_r+0x21c>
 8006f4c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006f50:	f04f 0901 	mov.w	r9, #1
 8006f54:	4623      	mov	r3, r4
 8006f56:	469a      	mov	sl, r3
 8006f58:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006f5c:	b10a      	cbz	r2, 8006f62 <_vfiprintf_r+0x86>
 8006f5e:	2a25      	cmp	r2, #37	@ 0x25
 8006f60:	d1f9      	bne.n	8006f56 <_vfiprintf_r+0x7a>
 8006f62:	ebba 0b04 	subs.w	fp, sl, r4
 8006f66:	d00b      	beq.n	8006f80 <_vfiprintf_r+0xa4>
 8006f68:	465b      	mov	r3, fp
 8006f6a:	4622      	mov	r2, r4
 8006f6c:	4629      	mov	r1, r5
 8006f6e:	4630      	mov	r0, r6
 8006f70:	f7ff ffa1 	bl	8006eb6 <__sfputs_r>
 8006f74:	3001      	adds	r0, #1
 8006f76:	f000 80a7 	beq.w	80070c8 <_vfiprintf_r+0x1ec>
 8006f7a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006f7c:	445a      	add	r2, fp
 8006f7e:	9209      	str	r2, [sp, #36]	@ 0x24
 8006f80:	f89a 3000 	ldrb.w	r3, [sl]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	f000 809f 	beq.w	80070c8 <_vfiprintf_r+0x1ec>
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	f04f 32ff 	mov.w	r2, #4294967295
 8006f90:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006f94:	f10a 0a01 	add.w	sl, sl, #1
 8006f98:	9304      	str	r3, [sp, #16]
 8006f9a:	9307      	str	r3, [sp, #28]
 8006f9c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006fa0:	931a      	str	r3, [sp, #104]	@ 0x68
 8006fa2:	4654      	mov	r4, sl
 8006fa4:	2205      	movs	r2, #5
 8006fa6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006faa:	4853      	ldr	r0, [pc, #332]	@ (80070f8 <_vfiprintf_r+0x21c>)
 8006fac:	f7f9 f910 	bl	80001d0 <memchr>
 8006fb0:	9a04      	ldr	r2, [sp, #16]
 8006fb2:	b9d8      	cbnz	r0, 8006fec <_vfiprintf_r+0x110>
 8006fb4:	06d1      	lsls	r1, r2, #27
 8006fb6:	bf44      	itt	mi
 8006fb8:	2320      	movmi	r3, #32
 8006fba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006fbe:	0713      	lsls	r3, r2, #28
 8006fc0:	bf44      	itt	mi
 8006fc2:	232b      	movmi	r3, #43	@ 0x2b
 8006fc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006fc8:	f89a 3000 	ldrb.w	r3, [sl]
 8006fcc:	2b2a      	cmp	r3, #42	@ 0x2a
 8006fce:	d015      	beq.n	8006ffc <_vfiprintf_r+0x120>
 8006fd0:	9a07      	ldr	r2, [sp, #28]
 8006fd2:	4654      	mov	r4, sl
 8006fd4:	2000      	movs	r0, #0
 8006fd6:	f04f 0c0a 	mov.w	ip, #10
 8006fda:	4621      	mov	r1, r4
 8006fdc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006fe0:	3b30      	subs	r3, #48	@ 0x30
 8006fe2:	2b09      	cmp	r3, #9
 8006fe4:	d94b      	bls.n	800707e <_vfiprintf_r+0x1a2>
 8006fe6:	b1b0      	cbz	r0, 8007016 <_vfiprintf_r+0x13a>
 8006fe8:	9207      	str	r2, [sp, #28]
 8006fea:	e014      	b.n	8007016 <_vfiprintf_r+0x13a>
 8006fec:	eba0 0308 	sub.w	r3, r0, r8
 8006ff0:	fa09 f303 	lsl.w	r3, r9, r3
 8006ff4:	4313      	orrs	r3, r2
 8006ff6:	9304      	str	r3, [sp, #16]
 8006ff8:	46a2      	mov	sl, r4
 8006ffa:	e7d2      	b.n	8006fa2 <_vfiprintf_r+0xc6>
 8006ffc:	9b03      	ldr	r3, [sp, #12]
 8006ffe:	1d19      	adds	r1, r3, #4
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	9103      	str	r1, [sp, #12]
 8007004:	2b00      	cmp	r3, #0
 8007006:	bfbb      	ittet	lt
 8007008:	425b      	neglt	r3, r3
 800700a:	f042 0202 	orrlt.w	r2, r2, #2
 800700e:	9307      	strge	r3, [sp, #28]
 8007010:	9307      	strlt	r3, [sp, #28]
 8007012:	bfb8      	it	lt
 8007014:	9204      	strlt	r2, [sp, #16]
 8007016:	7823      	ldrb	r3, [r4, #0]
 8007018:	2b2e      	cmp	r3, #46	@ 0x2e
 800701a:	d10a      	bne.n	8007032 <_vfiprintf_r+0x156>
 800701c:	7863      	ldrb	r3, [r4, #1]
 800701e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007020:	d132      	bne.n	8007088 <_vfiprintf_r+0x1ac>
 8007022:	9b03      	ldr	r3, [sp, #12]
 8007024:	1d1a      	adds	r2, r3, #4
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	9203      	str	r2, [sp, #12]
 800702a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800702e:	3402      	adds	r4, #2
 8007030:	9305      	str	r3, [sp, #20]
 8007032:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007108 <_vfiprintf_r+0x22c>
 8007036:	7821      	ldrb	r1, [r4, #0]
 8007038:	2203      	movs	r2, #3
 800703a:	4650      	mov	r0, sl
 800703c:	f7f9 f8c8 	bl	80001d0 <memchr>
 8007040:	b138      	cbz	r0, 8007052 <_vfiprintf_r+0x176>
 8007042:	9b04      	ldr	r3, [sp, #16]
 8007044:	eba0 000a 	sub.w	r0, r0, sl
 8007048:	2240      	movs	r2, #64	@ 0x40
 800704a:	4082      	lsls	r2, r0
 800704c:	4313      	orrs	r3, r2
 800704e:	3401      	adds	r4, #1
 8007050:	9304      	str	r3, [sp, #16]
 8007052:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007056:	4829      	ldr	r0, [pc, #164]	@ (80070fc <_vfiprintf_r+0x220>)
 8007058:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800705c:	2206      	movs	r2, #6
 800705e:	f7f9 f8b7 	bl	80001d0 <memchr>
 8007062:	2800      	cmp	r0, #0
 8007064:	d03f      	beq.n	80070e6 <_vfiprintf_r+0x20a>
 8007066:	4b26      	ldr	r3, [pc, #152]	@ (8007100 <_vfiprintf_r+0x224>)
 8007068:	bb1b      	cbnz	r3, 80070b2 <_vfiprintf_r+0x1d6>
 800706a:	9b03      	ldr	r3, [sp, #12]
 800706c:	3307      	adds	r3, #7
 800706e:	f023 0307 	bic.w	r3, r3, #7
 8007072:	3308      	adds	r3, #8
 8007074:	9303      	str	r3, [sp, #12]
 8007076:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007078:	443b      	add	r3, r7
 800707a:	9309      	str	r3, [sp, #36]	@ 0x24
 800707c:	e76a      	b.n	8006f54 <_vfiprintf_r+0x78>
 800707e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007082:	460c      	mov	r4, r1
 8007084:	2001      	movs	r0, #1
 8007086:	e7a8      	b.n	8006fda <_vfiprintf_r+0xfe>
 8007088:	2300      	movs	r3, #0
 800708a:	3401      	adds	r4, #1
 800708c:	9305      	str	r3, [sp, #20]
 800708e:	4619      	mov	r1, r3
 8007090:	f04f 0c0a 	mov.w	ip, #10
 8007094:	4620      	mov	r0, r4
 8007096:	f810 2b01 	ldrb.w	r2, [r0], #1
 800709a:	3a30      	subs	r2, #48	@ 0x30
 800709c:	2a09      	cmp	r2, #9
 800709e:	d903      	bls.n	80070a8 <_vfiprintf_r+0x1cc>
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d0c6      	beq.n	8007032 <_vfiprintf_r+0x156>
 80070a4:	9105      	str	r1, [sp, #20]
 80070a6:	e7c4      	b.n	8007032 <_vfiprintf_r+0x156>
 80070a8:	fb0c 2101 	mla	r1, ip, r1, r2
 80070ac:	4604      	mov	r4, r0
 80070ae:	2301      	movs	r3, #1
 80070b0:	e7f0      	b.n	8007094 <_vfiprintf_r+0x1b8>
 80070b2:	ab03      	add	r3, sp, #12
 80070b4:	9300      	str	r3, [sp, #0]
 80070b6:	462a      	mov	r2, r5
 80070b8:	4b12      	ldr	r3, [pc, #72]	@ (8007104 <_vfiprintf_r+0x228>)
 80070ba:	a904      	add	r1, sp, #16
 80070bc:	4630      	mov	r0, r6
 80070be:	f3af 8000 	nop.w
 80070c2:	4607      	mov	r7, r0
 80070c4:	1c78      	adds	r0, r7, #1
 80070c6:	d1d6      	bne.n	8007076 <_vfiprintf_r+0x19a>
 80070c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80070ca:	07d9      	lsls	r1, r3, #31
 80070cc:	d405      	bmi.n	80070da <_vfiprintf_r+0x1fe>
 80070ce:	89ab      	ldrh	r3, [r5, #12]
 80070d0:	059a      	lsls	r2, r3, #22
 80070d2:	d402      	bmi.n	80070da <_vfiprintf_r+0x1fe>
 80070d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80070d6:	f7ff fe8b 	bl	8006df0 <__retarget_lock_release_recursive>
 80070da:	89ab      	ldrh	r3, [r5, #12]
 80070dc:	065b      	lsls	r3, r3, #25
 80070de:	f53f af1f 	bmi.w	8006f20 <_vfiprintf_r+0x44>
 80070e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80070e4:	e71e      	b.n	8006f24 <_vfiprintf_r+0x48>
 80070e6:	ab03      	add	r3, sp, #12
 80070e8:	9300      	str	r3, [sp, #0]
 80070ea:	462a      	mov	r2, r5
 80070ec:	4b05      	ldr	r3, [pc, #20]	@ (8007104 <_vfiprintf_r+0x228>)
 80070ee:	a904      	add	r1, sp, #16
 80070f0:	4630      	mov	r0, r6
 80070f2:	f000 f879 	bl	80071e8 <_printf_i>
 80070f6:	e7e4      	b.n	80070c2 <_vfiprintf_r+0x1e6>
 80070f8:	08007ab8 	.word	0x08007ab8
 80070fc:	08007ac2 	.word	0x08007ac2
 8007100:	00000000 	.word	0x00000000
 8007104:	08006eb7 	.word	0x08006eb7
 8007108:	08007abe 	.word	0x08007abe

0800710c <_printf_common>:
 800710c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007110:	4616      	mov	r6, r2
 8007112:	4698      	mov	r8, r3
 8007114:	688a      	ldr	r2, [r1, #8]
 8007116:	690b      	ldr	r3, [r1, #16]
 8007118:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800711c:	4293      	cmp	r3, r2
 800711e:	bfb8      	it	lt
 8007120:	4613      	movlt	r3, r2
 8007122:	6033      	str	r3, [r6, #0]
 8007124:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007128:	4607      	mov	r7, r0
 800712a:	460c      	mov	r4, r1
 800712c:	b10a      	cbz	r2, 8007132 <_printf_common+0x26>
 800712e:	3301      	adds	r3, #1
 8007130:	6033      	str	r3, [r6, #0]
 8007132:	6823      	ldr	r3, [r4, #0]
 8007134:	0699      	lsls	r1, r3, #26
 8007136:	bf42      	ittt	mi
 8007138:	6833      	ldrmi	r3, [r6, #0]
 800713a:	3302      	addmi	r3, #2
 800713c:	6033      	strmi	r3, [r6, #0]
 800713e:	6825      	ldr	r5, [r4, #0]
 8007140:	f015 0506 	ands.w	r5, r5, #6
 8007144:	d106      	bne.n	8007154 <_printf_common+0x48>
 8007146:	f104 0a19 	add.w	sl, r4, #25
 800714a:	68e3      	ldr	r3, [r4, #12]
 800714c:	6832      	ldr	r2, [r6, #0]
 800714e:	1a9b      	subs	r3, r3, r2
 8007150:	42ab      	cmp	r3, r5
 8007152:	dc26      	bgt.n	80071a2 <_printf_common+0x96>
 8007154:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007158:	6822      	ldr	r2, [r4, #0]
 800715a:	3b00      	subs	r3, #0
 800715c:	bf18      	it	ne
 800715e:	2301      	movne	r3, #1
 8007160:	0692      	lsls	r2, r2, #26
 8007162:	d42b      	bmi.n	80071bc <_printf_common+0xb0>
 8007164:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007168:	4641      	mov	r1, r8
 800716a:	4638      	mov	r0, r7
 800716c:	47c8      	blx	r9
 800716e:	3001      	adds	r0, #1
 8007170:	d01e      	beq.n	80071b0 <_printf_common+0xa4>
 8007172:	6823      	ldr	r3, [r4, #0]
 8007174:	6922      	ldr	r2, [r4, #16]
 8007176:	f003 0306 	and.w	r3, r3, #6
 800717a:	2b04      	cmp	r3, #4
 800717c:	bf02      	ittt	eq
 800717e:	68e5      	ldreq	r5, [r4, #12]
 8007180:	6833      	ldreq	r3, [r6, #0]
 8007182:	1aed      	subeq	r5, r5, r3
 8007184:	68a3      	ldr	r3, [r4, #8]
 8007186:	bf0c      	ite	eq
 8007188:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800718c:	2500      	movne	r5, #0
 800718e:	4293      	cmp	r3, r2
 8007190:	bfc4      	itt	gt
 8007192:	1a9b      	subgt	r3, r3, r2
 8007194:	18ed      	addgt	r5, r5, r3
 8007196:	2600      	movs	r6, #0
 8007198:	341a      	adds	r4, #26
 800719a:	42b5      	cmp	r5, r6
 800719c:	d11a      	bne.n	80071d4 <_printf_common+0xc8>
 800719e:	2000      	movs	r0, #0
 80071a0:	e008      	b.n	80071b4 <_printf_common+0xa8>
 80071a2:	2301      	movs	r3, #1
 80071a4:	4652      	mov	r2, sl
 80071a6:	4641      	mov	r1, r8
 80071a8:	4638      	mov	r0, r7
 80071aa:	47c8      	blx	r9
 80071ac:	3001      	adds	r0, #1
 80071ae:	d103      	bne.n	80071b8 <_printf_common+0xac>
 80071b0:	f04f 30ff 	mov.w	r0, #4294967295
 80071b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071b8:	3501      	adds	r5, #1
 80071ba:	e7c6      	b.n	800714a <_printf_common+0x3e>
 80071bc:	18e1      	adds	r1, r4, r3
 80071be:	1c5a      	adds	r2, r3, #1
 80071c0:	2030      	movs	r0, #48	@ 0x30
 80071c2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80071c6:	4422      	add	r2, r4
 80071c8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80071cc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80071d0:	3302      	adds	r3, #2
 80071d2:	e7c7      	b.n	8007164 <_printf_common+0x58>
 80071d4:	2301      	movs	r3, #1
 80071d6:	4622      	mov	r2, r4
 80071d8:	4641      	mov	r1, r8
 80071da:	4638      	mov	r0, r7
 80071dc:	47c8      	blx	r9
 80071de:	3001      	adds	r0, #1
 80071e0:	d0e6      	beq.n	80071b0 <_printf_common+0xa4>
 80071e2:	3601      	adds	r6, #1
 80071e4:	e7d9      	b.n	800719a <_printf_common+0x8e>
	...

080071e8 <_printf_i>:
 80071e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80071ec:	7e0f      	ldrb	r7, [r1, #24]
 80071ee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80071f0:	2f78      	cmp	r7, #120	@ 0x78
 80071f2:	4691      	mov	r9, r2
 80071f4:	4680      	mov	r8, r0
 80071f6:	460c      	mov	r4, r1
 80071f8:	469a      	mov	sl, r3
 80071fa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80071fe:	d807      	bhi.n	8007210 <_printf_i+0x28>
 8007200:	2f62      	cmp	r7, #98	@ 0x62
 8007202:	d80a      	bhi.n	800721a <_printf_i+0x32>
 8007204:	2f00      	cmp	r7, #0
 8007206:	f000 80d1 	beq.w	80073ac <_printf_i+0x1c4>
 800720a:	2f58      	cmp	r7, #88	@ 0x58
 800720c:	f000 80b8 	beq.w	8007380 <_printf_i+0x198>
 8007210:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007214:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007218:	e03a      	b.n	8007290 <_printf_i+0xa8>
 800721a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800721e:	2b15      	cmp	r3, #21
 8007220:	d8f6      	bhi.n	8007210 <_printf_i+0x28>
 8007222:	a101      	add	r1, pc, #4	@ (adr r1, 8007228 <_printf_i+0x40>)
 8007224:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007228:	08007281 	.word	0x08007281
 800722c:	08007295 	.word	0x08007295
 8007230:	08007211 	.word	0x08007211
 8007234:	08007211 	.word	0x08007211
 8007238:	08007211 	.word	0x08007211
 800723c:	08007211 	.word	0x08007211
 8007240:	08007295 	.word	0x08007295
 8007244:	08007211 	.word	0x08007211
 8007248:	08007211 	.word	0x08007211
 800724c:	08007211 	.word	0x08007211
 8007250:	08007211 	.word	0x08007211
 8007254:	08007393 	.word	0x08007393
 8007258:	080072bf 	.word	0x080072bf
 800725c:	0800734d 	.word	0x0800734d
 8007260:	08007211 	.word	0x08007211
 8007264:	08007211 	.word	0x08007211
 8007268:	080073b5 	.word	0x080073b5
 800726c:	08007211 	.word	0x08007211
 8007270:	080072bf 	.word	0x080072bf
 8007274:	08007211 	.word	0x08007211
 8007278:	08007211 	.word	0x08007211
 800727c:	08007355 	.word	0x08007355
 8007280:	6833      	ldr	r3, [r6, #0]
 8007282:	1d1a      	adds	r2, r3, #4
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	6032      	str	r2, [r6, #0]
 8007288:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800728c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007290:	2301      	movs	r3, #1
 8007292:	e09c      	b.n	80073ce <_printf_i+0x1e6>
 8007294:	6833      	ldr	r3, [r6, #0]
 8007296:	6820      	ldr	r0, [r4, #0]
 8007298:	1d19      	adds	r1, r3, #4
 800729a:	6031      	str	r1, [r6, #0]
 800729c:	0606      	lsls	r6, r0, #24
 800729e:	d501      	bpl.n	80072a4 <_printf_i+0xbc>
 80072a0:	681d      	ldr	r5, [r3, #0]
 80072a2:	e003      	b.n	80072ac <_printf_i+0xc4>
 80072a4:	0645      	lsls	r5, r0, #25
 80072a6:	d5fb      	bpl.n	80072a0 <_printf_i+0xb8>
 80072a8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80072ac:	2d00      	cmp	r5, #0
 80072ae:	da03      	bge.n	80072b8 <_printf_i+0xd0>
 80072b0:	232d      	movs	r3, #45	@ 0x2d
 80072b2:	426d      	negs	r5, r5
 80072b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80072b8:	4858      	ldr	r0, [pc, #352]	@ (800741c <_printf_i+0x234>)
 80072ba:	230a      	movs	r3, #10
 80072bc:	e011      	b.n	80072e2 <_printf_i+0xfa>
 80072be:	6821      	ldr	r1, [r4, #0]
 80072c0:	6833      	ldr	r3, [r6, #0]
 80072c2:	0608      	lsls	r0, r1, #24
 80072c4:	f853 5b04 	ldr.w	r5, [r3], #4
 80072c8:	d402      	bmi.n	80072d0 <_printf_i+0xe8>
 80072ca:	0649      	lsls	r1, r1, #25
 80072cc:	bf48      	it	mi
 80072ce:	b2ad      	uxthmi	r5, r5
 80072d0:	2f6f      	cmp	r7, #111	@ 0x6f
 80072d2:	4852      	ldr	r0, [pc, #328]	@ (800741c <_printf_i+0x234>)
 80072d4:	6033      	str	r3, [r6, #0]
 80072d6:	bf14      	ite	ne
 80072d8:	230a      	movne	r3, #10
 80072da:	2308      	moveq	r3, #8
 80072dc:	2100      	movs	r1, #0
 80072de:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80072e2:	6866      	ldr	r6, [r4, #4]
 80072e4:	60a6      	str	r6, [r4, #8]
 80072e6:	2e00      	cmp	r6, #0
 80072e8:	db05      	blt.n	80072f6 <_printf_i+0x10e>
 80072ea:	6821      	ldr	r1, [r4, #0]
 80072ec:	432e      	orrs	r6, r5
 80072ee:	f021 0104 	bic.w	r1, r1, #4
 80072f2:	6021      	str	r1, [r4, #0]
 80072f4:	d04b      	beq.n	800738e <_printf_i+0x1a6>
 80072f6:	4616      	mov	r6, r2
 80072f8:	fbb5 f1f3 	udiv	r1, r5, r3
 80072fc:	fb03 5711 	mls	r7, r3, r1, r5
 8007300:	5dc7      	ldrb	r7, [r0, r7]
 8007302:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007306:	462f      	mov	r7, r5
 8007308:	42bb      	cmp	r3, r7
 800730a:	460d      	mov	r5, r1
 800730c:	d9f4      	bls.n	80072f8 <_printf_i+0x110>
 800730e:	2b08      	cmp	r3, #8
 8007310:	d10b      	bne.n	800732a <_printf_i+0x142>
 8007312:	6823      	ldr	r3, [r4, #0]
 8007314:	07df      	lsls	r7, r3, #31
 8007316:	d508      	bpl.n	800732a <_printf_i+0x142>
 8007318:	6923      	ldr	r3, [r4, #16]
 800731a:	6861      	ldr	r1, [r4, #4]
 800731c:	4299      	cmp	r1, r3
 800731e:	bfde      	ittt	le
 8007320:	2330      	movle	r3, #48	@ 0x30
 8007322:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007326:	f106 36ff 	addle.w	r6, r6, #4294967295
 800732a:	1b92      	subs	r2, r2, r6
 800732c:	6122      	str	r2, [r4, #16]
 800732e:	f8cd a000 	str.w	sl, [sp]
 8007332:	464b      	mov	r3, r9
 8007334:	aa03      	add	r2, sp, #12
 8007336:	4621      	mov	r1, r4
 8007338:	4640      	mov	r0, r8
 800733a:	f7ff fee7 	bl	800710c <_printf_common>
 800733e:	3001      	adds	r0, #1
 8007340:	d14a      	bne.n	80073d8 <_printf_i+0x1f0>
 8007342:	f04f 30ff 	mov.w	r0, #4294967295
 8007346:	b004      	add	sp, #16
 8007348:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800734c:	6823      	ldr	r3, [r4, #0]
 800734e:	f043 0320 	orr.w	r3, r3, #32
 8007352:	6023      	str	r3, [r4, #0]
 8007354:	4832      	ldr	r0, [pc, #200]	@ (8007420 <_printf_i+0x238>)
 8007356:	2778      	movs	r7, #120	@ 0x78
 8007358:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800735c:	6823      	ldr	r3, [r4, #0]
 800735e:	6831      	ldr	r1, [r6, #0]
 8007360:	061f      	lsls	r7, r3, #24
 8007362:	f851 5b04 	ldr.w	r5, [r1], #4
 8007366:	d402      	bmi.n	800736e <_printf_i+0x186>
 8007368:	065f      	lsls	r7, r3, #25
 800736a:	bf48      	it	mi
 800736c:	b2ad      	uxthmi	r5, r5
 800736e:	6031      	str	r1, [r6, #0]
 8007370:	07d9      	lsls	r1, r3, #31
 8007372:	bf44      	itt	mi
 8007374:	f043 0320 	orrmi.w	r3, r3, #32
 8007378:	6023      	strmi	r3, [r4, #0]
 800737a:	b11d      	cbz	r5, 8007384 <_printf_i+0x19c>
 800737c:	2310      	movs	r3, #16
 800737e:	e7ad      	b.n	80072dc <_printf_i+0xf4>
 8007380:	4826      	ldr	r0, [pc, #152]	@ (800741c <_printf_i+0x234>)
 8007382:	e7e9      	b.n	8007358 <_printf_i+0x170>
 8007384:	6823      	ldr	r3, [r4, #0]
 8007386:	f023 0320 	bic.w	r3, r3, #32
 800738a:	6023      	str	r3, [r4, #0]
 800738c:	e7f6      	b.n	800737c <_printf_i+0x194>
 800738e:	4616      	mov	r6, r2
 8007390:	e7bd      	b.n	800730e <_printf_i+0x126>
 8007392:	6833      	ldr	r3, [r6, #0]
 8007394:	6825      	ldr	r5, [r4, #0]
 8007396:	6961      	ldr	r1, [r4, #20]
 8007398:	1d18      	adds	r0, r3, #4
 800739a:	6030      	str	r0, [r6, #0]
 800739c:	062e      	lsls	r6, r5, #24
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	d501      	bpl.n	80073a6 <_printf_i+0x1be>
 80073a2:	6019      	str	r1, [r3, #0]
 80073a4:	e002      	b.n	80073ac <_printf_i+0x1c4>
 80073a6:	0668      	lsls	r0, r5, #25
 80073a8:	d5fb      	bpl.n	80073a2 <_printf_i+0x1ba>
 80073aa:	8019      	strh	r1, [r3, #0]
 80073ac:	2300      	movs	r3, #0
 80073ae:	6123      	str	r3, [r4, #16]
 80073b0:	4616      	mov	r6, r2
 80073b2:	e7bc      	b.n	800732e <_printf_i+0x146>
 80073b4:	6833      	ldr	r3, [r6, #0]
 80073b6:	1d1a      	adds	r2, r3, #4
 80073b8:	6032      	str	r2, [r6, #0]
 80073ba:	681e      	ldr	r6, [r3, #0]
 80073bc:	6862      	ldr	r2, [r4, #4]
 80073be:	2100      	movs	r1, #0
 80073c0:	4630      	mov	r0, r6
 80073c2:	f7f8 ff05 	bl	80001d0 <memchr>
 80073c6:	b108      	cbz	r0, 80073cc <_printf_i+0x1e4>
 80073c8:	1b80      	subs	r0, r0, r6
 80073ca:	6060      	str	r0, [r4, #4]
 80073cc:	6863      	ldr	r3, [r4, #4]
 80073ce:	6123      	str	r3, [r4, #16]
 80073d0:	2300      	movs	r3, #0
 80073d2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80073d6:	e7aa      	b.n	800732e <_printf_i+0x146>
 80073d8:	6923      	ldr	r3, [r4, #16]
 80073da:	4632      	mov	r2, r6
 80073dc:	4649      	mov	r1, r9
 80073de:	4640      	mov	r0, r8
 80073e0:	47d0      	blx	sl
 80073e2:	3001      	adds	r0, #1
 80073e4:	d0ad      	beq.n	8007342 <_printf_i+0x15a>
 80073e6:	6823      	ldr	r3, [r4, #0]
 80073e8:	079b      	lsls	r3, r3, #30
 80073ea:	d413      	bmi.n	8007414 <_printf_i+0x22c>
 80073ec:	68e0      	ldr	r0, [r4, #12]
 80073ee:	9b03      	ldr	r3, [sp, #12]
 80073f0:	4298      	cmp	r0, r3
 80073f2:	bfb8      	it	lt
 80073f4:	4618      	movlt	r0, r3
 80073f6:	e7a6      	b.n	8007346 <_printf_i+0x15e>
 80073f8:	2301      	movs	r3, #1
 80073fa:	4632      	mov	r2, r6
 80073fc:	4649      	mov	r1, r9
 80073fe:	4640      	mov	r0, r8
 8007400:	47d0      	blx	sl
 8007402:	3001      	adds	r0, #1
 8007404:	d09d      	beq.n	8007342 <_printf_i+0x15a>
 8007406:	3501      	adds	r5, #1
 8007408:	68e3      	ldr	r3, [r4, #12]
 800740a:	9903      	ldr	r1, [sp, #12]
 800740c:	1a5b      	subs	r3, r3, r1
 800740e:	42ab      	cmp	r3, r5
 8007410:	dcf2      	bgt.n	80073f8 <_printf_i+0x210>
 8007412:	e7eb      	b.n	80073ec <_printf_i+0x204>
 8007414:	2500      	movs	r5, #0
 8007416:	f104 0619 	add.w	r6, r4, #25
 800741a:	e7f5      	b.n	8007408 <_printf_i+0x220>
 800741c:	08007ac9 	.word	0x08007ac9
 8007420:	08007ada 	.word	0x08007ada

08007424 <__sflush_r>:
 8007424:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800742c:	0716      	lsls	r6, r2, #28
 800742e:	4605      	mov	r5, r0
 8007430:	460c      	mov	r4, r1
 8007432:	d454      	bmi.n	80074de <__sflush_r+0xba>
 8007434:	684b      	ldr	r3, [r1, #4]
 8007436:	2b00      	cmp	r3, #0
 8007438:	dc02      	bgt.n	8007440 <__sflush_r+0x1c>
 800743a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800743c:	2b00      	cmp	r3, #0
 800743e:	dd48      	ble.n	80074d2 <__sflush_r+0xae>
 8007440:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007442:	2e00      	cmp	r6, #0
 8007444:	d045      	beq.n	80074d2 <__sflush_r+0xae>
 8007446:	2300      	movs	r3, #0
 8007448:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800744c:	682f      	ldr	r7, [r5, #0]
 800744e:	6a21      	ldr	r1, [r4, #32]
 8007450:	602b      	str	r3, [r5, #0]
 8007452:	d030      	beq.n	80074b6 <__sflush_r+0x92>
 8007454:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007456:	89a3      	ldrh	r3, [r4, #12]
 8007458:	0759      	lsls	r1, r3, #29
 800745a:	d505      	bpl.n	8007468 <__sflush_r+0x44>
 800745c:	6863      	ldr	r3, [r4, #4]
 800745e:	1ad2      	subs	r2, r2, r3
 8007460:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007462:	b10b      	cbz	r3, 8007468 <__sflush_r+0x44>
 8007464:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007466:	1ad2      	subs	r2, r2, r3
 8007468:	2300      	movs	r3, #0
 800746a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800746c:	6a21      	ldr	r1, [r4, #32]
 800746e:	4628      	mov	r0, r5
 8007470:	47b0      	blx	r6
 8007472:	1c43      	adds	r3, r0, #1
 8007474:	89a3      	ldrh	r3, [r4, #12]
 8007476:	d106      	bne.n	8007486 <__sflush_r+0x62>
 8007478:	6829      	ldr	r1, [r5, #0]
 800747a:	291d      	cmp	r1, #29
 800747c:	d82b      	bhi.n	80074d6 <__sflush_r+0xb2>
 800747e:	4a2a      	ldr	r2, [pc, #168]	@ (8007528 <__sflush_r+0x104>)
 8007480:	40ca      	lsrs	r2, r1
 8007482:	07d6      	lsls	r6, r2, #31
 8007484:	d527      	bpl.n	80074d6 <__sflush_r+0xb2>
 8007486:	2200      	movs	r2, #0
 8007488:	6062      	str	r2, [r4, #4]
 800748a:	04d9      	lsls	r1, r3, #19
 800748c:	6922      	ldr	r2, [r4, #16]
 800748e:	6022      	str	r2, [r4, #0]
 8007490:	d504      	bpl.n	800749c <__sflush_r+0x78>
 8007492:	1c42      	adds	r2, r0, #1
 8007494:	d101      	bne.n	800749a <__sflush_r+0x76>
 8007496:	682b      	ldr	r3, [r5, #0]
 8007498:	b903      	cbnz	r3, 800749c <__sflush_r+0x78>
 800749a:	6560      	str	r0, [r4, #84]	@ 0x54
 800749c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800749e:	602f      	str	r7, [r5, #0]
 80074a0:	b1b9      	cbz	r1, 80074d2 <__sflush_r+0xae>
 80074a2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80074a6:	4299      	cmp	r1, r3
 80074a8:	d002      	beq.n	80074b0 <__sflush_r+0x8c>
 80074aa:	4628      	mov	r0, r5
 80074ac:	f7ff fca2 	bl	8006df4 <_free_r>
 80074b0:	2300      	movs	r3, #0
 80074b2:	6363      	str	r3, [r4, #52]	@ 0x34
 80074b4:	e00d      	b.n	80074d2 <__sflush_r+0xae>
 80074b6:	2301      	movs	r3, #1
 80074b8:	4628      	mov	r0, r5
 80074ba:	47b0      	blx	r6
 80074bc:	4602      	mov	r2, r0
 80074be:	1c50      	adds	r0, r2, #1
 80074c0:	d1c9      	bne.n	8007456 <__sflush_r+0x32>
 80074c2:	682b      	ldr	r3, [r5, #0]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d0c6      	beq.n	8007456 <__sflush_r+0x32>
 80074c8:	2b1d      	cmp	r3, #29
 80074ca:	d001      	beq.n	80074d0 <__sflush_r+0xac>
 80074cc:	2b16      	cmp	r3, #22
 80074ce:	d11e      	bne.n	800750e <__sflush_r+0xea>
 80074d0:	602f      	str	r7, [r5, #0]
 80074d2:	2000      	movs	r0, #0
 80074d4:	e022      	b.n	800751c <__sflush_r+0xf8>
 80074d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80074da:	b21b      	sxth	r3, r3
 80074dc:	e01b      	b.n	8007516 <__sflush_r+0xf2>
 80074de:	690f      	ldr	r7, [r1, #16]
 80074e0:	2f00      	cmp	r7, #0
 80074e2:	d0f6      	beq.n	80074d2 <__sflush_r+0xae>
 80074e4:	0793      	lsls	r3, r2, #30
 80074e6:	680e      	ldr	r6, [r1, #0]
 80074e8:	bf08      	it	eq
 80074ea:	694b      	ldreq	r3, [r1, #20]
 80074ec:	600f      	str	r7, [r1, #0]
 80074ee:	bf18      	it	ne
 80074f0:	2300      	movne	r3, #0
 80074f2:	eba6 0807 	sub.w	r8, r6, r7
 80074f6:	608b      	str	r3, [r1, #8]
 80074f8:	f1b8 0f00 	cmp.w	r8, #0
 80074fc:	dde9      	ble.n	80074d2 <__sflush_r+0xae>
 80074fe:	6a21      	ldr	r1, [r4, #32]
 8007500:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007502:	4643      	mov	r3, r8
 8007504:	463a      	mov	r2, r7
 8007506:	4628      	mov	r0, r5
 8007508:	47b0      	blx	r6
 800750a:	2800      	cmp	r0, #0
 800750c:	dc08      	bgt.n	8007520 <__sflush_r+0xfc>
 800750e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007512:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007516:	81a3      	strh	r3, [r4, #12]
 8007518:	f04f 30ff 	mov.w	r0, #4294967295
 800751c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007520:	4407      	add	r7, r0
 8007522:	eba8 0800 	sub.w	r8, r8, r0
 8007526:	e7e7      	b.n	80074f8 <__sflush_r+0xd4>
 8007528:	20400001 	.word	0x20400001

0800752c <_fflush_r>:
 800752c:	b538      	push	{r3, r4, r5, lr}
 800752e:	690b      	ldr	r3, [r1, #16]
 8007530:	4605      	mov	r5, r0
 8007532:	460c      	mov	r4, r1
 8007534:	b913      	cbnz	r3, 800753c <_fflush_r+0x10>
 8007536:	2500      	movs	r5, #0
 8007538:	4628      	mov	r0, r5
 800753a:	bd38      	pop	{r3, r4, r5, pc}
 800753c:	b118      	cbz	r0, 8007546 <_fflush_r+0x1a>
 800753e:	6a03      	ldr	r3, [r0, #32]
 8007540:	b90b      	cbnz	r3, 8007546 <_fflush_r+0x1a>
 8007542:	f7ff fb3f 	bl	8006bc4 <__sinit>
 8007546:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d0f3      	beq.n	8007536 <_fflush_r+0xa>
 800754e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007550:	07d0      	lsls	r0, r2, #31
 8007552:	d404      	bmi.n	800755e <_fflush_r+0x32>
 8007554:	0599      	lsls	r1, r3, #22
 8007556:	d402      	bmi.n	800755e <_fflush_r+0x32>
 8007558:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800755a:	f7ff fc48 	bl	8006dee <__retarget_lock_acquire_recursive>
 800755e:	4628      	mov	r0, r5
 8007560:	4621      	mov	r1, r4
 8007562:	f7ff ff5f 	bl	8007424 <__sflush_r>
 8007566:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007568:	07da      	lsls	r2, r3, #31
 800756a:	4605      	mov	r5, r0
 800756c:	d4e4      	bmi.n	8007538 <_fflush_r+0xc>
 800756e:	89a3      	ldrh	r3, [r4, #12]
 8007570:	059b      	lsls	r3, r3, #22
 8007572:	d4e1      	bmi.n	8007538 <_fflush_r+0xc>
 8007574:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007576:	f7ff fc3b 	bl	8006df0 <__retarget_lock_release_recursive>
 800757a:	e7dd      	b.n	8007538 <_fflush_r+0xc>

0800757c <__swhatbuf_r>:
 800757c:	b570      	push	{r4, r5, r6, lr}
 800757e:	460c      	mov	r4, r1
 8007580:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007584:	2900      	cmp	r1, #0
 8007586:	b096      	sub	sp, #88	@ 0x58
 8007588:	4615      	mov	r5, r2
 800758a:	461e      	mov	r6, r3
 800758c:	da0d      	bge.n	80075aa <__swhatbuf_r+0x2e>
 800758e:	89a3      	ldrh	r3, [r4, #12]
 8007590:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007594:	f04f 0100 	mov.w	r1, #0
 8007598:	bf14      	ite	ne
 800759a:	2340      	movne	r3, #64	@ 0x40
 800759c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80075a0:	2000      	movs	r0, #0
 80075a2:	6031      	str	r1, [r6, #0]
 80075a4:	602b      	str	r3, [r5, #0]
 80075a6:	b016      	add	sp, #88	@ 0x58
 80075a8:	bd70      	pop	{r4, r5, r6, pc}
 80075aa:	466a      	mov	r2, sp
 80075ac:	f000 f8dc 	bl	8007768 <_fstat_r>
 80075b0:	2800      	cmp	r0, #0
 80075b2:	dbec      	blt.n	800758e <__swhatbuf_r+0x12>
 80075b4:	9901      	ldr	r1, [sp, #4]
 80075b6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80075ba:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80075be:	4259      	negs	r1, r3
 80075c0:	4159      	adcs	r1, r3
 80075c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80075c6:	e7eb      	b.n	80075a0 <__swhatbuf_r+0x24>

080075c8 <__smakebuf_r>:
 80075c8:	898b      	ldrh	r3, [r1, #12]
 80075ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80075cc:	079d      	lsls	r5, r3, #30
 80075ce:	4606      	mov	r6, r0
 80075d0:	460c      	mov	r4, r1
 80075d2:	d507      	bpl.n	80075e4 <__smakebuf_r+0x1c>
 80075d4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80075d8:	6023      	str	r3, [r4, #0]
 80075da:	6123      	str	r3, [r4, #16]
 80075dc:	2301      	movs	r3, #1
 80075de:	6163      	str	r3, [r4, #20]
 80075e0:	b003      	add	sp, #12
 80075e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80075e4:	ab01      	add	r3, sp, #4
 80075e6:	466a      	mov	r2, sp
 80075e8:	f7ff ffc8 	bl	800757c <__swhatbuf_r>
 80075ec:	9f00      	ldr	r7, [sp, #0]
 80075ee:	4605      	mov	r5, r0
 80075f0:	4639      	mov	r1, r7
 80075f2:	4630      	mov	r0, r6
 80075f4:	f7ff f9ce 	bl	8006994 <_malloc_r>
 80075f8:	b948      	cbnz	r0, 800760e <__smakebuf_r+0x46>
 80075fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075fe:	059a      	lsls	r2, r3, #22
 8007600:	d4ee      	bmi.n	80075e0 <__smakebuf_r+0x18>
 8007602:	f023 0303 	bic.w	r3, r3, #3
 8007606:	f043 0302 	orr.w	r3, r3, #2
 800760a:	81a3      	strh	r3, [r4, #12]
 800760c:	e7e2      	b.n	80075d4 <__smakebuf_r+0xc>
 800760e:	89a3      	ldrh	r3, [r4, #12]
 8007610:	6020      	str	r0, [r4, #0]
 8007612:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007616:	81a3      	strh	r3, [r4, #12]
 8007618:	9b01      	ldr	r3, [sp, #4]
 800761a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800761e:	b15b      	cbz	r3, 8007638 <__smakebuf_r+0x70>
 8007620:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007624:	4630      	mov	r0, r6
 8007626:	f000 f8b1 	bl	800778c <_isatty_r>
 800762a:	b128      	cbz	r0, 8007638 <__smakebuf_r+0x70>
 800762c:	89a3      	ldrh	r3, [r4, #12]
 800762e:	f023 0303 	bic.w	r3, r3, #3
 8007632:	f043 0301 	orr.w	r3, r3, #1
 8007636:	81a3      	strh	r3, [r4, #12]
 8007638:	89a3      	ldrh	r3, [r4, #12]
 800763a:	431d      	orrs	r5, r3
 800763c:	81a5      	strh	r5, [r4, #12]
 800763e:	e7cf      	b.n	80075e0 <__smakebuf_r+0x18>

08007640 <__swbuf_r>:
 8007640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007642:	460e      	mov	r6, r1
 8007644:	4614      	mov	r4, r2
 8007646:	4605      	mov	r5, r0
 8007648:	b118      	cbz	r0, 8007652 <__swbuf_r+0x12>
 800764a:	6a03      	ldr	r3, [r0, #32]
 800764c:	b90b      	cbnz	r3, 8007652 <__swbuf_r+0x12>
 800764e:	f7ff fab9 	bl	8006bc4 <__sinit>
 8007652:	69a3      	ldr	r3, [r4, #24]
 8007654:	60a3      	str	r3, [r4, #8]
 8007656:	89a3      	ldrh	r3, [r4, #12]
 8007658:	071a      	lsls	r2, r3, #28
 800765a:	d501      	bpl.n	8007660 <__swbuf_r+0x20>
 800765c:	6923      	ldr	r3, [r4, #16]
 800765e:	b943      	cbnz	r3, 8007672 <__swbuf_r+0x32>
 8007660:	4621      	mov	r1, r4
 8007662:	4628      	mov	r0, r5
 8007664:	f000 f82a 	bl	80076bc <__swsetup_r>
 8007668:	b118      	cbz	r0, 8007672 <__swbuf_r+0x32>
 800766a:	f04f 37ff 	mov.w	r7, #4294967295
 800766e:	4638      	mov	r0, r7
 8007670:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007672:	6823      	ldr	r3, [r4, #0]
 8007674:	6922      	ldr	r2, [r4, #16]
 8007676:	1a98      	subs	r0, r3, r2
 8007678:	6963      	ldr	r3, [r4, #20]
 800767a:	b2f6      	uxtb	r6, r6
 800767c:	4283      	cmp	r3, r0
 800767e:	4637      	mov	r7, r6
 8007680:	dc05      	bgt.n	800768e <__swbuf_r+0x4e>
 8007682:	4621      	mov	r1, r4
 8007684:	4628      	mov	r0, r5
 8007686:	f7ff ff51 	bl	800752c <_fflush_r>
 800768a:	2800      	cmp	r0, #0
 800768c:	d1ed      	bne.n	800766a <__swbuf_r+0x2a>
 800768e:	68a3      	ldr	r3, [r4, #8]
 8007690:	3b01      	subs	r3, #1
 8007692:	60a3      	str	r3, [r4, #8]
 8007694:	6823      	ldr	r3, [r4, #0]
 8007696:	1c5a      	adds	r2, r3, #1
 8007698:	6022      	str	r2, [r4, #0]
 800769a:	701e      	strb	r6, [r3, #0]
 800769c:	6962      	ldr	r2, [r4, #20]
 800769e:	1c43      	adds	r3, r0, #1
 80076a0:	429a      	cmp	r2, r3
 80076a2:	d004      	beq.n	80076ae <__swbuf_r+0x6e>
 80076a4:	89a3      	ldrh	r3, [r4, #12]
 80076a6:	07db      	lsls	r3, r3, #31
 80076a8:	d5e1      	bpl.n	800766e <__swbuf_r+0x2e>
 80076aa:	2e0a      	cmp	r6, #10
 80076ac:	d1df      	bne.n	800766e <__swbuf_r+0x2e>
 80076ae:	4621      	mov	r1, r4
 80076b0:	4628      	mov	r0, r5
 80076b2:	f7ff ff3b 	bl	800752c <_fflush_r>
 80076b6:	2800      	cmp	r0, #0
 80076b8:	d0d9      	beq.n	800766e <__swbuf_r+0x2e>
 80076ba:	e7d6      	b.n	800766a <__swbuf_r+0x2a>

080076bc <__swsetup_r>:
 80076bc:	b538      	push	{r3, r4, r5, lr}
 80076be:	4b29      	ldr	r3, [pc, #164]	@ (8007764 <__swsetup_r+0xa8>)
 80076c0:	4605      	mov	r5, r0
 80076c2:	6818      	ldr	r0, [r3, #0]
 80076c4:	460c      	mov	r4, r1
 80076c6:	b118      	cbz	r0, 80076d0 <__swsetup_r+0x14>
 80076c8:	6a03      	ldr	r3, [r0, #32]
 80076ca:	b90b      	cbnz	r3, 80076d0 <__swsetup_r+0x14>
 80076cc:	f7ff fa7a 	bl	8006bc4 <__sinit>
 80076d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076d4:	0719      	lsls	r1, r3, #28
 80076d6:	d422      	bmi.n	800771e <__swsetup_r+0x62>
 80076d8:	06da      	lsls	r2, r3, #27
 80076da:	d407      	bmi.n	80076ec <__swsetup_r+0x30>
 80076dc:	2209      	movs	r2, #9
 80076de:	602a      	str	r2, [r5, #0]
 80076e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80076e4:	81a3      	strh	r3, [r4, #12]
 80076e6:	f04f 30ff 	mov.w	r0, #4294967295
 80076ea:	e033      	b.n	8007754 <__swsetup_r+0x98>
 80076ec:	0758      	lsls	r0, r3, #29
 80076ee:	d512      	bpl.n	8007716 <__swsetup_r+0x5a>
 80076f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80076f2:	b141      	cbz	r1, 8007706 <__swsetup_r+0x4a>
 80076f4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80076f8:	4299      	cmp	r1, r3
 80076fa:	d002      	beq.n	8007702 <__swsetup_r+0x46>
 80076fc:	4628      	mov	r0, r5
 80076fe:	f7ff fb79 	bl	8006df4 <_free_r>
 8007702:	2300      	movs	r3, #0
 8007704:	6363      	str	r3, [r4, #52]	@ 0x34
 8007706:	89a3      	ldrh	r3, [r4, #12]
 8007708:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800770c:	81a3      	strh	r3, [r4, #12]
 800770e:	2300      	movs	r3, #0
 8007710:	6063      	str	r3, [r4, #4]
 8007712:	6923      	ldr	r3, [r4, #16]
 8007714:	6023      	str	r3, [r4, #0]
 8007716:	89a3      	ldrh	r3, [r4, #12]
 8007718:	f043 0308 	orr.w	r3, r3, #8
 800771c:	81a3      	strh	r3, [r4, #12]
 800771e:	6923      	ldr	r3, [r4, #16]
 8007720:	b94b      	cbnz	r3, 8007736 <__swsetup_r+0x7a>
 8007722:	89a3      	ldrh	r3, [r4, #12]
 8007724:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007728:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800772c:	d003      	beq.n	8007736 <__swsetup_r+0x7a>
 800772e:	4621      	mov	r1, r4
 8007730:	4628      	mov	r0, r5
 8007732:	f7ff ff49 	bl	80075c8 <__smakebuf_r>
 8007736:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800773a:	f013 0201 	ands.w	r2, r3, #1
 800773e:	d00a      	beq.n	8007756 <__swsetup_r+0x9a>
 8007740:	2200      	movs	r2, #0
 8007742:	60a2      	str	r2, [r4, #8]
 8007744:	6962      	ldr	r2, [r4, #20]
 8007746:	4252      	negs	r2, r2
 8007748:	61a2      	str	r2, [r4, #24]
 800774a:	6922      	ldr	r2, [r4, #16]
 800774c:	b942      	cbnz	r2, 8007760 <__swsetup_r+0xa4>
 800774e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007752:	d1c5      	bne.n	80076e0 <__swsetup_r+0x24>
 8007754:	bd38      	pop	{r3, r4, r5, pc}
 8007756:	0799      	lsls	r1, r3, #30
 8007758:	bf58      	it	pl
 800775a:	6962      	ldrpl	r2, [r4, #20]
 800775c:	60a2      	str	r2, [r4, #8]
 800775e:	e7f4      	b.n	800774a <__swsetup_r+0x8e>
 8007760:	2000      	movs	r0, #0
 8007762:	e7f7      	b.n	8007754 <__swsetup_r+0x98>
 8007764:	20000020 	.word	0x20000020

08007768 <_fstat_r>:
 8007768:	b538      	push	{r3, r4, r5, lr}
 800776a:	4d07      	ldr	r5, [pc, #28]	@ (8007788 <_fstat_r+0x20>)
 800776c:	2300      	movs	r3, #0
 800776e:	4604      	mov	r4, r0
 8007770:	4608      	mov	r0, r1
 8007772:	4611      	mov	r1, r2
 8007774:	602b      	str	r3, [r5, #0]
 8007776:	f7f9 fa80 	bl	8000c7a <_fstat>
 800777a:	1c43      	adds	r3, r0, #1
 800777c:	d102      	bne.n	8007784 <_fstat_r+0x1c>
 800777e:	682b      	ldr	r3, [r5, #0]
 8007780:	b103      	cbz	r3, 8007784 <_fstat_r+0x1c>
 8007782:	6023      	str	r3, [r4, #0]
 8007784:	bd38      	pop	{r3, r4, r5, pc}
 8007786:	bf00      	nop
 8007788:	200004d0 	.word	0x200004d0

0800778c <_isatty_r>:
 800778c:	b538      	push	{r3, r4, r5, lr}
 800778e:	4d06      	ldr	r5, [pc, #24]	@ (80077a8 <_isatty_r+0x1c>)
 8007790:	2300      	movs	r3, #0
 8007792:	4604      	mov	r4, r0
 8007794:	4608      	mov	r0, r1
 8007796:	602b      	str	r3, [r5, #0]
 8007798:	f7f9 fa7f 	bl	8000c9a <_isatty>
 800779c:	1c43      	adds	r3, r0, #1
 800779e:	d102      	bne.n	80077a6 <_isatty_r+0x1a>
 80077a0:	682b      	ldr	r3, [r5, #0]
 80077a2:	b103      	cbz	r3, 80077a6 <_isatty_r+0x1a>
 80077a4:	6023      	str	r3, [r4, #0]
 80077a6:	bd38      	pop	{r3, r4, r5, pc}
 80077a8:	200004d0 	.word	0x200004d0

080077ac <_init>:
 80077ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077ae:	bf00      	nop
 80077b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077b2:	bc08      	pop	{r3}
 80077b4:	469e      	mov	lr, r3
 80077b6:	4770      	bx	lr

080077b8 <_fini>:
 80077b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077ba:	bf00      	nop
 80077bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077be:	bc08      	pop	{r3}
 80077c0:	469e      	mov	lr, r3
 80077c2:	4770      	bx	lr
