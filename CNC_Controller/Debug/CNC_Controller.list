
CNC_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008eac  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000034c  0800903c  0800903c  0000a03c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009388  08009388  0000b06c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009388  08009388  0000a388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009390  08009390  0000b06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009390  08009390  0000a390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009394  08009394  0000a394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08009398  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a70  2000006c  08009404  0000b06c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000adc  08009404  0000badc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b06c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016477  00000000  00000000  0000b09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a99  00000000  00000000  00021513  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001518  00000000  00000000  00024fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000103a  00000000  00000000  000264c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002832e  00000000  00000000  00027502  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001eb3c  00000000  00000000  0004f830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f5e54  00000000  00000000  0006e36c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001641c0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005de0  00000000  00000000  00164204  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  00169fe4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009024 	.word	0x08009024

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	08009024 	.word	0x08009024

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <has_header_tail>:
	return 0;
}

// Generic header/tail validation
static inline int has_header_tail(const uint8_t *raw, uint32_t len,
		uint8_t header, uint8_t tail) {
 80005ac:	b480      	push	{r7}
 80005ae:	b085      	sub	sp, #20
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	60f8      	str	r0, [r7, #12]
 80005b4:	60b9      	str	r1, [r7, #8]
 80005b6:	4611      	mov	r1, r2
 80005b8:	461a      	mov	r2, r3
 80005ba:	460b      	mov	r3, r1
 80005bc:	71fb      	strb	r3, [r7, #7]
 80005be:	4613      	mov	r3, r2
 80005c0:	71bb      	strb	r3, [r7, #6]
	return raw && len >= 2 && raw[0] == header && raw[len - 1] == tail;
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d011      	beq.n	80005ec <has_header_tail+0x40>
 80005c8:	68bb      	ldr	r3, [r7, #8]
 80005ca:	2b01      	cmp	r3, #1
 80005cc:	d90e      	bls.n	80005ec <has_header_tail+0x40>
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	79fa      	ldrb	r2, [r7, #7]
 80005d4:	429a      	cmp	r2, r3
 80005d6:	d109      	bne.n	80005ec <has_header_tail+0x40>
 80005d8:	68bb      	ldr	r3, [r7, #8]
 80005da:	3b01      	subs	r3, #1
 80005dc:	68fa      	ldr	r2, [r7, #12]
 80005de:	4413      	add	r3, r2
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	79ba      	ldrb	r2, [r7, #6]
 80005e4:	429a      	cmp	r2, r3
 80005e6:	d101      	bne.n	80005ec <has_header_tail+0x40>
 80005e8:	2301      	movs	r3, #1
 80005ea:	e000      	b.n	80005ee <has_header_tail+0x42>
 80005ec:	2300      	movs	r3, #0
}
 80005ee:	4618      	mov	r0, r3
 80005f0:	3714      	adds	r7, #20
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr

080005fa <frame_expect_req>:
// =====================
// Frame validators
// =====================
// Ensure buffer has min length, proper header/tail, and expected type
static inline int frame_expect_req(const uint8_t *raw, uint32_t len,
		req_msg_type_t type, uint32_t min_len) {
 80005fa:	b580      	push	{r7, lr}
 80005fc:	b084      	sub	sp, #16
 80005fe:	af00      	add	r7, sp, #0
 8000600:	60f8      	str	r0, [r7, #12]
 8000602:	60b9      	str	r1, [r7, #8]
 8000604:	603b      	str	r3, [r7, #0]
 8000606:	4613      	mov	r3, r2
 8000608:	71fb      	strb	r3, [r7, #7]
	if (!raw || len < min_len)
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	2b00      	cmp	r3, #0
 800060e:	d003      	beq.n	8000618 <frame_expect_req+0x1e>
 8000610:	68ba      	ldr	r2, [r7, #8]
 8000612:	683b      	ldr	r3, [r7, #0]
 8000614:	429a      	cmp	r2, r3
 8000616:	d202      	bcs.n	800061e <frame_expect_req+0x24>
		return PROTO_ERR_ARG;
 8000618:	f04f 33ff 	mov.w	r3, #4294967295
 800061c:	e012      	b.n	8000644 <frame_expect_req+0x4a>
	if (!has_header_tail(raw, len, REQ_HEADER, REQ_TAIL)
 800061e:	2355      	movs	r3, #85	@ 0x55
 8000620:	22aa      	movs	r2, #170	@ 0xaa
 8000622:	68b9      	ldr	r1, [r7, #8]
 8000624:	68f8      	ldr	r0, [r7, #12]
 8000626:	f7ff ffc1 	bl	80005ac <has_header_tail>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d005      	beq.n	800063c <frame_expect_req+0x42>
			|| raw[1] != (uint8_t) type)
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	3301      	adds	r3, #1
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	79fa      	ldrb	r2, [r7, #7]
 8000638:	429a      	cmp	r2, r3
 800063a:	d002      	beq.n	8000642 <frame_expect_req+0x48>
		return PROTO_ERR_FRAME;
 800063c:	f06f 0301 	mvn.w	r3, #1
 8000640:	e000      	b.n	8000644 <frame_expect_req+0x4a>
	return PROTO_OK;
 8000642:	2300      	movs	r3, #0
}
 8000644:	4618      	mov	r0, r3
 8000646:	3710      	adds	r7, #16
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}

0800064c <led_ctrl_req_decoder>:

// New LED_CTRL (RGB) request is 9 bytes total:
// [0]=0xAA, [1]=0x07, [2]=frameId, [3]=ledMask, [4]=R, [5]=G, [6]=B,
// [7]=parity(byte XOR over 1..6), [8]=0x55

int led_ctrl_req_decoder(const uint8_t *raw, uint32_t len, led_ctrl_req_t *out) {
 800064c:	b580      	push	{r7, lr}
 800064e:	b086      	sub	sp, #24
 8000650:	af00      	add	r7, sp, #0
 8000652:	60f8      	str	r0, [r7, #12]
 8000654:	60b9      	str	r1, [r7, #8]
 8000656:	607a      	str	r2, [r7, #4]
    if (!raw || !out)
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	2b00      	cmp	r3, #0
 800065c:	d002      	beq.n	8000664 <led_ctrl_req_decoder+0x18>
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d102      	bne.n	800066a <led_ctrl_req_decoder+0x1e>
        return PROTO_ERR_ARG;
 8000664:	f04f 33ff 	mov.w	r3, #4294967295
 8000668:	e025      	b.n	80006b6 <led_ctrl_req_decoder+0x6a>
    int st = frame_expect_req(raw, len, REQ_LED_CTRL, 9);
 800066a:	2309      	movs	r3, #9
 800066c:	2207      	movs	r2, #7
 800066e:	68b9      	ldr	r1, [r7, #8]
 8000670:	68f8      	ldr	r0, [r7, #12]
 8000672:	f7ff ffc2 	bl	80005fa <frame_expect_req>
 8000676:	6178      	str	r0, [r7, #20]
    if (st != PROTO_OK)
 8000678:	697b      	ldr	r3, [r7, #20]
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <led_ctrl_req_decoder+0x36>
        return st;
 800067e:	697b      	ldr	r3, [r7, #20]
 8000680:	e019      	b.n	80006b6 <led_ctrl_req_decoder+0x6a>
    out->frameId = raw[2];
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	3302      	adds	r3, #2
 8000686:	781a      	ldrb	r2, [r3, #0]
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	701a      	strb	r2, [r3, #0]
    out->ledMask = raw[3];
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	3303      	adds	r3, #3
 8000690:	781a      	ldrb	r2, [r3, #0]
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	705a      	strb	r2, [r3, #1]
    out->r = raw[4];
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	3304      	adds	r3, #4
 800069a:	781a      	ldrb	r2, [r3, #0]
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	709a      	strb	r2, [r3, #2]
    out->g = raw[5];
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	3305      	adds	r3, #5
 80006a4:	781a      	ldrb	r2, [r3, #0]
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	70da      	strb	r2, [r3, #3]
    out->b = raw[6];
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	3306      	adds	r3, #6
 80006ae:	781a      	ldrb	r2, [r3, #0]
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	711a      	strb	r2, [r3, #4]
    return PROTO_OK;
 80006b4:	2300      	movs	r3, #0
}
 80006b6:	4618      	mov	r0, r3
 80006b8:	3718      	adds	r7, #24
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
	...

080006c0 <router_init>:
};

static router_handlers_t handlers;

void router_init(router_t *r, response_fifo_t *resp_fifo,
		const router_handlers_t *h) {
 80006c0:	b5b0      	push	{r4, r5, r7, lr}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	60f8      	str	r0, [r7, #12]
 80006c8:	60b9      	str	r1, [r7, #8]
 80006ca:	607a      	str	r2, [r7, #4]
	memset(r, 0, sizeof(*r));
 80006cc:	2248      	movs	r2, #72	@ 0x48
 80006ce:	2100      	movs	r1, #0
 80006d0:	68f8      	ldr	r0, [r7, #12]
 80006d2:	f007 ff5f 	bl	8008594 <memset>
	r->resp = resp_fifo;
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	68ba      	ldr	r2, [r7, #8]
 80006da:	645a      	str	r2, [r3, #68]	@ 0x44
	if (h) {
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d009      	beq.n	80006f6 <router_init+0x36>
		handlers = *h;
 80006e2:	4a07      	ldr	r2, [pc, #28]	@ (8000700 <router_init+0x40>)
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	4614      	mov	r4, r2
 80006e8:	461d      	mov	r5, r3
 80006ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006ee:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80006f2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}
}
 80006f6:	bf00      	nop
 80006f8:	3710      	adds	r7, #16
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bdb0      	pop	{r4, r5, r7, pc}
 80006fe:	bf00      	nop
 8000700:	20000088 	.word	0x20000088

08000704 <is_req_complete>:

static int is_req_complete(const uint8_t *a, uint32_t n) {
 8000704:	b480      	push	{r7}
 8000706:	b085      	sub	sp, #20
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
 800070c:	6039      	str	r1, [r7, #0]
	if (n < 4)
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	2b03      	cmp	r3, #3
 8000712:	d801      	bhi.n	8000718 <is_req_complete+0x14>
		return 0; // mínimo
 8000714:	2300      	movs	r3, #0
 8000716:	e01a      	b.n	800074e <is_req_complete+0x4a>
	if (a[0] != REQ_HEADER)
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	2baa      	cmp	r3, #170	@ 0xaa
 800071e:	d002      	beq.n	8000726 <is_req_complete+0x22>
		return -1; // inválido
 8000720:	f04f 33ff 	mov.w	r3, #4294967295
 8000724:	e013      	b.n	800074e <is_req_complete+0x4a>
	// fim quando encontrar REQ_TAIL
	for (uint32_t i = 3; i < n; i++) {
 8000726:	2303      	movs	r3, #3
 8000728:	60fb      	str	r3, [r7, #12]
 800072a:	e00b      	b.n	8000744 <is_req_complete+0x40>
		if (a[i] == REQ_TAIL)
 800072c:	687a      	ldr	r2, [r7, #4]
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	4413      	add	r3, r2
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	2b55      	cmp	r3, #85	@ 0x55
 8000736:	d102      	bne.n	800073e <is_req_complete+0x3a>
			return (int) (i + 1);
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	3301      	adds	r3, #1
 800073c:	e007      	b.n	800074e <is_req_complete+0x4a>
	for (uint32_t i = 3; i < n; i++) {
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	3301      	adds	r3, #1
 8000742:	60fb      	str	r3, [r7, #12]
 8000744:	68fa      	ldr	r2, [r7, #12]
 8000746:	683b      	ldr	r3, [r7, #0]
 8000748:	429a      	cmp	r2, r3
 800074a:	d3ef      	bcc.n	800072c <is_req_complete+0x28>
	}
	return 0;
 800074c:	2300      	movs	r3, #0
}
 800074e:	4618      	mov	r0, r3
 8000750:	3714      	adds	r7, #20
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr
	...

0800075c <dispatch>:

static void dispatch(router_t *r, const uint8_t *f, uint32_t len) {
 800075c:	b580      	push	{r7, lr}
 800075e:	b086      	sub	sp, #24
 8000760:	af00      	add	r7, sp, #0
 8000762:	60f8      	str	r0, [r7, #12]
 8000764:	60b9      	str	r1, [r7, #8]
 8000766:	607a      	str	r2, [r7, #4]
	if (len < 4)
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	2b03      	cmp	r3, #3
 800076c:	f240 80a4 	bls.w	80008b8 <dispatch+0x15c>
		return;
	uint8_t type = f[1];
 8000770:	68bb      	ldr	r3, [r7, #8]
 8000772:	3301      	adds	r3, #1
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	75fb      	strb	r3, [r7, #23]
	switch (type) {
 8000778:	7dfb      	ldrb	r3, [r7, #23]
 800077a:	3b01      	subs	r3, #1
 800077c:	2b1f      	cmp	r3, #31
 800077e:	f200 809d 	bhi.w	80008bc <dispatch+0x160>
 8000782:	a201      	add	r2, pc, #4	@ (adr r2, 8000788 <dispatch+0x2c>)
 8000784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000788:	08000809 	.word	0x08000809
 800078c:	0800081f 	.word	0x0800081f
 8000790:	08000835 	.word	0x08000835
 8000794:	0800084b 	.word	0x0800084b
 8000798:	08000861 	.word	0x08000861
 800079c:	08000877 	.word	0x08000877
 80007a0:	0800088d 	.word	0x0800088d
 80007a4:	080008bd 	.word	0x080008bd
 80007a8:	080008bd 	.word	0x080008bd
 80007ac:	080008bd 	.word	0x080008bd
 80007b0:	080008bd 	.word	0x080008bd
 80007b4:	080008bd 	.word	0x080008bd
 80007b8:	080008bd 	.word	0x080008bd
 80007bc:	080008bd 	.word	0x080008bd
 80007c0:	080008bd 	.word	0x080008bd
 80007c4:	080008bd 	.word	0x080008bd
 80007c8:	080008bd 	.word	0x080008bd
 80007cc:	080008bd 	.word	0x080008bd
 80007d0:	080008bd 	.word	0x080008bd
 80007d4:	080008bd 	.word	0x080008bd
 80007d8:	080008bd 	.word	0x080008bd
 80007dc:	080008bd 	.word	0x080008bd
 80007e0:	080008bd 	.word	0x080008bd
 80007e4:	080008bd 	.word	0x080008bd
 80007e8:	080008bd 	.word	0x080008bd
 80007ec:	080008bd 	.word	0x080008bd
 80007f0:	080008bd 	.word	0x080008bd
 80007f4:	080008bd 	.word	0x080008bd
 80007f8:	080008bd 	.word	0x080008bd
 80007fc:	080008bd 	.word	0x080008bd
 8000800:	080008bd 	.word	0x080008bd
 8000804:	080008a3 	.word	0x080008a3
	case REQ_MOVE_QUEUE_ADD:
		if (handlers.on_move_queue_add)
 8000808:	4b36      	ldr	r3, [pc, #216]	@ (80008e4 <dispatch+0x188>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	2b00      	cmp	r3, #0
 800080e:	d057      	beq.n	80008c0 <dispatch+0x164>
			handlers.on_move_queue_add(r, f, len);
 8000810:	4b34      	ldr	r3, [pc, #208]	@ (80008e4 <dispatch+0x188>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	687a      	ldr	r2, [r7, #4]
 8000816:	68b9      	ldr	r1, [r7, #8]
 8000818:	68f8      	ldr	r0, [r7, #12]
 800081a:	4798      	blx	r3
		break;
 800081c:	e050      	b.n	80008c0 <dispatch+0x164>
	case REQ_MOVE_QUEUE_STATUS:
		if (handlers.on_move_queue_status)
 800081e:	4b31      	ldr	r3, [pc, #196]	@ (80008e4 <dispatch+0x188>)
 8000820:	685b      	ldr	r3, [r3, #4]
 8000822:	2b00      	cmp	r3, #0
 8000824:	d04e      	beq.n	80008c4 <dispatch+0x168>
			handlers.on_move_queue_status(r, f, len);
 8000826:	4b2f      	ldr	r3, [pc, #188]	@ (80008e4 <dispatch+0x188>)
 8000828:	685b      	ldr	r3, [r3, #4]
 800082a:	687a      	ldr	r2, [r7, #4]
 800082c:	68b9      	ldr	r1, [r7, #8]
 800082e:	68f8      	ldr	r0, [r7, #12]
 8000830:	4798      	blx	r3
		break;
 8000832:	e047      	b.n	80008c4 <dispatch+0x168>
	case REQ_START_MOVE:
		if (handlers.on_start_move)
 8000834:	4b2b      	ldr	r3, [pc, #172]	@ (80008e4 <dispatch+0x188>)
 8000836:	689b      	ldr	r3, [r3, #8]
 8000838:	2b00      	cmp	r3, #0
 800083a:	d045      	beq.n	80008c8 <dispatch+0x16c>
			handlers.on_start_move(r, f, len);
 800083c:	4b29      	ldr	r3, [pc, #164]	@ (80008e4 <dispatch+0x188>)
 800083e:	689b      	ldr	r3, [r3, #8]
 8000840:	687a      	ldr	r2, [r7, #4]
 8000842:	68b9      	ldr	r1, [r7, #8]
 8000844:	68f8      	ldr	r0, [r7, #12]
 8000846:	4798      	blx	r3
		break;
 8000848:	e03e      	b.n	80008c8 <dispatch+0x16c>
	case REQ_MOVE_HOME:
		if (handlers.on_move_home)
 800084a:	4b26      	ldr	r3, [pc, #152]	@ (80008e4 <dispatch+0x188>)
 800084c:	68db      	ldr	r3, [r3, #12]
 800084e:	2b00      	cmp	r3, #0
 8000850:	d03c      	beq.n	80008cc <dispatch+0x170>
			handlers.on_move_home(r, f, len);
 8000852:	4b24      	ldr	r3, [pc, #144]	@ (80008e4 <dispatch+0x188>)
 8000854:	68db      	ldr	r3, [r3, #12]
 8000856:	687a      	ldr	r2, [r7, #4]
 8000858:	68b9      	ldr	r1, [r7, #8]
 800085a:	68f8      	ldr	r0, [r7, #12]
 800085c:	4798      	blx	r3
		break;
 800085e:	e035      	b.n	80008cc <dispatch+0x170>
	case REQ_MOVE_PROBE_LEVEL:
		if (handlers.on_move_probe_level)
 8000860:	4b20      	ldr	r3, [pc, #128]	@ (80008e4 <dispatch+0x188>)
 8000862:	691b      	ldr	r3, [r3, #16]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d033      	beq.n	80008d0 <dispatch+0x174>
			handlers.on_move_probe_level(r, f, len);
 8000868:	4b1e      	ldr	r3, [pc, #120]	@ (80008e4 <dispatch+0x188>)
 800086a:	691b      	ldr	r3, [r3, #16]
 800086c:	687a      	ldr	r2, [r7, #4]
 800086e:	68b9      	ldr	r1, [r7, #8]
 8000870:	68f8      	ldr	r0, [r7, #12]
 8000872:	4798      	blx	r3
		break;
 8000874:	e02c      	b.n	80008d0 <dispatch+0x174>
	case REQ_MOVE_END:
		if (handlers.on_move_end)
 8000876:	4b1b      	ldr	r3, [pc, #108]	@ (80008e4 <dispatch+0x188>)
 8000878:	695b      	ldr	r3, [r3, #20]
 800087a:	2b00      	cmp	r3, #0
 800087c:	d02a      	beq.n	80008d4 <dispatch+0x178>
			handlers.on_move_end(r, f, len);
 800087e:	4b19      	ldr	r3, [pc, #100]	@ (80008e4 <dispatch+0x188>)
 8000880:	695b      	ldr	r3, [r3, #20]
 8000882:	687a      	ldr	r2, [r7, #4]
 8000884:	68b9      	ldr	r1, [r7, #8]
 8000886:	68f8      	ldr	r0, [r7, #12]
 8000888:	4798      	blx	r3
		break;
 800088a:	e023      	b.n	80008d4 <dispatch+0x178>
	case REQ_LED_CTRL:
		if (handlers.on_led_ctrl)
 800088c:	4b15      	ldr	r3, [pc, #84]	@ (80008e4 <dispatch+0x188>)
 800088e:	699b      	ldr	r3, [r3, #24]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d021      	beq.n	80008d8 <dispatch+0x17c>
			handlers.on_led_ctrl(r, f, len);
 8000894:	4b13      	ldr	r3, [pc, #76]	@ (80008e4 <dispatch+0x188>)
 8000896:	699b      	ldr	r3, [r3, #24]
 8000898:	687a      	ldr	r2, [r7, #4]
 800089a:	68b9      	ldr	r1, [r7, #8]
 800089c:	68f8      	ldr	r0, [r7, #12]
 800089e:	4798      	blx	r3
		break;
 80008a0:	e01a      	b.n	80008d8 <dispatch+0x17c>
	case REQ_FPGA_STATUS:
		if (handlers.on_fpga_status)
 80008a2:	4b10      	ldr	r3, [pc, #64]	@ (80008e4 <dispatch+0x188>)
 80008a4:	69db      	ldr	r3, [r3, #28]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d018      	beq.n	80008dc <dispatch+0x180>
			handlers.on_fpga_status(r, f, len);
 80008aa:	4b0e      	ldr	r3, [pc, #56]	@ (80008e4 <dispatch+0x188>)
 80008ac:	69db      	ldr	r3, [r3, #28]
 80008ae:	687a      	ldr	r2, [r7, #4]
 80008b0:	68b9      	ldr	r1, [r7, #8]
 80008b2:	68f8      	ldr	r0, [r7, #12]
 80008b4:	4798      	blx	r3
		break;
 80008b6:	e011      	b.n	80008dc <dispatch+0x180>
		return;
 80008b8:	bf00      	nop
 80008ba:	e010      	b.n	80008de <dispatch+0x182>
	default:
		break; // desconhecido
 80008bc:	bf00      	nop
 80008be:	e00e      	b.n	80008de <dispatch+0x182>
		break;
 80008c0:	bf00      	nop
 80008c2:	e00c      	b.n	80008de <dispatch+0x182>
		break;
 80008c4:	bf00      	nop
 80008c6:	e00a      	b.n	80008de <dispatch+0x182>
		break;
 80008c8:	bf00      	nop
 80008ca:	e008      	b.n	80008de <dispatch+0x182>
		break;
 80008cc:	bf00      	nop
 80008ce:	e006      	b.n	80008de <dispatch+0x182>
		break;
 80008d0:	bf00      	nop
 80008d2:	e004      	b.n	80008de <dispatch+0x182>
		break;
 80008d4:	bf00      	nop
 80008d6:	e002      	b.n	80008de <dispatch+0x182>
		break;
 80008d8:	bf00      	nop
 80008da:	e000      	b.n	80008de <dispatch+0x182>
		break;
 80008dc:	bf00      	nop
	}
}
 80008de:	3718      	adds	r7, #24
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	20000088 	.word	0x20000088

080008e8 <router_feed_bytes>:

void router_feed_bytes(router_t *r, const uint8_t *data, uint32_t len) {
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b086      	sub	sp, #24
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	60f8      	str	r0, [r7, #12]
 80008f0:	60b9      	str	r1, [r7, #8]
 80008f2:	607a      	str	r2, [r7, #4]
	for (uint32_t i = 0; i < len; i++) {
 80008f4:	2300      	movs	r3, #0
 80008f6:	617b      	str	r3, [r7, #20]
 80008f8:	e038      	b.n	800096c <router_feed_bytes+0x84>
		if (r->idx >= sizeof(r->acc))
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8000900:	2b3f      	cmp	r3, #63	@ 0x3f
 8000902:	d903      	bls.n	800090c <router_feed_bytes+0x24>
			r->idx = 0; // evita overflow simples
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	2200      	movs	r2, #0
 8000908:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
		r->acc[r->idx++] = data[i];
 800090c:	68ba      	ldr	r2, [r7, #8]
 800090e:	697b      	ldr	r3, [r7, #20]
 8000910:	441a      	add	r2, r3
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8000918:	1c59      	adds	r1, r3, #1
 800091a:	b2c8      	uxtb	r0, r1
 800091c:	68f9      	ldr	r1, [r7, #12]
 800091e:	f881 0040 	strb.w	r0, [r1, #64]	@ 0x40
 8000922:	4619      	mov	r1, r3
 8000924:	7812      	ldrb	r2, [r2, #0]
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	545a      	strb	r2, [r3, r1]
		int comp = is_req_complete(r->acc, r->idx);
 800092a:	68fa      	ldr	r2, [r7, #12]
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8000932:	4619      	mov	r1, r3
 8000934:	4610      	mov	r0, r2
 8000936:	f7ff fee5 	bl	8000704 <is_req_complete>
 800093a:	6138      	str	r0, [r7, #16]
		if (comp < 0) {
 800093c:	693b      	ldr	r3, [r7, #16]
 800093e:	2b00      	cmp	r3, #0
 8000940:	da04      	bge.n	800094c <router_feed_bytes+0x64>
			r->idx = 0;
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	2200      	movs	r2, #0
 8000946:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
			continue;
 800094a:	e00c      	b.n	8000966 <router_feed_bytes+0x7e>
		} // descarta até header
		if (comp > 0) {
 800094c:	693b      	ldr	r3, [r7, #16]
 800094e:	2b00      	cmp	r3, #0
 8000950:	dd09      	ble.n	8000966 <router_feed_bytes+0x7e>
			dispatch(r, r->acc, (uint32_t) comp);
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	693a      	ldr	r2, [r7, #16]
 8000956:	4619      	mov	r1, r3
 8000958:	68f8      	ldr	r0, [r7, #12]
 800095a:	f7ff feff 	bl	800075c <dispatch>
			r->idx = 0;
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	2200      	movs	r2, #0
 8000962:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
	for (uint32_t i = 0; i < len; i++) {
 8000966:	697b      	ldr	r3, [r7, #20]
 8000968:	3301      	adds	r3, #1
 800096a:	617b      	str	r3, [r7, #20]
 800096c:	697a      	ldr	r2, [r7, #20]
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	429a      	cmp	r2, r3
 8000972:	d3c2      	bcc.n	80008fa <router_feed_bytes+0x12>
		}
	}
}
 8000974:	bf00      	nop
 8000976:	bf00      	nop
 8000978:	3718      	adds	r7, #24
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}

0800097e <resp_fifo_create>:

response_fifo_t* resp_fifo_create(void) {
 800097e:	b580      	push	{r7, lr}
 8000980:	b082      	sub	sp, #8
 8000982:	af00      	add	r7, sp, #0
	response_fifo_t *q = (response_fifo_t*) calloc(1, sizeof(*q));
 8000984:	210c      	movs	r1, #12
 8000986:	2001      	movs	r0, #1
 8000988:	f007 fb04 	bl	8007f94 <calloc>
 800098c:	4603      	mov	r3, r0
 800098e:	607b      	str	r3, [r7, #4]
	return q;
 8000990:	687b      	ldr	r3, [r7, #4]
}
 8000992:	4618      	mov	r0, r3
 8000994:	3708      	adds	r7, #8
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}

0800099a <resp_fifo_pop>:
		q->head = n;
	q->tail = n;
	q->count++;
	return PROTO_OK;
}
int resp_fifo_pop(response_fifo_t *q, uint8_t *out, uint32_t max_len) {
 800099a:	b580      	push	{r7, lr}
 800099c:	b086      	sub	sp, #24
 800099e:	af00      	add	r7, sp, #0
 80009a0:	60f8      	str	r0, [r7, #12]
 80009a2:	60b9      	str	r1, [r7, #8]
 80009a4:	607a      	str	r2, [r7, #4]
	if (!q || !q->head || !out)
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d006      	beq.n	80009ba <resp_fifo_pop+0x20>
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d002      	beq.n	80009ba <resp_fifo_pop+0x20>
 80009b4:	68bb      	ldr	r3, [r7, #8]
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d101      	bne.n	80009be <resp_fifo_pop+0x24>
		return 0;
 80009ba:	2300      	movs	r3, #0
 80009bc:	e02e      	b.n	8000a1c <resp_fifo_pop+0x82>
	node_t *n = q->head;
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	617b      	str	r3, [r7, #20]
	if (n->len > max_len)
 80009c4:	697b      	ldr	r3, [r7, #20]
 80009c6:	685b      	ldr	r3, [r3, #4]
 80009c8:	687a      	ldr	r2, [r7, #4]
 80009ca:	429a      	cmp	r2, r3
 80009cc:	d202      	bcs.n	80009d4 <resp_fifo_pop+0x3a>
		return PROTO_ERR_RANGE;
 80009ce:	f06f 0303 	mvn.w	r3, #3
 80009d2:	e023      	b.n	8000a1c <resp_fifo_pop+0x82>
	memcpy(out, n->buf, n->len);
 80009d4:	697b      	ldr	r3, [r7, #20]
 80009d6:	6819      	ldr	r1, [r3, #0]
 80009d8:	697b      	ldr	r3, [r7, #20]
 80009da:	685b      	ldr	r3, [r3, #4]
 80009dc:	461a      	mov	r2, r3
 80009de:	68b8      	ldr	r0, [r7, #8]
 80009e0:	f007 fe63 	bl	80086aa <memcpy>
	int l = (int) n->len;
 80009e4:	697b      	ldr	r3, [r7, #20]
 80009e6:	685b      	ldr	r3, [r3, #4]
 80009e8:	613b      	str	r3, [r7, #16]
	q->head = n->next;
 80009ea:	697b      	ldr	r3, [r7, #20]
 80009ec:	689a      	ldr	r2, [r3, #8]
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	601a      	str	r2, [r3, #0]
	if (!q->head)
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d102      	bne.n	8000a00 <resp_fifo_pop+0x66>
		q->tail = NULL;
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	2200      	movs	r2, #0
 80009fe:	605a      	str	r2, [r3, #4]
	q->count--;
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	689b      	ldr	r3, [r3, #8]
 8000a04:	1e5a      	subs	r2, r3, #1
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	609a      	str	r2, [r3, #8]
	free(n->buf);
 8000a0a:	697b      	ldr	r3, [r7, #20]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f007 fadc 	bl	8007fcc <free>
	free(n);
 8000a14:	6978      	ldr	r0, [r7, #20]
 8000a16:	f007 fad9 	bl	8007fcc <free>
	return l;
 8000a1a:	693b      	ldr	r3, [r7, #16]
}
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	3718      	adds	r7, #24
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}

08000a24 <home_on_move_home>:
}
const home_status_t* home_status_get(void) {
	return &g_home;
}

void home_on_move_home(const uint8_t *frame, uint32_t len) {
 8000a24:	b480      	push	{r7}
 8000a26:	b083      	sub	sp, #12
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
 8000a2c:	6039      	str	r1, [r7, #0]
	(void) frame;
	(void) len; /* implementar FSM de homing */
}
 8000a2e:	bf00      	nop
 8000a30:	370c      	adds	r7, #12
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr
	...

08000a3c <led_service_init>:
#include "gpio.h"
#include "Protocol/Requests/led_control_request.h"
#include "Services/Log/log_service.h"
#include <stdio.h>

void led_service_init(void) {
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b086      	sub	sp, #24
 8000a40:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef gi = {0};
 8000a42:	1d3b      	adds	r3, r7, #4
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	605a      	str	r2, [r3, #4]
 8000a4a:	609a      	str	r2, [r3, #8]
 8000a4c:	60da      	str	r2, [r3, #12]
 8000a4e:	611a      	str	r2, [r3, #16]
#if defined(LED_R_GPIO_PIN) && defined(LED_G_GPIO_PIN) && defined(LED_B_GPIO_PIN)
    // Configure RGB pins
    gi.Mode = GPIO_MODE_OUTPUT_PP;
 8000a50:	2301      	movs	r3, #1
 8000a52:	60bb      	str	r3, [r7, #8]
    gi.Pull = GPIO_NOPULL;
 8000a54:	2300      	movs	r3, #0
 8000a56:	60fb      	str	r3, [r7, #12]
    gi.Speed = GPIO_SPEED_FREQ_LOW;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	613b      	str	r3, [r7, #16]
    gi.Pin = LED_R_GPIO_PIN; HAL_GPIO_Init(LED_R_GPIO_PORT, &gi);
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	607b      	str	r3, [r7, #4]
 8000a60:	1d3b      	adds	r3, r7, #4
 8000a62:	4619      	mov	r1, r3
 8000a64:	4812      	ldr	r0, [pc, #72]	@ (8000ab0 <led_service_init+0x74>)
 8000a66:	f001 ffd5 	bl	8002a14 <HAL_GPIO_Init>
    gi.Pin = LED_G_GPIO_PIN; HAL_GPIO_Init(LED_G_GPIO_PORT, &gi);
 8000a6a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000a6e:	607b      	str	r3, [r7, #4]
 8000a70:	1d3b      	adds	r3, r7, #4
 8000a72:	4619      	mov	r1, r3
 8000a74:	480e      	ldr	r0, [pc, #56]	@ (8000ab0 <led_service_init+0x74>)
 8000a76:	f001 ffcd 	bl	8002a14 <HAL_GPIO_Init>
    gi.Pin = LED_B_GPIO_PIN; HAL_GPIO_Init(LED_B_GPIO_PORT, &gi);
 8000a7a:	2380      	movs	r3, #128	@ 0x80
 8000a7c:	607b      	str	r3, [r7, #4]
 8000a7e:	1d3b      	adds	r3, r7, #4
 8000a80:	4619      	mov	r1, r3
 8000a82:	480b      	ldr	r0, [pc, #44]	@ (8000ab0 <led_service_init+0x74>)
 8000a84:	f001 ffc6 	bl	8002a14 <HAL_GPIO_Init>
    // Default OFF
#if LED_ACTIVE_HIGH
    HAL_GPIO_WritePin(LED_R_GPIO_PORT, LED_R_GPIO_PIN, GPIO_PIN_RESET);
 8000a88:	2200      	movs	r2, #0
 8000a8a:	2102      	movs	r1, #2
 8000a8c:	4808      	ldr	r0, [pc, #32]	@ (8000ab0 <led_service_init+0x74>)
 8000a8e:	f002 fa4d 	bl	8002f2c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_G_GPIO_PORT, LED_G_GPIO_PIN, GPIO_PIN_RESET);
 8000a92:	2200      	movs	r2, #0
 8000a94:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a98:	4805      	ldr	r0, [pc, #20]	@ (8000ab0 <led_service_init+0x74>)
 8000a9a:	f002 fa47 	bl	8002f2c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_B_GPIO_PORT, LED_B_GPIO_PIN, GPIO_PIN_RESET);
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	2180      	movs	r1, #128	@ 0x80
 8000aa2:	4803      	ldr	r0, [pc, #12]	@ (8000ab0 <led_service_init+0x74>)
 8000aa4:	f002 fa42 	bl	8002f2c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_GPIO_PORT, LED_GPIO_PIN, GPIO_PIN_RESET);
#else
    HAL_GPIO_WritePin(LED_GPIO_PORT, LED_GPIO_PIN, GPIO_PIN_SET);
#endif
#endif
}
 8000aa8:	bf00      	nop
 8000aaa:	3718      	adds	r7, #24
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	48000400 	.word	0x48000400

08000ab4 <led_apply_rgb>:
    HAL_GPIO_WritePin(LED_GPIO_PORT, LED_GPIO_PIN, on ? GPIO_PIN_RESET : GPIO_PIN_SET);
#endif
}

#if defined(LED_R_GPIO_PIN) && defined(LED_G_GPIO_PIN) && defined(LED_B_GPIO_PIN)
static inline void led_apply_rgb(uint8_t r, uint8_t g, uint8_t b, uint8_t mask) {
 8000ab4:	b590      	push	{r4, r7, lr}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	4604      	mov	r4, r0
 8000abc:	4608      	mov	r0, r1
 8000abe:	4611      	mov	r1, r2
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	4623      	mov	r3, r4
 8000ac4:	71fb      	strb	r3, [r7, #7]
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	71bb      	strb	r3, [r7, #6]
 8000aca:	460b      	mov	r3, r1
 8000acc:	717b      	strb	r3, [r7, #5]
 8000ace:	4613      	mov	r3, r2
 8000ad0:	713b      	strb	r3, [r7, #4]
    // Treat non-zero as ON (binary per channel). For PWM, integrate TIM later.
    if (mask & LED_MASK_R) {
 8000ad2:	793b      	ldrb	r3, [r7, #4]
 8000ad4:	f003 0301 	and.w	r3, r3, #1
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d00a      	beq.n	8000af2 <led_apply_rgb+0x3e>
#if LED_ACTIVE_HIGH
        HAL_GPIO_WritePin(LED_R_GPIO_PORT, LED_R_GPIO_PIN, r ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000adc:	79fb      	ldrb	r3, [r7, #7]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	bf14      	ite	ne
 8000ae2:	2301      	movne	r3, #1
 8000ae4:	2300      	moveq	r3, #0
 8000ae6:	b2db      	uxtb	r3, r3
 8000ae8:	461a      	mov	r2, r3
 8000aea:	2102      	movs	r1, #2
 8000aec:	4813      	ldr	r0, [pc, #76]	@ (8000b3c <led_apply_rgb+0x88>)
 8000aee:	f002 fa1d 	bl	8002f2c <HAL_GPIO_WritePin>
#else
        HAL_GPIO_WritePin(LED_R_GPIO_PORT, LED_R_GPIO_PIN, r ? GPIO_PIN_RESET : GPIO_PIN_SET);
#endif
    }
    if (mask & LED_MASK_G) {
 8000af2:	793b      	ldrb	r3, [r7, #4]
 8000af4:	f003 0302 	and.w	r3, r3, #2
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d00b      	beq.n	8000b14 <led_apply_rgb+0x60>
#if LED_ACTIVE_HIGH
        HAL_GPIO_WritePin(LED_G_GPIO_PORT, LED_G_GPIO_PIN, g ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000afc:	79bb      	ldrb	r3, [r7, #6]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	bf14      	ite	ne
 8000b02:	2301      	movne	r3, #1
 8000b04:	2300      	moveq	r3, #0
 8000b06:	b2db      	uxtb	r3, r3
 8000b08:	461a      	mov	r2, r3
 8000b0a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000b0e:	480b      	ldr	r0, [pc, #44]	@ (8000b3c <led_apply_rgb+0x88>)
 8000b10:	f002 fa0c 	bl	8002f2c <HAL_GPIO_WritePin>
#else
        HAL_GPIO_WritePin(LED_G_GPIO_PORT, LED_G_GPIO_PIN, g ? GPIO_PIN_RESET : GPIO_PIN_SET);
#endif
    }
    if (mask & LED_MASK_B) {
 8000b14:	793b      	ldrb	r3, [r7, #4]
 8000b16:	f003 0304 	and.w	r3, r3, #4
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d00a      	beq.n	8000b34 <led_apply_rgb+0x80>
#if LED_ACTIVE_HIGH
        HAL_GPIO_WritePin(LED_B_GPIO_PORT, LED_B_GPIO_PIN, b ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000b1e:	797b      	ldrb	r3, [r7, #5]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	bf14      	ite	ne
 8000b24:	2301      	movne	r3, #1
 8000b26:	2300      	moveq	r3, #0
 8000b28:	b2db      	uxtb	r3, r3
 8000b2a:	461a      	mov	r2, r3
 8000b2c:	2180      	movs	r1, #128	@ 0x80
 8000b2e:	4803      	ldr	r0, [pc, #12]	@ (8000b3c <led_apply_rgb+0x88>)
 8000b30:	f002 f9fc 	bl	8002f2c <HAL_GPIO_WritePin>
#else
        HAL_GPIO_WritePin(LED_B_GPIO_PORT, LED_B_GPIO_PIN, b ? GPIO_PIN_RESET : GPIO_PIN_SET);
#endif
    }
}
 8000b34:	bf00      	nop
 8000b36:	370c      	adds	r7, #12
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd90      	pop	{r4, r7, pc}
 8000b3c:	48000400 	.word	0x48000400

08000b40 <led_on_led_ctrl>:
#endif

void led_on_led_ctrl(const uint8_t *frame, uint32_t len) {
 8000b40:	b590      	push	{r4, r7, lr}
 8000b42:	b099      	sub	sp, #100	@ 0x64
 8000b44:	af04      	add	r7, sp, #16
 8000b46:	6078      	str	r0, [r7, #4]
 8000b48:	6039      	str	r1, [r7, #0]
    led_ctrl_req_t req;
    if (!frame)
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d033      	beq.n	8000bb8 <led_on_led_ctrl+0x78>
        return;
    if (led_ctrl_req_decoder(frame, len, &req) != PROTO_OK)
 8000b50:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000b54:	461a      	mov	r2, r3
 8000b56:	6839      	ldr	r1, [r7, #0]
 8000b58:	6878      	ldr	r0, [r7, #4]
 8000b5a:	f7ff fd77 	bl	800064c <led_ctrl_req_decoder>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d12b      	bne.n	8000bbc <led_on_led_ctrl+0x7c>
        return;
#if defined(LED_R_GPIO_PIN) && defined(LED_G_GPIO_PIN) && defined(LED_B_GPIO_PIN)
    led_apply_rgb(req.r, req.g, req.b, req.ledMask);
 8000b64:	f897 004a 	ldrb.w	r0, [r7, #74]	@ 0x4a
 8000b68:	f897 104b 	ldrb.w	r1, [r7, #75]	@ 0x4b
 8000b6c:	f897 204c 	ldrb.w	r2, [r7, #76]	@ 0x4c
 8000b70:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8000b74:	f7ff ff9e 	bl	8000ab4 <led_apply_rgb>
#if LOG_ENABLE
    // Log concise and verbose (only active mode will emit)
    log_event_ids(1 /*svc:led*/, 1 /*state:applied*/, PROTO_OK);
 8000b78:	2200      	movs	r2, #0
 8000b7a:	2101      	movs	r1, #1
 8000b7c:	2001      	movs	r0, #1
 8000b7e:	f000 f8d5 	bl	8000d2c <log_event_ids>
    char status[64];
    snprintf(status, sizeof status, "mask=0x%02X rgb=%u,%u,%u", (unsigned)req.ledMask, req.r, req.g, req.b);
 8000b82:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8000b86:	461c      	mov	r4, r3
 8000b88:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8000b8c:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 8000b90:	f897 104c 	ldrb.w	r1, [r7, #76]	@ 0x4c
 8000b94:	f107 0008 	add.w	r0, r7, #8
 8000b98:	9102      	str	r1, [sp, #8]
 8000b9a:	9201      	str	r2, [sp, #4]
 8000b9c:	9300      	str	r3, [sp, #0]
 8000b9e:	4623      	mov	r3, r4
 8000ba0:	4a08      	ldr	r2, [pc, #32]	@ (8000bc4 <led_on_led_ctrl+0x84>)
 8000ba2:	2140      	movs	r1, #64	@ 0x40
 8000ba4:	f007 fbe8 	bl	8008378 <sniprintf>
    log_event_names("led", "applied", status);
 8000ba8:	f107 0308 	add.w	r3, r7, #8
 8000bac:	461a      	mov	r2, r3
 8000bae:	4906      	ldr	r1, [pc, #24]	@ (8000bc8 <led_on_led_ctrl+0x88>)
 8000bb0:	4806      	ldr	r0, [pc, #24]	@ (8000bcc <led_on_led_ctrl+0x8c>)
 8000bb2:	f000 f8ef 	bl	8000d94 <log_event_names>
 8000bb6:	e002      	b.n	8000bbe <led_on_led_ctrl+0x7e>
        return;
 8000bb8:	bf00      	nop
 8000bba:	e000      	b.n	8000bbe <led_on_led_ctrl+0x7e>
        return;
 8000bbc:	bf00      	nop
#if LOG_ENABLE
    log_event_ids(1, 1, PROTO_OK);
    log_event_names("led", "applied", ((req.r | req.g | req.b) ? "on" : "off"));
#endif
#endif
}
 8000bbe:	3754      	adds	r7, #84	@ 0x54
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd90      	pop	{r4, r7, pc}
 8000bc4:	0800903c 	.word	0x0800903c
 8000bc8:	08009058 	.word	0x08009058
 8000bcc:	08009060 	.word	0x08009060

08000bd0 <rb_count>:
static volatile uint16_t s_tail = 0; // read index
static volatile uint8_t s_tx_busy = 0;
static uint8_t s_tx_buf[LOG_CHUNK_MAX];
static uint16_t s_tx_len = 0;

static inline uint16_t rb_count(void){
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
    uint16_t h = s_head, t = s_tail;
 8000bd6:	4b0d      	ldr	r3, [pc, #52]	@ (8000c0c <rb_count+0x3c>)
 8000bd8:	881b      	ldrh	r3, [r3, #0]
 8000bda:	80fb      	strh	r3, [r7, #6]
 8000bdc:	4b0c      	ldr	r3, [pc, #48]	@ (8000c10 <rb_count+0x40>)
 8000bde:	881b      	ldrh	r3, [r3, #0]
 8000be0:	80bb      	strh	r3, [r7, #4]
    return (uint16_t)((h >= t) ? (h - t) : (LOG_BUF_SZ - t + h));
 8000be2:	88fa      	ldrh	r2, [r7, #6]
 8000be4:	88bb      	ldrh	r3, [r7, #4]
 8000be6:	429a      	cmp	r2, r3
 8000be8:	d304      	bcc.n	8000bf4 <rb_count+0x24>
 8000bea:	88fa      	ldrh	r2, [r7, #6]
 8000bec:	88bb      	ldrh	r3, [r7, #4]
 8000bee:	1ad3      	subs	r3, r2, r3
 8000bf0:	b29b      	uxth	r3, r3
 8000bf2:	e005      	b.n	8000c00 <rb_count+0x30>
 8000bf4:	88fa      	ldrh	r2, [r7, #6]
 8000bf6:	88bb      	ldrh	r3, [r7, #4]
 8000bf8:	1ad3      	subs	r3, r2, r3
 8000bfa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8000bfe:	b29b      	uxth	r3, r3
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	370c      	adds	r7, #12
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr
 8000c0c:	200004ac 	.word	0x200004ac
 8000c10:	200004ae 	.word	0x200004ae

08000c14 <rb_space>:
static inline uint16_t rb_space(void){
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
    return (uint16_t)(LOG_BUF_SZ - 1 - rb_count());
 8000c18:	f7ff ffda 	bl	8000bd0 <rb_count>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	f5c3 737f 	rsb	r3, r3, #1020	@ 0x3fc
 8000c22:	3303      	adds	r3, #3
 8000c24:	b29b      	uxth	r3, r3
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	bd80      	pop	{r7, pc}
	...

08000c2c <rb_push_bytes>:
static void rb_push_bytes(const uint8_t* data, uint16_t len){
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b084      	sub	sp, #16
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
 8000c34:	460b      	mov	r3, r1
 8000c36:	807b      	strh	r3, [r7, #2]
    if(!data || !len || !s_enabled) return;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d02e      	beq.n	8000c9c <rb_push_bytes+0x70>
 8000c3e:	887b      	ldrh	r3, [r7, #2]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d02b      	beq.n	8000c9c <rb_push_bytes+0x70>
 8000c44:	4b17      	ldr	r3, [pc, #92]	@ (8000ca4 <rb_push_bytes+0x78>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d027      	beq.n	8000c9c <rb_push_bytes+0x70>
    uint16_t space = rb_space();
 8000c4c:	f7ff ffe2 	bl	8000c14 <rb_space>
 8000c50:	4603      	mov	r3, r0
 8000c52:	81bb      	strh	r3, [r7, #12]
    if(len > space) len = space; // drop excess (lowest priority)
 8000c54:	887a      	ldrh	r2, [r7, #2]
 8000c56:	89bb      	ldrh	r3, [r7, #12]
 8000c58:	429a      	cmp	r2, r3
 8000c5a:	d901      	bls.n	8000c60 <rb_push_bytes+0x34>
 8000c5c:	89bb      	ldrh	r3, [r7, #12]
 8000c5e:	807b      	strh	r3, [r7, #2]
    for(uint16_t i=0;i<len;i++){
 8000c60:	2300      	movs	r3, #0
 8000c62:	81fb      	strh	r3, [r7, #14]
 8000c64:	e015      	b.n	8000c92 <rb_push_bytes+0x66>
        s_buf[s_head] = data[i];
 8000c66:	89fb      	ldrh	r3, [r7, #14]
 8000c68:	687a      	ldr	r2, [r7, #4]
 8000c6a:	4413      	add	r3, r2
 8000c6c:	4a0e      	ldr	r2, [pc, #56]	@ (8000ca8 <rb_push_bytes+0x7c>)
 8000c6e:	8812      	ldrh	r2, [r2, #0]
 8000c70:	b292      	uxth	r2, r2
 8000c72:	7819      	ldrb	r1, [r3, #0]
 8000c74:	4b0d      	ldr	r3, [pc, #52]	@ (8000cac <rb_push_bytes+0x80>)
 8000c76:	5499      	strb	r1, [r3, r2]
        s_head = (uint16_t)((s_head + 1) % LOG_BUF_SZ);
 8000c78:	4b0b      	ldr	r3, [pc, #44]	@ (8000ca8 <rb_push_bytes+0x7c>)
 8000c7a:	881b      	ldrh	r3, [r3, #0]
 8000c7c:	b29b      	uxth	r3, r3
 8000c7e:	3301      	adds	r3, #1
 8000c80:	b29b      	uxth	r3, r3
 8000c82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000c86:	b29a      	uxth	r2, r3
 8000c88:	4b07      	ldr	r3, [pc, #28]	@ (8000ca8 <rb_push_bytes+0x7c>)
 8000c8a:	801a      	strh	r2, [r3, #0]
    for(uint16_t i=0;i<len;i++){
 8000c8c:	89fb      	ldrh	r3, [r7, #14]
 8000c8e:	3301      	adds	r3, #1
 8000c90:	81fb      	strh	r3, [r7, #14]
 8000c92:	89fa      	ldrh	r2, [r7, #14]
 8000c94:	887b      	ldrh	r3, [r7, #2]
 8000c96:	429a      	cmp	r2, r3
 8000c98:	d3e5      	bcc.n	8000c66 <rb_push_bytes+0x3a>
 8000c9a:	e000      	b.n	8000c9e <rb_push_bytes+0x72>
    if(!data || !len || !s_enabled) return;
 8000c9c:	bf00      	nop
    }
}
 8000c9e:	3710      	adds	r7, #16
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	20000000 	.word	0x20000000
 8000ca8:	200004ac 	.word	0x200004ac
 8000cac:	200000ac 	.word	0x200000ac

08000cb0 <push_line>:

static void push_line(const char* line){
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b084      	sub	sp, #16
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
    if(!line) return;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d00f      	beq.n	8000cde <push_line+0x2e>
    size_t n = strlen(line);
 8000cbe:	6878      	ldr	r0, [r7, #4]
 8000cc0:	f7ff fa86 	bl	80001d0 <strlen>
 8000cc4:	60f8      	str	r0, [r7, #12]
    if(n > 240) n = 240; // trim
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	2bf0      	cmp	r3, #240	@ 0xf0
 8000cca:	d901      	bls.n	8000cd0 <push_line+0x20>
 8000ccc:	23f0      	movs	r3, #240	@ 0xf0
 8000cce:	60fb      	str	r3, [r7, #12]
    rb_push_bytes((const uint8_t*)line, (uint16_t)n);
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	b29b      	uxth	r3, r3
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	6878      	ldr	r0, [r7, #4]
 8000cd8:	f7ff ffa8 	bl	8000c2c <rb_push_bytes>
 8000cdc:	e000      	b.n	8000ce0 <push_line+0x30>
    if(!line) return;
 8000cde:	bf00      	nop
}
 8000ce0:	3710      	adds	r7, #16
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
	...

08000ce8 <log_service_init>:

void log_service_init(void){
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
    s_enabled = LOG_DEFAULT_ENABLED;
 8000cec:	4b0a      	ldr	r3, [pc, #40]	@ (8000d18 <log_service_init+0x30>)
 8000cee:	2201      	movs	r2, #1
 8000cf0:	601a      	str	r2, [r3, #0]
    s_mode = LOG_DEFAULT_MODE;
 8000cf2:	4b0a      	ldr	r3, [pc, #40]	@ (8000d1c <log_service_init+0x34>)
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	701a      	strb	r2, [r3, #0]
    s_head = s_tail = 0;
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	4b09      	ldr	r3, [pc, #36]	@ (8000d20 <log_service_init+0x38>)
 8000cfc:	460a      	mov	r2, r1
 8000cfe:	801a      	strh	r2, [r3, #0]
 8000d00:	4b08      	ldr	r3, [pc, #32]	@ (8000d24 <log_service_init+0x3c>)
 8000d02:	460a      	mov	r2, r1
 8000d04:	801a      	strh	r2, [r3, #0]
    s_tx_busy = 0;
 8000d06:	4b08      	ldr	r3, [pc, #32]	@ (8000d28 <log_service_init+0x40>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	701a      	strb	r2, [r3, #0]
}
 8000d0c:	bf00      	nop
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	20000000 	.word	0x20000000
 8000d1c:	200000a8 	.word	0x200000a8
 8000d20:	200004ae 	.word	0x200004ae
 8000d24:	200004ac 	.word	0x200004ac
 8000d28:	200004b0 	.word	0x200004b0

08000d2c <log_event_ids>:

void log_set_enabled(int enabled){ s_enabled = (enabled != 0); }
void log_set_mode(log_mode_t mode){ s_mode = mode; }

void log_event_ids(uint8_t service_id, uint8_t state_id, int32_t status){
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b096      	sub	sp, #88	@ 0x58
 8000d30:	af02      	add	r7, sp, #8
 8000d32:	4603      	mov	r3, r0
 8000d34:	603a      	str	r2, [r7, #0]
 8000d36:	71fb      	strb	r3, [r7, #7]
 8000d38:	460b      	mov	r3, r1
 8000d3a:	71bb      	strb	r3, [r7, #6]
    if(!s_enabled) return;
 8000d3c:	4b12      	ldr	r3, [pc, #72]	@ (8000d88 <log_event_ids+0x5c>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d01a      	beq.n	8000d7a <log_event_ids+0x4e>
    if(s_mode != LOG_MODE_CONCISE) return;
 8000d44:	4b11      	ldr	r3, [pc, #68]	@ (8000d8c <log_event_ids+0x60>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	b2db      	uxtb	r3, r3
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d117      	bne.n	8000d7e <log_event_ids+0x52>
    char line[64];
    // Format: L,svc=<id>,state=<id>,status=<num>\r\n
    int nn = snprintf(line, sizeof line, "L:svc=%u,state=%u,status=%ld\r\n",
 8000d4e:	79f9      	ldrb	r1, [r7, #7]
 8000d50:	79bb      	ldrb	r3, [r7, #6]
 8000d52:	f107 000c 	add.w	r0, r7, #12
 8000d56:	683a      	ldr	r2, [r7, #0]
 8000d58:	9201      	str	r2, [sp, #4]
 8000d5a:	9300      	str	r3, [sp, #0]
 8000d5c:	460b      	mov	r3, r1
 8000d5e:	4a0c      	ldr	r2, [pc, #48]	@ (8000d90 <log_event_ids+0x64>)
 8000d60:	2140      	movs	r1, #64	@ 0x40
 8000d62:	f007 fb09 	bl	8008378 <sniprintf>
 8000d66:	64f8      	str	r0, [r7, #76]	@ 0x4c
                      (unsigned)service_id, (unsigned)state_id, (long)status);
    if(nn > 0) push_line(line);
 8000d68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	dd08      	ble.n	8000d80 <log_event_ids+0x54>
 8000d6e:	f107 030c 	add.w	r3, r7, #12
 8000d72:	4618      	mov	r0, r3
 8000d74:	f7ff ff9c 	bl	8000cb0 <push_line>
 8000d78:	e002      	b.n	8000d80 <log_event_ids+0x54>
    if(!s_enabled) return;
 8000d7a:	bf00      	nop
 8000d7c:	e000      	b.n	8000d80 <log_event_ids+0x54>
    if(s_mode != LOG_MODE_CONCISE) return;
 8000d7e:	bf00      	nop
}
 8000d80:	3750      	adds	r7, #80	@ 0x50
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	20000000 	.word	0x20000000
 8000d8c:	200000a8 	.word	0x200000a8
 8000d90:	08009064 	.word	0x08009064

08000d94 <log_event_names>:

void log_event_names(const char* service_name, const char* state_name, const char* status_text){
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b0b0      	sub	sp, #192	@ 0xc0
 8000d98:	af02      	add	r7, sp, #8
 8000d9a:	60f8      	str	r0, [r7, #12]
 8000d9c:	60b9      	str	r1, [r7, #8]
 8000d9e:	607a      	str	r2, [r7, #4]
    if(!s_enabled) return;
 8000da0:	4b1a      	ldr	r3, [pc, #104]	@ (8000e0c <log_event_names+0x78>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d02a      	beq.n	8000dfe <log_event_names+0x6a>
    if(s_mode != LOG_MODE_VERBOSE) return;
 8000da8:	4b19      	ldr	r3, [pc, #100]	@ (8000e10 <log_event_names+0x7c>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	2b01      	cmp	r3, #1
 8000db0:	d127      	bne.n	8000e02 <log_event_names+0x6e>
    if(!service_name) service_name = "?";
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d101      	bne.n	8000dbc <log_event_names+0x28>
 8000db8:	4b16      	ldr	r3, [pc, #88]	@ (8000e14 <log_event_names+0x80>)
 8000dba:	60fb      	str	r3, [r7, #12]
    if(!state_name) state_name = "?";
 8000dbc:	68bb      	ldr	r3, [r7, #8]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d101      	bne.n	8000dc6 <log_event_names+0x32>
 8000dc2:	4b14      	ldr	r3, [pc, #80]	@ (8000e14 <log_event_names+0x80>)
 8000dc4:	60bb      	str	r3, [r7, #8]
    if(!status_text) status_text = "?";
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d101      	bne.n	8000dd0 <log_event_names+0x3c>
 8000dcc:	4b11      	ldr	r3, [pc, #68]	@ (8000e14 <log_event_names+0x80>)
 8000dce:	607b      	str	r3, [r7, #4]
    char line[160];
    // Format: LOG,service=<name>,state=<name>,status=<text>\r\n
    int nn = snprintf(line, sizeof line, "LOG:service=%s,state=%s,status=%s\r\n",
 8000dd0:	f107 0014 	add.w	r0, r7, #20
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	9301      	str	r3, [sp, #4]
 8000dd8:	68bb      	ldr	r3, [r7, #8]
 8000dda:	9300      	str	r3, [sp, #0]
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	4a0e      	ldr	r2, [pc, #56]	@ (8000e18 <log_event_names+0x84>)
 8000de0:	21a0      	movs	r1, #160	@ 0xa0
 8000de2:	f007 fac9 	bl	8008378 <sniprintf>
 8000de6:	f8c7 00b4 	str.w	r0, [r7, #180]	@ 0xb4
                      service_name, state_name, status_text);
    if(nn > 0) push_line(line);
 8000dea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	dd08      	ble.n	8000e04 <log_event_names+0x70>
 8000df2:	f107 0314 	add.w	r3, r7, #20
 8000df6:	4618      	mov	r0, r3
 8000df8:	f7ff ff5a 	bl	8000cb0 <push_line>
 8000dfc:	e002      	b.n	8000e04 <log_event_names+0x70>
    if(!s_enabled) return;
 8000dfe:	bf00      	nop
 8000e00:	e000      	b.n	8000e04 <log_event_names+0x70>
    if(s_mode != LOG_MODE_VERBOSE) return;
 8000e02:	bf00      	nop
}
 8000e04:	37b8      	adds	r7, #184	@ 0xb8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	20000000 	.word	0x20000000
 8000e10:	200000a8 	.word	0x200000a8
 8000e14:	08009084 	.word	0x08009084
 8000e18:	08009088 	.word	0x08009088

08000e1c <log_poll>:

void log_poll(void){
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
    if(!s_enabled) return;
 8000e22:	4b34      	ldr	r3, [pc, #208]	@ (8000ef4 <log_poll+0xd8>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d05b      	beq.n	8000ee2 <log_poll+0xc6>
    if(s_tx_busy) return; // wait for current IT transfer to complete
 8000e2a:	4b33      	ldr	r3, [pc, #204]	@ (8000ef8 <log_poll+0xdc>)
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	b2db      	uxtb	r3, r3
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d158      	bne.n	8000ee6 <log_poll+0xca>
    uint16_t cnt = rb_count();
 8000e34:	f7ff fecc 	bl	8000bd0 <rb_count>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	80bb      	strh	r3, [r7, #4]
    if(!cnt) return;
 8000e3c:	88bb      	ldrh	r3, [r7, #4]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d053      	beq.n	8000eea <log_poll+0xce>
    uint16_t n = (cnt > LOG_CHUNK_MAX) ? LOG_CHUNK_MAX : cnt;
 8000e42:	88bb      	ldrh	r3, [r7, #4]
 8000e44:	2b60      	cmp	r3, #96	@ 0x60
 8000e46:	bf28      	it	cs
 8000e48:	2360      	movcs	r3, #96	@ 0x60
 8000e4a:	807b      	strh	r3, [r7, #2]
    uint16_t first = (uint16_t)((s_head >= s_tail) ? (n) : (uint16_t)(LOG_BUF_SZ - s_tail));
 8000e4c:	4b2b      	ldr	r3, [pc, #172]	@ (8000efc <log_poll+0xe0>)
 8000e4e:	881b      	ldrh	r3, [r3, #0]
 8000e50:	b29a      	uxth	r2, r3
 8000e52:	4b2b      	ldr	r3, [pc, #172]	@ (8000f00 <log_poll+0xe4>)
 8000e54:	881b      	ldrh	r3, [r3, #0]
 8000e56:	b29b      	uxth	r3, r3
 8000e58:	429a      	cmp	r2, r3
 8000e5a:	d206      	bcs.n	8000e6a <log_poll+0x4e>
 8000e5c:	4b28      	ldr	r3, [pc, #160]	@ (8000f00 <log_poll+0xe4>)
 8000e5e:	881b      	ldrh	r3, [r3, #0]
 8000e60:	b29b      	uxth	r3, r3
 8000e62:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 8000e66:	b29b      	uxth	r3, r3
 8000e68:	e000      	b.n	8000e6c <log_poll+0x50>
 8000e6a:	887b      	ldrh	r3, [r7, #2]
 8000e6c:	80fb      	strh	r3, [r7, #6]
    if(first > n) first = n;
 8000e6e:	88fa      	ldrh	r2, [r7, #6]
 8000e70:	887b      	ldrh	r3, [r7, #2]
 8000e72:	429a      	cmp	r2, r3
 8000e74:	d901      	bls.n	8000e7a <log_poll+0x5e>
 8000e76:	887b      	ldrh	r3, [r7, #2]
 8000e78:	80fb      	strh	r3, [r7, #6]
    memcpy(s_tx_buf, &s_buf[s_tail], first);
 8000e7a:	4b21      	ldr	r3, [pc, #132]	@ (8000f00 <log_poll+0xe4>)
 8000e7c:	881b      	ldrh	r3, [r3, #0]
 8000e7e:	b29b      	uxth	r3, r3
 8000e80:	461a      	mov	r2, r3
 8000e82:	4b20      	ldr	r3, [pc, #128]	@ (8000f04 <log_poll+0xe8>)
 8000e84:	4413      	add	r3, r2
 8000e86:	88fa      	ldrh	r2, [r7, #6]
 8000e88:	4619      	mov	r1, r3
 8000e8a:	481f      	ldr	r0, [pc, #124]	@ (8000f08 <log_poll+0xec>)
 8000e8c:	f007 fc0d 	bl	80086aa <memcpy>
    if(first < n){
 8000e90:	88fa      	ldrh	r2, [r7, #6]
 8000e92:	887b      	ldrh	r3, [r7, #2]
 8000e94:	429a      	cmp	r2, r3
 8000e96:	d209      	bcs.n	8000eac <log_poll+0x90>
        memcpy(s_tx_buf + first, &s_buf[0], n - first);
 8000e98:	88fb      	ldrh	r3, [r7, #6]
 8000e9a:	4a1b      	ldr	r2, [pc, #108]	@ (8000f08 <log_poll+0xec>)
 8000e9c:	1898      	adds	r0, r3, r2
 8000e9e:	887a      	ldrh	r2, [r7, #2]
 8000ea0:	88fb      	ldrh	r3, [r7, #6]
 8000ea2:	1ad3      	subs	r3, r2, r3
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	4917      	ldr	r1, [pc, #92]	@ (8000f04 <log_poll+0xe8>)
 8000ea8:	f007 fbff 	bl	80086aa <memcpy>
    }
    if(HAL_UART_Transmit_IT(&huart1, s_tx_buf, (uint16_t)n) == HAL_OK){
 8000eac:	887b      	ldrh	r3, [r7, #2]
 8000eae:	461a      	mov	r2, r3
 8000eb0:	4915      	ldr	r1, [pc, #84]	@ (8000f08 <log_poll+0xec>)
 8000eb2:	4816      	ldr	r0, [pc, #88]	@ (8000f0c <log_poll+0xf0>)
 8000eb4:	f006 f91e 	bl	80070f4 <HAL_UART_Transmit_IT>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d116      	bne.n	8000eec <log_poll+0xd0>
        s_tail = (uint16_t)((s_tail + n) % LOG_BUF_SZ);
 8000ebe:	4b10      	ldr	r3, [pc, #64]	@ (8000f00 <log_poll+0xe4>)
 8000ec0:	881b      	ldrh	r3, [r3, #0]
 8000ec2:	b29a      	uxth	r2, r3
 8000ec4:	887b      	ldrh	r3, [r7, #2]
 8000ec6:	4413      	add	r3, r2
 8000ec8:	b29b      	uxth	r3, r3
 8000eca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000ece:	b29a      	uxth	r2, r3
 8000ed0:	4b0b      	ldr	r3, [pc, #44]	@ (8000f00 <log_poll+0xe4>)
 8000ed2:	801a      	strh	r2, [r3, #0]
        s_tx_len = n;
 8000ed4:	4a0e      	ldr	r2, [pc, #56]	@ (8000f10 <log_poll+0xf4>)
 8000ed6:	887b      	ldrh	r3, [r7, #2]
 8000ed8:	8013      	strh	r3, [r2, #0]
        s_tx_busy = 1;
 8000eda:	4b07      	ldr	r3, [pc, #28]	@ (8000ef8 <log_poll+0xdc>)
 8000edc:	2201      	movs	r2, #1
 8000ede:	701a      	strb	r2, [r3, #0]
 8000ee0:	e004      	b.n	8000eec <log_poll+0xd0>
    if(!s_enabled) return;
 8000ee2:	bf00      	nop
 8000ee4:	e002      	b.n	8000eec <log_poll+0xd0>
    if(s_tx_busy) return; // wait for current IT transfer to complete
 8000ee6:	bf00      	nop
 8000ee8:	e000      	b.n	8000eec <log_poll+0xd0>
    if(!cnt) return;
 8000eea:	bf00      	nop
    }
}
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	20000000 	.word	0x20000000
 8000ef8:	200004b0 	.word	0x200004b0
 8000efc:	200004ac 	.word	0x200004ac
 8000f00:	200004ae 	.word	0x200004ae
 8000f04:	200000ac 	.word	0x200000ac
 8000f08:	200004b4 	.word	0x200004b4
 8000f0c:	20000904 	.word	0x20000904
 8000f10:	20000514 	.word	0x20000514

08000f14 <motion_on_move_queue_add>:
void motion_on_tim6_tick(void) { /* DDA feed aqui futuramente */
}
void motion_on_tim7_tick(void) { /* Atualização de status/PID aqui futuramente */
}

void motion_on_move_queue_add(const uint8_t *frame, uint32_t len) {
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	6039      	str	r1, [r7, #0]
	(void) frame;
	(void) len;
	if (g_status.state == MOTION_IDLE)
 8000f1e:	4b0a      	ldr	r3, [pc, #40]	@ (8000f48 <motion_on_move_queue_add+0x34>)
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	b2db      	uxtb	r3, r3
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d102      	bne.n	8000f2e <motion_on_move_queue_add+0x1a>
		g_status.state = MOTION_QUEUED;
 8000f28:	4b07      	ldr	r3, [pc, #28]	@ (8000f48 <motion_on_move_queue_add+0x34>)
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	701a      	strb	r2, [r3, #0]
	g_status.queue_depth++;
 8000f2e:	4b06      	ldr	r3, [pc, #24]	@ (8000f48 <motion_on_move_queue_add+0x34>)
 8000f30:	785b      	ldrb	r3, [r3, #1]
 8000f32:	b2db      	uxtb	r3, r3
 8000f34:	3301      	adds	r3, #1
 8000f36:	b2da      	uxtb	r2, r3
 8000f38:	4b03      	ldr	r3, [pc, #12]	@ (8000f48 <motion_on_move_queue_add+0x34>)
 8000f3a:	705a      	strb	r2, [r3, #1]
}
 8000f3c:	bf00      	nop
 8000f3e:	370c      	adds	r7, #12
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr
 8000f48:	20000518 	.word	0x20000518

08000f4c <motion_on_move_queue_status>:
void motion_on_move_queue_status(const uint8_t *frame, uint32_t len) {
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
 8000f54:	6039      	str	r1, [r7, #0]
	(void) frame;
	(void) len;
}
 8000f56:	bf00      	nop
 8000f58:	370c      	adds	r7, #12
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
	...

08000f64 <motion_on_start_move>:
void motion_on_start_move(const uint8_t *frame, uint32_t len) {
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
 8000f6c:	6039      	str	r1, [r7, #0]
	(void) frame;
	(void) len;
	if (g_status.queue_depth)
 8000f6e:	4b07      	ldr	r3, [pc, #28]	@ (8000f8c <motion_on_start_move+0x28>)
 8000f70:	785b      	ldrb	r3, [r3, #1]
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d002      	beq.n	8000f7e <motion_on_start_move+0x1a>
		g_status.state = MOTION_RUNNING;
 8000f78:	4b04      	ldr	r3, [pc, #16]	@ (8000f8c <motion_on_start_move+0x28>)
 8000f7a:	2202      	movs	r2, #2
 8000f7c:	701a      	strb	r2, [r3, #0]
}
 8000f7e:	bf00      	nop
 8000f80:	370c      	adds	r7, #12
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	20000518 	.word	0x20000518

08000f90 <motion_on_move_end>:
void motion_on_move_end(const uint8_t *frame, uint32_t len) {
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	6039      	str	r1, [r7, #0]
	(void) frame;
	(void) len;
	g_status.state = MOTION_STOPPING;
 8000f9a:	4b04      	ldr	r3, [pc, #16]	@ (8000fac <motion_on_move_end+0x1c>)
 8000f9c:	2204      	movs	r2, #4
 8000f9e:	701a      	strb	r2, [r3, #0]
}
 8000fa0:	bf00      	nop
 8000fa2:	370c      	adds	r7, #12
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr
 8000fac:	20000518 	.word	0x20000518

08000fb0 <probe_on_move_probe_level>:
}
const probe_status_t* probe_status_get(void) {
	return &g_probe;
}

void probe_on_move_probe_level(const uint8_t *frame, uint32_t len) {
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	6039      	str	r1, [r7, #0]
	(void) frame;
	(void) len; /* implementar FSM de probe */
}
 8000fba:	bf00      	nop
 8000fbc:	370c      	adds	r7, #12
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr

08000fc6 <h_move_queue_add>:
#include "Services/Home/home_service.h"
#include "Services/Probe/probe_service.h"
#include "Services/Led/led_service.h"

// Static adapter functions matching router callbacks
static void h_move_queue_add(router_t *r, const uint8_t *f, uint32_t l) {
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	b084      	sub	sp, #16
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	60f8      	str	r0, [r7, #12]
 8000fce:	60b9      	str	r1, [r7, #8]
 8000fd0:	607a      	str	r2, [r7, #4]
	(void) r;
	motion_on_move_queue_add(f, l);
 8000fd2:	6879      	ldr	r1, [r7, #4]
 8000fd4:	68b8      	ldr	r0, [r7, #8]
 8000fd6:	f7ff ff9d 	bl	8000f14 <motion_on_move_queue_add>
}
 8000fda:	bf00      	nop
 8000fdc:	3710      	adds	r7, #16
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}

08000fe2 <h_move_queue_status>:
static void h_move_queue_status(router_t *r, const uint8_t *f, uint32_t l) {
 8000fe2:	b580      	push	{r7, lr}
 8000fe4:	b084      	sub	sp, #16
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	60f8      	str	r0, [r7, #12]
 8000fea:	60b9      	str	r1, [r7, #8]
 8000fec:	607a      	str	r2, [r7, #4]
	(void) r;
	motion_on_move_queue_status(f, l);
 8000fee:	6879      	ldr	r1, [r7, #4]
 8000ff0:	68b8      	ldr	r0, [r7, #8]
 8000ff2:	f7ff ffab 	bl	8000f4c <motion_on_move_queue_status>
}
 8000ff6:	bf00      	nop
 8000ff8:	3710      	adds	r7, #16
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}

08000ffe <h_start_move>:
static void h_start_move(router_t *r, const uint8_t *f, uint32_t l) {
 8000ffe:	b580      	push	{r7, lr}
 8001000:	b084      	sub	sp, #16
 8001002:	af00      	add	r7, sp, #0
 8001004:	60f8      	str	r0, [r7, #12]
 8001006:	60b9      	str	r1, [r7, #8]
 8001008:	607a      	str	r2, [r7, #4]
	(void) r;
	motion_on_start_move(f, l);
 800100a:	6879      	ldr	r1, [r7, #4]
 800100c:	68b8      	ldr	r0, [r7, #8]
 800100e:	f7ff ffa9 	bl	8000f64 <motion_on_start_move>
}
 8001012:	bf00      	nop
 8001014:	3710      	adds	r7, #16
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}

0800101a <h_move_home>:
static void h_move_home(router_t *r, const uint8_t *f, uint32_t l) {
 800101a:	b580      	push	{r7, lr}
 800101c:	b084      	sub	sp, #16
 800101e:	af00      	add	r7, sp, #0
 8001020:	60f8      	str	r0, [r7, #12]
 8001022:	60b9      	str	r1, [r7, #8]
 8001024:	607a      	str	r2, [r7, #4]
	(void) r;
	home_on_move_home(f, l);
 8001026:	6879      	ldr	r1, [r7, #4]
 8001028:	68b8      	ldr	r0, [r7, #8]
 800102a:	f7ff fcfb 	bl	8000a24 <home_on_move_home>
}
 800102e:	bf00      	nop
 8001030:	3710      	adds	r7, #16
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}

08001036 <h_move_probe_level>:
static void h_move_probe_level(router_t *r, const uint8_t *f, uint32_t l) {
 8001036:	b580      	push	{r7, lr}
 8001038:	b084      	sub	sp, #16
 800103a:	af00      	add	r7, sp, #0
 800103c:	60f8      	str	r0, [r7, #12]
 800103e:	60b9      	str	r1, [r7, #8]
 8001040:	607a      	str	r2, [r7, #4]
	(void) r;
	probe_on_move_probe_level(f, l);
 8001042:	6879      	ldr	r1, [r7, #4]
 8001044:	68b8      	ldr	r0, [r7, #8]
 8001046:	f7ff ffb3 	bl	8000fb0 <probe_on_move_probe_level>
}
 800104a:	bf00      	nop
 800104c:	3710      	adds	r7, #16
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}

08001052 <h_move_end>:
static void h_move_end(router_t *r, const uint8_t *f, uint32_t l) {
 8001052:	b580      	push	{r7, lr}
 8001054:	b084      	sub	sp, #16
 8001056:	af00      	add	r7, sp, #0
 8001058:	60f8      	str	r0, [r7, #12]
 800105a:	60b9      	str	r1, [r7, #8]
 800105c:	607a      	str	r2, [r7, #4]
	(void) r;
	motion_on_move_end(f, l);
 800105e:	6879      	ldr	r1, [r7, #4]
 8001060:	68b8      	ldr	r0, [r7, #8]
 8001062:	f7ff ff95 	bl	8000f90 <motion_on_move_end>
}
 8001066:	bf00      	nop
 8001068:	3710      	adds	r7, #16
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}

0800106e <h_led_ctrl>:
static void h_led_ctrl(router_t *r, const uint8_t *f, uint32_t l) {
 800106e:	b580      	push	{r7, lr}
 8001070:	b084      	sub	sp, #16
 8001072:	af00      	add	r7, sp, #0
 8001074:	60f8      	str	r0, [r7, #12]
 8001076:	60b9      	str	r1, [r7, #8]
 8001078:	607a      	str	r2, [r7, #4]
	(void) r;
	led_on_led_ctrl(f, l);
 800107a:	6879      	ldr	r1, [r7, #4]
 800107c:	68b8      	ldr	r0, [r7, #8]
 800107e:	f7ff fd5f 	bl	8000b40 <led_on_led_ctrl>
}
 8001082:	bf00      	nop
 8001084:	3710      	adds	r7, #16
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}

0800108a <h_fpga_status>:
static void h_fpga_status(router_t *r, const uint8_t *f, uint32_t l) {
 800108a:	b480      	push	{r7}
 800108c:	b085      	sub	sp, #20
 800108e:	af00      	add	r7, sp, #0
 8001090:	60f8      	str	r0, [r7, #12]
 8001092:	60b9      	str	r1, [r7, #8]
 8001094:	607a      	str	r2, [r7, #4]
	(void) r;
	(void) f;
	(void) l; /* opcional */
}
 8001096:	bf00      	nop
 8001098:	3714      	adds	r7, #20
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
	...

080010a4 <services_register_handlers>:

void services_register_handlers(router_handlers_t *h) {
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
	if (!h)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d018      	beq.n	80010e4 <services_register_handlers+0x40>
		return;
	h->on_move_queue_add = h_move_queue_add;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4a0e      	ldr	r2, [pc, #56]	@ (80010f0 <services_register_handlers+0x4c>)
 80010b6:	601a      	str	r2, [r3, #0]
	h->on_move_queue_status = h_move_queue_status;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	4a0e      	ldr	r2, [pc, #56]	@ (80010f4 <services_register_handlers+0x50>)
 80010bc:	605a      	str	r2, [r3, #4]
	h->on_start_move = h_start_move;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4a0d      	ldr	r2, [pc, #52]	@ (80010f8 <services_register_handlers+0x54>)
 80010c2:	609a      	str	r2, [r3, #8]
	h->on_move_home = h_move_home;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	4a0d      	ldr	r2, [pc, #52]	@ (80010fc <services_register_handlers+0x58>)
 80010c8:	60da      	str	r2, [r3, #12]
	h->on_move_probe_level = h_move_probe_level;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4a0c      	ldr	r2, [pc, #48]	@ (8001100 <services_register_handlers+0x5c>)
 80010ce:	611a      	str	r2, [r3, #16]
	h->on_move_end = h_move_end;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	4a0c      	ldr	r2, [pc, #48]	@ (8001104 <services_register_handlers+0x60>)
 80010d4:	615a      	str	r2, [r3, #20]
	h->on_led_ctrl = h_led_ctrl;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4a0b      	ldr	r2, [pc, #44]	@ (8001108 <services_register_handlers+0x64>)
 80010da:	619a      	str	r2, [r3, #24]
	h->on_fpga_status = h_fpga_status;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	4a0b      	ldr	r2, [pc, #44]	@ (800110c <services_register_handlers+0x68>)
 80010e0:	61da      	str	r2, [r3, #28]
 80010e2:	e000      	b.n	80010e6 <services_register_handlers+0x42>
		return;
 80010e4:	bf00      	nop
}
 80010e6:	370c      	adds	r7, #12
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr
 80010f0:	08000fc7 	.word	0x08000fc7
 80010f4:	08000fe3 	.word	0x08000fe3
 80010f8:	08000fff 	.word	0x08000fff
 80010fc:	0800101b 	.word	0x0800101b
 8001100:	08001037 	.word	0x08001037
 8001104:	08001053 	.word	0x08001053
 8001108:	0800106f 	.word	0x0800106f
 800110c:	0800108b 	.word	0x0800108b

08001110 <app_init>:
#define APP_SPI_RX_BUF_SZ 256u
#endif
static uint8_t g_spi_rx_buf[APP_SPI_RX_BUF_SZ];
static volatile int g_spi_tx_busy = 0;

void app_init(void) {
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
    // Init services (GPIO for LED etc.)
    led_service_init();
 8001114:	f7ff fc92 	bl	8000a3c <led_service_init>
    log_service_init();
 8001118:	f7ff fde6 	bl	8000ce8 <log_service_init>
    #if LOG_ENABLE
    // Boot log (visible on USART1 VCP terminal)
    log_event_names("app", "start", "ready");
 800111c:	4a12      	ldr	r2, [pc, #72]	@ (8001168 <app_init+0x58>)
 800111e:	4913      	ldr	r1, [pc, #76]	@ (800116c <app_init+0x5c>)
 8001120:	4813      	ldr	r0, [pc, #76]	@ (8001170 <app_init+0x60>)
 8001122:	f7ff fe37 	bl	8000d94 <log_event_names>
    log_event_ids(0 /*svc:app*/, 0 /*state:start*/, PROTO_OK);
 8001126:	2200      	movs	r2, #0
 8001128:	2100      	movs	r1, #0
 800112a:	2000      	movs	r0, #0
 800112c:	f7ff fdfe 	bl	8000d2c <log_event_ids>
    #endif

    // Prepare router and response FIFO
    g_resp_fifo = resp_fifo_create();
 8001130:	f7ff fc25 	bl	800097e <resp_fifo_create>
 8001134:	4603      	mov	r3, r0
 8001136:	4a0f      	ldr	r2, [pc, #60]	@ (8001174 <app_init+0x64>)
 8001138:	6013      	str	r3, [r2, #0]
    memset(&g_handlers, 0, sizeof g_handlers);
 800113a:	2220      	movs	r2, #32
 800113c:	2100      	movs	r1, #0
 800113e:	480e      	ldr	r0, [pc, #56]	@ (8001178 <app_init+0x68>)
 8001140:	f007 fa28 	bl	8008594 <memset>
    services_register_handlers(&g_handlers);
 8001144:	480c      	ldr	r0, [pc, #48]	@ (8001178 <app_init+0x68>)
 8001146:	f7ff ffad 	bl	80010a4 <services_register_handlers>
    router_init(&g_router, g_resp_fifo, &g_handlers);
 800114a:	4b0a      	ldr	r3, [pc, #40]	@ (8001174 <app_init+0x64>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4a0a      	ldr	r2, [pc, #40]	@ (8001178 <app_init+0x68>)
 8001150:	4619      	mov	r1, r3
 8001152:	480a      	ldr	r0, [pc, #40]	@ (800117c <app_init+0x6c>)
 8001154:	f7ff fab4 	bl	80006c0 <router_init>

    // Start SPI RX DMA in circular mode to feed router from callbacks
    (void)HAL_SPI_Receive_DMA(&hspi1, g_spi_rx_buf, (uint16_t)APP_SPI_RX_BUF_SZ);
 8001158:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800115c:	4908      	ldr	r1, [pc, #32]	@ (8001180 <app_init+0x70>)
 800115e:	4809      	ldr	r0, [pc, #36]	@ (8001184 <app_init+0x74>)
 8001160:	f004 f952 	bl	8005408 <HAL_SPI_Receive_DMA>
}
 8001164:	bf00      	nop
 8001166:	bd80      	pop	{r7, pc}
 8001168:	080090ac 	.word	0x080090ac
 800116c:	080090b4 	.word	0x080090b4
 8001170:	080090bc 	.word	0x080090bc
 8001174:	20000588 	.word	0x20000588
 8001178:	20000568 	.word	0x20000568
 800117c:	20000520 	.word	0x20000520
 8001180:	2000058c 	.word	0x2000058c
 8001184:	20000690 	.word	0x20000690

08001188 <app_poll>:

void app_poll(void) {
 8001188:	b580      	push	{r7, lr}
 800118a:	b092      	sub	sp, #72	@ 0x48
 800118c:	af00      	add	r7, sp, #0
    // If TX is idle, try to pop one response frame from FIFO and transmit
    if (!g_spi_tx_busy && g_resp_fifo) {
 800118e:	4b13      	ldr	r3, [pc, #76]	@ (80011dc <app_poll+0x54>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d11b      	bne.n	80011ce <app_poll+0x46>
 8001196:	4b12      	ldr	r3, [pc, #72]	@ (80011e0 <app_poll+0x58>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d017      	beq.n	80011ce <app_poll+0x46>
        uint8_t out[64];
        int n = resp_fifo_pop(g_resp_fifo, out, sizeof out);
 800119e:	4b10      	ldr	r3, [pc, #64]	@ (80011e0 <app_poll+0x58>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	1d39      	adds	r1, r7, #4
 80011a4:	2240      	movs	r2, #64	@ 0x40
 80011a6:	4618      	mov	r0, r3
 80011a8:	f7ff fbf7 	bl	800099a <resp_fifo_pop>
 80011ac:	6478      	str	r0, [r7, #68]	@ 0x44
        if (n > 0) {
 80011ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	dd0c      	ble.n	80011ce <app_poll+0x46>
            // Use interrupt-driven TX to avoid DMA mode constraints
            if (HAL_SPI_Transmit_IT(&hspi1, out, (uint16_t)n) == HAL_OK) {
 80011b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80011b6:	b29a      	uxth	r2, r3
 80011b8:	1d3b      	adds	r3, r7, #4
 80011ba:	4619      	mov	r1, r3
 80011bc:	4809      	ldr	r0, [pc, #36]	@ (80011e4 <app_poll+0x5c>)
 80011be:	f004 f88d 	bl	80052dc <HAL_SPI_Transmit_IT>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d102      	bne.n	80011ce <app_poll+0x46>
                g_spi_tx_busy = 1;
 80011c8:	4b04      	ldr	r3, [pc, #16]	@ (80011dc <app_poll+0x54>)
 80011ca:	2201      	movs	r2, #1
 80011cc:	601a      	str	r2, [r3, #0]
            }
        }
    }

    // Lowest priority: drain log output (non-blocking, only if USART idle)
    log_poll();
 80011ce:	f7ff fe25 	bl	8000e1c <log_poll>
}
 80011d2:	bf00      	nop
 80011d4:	3748      	adds	r7, #72	@ 0x48
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	2000068c 	.word	0x2000068c
 80011e0:	20000588 	.word	0x20000588
 80011e4:	20000690 	.word	0x20000690

080011e8 <HAL_SPI_RxHalfCpltCallback>:

// HAL callbacks (override weak definitions) to feed the router
void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *h) {
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
    if (h && h->Instance == SPI1) {
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d009      	beq.n	800120a <HAL_SPI_RxHalfCpltCallback+0x22>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4a06      	ldr	r2, [pc, #24]	@ (8001214 <HAL_SPI_RxHalfCpltCallback+0x2c>)
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d104      	bne.n	800120a <HAL_SPI_RxHalfCpltCallback+0x22>
        router_feed_bytes(&g_router, g_spi_rx_buf, APP_SPI_RX_BUF_SZ / 2);
 8001200:	2280      	movs	r2, #128	@ 0x80
 8001202:	4905      	ldr	r1, [pc, #20]	@ (8001218 <HAL_SPI_RxHalfCpltCallback+0x30>)
 8001204:	4805      	ldr	r0, [pc, #20]	@ (800121c <HAL_SPI_RxHalfCpltCallback+0x34>)
 8001206:	f7ff fb6f 	bl	80008e8 <router_feed_bytes>
    }
}
 800120a:	bf00      	nop
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	40013000 	.word	0x40013000
 8001218:	2000058c 	.word	0x2000058c
 800121c:	20000520 	.word	0x20000520

08001220 <HAL_SPI_RxCpltCallback>:
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *h) {
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
    if (h && h->Instance == SPI1) {
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d00a      	beq.n	8001244 <HAL_SPI_RxCpltCallback+0x24>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4a06      	ldr	r2, [pc, #24]	@ (800124c <HAL_SPI_RxCpltCallback+0x2c>)
 8001234:	4293      	cmp	r3, r2
 8001236:	d105      	bne.n	8001244 <HAL_SPI_RxCpltCallback+0x24>
        router_feed_bytes(&g_router, g_spi_rx_buf + (APP_SPI_RX_BUF_SZ / 2), APP_SPI_RX_BUF_SZ / 2);
 8001238:	4b05      	ldr	r3, [pc, #20]	@ (8001250 <HAL_SPI_RxCpltCallback+0x30>)
 800123a:	2280      	movs	r2, #128	@ 0x80
 800123c:	4619      	mov	r1, r3
 800123e:	4805      	ldr	r0, [pc, #20]	@ (8001254 <HAL_SPI_RxCpltCallback+0x34>)
 8001240:	f7ff fb52 	bl	80008e8 <router_feed_bytes>
    }
}
 8001244:	bf00      	nop
 8001246:	3708      	adds	r7, #8
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	40013000 	.word	0x40013000
 8001250:	2000060c 	.word	0x2000060c
 8001254:	20000520 	.word	0x20000520

08001258 <HAL_SPI_TxCpltCallback>:
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *h) {
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
    if (h && h->Instance == SPI1) {
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d007      	beq.n	8001276 <HAL_SPI_TxCpltCallback+0x1e>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a06      	ldr	r2, [pc, #24]	@ (8001284 <HAL_SPI_TxCpltCallback+0x2c>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d102      	bne.n	8001276 <HAL_SPI_TxCpltCallback+0x1e>
        g_spi_tx_busy = 0;
 8001270:	4b05      	ldr	r3, [pc, #20]	@ (8001288 <HAL_SPI_TxCpltCallback+0x30>)
 8001272:	2200      	movs	r2, #0
 8001274:	601a      	str	r2, [r3, #0]
    }
}
 8001276:	bf00      	nop
 8001278:	370c      	adds	r7, #12
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	40013000 	.word	0x40013000
 8001288:	2000068c 	.word	0x2000068c

0800128c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001292:	4b10      	ldr	r3, [pc, #64]	@ (80012d4 <MX_DMA_Init+0x48>)
 8001294:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001296:	4a0f      	ldr	r2, [pc, #60]	@ (80012d4 <MX_DMA_Init+0x48>)
 8001298:	f043 0301 	orr.w	r3, r3, #1
 800129c:	6493      	str	r3, [r2, #72]	@ 0x48
 800129e:	4b0d      	ldr	r3, [pc, #52]	@ (80012d4 <MX_DMA_Init+0x48>)
 80012a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80012a2:	f003 0301 	and.w	r3, r3, #1
 80012a6:	607b      	str	r3, [r7, #4]
 80012a8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80012aa:	2200      	movs	r2, #0
 80012ac:	2100      	movs	r1, #0
 80012ae:	200c      	movs	r0, #12
 80012b0:	f001 f81a 	bl	80022e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80012b4:	200c      	movs	r0, #12
 80012b6:	f001 f843 	bl	8002340 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80012ba:	2200      	movs	r2, #0
 80012bc:	2100      	movs	r1, #0
 80012be:	200d      	movs	r0, #13
 80012c0:	f001 f812 	bl	80022e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80012c4:	200d      	movs	r0, #13
 80012c6:	f001 f83b 	bl	8002340 <HAL_NVIC_EnableIRQ>

}
 80012ca:	bf00      	nop
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	40021000 	.word	0x40021000

080012d8 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b08c      	sub	sp, #48	@ 0x30
 80012dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012de:	f107 031c 	add.w	r3, r7, #28
 80012e2:	2200      	movs	r2, #0
 80012e4:	601a      	str	r2, [r3, #0]
 80012e6:	605a      	str	r2, [r3, #4]
 80012e8:	609a      	str	r2, [r3, #8]
 80012ea:	60da      	str	r2, [r3, #12]
 80012ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012ee:	4b4d      	ldr	r3, [pc, #308]	@ (8001424 <MX_GPIO_Init+0x14c>)
 80012f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012f2:	4a4c      	ldr	r2, [pc, #304]	@ (8001424 <MX_GPIO_Init+0x14c>)
 80012f4:	f043 0310 	orr.w	r3, r3, #16
 80012f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012fa:	4b4a      	ldr	r3, [pc, #296]	@ (8001424 <MX_GPIO_Init+0x14c>)
 80012fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012fe:	f003 0310 	and.w	r3, r3, #16
 8001302:	61bb      	str	r3, [r7, #24]
 8001304:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001306:	4b47      	ldr	r3, [pc, #284]	@ (8001424 <MX_GPIO_Init+0x14c>)
 8001308:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800130a:	4a46      	ldr	r2, [pc, #280]	@ (8001424 <MX_GPIO_Init+0x14c>)
 800130c:	f043 0304 	orr.w	r3, r3, #4
 8001310:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001312:	4b44      	ldr	r3, [pc, #272]	@ (8001424 <MX_GPIO_Init+0x14c>)
 8001314:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001316:	f003 0304 	and.w	r3, r3, #4
 800131a:	617b      	str	r3, [r7, #20]
 800131c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800131e:	4b41      	ldr	r3, [pc, #260]	@ (8001424 <MX_GPIO_Init+0x14c>)
 8001320:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001322:	4a40      	ldr	r2, [pc, #256]	@ (8001424 <MX_GPIO_Init+0x14c>)
 8001324:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001328:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800132a:	4b3e      	ldr	r3, [pc, #248]	@ (8001424 <MX_GPIO_Init+0x14c>)
 800132c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800132e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001332:	613b      	str	r3, [r7, #16]
 8001334:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001336:	4b3b      	ldr	r3, [pc, #236]	@ (8001424 <MX_GPIO_Init+0x14c>)
 8001338:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800133a:	4a3a      	ldr	r2, [pc, #232]	@ (8001424 <MX_GPIO_Init+0x14c>)
 800133c:	f043 0301 	orr.w	r3, r3, #1
 8001340:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001342:	4b38      	ldr	r3, [pc, #224]	@ (8001424 <MX_GPIO_Init+0x14c>)
 8001344:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001346:	f003 0301 	and.w	r3, r3, #1
 800134a:	60fb      	str	r3, [r7, #12]
 800134c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800134e:	4b35      	ldr	r3, [pc, #212]	@ (8001424 <MX_GPIO_Init+0x14c>)
 8001350:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001352:	4a34      	ldr	r2, [pc, #208]	@ (8001424 <MX_GPIO_Init+0x14c>)
 8001354:	f043 0302 	orr.w	r3, r3, #2
 8001358:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800135a:	4b32      	ldr	r3, [pc, #200]	@ (8001424 <MX_GPIO_Init+0x14c>)
 800135c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800135e:	f003 0302 	and.w	r3, r3, #2
 8001362:	60bb      	str	r3, [r7, #8]
 8001364:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001366:	4b2f      	ldr	r3, [pc, #188]	@ (8001424 <MX_GPIO_Init+0x14c>)
 8001368:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800136a:	4a2e      	ldr	r2, [pc, #184]	@ (8001424 <MX_GPIO_Init+0x14c>)
 800136c:	f043 0308 	orr.w	r3, r3, #8
 8001370:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001372:	4b2c      	ldr	r3, [pc, #176]	@ (8001424 <MX_GPIO_Init+0x14c>)
 8001374:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001376:	f003 0308 	and.w	r3, r3, #8
 800137a:	607b      	str	r3, [r7, #4]
 800137c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PE5 PE6 PE7 PE8
                           PE9 PE10 PE11 PE12
                           PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 800137e:	f641 73e3 	movw	r3, #8163	@ 0x1fe3
 8001382:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001384:	2303      	movs	r3, #3
 8001386:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001388:	2300      	movs	r3, #0
 800138a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800138c:	f107 031c 	add.w	r3, r7, #28
 8001390:	4619      	mov	r1, r3
 8001392:	4825      	ldr	r0, [pc, #148]	@ (8001428 <MX_GPIO_Init+0x150>)
 8001394:	f001 fb3e 	bl	8002a14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC1 PC2 PC3 PC4
                           PC5 PC6 PC7 PC8
                           PC9 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 8001398:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800139c:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800139e:	2303      	movs	r3, #3
 80013a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a2:	2300      	movs	r3, #0
 80013a4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013a6:	f107 031c 	add.w	r3, r7, #28
 80013aa:	4619      	mov	r1, r3
 80013ac:	481f      	ldr	r0, [pc, #124]	@ (800142c <MX_GPIO_Init+0x154>)
 80013ae:	f001 fb31 	bl	8002a14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80013b2:	2303      	movs	r3, #3
 80013b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013b6:	2303      	movs	r3, #3
 80013b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ba:	2300      	movs	r3, #0
 80013bc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80013be:	f107 031c 	add.w	r3, r7, #28
 80013c2:	4619      	mov	r1, r3
 80013c4:	481a      	ldr	r0, [pc, #104]	@ (8001430 <MX_GPIO_Init+0x158>)
 80013c6:	f001 fb25 	bl	8002a14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA8 PA9
                           PA10 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_8|GPIO_PIN_9
 80013ca:	f649 730c 	movw	r3, #40716	@ 0x9f0c
 80013ce:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013d0:	2303      	movs	r3, #3
 80013d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d4:	2300      	movs	r3, #0
 80013d6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d8:	f107 031c 	add.w	r3, r7, #28
 80013dc:	4619      	mov	r1, r3
 80013de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013e2:	f001 fb17 	bl	8002a14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB4 PB5 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 80013e6:	f64f 7337 	movw	r3, #65335	@ 0xff37
 80013ea:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013ec:	2303      	movs	r3, #3
 80013ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f0:	2300      	movs	r3, #0
 80013f2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013f4:	f107 031c 	add.w	r3, r7, #28
 80013f8:	4619      	mov	r1, r3
 80013fa:	480e      	ldr	r0, [pc, #56]	@ (8001434 <MX_GPIO_Init+0x15c>)
 80013fc:	f001 fb0a 	bl	8002a14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15
                           PD0 PD1 PD2 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001400:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001404:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001406:	2303      	movs	r3, #3
 8001408:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140a:	2300      	movs	r3, #0
 800140c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800140e:	f107 031c 	add.w	r3, r7, #28
 8001412:	4619      	mov	r1, r3
 8001414:	4808      	ldr	r0, [pc, #32]	@ (8001438 <MX_GPIO_Init+0x160>)
 8001416:	f001 fafd 	bl	8002a14 <HAL_GPIO_Init>

}
 800141a:	bf00      	nop
 800141c:	3730      	adds	r7, #48	@ 0x30
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	40021000 	.word	0x40021000
 8001428:	48001000 	.word	0x48001000
 800142c:	48000800 	.word	0x48000800
 8001430:	48001c00 	.word	0x48001c00
 8001434:	48000400 	.word	0x48000400
 8001438:	48000c00 	.word	0x48000c00

0800143c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001440:	f000 fded 	bl	800201e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001444:	f000 f81e 	bl	8001484 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001448:	f7ff ff46 	bl	80012d8 <MX_GPIO_Init>
  MX_DMA_Init();
 800144c:	f7ff ff1e 	bl	800128c <MX_DMA_Init>
  MX_SPI1_Init();
 8001450:	f000 f8a4 	bl	800159c <MX_SPI1_Init>
  MX_TIM6_Init();
 8001454:	f000 fbbe 	bl	8001bd4 <MX_TIM6_Init>
  MX_TIM2_Init();
 8001458:	f000 fabc 	bl	80019d4 <MX_TIM2_Init>
  MX_TIM5_Init();
 800145c:	f000 fb64 	bl	8001b28 <MX_TIM5_Init>
  MX_TIM7_Init();
 8001460:	f000 fbee 	bl	8001c40 <MX_TIM7_Init>
  MX_TIM3_Init();
 8001464:	f000 fb0a 	bl	8001a7c <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8001468:	f000 fd22 	bl	8001eb0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

	app_init();
 800146c:	f7ff fe50 	bl	8001110 <app_init>
  /* USER CODE BEGIN WHILE */
    while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		printf(".\n");
 8001470:	4803      	ldr	r0, [pc, #12]	@ (8001480 <main+0x44>)
 8001472:	f006 ff79 	bl	8008368 <puts>
        app_poll();
 8001476:	f7ff fe87 	bl	8001188 <app_poll>
		printf(".\n");
 800147a:	bf00      	nop
 800147c:	e7f8      	b.n	8001470 <main+0x34>
 800147e:	bf00      	nop
 8001480:	080090c0 	.word	0x080090c0

08001484 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b096      	sub	sp, #88	@ 0x58
 8001488:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800148a:	f107 0314 	add.w	r3, r7, #20
 800148e:	2244      	movs	r2, #68	@ 0x44
 8001490:	2100      	movs	r1, #0
 8001492:	4618      	mov	r0, r3
 8001494:	f007 f87e 	bl	8008594 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001498:	463b      	mov	r3, r7
 800149a:	2200      	movs	r2, #0
 800149c:	601a      	str	r2, [r3, #0]
 800149e:	605a      	str	r2, [r3, #4]
 80014a0:	609a      	str	r2, [r3, #8]
 80014a2:	60da      	str	r2, [r3, #12]
 80014a4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80014a6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80014aa:	f001 fd79 	bl	8002fa0 <HAL_PWREx_ControlVoltageScaling>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80014b4:	f000 f860 	bl	8001578 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80014b8:	2310      	movs	r3, #16
 80014ba:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80014bc:	2301      	movs	r3, #1
 80014be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80014c0:	2300      	movs	r3, #0
 80014c2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80014c4:	2360      	movs	r3, #96	@ 0x60
 80014c6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014c8:	2302      	movs	r3, #2
 80014ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80014cc:	2301      	movs	r3, #1
 80014ce:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80014d0:	2301      	movs	r3, #1
 80014d2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80014d4:	2328      	movs	r3, #40	@ 0x28
 80014d6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80014d8:	2307      	movs	r3, #7
 80014da:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80014dc:	2302      	movs	r3, #2
 80014de:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80014e0:	2302      	movs	r3, #2
 80014e2:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014e4:	f107 0314 	add.w	r3, r7, #20
 80014e8:	4618      	mov	r0, r3
 80014ea:	f001 fdbb 	bl	8003064 <HAL_RCC_OscConfig>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80014f4:	f000 f840 	bl	8001578 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014f8:	230f      	movs	r3, #15
 80014fa:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014fc:	2303      	movs	r3, #3
 80014fe:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001500:	2300      	movs	r3, #0
 8001502:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001504:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001508:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800150a:	2300      	movs	r3, #0
 800150c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800150e:	463b      	mov	r3, r7
 8001510:	2104      	movs	r1, #4
 8001512:	4618      	mov	r0, r3
 8001514:	f002 faa8 	bl	8003a68 <HAL_RCC_ClockConfig>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800151e:	f000 f82b 	bl	8001578 <Error_Handler>
  }
}
 8001522:	bf00      	nop
 8001524:	3758      	adds	r7, #88	@ 0x58
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
	...

0800152c <_write>:

/* USER CODE BEGIN 4 */

int _write(int fd, char *ptr, int len) {
 800152c:	b580      	push	{r7, lr}
 800152e:	b086      	sub	sp, #24
 8001530:	af00      	add	r7, sp, #0
 8001532:	60f8      	str	r0, [r7, #12]
 8001534:	60b9      	str	r1, [r7, #8]
 8001536:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef hstatus;
    if (fd == 1 || fd == 2) {
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	2b01      	cmp	r3, #1
 800153c:	d002      	beq.n	8001544 <_write+0x18>
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	2b02      	cmp	r3, #2
 8001542:	d111      	bne.n	8001568 <_write+0x3c>
      hstatus = HAL_UART_Transmit(&huart1, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	b29a      	uxth	r2, r3
 8001548:	f04f 33ff 	mov.w	r3, #4294967295
 800154c:	68b9      	ldr	r1, [r7, #8]
 800154e:	4809      	ldr	r0, [pc, #36]	@ (8001574 <_write+0x48>)
 8001550:	f005 fd46 	bl	8006fe0 <HAL_UART_Transmit>
 8001554:	4603      	mov	r3, r0
 8001556:	75fb      	strb	r3, [r7, #23]
      if (hstatus == HAL_OK)
 8001558:	7dfb      	ldrb	r3, [r7, #23]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d101      	bne.n	8001562 <_write+0x36>
        return len;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	e004      	b.n	800156c <_write+0x40>
      else
        return -1;
 8001562:	f04f 33ff 	mov.w	r3, #4294967295
 8001566:	e001      	b.n	800156c <_write+0x40>
    }
    return -1;
 8001568:	f04f 33ff 	mov.w	r3, #4294967295
}
 800156c:	4618      	mov	r0, r3
 800156e:	3718      	adds	r7, #24
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	20000904 	.word	0x20000904

08001578 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800157c:	b672      	cpsid	i
}
 800157e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001580:	bf00      	nop
 8001582:	e7fd      	b.n	8001580 <Error_Handler+0x8>

08001584 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
 800158c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
	 ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 800158e:	bf00      	nop
 8001590:	370c      	adds	r7, #12
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
	...

0800159c <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80015a0:	4b18      	ldr	r3, [pc, #96]	@ (8001604 <MX_SPI1_Init+0x68>)
 80015a2:	4a19      	ldr	r2, [pc, #100]	@ (8001608 <MX_SPI1_Init+0x6c>)
 80015a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 80015a6:	4b17      	ldr	r3, [pc, #92]	@ (8001604 <MX_SPI1_Init+0x68>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80015ac:	4b15      	ldr	r3, [pc, #84]	@ (8001604 <MX_SPI1_Init+0x68>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80015b2:	4b14      	ldr	r3, [pc, #80]	@ (8001604 <MX_SPI1_Init+0x68>)
 80015b4:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80015b8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80015ba:	4b12      	ldr	r3, [pc, #72]	@ (8001604 <MX_SPI1_Init+0x68>)
 80015bc:	2202      	movs	r2, #2
 80015be:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80015c0:	4b10      	ldr	r3, [pc, #64]	@ (8001604 <MX_SPI1_Init+0x68>)
 80015c2:	2201      	movs	r2, #1
 80015c4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 80015c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001604 <MX_SPI1_Init+0x68>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015cc:	4b0d      	ldr	r3, [pc, #52]	@ (8001604 <MX_SPI1_Init+0x68>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80015d2:	4b0c      	ldr	r3, [pc, #48]	@ (8001604 <MX_SPI1_Init+0x68>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015d8:	4b0a      	ldr	r3, [pc, #40]	@ (8001604 <MX_SPI1_Init+0x68>)
 80015da:	2200      	movs	r2, #0
 80015dc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80015de:	4b09      	ldr	r3, [pc, #36]	@ (8001604 <MX_SPI1_Init+0x68>)
 80015e0:	2207      	movs	r2, #7
 80015e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80015e4:	4b07      	ldr	r3, [pc, #28]	@ (8001604 <MX_SPI1_Init+0x68>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80015ea:	4b06      	ldr	r3, [pc, #24]	@ (8001604 <MX_SPI1_Init+0x68>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80015f0:	4804      	ldr	r0, [pc, #16]	@ (8001604 <MX_SPI1_Init+0x68>)
 80015f2:	f003 fc85 	bl	8004f00 <HAL_SPI_Init>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 80015fc:	f7ff ffbc 	bl	8001578 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001600:	bf00      	nop
 8001602:	bd80      	pop	{r7, pc}
 8001604:	20000690 	.word	0x20000690
 8001608:	40013000 	.word	0x40013000

0800160c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b08a      	sub	sp, #40	@ 0x28
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001614:	f107 0314 	add.w	r3, r7, #20
 8001618:	2200      	movs	r2, #0
 800161a:	601a      	str	r2, [r3, #0]
 800161c:	605a      	str	r2, [r3, #4]
 800161e:	609a      	str	r2, [r3, #8]
 8001620:	60da      	str	r2, [r3, #12]
 8001622:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a53      	ldr	r2, [pc, #332]	@ (8001778 <HAL_SPI_MspInit+0x16c>)
 800162a:	4293      	cmp	r3, r2
 800162c:	f040 80a0 	bne.w	8001770 <HAL_SPI_MspInit+0x164>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001630:	4b52      	ldr	r3, [pc, #328]	@ (800177c <HAL_SPI_MspInit+0x170>)
 8001632:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001634:	4a51      	ldr	r2, [pc, #324]	@ (800177c <HAL_SPI_MspInit+0x170>)
 8001636:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800163a:	6613      	str	r3, [r2, #96]	@ 0x60
 800163c:	4b4f      	ldr	r3, [pc, #316]	@ (800177c <HAL_SPI_MspInit+0x170>)
 800163e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001640:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001644:	613b      	str	r3, [r7, #16]
 8001646:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001648:	4b4c      	ldr	r3, [pc, #304]	@ (800177c <HAL_SPI_MspInit+0x170>)
 800164a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800164c:	4a4b      	ldr	r2, [pc, #300]	@ (800177c <HAL_SPI_MspInit+0x170>)
 800164e:	f043 0301 	orr.w	r3, r3, #1
 8001652:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001654:	4b49      	ldr	r3, [pc, #292]	@ (800177c <HAL_SPI_MspInit+0x170>)
 8001656:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001658:	f003 0301 	and.w	r3, r3, #1
 800165c:	60fb      	str	r3, [r7, #12]
 800165e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001660:	4b46      	ldr	r3, [pc, #280]	@ (800177c <HAL_SPI_MspInit+0x170>)
 8001662:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001664:	4a45      	ldr	r2, [pc, #276]	@ (800177c <HAL_SPI_MspInit+0x170>)
 8001666:	f043 0310 	orr.w	r3, r3, #16
 800166a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800166c:	4b43      	ldr	r3, [pc, #268]	@ (800177c <HAL_SPI_MspInit+0x170>)
 800166e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001670:	f003 0310 	and.w	r3, r3, #16
 8001674:	60bb      	str	r3, [r7, #8]
 8001676:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PE13     ------> SPI1_SCK
    PE14     ------> SPI1_MISO
    PE15     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001678:	2310      	movs	r3, #16
 800167a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800167c:	2302      	movs	r3, #2
 800167e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001680:	2300      	movs	r3, #0
 8001682:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001684:	2303      	movs	r3, #3
 8001686:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001688:	2305      	movs	r3, #5
 800168a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800168c:	f107 0314 	add.w	r3, r7, #20
 8001690:	4619      	mov	r1, r3
 8001692:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001696:	f001 f9bd 	bl	8002a14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800169a:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800169e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a0:	2302      	movs	r3, #2
 80016a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a4:	2300      	movs	r3, #0
 80016a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016a8:	2303      	movs	r3, #3
 80016aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80016ac:	2305      	movs	r3, #5
 80016ae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016b0:	f107 0314 	add.w	r3, r7, #20
 80016b4:	4619      	mov	r1, r3
 80016b6:	4832      	ldr	r0, [pc, #200]	@ (8001780 <HAL_SPI_MspInit+0x174>)
 80016b8:	f001 f9ac 	bl	8002a14 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 80016bc:	4b31      	ldr	r3, [pc, #196]	@ (8001784 <HAL_SPI_MspInit+0x178>)
 80016be:	4a32      	ldr	r2, [pc, #200]	@ (8001788 <HAL_SPI_MspInit+0x17c>)
 80016c0:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_1;
 80016c2:	4b30      	ldr	r3, [pc, #192]	@ (8001784 <HAL_SPI_MspInit+0x178>)
 80016c4:	2201      	movs	r2, #1
 80016c6:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016c8:	4b2e      	ldr	r3, [pc, #184]	@ (8001784 <HAL_SPI_MspInit+0x178>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016ce:	4b2d      	ldr	r3, [pc, #180]	@ (8001784 <HAL_SPI_MspInit+0x178>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80016d4:	4b2b      	ldr	r3, [pc, #172]	@ (8001784 <HAL_SPI_MspInit+0x178>)
 80016d6:	2280      	movs	r2, #128	@ 0x80
 80016d8:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016da:	4b2a      	ldr	r3, [pc, #168]	@ (8001784 <HAL_SPI_MspInit+0x178>)
 80016dc:	2200      	movs	r2, #0
 80016de:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016e0:	4b28      	ldr	r3, [pc, #160]	@ (8001784 <HAL_SPI_MspInit+0x178>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 80016e6:	4b27      	ldr	r3, [pc, #156]	@ (8001784 <HAL_SPI_MspInit+0x178>)
 80016e8:	2220      	movs	r2, #32
 80016ea:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80016ec:	4b25      	ldr	r3, [pc, #148]	@ (8001784 <HAL_SPI_MspInit+0x178>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80016f2:	4824      	ldr	r0, [pc, #144]	@ (8001784 <HAL_SPI_MspInit+0x178>)
 80016f4:	f000 fe48 	bl	8002388 <HAL_DMA_Init>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <HAL_SPI_MspInit+0xf6>
    {
      Error_Handler();
 80016fe:	f7ff ff3b 	bl	8001578 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4a1f      	ldr	r2, [pc, #124]	@ (8001784 <HAL_SPI_MspInit+0x178>)
 8001706:	659a      	str	r2, [r3, #88]	@ 0x58
 8001708:	4a1e      	ldr	r2, [pc, #120]	@ (8001784 <HAL_SPI_MspInit+0x178>)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 800170e:	4b1f      	ldr	r3, [pc, #124]	@ (800178c <HAL_SPI_MspInit+0x180>)
 8001710:	4a1f      	ldr	r2, [pc, #124]	@ (8001790 <HAL_SPI_MspInit+0x184>)
 8001712:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 8001714:	4b1d      	ldr	r3, [pc, #116]	@ (800178c <HAL_SPI_MspInit+0x180>)
 8001716:	2201      	movs	r2, #1
 8001718:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800171a:	4b1c      	ldr	r3, [pc, #112]	@ (800178c <HAL_SPI_MspInit+0x180>)
 800171c:	2210      	movs	r2, #16
 800171e:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001720:	4b1a      	ldr	r3, [pc, #104]	@ (800178c <HAL_SPI_MspInit+0x180>)
 8001722:	2200      	movs	r2, #0
 8001724:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001726:	4b19      	ldr	r3, [pc, #100]	@ (800178c <HAL_SPI_MspInit+0x180>)
 8001728:	2280      	movs	r2, #128	@ 0x80
 800172a:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800172c:	4b17      	ldr	r3, [pc, #92]	@ (800178c <HAL_SPI_MspInit+0x180>)
 800172e:	2200      	movs	r2, #0
 8001730:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001732:	4b16      	ldr	r3, [pc, #88]	@ (800178c <HAL_SPI_MspInit+0x180>)
 8001734:	2200      	movs	r2, #0
 8001736:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 8001738:	4b14      	ldr	r3, [pc, #80]	@ (800178c <HAL_SPI_MspInit+0x180>)
 800173a:	2220      	movs	r2, #32
 800173c:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800173e:	4b13      	ldr	r3, [pc, #76]	@ (800178c <HAL_SPI_MspInit+0x180>)
 8001740:	2200      	movs	r2, #0
 8001742:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001744:	4811      	ldr	r0, [pc, #68]	@ (800178c <HAL_SPI_MspInit+0x180>)
 8001746:	f000 fe1f 	bl	8002388 <HAL_DMA_Init>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d001      	beq.n	8001754 <HAL_SPI_MspInit+0x148>
    {
      Error_Handler();
 8001750:	f7ff ff12 	bl	8001578 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	4a0d      	ldr	r2, [pc, #52]	@ (800178c <HAL_SPI_MspInit+0x180>)
 8001758:	655a      	str	r2, [r3, #84]	@ 0x54
 800175a:	4a0c      	ldr	r2, [pc, #48]	@ (800178c <HAL_SPI_MspInit+0x180>)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001760:	2200      	movs	r2, #0
 8001762:	2100      	movs	r1, #0
 8001764:	2023      	movs	r0, #35	@ 0x23
 8001766:	f000 fdbf 	bl	80022e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800176a:	2023      	movs	r0, #35	@ 0x23
 800176c:	f000 fde8 	bl	8002340 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001770:	bf00      	nop
 8001772:	3728      	adds	r7, #40	@ 0x28
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	40013000 	.word	0x40013000
 800177c:	40021000 	.word	0x40021000
 8001780:	48001000 	.word	0x48001000
 8001784:	200006f4 	.word	0x200006f4
 8001788:	4002001c 	.word	0x4002001c
 800178c:	2000073c 	.word	0x2000073c
 8001790:	40020030 	.word	0x40020030

08001794 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800179a:	4b0f      	ldr	r3, [pc, #60]	@ (80017d8 <HAL_MspInit+0x44>)
 800179c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800179e:	4a0e      	ldr	r2, [pc, #56]	@ (80017d8 <HAL_MspInit+0x44>)
 80017a0:	f043 0301 	orr.w	r3, r3, #1
 80017a4:	6613      	str	r3, [r2, #96]	@ 0x60
 80017a6:	4b0c      	ldr	r3, [pc, #48]	@ (80017d8 <HAL_MspInit+0x44>)
 80017a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017aa:	f003 0301 	and.w	r3, r3, #1
 80017ae:	607b      	str	r3, [r7, #4]
 80017b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017b2:	4b09      	ldr	r3, [pc, #36]	@ (80017d8 <HAL_MspInit+0x44>)
 80017b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017b6:	4a08      	ldr	r2, [pc, #32]	@ (80017d8 <HAL_MspInit+0x44>)
 80017b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80017be:	4b06      	ldr	r3, [pc, #24]	@ (80017d8 <HAL_MspInit+0x44>)
 80017c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017c6:	603b      	str	r3, [r7, #0]
 80017c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017ca:	bf00      	nop
 80017cc:	370c      	adds	r7, #12
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	40021000 	.word	0x40021000

080017dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 80017e0:	bf00      	nop
 80017e2:	e7fd      	b.n	80017e0 <NMI_Handler+0x4>

080017e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017e8:	bf00      	nop
 80017ea:	e7fd      	b.n	80017e8 <HardFault_Handler+0x4>

080017ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017f0:	bf00      	nop
 80017f2:	e7fd      	b.n	80017f0 <MemManage_Handler+0x4>

080017f4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017f8:	bf00      	nop
 80017fa:	e7fd      	b.n	80017f8 <BusFault_Handler+0x4>

080017fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001800:	bf00      	nop
 8001802:	e7fd      	b.n	8001800 <UsageFault_Handler+0x4>

08001804 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001808:	bf00      	nop
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr

08001812 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001812:	b480      	push	{r7}
 8001814:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001816:	bf00      	nop
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr

08001820 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001824:	bf00      	nop
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr

0800182e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800182e:	b580      	push	{r7, lr}
 8001830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001832:	f000 fc49 	bl	80020c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001836:	bf00      	nop
 8001838:	bd80      	pop	{r7, pc}
	...

0800183c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001840:	4802      	ldr	r0, [pc, #8]	@ (800184c <DMA1_Channel2_IRQHandler+0x10>)
 8001842:	f001 f808 	bl	8002856 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001846:	bf00      	nop
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	200006f4 	.word	0x200006f4

08001850 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001854:	4802      	ldr	r0, [pc, #8]	@ (8001860 <DMA1_Channel3_IRQHandler+0x10>)
 8001856:	f000 fffe 	bl	8002856 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800185a:	bf00      	nop
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	2000073c 	.word	0x2000073c

08001864 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001868:	4802      	ldr	r0, [pc, #8]	@ (8001874 <SPI1_IRQHandler+0x10>)
 800186a:	f004 f8a5 	bl	80059b8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800186e:	bf00      	nop
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	20000690 	.word	0x20000690

08001878 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800187c:	4802      	ldr	r0, [pc, #8]	@ (8001888 <TIM6_DAC_IRQHandler+0x10>)
 800187e:	f004 ffb3 	bl	80067e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001882:	bf00      	nop
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	2000086c 	.word	0x2000086c

0800188c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001890:	4802      	ldr	r0, [pc, #8]	@ (800189c <TIM7_IRQHandler+0x10>)
 8001892:	f004 ffa9 	bl	80067e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001896:	bf00      	nop
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	200008b8 	.word	0x200008b8

080018a0 <_read>:
	_kill(status, -1);
	while (1) {
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b086      	sub	sp, #24
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	60f8      	str	r0, [r7, #12]
 80018a8:	60b9      	str	r1, [r7, #8]
 80018aa:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80018ac:	2300      	movs	r3, #0
 80018ae:	617b      	str	r3, [r7, #20]
 80018b0:	e00a      	b.n	80018c8 <_read+0x28>
		*ptr++ = __io_getchar();
 80018b2:	f3af 8000 	nop.w
 80018b6:	4601      	mov	r1, r0
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	1c5a      	adds	r2, r3, #1
 80018bc:	60ba      	str	r2, [r7, #8]
 80018be:	b2ca      	uxtb	r2, r1
 80018c0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	3301      	adds	r3, #1
 80018c6:	617b      	str	r3, [r7, #20]
 80018c8:	697a      	ldr	r2, [r7, #20]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	dbf0      	blt.n	80018b2 <_read+0x12>
	}

	return len;
 80018d0:	687b      	ldr	r3, [r7, #4]
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3718      	adds	r7, #24
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}

080018da <_close>:
		__io_putchar(*ptr++);
	}
	return len;
}

int _close(int file) {
 80018da:	b480      	push	{r7}
 80018dc:	b083      	sub	sp, #12
 80018de:	af00      	add	r7, sp, #0
 80018e0:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 80018e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	370c      	adds	r7, #12
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr

080018f2 <_fstat>:

int _fstat(int file, struct stat *st) {
 80018f2:	b480      	push	{r7}
 80018f4:	b083      	sub	sp, #12
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	6078      	str	r0, [r7, #4]
 80018fa:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001902:	605a      	str	r2, [r3, #4]
	return 0;
 8001904:	2300      	movs	r3, #0
}
 8001906:	4618      	mov	r0, r3
 8001908:	370c      	adds	r7, #12
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr

08001912 <_isatty>:

int _isatty(int file) {
 8001912:	b480      	push	{r7}
 8001914:	b083      	sub	sp, #12
 8001916:	af00      	add	r7, sp, #0
 8001918:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 800191a:	2301      	movs	r3, #1
}
 800191c:	4618      	mov	r0, r3
 800191e:	370c      	adds	r7, #12
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr

08001928 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8001928:	b480      	push	{r7}
 800192a:	b085      	sub	sp, #20
 800192c:	af00      	add	r7, sp, #0
 800192e:	60f8      	str	r0, [r7, #12]
 8001930:	60b9      	str	r1, [r7, #8]
 8001932:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 8001934:	2300      	movs	r3, #0
}
 8001936:	4618      	mov	r0, r3
 8001938:	3714      	adds	r7, #20
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
	...

08001944 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8001944:	b580      	push	{r7, lr}
 8001946:	b086      	sub	sp, #24
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 800194c:	4a14      	ldr	r2, [pc, #80]	@ (80019a0 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 800194e:	4b15      	ldr	r3, [pc, #84]	@ (80019a4 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8001958:	4b13      	ldr	r3, [pc, #76]	@ (80019a8 <_sbrk+0x64>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d102      	bne.n	8001966 <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 8001960:	4b11      	ldr	r3, [pc, #68]	@ (80019a8 <_sbrk+0x64>)
 8001962:	4a12      	ldr	r2, [pc, #72]	@ (80019ac <_sbrk+0x68>)
 8001964:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 8001966:	4b10      	ldr	r3, [pc, #64]	@ (80019a8 <_sbrk+0x64>)
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4413      	add	r3, r2
 800196e:	693a      	ldr	r2, [r7, #16]
 8001970:	429a      	cmp	r2, r3
 8001972:	d207      	bcs.n	8001984 <_sbrk+0x40>
		errno = ENOMEM;
 8001974:	f006 fe6c 	bl	8008650 <__errno>
 8001978:	4603      	mov	r3, r0
 800197a:	220c      	movs	r2, #12
 800197c:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 800197e:	f04f 33ff 	mov.w	r3, #4294967295
 8001982:	e009      	b.n	8001998 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8001984:	4b08      	ldr	r3, [pc, #32]	@ (80019a8 <_sbrk+0x64>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 800198a:	4b07      	ldr	r3, [pc, #28]	@ (80019a8 <_sbrk+0x64>)
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4413      	add	r3, r2
 8001992:	4a05      	ldr	r2, [pc, #20]	@ (80019a8 <_sbrk+0x64>)
 8001994:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 8001996:	68fb      	ldr	r3, [r7, #12]
}
 8001998:	4618      	mov	r0, r3
 800199a:	3718      	adds	r7, #24
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	20018000 	.word	0x20018000
 80019a4:	00000400 	.word	0x00000400
 80019a8:	20000784 	.word	0x20000784
 80019ac:	20000ae0 	.word	0x20000ae0

080019b0 <SystemInit>:
/**
 * @brief  Setup the microcontroller system.
 * @retval None
 */

void SystemInit(void) {
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 20U) | (3UL << 22U)); /* set CP10 and CP11 Full Access */
 80019b4:	4b06      	ldr	r3, [pc, #24]	@ (80019d0 <SystemInit+0x20>)
 80019b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019ba:	4a05      	ldr	r2, [pc, #20]	@ (80019d0 <SystemInit+0x20>)
 80019bc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80019c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80019c4:	bf00      	nop
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	e000ed00 	.word	0xe000ed00

080019d4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b08c      	sub	sp, #48	@ 0x30
 80019d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80019da:	f107 030c 	add.w	r3, r7, #12
 80019de:	2224      	movs	r2, #36	@ 0x24
 80019e0:	2100      	movs	r1, #0
 80019e2:	4618      	mov	r0, r3
 80019e4:	f006 fdd6 	bl	8008594 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019e8:	463b      	mov	r3, r7
 80019ea:	2200      	movs	r2, #0
 80019ec:	601a      	str	r2, [r3, #0]
 80019ee:	605a      	str	r2, [r3, #4]
 80019f0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80019f2:	4b21      	ldr	r3, [pc, #132]	@ (8001a78 <MX_TIM2_Init+0xa4>)
 80019f4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80019f8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80019fa:	4b1f      	ldr	r3, [pc, #124]	@ (8001a78 <MX_TIM2_Init+0xa4>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a00:	4b1d      	ldr	r3, [pc, #116]	@ (8001a78 <MX_TIM2_Init+0xa4>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001a06:	4b1c      	ldr	r3, [pc, #112]	@ (8001a78 <MX_TIM2_Init+0xa4>)
 8001a08:	f04f 32ff 	mov.w	r2, #4294967295
 8001a0c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a0e:	4b1a      	ldr	r3, [pc, #104]	@ (8001a78 <MX_TIM2_Init+0xa4>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a14:	4b18      	ldr	r3, [pc, #96]	@ (8001a78 <MX_TIM2_Init+0xa4>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a22:	2301      	movs	r3, #1
 8001a24:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001a26:	2300      	movs	r3, #0
 8001a28:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a32:	2301      	movs	r3, #1
 8001a34:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001a36:	2300      	movs	r3, #0
 8001a38:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001a3e:	f107 030c 	add.w	r3, r7, #12
 8001a42:	4619      	mov	r1, r3
 8001a44:	480c      	ldr	r0, [pc, #48]	@ (8001a78 <MX_TIM2_Init+0xa4>)
 8001a46:	f004 fd0d 	bl	8006464 <HAL_TIM_Encoder_Init>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001a50:	f7ff fd92 	bl	8001578 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a54:	2300      	movs	r3, #0
 8001a56:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a5c:	463b      	mov	r3, r7
 8001a5e:	4619      	mov	r1, r3
 8001a60:	4805      	ldr	r0, [pc, #20]	@ (8001a78 <MX_TIM2_Init+0xa4>)
 8001a62:	f005 f8a1 	bl	8006ba8 <HAL_TIMEx_MasterConfigSynchronization>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d001      	beq.n	8001a70 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001a6c:	f7ff fd84 	bl	8001578 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001a70:	bf00      	nop
 8001a72:	3730      	adds	r7, #48	@ 0x30
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	20000788 	.word	0x20000788

08001a7c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b08c      	sub	sp, #48	@ 0x30
 8001a80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001a82:	f107 030c 	add.w	r3, r7, #12
 8001a86:	2224      	movs	r2, #36	@ 0x24
 8001a88:	2100      	movs	r1, #0
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f006 fd82 	bl	8008594 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a90:	463b      	mov	r3, r7
 8001a92:	2200      	movs	r2, #0
 8001a94:	601a      	str	r2, [r3, #0]
 8001a96:	605a      	str	r2, [r3, #4]
 8001a98:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a9a:	4b21      	ldr	r3, [pc, #132]	@ (8001b20 <MX_TIM3_Init+0xa4>)
 8001a9c:	4a21      	ldr	r2, [pc, #132]	@ (8001b24 <MX_TIM3_Init+0xa8>)
 8001a9e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001aa0:	4b1f      	ldr	r3, [pc, #124]	@ (8001b20 <MX_TIM3_Init+0xa4>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aa6:	4b1e      	ldr	r3, [pc, #120]	@ (8001b20 <MX_TIM3_Init+0xa4>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001aac:	4b1c      	ldr	r3, [pc, #112]	@ (8001b20 <MX_TIM3_Init+0xa4>)
 8001aae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001ab2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ab4:	4b1a      	ldr	r3, [pc, #104]	@ (8001b20 <MX_TIM3_Init+0xa4>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aba:	4b19      	ldr	r3, [pc, #100]	@ (8001b20 <MX_TIM3_Init+0xa4>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001acc:	2300      	movs	r3, #0
 8001ace:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001adc:	2300      	movs	r3, #0
 8001ade:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001ae4:	f107 030c 	add.w	r3, r7, #12
 8001ae8:	4619      	mov	r1, r3
 8001aea:	480d      	ldr	r0, [pc, #52]	@ (8001b20 <MX_TIM3_Init+0xa4>)
 8001aec:	f004 fcba 	bl	8006464 <HAL_TIM_Encoder_Init>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d001      	beq.n	8001afa <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001af6:	f7ff fd3f 	bl	8001578 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001afa:	2300      	movs	r3, #0
 8001afc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001afe:	2300      	movs	r3, #0
 8001b00:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b02:	463b      	mov	r3, r7
 8001b04:	4619      	mov	r1, r3
 8001b06:	4806      	ldr	r0, [pc, #24]	@ (8001b20 <MX_TIM3_Init+0xa4>)
 8001b08:	f005 f84e 	bl	8006ba8 <HAL_TIMEx_MasterConfigSynchronization>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d001      	beq.n	8001b16 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001b12:	f7ff fd31 	bl	8001578 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001b16:	bf00      	nop
 8001b18:	3730      	adds	r7, #48	@ 0x30
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	200007d4 	.word	0x200007d4
 8001b24:	40000400 	.word	0x40000400

08001b28 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b08c      	sub	sp, #48	@ 0x30
 8001b2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001b2e:	f107 030c 	add.w	r3, r7, #12
 8001b32:	2224      	movs	r2, #36	@ 0x24
 8001b34:	2100      	movs	r1, #0
 8001b36:	4618      	mov	r0, r3
 8001b38:	f006 fd2c 	bl	8008594 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b3c:	463b      	mov	r3, r7
 8001b3e:	2200      	movs	r2, #0
 8001b40:	601a      	str	r2, [r3, #0]
 8001b42:	605a      	str	r2, [r3, #4]
 8001b44:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001b46:	4b21      	ldr	r3, [pc, #132]	@ (8001bcc <MX_TIM5_Init+0xa4>)
 8001b48:	4a21      	ldr	r2, [pc, #132]	@ (8001bd0 <MX_TIM5_Init+0xa8>)
 8001b4a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001b4c:	4b1f      	ldr	r3, [pc, #124]	@ (8001bcc <MX_TIM5_Init+0xa4>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b52:	4b1e      	ldr	r3, [pc, #120]	@ (8001bcc <MX_TIM5_Init+0xa4>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001b58:	4b1c      	ldr	r3, [pc, #112]	@ (8001bcc <MX_TIM5_Init+0xa4>)
 8001b5a:	f04f 32ff 	mov.w	r2, #4294967295
 8001b5e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b60:	4b1a      	ldr	r3, [pc, #104]	@ (8001bcc <MX_TIM5_Init+0xa4>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b66:	4b19      	ldr	r3, [pc, #100]	@ (8001bcc <MX_TIM5_Init+0xa4>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001b70:	2300      	movs	r3, #0
 8001b72:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001b74:	2301      	movs	r3, #1
 8001b76:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001b80:	2300      	movs	r3, #0
 8001b82:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001b84:	2301      	movs	r3, #1
 8001b86:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001b90:	f107 030c 	add.w	r3, r7, #12
 8001b94:	4619      	mov	r1, r3
 8001b96:	480d      	ldr	r0, [pc, #52]	@ (8001bcc <MX_TIM5_Init+0xa4>)
 8001b98:	f004 fc64 	bl	8006464 <HAL_TIM_Encoder_Init>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d001      	beq.n	8001ba6 <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8001ba2:	f7ff fce9 	bl	8001578 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001baa:	2300      	movs	r3, #0
 8001bac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001bae:	463b      	mov	r3, r7
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	4806      	ldr	r0, [pc, #24]	@ (8001bcc <MX_TIM5_Init+0xa4>)
 8001bb4:	f004 fff8 	bl	8006ba8 <HAL_TIMEx_MasterConfigSynchronization>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8001bbe:	f7ff fcdb 	bl	8001578 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001bc2:	bf00      	nop
 8001bc4:	3730      	adds	r7, #48	@ 0x30
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	20000820 	.word	0x20000820
 8001bd0:	40000c00 	.word	0x40000c00

08001bd4 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b084      	sub	sp, #16
 8001bd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bda:	1d3b      	adds	r3, r7, #4
 8001bdc:	2200      	movs	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]
 8001be0:	605a      	str	r2, [r3, #4]
 8001be2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001be4:	4b14      	ldr	r3, [pc, #80]	@ (8001c38 <MX_TIM6_Init+0x64>)
 8001be6:	4a15      	ldr	r2, [pc, #84]	@ (8001c3c <MX_TIM6_Init+0x68>)
 8001be8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 79;
 8001bea:	4b13      	ldr	r3, [pc, #76]	@ (8001c38 <MX_TIM6_Init+0x64>)
 8001bec:	224f      	movs	r2, #79	@ 0x4f
 8001bee:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bf0:	4b11      	ldr	r3, [pc, #68]	@ (8001c38 <MX_TIM6_Init+0x64>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 19;
 8001bf6:	4b10      	ldr	r3, [pc, #64]	@ (8001c38 <MX_TIM6_Init+0x64>)
 8001bf8:	2213      	movs	r2, #19
 8001bfa:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001bfc:	4b0e      	ldr	r3, [pc, #56]	@ (8001c38 <MX_TIM6_Init+0x64>)
 8001bfe:	2280      	movs	r2, #128	@ 0x80
 8001c00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001c02:	480d      	ldr	r0, [pc, #52]	@ (8001c38 <MX_TIM6_Init+0x64>)
 8001c04:	f004 fb24 	bl	8006250 <HAL_TIM_Base_Init>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001c0e:	f7ff fcb3 	bl	8001578 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001c12:	2320      	movs	r3, #32
 8001c14:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c16:	2300      	movs	r3, #0
 8001c18:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001c1a:	1d3b      	adds	r3, r7, #4
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	4806      	ldr	r0, [pc, #24]	@ (8001c38 <MX_TIM6_Init+0x64>)
 8001c20:	f004 ffc2 	bl	8006ba8 <HAL_TIMEx_MasterConfigSynchronization>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001c2a:	f7ff fca5 	bl	8001578 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001c2e:	bf00      	nop
 8001c30:	3710      	adds	r7, #16
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	2000086c 	.word	0x2000086c
 8001c3c:	40001000 	.word	0x40001000

08001c40 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c46:	1d3b      	adds	r3, r7, #4
 8001c48:	2200      	movs	r2, #0
 8001c4a:	601a      	str	r2, [r3, #0]
 8001c4c:	605a      	str	r2, [r3, #4]
 8001c4e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001c50:	4b14      	ldr	r3, [pc, #80]	@ (8001ca4 <MX_TIM7_Init+0x64>)
 8001c52:	4a15      	ldr	r2, [pc, #84]	@ (8001ca8 <MX_TIM7_Init+0x68>)
 8001c54:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 7999;
 8001c56:	4b13      	ldr	r3, [pc, #76]	@ (8001ca4 <MX_TIM7_Init+0x64>)
 8001c58:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8001c5c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c5e:	4b11      	ldr	r3, [pc, #68]	@ (8001ca4 <MX_TIM7_Init+0x64>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9;
 8001c64:	4b0f      	ldr	r3, [pc, #60]	@ (8001ca4 <MX_TIM7_Init+0x64>)
 8001c66:	2209      	movs	r2, #9
 8001c68:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001c6a:	4b0e      	ldr	r3, [pc, #56]	@ (8001ca4 <MX_TIM7_Init+0x64>)
 8001c6c:	2280      	movs	r2, #128	@ 0x80
 8001c6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001c70:	480c      	ldr	r0, [pc, #48]	@ (8001ca4 <MX_TIM7_Init+0x64>)
 8001c72:	f004 faed 	bl	8006250 <HAL_TIM_Base_Init>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d001      	beq.n	8001c80 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001c7c:	f7ff fc7c 	bl	8001578 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c80:	2300      	movs	r3, #0
 8001c82:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c84:	2300      	movs	r3, #0
 8001c86:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001c88:	1d3b      	adds	r3, r7, #4
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	4805      	ldr	r0, [pc, #20]	@ (8001ca4 <MX_TIM7_Init+0x64>)
 8001c8e:	f004 ff8b 	bl	8006ba8 <HAL_TIMEx_MasterConfigSynchronization>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d001      	beq.n	8001c9c <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001c98:	f7ff fc6e 	bl	8001578 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001c9c:	bf00      	nop
 8001c9e:	3710      	adds	r7, #16
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	200008b8 	.word	0x200008b8
 8001ca8:	40001400 	.word	0x40001400

08001cac <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b08e      	sub	sp, #56	@ 0x38
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cb8:	2200      	movs	r2, #0
 8001cba:	601a      	str	r2, [r3, #0]
 8001cbc:	605a      	str	r2, [r3, #4]
 8001cbe:	609a      	str	r2, [r3, #8]
 8001cc0:	60da      	str	r2, [r3, #12]
 8001cc2:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ccc:	d145      	bne.n	8001d5a <HAL_TIM_Encoder_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001cce:	4b53      	ldr	r3, [pc, #332]	@ (8001e1c <HAL_TIM_Encoder_MspInit+0x170>)
 8001cd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cd2:	4a52      	ldr	r2, [pc, #328]	@ (8001e1c <HAL_TIM_Encoder_MspInit+0x170>)
 8001cd4:	f043 0301 	orr.w	r3, r3, #1
 8001cd8:	6593      	str	r3, [r2, #88]	@ 0x58
 8001cda:	4b50      	ldr	r3, [pc, #320]	@ (8001e1c <HAL_TIM_Encoder_MspInit+0x170>)
 8001cdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cde:	f003 0301 	and.w	r3, r3, #1
 8001ce2:	623b      	str	r3, [r7, #32]
 8001ce4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ce6:	4b4d      	ldr	r3, [pc, #308]	@ (8001e1c <HAL_TIM_Encoder_MspInit+0x170>)
 8001ce8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cea:	4a4c      	ldr	r2, [pc, #304]	@ (8001e1c <HAL_TIM_Encoder_MspInit+0x170>)
 8001cec:	f043 0301 	orr.w	r3, r3, #1
 8001cf0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cf2:	4b4a      	ldr	r3, [pc, #296]	@ (8001e1c <HAL_TIM_Encoder_MspInit+0x170>)
 8001cf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cf6:	f003 0301 	and.w	r3, r3, #1
 8001cfa:	61fb      	str	r3, [r7, #28]
 8001cfc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cfe:	4b47      	ldr	r3, [pc, #284]	@ (8001e1c <HAL_TIM_Encoder_MspInit+0x170>)
 8001d00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d02:	4a46      	ldr	r2, [pc, #280]	@ (8001e1c <HAL_TIM_Encoder_MspInit+0x170>)
 8001d04:	f043 0302 	orr.w	r3, r3, #2
 8001d08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d0a:	4b44      	ldr	r3, [pc, #272]	@ (8001e1c <HAL_TIM_Encoder_MspInit+0x170>)
 8001d0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d0e:	f003 0302 	and.w	r3, r3, #2
 8001d12:	61bb      	str	r3, [r7, #24]
 8001d14:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB3 (JTDO-TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001d16:	2320      	movs	r3, #32
 8001d18:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d22:	2300      	movs	r3, #0
 8001d24:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d26:	2301      	movs	r3, #1
 8001d28:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d2e:	4619      	mov	r1, r3
 8001d30:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d34:	f000 fe6e 	bl	8002a14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001d38:	2308      	movs	r3, #8
 8001d3a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d3c:	2302      	movs	r3, #2
 8001d3e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d40:	2300      	movs	r3, #0
 8001d42:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d44:	2300      	movs	r3, #0
 8001d46:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d4c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d50:	4619      	mov	r1, r3
 8001d52:	4833      	ldr	r0, [pc, #204]	@ (8001e20 <HAL_TIM_Encoder_MspInit+0x174>)
 8001d54:	f000 fe5e 	bl	8002a14 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8001d58:	e05c      	b.n	8001e14 <HAL_TIM_Encoder_MspInit+0x168>
  else if(tim_encoderHandle->Instance==TIM3)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a31      	ldr	r2, [pc, #196]	@ (8001e24 <HAL_TIM_Encoder_MspInit+0x178>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d129      	bne.n	8001db8 <HAL_TIM_Encoder_MspInit+0x10c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d64:	4b2d      	ldr	r3, [pc, #180]	@ (8001e1c <HAL_TIM_Encoder_MspInit+0x170>)
 8001d66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d68:	4a2c      	ldr	r2, [pc, #176]	@ (8001e1c <HAL_TIM_Encoder_MspInit+0x170>)
 8001d6a:	f043 0302 	orr.w	r3, r3, #2
 8001d6e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d70:	4b2a      	ldr	r3, [pc, #168]	@ (8001e1c <HAL_TIM_Encoder_MspInit+0x170>)
 8001d72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d74:	f003 0302 	and.w	r3, r3, #2
 8001d78:	617b      	str	r3, [r7, #20]
 8001d7a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d7c:	4b27      	ldr	r3, [pc, #156]	@ (8001e1c <HAL_TIM_Encoder_MspInit+0x170>)
 8001d7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d80:	4a26      	ldr	r2, [pc, #152]	@ (8001e1c <HAL_TIM_Encoder_MspInit+0x170>)
 8001d82:	f043 0301 	orr.w	r3, r3, #1
 8001d86:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d88:	4b24      	ldr	r3, [pc, #144]	@ (8001e1c <HAL_TIM_Encoder_MspInit+0x170>)
 8001d8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d8c:	f003 0301 	and.w	r3, r3, #1
 8001d90:	613b      	str	r3, [r7, #16]
 8001d92:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d94:	23c0      	movs	r3, #192	@ 0xc0
 8001d96:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d98:	2302      	movs	r3, #2
 8001d9a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da0:	2300      	movs	r3, #0
 8001da2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001da4:	2302      	movs	r3, #2
 8001da6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001da8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001dac:	4619      	mov	r1, r3
 8001dae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001db2:	f000 fe2f 	bl	8002a14 <HAL_GPIO_Init>
}
 8001db6:	e02d      	b.n	8001e14 <HAL_TIM_Encoder_MspInit+0x168>
  else if(tim_encoderHandle->Instance==TIM5)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a1a      	ldr	r2, [pc, #104]	@ (8001e28 <HAL_TIM_Encoder_MspInit+0x17c>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d128      	bne.n	8001e14 <HAL_TIM_Encoder_MspInit+0x168>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001dc2:	4b16      	ldr	r3, [pc, #88]	@ (8001e1c <HAL_TIM_Encoder_MspInit+0x170>)
 8001dc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dc6:	4a15      	ldr	r2, [pc, #84]	@ (8001e1c <HAL_TIM_Encoder_MspInit+0x170>)
 8001dc8:	f043 0308 	orr.w	r3, r3, #8
 8001dcc:	6593      	str	r3, [r2, #88]	@ 0x58
 8001dce:	4b13      	ldr	r3, [pc, #76]	@ (8001e1c <HAL_TIM_Encoder_MspInit+0x170>)
 8001dd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dd2:	f003 0308 	and.w	r3, r3, #8
 8001dd6:	60fb      	str	r3, [r7, #12]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dda:	4b10      	ldr	r3, [pc, #64]	@ (8001e1c <HAL_TIM_Encoder_MspInit+0x170>)
 8001ddc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dde:	4a0f      	ldr	r2, [pc, #60]	@ (8001e1c <HAL_TIM_Encoder_MspInit+0x170>)
 8001de0:	f043 0301 	orr.w	r3, r3, #1
 8001de4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001de6:	4b0d      	ldr	r3, [pc, #52]	@ (8001e1c <HAL_TIM_Encoder_MspInit+0x170>)
 8001de8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dea:	f003 0301 	and.w	r3, r3, #1
 8001dee:	60bb      	str	r3, [r7, #8]
 8001df0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001df2:	2303      	movs	r3, #3
 8001df4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df6:	2302      	movs	r3, #2
 8001df8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001e02:	2302      	movs	r3, #2
 8001e04:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e10:	f000 fe00 	bl	8002a14 <HAL_GPIO_Init>
}
 8001e14:	bf00      	nop
 8001e16:	3738      	adds	r7, #56	@ 0x38
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	40021000 	.word	0x40021000
 8001e20:	48000400 	.word	0x48000400
 8001e24:	40000400 	.word	0x40000400
 8001e28:	40000c00 	.word	0x40000c00

08001e2c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b084      	sub	sp, #16
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a1a      	ldr	r2, [pc, #104]	@ (8001ea4 <HAL_TIM_Base_MspInit+0x78>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d114      	bne.n	8001e68 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001e3e:	4b1a      	ldr	r3, [pc, #104]	@ (8001ea8 <HAL_TIM_Base_MspInit+0x7c>)
 8001e40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e42:	4a19      	ldr	r2, [pc, #100]	@ (8001ea8 <HAL_TIM_Base_MspInit+0x7c>)
 8001e44:	f043 0310 	orr.w	r3, r3, #16
 8001e48:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e4a:	4b17      	ldr	r3, [pc, #92]	@ (8001ea8 <HAL_TIM_Base_MspInit+0x7c>)
 8001e4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e4e:	f003 0310 	and.w	r3, r3, #16
 8001e52:	60fb      	str	r3, [r7, #12]
 8001e54:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001e56:	2200      	movs	r2, #0
 8001e58:	2100      	movs	r1, #0
 8001e5a:	2036      	movs	r0, #54	@ 0x36
 8001e5c:	f000 fa44 	bl	80022e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001e60:	2036      	movs	r0, #54	@ 0x36
 8001e62:	f000 fa6d 	bl	8002340 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8001e66:	e018      	b.n	8001e9a <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM7)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a0f      	ldr	r2, [pc, #60]	@ (8001eac <HAL_TIM_Base_MspInit+0x80>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d113      	bne.n	8001e9a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001e72:	4b0d      	ldr	r3, [pc, #52]	@ (8001ea8 <HAL_TIM_Base_MspInit+0x7c>)
 8001e74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e76:	4a0c      	ldr	r2, [pc, #48]	@ (8001ea8 <HAL_TIM_Base_MspInit+0x7c>)
 8001e78:	f043 0320 	orr.w	r3, r3, #32
 8001e7c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e7e:	4b0a      	ldr	r3, [pc, #40]	@ (8001ea8 <HAL_TIM_Base_MspInit+0x7c>)
 8001e80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e82:	f003 0320 	and.w	r3, r3, #32
 8001e86:	60bb      	str	r3, [r7, #8]
 8001e88:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	2100      	movs	r1, #0
 8001e8e:	2037      	movs	r0, #55	@ 0x37
 8001e90:	f000 fa2a 	bl	80022e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001e94:	2037      	movs	r0, #55	@ 0x37
 8001e96:	f000 fa53 	bl	8002340 <HAL_NVIC_EnableIRQ>
}
 8001e9a:	bf00      	nop
 8001e9c:	3710      	adds	r7, #16
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	40001000 	.word	0x40001000
 8001ea8:	40021000 	.word	0x40021000
 8001eac:	40001400 	.word	0x40001400

08001eb0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001eb4:	4b14      	ldr	r3, [pc, #80]	@ (8001f08 <MX_USART1_UART_Init+0x58>)
 8001eb6:	4a15      	ldr	r2, [pc, #84]	@ (8001f0c <MX_USART1_UART_Init+0x5c>)
 8001eb8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001eba:	4b13      	ldr	r3, [pc, #76]	@ (8001f08 <MX_USART1_UART_Init+0x58>)
 8001ebc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ec0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ec2:	4b11      	ldr	r3, [pc, #68]	@ (8001f08 <MX_USART1_UART_Init+0x58>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ec8:	4b0f      	ldr	r3, [pc, #60]	@ (8001f08 <MX_USART1_UART_Init+0x58>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001ece:	4b0e      	ldr	r3, [pc, #56]	@ (8001f08 <MX_USART1_UART_Init+0x58>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ed4:	4b0c      	ldr	r3, [pc, #48]	@ (8001f08 <MX_USART1_UART_Init+0x58>)
 8001ed6:	220c      	movs	r2, #12
 8001ed8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001eda:	4b0b      	ldr	r3, [pc, #44]	@ (8001f08 <MX_USART1_UART_Init+0x58>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ee0:	4b09      	ldr	r3, [pc, #36]	@ (8001f08 <MX_USART1_UART_Init+0x58>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ee6:	4b08      	ldr	r3, [pc, #32]	@ (8001f08 <MX_USART1_UART_Init+0x58>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001eec:	4b06      	ldr	r3, [pc, #24]	@ (8001f08 <MX_USART1_UART_Init+0x58>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ef2:	4805      	ldr	r0, [pc, #20]	@ (8001f08 <MX_USART1_UART_Init+0x58>)
 8001ef4:	f004 ffcc 	bl	8006e90 <HAL_UART_Init>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d001      	beq.n	8001f02 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001efe:	f7ff fb3b 	bl	8001578 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001f02:	bf00      	nop
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	20000904 	.word	0x20000904
 8001f0c:	40013800 	.word	0x40013800

08001f10 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b0ac      	sub	sp, #176	@ 0xb0
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f18:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	601a      	str	r2, [r3, #0]
 8001f20:	605a      	str	r2, [r3, #4]
 8001f22:	609a      	str	r2, [r3, #8]
 8001f24:	60da      	str	r2, [r3, #12]
 8001f26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f28:	f107 0314 	add.w	r3, r7, #20
 8001f2c:	2288      	movs	r2, #136	@ 0x88
 8001f2e:	2100      	movs	r1, #0
 8001f30:	4618      	mov	r0, r3
 8001f32:	f006 fb2f 	bl	8008594 <memset>
  if(uartHandle->Instance==USART1)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a21      	ldr	r2, [pc, #132]	@ (8001fc0 <HAL_UART_MspInit+0xb0>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d13a      	bne.n	8001fb6 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001f40:	2301      	movs	r3, #1
 8001f42:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001f44:	2300      	movs	r3, #0
 8001f46:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f48:	f107 0314 	add.w	r3, r7, #20
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f002 f84f 	bl	8003ff0 <HAL_RCCEx_PeriphCLKConfig>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d001      	beq.n	8001f5c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001f58:	f7ff fb0e 	bl	8001578 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f5c:	4b19      	ldr	r3, [pc, #100]	@ (8001fc4 <HAL_UART_MspInit+0xb4>)
 8001f5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f60:	4a18      	ldr	r2, [pc, #96]	@ (8001fc4 <HAL_UART_MspInit+0xb4>)
 8001f62:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f66:	6613      	str	r3, [r2, #96]	@ 0x60
 8001f68:	4b16      	ldr	r3, [pc, #88]	@ (8001fc4 <HAL_UART_MspInit+0xb4>)
 8001f6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f6c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f70:	613b      	str	r3, [r7, #16]
 8001f72:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f74:	4b13      	ldr	r3, [pc, #76]	@ (8001fc4 <HAL_UART_MspInit+0xb4>)
 8001f76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f78:	4a12      	ldr	r2, [pc, #72]	@ (8001fc4 <HAL_UART_MspInit+0xb4>)
 8001f7a:	f043 0302 	orr.w	r3, r3, #2
 8001f7e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f80:	4b10      	ldr	r3, [pc, #64]	@ (8001fc4 <HAL_UART_MspInit+0xb4>)
 8001f82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f84:	f003 0302 	and.w	r3, r3, #2
 8001f88:	60fb      	str	r3, [r7, #12]
 8001f8a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f8c:	23c0      	movs	r3, #192	@ 0xc0
 8001f8e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f92:	2302      	movs	r3, #2
 8001f94:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001fa4:	2307      	movs	r3, #7
 8001fa6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001faa:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001fae:	4619      	mov	r1, r3
 8001fb0:	4805      	ldr	r0, [pc, #20]	@ (8001fc8 <HAL_UART_MspInit+0xb8>)
 8001fb2:	f000 fd2f 	bl	8002a14 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001fb6:	bf00      	nop
 8001fb8:	37b0      	adds	r7, #176	@ 0xb0
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	40013800 	.word	0x40013800
 8001fc4:	40021000 	.word	0x40021000
 8001fc8:	48000400 	.word	0x48000400

08001fcc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001fcc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002004 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001fd0:	f7ff fcee 	bl	80019b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fd4:	480c      	ldr	r0, [pc, #48]	@ (8002008 <LoopForever+0x6>)
  ldr r1, =_edata
 8001fd6:	490d      	ldr	r1, [pc, #52]	@ (800200c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001fd8:	4a0d      	ldr	r2, [pc, #52]	@ (8002010 <LoopForever+0xe>)
  movs r3, #0
 8001fda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fdc:	e002      	b.n	8001fe4 <LoopCopyDataInit>

08001fde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fe0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fe2:	3304      	adds	r3, #4

08001fe4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fe4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fe6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fe8:	d3f9      	bcc.n	8001fde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fea:	4a0a      	ldr	r2, [pc, #40]	@ (8002014 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001fec:	4c0a      	ldr	r4, [pc, #40]	@ (8002018 <LoopForever+0x16>)
  movs r3, #0
 8001fee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ff0:	e001      	b.n	8001ff6 <LoopFillZerobss>

08001ff2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ff2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ff4:	3204      	adds	r2, #4

08001ff6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ff6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ff8:	d3fb      	bcc.n	8001ff2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ffa:	f006 fb2f 	bl	800865c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ffe:	f7ff fa1d 	bl	800143c <main>

08002002 <LoopForever>:

LoopForever:
    b LoopForever
 8002002:	e7fe      	b.n	8002002 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002004:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002008:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800200c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8002010:	08009398 	.word	0x08009398
  ldr r2, =_sbss
 8002014:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8002018:	20000adc 	.word	0x20000adc

0800201c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800201c:	e7fe      	b.n	800201c <ADC1_2_IRQHandler>

0800201e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800201e:	b580      	push	{r7, lr}
 8002020:	b082      	sub	sp, #8
 8002022:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002024:	2300      	movs	r3, #0
 8002026:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002028:	2003      	movs	r0, #3
 800202a:	f000 f93d 	bl	80022a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800202e:	200f      	movs	r0, #15
 8002030:	f000 f80e 	bl	8002050 <HAL_InitTick>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d002      	beq.n	8002040 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	71fb      	strb	r3, [r7, #7]
 800203e:	e001      	b.n	8002044 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002040:	f7ff fba8 	bl	8001794 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002044:	79fb      	ldrb	r3, [r7, #7]
}
 8002046:	4618      	mov	r0, r3
 8002048:	3708      	adds	r7, #8
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
	...

08002050 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b084      	sub	sp, #16
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002058:	2300      	movs	r3, #0
 800205a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800205c:	4b17      	ldr	r3, [pc, #92]	@ (80020bc <HAL_InitTick+0x6c>)
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d023      	beq.n	80020ac <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002064:	4b16      	ldr	r3, [pc, #88]	@ (80020c0 <HAL_InitTick+0x70>)
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	4b14      	ldr	r3, [pc, #80]	@ (80020bc <HAL_InitTick+0x6c>)
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	4619      	mov	r1, r3
 800206e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002072:	fbb3 f3f1 	udiv	r3, r3, r1
 8002076:	fbb2 f3f3 	udiv	r3, r2, r3
 800207a:	4618      	mov	r0, r3
 800207c:	f000 f978 	bl	8002370 <HAL_SYSTICK_Config>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d10f      	bne.n	80020a6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2b0f      	cmp	r3, #15
 800208a:	d809      	bhi.n	80020a0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800208c:	2200      	movs	r2, #0
 800208e:	6879      	ldr	r1, [r7, #4]
 8002090:	f04f 30ff 	mov.w	r0, #4294967295
 8002094:	f000 f928 	bl	80022e8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002098:	4a0a      	ldr	r2, [pc, #40]	@ (80020c4 <HAL_InitTick+0x74>)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6013      	str	r3, [r2, #0]
 800209e:	e007      	b.n	80020b0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	73fb      	strb	r3, [r7, #15]
 80020a4:	e004      	b.n	80020b0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	73fb      	strb	r3, [r7, #15]
 80020aa:	e001      	b.n	80020b0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80020b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3710      	adds	r7, #16
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	2000000c 	.word	0x2000000c
 80020c0:	20000004 	.word	0x20000004
 80020c4:	20000008 	.word	0x20000008

080020c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80020cc:	4b06      	ldr	r3, [pc, #24]	@ (80020e8 <HAL_IncTick+0x20>)
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	461a      	mov	r2, r3
 80020d2:	4b06      	ldr	r3, [pc, #24]	@ (80020ec <HAL_IncTick+0x24>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4413      	add	r3, r2
 80020d8:	4a04      	ldr	r2, [pc, #16]	@ (80020ec <HAL_IncTick+0x24>)
 80020da:	6013      	str	r3, [r2, #0]
}
 80020dc:	bf00      	nop
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	2000000c 	.word	0x2000000c
 80020ec:	2000098c 	.word	0x2000098c

080020f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  return uwTick;
 80020f4:	4b03      	ldr	r3, [pc, #12]	@ (8002104 <HAL_GetTick+0x14>)
 80020f6:	681b      	ldr	r3, [r3, #0]
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	2000098c 	.word	0x2000098c

08002108 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002108:	b480      	push	{r7}
 800210a:	b085      	sub	sp, #20
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	f003 0307 	and.w	r3, r3, #7
 8002116:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002118:	4b0c      	ldr	r3, [pc, #48]	@ (800214c <__NVIC_SetPriorityGrouping+0x44>)
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800211e:	68ba      	ldr	r2, [r7, #8]
 8002120:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002124:	4013      	ands	r3, r2
 8002126:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002130:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002134:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002138:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800213a:	4a04      	ldr	r2, [pc, #16]	@ (800214c <__NVIC_SetPriorityGrouping+0x44>)
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	60d3      	str	r3, [r2, #12]
}
 8002140:	bf00      	nop
 8002142:	3714      	adds	r7, #20
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr
 800214c:	e000ed00 	.word	0xe000ed00

08002150 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002154:	4b04      	ldr	r3, [pc, #16]	@ (8002168 <__NVIC_GetPriorityGrouping+0x18>)
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	0a1b      	lsrs	r3, r3, #8
 800215a:	f003 0307 	and.w	r3, r3, #7
}
 800215e:	4618      	mov	r0, r3
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr
 8002168:	e000ed00 	.word	0xe000ed00

0800216c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	4603      	mov	r3, r0
 8002174:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800217a:	2b00      	cmp	r3, #0
 800217c:	db0b      	blt.n	8002196 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800217e:	79fb      	ldrb	r3, [r7, #7]
 8002180:	f003 021f 	and.w	r2, r3, #31
 8002184:	4907      	ldr	r1, [pc, #28]	@ (80021a4 <__NVIC_EnableIRQ+0x38>)
 8002186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800218a:	095b      	lsrs	r3, r3, #5
 800218c:	2001      	movs	r0, #1
 800218e:	fa00 f202 	lsl.w	r2, r0, r2
 8002192:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002196:	bf00      	nop
 8002198:	370c      	adds	r7, #12
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop
 80021a4:	e000e100 	.word	0xe000e100

080021a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	4603      	mov	r3, r0
 80021b0:	6039      	str	r1, [r7, #0]
 80021b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	db0a      	blt.n	80021d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	b2da      	uxtb	r2, r3
 80021c0:	490c      	ldr	r1, [pc, #48]	@ (80021f4 <__NVIC_SetPriority+0x4c>)
 80021c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c6:	0112      	lsls	r2, r2, #4
 80021c8:	b2d2      	uxtb	r2, r2
 80021ca:	440b      	add	r3, r1
 80021cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021d0:	e00a      	b.n	80021e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	b2da      	uxtb	r2, r3
 80021d6:	4908      	ldr	r1, [pc, #32]	@ (80021f8 <__NVIC_SetPriority+0x50>)
 80021d8:	79fb      	ldrb	r3, [r7, #7]
 80021da:	f003 030f 	and.w	r3, r3, #15
 80021de:	3b04      	subs	r3, #4
 80021e0:	0112      	lsls	r2, r2, #4
 80021e2:	b2d2      	uxtb	r2, r2
 80021e4:	440b      	add	r3, r1
 80021e6:	761a      	strb	r2, [r3, #24]
}
 80021e8:	bf00      	nop
 80021ea:	370c      	adds	r7, #12
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr
 80021f4:	e000e100 	.word	0xe000e100
 80021f8:	e000ed00 	.word	0xe000ed00

080021fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b089      	sub	sp, #36	@ 0x24
 8002200:	af00      	add	r7, sp, #0
 8002202:	60f8      	str	r0, [r7, #12]
 8002204:	60b9      	str	r1, [r7, #8]
 8002206:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	f003 0307 	and.w	r3, r3, #7
 800220e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	f1c3 0307 	rsb	r3, r3, #7
 8002216:	2b04      	cmp	r3, #4
 8002218:	bf28      	it	cs
 800221a:	2304      	movcs	r3, #4
 800221c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	3304      	adds	r3, #4
 8002222:	2b06      	cmp	r3, #6
 8002224:	d902      	bls.n	800222c <NVIC_EncodePriority+0x30>
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	3b03      	subs	r3, #3
 800222a:	e000      	b.n	800222e <NVIC_EncodePriority+0x32>
 800222c:	2300      	movs	r3, #0
 800222e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002230:	f04f 32ff 	mov.w	r2, #4294967295
 8002234:	69bb      	ldr	r3, [r7, #24]
 8002236:	fa02 f303 	lsl.w	r3, r2, r3
 800223a:	43da      	mvns	r2, r3
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	401a      	ands	r2, r3
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002244:	f04f 31ff 	mov.w	r1, #4294967295
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	fa01 f303 	lsl.w	r3, r1, r3
 800224e:	43d9      	mvns	r1, r3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002254:	4313      	orrs	r3, r2
         );
}
 8002256:	4618      	mov	r0, r3
 8002258:	3724      	adds	r7, #36	@ 0x24
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
	...

08002264 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	3b01      	subs	r3, #1
 8002270:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002274:	d301      	bcc.n	800227a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002276:	2301      	movs	r3, #1
 8002278:	e00f      	b.n	800229a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800227a:	4a0a      	ldr	r2, [pc, #40]	@ (80022a4 <SysTick_Config+0x40>)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	3b01      	subs	r3, #1
 8002280:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002282:	210f      	movs	r1, #15
 8002284:	f04f 30ff 	mov.w	r0, #4294967295
 8002288:	f7ff ff8e 	bl	80021a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800228c:	4b05      	ldr	r3, [pc, #20]	@ (80022a4 <SysTick_Config+0x40>)
 800228e:	2200      	movs	r2, #0
 8002290:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002292:	4b04      	ldr	r3, [pc, #16]	@ (80022a4 <SysTick_Config+0x40>)
 8002294:	2207      	movs	r2, #7
 8002296:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002298:	2300      	movs	r3, #0
}
 800229a:	4618      	mov	r0, r3
 800229c:	3708      	adds	r7, #8
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	e000e010 	.word	0xe000e010

080022a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2b07      	cmp	r3, #7
 80022b4:	d00f      	beq.n	80022d6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2b06      	cmp	r3, #6
 80022ba:	d00c      	beq.n	80022d6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2b05      	cmp	r3, #5
 80022c0:	d009      	beq.n	80022d6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2b04      	cmp	r3, #4
 80022c6:	d006      	beq.n	80022d6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2b03      	cmp	r3, #3
 80022cc:	d003      	beq.n	80022d6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80022ce:	21a6      	movs	r1, #166	@ 0xa6
 80022d0:	4804      	ldr	r0, [pc, #16]	@ (80022e4 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80022d2:	f7ff f957 	bl	8001584 <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f7ff ff16 	bl	8002108 <__NVIC_SetPriorityGrouping>
}
 80022dc:	bf00      	nop
 80022de:	3708      	adds	r7, #8
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	080090c4 	.word	0x080090c4

080022e8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b086      	sub	sp, #24
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	4603      	mov	r3, r0
 80022f0:	60b9      	str	r1, [r7, #8]
 80022f2:	607a      	str	r2, [r7, #4]
 80022f4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80022f6:	2300      	movs	r3, #0
 80022f8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2b0f      	cmp	r3, #15
 80022fe:	d903      	bls.n	8002308 <HAL_NVIC_SetPriority+0x20>
 8002300:	21be      	movs	r1, #190	@ 0xbe
 8002302:	480e      	ldr	r0, [pc, #56]	@ (800233c <HAL_NVIC_SetPriority+0x54>)
 8002304:	f7ff f93e 	bl	8001584 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	2b0f      	cmp	r3, #15
 800230c:	d903      	bls.n	8002316 <HAL_NVIC_SetPriority+0x2e>
 800230e:	21bf      	movs	r1, #191	@ 0xbf
 8002310:	480a      	ldr	r0, [pc, #40]	@ (800233c <HAL_NVIC_SetPriority+0x54>)
 8002312:	f7ff f937 	bl	8001584 <assert_failed>

  prioritygroup = NVIC_GetPriorityGrouping();
 8002316:	f7ff ff1b 	bl	8002150 <__NVIC_GetPriorityGrouping>
 800231a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	68b9      	ldr	r1, [r7, #8]
 8002320:	6978      	ldr	r0, [r7, #20]
 8002322:	f7ff ff6b 	bl	80021fc <NVIC_EncodePriority>
 8002326:	4602      	mov	r2, r0
 8002328:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800232c:	4611      	mov	r1, r2
 800232e:	4618      	mov	r0, r3
 8002330:	f7ff ff3a 	bl	80021a8 <__NVIC_SetPriority>
}
 8002334:	bf00      	nop
 8002336:	3718      	adds	r7, #24
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}
 800233c:	080090c4 	.word	0x080090c4

08002340 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	4603      	mov	r3, r0
 8002348:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800234a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800234e:	2b00      	cmp	r3, #0
 8002350:	da03      	bge.n	800235a <HAL_NVIC_EnableIRQ+0x1a>
 8002352:	21d2      	movs	r1, #210	@ 0xd2
 8002354:	4805      	ldr	r0, [pc, #20]	@ (800236c <HAL_NVIC_EnableIRQ+0x2c>)
 8002356:	f7ff f915 	bl	8001584 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800235a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800235e:	4618      	mov	r0, r3
 8002360:	f7ff ff04 	bl	800216c <__NVIC_EnableIRQ>
}
 8002364:	bf00      	nop
 8002366:	3708      	adds	r7, #8
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}
 800236c:	080090c4 	.word	0x080090c4

08002370 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002378:	6878      	ldr	r0, [r7, #4]
 800237a:	f7ff ff73 	bl	8002264 <SysTick_Config>
 800237e:	4603      	mov	r3, r0
}
 8002380:	4618      	mov	r0, r3
 8002382:	3708      	adds	r7, #8
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}

08002388 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b084      	sub	sp, #16
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d101      	bne.n	800239a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e19d      	b.n	80026d6 <HAL_DMA_Init+0x34e>
  }

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a79      	ldr	r2, [pc, #484]	@ (8002584 <HAL_DMA_Init+0x1fc>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d044      	beq.n	800242e <HAL_DMA_Init+0xa6>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a77      	ldr	r2, [pc, #476]	@ (8002588 <HAL_DMA_Init+0x200>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d03f      	beq.n	800242e <HAL_DMA_Init+0xa6>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a76      	ldr	r2, [pc, #472]	@ (800258c <HAL_DMA_Init+0x204>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d03a      	beq.n	800242e <HAL_DMA_Init+0xa6>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a74      	ldr	r2, [pc, #464]	@ (8002590 <HAL_DMA_Init+0x208>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d035      	beq.n	800242e <HAL_DMA_Init+0xa6>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a73      	ldr	r2, [pc, #460]	@ (8002594 <HAL_DMA_Init+0x20c>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d030      	beq.n	800242e <HAL_DMA_Init+0xa6>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a71      	ldr	r2, [pc, #452]	@ (8002598 <HAL_DMA_Init+0x210>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d02b      	beq.n	800242e <HAL_DMA_Init+0xa6>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a70      	ldr	r2, [pc, #448]	@ (800259c <HAL_DMA_Init+0x214>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d026      	beq.n	800242e <HAL_DMA_Init+0xa6>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a6e      	ldr	r2, [pc, #440]	@ (80025a0 <HAL_DMA_Init+0x218>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d021      	beq.n	800242e <HAL_DMA_Init+0xa6>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a6d      	ldr	r2, [pc, #436]	@ (80025a4 <HAL_DMA_Init+0x21c>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d01c      	beq.n	800242e <HAL_DMA_Init+0xa6>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a6b      	ldr	r2, [pc, #428]	@ (80025a8 <HAL_DMA_Init+0x220>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d017      	beq.n	800242e <HAL_DMA_Init+0xa6>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a6a      	ldr	r2, [pc, #424]	@ (80025ac <HAL_DMA_Init+0x224>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d012      	beq.n	800242e <HAL_DMA_Init+0xa6>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a68      	ldr	r2, [pc, #416]	@ (80025b0 <HAL_DMA_Init+0x228>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d00d      	beq.n	800242e <HAL_DMA_Init+0xa6>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a67      	ldr	r2, [pc, #412]	@ (80025b4 <HAL_DMA_Init+0x22c>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d008      	beq.n	800242e <HAL_DMA_Init+0xa6>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a65      	ldr	r2, [pc, #404]	@ (80025b8 <HAL_DMA_Init+0x230>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d003      	beq.n	800242e <HAL_DMA_Init+0xa6>
 8002426:	21a5      	movs	r1, #165	@ 0xa5
 8002428:	4864      	ldr	r0, [pc, #400]	@ (80025bc <HAL_DMA_Init+0x234>)
 800242a:	f7ff f8ab 	bl	8001584 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d00c      	beq.n	8002450 <HAL_DMA_Init+0xc8>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	2b10      	cmp	r3, #16
 800243c:	d008      	beq.n	8002450 <HAL_DMA_Init+0xc8>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002446:	d003      	beq.n	8002450 <HAL_DMA_Init+0xc8>
 8002448:	21a6      	movs	r1, #166	@ 0xa6
 800244a:	485c      	ldr	r0, [pc, #368]	@ (80025bc <HAL_DMA_Init+0x234>)
 800244c:	f7ff f89a 	bl	8001584 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	2b40      	cmp	r3, #64	@ 0x40
 8002456:	d007      	beq.n	8002468 <HAL_DMA_Init+0xe0>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d003      	beq.n	8002468 <HAL_DMA_Init+0xe0>
 8002460:	21a7      	movs	r1, #167	@ 0xa7
 8002462:	4856      	ldr	r0, [pc, #344]	@ (80025bc <HAL_DMA_Init+0x234>)
 8002464:	f7ff f88e 	bl	8001584 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	691b      	ldr	r3, [r3, #16]
 800246c:	2b80      	cmp	r3, #128	@ 0x80
 800246e:	d007      	beq.n	8002480 <HAL_DMA_Init+0xf8>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	691b      	ldr	r3, [r3, #16]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d003      	beq.n	8002480 <HAL_DMA_Init+0xf8>
 8002478:	21a8      	movs	r1, #168	@ 0xa8
 800247a:	4850      	ldr	r0, [pc, #320]	@ (80025bc <HAL_DMA_Init+0x234>)
 800247c:	f7ff f882 	bl	8001584 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	695b      	ldr	r3, [r3, #20]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d00d      	beq.n	80024a4 <HAL_DMA_Init+0x11c>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	695b      	ldr	r3, [r3, #20]
 800248c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002490:	d008      	beq.n	80024a4 <HAL_DMA_Init+0x11c>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	695b      	ldr	r3, [r3, #20]
 8002496:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800249a:	d003      	beq.n	80024a4 <HAL_DMA_Init+0x11c>
 800249c:	21a9      	movs	r1, #169	@ 0xa9
 800249e:	4847      	ldr	r0, [pc, #284]	@ (80025bc <HAL_DMA_Init+0x234>)
 80024a0:	f7ff f870 	bl	8001584 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	699b      	ldr	r3, [r3, #24]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d00d      	beq.n	80024c8 <HAL_DMA_Init+0x140>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	699b      	ldr	r3, [r3, #24]
 80024b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80024b4:	d008      	beq.n	80024c8 <HAL_DMA_Init+0x140>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	699b      	ldr	r3, [r3, #24]
 80024ba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80024be:	d003      	beq.n	80024c8 <HAL_DMA_Init+0x140>
 80024c0:	21aa      	movs	r1, #170	@ 0xaa
 80024c2:	483e      	ldr	r0, [pc, #248]	@ (80025bc <HAL_DMA_Init+0x234>)
 80024c4:	f7ff f85e 	bl	8001584 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	69db      	ldr	r3, [r3, #28]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d007      	beq.n	80024e0 <HAL_DMA_Init+0x158>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	69db      	ldr	r3, [r3, #28]
 80024d4:	2b20      	cmp	r3, #32
 80024d6:	d003      	beq.n	80024e0 <HAL_DMA_Init+0x158>
 80024d8:	21ab      	movs	r1, #171	@ 0xab
 80024da:	4838      	ldr	r0, [pc, #224]	@ (80025bc <HAL_DMA_Init+0x234>)
 80024dc:	f7ff f852 	bl	8001584 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6a1b      	ldr	r3, [r3, #32]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d012      	beq.n	800250e <HAL_DMA_Init+0x186>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6a1b      	ldr	r3, [r3, #32]
 80024ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80024f0:	d00d      	beq.n	800250e <HAL_DMA_Init+0x186>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6a1b      	ldr	r3, [r3, #32]
 80024f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80024fa:	d008      	beq.n	800250e <HAL_DMA_Init+0x186>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6a1b      	ldr	r3, [r3, #32]
 8002500:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002504:	d003      	beq.n	800250e <HAL_DMA_Init+0x186>
 8002506:	21ac      	movs	r1, #172	@ 0xac
 8002508:	482c      	ldr	r0, [pc, #176]	@ (80025bc <HAL_DMA_Init+0x234>)
 800250a:	f7ff f83b 	bl	8001584 <assert_failed>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d01f      	beq.n	8002556 <HAL_DMA_Init+0x1ce>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	2b01      	cmp	r3, #1
 800251c:	d01b      	beq.n	8002556 <HAL_DMA_Init+0x1ce>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	2b02      	cmp	r3, #2
 8002524:	d017      	beq.n	8002556 <HAL_DMA_Init+0x1ce>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	2b03      	cmp	r3, #3
 800252c:	d013      	beq.n	8002556 <HAL_DMA_Init+0x1ce>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	2b04      	cmp	r3, #4
 8002534:	d00f      	beq.n	8002556 <HAL_DMA_Init+0x1ce>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	2b05      	cmp	r3, #5
 800253c:	d00b      	beq.n	8002556 <HAL_DMA_Init+0x1ce>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	2b06      	cmp	r3, #6
 8002544:	d007      	beq.n	8002556 <HAL_DMA_Init+0x1ce>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	2b07      	cmp	r3, #7
 800254c:	d003      	beq.n	8002556 <HAL_DMA_Init+0x1ce>
 800254e:	21ae      	movs	r1, #174	@ 0xae
 8002550:	481a      	ldr	r0, [pc, #104]	@ (80025bc <HAL_DMA_Init+0x234>)
 8002552:	f7ff f817 	bl	8001584 <assert_failed>

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	461a      	mov	r2, r3
 800255c:	4b18      	ldr	r3, [pc, #96]	@ (80025c0 <HAL_DMA_Init+0x238>)
 800255e:	429a      	cmp	r2, r3
 8002560:	d836      	bhi.n	80025d0 <HAL_DMA_Init+0x248>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	461a      	mov	r2, r3
 8002568:	4b16      	ldr	r3, [pc, #88]	@ (80025c4 <HAL_DMA_Init+0x23c>)
 800256a:	4413      	add	r3, r2
 800256c:	4a16      	ldr	r2, [pc, #88]	@ (80025c8 <HAL_DMA_Init+0x240>)
 800256e:	fba2 2303 	umull	r2, r3, r2, r3
 8002572:	091b      	lsrs	r3, r3, #4
 8002574:	009a      	lsls	r2, r3, #2
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4a13      	ldr	r2, [pc, #76]	@ (80025cc <HAL_DMA_Init+0x244>)
 800257e:	641a      	str	r2, [r3, #64]	@ 0x40
 8002580:	e035      	b.n	80025ee <HAL_DMA_Init+0x266>
 8002582:	bf00      	nop
 8002584:	40020008 	.word	0x40020008
 8002588:	4002001c 	.word	0x4002001c
 800258c:	40020030 	.word	0x40020030
 8002590:	40020044 	.word	0x40020044
 8002594:	40020058 	.word	0x40020058
 8002598:	4002006c 	.word	0x4002006c
 800259c:	40020080 	.word	0x40020080
 80025a0:	40020408 	.word	0x40020408
 80025a4:	4002041c 	.word	0x4002041c
 80025a8:	40020430 	.word	0x40020430
 80025ac:	40020444 	.word	0x40020444
 80025b0:	40020458 	.word	0x40020458
 80025b4:	4002046c 	.word	0x4002046c
 80025b8:	40020480 	.word	0x40020480
 80025bc:	08009100 	.word	0x08009100
 80025c0:	40020407 	.word	0x40020407
 80025c4:	bffdfff8 	.word	0xbffdfff8
 80025c8:	cccccccd 	.word	0xcccccccd
 80025cc:	40020000 	.word	0x40020000
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	461a      	mov	r2, r3
 80025d6:	4b42      	ldr	r3, [pc, #264]	@ (80026e0 <HAL_DMA_Init+0x358>)
 80025d8:	4413      	add	r3, r2
 80025da:	4a42      	ldr	r2, [pc, #264]	@ (80026e4 <HAL_DMA_Init+0x35c>)
 80025dc:	fba2 2303 	umull	r2, r3, r2, r3
 80025e0:	091b      	lsrs	r3, r3, #4
 80025e2:	009a      	lsls	r2, r3, #2
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	4a3f      	ldr	r2, [pc, #252]	@ (80026e8 <HAL_DMA_Init+0x360>)
 80025ec:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2202      	movs	r2, #2
 80025f2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002604:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002608:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002612:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	691b      	ldr	r3, [r3, #16]
 8002618:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800261e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	699b      	ldr	r3, [r3, #24]
 8002624:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800262a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6a1b      	ldr	r3, [r3, #32]
 8002630:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002632:	68fa      	ldr	r2, [r7, #12]
 8002634:	4313      	orrs	r3, r2
 8002636:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	68fa      	ldr	r2, [r7, #12]
 800263e:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002648:	d039      	beq.n	80026be <HAL_DMA_Init+0x336>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800264e:	4a27      	ldr	r2, [pc, #156]	@ (80026ec <HAL_DMA_Init+0x364>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d11a      	bne.n	800268a <HAL_DMA_Init+0x302>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002654:	4b26      	ldr	r3, [pc, #152]	@ (80026f0 <HAL_DMA_Init+0x368>)
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800265c:	f003 031c 	and.w	r3, r3, #28
 8002660:	210f      	movs	r1, #15
 8002662:	fa01 f303 	lsl.w	r3, r1, r3
 8002666:	43db      	mvns	r3, r3
 8002668:	4921      	ldr	r1, [pc, #132]	@ (80026f0 <HAL_DMA_Init+0x368>)
 800266a:	4013      	ands	r3, r2
 800266c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800266e:	4b20      	ldr	r3, [pc, #128]	@ (80026f0 <HAL_DMA_Init+0x368>)
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6859      	ldr	r1, [r3, #4]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800267a:	f003 031c 	and.w	r3, r3, #28
 800267e:	fa01 f303 	lsl.w	r3, r1, r3
 8002682:	491b      	ldr	r1, [pc, #108]	@ (80026f0 <HAL_DMA_Init+0x368>)
 8002684:	4313      	orrs	r3, r2
 8002686:	600b      	str	r3, [r1, #0]
 8002688:	e019      	b.n	80026be <HAL_DMA_Init+0x336>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800268a:	4b1a      	ldr	r3, [pc, #104]	@ (80026f4 <HAL_DMA_Init+0x36c>)
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002692:	f003 031c 	and.w	r3, r3, #28
 8002696:	210f      	movs	r1, #15
 8002698:	fa01 f303 	lsl.w	r3, r1, r3
 800269c:	43db      	mvns	r3, r3
 800269e:	4915      	ldr	r1, [pc, #84]	@ (80026f4 <HAL_DMA_Init+0x36c>)
 80026a0:	4013      	ands	r3, r2
 80026a2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80026a4:	4b13      	ldr	r3, [pc, #76]	@ (80026f4 <HAL_DMA_Init+0x36c>)
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6859      	ldr	r1, [r3, #4]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026b0:	f003 031c 	and.w	r3, r3, #28
 80026b4:	fa01 f303 	lsl.w	r3, r1, r3
 80026b8:	490e      	ldr	r1, [pc, #56]	@ (80026f4 <HAL_DMA_Init+0x36c>)
 80026ba:	4313      	orrs	r3, r2
 80026bc:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2200      	movs	r2, #0
 80026c2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2201      	movs	r2, #1
 80026c8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2200      	movs	r2, #0
 80026d0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80026d4:	2300      	movs	r3, #0
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3710      	adds	r7, #16
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	bffdfbf8 	.word	0xbffdfbf8
 80026e4:	cccccccd 	.word	0xcccccccd
 80026e8:	40020400 	.word	0x40020400
 80026ec:	40020000 	.word	0x40020000
 80026f0:	400200a8 	.word	0x400200a8
 80026f4:	400204a8 	.word	0x400204a8

080026f8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b086      	sub	sp, #24
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	60f8      	str	r0, [r7, #12]
 8002700:	60b9      	str	r1, [r7, #8]
 8002702:	607a      	str	r2, [r7, #4]
 8002704:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002706:	2300      	movs	r3, #0
 8002708:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d003      	beq.n	8002718 <HAL_DMA_Start_IT+0x20>
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002716:	d304      	bcc.n	8002722 <HAL_DMA_Start_IT+0x2a>
 8002718:	f240 11df 	movw	r1, #479	@ 0x1df
 800271c:	482c      	ldr	r0, [pc, #176]	@ (80027d0 <HAL_DMA_Start_IT+0xd8>)
 800271e:	f7fe ff31 	bl	8001584 <assert_failed>

  /* Process locked */
  __HAL_LOCK(hdma);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002728:	2b01      	cmp	r3, #1
 800272a:	d101      	bne.n	8002730 <HAL_DMA_Start_IT+0x38>
 800272c:	2302      	movs	r3, #2
 800272e:	e04b      	b.n	80027c8 <HAL_DMA_Start_IT+0xd0>
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2201      	movs	r2, #1
 8002734:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800273e:	b2db      	uxtb	r3, r3
 8002740:	2b01      	cmp	r3, #1
 8002742:	d13a      	bne.n	80027ba <HAL_DMA_Start_IT+0xc2>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2202      	movs	r2, #2
 8002748:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2200      	movs	r2, #0
 8002750:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f022 0201 	bic.w	r2, r2, #1
 8002760:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	68b9      	ldr	r1, [r7, #8]
 8002768:	68f8      	ldr	r0, [r7, #12]
 800276a:	f000 f923 	bl	80029b4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002772:	2b00      	cmp	r3, #0
 8002774:	d008      	beq.n	8002788 <HAL_DMA_Start_IT+0x90>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f042 020e 	orr.w	r2, r2, #14
 8002784:	601a      	str	r2, [r3, #0]
 8002786:	e00f      	b.n	80027a8 <HAL_DMA_Start_IT+0xb0>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f022 0204 	bic.w	r2, r2, #4
 8002796:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f042 020a 	orr.w	r2, r2, #10
 80027a6:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f042 0201 	orr.w	r2, r2, #1
 80027b6:	601a      	str	r2, [r3, #0]
 80027b8:	e005      	b.n	80027c6 <HAL_DMA_Start_IT+0xce>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2200      	movs	r2, #0
 80027be:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80027c2:	2302      	movs	r3, #2
 80027c4:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80027c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3718      	adds	r7, #24
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	08009100 	.word	0x08009100

080027d4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b084      	sub	sp, #16
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027dc:	2300      	movs	r3, #0
 80027de:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d005      	beq.n	80027f8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2204      	movs	r2, #4
 80027f0:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	73fb      	strb	r3, [r7, #15]
 80027f6:	e029      	b.n	800284c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f022 020e 	bic.w	r2, r2, #14
 8002806:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f022 0201 	bic.w	r2, r2, #1
 8002816:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800281c:	f003 021c 	and.w	r2, r3, #28
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002824:	2101      	movs	r1, #1
 8002826:	fa01 f202 	lsl.w	r2, r1, r2
 800282a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2201      	movs	r2, #1
 8002830:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2200      	movs	r2, #0
 8002838:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002840:	2b00      	cmp	r3, #0
 8002842:	d003      	beq.n	800284c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	4798      	blx	r3
    }
  }
  return status;
 800284c:	7bfb      	ldrb	r3, [r7, #15]
}
 800284e:	4618      	mov	r0, r3
 8002850:	3710      	adds	r7, #16
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}

08002856 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002856:	b580      	push	{r7, lr}
 8002858:	b084      	sub	sp, #16
 800285a:	af00      	add	r7, sp, #0
 800285c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002872:	f003 031c 	and.w	r3, r3, #28
 8002876:	2204      	movs	r2, #4
 8002878:	409a      	lsls	r2, r3
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	4013      	ands	r3, r2
 800287e:	2b00      	cmp	r3, #0
 8002880:	d026      	beq.n	80028d0 <HAL_DMA_IRQHandler+0x7a>
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	f003 0304 	and.w	r3, r3, #4
 8002888:	2b00      	cmp	r3, #0
 800288a:	d021      	beq.n	80028d0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0320 	and.w	r3, r3, #32
 8002896:	2b00      	cmp	r3, #0
 8002898:	d107      	bne.n	80028aa <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f022 0204 	bic.w	r2, r2, #4
 80028a8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ae:	f003 021c 	and.w	r2, r3, #28
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028b6:	2104      	movs	r1, #4
 80028b8:	fa01 f202 	lsl.w	r2, r1, r2
 80028bc:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d071      	beq.n	80029aa <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80028ce:	e06c      	b.n	80029aa <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028d4:	f003 031c 	and.w	r3, r3, #28
 80028d8:	2202      	movs	r2, #2
 80028da:	409a      	lsls	r2, r3
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	4013      	ands	r3, r2
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d02e      	beq.n	8002942 <HAL_DMA_IRQHandler+0xec>
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	f003 0302 	and.w	r3, r3, #2
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d029      	beq.n	8002942 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 0320 	and.w	r3, r3, #32
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d10b      	bne.n	8002914 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f022 020a 	bic.w	r2, r2, #10
 800290a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2201      	movs	r2, #1
 8002910:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002918:	f003 021c 	and.w	r2, r3, #28
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002920:	2102      	movs	r1, #2
 8002922:	fa01 f202 	lsl.w	r2, r1, r2
 8002926:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2200      	movs	r2, #0
 800292c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002934:	2b00      	cmp	r3, #0
 8002936:	d038      	beq.n	80029aa <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002940:	e033      	b.n	80029aa <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002946:	f003 031c 	and.w	r3, r3, #28
 800294a:	2208      	movs	r2, #8
 800294c:	409a      	lsls	r2, r3
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	4013      	ands	r3, r2
 8002952:	2b00      	cmp	r3, #0
 8002954:	d02a      	beq.n	80029ac <HAL_DMA_IRQHandler+0x156>
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	f003 0308 	and.w	r3, r3, #8
 800295c:	2b00      	cmp	r3, #0
 800295e:	d025      	beq.n	80029ac <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f022 020e 	bic.w	r2, r2, #14
 800296e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002974:	f003 021c 	and.w	r2, r3, #28
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800297c:	2101      	movs	r1, #1
 800297e:	fa01 f202 	lsl.w	r2, r1, r2
 8002982:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2201      	movs	r2, #1
 8002988:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2201      	movs	r2, #1
 800298e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d004      	beq.n	80029ac <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80029aa:	bf00      	nop
 80029ac:	bf00      	nop
}
 80029ae:	3710      	adds	r7, #16
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}

080029b4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b085      	sub	sp, #20
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	60f8      	str	r0, [r7, #12]
 80029bc:	60b9      	str	r1, [r7, #8]
 80029be:	607a      	str	r2, [r7, #4]
 80029c0:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029c6:	f003 021c 	and.w	r2, r3, #28
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ce:	2101      	movs	r1, #1
 80029d0:	fa01 f202 	lsl.w	r2, r1, r2
 80029d4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	683a      	ldr	r2, [r7, #0]
 80029dc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	2b10      	cmp	r3, #16
 80029e4:	d108      	bne.n	80029f8 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	68ba      	ldr	r2, [r7, #8]
 80029f4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80029f6:	e007      	b.n	8002a08 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	68ba      	ldr	r2, [r7, #8]
 80029fe:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	60da      	str	r2, [r3, #12]
}
 8002a08:	bf00      	nop
 8002a0a:	3714      	adds	r7, #20
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr

08002a14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b086      	sub	sp, #24
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
 8002a1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002a28:	d01f      	beq.n	8002a6a <HAL_GPIO_Init+0x56>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4a3c      	ldr	r2, [pc, #240]	@ (8002b20 <HAL_GPIO_Init+0x10c>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d01b      	beq.n	8002a6a <HAL_GPIO_Init+0x56>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4a3b      	ldr	r2, [pc, #236]	@ (8002b24 <HAL_GPIO_Init+0x110>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d017      	beq.n	8002a6a <HAL_GPIO_Init+0x56>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4a3a      	ldr	r2, [pc, #232]	@ (8002b28 <HAL_GPIO_Init+0x114>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d013      	beq.n	8002a6a <HAL_GPIO_Init+0x56>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	4a39      	ldr	r2, [pc, #228]	@ (8002b2c <HAL_GPIO_Init+0x118>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d00f      	beq.n	8002a6a <HAL_GPIO_Init+0x56>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	4a38      	ldr	r2, [pc, #224]	@ (8002b30 <HAL_GPIO_Init+0x11c>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d00b      	beq.n	8002a6a <HAL_GPIO_Init+0x56>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	4a37      	ldr	r2, [pc, #220]	@ (8002b34 <HAL_GPIO_Init+0x120>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d007      	beq.n	8002a6a <HAL_GPIO_Init+0x56>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	4a36      	ldr	r2, [pc, #216]	@ (8002b38 <HAL_GPIO_Init+0x124>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d003      	beq.n	8002a6a <HAL_GPIO_Init+0x56>
 8002a62:	21aa      	movs	r1, #170	@ 0xaa
 8002a64:	4835      	ldr	r0, [pc, #212]	@ (8002b3c <HAL_GPIO_Init+0x128>)
 8002a66:	f7fe fd8d 	bl	8001584 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	b29b      	uxth	r3, r3
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d004      	beq.n	8002a7e <HAL_GPIO_Init+0x6a>
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a7c:	d303      	bcc.n	8002a86 <HAL_GPIO_Init+0x72>
 8002a7e:	21ab      	movs	r1, #171	@ 0xab
 8002a80:	482e      	ldr	r0, [pc, #184]	@ (8002b3c <HAL_GPIO_Init+0x128>)
 8002a82:	f7fe fd7f 	bl	8001584 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	f000 823d 	beq.w	8002f0a <HAL_GPIO_Init+0x4f6>
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	f000 8238 	beq.w	8002f0a <HAL_GPIO_Init+0x4f6>
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	2b11      	cmp	r3, #17
 8002aa0:	f000 8233 	beq.w	8002f0a <HAL_GPIO_Init+0x4f6>
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	f000 822e 	beq.w	8002f0a <HAL_GPIO_Init+0x4f6>
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	2b12      	cmp	r3, #18
 8002ab4:	f000 8229 	beq.w	8002f0a <HAL_GPIO_Init+0x4f6>
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 8002ac0:	f000 8223 	beq.w	8002f0a <HAL_GPIO_Init+0x4f6>
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8002acc:	f000 821d 	beq.w	8002f0a <HAL_GPIO_Init+0x4f6>
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f5b3 1f44 	cmp.w	r3, #3211264	@ 0x310000
 8002ad8:	f000 8217 	beq.w	8002f0a <HAL_GPIO_Init+0x4f6>
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f5b3 1f90 	cmp.w	r3, #1179648	@ 0x120000
 8002ae4:	f000 8211 	beq.w	8002f0a <HAL_GPIO_Init+0x4f6>
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f5b3 1f08 	cmp.w	r3, #2228224	@ 0x220000
 8002af0:	f000 820b 	beq.w	8002f0a <HAL_GPIO_Init+0x4f6>
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f5b3 1f48 	cmp.w	r3, #3276800	@ 0x320000
 8002afc:	f000 8205 	beq.w	8002f0a <HAL_GPIO_Init+0x4f6>
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	2b03      	cmp	r3, #3
 8002b06:	f000 8200 	beq.w	8002f0a <HAL_GPIO_Init+0x4f6>
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	2b0b      	cmp	r3, #11
 8002b10:	f000 81fb 	beq.w	8002f0a <HAL_GPIO_Init+0x4f6>
 8002b14:	21ac      	movs	r1, #172	@ 0xac
 8002b16:	4809      	ldr	r0, [pc, #36]	@ (8002b3c <HAL_GPIO_Init+0x128>)
 8002b18:	f7fe fd34 	bl	8001584 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b1c:	e1f5      	b.n	8002f0a <HAL_GPIO_Init+0x4f6>
 8002b1e:	bf00      	nop
 8002b20:	48000400 	.word	0x48000400
 8002b24:	48000800 	.word	0x48000800
 8002b28:	48000c00 	.word	0x48000c00
 8002b2c:	48001000 	.word	0x48001000
 8002b30:	48001400 	.word	0x48001400
 8002b34:	48001800 	.word	0x48001800
 8002b38:	48001c00 	.word	0x48001c00
 8002b3c:	08009138 	.word	0x08009138
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	2101      	movs	r1, #1
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	fa01 f303 	lsl.w	r3, r1, r3
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	f000 81d6 	beq.w	8002f04 <HAL_GPIO_Init+0x4f0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f003 0303 	and.w	r3, r3, #3
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d005      	beq.n	8002b70 <HAL_GPIO_Init+0x15c>
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f003 0303 	and.w	r3, r3, #3
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	d144      	bne.n	8002bfa <HAL_GPIO_Init+0x1e6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d00f      	beq.n	8002b98 <HAL_GPIO_Init+0x184>
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d00b      	beq.n	8002b98 <HAL_GPIO_Init+0x184>
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d007      	beq.n	8002b98 <HAL_GPIO_Init+0x184>
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	2b03      	cmp	r3, #3
 8002b8e:	d003      	beq.n	8002b98 <HAL_GPIO_Init+0x184>
 8002b90:	21bb      	movs	r1, #187	@ 0xbb
 8002b92:	489c      	ldr	r0, [pc, #624]	@ (8002e04 <HAL_GPIO_Init+0x3f0>)
 8002b94:	f7fe fcf6 	bl	8001584 <assert_failed>

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	005b      	lsls	r3, r3, #1
 8002ba2:	2203      	movs	r2, #3
 8002ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba8:	43db      	mvns	r3, r3
 8002baa:	693a      	ldr	r2, [r7, #16]
 8002bac:	4013      	ands	r3, r2
 8002bae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	68da      	ldr	r2, [r3, #12]
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	005b      	lsls	r3, r3, #1
 8002bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbc:	693a      	ldr	r2, [r7, #16]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	693a      	ldr	r2, [r7, #16]
 8002bc6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002bce:	2201      	movs	r2, #1
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd6:	43db      	mvns	r3, r3
 8002bd8:	693a      	ldr	r2, [r7, #16]
 8002bda:	4013      	ands	r3, r2
 8002bdc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	091b      	lsrs	r3, r3, #4
 8002be4:	f003 0201 	and.w	r2, r3, #1
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	fa02 f303 	lsl.w	r3, r2, r3
 8002bee:	693a      	ldr	r2, [r7, #16]
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	693a      	ldr	r2, [r7, #16]
 8002bf8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	f003 0303 	and.w	r3, r3, #3
 8002c02:	2b03      	cmp	r3, #3
 8002c04:	d118      	bne.n	8002c38 <HAL_GPIO_Init+0x224>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c0a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	fa02 f303 	lsl.w	r3, r2, r3
 8002c14:	43db      	mvns	r3, r3
 8002c16:	693a      	ldr	r2, [r7, #16]
 8002c18:	4013      	ands	r3, r2
 8002c1a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	08db      	lsrs	r3, r3, #3
 8002c22:	f003 0201 	and.w	r2, r3, #1
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2c:	693a      	ldr	r2, [r7, #16]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	693a      	ldr	r2, [r7, #16]
 8002c36:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f003 0303 	and.w	r3, r3, #3
 8002c40:	2b03      	cmp	r3, #3
 8002c42:	d027      	beq.n	8002c94 <HAL_GPIO_Init+0x280>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d00b      	beq.n	8002c64 <HAL_GPIO_Init+0x250>
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d007      	beq.n	8002c64 <HAL_GPIO_Init+0x250>
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	2b02      	cmp	r3, #2
 8002c5a:	d003      	beq.n	8002c64 <HAL_GPIO_Init+0x250>
 8002c5c:	21dc      	movs	r1, #220	@ 0xdc
 8002c5e:	4869      	ldr	r0, [pc, #420]	@ (8002e04 <HAL_GPIO_Init+0x3f0>)
 8002c60:	f7fe fc90 	bl	8001584 <assert_failed>

        temp = GPIOx->PUPDR;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	005b      	lsls	r3, r3, #1
 8002c6e:	2203      	movs	r2, #3
 8002c70:	fa02 f303 	lsl.w	r3, r2, r3
 8002c74:	43db      	mvns	r3, r3
 8002c76:	693a      	ldr	r2, [r7, #16]
 8002c78:	4013      	ands	r3, r2
 8002c7a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	689a      	ldr	r2, [r3, #8]
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	005b      	lsls	r3, r3, #1
 8002c84:	fa02 f303 	lsl.w	r3, r2, r3
 8002c88:	693a      	ldr	r2, [r7, #16]
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	693a      	ldr	r2, [r7, #16]
 8002c92:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	f003 0303 	and.w	r3, r3, #3
 8002c9c:	2b02      	cmp	r3, #2
 8002c9e:	d14f      	bne.n	8002d40 <HAL_GPIO_Init+0x32c>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002ca6:	d01f      	beq.n	8002ce8 <HAL_GPIO_Init+0x2d4>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	4a57      	ldr	r2, [pc, #348]	@ (8002e08 <HAL_GPIO_Init+0x3f4>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d01b      	beq.n	8002ce8 <HAL_GPIO_Init+0x2d4>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	4a56      	ldr	r2, [pc, #344]	@ (8002e0c <HAL_GPIO_Init+0x3f8>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d017      	beq.n	8002ce8 <HAL_GPIO_Init+0x2d4>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	4a55      	ldr	r2, [pc, #340]	@ (8002e10 <HAL_GPIO_Init+0x3fc>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d013      	beq.n	8002ce8 <HAL_GPIO_Init+0x2d4>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	4a54      	ldr	r2, [pc, #336]	@ (8002e14 <HAL_GPIO_Init+0x400>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d00f      	beq.n	8002ce8 <HAL_GPIO_Init+0x2d4>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	4a53      	ldr	r2, [pc, #332]	@ (8002e18 <HAL_GPIO_Init+0x404>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d00b      	beq.n	8002ce8 <HAL_GPIO_Init+0x2d4>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	4a52      	ldr	r2, [pc, #328]	@ (8002e1c <HAL_GPIO_Init+0x408>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d007      	beq.n	8002ce8 <HAL_GPIO_Init+0x2d4>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	4a51      	ldr	r2, [pc, #324]	@ (8002e20 <HAL_GPIO_Init+0x40c>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d003      	beq.n	8002ce8 <HAL_GPIO_Init+0x2d4>
 8002ce0:	21e8      	movs	r1, #232	@ 0xe8
 8002ce2:	4848      	ldr	r0, [pc, #288]	@ (8002e04 <HAL_GPIO_Init+0x3f0>)
 8002ce4:	f7fe fc4e 	bl	8001584 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	691b      	ldr	r3, [r3, #16]
 8002cec:	2b0f      	cmp	r3, #15
 8002cee:	d903      	bls.n	8002cf8 <HAL_GPIO_Init+0x2e4>
 8002cf0:	21e9      	movs	r1, #233	@ 0xe9
 8002cf2:	4844      	ldr	r0, [pc, #272]	@ (8002e04 <HAL_GPIO_Init+0x3f0>)
 8002cf4:	f7fe fc46 	bl	8001584 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	08da      	lsrs	r2, r3, #3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	3208      	adds	r2, #8
 8002d00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d04:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	f003 0307 	and.w	r3, r3, #7
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	220f      	movs	r2, #15
 8002d10:	fa02 f303 	lsl.w	r3, r2, r3
 8002d14:	43db      	mvns	r3, r3
 8002d16:	693a      	ldr	r2, [r7, #16]
 8002d18:	4013      	ands	r3, r2
 8002d1a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	691a      	ldr	r2, [r3, #16]
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	f003 0307 	and.w	r3, r3, #7
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2c:	693a      	ldr	r2, [r7, #16]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	08da      	lsrs	r2, r3, #3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	3208      	adds	r2, #8
 8002d3a:	6939      	ldr	r1, [r7, #16]
 8002d3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	005b      	lsls	r3, r3, #1
 8002d4a:	2203      	movs	r2, #3
 8002d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d50:	43db      	mvns	r3, r3
 8002d52:	693a      	ldr	r2, [r7, #16]
 8002d54:	4013      	ands	r3, r2
 8002d56:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f003 0203 	and.w	r2, r3, #3
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	005b      	lsls	r3, r3, #1
 8002d64:	fa02 f303 	lsl.w	r3, r2, r3
 8002d68:	693a      	ldr	r2, [r7, #16]
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	693a      	ldr	r2, [r7, #16]
 8002d72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	f000 80c1 	beq.w	8002f04 <HAL_GPIO_Init+0x4f0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d82:	4b28      	ldr	r3, [pc, #160]	@ (8002e24 <HAL_GPIO_Init+0x410>)
 8002d84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d86:	4a27      	ldr	r2, [pc, #156]	@ (8002e24 <HAL_GPIO_Init+0x410>)
 8002d88:	f043 0301 	orr.w	r3, r3, #1
 8002d8c:	6613      	str	r3, [r2, #96]	@ 0x60
 8002d8e:	4b25      	ldr	r3, [pc, #148]	@ (8002e24 <HAL_GPIO_Init+0x410>)
 8002d90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d92:	f003 0301 	and.w	r3, r3, #1
 8002d96:	60bb      	str	r3, [r7, #8]
 8002d98:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002d9a:	4a23      	ldr	r2, [pc, #140]	@ (8002e28 <HAL_GPIO_Init+0x414>)
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	089b      	lsrs	r3, r3, #2
 8002da0:	3302      	adds	r3, #2
 8002da2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002da6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	f003 0303 	and.w	r3, r3, #3
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	220f      	movs	r2, #15
 8002db2:	fa02 f303 	lsl.w	r3, r2, r3
 8002db6:	43db      	mvns	r3, r3
 8002db8:	693a      	ldr	r2, [r7, #16]
 8002dba:	4013      	ands	r3, r2
 8002dbc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002dc4:	d03a      	beq.n	8002e3c <HAL_GPIO_Init+0x428>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4a0f      	ldr	r2, [pc, #60]	@ (8002e08 <HAL_GPIO_Init+0x3f4>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d034      	beq.n	8002e38 <HAL_GPIO_Init+0x424>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4a0e      	ldr	r2, [pc, #56]	@ (8002e0c <HAL_GPIO_Init+0x3f8>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d02e      	beq.n	8002e34 <HAL_GPIO_Init+0x420>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4a0d      	ldr	r2, [pc, #52]	@ (8002e10 <HAL_GPIO_Init+0x3fc>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d028      	beq.n	8002e30 <HAL_GPIO_Init+0x41c>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4a0c      	ldr	r2, [pc, #48]	@ (8002e14 <HAL_GPIO_Init+0x400>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d022      	beq.n	8002e2c <HAL_GPIO_Init+0x418>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4a0b      	ldr	r2, [pc, #44]	@ (8002e18 <HAL_GPIO_Init+0x404>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d007      	beq.n	8002dfe <HAL_GPIO_Init+0x3ea>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4a0a      	ldr	r2, [pc, #40]	@ (8002e1c <HAL_GPIO_Init+0x408>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d101      	bne.n	8002dfa <HAL_GPIO_Init+0x3e6>
 8002df6:	2306      	movs	r3, #6
 8002df8:	e021      	b.n	8002e3e <HAL_GPIO_Init+0x42a>
 8002dfa:	2307      	movs	r3, #7
 8002dfc:	e01f      	b.n	8002e3e <HAL_GPIO_Init+0x42a>
 8002dfe:	2305      	movs	r3, #5
 8002e00:	e01d      	b.n	8002e3e <HAL_GPIO_Init+0x42a>
 8002e02:	bf00      	nop
 8002e04:	08009138 	.word	0x08009138
 8002e08:	48000400 	.word	0x48000400
 8002e0c:	48000800 	.word	0x48000800
 8002e10:	48000c00 	.word	0x48000c00
 8002e14:	48001000 	.word	0x48001000
 8002e18:	48001400 	.word	0x48001400
 8002e1c:	48001800 	.word	0x48001800
 8002e20:	48001c00 	.word	0x48001c00
 8002e24:	40021000 	.word	0x40021000
 8002e28:	40010000 	.word	0x40010000
 8002e2c:	2304      	movs	r3, #4
 8002e2e:	e006      	b.n	8002e3e <HAL_GPIO_Init+0x42a>
 8002e30:	2303      	movs	r3, #3
 8002e32:	e004      	b.n	8002e3e <HAL_GPIO_Init+0x42a>
 8002e34:	2302      	movs	r3, #2
 8002e36:	e002      	b.n	8002e3e <HAL_GPIO_Init+0x42a>
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e000      	b.n	8002e3e <HAL_GPIO_Init+0x42a>
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	697a      	ldr	r2, [r7, #20]
 8002e40:	f002 0203 	and.w	r2, r2, #3
 8002e44:	0092      	lsls	r2, r2, #2
 8002e46:	4093      	lsls	r3, r2
 8002e48:	693a      	ldr	r2, [r7, #16]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002e4e:	4935      	ldr	r1, [pc, #212]	@ (8002f24 <HAL_GPIO_Init+0x510>)
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	089b      	lsrs	r3, r3, #2
 8002e54:	3302      	adds	r3, #2
 8002e56:	693a      	ldr	r2, [r7, #16]
 8002e58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002e5c:	4b32      	ldr	r3, [pc, #200]	@ (8002f28 <HAL_GPIO_Init+0x514>)
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	43db      	mvns	r3, r3
 8002e66:	693a      	ldr	r2, [r7, #16]
 8002e68:	4013      	ands	r3, r2
 8002e6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d003      	beq.n	8002e80 <HAL_GPIO_Init+0x46c>
        {
          temp |= iocurrent;
 8002e78:	693a      	ldr	r2, [r7, #16]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002e80:	4a29      	ldr	r2, [pc, #164]	@ (8002f28 <HAL_GPIO_Init+0x514>)
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002e86:	4b28      	ldr	r3, [pc, #160]	@ (8002f28 <HAL_GPIO_Init+0x514>)
 8002e88:	68db      	ldr	r3, [r3, #12]
 8002e8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	43db      	mvns	r3, r3
 8002e90:	693a      	ldr	r2, [r7, #16]
 8002e92:	4013      	ands	r3, r2
 8002e94:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d003      	beq.n	8002eaa <HAL_GPIO_Init+0x496>
        {
          temp |= iocurrent;
 8002ea2:	693a      	ldr	r2, [r7, #16]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002eaa:	4a1f      	ldr	r2, [pc, #124]	@ (8002f28 <HAL_GPIO_Init+0x514>)
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002eb0:	4b1d      	ldr	r3, [pc, #116]	@ (8002f28 <HAL_GPIO_Init+0x514>)
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	43db      	mvns	r3, r3
 8002eba:	693a      	ldr	r2, [r7, #16]
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d003      	beq.n	8002ed4 <HAL_GPIO_Init+0x4c0>
        {
          temp |= iocurrent;
 8002ecc:	693a      	ldr	r2, [r7, #16]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002ed4:	4a14      	ldr	r2, [pc, #80]	@ (8002f28 <HAL_GPIO_Init+0x514>)
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002eda:	4b13      	ldr	r3, [pc, #76]	@ (8002f28 <HAL_GPIO_Init+0x514>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	43db      	mvns	r3, r3
 8002ee4:	693a      	ldr	r2, [r7, #16]
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d003      	beq.n	8002efe <HAL_GPIO_Init+0x4ea>
        {
          temp |= iocurrent;
 8002ef6:	693a      	ldr	r2, [r7, #16]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	4313      	orrs	r3, r2
 8002efc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002efe:	4a0a      	ldr	r2, [pc, #40]	@ (8002f28 <HAL_GPIO_Init+0x514>)
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	3301      	adds	r3, #1
 8002f08:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	fa22 f303 	lsr.w	r3, r2, r3
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	f47f ae13 	bne.w	8002b40 <HAL_GPIO_Init+0x12c>
  }
}
 8002f1a:	bf00      	nop
 8002f1c:	bf00      	nop
 8002f1e:	3718      	adds	r7, #24
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	40010000 	.word	0x40010000
 8002f28:	40010400 	.word	0x40010400

08002f2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b082      	sub	sp, #8
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	460b      	mov	r3, r1
 8002f36:	807b      	strh	r3, [r7, #2]
 8002f38:	4613      	mov	r3, r2
 8002f3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002f3c:	887b      	ldrh	r3, [r7, #2]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d104      	bne.n	8002f4c <HAL_GPIO_WritePin+0x20>
 8002f42:	f44f 71d7 	mov.w	r1, #430	@ 0x1ae
 8002f46:	480e      	ldr	r0, [pc, #56]	@ (8002f80 <HAL_GPIO_WritePin+0x54>)
 8002f48:	f7fe fb1c 	bl	8001584 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8002f4c:	787b      	ldrb	r3, [r7, #1]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d007      	beq.n	8002f62 <HAL_GPIO_WritePin+0x36>
 8002f52:	787b      	ldrb	r3, [r7, #1]
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d004      	beq.n	8002f62 <HAL_GPIO_WritePin+0x36>
 8002f58:	f240 11af 	movw	r1, #431	@ 0x1af
 8002f5c:	4808      	ldr	r0, [pc, #32]	@ (8002f80 <HAL_GPIO_WritePin+0x54>)
 8002f5e:	f7fe fb11 	bl	8001584 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8002f62:	787b      	ldrb	r3, [r7, #1]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d003      	beq.n	8002f70 <HAL_GPIO_WritePin+0x44>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f68:	887a      	ldrh	r2, [r7, #2]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002f6e:	e002      	b.n	8002f76 <HAL_GPIO_WritePin+0x4a>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002f70:	887a      	ldrh	r2, [r7, #2]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002f76:	bf00      	nop
 8002f78:	3708      	adds	r7, #8
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	08009138 	.word	0x08009138

08002f84 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002f84:	b480      	push	{r7}
 8002f86:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002f88:	4b04      	ldr	r3, [pc, #16]	@ (8002f9c <HAL_PWREx_GetVoltageRange+0x18>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	46bd      	mov	sp, r7
 8002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f98:	4770      	bx	lr
 8002f9a:	bf00      	nop
 8002f9c:	40007000 	.word	0x40007000

08002fa0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b084      	sub	sp, #16
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002fae:	d007      	beq.n	8002fc0 <HAL_PWREx_ControlVoltageScaling+0x20>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fb6:	d003      	beq.n	8002fc0 <HAL_PWREx_ControlVoltageScaling+0x20>
 8002fb8:	21a7      	movs	r1, #167	@ 0xa7
 8002fba:	4826      	ldr	r0, [pc, #152]	@ (8003054 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8002fbc:	f7fe fae2 	bl	8001584 <assert_failed>
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002fc6:	d130      	bne.n	800302a <HAL_PWREx_ControlVoltageScaling+0x8a>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002fc8:	4b23      	ldr	r3, [pc, #140]	@ (8003058 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002fd0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002fd4:	d038      	beq.n	8003048 <HAL_PWREx_ControlVoltageScaling+0xa8>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002fd6:	4b20      	ldr	r3, [pc, #128]	@ (8003058 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002fde:	4a1e      	ldr	r2, [pc, #120]	@ (8003058 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8002fe0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002fe4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002fe6:	4b1d      	ldr	r3, [pc, #116]	@ (800305c <HAL_PWREx_ControlVoltageScaling+0xbc>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	2232      	movs	r2, #50	@ 0x32
 8002fec:	fb02 f303 	mul.w	r3, r2, r3
 8002ff0:	4a1b      	ldr	r2, [pc, #108]	@ (8003060 <HAL_PWREx_ControlVoltageScaling+0xc0>)
 8002ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ff6:	0c9b      	lsrs	r3, r3, #18
 8002ff8:	3301      	adds	r3, #1
 8002ffa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ffc:	e002      	b.n	8003004 <HAL_PWREx_ControlVoltageScaling+0x64>
      {
        wait_loop_index--;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	3b01      	subs	r3, #1
 8003002:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003004:	4b14      	ldr	r3, [pc, #80]	@ (8003058 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8003006:	695b      	ldr	r3, [r3, #20]
 8003008:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800300c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003010:	d102      	bne.n	8003018 <HAL_PWREx_ControlVoltageScaling+0x78>
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d1f2      	bne.n	8002ffe <HAL_PWREx_ControlVoltageScaling+0x5e>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003018:	4b0f      	ldr	r3, [pc, #60]	@ (8003058 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 800301a:	695b      	ldr	r3, [r3, #20]
 800301c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003020:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003024:	d110      	bne.n	8003048 <HAL_PWREx_ControlVoltageScaling+0xa8>
      {
        return HAL_TIMEOUT;
 8003026:	2303      	movs	r3, #3
 8003028:	e00f      	b.n	800304a <HAL_PWREx_ControlVoltageScaling+0xaa>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800302a:	4b0b      	ldr	r3, [pc, #44]	@ (8003058 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003032:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003036:	d007      	beq.n	8003048 <HAL_PWREx_ControlVoltageScaling+0xa8>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003038:	4b07      	ldr	r3, [pc, #28]	@ (8003058 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003040:	4a05      	ldr	r2, [pc, #20]	@ (8003058 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8003042:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003046:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003048:	2300      	movs	r3, #0
}
 800304a:	4618      	mov	r0, r3
 800304c:	3710      	adds	r7, #16
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	08009174 	.word	0x08009174
 8003058:	40007000 	.word	0x40007000
 800305c:	20000004 	.word	0x20000004
 8003060:	431bde83 	.word	0x431bde83

08003064 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b088      	sub	sp, #32
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d102      	bne.n	8003078 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	f000 bcef 	b.w	8003a56 <HAL_RCC_OscConfig+0x9f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d008      	beq.n	8003092 <HAL_RCC_OscConfig+0x2e>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	2b1f      	cmp	r3, #31
 8003086:	d904      	bls.n	8003092 <HAL_RCC_OscConfig+0x2e>
 8003088:	f44f 71d1 	mov.w	r1, #418	@ 0x1a2
 800308c:	489a      	ldr	r0, [pc, #616]	@ (80032f8 <HAL_RCC_OscConfig+0x294>)
 800308e:	f7fe fa79 	bl	8001584 <assert_failed>

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003092:	4b9a      	ldr	r3, [pc, #616]	@ (80032fc <HAL_RCC_OscConfig+0x298>)
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	f003 030c 	and.w	r3, r3, #12
 800309a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800309c:	4b97      	ldr	r3, [pc, #604]	@ (80032fc <HAL_RCC_OscConfig+0x298>)
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	f003 0303 	and.w	r3, r3, #3
 80030a4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 0310 	and.w	r3, r3, #16
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	f000 813d 	beq.w	800332e <HAL_RCC_OscConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	699b      	ldr	r3, [r3, #24]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d008      	beq.n	80030ce <HAL_RCC_OscConfig+0x6a>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	699b      	ldr	r3, [r3, #24]
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d004      	beq.n	80030ce <HAL_RCC_OscConfig+0x6a>
 80030c4:	f240 11ab 	movw	r1, #427	@ 0x1ab
 80030c8:	488b      	ldr	r0, [pc, #556]	@ (80032f8 <HAL_RCC_OscConfig+0x294>)
 80030ca:	f7fe fa5b 	bl	8001584 <assert_failed>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	69db      	ldr	r3, [r3, #28]
 80030d2:	2bff      	cmp	r3, #255	@ 0xff
 80030d4:	d904      	bls.n	80030e0 <HAL_RCC_OscConfig+0x7c>
 80030d6:	f44f 71d6 	mov.w	r1, #428	@ 0x1ac
 80030da:	4887      	ldr	r0, [pc, #540]	@ (80032f8 <HAL_RCC_OscConfig+0x294>)
 80030dc:	f7fe fa52 	bl	8001584 <assert_failed>
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6a1b      	ldr	r3, [r3, #32]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d030      	beq.n	800314a <HAL_RCC_OscConfig+0xe6>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6a1b      	ldr	r3, [r3, #32]
 80030ec:	2b10      	cmp	r3, #16
 80030ee:	d02c      	beq.n	800314a <HAL_RCC_OscConfig+0xe6>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6a1b      	ldr	r3, [r3, #32]
 80030f4:	2b20      	cmp	r3, #32
 80030f6:	d028      	beq.n	800314a <HAL_RCC_OscConfig+0xe6>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6a1b      	ldr	r3, [r3, #32]
 80030fc:	2b30      	cmp	r3, #48	@ 0x30
 80030fe:	d024      	beq.n	800314a <HAL_RCC_OscConfig+0xe6>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6a1b      	ldr	r3, [r3, #32]
 8003104:	2b40      	cmp	r3, #64	@ 0x40
 8003106:	d020      	beq.n	800314a <HAL_RCC_OscConfig+0xe6>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6a1b      	ldr	r3, [r3, #32]
 800310c:	2b50      	cmp	r3, #80	@ 0x50
 800310e:	d01c      	beq.n	800314a <HAL_RCC_OscConfig+0xe6>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6a1b      	ldr	r3, [r3, #32]
 8003114:	2b60      	cmp	r3, #96	@ 0x60
 8003116:	d018      	beq.n	800314a <HAL_RCC_OscConfig+0xe6>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6a1b      	ldr	r3, [r3, #32]
 800311c:	2b70      	cmp	r3, #112	@ 0x70
 800311e:	d014      	beq.n	800314a <HAL_RCC_OscConfig+0xe6>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6a1b      	ldr	r3, [r3, #32]
 8003124:	2b80      	cmp	r3, #128	@ 0x80
 8003126:	d010      	beq.n	800314a <HAL_RCC_OscConfig+0xe6>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6a1b      	ldr	r3, [r3, #32]
 800312c:	2b90      	cmp	r3, #144	@ 0x90
 800312e:	d00c      	beq.n	800314a <HAL_RCC_OscConfig+0xe6>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6a1b      	ldr	r3, [r3, #32]
 8003134:	2ba0      	cmp	r3, #160	@ 0xa0
 8003136:	d008      	beq.n	800314a <HAL_RCC_OscConfig+0xe6>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6a1b      	ldr	r3, [r3, #32]
 800313c:	2bb0      	cmp	r3, #176	@ 0xb0
 800313e:	d004      	beq.n	800314a <HAL_RCC_OscConfig+0xe6>
 8003140:	f240 11ad 	movw	r1, #429	@ 0x1ad
 8003144:	486c      	ldr	r0, [pc, #432]	@ (80032f8 <HAL_RCC_OscConfig+0x294>)
 8003146:	f7fe fa1d 	bl	8001584 <assert_failed>

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800314a:	69bb      	ldr	r3, [r7, #24]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d007      	beq.n	8003160 <HAL_RCC_OscConfig+0xfc>
 8003150:	69bb      	ldr	r3, [r7, #24]
 8003152:	2b0c      	cmp	r3, #12
 8003154:	f040 808e 	bne.w	8003274 <HAL_RCC_OscConfig+0x210>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	2b01      	cmp	r3, #1
 800315c:	f040 808a 	bne.w	8003274 <HAL_RCC_OscConfig+0x210>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003160:	4b66      	ldr	r3, [pc, #408]	@ (80032fc <HAL_RCC_OscConfig+0x298>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 0302 	and.w	r3, r3, #2
 8003168:	2b00      	cmp	r3, #0
 800316a:	d006      	beq.n	800317a <HAL_RCC_OscConfig+0x116>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	699b      	ldr	r3, [r3, #24]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d102      	bne.n	800317a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	f000 bc6e 	b.w	8003a56 <HAL_RCC_OscConfig+0x9f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6a1a      	ldr	r2, [r3, #32]
 800317e:	4b5f      	ldr	r3, [pc, #380]	@ (80032fc <HAL_RCC_OscConfig+0x298>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 0308 	and.w	r3, r3, #8
 8003186:	2b00      	cmp	r3, #0
 8003188:	d004      	beq.n	8003194 <HAL_RCC_OscConfig+0x130>
 800318a:	4b5c      	ldr	r3, [pc, #368]	@ (80032fc <HAL_RCC_OscConfig+0x298>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003192:	e005      	b.n	80031a0 <HAL_RCC_OscConfig+0x13c>
 8003194:	4b59      	ldr	r3, [pc, #356]	@ (80032fc <HAL_RCC_OscConfig+0x298>)
 8003196:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800319a:	091b      	lsrs	r3, r3, #4
 800319c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d224      	bcs.n	80031ee <HAL_RCC_OscConfig+0x18a>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6a1b      	ldr	r3, [r3, #32]
 80031a8:	4618      	mov	r0, r3
 80031aa:	f000 fec1 	bl	8003f30 <RCC_SetFlashLatencyFromMSIRange>
 80031ae:	4603      	mov	r3, r0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d002      	beq.n	80031ba <HAL_RCC_OscConfig+0x156>
          {
            return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	f000 bc4e 	b.w	8003a56 <HAL_RCC_OscConfig+0x9f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031ba:	4b50      	ldr	r3, [pc, #320]	@ (80032fc <HAL_RCC_OscConfig+0x298>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a4f      	ldr	r2, [pc, #316]	@ (80032fc <HAL_RCC_OscConfig+0x298>)
 80031c0:	f043 0308 	orr.w	r3, r3, #8
 80031c4:	6013      	str	r3, [r2, #0]
 80031c6:	4b4d      	ldr	r3, [pc, #308]	@ (80032fc <HAL_RCC_OscConfig+0x298>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6a1b      	ldr	r3, [r3, #32]
 80031d2:	494a      	ldr	r1, [pc, #296]	@ (80032fc <HAL_RCC_OscConfig+0x298>)
 80031d4:	4313      	orrs	r3, r2
 80031d6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031d8:	4b48      	ldr	r3, [pc, #288]	@ (80032fc <HAL_RCC_OscConfig+0x298>)
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	69db      	ldr	r3, [r3, #28]
 80031e4:	021b      	lsls	r3, r3, #8
 80031e6:	4945      	ldr	r1, [pc, #276]	@ (80032fc <HAL_RCC_OscConfig+0x298>)
 80031e8:	4313      	orrs	r3, r2
 80031ea:	604b      	str	r3, [r1, #4]
 80031ec:	e026      	b.n	800323c <HAL_RCC_OscConfig+0x1d8>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031ee:	4b43      	ldr	r3, [pc, #268]	@ (80032fc <HAL_RCC_OscConfig+0x298>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a42      	ldr	r2, [pc, #264]	@ (80032fc <HAL_RCC_OscConfig+0x298>)
 80031f4:	f043 0308 	orr.w	r3, r3, #8
 80031f8:	6013      	str	r3, [r2, #0]
 80031fa:	4b40      	ldr	r3, [pc, #256]	@ (80032fc <HAL_RCC_OscConfig+0x298>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6a1b      	ldr	r3, [r3, #32]
 8003206:	493d      	ldr	r1, [pc, #244]	@ (80032fc <HAL_RCC_OscConfig+0x298>)
 8003208:	4313      	orrs	r3, r2
 800320a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800320c:	4b3b      	ldr	r3, [pc, #236]	@ (80032fc <HAL_RCC_OscConfig+0x298>)
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	69db      	ldr	r3, [r3, #28]
 8003218:	021b      	lsls	r3, r3, #8
 800321a:	4938      	ldr	r1, [pc, #224]	@ (80032fc <HAL_RCC_OscConfig+0x298>)
 800321c:	4313      	orrs	r3, r2
 800321e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003220:	69bb      	ldr	r3, [r7, #24]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d10a      	bne.n	800323c <HAL_RCC_OscConfig+0x1d8>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6a1b      	ldr	r3, [r3, #32]
 800322a:	4618      	mov	r0, r3
 800322c:	f000 fe80 	bl	8003f30 <RCC_SetFlashLatencyFromMSIRange>
 8003230:	4603      	mov	r3, r0
 8003232:	2b00      	cmp	r3, #0
 8003234:	d002      	beq.n	800323c <HAL_RCC_OscConfig+0x1d8>
            {
              return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	f000 bc0d 	b.w	8003a56 <HAL_RCC_OscConfig+0x9f2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800323c:	f000 fdb4 	bl	8003da8 <HAL_RCC_GetSysClockFreq>
 8003240:	4602      	mov	r2, r0
 8003242:	4b2e      	ldr	r3, [pc, #184]	@ (80032fc <HAL_RCC_OscConfig+0x298>)
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	091b      	lsrs	r3, r3, #4
 8003248:	f003 030f 	and.w	r3, r3, #15
 800324c:	492c      	ldr	r1, [pc, #176]	@ (8003300 <HAL_RCC_OscConfig+0x29c>)
 800324e:	5ccb      	ldrb	r3, [r1, r3]
 8003250:	f003 031f 	and.w	r3, r3, #31
 8003254:	fa22 f303 	lsr.w	r3, r2, r3
 8003258:	4a2a      	ldr	r2, [pc, #168]	@ (8003304 <HAL_RCC_OscConfig+0x2a0>)
 800325a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800325c:	4b2a      	ldr	r3, [pc, #168]	@ (8003308 <HAL_RCC_OscConfig+0x2a4>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4618      	mov	r0, r3
 8003262:	f7fe fef5 	bl	8002050 <HAL_InitTick>
 8003266:	4603      	mov	r3, r0
 8003268:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800326a:	7bfb      	ldrb	r3, [r7, #15]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d05d      	beq.n	800332c <HAL_RCC_OscConfig+0x2c8>
        {
          return status;
 8003270:	7bfb      	ldrb	r3, [r7, #15]
 8003272:	e3f0      	b.n	8003a56 <HAL_RCC_OscConfig+0x9f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	699b      	ldr	r3, [r3, #24]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d032      	beq.n	80032e2 <HAL_RCC_OscConfig+0x27e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800327c:	4b1f      	ldr	r3, [pc, #124]	@ (80032fc <HAL_RCC_OscConfig+0x298>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a1e      	ldr	r2, [pc, #120]	@ (80032fc <HAL_RCC_OscConfig+0x298>)
 8003282:	f043 0301 	orr.w	r3, r3, #1
 8003286:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003288:	f7fe ff32 	bl	80020f0 <HAL_GetTick>
 800328c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800328e:	e008      	b.n	80032a2 <HAL_RCC_OscConfig+0x23e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003290:	f7fe ff2e 	bl	80020f0 <HAL_GetTick>
 8003294:	4602      	mov	r2, r0
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	2b02      	cmp	r3, #2
 800329c:	d901      	bls.n	80032a2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e3d9      	b.n	8003a56 <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80032a2:	4b16      	ldr	r3, [pc, #88]	@ (80032fc <HAL_RCC_OscConfig+0x298>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 0302 	and.w	r3, r3, #2
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d0f0      	beq.n	8003290 <HAL_RCC_OscConfig+0x22c>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80032ae:	4b13      	ldr	r3, [pc, #76]	@ (80032fc <HAL_RCC_OscConfig+0x298>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a12      	ldr	r2, [pc, #72]	@ (80032fc <HAL_RCC_OscConfig+0x298>)
 80032b4:	f043 0308 	orr.w	r3, r3, #8
 80032b8:	6013      	str	r3, [r2, #0]
 80032ba:	4b10      	ldr	r3, [pc, #64]	@ (80032fc <HAL_RCC_OscConfig+0x298>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6a1b      	ldr	r3, [r3, #32]
 80032c6:	490d      	ldr	r1, [pc, #52]	@ (80032fc <HAL_RCC_OscConfig+0x298>)
 80032c8:	4313      	orrs	r3, r2
 80032ca:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80032cc:	4b0b      	ldr	r3, [pc, #44]	@ (80032fc <HAL_RCC_OscConfig+0x298>)
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	69db      	ldr	r3, [r3, #28]
 80032d8:	021b      	lsls	r3, r3, #8
 80032da:	4908      	ldr	r1, [pc, #32]	@ (80032fc <HAL_RCC_OscConfig+0x298>)
 80032dc:	4313      	orrs	r3, r2
 80032de:	604b      	str	r3, [r1, #4]
 80032e0:	e025      	b.n	800332e <HAL_RCC_OscConfig+0x2ca>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80032e2:	4b06      	ldr	r3, [pc, #24]	@ (80032fc <HAL_RCC_OscConfig+0x298>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a05      	ldr	r2, [pc, #20]	@ (80032fc <HAL_RCC_OscConfig+0x298>)
 80032e8:	f023 0301 	bic.w	r3, r3, #1
 80032ec:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80032ee:	f7fe feff 	bl	80020f0 <HAL_GetTick>
 80032f2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80032f4:	e013      	b.n	800331e <HAL_RCC_OscConfig+0x2ba>
 80032f6:	bf00      	nop
 80032f8:	080091b0 	.word	0x080091b0
 80032fc:	40021000 	.word	0x40021000
 8003300:	0800930c 	.word	0x0800930c
 8003304:	20000004 	.word	0x20000004
 8003308:	20000008 	.word	0x20000008
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800330c:	f7fe fef0 	bl	80020f0 <HAL_GetTick>
 8003310:	4602      	mov	r2, r0
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	2b02      	cmp	r3, #2
 8003318:	d901      	bls.n	800331e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	e39b      	b.n	8003a56 <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800331e:	4b97      	ldr	r3, [pc, #604]	@ (800357c <HAL_RCC_OscConfig+0x518>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0302 	and.w	r3, r3, #2
 8003326:	2b00      	cmp	r3, #0
 8003328:	d1f0      	bne.n	800330c <HAL_RCC_OscConfig+0x2a8>
 800332a:	e000      	b.n	800332e <HAL_RCC_OscConfig+0x2ca>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800332c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 0301 	and.w	r3, r3, #1
 8003336:	2b00      	cmp	r3, #0
 8003338:	d07e      	beq.n	8003438 <HAL_RCC_OscConfig+0x3d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d00e      	beq.n	8003360 <HAL_RCC_OscConfig+0x2fc>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800334a:	d009      	beq.n	8003360 <HAL_RCC_OscConfig+0x2fc>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003354:	d004      	beq.n	8003360 <HAL_RCC_OscConfig+0x2fc>
 8003356:	f240 2119 	movw	r1, #537	@ 0x219
 800335a:	4889      	ldr	r0, [pc, #548]	@ (8003580 <HAL_RCC_OscConfig+0x51c>)
 800335c:	f7fe f912 	bl	8001584 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003360:	69bb      	ldr	r3, [r7, #24]
 8003362:	2b08      	cmp	r3, #8
 8003364:	d005      	beq.n	8003372 <HAL_RCC_OscConfig+0x30e>
 8003366:	69bb      	ldr	r3, [r7, #24]
 8003368:	2b0c      	cmp	r3, #12
 800336a:	d10e      	bne.n	800338a <HAL_RCC_OscConfig+0x326>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	2b03      	cmp	r3, #3
 8003370:	d10b      	bne.n	800338a <HAL_RCC_OscConfig+0x326>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003372:	4b82      	ldr	r3, [pc, #520]	@ (800357c <HAL_RCC_OscConfig+0x518>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800337a:	2b00      	cmp	r3, #0
 800337c:	d05b      	beq.n	8003436 <HAL_RCC_OscConfig+0x3d2>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d157      	bne.n	8003436 <HAL_RCC_OscConfig+0x3d2>
      {
        return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e365      	b.n	8003a56 <HAL_RCC_OscConfig+0x9f2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003392:	d106      	bne.n	80033a2 <HAL_RCC_OscConfig+0x33e>
 8003394:	4b79      	ldr	r3, [pc, #484]	@ (800357c <HAL_RCC_OscConfig+0x518>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a78      	ldr	r2, [pc, #480]	@ (800357c <HAL_RCC_OscConfig+0x518>)
 800339a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800339e:	6013      	str	r3, [r2, #0]
 80033a0:	e01d      	b.n	80033de <HAL_RCC_OscConfig+0x37a>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80033aa:	d10c      	bne.n	80033c6 <HAL_RCC_OscConfig+0x362>
 80033ac:	4b73      	ldr	r3, [pc, #460]	@ (800357c <HAL_RCC_OscConfig+0x518>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a72      	ldr	r2, [pc, #456]	@ (800357c <HAL_RCC_OscConfig+0x518>)
 80033b2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80033b6:	6013      	str	r3, [r2, #0]
 80033b8:	4b70      	ldr	r3, [pc, #448]	@ (800357c <HAL_RCC_OscConfig+0x518>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a6f      	ldr	r2, [pc, #444]	@ (800357c <HAL_RCC_OscConfig+0x518>)
 80033be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033c2:	6013      	str	r3, [r2, #0]
 80033c4:	e00b      	b.n	80033de <HAL_RCC_OscConfig+0x37a>
 80033c6:	4b6d      	ldr	r3, [pc, #436]	@ (800357c <HAL_RCC_OscConfig+0x518>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a6c      	ldr	r2, [pc, #432]	@ (800357c <HAL_RCC_OscConfig+0x518>)
 80033cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033d0:	6013      	str	r3, [r2, #0]
 80033d2:	4b6a      	ldr	r3, [pc, #424]	@ (800357c <HAL_RCC_OscConfig+0x518>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a69      	ldr	r2, [pc, #420]	@ (800357c <HAL_RCC_OscConfig+0x518>)
 80033d8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80033dc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d013      	beq.n	800340e <HAL_RCC_OscConfig+0x3aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033e6:	f7fe fe83 	bl	80020f0 <HAL_GetTick>
 80033ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033ec:	e008      	b.n	8003400 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033ee:	f7fe fe7f 	bl	80020f0 <HAL_GetTick>
 80033f2:	4602      	mov	r2, r0
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	1ad3      	subs	r3, r2, r3
 80033f8:	2b64      	cmp	r3, #100	@ 0x64
 80033fa:	d901      	bls.n	8003400 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 80033fc:	2303      	movs	r3, #3
 80033fe:	e32a      	b.n	8003a56 <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003400:	4b5e      	ldr	r3, [pc, #376]	@ (800357c <HAL_RCC_OscConfig+0x518>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003408:	2b00      	cmp	r3, #0
 800340a:	d0f0      	beq.n	80033ee <HAL_RCC_OscConfig+0x38a>
 800340c:	e014      	b.n	8003438 <HAL_RCC_OscConfig+0x3d4>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800340e:	f7fe fe6f 	bl	80020f0 <HAL_GetTick>
 8003412:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003414:	e008      	b.n	8003428 <HAL_RCC_OscConfig+0x3c4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003416:	f7fe fe6b 	bl	80020f0 <HAL_GetTick>
 800341a:	4602      	mov	r2, r0
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	1ad3      	subs	r3, r2, r3
 8003420:	2b64      	cmp	r3, #100	@ 0x64
 8003422:	d901      	bls.n	8003428 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8003424:	2303      	movs	r3, #3
 8003426:	e316      	b.n	8003a56 <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003428:	4b54      	ldr	r3, [pc, #336]	@ (800357c <HAL_RCC_OscConfig+0x518>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003430:	2b00      	cmp	r3, #0
 8003432:	d1f0      	bne.n	8003416 <HAL_RCC_OscConfig+0x3b2>
 8003434:	e000      	b.n	8003438 <HAL_RCC_OscConfig+0x3d4>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003436:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 0302 	and.w	r3, r3, #2
 8003440:	2b00      	cmp	r3, #0
 8003442:	d077      	beq.n	8003534 <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d009      	beq.n	8003460 <HAL_RCC_OscConfig+0x3fc>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	68db      	ldr	r3, [r3, #12]
 8003450:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003454:	d004      	beq.n	8003460 <HAL_RCC_OscConfig+0x3fc>
 8003456:	f44f 7113 	mov.w	r1, #588	@ 0x24c
 800345a:	4849      	ldr	r0, [pc, #292]	@ (8003580 <HAL_RCC_OscConfig+0x51c>)
 800345c:	f7fe f892 	bl	8001584 <assert_failed>
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	691b      	ldr	r3, [r3, #16]
 8003464:	2b1f      	cmp	r3, #31
 8003466:	d904      	bls.n	8003472 <HAL_RCC_OscConfig+0x40e>
 8003468:	f240 214d 	movw	r1, #589	@ 0x24d
 800346c:	4844      	ldr	r0, [pc, #272]	@ (8003580 <HAL_RCC_OscConfig+0x51c>)
 800346e:	f7fe f889 	bl	8001584 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003472:	69bb      	ldr	r3, [r7, #24]
 8003474:	2b04      	cmp	r3, #4
 8003476:	d005      	beq.n	8003484 <HAL_RCC_OscConfig+0x420>
 8003478:	69bb      	ldr	r3, [r7, #24]
 800347a:	2b0c      	cmp	r3, #12
 800347c:	d119      	bne.n	80034b2 <HAL_RCC_OscConfig+0x44e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	2b02      	cmp	r3, #2
 8003482:	d116      	bne.n	80034b2 <HAL_RCC_OscConfig+0x44e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003484:	4b3d      	ldr	r3, [pc, #244]	@ (800357c <HAL_RCC_OscConfig+0x518>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800348c:	2b00      	cmp	r3, #0
 800348e:	d005      	beq.n	800349c <HAL_RCC_OscConfig+0x438>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d101      	bne.n	800349c <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e2dc      	b.n	8003a56 <HAL_RCC_OscConfig+0x9f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800349c:	4b37      	ldr	r3, [pc, #220]	@ (800357c <HAL_RCC_OscConfig+0x518>)
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	691b      	ldr	r3, [r3, #16]
 80034a8:	061b      	lsls	r3, r3, #24
 80034aa:	4934      	ldr	r1, [pc, #208]	@ (800357c <HAL_RCC_OscConfig+0x518>)
 80034ac:	4313      	orrs	r3, r2
 80034ae:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80034b0:	e040      	b.n	8003534 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	68db      	ldr	r3, [r3, #12]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d023      	beq.n	8003502 <HAL_RCC_OscConfig+0x49e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034ba:	4b30      	ldr	r3, [pc, #192]	@ (800357c <HAL_RCC_OscConfig+0x518>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a2f      	ldr	r2, [pc, #188]	@ (800357c <HAL_RCC_OscConfig+0x518>)
 80034c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c6:	f7fe fe13 	bl	80020f0 <HAL_GetTick>
 80034ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034cc:	e008      	b.n	80034e0 <HAL_RCC_OscConfig+0x47c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034ce:	f7fe fe0f 	bl	80020f0 <HAL_GetTick>
 80034d2:	4602      	mov	r2, r0
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	1ad3      	subs	r3, r2, r3
 80034d8:	2b02      	cmp	r3, #2
 80034da:	d901      	bls.n	80034e0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80034dc:	2303      	movs	r3, #3
 80034de:	e2ba      	b.n	8003a56 <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034e0:	4b26      	ldr	r3, [pc, #152]	@ (800357c <HAL_RCC_OscConfig+0x518>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d0f0      	beq.n	80034ce <HAL_RCC_OscConfig+0x46a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034ec:	4b23      	ldr	r3, [pc, #140]	@ (800357c <HAL_RCC_OscConfig+0x518>)
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	691b      	ldr	r3, [r3, #16]
 80034f8:	061b      	lsls	r3, r3, #24
 80034fa:	4920      	ldr	r1, [pc, #128]	@ (800357c <HAL_RCC_OscConfig+0x518>)
 80034fc:	4313      	orrs	r3, r2
 80034fe:	604b      	str	r3, [r1, #4]
 8003500:	e018      	b.n	8003534 <HAL_RCC_OscConfig+0x4d0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003502:	4b1e      	ldr	r3, [pc, #120]	@ (800357c <HAL_RCC_OscConfig+0x518>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a1d      	ldr	r2, [pc, #116]	@ (800357c <HAL_RCC_OscConfig+0x518>)
 8003508:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800350c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800350e:	f7fe fdef 	bl	80020f0 <HAL_GetTick>
 8003512:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003514:	e008      	b.n	8003528 <HAL_RCC_OscConfig+0x4c4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003516:	f7fe fdeb 	bl	80020f0 <HAL_GetTick>
 800351a:	4602      	mov	r2, r0
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	1ad3      	subs	r3, r2, r3
 8003520:	2b02      	cmp	r3, #2
 8003522:	d901      	bls.n	8003528 <HAL_RCC_OscConfig+0x4c4>
          {
            return HAL_TIMEOUT;
 8003524:	2303      	movs	r3, #3
 8003526:	e296      	b.n	8003a56 <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003528:	4b14      	ldr	r3, [pc, #80]	@ (800357c <HAL_RCC_OscConfig+0x518>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003530:	2b00      	cmp	r3, #0
 8003532:	d1f0      	bne.n	8003516 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 0308 	and.w	r3, r3, #8
 800353c:	2b00      	cmp	r3, #0
 800353e:	d04e      	beq.n	80035de <HAL_RCC_OscConfig+0x57a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	695b      	ldr	r3, [r3, #20]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d008      	beq.n	800355a <HAL_RCC_OscConfig+0x4f6>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	695b      	ldr	r3, [r3, #20]
 800354c:	2b01      	cmp	r3, #1
 800354e:	d004      	beq.n	800355a <HAL_RCC_OscConfig+0x4f6>
 8003550:	f240 218d 	movw	r1, #653	@ 0x28d
 8003554:	480a      	ldr	r0, [pc, #40]	@ (8003580 <HAL_RCC_OscConfig+0x51c>)
 8003556:	f7fe f815 	bl	8001584 <assert_failed>

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	695b      	ldr	r3, [r3, #20]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d021      	beq.n	80035a6 <HAL_RCC_OscConfig+0x542>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003562:	4b06      	ldr	r3, [pc, #24]	@ (800357c <HAL_RCC_OscConfig+0x518>)
 8003564:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003568:	4a04      	ldr	r2, [pc, #16]	@ (800357c <HAL_RCC_OscConfig+0x518>)
 800356a:	f043 0301 	orr.w	r3, r3, #1
 800356e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003572:	f7fe fdbd 	bl	80020f0 <HAL_GetTick>
 8003576:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003578:	e00d      	b.n	8003596 <HAL_RCC_OscConfig+0x532>
 800357a:	bf00      	nop
 800357c:	40021000 	.word	0x40021000
 8003580:	080091b0 	.word	0x080091b0
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003584:	f7fe fdb4 	bl	80020f0 <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	2b02      	cmp	r3, #2
 8003590:	d901      	bls.n	8003596 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	e25f      	b.n	8003a56 <HAL_RCC_OscConfig+0x9f2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003596:	4b66      	ldr	r3, [pc, #408]	@ (8003730 <HAL_RCC_OscConfig+0x6cc>)
 8003598:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800359c:	f003 0302 	and.w	r3, r3, #2
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d0ef      	beq.n	8003584 <HAL_RCC_OscConfig+0x520>
 80035a4:	e01b      	b.n	80035de <HAL_RCC_OscConfig+0x57a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035a6:	4b62      	ldr	r3, [pc, #392]	@ (8003730 <HAL_RCC_OscConfig+0x6cc>)
 80035a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80035ac:	4a60      	ldr	r2, [pc, #384]	@ (8003730 <HAL_RCC_OscConfig+0x6cc>)
 80035ae:	f023 0301 	bic.w	r3, r3, #1
 80035b2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035b6:	f7fe fd9b 	bl	80020f0 <HAL_GetTick>
 80035ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80035bc:	e008      	b.n	80035d0 <HAL_RCC_OscConfig+0x56c>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035be:	f7fe fd97 	bl	80020f0 <HAL_GetTick>
 80035c2:	4602      	mov	r2, r0
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	1ad3      	subs	r3, r2, r3
 80035c8:	2b02      	cmp	r3, #2
 80035ca:	d901      	bls.n	80035d0 <HAL_RCC_OscConfig+0x56c>
        {
          return HAL_TIMEOUT;
 80035cc:	2303      	movs	r3, #3
 80035ce:	e242      	b.n	8003a56 <HAL_RCC_OscConfig+0x9f2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80035d0:	4b57      	ldr	r3, [pc, #348]	@ (8003730 <HAL_RCC_OscConfig+0x6cc>)
 80035d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80035d6:	f003 0302 	and.w	r3, r3, #2
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d1ef      	bne.n	80035be <HAL_RCC_OscConfig+0x55a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 0304 	and.w	r3, r3, #4
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	f000 80b8 	beq.w	800375c <HAL_RCC_OscConfig+0x6f8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035ec:	2300      	movs	r3, #0
 80035ee:	77fb      	strb	r3, [r7, #31]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d00c      	beq.n	8003612 <HAL_RCC_OscConfig+0x5ae>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d008      	beq.n	8003612 <HAL_RCC_OscConfig+0x5ae>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	2b05      	cmp	r3, #5
 8003606:	d004      	beq.n	8003612 <HAL_RCC_OscConfig+0x5ae>
 8003608:	f44f 7138 	mov.w	r1, #736	@ 0x2e0
 800360c:	4849      	ldr	r0, [pc, #292]	@ (8003734 <HAL_RCC_OscConfig+0x6d0>)
 800360e:	f7fd ffb9 	bl	8001584 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003612:	4b47      	ldr	r3, [pc, #284]	@ (8003730 <HAL_RCC_OscConfig+0x6cc>)
 8003614:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003616:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d10d      	bne.n	800363a <HAL_RCC_OscConfig+0x5d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800361e:	4b44      	ldr	r3, [pc, #272]	@ (8003730 <HAL_RCC_OscConfig+0x6cc>)
 8003620:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003622:	4a43      	ldr	r2, [pc, #268]	@ (8003730 <HAL_RCC_OscConfig+0x6cc>)
 8003624:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003628:	6593      	str	r3, [r2, #88]	@ 0x58
 800362a:	4b41      	ldr	r3, [pc, #260]	@ (8003730 <HAL_RCC_OscConfig+0x6cc>)
 800362c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800362e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003632:	60bb      	str	r3, [r7, #8]
 8003634:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003636:	2301      	movs	r3, #1
 8003638:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800363a:	4b3f      	ldr	r3, [pc, #252]	@ (8003738 <HAL_RCC_OscConfig+0x6d4>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003642:	2b00      	cmp	r3, #0
 8003644:	d118      	bne.n	8003678 <HAL_RCC_OscConfig+0x614>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003646:	4b3c      	ldr	r3, [pc, #240]	@ (8003738 <HAL_RCC_OscConfig+0x6d4>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a3b      	ldr	r2, [pc, #236]	@ (8003738 <HAL_RCC_OscConfig+0x6d4>)
 800364c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003650:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003652:	f7fe fd4d 	bl	80020f0 <HAL_GetTick>
 8003656:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003658:	e008      	b.n	800366c <HAL_RCC_OscConfig+0x608>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800365a:	f7fe fd49 	bl	80020f0 <HAL_GetTick>
 800365e:	4602      	mov	r2, r0
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	1ad3      	subs	r3, r2, r3
 8003664:	2b02      	cmp	r3, #2
 8003666:	d901      	bls.n	800366c <HAL_RCC_OscConfig+0x608>
        {
          return HAL_TIMEOUT;
 8003668:	2303      	movs	r3, #3
 800366a:	e1f4      	b.n	8003a56 <HAL_RCC_OscConfig+0x9f2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800366c:	4b32      	ldr	r3, [pc, #200]	@ (8003738 <HAL_RCC_OscConfig+0x6d4>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003674:	2b00      	cmp	r3, #0
 8003676:	d0f0      	beq.n	800365a <HAL_RCC_OscConfig+0x5f6>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	2b01      	cmp	r3, #1
 800367e:	d108      	bne.n	8003692 <HAL_RCC_OscConfig+0x62e>
 8003680:	4b2b      	ldr	r3, [pc, #172]	@ (8003730 <HAL_RCC_OscConfig+0x6cc>)
 8003682:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003686:	4a2a      	ldr	r2, [pc, #168]	@ (8003730 <HAL_RCC_OscConfig+0x6cc>)
 8003688:	f043 0301 	orr.w	r3, r3, #1
 800368c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003690:	e024      	b.n	80036dc <HAL_RCC_OscConfig+0x678>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	2b05      	cmp	r3, #5
 8003698:	d110      	bne.n	80036bc <HAL_RCC_OscConfig+0x658>
 800369a:	4b25      	ldr	r3, [pc, #148]	@ (8003730 <HAL_RCC_OscConfig+0x6cc>)
 800369c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036a0:	4a23      	ldr	r2, [pc, #140]	@ (8003730 <HAL_RCC_OscConfig+0x6cc>)
 80036a2:	f043 0304 	orr.w	r3, r3, #4
 80036a6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80036aa:	4b21      	ldr	r3, [pc, #132]	@ (8003730 <HAL_RCC_OscConfig+0x6cc>)
 80036ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036b0:	4a1f      	ldr	r2, [pc, #124]	@ (8003730 <HAL_RCC_OscConfig+0x6cc>)
 80036b2:	f043 0301 	orr.w	r3, r3, #1
 80036b6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80036ba:	e00f      	b.n	80036dc <HAL_RCC_OscConfig+0x678>
 80036bc:	4b1c      	ldr	r3, [pc, #112]	@ (8003730 <HAL_RCC_OscConfig+0x6cc>)
 80036be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036c2:	4a1b      	ldr	r2, [pc, #108]	@ (8003730 <HAL_RCC_OscConfig+0x6cc>)
 80036c4:	f023 0301 	bic.w	r3, r3, #1
 80036c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80036cc:	4b18      	ldr	r3, [pc, #96]	@ (8003730 <HAL_RCC_OscConfig+0x6cc>)
 80036ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036d2:	4a17      	ldr	r2, [pc, #92]	@ (8003730 <HAL_RCC_OscConfig+0x6cc>)
 80036d4:	f023 0304 	bic.w	r3, r3, #4
 80036d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d016      	beq.n	8003712 <HAL_RCC_OscConfig+0x6ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036e4:	f7fe fd04 	bl	80020f0 <HAL_GetTick>
 80036e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036ea:	e00a      	b.n	8003702 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036ec:	f7fe fd00 	bl	80020f0 <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d901      	bls.n	8003702 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	e1a9      	b.n	8003a56 <HAL_RCC_OscConfig+0x9f2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003702:	4b0b      	ldr	r3, [pc, #44]	@ (8003730 <HAL_RCC_OscConfig+0x6cc>)
 8003704:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003708:	f003 0302 	and.w	r3, r3, #2
 800370c:	2b00      	cmp	r3, #0
 800370e:	d0ed      	beq.n	80036ec <HAL_RCC_OscConfig+0x688>
 8003710:	e01b      	b.n	800374a <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003712:	f7fe fced 	bl	80020f0 <HAL_GetTick>
 8003716:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003718:	e010      	b.n	800373c <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800371a:	f7fe fce9 	bl	80020f0 <HAL_GetTick>
 800371e:	4602      	mov	r2, r0
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	1ad3      	subs	r3, r2, r3
 8003724:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003728:	4293      	cmp	r3, r2
 800372a:	d907      	bls.n	800373c <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 800372c:	2303      	movs	r3, #3
 800372e:	e192      	b.n	8003a56 <HAL_RCC_OscConfig+0x9f2>
 8003730:	40021000 	.word	0x40021000
 8003734:	080091b0 	.word	0x080091b0
 8003738:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800373c:	4b98      	ldr	r3, [pc, #608]	@ (80039a0 <HAL_RCC_OscConfig+0x93c>)
 800373e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003742:	f003 0302 	and.w	r3, r3, #2
 8003746:	2b00      	cmp	r3, #0
 8003748:	d1e7      	bne.n	800371a <HAL_RCC_OscConfig+0x6b6>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800374a:	7ffb      	ldrb	r3, [r7, #31]
 800374c:	2b01      	cmp	r3, #1
 800374e:	d105      	bne.n	800375c <HAL_RCC_OscConfig+0x6f8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003750:	4b93      	ldr	r3, [pc, #588]	@ (80039a0 <HAL_RCC_OscConfig+0x93c>)
 8003752:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003754:	4a92      	ldr	r2, [pc, #584]	@ (80039a0 <HAL_RCC_OscConfig+0x93c>)
 8003756:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800375a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003760:	2b00      	cmp	r3, #0
 8003762:	d00c      	beq.n	800377e <HAL_RCC_OscConfig+0x71a>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003768:	2b01      	cmp	r3, #1
 800376a:	d008      	beq.n	800377e <HAL_RCC_OscConfig+0x71a>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003770:	2b02      	cmp	r3, #2
 8003772:	d004      	beq.n	800377e <HAL_RCC_OscConfig+0x71a>
 8003774:	f240 316e 	movw	r1, #878	@ 0x36e
 8003778:	488a      	ldr	r0, [pc, #552]	@ (80039a4 <HAL_RCC_OscConfig+0x940>)
 800377a:	f7fd ff03 	bl	8001584 <assert_failed>

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003782:	2b00      	cmp	r3, #0
 8003784:	f000 8166 	beq.w	8003a54 <HAL_RCC_OscConfig+0x9f0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800378c:	2b02      	cmp	r3, #2
 800378e:	f040 813c 	bne.w	8003a0a <HAL_RCC_OscConfig+0x9a6>
    {
      /* Check the parameters */
      assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003796:	2b00      	cmp	r3, #0
 8003798:	d010      	beq.n	80037bc <HAL_RCC_OscConfig+0x758>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d00c      	beq.n	80037bc <HAL_RCC_OscConfig+0x758>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037a6:	2b02      	cmp	r3, #2
 80037a8:	d008      	beq.n	80037bc <HAL_RCC_OscConfig+0x758>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037ae:	2b03      	cmp	r3, #3
 80037b0:	d004      	beq.n	80037bc <HAL_RCC_OscConfig+0x758>
 80037b2:	f240 3176 	movw	r1, #886	@ 0x376
 80037b6:	487b      	ldr	r0, [pc, #492]	@ (80039a4 <HAL_RCC_OscConfig+0x940>)
 80037b8:	f7fd fee4 	bl	8001584 <assert_failed>
      assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d003      	beq.n	80037cc <HAL_RCC_OscConfig+0x768>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037c8:	2b08      	cmp	r3, #8
 80037ca:	d904      	bls.n	80037d6 <HAL_RCC_OscConfig+0x772>
 80037cc:	f240 3177 	movw	r1, #887	@ 0x377
 80037d0:	4874      	ldr	r0, [pc, #464]	@ (80039a4 <HAL_RCC_OscConfig+0x940>)
 80037d2:	f7fd fed7 	bl	8001584 <assert_failed>
      assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037da:	2b07      	cmp	r3, #7
 80037dc:	d903      	bls.n	80037e6 <HAL_RCC_OscConfig+0x782>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037e2:	2b56      	cmp	r3, #86	@ 0x56
 80037e4:	d904      	bls.n	80037f0 <HAL_RCC_OscConfig+0x78c>
 80037e6:	f44f 715e 	mov.w	r1, #888	@ 0x378
 80037ea:	486e      	ldr	r0, [pc, #440]	@ (80039a4 <HAL_RCC_OscConfig+0x940>)
 80037ec:	f7fd feca 	bl	8001584 <assert_failed>
#if defined(RCC_PLLP_SUPPORT)
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037f4:	2b07      	cmp	r3, #7
 80037f6:	d008      	beq.n	800380a <HAL_RCC_OscConfig+0x7a6>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037fc:	2b11      	cmp	r3, #17
 80037fe:	d004      	beq.n	800380a <HAL_RCC_OscConfig+0x7a6>
 8003800:	f240 317a 	movw	r1, #890	@ 0x37a
 8003804:	4867      	ldr	r0, [pc, #412]	@ (80039a4 <HAL_RCC_OscConfig+0x940>)
 8003806:	f7fd febd 	bl	8001584 <assert_failed>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800380e:	2b02      	cmp	r3, #2
 8003810:	d010      	beq.n	8003834 <HAL_RCC_OscConfig+0x7d0>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003816:	2b04      	cmp	r3, #4
 8003818:	d00c      	beq.n	8003834 <HAL_RCC_OscConfig+0x7d0>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800381e:	2b06      	cmp	r3, #6
 8003820:	d008      	beq.n	8003834 <HAL_RCC_OscConfig+0x7d0>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003826:	2b08      	cmp	r3, #8
 8003828:	d004      	beq.n	8003834 <HAL_RCC_OscConfig+0x7d0>
 800382a:	f44f 715f 	mov.w	r1, #892	@ 0x37c
 800382e:	485d      	ldr	r0, [pc, #372]	@ (80039a4 <HAL_RCC_OscConfig+0x940>)
 8003830:	f7fd fea8 	bl	8001584 <assert_failed>
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003838:	2b02      	cmp	r3, #2
 800383a:	d010      	beq.n	800385e <HAL_RCC_OscConfig+0x7fa>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003840:	2b04      	cmp	r3, #4
 8003842:	d00c      	beq.n	800385e <HAL_RCC_OscConfig+0x7fa>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003848:	2b06      	cmp	r3, #6
 800384a:	d008      	beq.n	800385e <HAL_RCC_OscConfig+0x7fa>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003850:	2b08      	cmp	r3, #8
 8003852:	d004      	beq.n	800385e <HAL_RCC_OscConfig+0x7fa>
 8003854:	f240 317d 	movw	r1, #893	@ 0x37d
 8003858:	4852      	ldr	r0, [pc, #328]	@ (80039a4 <HAL_RCC_OscConfig+0x940>)
 800385a:	f7fd fe93 	bl	8001584 <assert_failed>

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800385e:	4b50      	ldr	r3, [pc, #320]	@ (80039a0 <HAL_RCC_OscConfig+0x93c>)
 8003860:	68db      	ldr	r3, [r3, #12]
 8003862:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	f003 0203 	and.w	r2, r3, #3
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800386e:	429a      	cmp	r2, r3
 8003870:	d130      	bne.n	80038d4 <HAL_RCC_OscConfig+0x870>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800387c:	3b01      	subs	r3, #1
 800387e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003880:	429a      	cmp	r2, r3
 8003882:	d127      	bne.n	80038d4 <HAL_RCC_OscConfig+0x870>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800388e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003890:	429a      	cmp	r2, r3
 8003892:	d11f      	bne.n	80038d4 <HAL_RCC_OscConfig+0x870>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800389a:	687a      	ldr	r2, [r7, #4]
 800389c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800389e:	2a07      	cmp	r2, #7
 80038a0:	bf14      	ite	ne
 80038a2:	2201      	movne	r2, #1
 80038a4:	2200      	moveq	r2, #0
 80038a6:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d113      	bne.n	80038d4 <HAL_RCC_OscConfig+0x870>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038b6:	085b      	lsrs	r3, r3, #1
 80038b8:	3b01      	subs	r3, #1
 80038ba:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80038bc:	429a      	cmp	r2, r3
 80038be:	d109      	bne.n	80038d4 <HAL_RCC_OscConfig+0x870>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ca:	085b      	lsrs	r3, r3, #1
 80038cc:	3b01      	subs	r3, #1
 80038ce:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d074      	beq.n	80039be <HAL_RCC_OscConfig+0x95a>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80038d4:	69bb      	ldr	r3, [r7, #24]
 80038d6:	2b0c      	cmp	r3, #12
 80038d8:	d06f      	beq.n	80039ba <HAL_RCC_OscConfig+0x956>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80038da:	4b31      	ldr	r3, [pc, #196]	@ (80039a0 <HAL_RCC_OscConfig+0x93c>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d105      	bne.n	80038f2 <HAL_RCC_OscConfig+0x88e>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80038e6:	4b2e      	ldr	r3, [pc, #184]	@ (80039a0 <HAL_RCC_OscConfig+0x93c>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d001      	beq.n	80038f6 <HAL_RCC_OscConfig+0x892>
#endif
            )
          {
            return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e0af      	b.n	8003a56 <HAL_RCC_OscConfig+0x9f2>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80038f6:	4b2a      	ldr	r3, [pc, #168]	@ (80039a0 <HAL_RCC_OscConfig+0x93c>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a29      	ldr	r2, [pc, #164]	@ (80039a0 <HAL_RCC_OscConfig+0x93c>)
 80038fc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003900:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003902:	f7fe fbf5 	bl	80020f0 <HAL_GetTick>
 8003906:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003908:	e008      	b.n	800391c <HAL_RCC_OscConfig+0x8b8>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800390a:	f7fe fbf1 	bl	80020f0 <HAL_GetTick>
 800390e:	4602      	mov	r2, r0
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	1ad3      	subs	r3, r2, r3
 8003914:	2b02      	cmp	r3, #2
 8003916:	d901      	bls.n	800391c <HAL_RCC_OscConfig+0x8b8>
              {
                return HAL_TIMEOUT;
 8003918:	2303      	movs	r3, #3
 800391a:	e09c      	b.n	8003a56 <HAL_RCC_OscConfig+0x9f2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800391c:	4b20      	ldr	r3, [pc, #128]	@ (80039a0 <HAL_RCC_OscConfig+0x93c>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003924:	2b00      	cmp	r3, #0
 8003926:	d1f0      	bne.n	800390a <HAL_RCC_OscConfig+0x8a6>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003928:	4b1d      	ldr	r3, [pc, #116]	@ (80039a0 <HAL_RCC_OscConfig+0x93c>)
 800392a:	68da      	ldr	r2, [r3, #12]
 800392c:	4b1e      	ldr	r3, [pc, #120]	@ (80039a8 <HAL_RCC_OscConfig+0x944>)
 800392e:	4013      	ands	r3, r2
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003934:	687a      	ldr	r2, [r7, #4]
 8003936:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003938:	3a01      	subs	r2, #1
 800393a:	0112      	lsls	r2, r2, #4
 800393c:	4311      	orrs	r1, r2
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003942:	0212      	lsls	r2, r2, #8
 8003944:	4311      	orrs	r1, r2
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800394a:	0852      	lsrs	r2, r2, #1
 800394c:	3a01      	subs	r2, #1
 800394e:	0552      	lsls	r2, r2, #21
 8003950:	4311      	orrs	r1, r2
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003956:	0852      	lsrs	r2, r2, #1
 8003958:	3a01      	subs	r2, #1
 800395a:	0652      	lsls	r2, r2, #25
 800395c:	4311      	orrs	r1, r2
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003962:	0912      	lsrs	r2, r2, #4
 8003964:	0452      	lsls	r2, r2, #17
 8003966:	430a      	orrs	r2, r1
 8003968:	490d      	ldr	r1, [pc, #52]	@ (80039a0 <HAL_RCC_OscConfig+0x93c>)
 800396a:	4313      	orrs	r3, r2
 800396c:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800396e:	4b0c      	ldr	r3, [pc, #48]	@ (80039a0 <HAL_RCC_OscConfig+0x93c>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a0b      	ldr	r2, [pc, #44]	@ (80039a0 <HAL_RCC_OscConfig+0x93c>)
 8003974:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003978:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800397a:	4b09      	ldr	r3, [pc, #36]	@ (80039a0 <HAL_RCC_OscConfig+0x93c>)
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	4a08      	ldr	r2, [pc, #32]	@ (80039a0 <HAL_RCC_OscConfig+0x93c>)
 8003980:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003984:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003986:	f7fe fbb3 	bl	80020f0 <HAL_GetTick>
 800398a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800398c:	e00e      	b.n	80039ac <HAL_RCC_OscConfig+0x948>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800398e:	f7fe fbaf 	bl	80020f0 <HAL_GetTick>
 8003992:	4602      	mov	r2, r0
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	1ad3      	subs	r3, r2, r3
 8003998:	2b02      	cmp	r3, #2
 800399a:	d907      	bls.n	80039ac <HAL_RCC_OscConfig+0x948>
              {
                return HAL_TIMEOUT;
 800399c:	2303      	movs	r3, #3
 800399e:	e05a      	b.n	8003a56 <HAL_RCC_OscConfig+0x9f2>
 80039a0:	40021000 	.word	0x40021000
 80039a4:	080091b0 	.word	0x080091b0
 80039a8:	f99d808c 	.word	0xf99d808c
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039ac:	4b2c      	ldr	r3, [pc, #176]	@ (8003a60 <HAL_RCC_OscConfig+0x9fc>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d0ea      	beq.n	800398e <HAL_RCC_OscConfig+0x92a>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80039b8:	e04c      	b.n	8003a54 <HAL_RCC_OscConfig+0x9f0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e04b      	b.n	8003a56 <HAL_RCC_OscConfig+0x9f2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039be:	4b28      	ldr	r3, [pc, #160]	@ (8003a60 <HAL_RCC_OscConfig+0x9fc>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d144      	bne.n	8003a54 <HAL_RCC_OscConfig+0x9f0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80039ca:	4b25      	ldr	r3, [pc, #148]	@ (8003a60 <HAL_RCC_OscConfig+0x9fc>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a24      	ldr	r2, [pc, #144]	@ (8003a60 <HAL_RCC_OscConfig+0x9fc>)
 80039d0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80039d4:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80039d6:	4b22      	ldr	r3, [pc, #136]	@ (8003a60 <HAL_RCC_OscConfig+0x9fc>)
 80039d8:	68db      	ldr	r3, [r3, #12]
 80039da:	4a21      	ldr	r2, [pc, #132]	@ (8003a60 <HAL_RCC_OscConfig+0x9fc>)
 80039dc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80039e0:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80039e2:	f7fe fb85 	bl	80020f0 <HAL_GetTick>
 80039e6:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039e8:	e008      	b.n	80039fc <HAL_RCC_OscConfig+0x998>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039ea:	f7fe fb81 	bl	80020f0 <HAL_GetTick>
 80039ee:	4602      	mov	r2, r0
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	1ad3      	subs	r3, r2, r3
 80039f4:	2b02      	cmp	r3, #2
 80039f6:	d901      	bls.n	80039fc <HAL_RCC_OscConfig+0x998>
            {
              return HAL_TIMEOUT;
 80039f8:	2303      	movs	r3, #3
 80039fa:	e02c      	b.n	8003a56 <HAL_RCC_OscConfig+0x9f2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039fc:	4b18      	ldr	r3, [pc, #96]	@ (8003a60 <HAL_RCC_OscConfig+0x9fc>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d0f0      	beq.n	80039ea <HAL_RCC_OscConfig+0x986>
 8003a08:	e024      	b.n	8003a54 <HAL_RCC_OscConfig+0x9f0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a0a:	69bb      	ldr	r3, [r7, #24]
 8003a0c:	2b0c      	cmp	r3, #12
 8003a0e:	d01f      	beq.n	8003a50 <HAL_RCC_OscConfig+0x9ec>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a10:	4b13      	ldr	r3, [pc, #76]	@ (8003a60 <HAL_RCC_OscConfig+0x9fc>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a12      	ldr	r2, [pc, #72]	@ (8003a60 <HAL_RCC_OscConfig+0x9fc>)
 8003a16:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003a1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a1c:	f7fe fb68 	bl	80020f0 <HAL_GetTick>
 8003a20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a22:	e008      	b.n	8003a36 <HAL_RCC_OscConfig+0x9d2>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a24:	f7fe fb64 	bl	80020f0 <HAL_GetTick>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	2b02      	cmp	r3, #2
 8003a30:	d901      	bls.n	8003a36 <HAL_RCC_OscConfig+0x9d2>
          {
            return HAL_TIMEOUT;
 8003a32:	2303      	movs	r3, #3
 8003a34:	e00f      	b.n	8003a56 <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a36:	4b0a      	ldr	r3, [pc, #40]	@ (8003a60 <HAL_RCC_OscConfig+0x9fc>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d1f0      	bne.n	8003a24 <HAL_RCC_OscConfig+0x9c0>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003a42:	4b07      	ldr	r3, [pc, #28]	@ (8003a60 <HAL_RCC_OscConfig+0x9fc>)
 8003a44:	68da      	ldr	r2, [r3, #12]
 8003a46:	4906      	ldr	r1, [pc, #24]	@ (8003a60 <HAL_RCC_OscConfig+0x9fc>)
 8003a48:	4b06      	ldr	r3, [pc, #24]	@ (8003a64 <HAL_RCC_OscConfig+0xa00>)
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	60cb      	str	r3, [r1, #12]
 8003a4e:	e001      	b.n	8003a54 <HAL_RCC_OscConfig+0x9f0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	e000      	b.n	8003a56 <HAL_RCC_OscConfig+0x9f2>
      }
    }
  }
  return HAL_OK;
 8003a54:	2300      	movs	r3, #0
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3720      	adds	r7, #32
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}
 8003a5e:	bf00      	nop
 8003a60:	40021000 	.word	0x40021000
 8003a64:	feeefffc 	.word	0xfeeefffc

08003a68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b084      	sub	sp, #16
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
 8003a70:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d101      	bne.n	8003a7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e186      	b.n	8003d8a <HAL_RCC_ClockConfig+0x322>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d003      	beq.n	8003a8c <HAL_RCC_ClockConfig+0x24>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	2b0f      	cmp	r3, #15
 8003a8a:	d904      	bls.n	8003a96 <HAL_RCC_ClockConfig+0x2e>
 8003a8c:	f240 4159 	movw	r1, #1113	@ 0x459
 8003a90:	4882      	ldr	r0, [pc, #520]	@ (8003c9c <HAL_RCC_ClockConfig+0x234>)
 8003a92:	f7fd fd77 	bl	8001584 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d010      	beq.n	8003abe <HAL_RCC_ClockConfig+0x56>
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d00d      	beq.n	8003abe <HAL_RCC_ClockConfig+0x56>
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	2b02      	cmp	r3, #2
 8003aa6:	d00a      	beq.n	8003abe <HAL_RCC_ClockConfig+0x56>
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	2b03      	cmp	r3, #3
 8003aac:	d007      	beq.n	8003abe <HAL_RCC_ClockConfig+0x56>
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	2b04      	cmp	r3, #4
 8003ab2:	d004      	beq.n	8003abe <HAL_RCC_ClockConfig+0x56>
 8003ab4:	f240 415a 	movw	r1, #1114	@ 0x45a
 8003ab8:	4878      	ldr	r0, [pc, #480]	@ (8003c9c <HAL_RCC_ClockConfig+0x234>)
 8003aba:	f7fd fd63 	bl	8001584 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003abe:	4b78      	ldr	r3, [pc, #480]	@ (8003ca0 <HAL_RCC_ClockConfig+0x238>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 0307 	and.w	r3, r3, #7
 8003ac6:	683a      	ldr	r2, [r7, #0]
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d910      	bls.n	8003aee <HAL_RCC_ClockConfig+0x86>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003acc:	4b74      	ldr	r3, [pc, #464]	@ (8003ca0 <HAL_RCC_ClockConfig+0x238>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f023 0207 	bic.w	r2, r3, #7
 8003ad4:	4972      	ldr	r1, [pc, #456]	@ (8003ca0 <HAL_RCC_ClockConfig+0x238>)
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003adc:	4b70      	ldr	r3, [pc, #448]	@ (8003ca0 <HAL_RCC_ClockConfig+0x238>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 0307 	and.w	r3, r3, #7
 8003ae4:	683a      	ldr	r2, [r7, #0]
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	d001      	beq.n	8003aee <HAL_RCC_ClockConfig+0x86>
    {
      return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e14d      	b.n	8003d8a <HAL_RCC_ClockConfig+0x322>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0302 	and.w	r3, r3, #2
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d039      	beq.n	8003b6e <HAL_RCC_ClockConfig+0x106>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d024      	beq.n	8003b4c <HAL_RCC_ClockConfig+0xe4>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	2b80      	cmp	r3, #128	@ 0x80
 8003b08:	d020      	beq.n	8003b4c <HAL_RCC_ClockConfig+0xe4>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	2b90      	cmp	r3, #144	@ 0x90
 8003b10:	d01c      	beq.n	8003b4c <HAL_RCC_ClockConfig+0xe4>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	2ba0      	cmp	r3, #160	@ 0xa0
 8003b18:	d018      	beq.n	8003b4c <HAL_RCC_ClockConfig+0xe4>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	2bb0      	cmp	r3, #176	@ 0xb0
 8003b20:	d014      	beq.n	8003b4c <HAL_RCC_ClockConfig+0xe4>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	2bc0      	cmp	r3, #192	@ 0xc0
 8003b28:	d010      	beq.n	8003b4c <HAL_RCC_ClockConfig+0xe4>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	2bd0      	cmp	r3, #208	@ 0xd0
 8003b30:	d00c      	beq.n	8003b4c <HAL_RCC_ClockConfig+0xe4>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	2be0      	cmp	r3, #224	@ 0xe0
 8003b38:	d008      	beq.n	8003b4c <HAL_RCC_ClockConfig+0xe4>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	2bf0      	cmp	r3, #240	@ 0xf0
 8003b40:	d004      	beq.n	8003b4c <HAL_RCC_ClockConfig+0xe4>
 8003b42:	f240 4172 	movw	r1, #1138	@ 0x472
 8003b46:	4855      	ldr	r0, [pc, #340]	@ (8003c9c <HAL_RCC_ClockConfig+0x234>)
 8003b48:	f7fd fd1c 	bl	8001584 <assert_failed>

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	689a      	ldr	r2, [r3, #8]
 8003b50:	4b54      	ldr	r3, [pc, #336]	@ (8003ca4 <HAL_RCC_ClockConfig+0x23c>)
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d908      	bls.n	8003b6e <HAL_RCC_ClockConfig+0x106>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b5c:	4b51      	ldr	r3, [pc, #324]	@ (8003ca4 <HAL_RCC_ClockConfig+0x23c>)
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	494e      	ldr	r1, [pc, #312]	@ (8003ca4 <HAL_RCC_ClockConfig+0x23c>)
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 0301 	and.w	r3, r3, #1
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d061      	beq.n	8003c3e <HAL_RCC_ClockConfig+0x1d6>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d010      	beq.n	8003ba4 <HAL_RCC_ClockConfig+0x13c>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d00c      	beq.n	8003ba4 <HAL_RCC_ClockConfig+0x13c>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	2b02      	cmp	r3, #2
 8003b90:	d008      	beq.n	8003ba4 <HAL_RCC_ClockConfig+0x13c>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	2b03      	cmp	r3, #3
 8003b98:	d004      	beq.n	8003ba4 <HAL_RCC_ClockConfig+0x13c>
 8003b9a:	f240 417d 	movw	r1, #1149	@ 0x47d
 8003b9e:	483f      	ldr	r0, [pc, #252]	@ (8003c9c <HAL_RCC_ClockConfig+0x234>)
 8003ba0:	f7fd fcf0 	bl	8001584 <assert_failed>

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	2b03      	cmp	r3, #3
 8003baa:	d107      	bne.n	8003bbc <HAL_RCC_ClockConfig+0x154>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bac:	4b3d      	ldr	r3, [pc, #244]	@ (8003ca4 <HAL_RCC_ClockConfig+0x23c>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d121      	bne.n	8003bfc <HAL_RCC_ClockConfig+0x194>
      {
        return HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e0e6      	b.n	8003d8a <HAL_RCC_ClockConfig+0x322>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	2b02      	cmp	r3, #2
 8003bc2:	d107      	bne.n	8003bd4 <HAL_RCC_ClockConfig+0x16c>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003bc4:	4b37      	ldr	r3, [pc, #220]	@ (8003ca4 <HAL_RCC_ClockConfig+0x23c>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d115      	bne.n	8003bfc <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e0da      	b.n	8003d8a <HAL_RCC_ClockConfig+0x322>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d107      	bne.n	8003bec <HAL_RCC_ClockConfig+0x184>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003bdc:	4b31      	ldr	r3, [pc, #196]	@ (8003ca4 <HAL_RCC_ClockConfig+0x23c>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f003 0302 	and.w	r3, r3, #2
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d109      	bne.n	8003bfc <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	e0ce      	b.n	8003d8a <HAL_RCC_ClockConfig+0x322>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003bec:	4b2d      	ldr	r3, [pc, #180]	@ (8003ca4 <HAL_RCC_ClockConfig+0x23c>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d101      	bne.n	8003bfc <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	e0c6      	b.n	8003d8a <HAL_RCC_ClockConfig+0x322>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003bfc:	4b29      	ldr	r3, [pc, #164]	@ (8003ca4 <HAL_RCC_ClockConfig+0x23c>)
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	f023 0203 	bic.w	r2, r3, #3
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	4926      	ldr	r1, [pc, #152]	@ (8003ca4 <HAL_RCC_ClockConfig+0x23c>)
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c0e:	f7fe fa6f 	bl	80020f0 <HAL_GetTick>
 8003c12:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c14:	e00a      	b.n	8003c2c <HAL_RCC_ClockConfig+0x1c4>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c16:	f7fe fa6b 	bl	80020f0 <HAL_GetTick>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	1ad3      	subs	r3, r2, r3
 8003c20:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d901      	bls.n	8003c2c <HAL_RCC_ClockConfig+0x1c4>
      {
        return HAL_TIMEOUT;
 8003c28:	2303      	movs	r3, #3
 8003c2a:	e0ae      	b.n	8003d8a <HAL_RCC_ClockConfig+0x322>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c2c:	4b1d      	ldr	r3, [pc, #116]	@ (8003ca4 <HAL_RCC_ClockConfig+0x23c>)
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	f003 020c 	and.w	r2, r3, #12
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	009b      	lsls	r3, r3, #2
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d1eb      	bne.n	8003c16 <HAL_RCC_ClockConfig+0x1ae>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f003 0302 	and.w	r3, r3, #2
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d010      	beq.n	8003c6c <HAL_RCC_ClockConfig+0x204>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	689a      	ldr	r2, [r3, #8]
 8003c4e:	4b15      	ldr	r3, [pc, #84]	@ (8003ca4 <HAL_RCC_ClockConfig+0x23c>)
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003c56:	429a      	cmp	r2, r3
 8003c58:	d208      	bcs.n	8003c6c <HAL_RCC_ClockConfig+0x204>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c5a:	4b12      	ldr	r3, [pc, #72]	@ (8003ca4 <HAL_RCC_ClockConfig+0x23c>)
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	490f      	ldr	r1, [pc, #60]	@ (8003ca4 <HAL_RCC_ClockConfig+0x23c>)
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c6c:	4b0c      	ldr	r3, [pc, #48]	@ (8003ca0 <HAL_RCC_ClockConfig+0x238>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 0307 	and.w	r3, r3, #7
 8003c74:	683a      	ldr	r2, [r7, #0]
 8003c76:	429a      	cmp	r2, r3
 8003c78:	d216      	bcs.n	8003ca8 <HAL_RCC_ClockConfig+0x240>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c7a:	4b09      	ldr	r3, [pc, #36]	@ (8003ca0 <HAL_RCC_ClockConfig+0x238>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f023 0207 	bic.w	r2, r3, #7
 8003c82:	4907      	ldr	r1, [pc, #28]	@ (8003ca0 <HAL_RCC_ClockConfig+0x238>)
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	4313      	orrs	r3, r2
 8003c88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c8a:	4b05      	ldr	r3, [pc, #20]	@ (8003ca0 <HAL_RCC_ClockConfig+0x238>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 0307 	and.w	r3, r3, #7
 8003c92:	683a      	ldr	r2, [r7, #0]
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d007      	beq.n	8003ca8 <HAL_RCC_ClockConfig+0x240>
    {
      return HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e076      	b.n	8003d8a <HAL_RCC_ClockConfig+0x322>
 8003c9c:	080091b0 	.word	0x080091b0
 8003ca0:	40022000 	.word	0x40022000
 8003ca4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 0304 	and.w	r3, r3, #4
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d025      	beq.n	8003d00 <HAL_RCC_ClockConfig+0x298>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d018      	beq.n	8003cee <HAL_RCC_ClockConfig+0x286>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003cc4:	d013      	beq.n	8003cee <HAL_RCC_ClockConfig+0x286>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	68db      	ldr	r3, [r3, #12]
 8003cca:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8003cce:	d00e      	beq.n	8003cee <HAL_RCC_ClockConfig+0x286>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	68db      	ldr	r3, [r3, #12]
 8003cd4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003cd8:	d009      	beq.n	8003cee <HAL_RCC_ClockConfig+0x286>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	68db      	ldr	r3, [r3, #12]
 8003cde:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003ce2:	d004      	beq.n	8003cee <HAL_RCC_ClockConfig+0x286>
 8003ce4:	f240 41f5 	movw	r1, #1269	@ 0x4f5
 8003ce8:	482a      	ldr	r0, [pc, #168]	@ (8003d94 <HAL_RCC_ClockConfig+0x32c>)
 8003cea:	f7fd fc4b 	bl	8001584 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cee:	4b2a      	ldr	r3, [pc, #168]	@ (8003d98 <HAL_RCC_ClockConfig+0x330>)
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	68db      	ldr	r3, [r3, #12]
 8003cfa:	4927      	ldr	r1, [pc, #156]	@ (8003d98 <HAL_RCC_ClockConfig+0x330>)
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 0308 	and.w	r3, r3, #8
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d026      	beq.n	8003d5a <HAL_RCC_ClockConfig+0x2f2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	691b      	ldr	r3, [r3, #16]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d018      	beq.n	8003d46 <HAL_RCC_ClockConfig+0x2de>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	691b      	ldr	r3, [r3, #16]
 8003d18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d1c:	d013      	beq.n	8003d46 <HAL_RCC_ClockConfig+0x2de>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	691b      	ldr	r3, [r3, #16]
 8003d22:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8003d26:	d00e      	beq.n	8003d46 <HAL_RCC_ClockConfig+0x2de>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	691b      	ldr	r3, [r3, #16]
 8003d2c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003d30:	d009      	beq.n	8003d46 <HAL_RCC_ClockConfig+0x2de>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	691b      	ldr	r3, [r3, #16]
 8003d36:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003d3a:	d004      	beq.n	8003d46 <HAL_RCC_ClockConfig+0x2de>
 8003d3c:	f240 41fc 	movw	r1, #1276	@ 0x4fc
 8003d40:	4814      	ldr	r0, [pc, #80]	@ (8003d94 <HAL_RCC_ClockConfig+0x32c>)
 8003d42:	f7fd fc1f 	bl	8001584 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d46:	4b14      	ldr	r3, [pc, #80]	@ (8003d98 <HAL_RCC_ClockConfig+0x330>)
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	691b      	ldr	r3, [r3, #16]
 8003d52:	00db      	lsls	r3, r3, #3
 8003d54:	4910      	ldr	r1, [pc, #64]	@ (8003d98 <HAL_RCC_ClockConfig+0x330>)
 8003d56:	4313      	orrs	r3, r2
 8003d58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003d5a:	f000 f825 	bl	8003da8 <HAL_RCC_GetSysClockFreq>
 8003d5e:	4602      	mov	r2, r0
 8003d60:	4b0d      	ldr	r3, [pc, #52]	@ (8003d98 <HAL_RCC_ClockConfig+0x330>)
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	091b      	lsrs	r3, r3, #4
 8003d66:	f003 030f 	and.w	r3, r3, #15
 8003d6a:	490c      	ldr	r1, [pc, #48]	@ (8003d9c <HAL_RCC_ClockConfig+0x334>)
 8003d6c:	5ccb      	ldrb	r3, [r1, r3]
 8003d6e:	f003 031f 	and.w	r3, r3, #31
 8003d72:	fa22 f303 	lsr.w	r3, r2, r3
 8003d76:	4a0a      	ldr	r2, [pc, #40]	@ (8003da0 <HAL_RCC_ClockConfig+0x338>)
 8003d78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003d7a:	4b0a      	ldr	r3, [pc, #40]	@ (8003da4 <HAL_RCC_ClockConfig+0x33c>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f7fe f966 	bl	8002050 <HAL_InitTick>
 8003d84:	4603      	mov	r3, r0
 8003d86:	72fb      	strb	r3, [r7, #11]

  return status;
 8003d88:	7afb      	ldrb	r3, [r7, #11]
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3710      	adds	r7, #16
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}
 8003d92:	bf00      	nop
 8003d94:	080091b0 	.word	0x080091b0
 8003d98:	40021000 	.word	0x40021000
 8003d9c:	0800930c 	.word	0x0800930c
 8003da0:	20000004 	.word	0x20000004
 8003da4:	20000008 	.word	0x20000008

08003da8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b089      	sub	sp, #36	@ 0x24
 8003dac:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003dae:	2300      	movs	r3, #0
 8003db0:	61fb      	str	r3, [r7, #28]
 8003db2:	2300      	movs	r3, #0
 8003db4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003db6:	4b3e      	ldr	r3, [pc, #248]	@ (8003eb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	f003 030c 	and.w	r3, r3, #12
 8003dbe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003dc0:	4b3b      	ldr	r3, [pc, #236]	@ (8003eb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	f003 0303 	and.w	r3, r3, #3
 8003dc8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d005      	beq.n	8003ddc <HAL_RCC_GetSysClockFreq+0x34>
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	2b0c      	cmp	r3, #12
 8003dd4:	d121      	bne.n	8003e1a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d11e      	bne.n	8003e1a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003ddc:	4b34      	ldr	r3, [pc, #208]	@ (8003eb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f003 0308 	and.w	r3, r3, #8
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d107      	bne.n	8003df8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003de8:	4b31      	ldr	r3, [pc, #196]	@ (8003eb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003dea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003dee:	0a1b      	lsrs	r3, r3, #8
 8003df0:	f003 030f 	and.w	r3, r3, #15
 8003df4:	61fb      	str	r3, [r7, #28]
 8003df6:	e005      	b.n	8003e04 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003df8:	4b2d      	ldr	r3, [pc, #180]	@ (8003eb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	091b      	lsrs	r3, r3, #4
 8003dfe:	f003 030f 	and.w	r3, r3, #15
 8003e02:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003e04:	4a2b      	ldr	r2, [pc, #172]	@ (8003eb4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003e06:	69fb      	ldr	r3, [r7, #28]
 8003e08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e0c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d10d      	bne.n	8003e30 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e18:	e00a      	b.n	8003e30 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	2b04      	cmp	r3, #4
 8003e1e:	d102      	bne.n	8003e26 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003e20:	4b25      	ldr	r3, [pc, #148]	@ (8003eb8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003e22:	61bb      	str	r3, [r7, #24]
 8003e24:	e004      	b.n	8003e30 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	2b08      	cmp	r3, #8
 8003e2a:	d101      	bne.n	8003e30 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003e2c:	4b23      	ldr	r3, [pc, #140]	@ (8003ebc <HAL_RCC_GetSysClockFreq+0x114>)
 8003e2e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	2b0c      	cmp	r3, #12
 8003e34:	d134      	bne.n	8003ea0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003e36:	4b1e      	ldr	r3, [pc, #120]	@ (8003eb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e38:	68db      	ldr	r3, [r3, #12]
 8003e3a:	f003 0303 	and.w	r3, r3, #3
 8003e3e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	2b02      	cmp	r3, #2
 8003e44:	d003      	beq.n	8003e4e <HAL_RCC_GetSysClockFreq+0xa6>
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	2b03      	cmp	r3, #3
 8003e4a:	d003      	beq.n	8003e54 <HAL_RCC_GetSysClockFreq+0xac>
 8003e4c:	e005      	b.n	8003e5a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003e4e:	4b1a      	ldr	r3, [pc, #104]	@ (8003eb8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003e50:	617b      	str	r3, [r7, #20]
      break;
 8003e52:	e005      	b.n	8003e60 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003e54:	4b19      	ldr	r3, [pc, #100]	@ (8003ebc <HAL_RCC_GetSysClockFreq+0x114>)
 8003e56:	617b      	str	r3, [r7, #20]
      break;
 8003e58:	e002      	b.n	8003e60 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003e5a:	69fb      	ldr	r3, [r7, #28]
 8003e5c:	617b      	str	r3, [r7, #20]
      break;
 8003e5e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e60:	4b13      	ldr	r3, [pc, #76]	@ (8003eb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	091b      	lsrs	r3, r3, #4
 8003e66:	f003 0307 	and.w	r3, r3, #7
 8003e6a:	3301      	adds	r3, #1
 8003e6c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003e6e:	4b10      	ldr	r3, [pc, #64]	@ (8003eb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e70:	68db      	ldr	r3, [r3, #12]
 8003e72:	0a1b      	lsrs	r3, r3, #8
 8003e74:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e78:	697a      	ldr	r2, [r7, #20]
 8003e7a:	fb03 f202 	mul.w	r2, r3, r2
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e84:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003e86:	4b0a      	ldr	r3, [pc, #40]	@ (8003eb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e88:	68db      	ldr	r3, [r3, #12]
 8003e8a:	0e5b      	lsrs	r3, r3, #25
 8003e8c:	f003 0303 	and.w	r3, r3, #3
 8003e90:	3301      	adds	r3, #1
 8003e92:	005b      	lsls	r3, r3, #1
 8003e94:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003e96:	697a      	ldr	r2, [r7, #20]
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e9e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003ea0:	69bb      	ldr	r3, [r7, #24]
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	3724      	adds	r7, #36	@ 0x24
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr
 8003eae:	bf00      	nop
 8003eb0:	40021000 	.word	0x40021000
 8003eb4:	08009324 	.word	0x08009324
 8003eb8:	00f42400 	.word	0x00f42400
 8003ebc:	007a1200 	.word	0x007a1200

08003ec0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ec4:	4b03      	ldr	r3, [pc, #12]	@ (8003ed4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr
 8003ed2:	bf00      	nop
 8003ed4:	20000004 	.word	0x20000004

08003ed8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003edc:	f7ff fff0 	bl	8003ec0 <HAL_RCC_GetHCLKFreq>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	4b06      	ldr	r3, [pc, #24]	@ (8003efc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	0a1b      	lsrs	r3, r3, #8
 8003ee8:	f003 0307 	and.w	r3, r3, #7
 8003eec:	4904      	ldr	r1, [pc, #16]	@ (8003f00 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003eee:	5ccb      	ldrb	r3, [r1, r3]
 8003ef0:	f003 031f 	and.w	r3, r3, #31
 8003ef4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	bd80      	pop	{r7, pc}
 8003efc:	40021000 	.word	0x40021000
 8003f00:	0800931c 	.word	0x0800931c

08003f04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003f08:	f7ff ffda 	bl	8003ec0 <HAL_RCC_GetHCLKFreq>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	4b06      	ldr	r3, [pc, #24]	@ (8003f28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	0adb      	lsrs	r3, r3, #11
 8003f14:	f003 0307 	and.w	r3, r3, #7
 8003f18:	4904      	ldr	r1, [pc, #16]	@ (8003f2c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003f1a:	5ccb      	ldrb	r3, [r1, r3]
 8003f1c:	f003 031f 	and.w	r3, r3, #31
 8003f20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	bd80      	pop	{r7, pc}
 8003f28:	40021000 	.word	0x40021000
 8003f2c:	0800931c 	.word	0x0800931c

08003f30 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b086      	sub	sp, #24
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003f38:	2300      	movs	r3, #0
 8003f3a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003f3c:	4b2a      	ldr	r3, [pc, #168]	@ (8003fe8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d003      	beq.n	8003f50 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003f48:	f7ff f81c 	bl	8002f84 <HAL_PWREx_GetVoltageRange>
 8003f4c:	6178      	str	r0, [r7, #20]
 8003f4e:	e014      	b.n	8003f7a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003f50:	4b25      	ldr	r3, [pc, #148]	@ (8003fe8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f54:	4a24      	ldr	r2, [pc, #144]	@ (8003fe8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f56:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f5a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f5c:	4b22      	ldr	r3, [pc, #136]	@ (8003fe8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f64:	60fb      	str	r3, [r7, #12]
 8003f66:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003f68:	f7ff f80c 	bl	8002f84 <HAL_PWREx_GetVoltageRange>
 8003f6c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003f6e:	4b1e      	ldr	r3, [pc, #120]	@ (8003fe8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f72:	4a1d      	ldr	r2, [pc, #116]	@ (8003fe8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f74:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f78:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f80:	d10b      	bne.n	8003f9a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2b80      	cmp	r3, #128	@ 0x80
 8003f86:	d919      	bls.n	8003fbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2ba0      	cmp	r3, #160	@ 0xa0
 8003f8c:	d902      	bls.n	8003f94 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003f8e:	2302      	movs	r3, #2
 8003f90:	613b      	str	r3, [r7, #16]
 8003f92:	e013      	b.n	8003fbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003f94:	2301      	movs	r3, #1
 8003f96:	613b      	str	r3, [r7, #16]
 8003f98:	e010      	b.n	8003fbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2b80      	cmp	r3, #128	@ 0x80
 8003f9e:	d902      	bls.n	8003fa6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003fa0:	2303      	movs	r3, #3
 8003fa2:	613b      	str	r3, [r7, #16]
 8003fa4:	e00a      	b.n	8003fbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2b80      	cmp	r3, #128	@ 0x80
 8003faa:	d102      	bne.n	8003fb2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003fac:	2302      	movs	r3, #2
 8003fae:	613b      	str	r3, [r7, #16]
 8003fb0:	e004      	b.n	8003fbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2b70      	cmp	r3, #112	@ 0x70
 8003fb6:	d101      	bne.n	8003fbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003fb8:	2301      	movs	r3, #1
 8003fba:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003fbc:	4b0b      	ldr	r3, [pc, #44]	@ (8003fec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f023 0207 	bic.w	r2, r3, #7
 8003fc4:	4909      	ldr	r1, [pc, #36]	@ (8003fec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003fcc:	4b07      	ldr	r3, [pc, #28]	@ (8003fec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 0307 	and.w	r3, r3, #7
 8003fd4:	693a      	ldr	r2, [r7, #16]
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	d001      	beq.n	8003fde <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e000      	b.n	8003fe0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003fde:	2300      	movs	r3, #0
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3718      	adds	r7, #24
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}
 8003fe8:	40021000 	.word	0x40021000
 8003fec:	40022000 	.word	0x40022000

08003ff0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b086      	sub	sp, #24
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004008:	2b00      	cmp	r3, #0
 800400a:	d004      	beq.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x26>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004014:	d303      	bcc.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x2e>
 8004016:	21c9      	movs	r1, #201	@ 0xc9
 8004018:	4889      	ldr	r0, [pc, #548]	@ (8004240 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800401a:	f7fd fab3 	bl	8001584 <assert_failed>

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004026:	2b00      	cmp	r3, #0
 8004028:	d058      	beq.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800402e:	2b00      	cmp	r3, #0
 8004030:	d012      	beq.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004036:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800403a:	d00d      	beq.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x68>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004040:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004044:	d008      	beq.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800404a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800404e:	d003      	beq.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8004050:	21d1      	movs	r1, #209	@ 0xd1
 8004052:	487b      	ldr	r0, [pc, #492]	@ (8004240 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8004054:	f7fd fa96 	bl	8001584 <assert_failed>

    switch(PeriphClkInit->Sai1ClockSelection)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800405c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004060:	d02a      	beq.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0xc8>
 8004062:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004066:	d824      	bhi.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
 8004068:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800406c:	d008      	beq.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800406e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004072:	d81e      	bhi.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
 8004074:	2b00      	cmp	r3, #0
 8004076:	d00a      	beq.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8004078:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800407c:	d010      	beq.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0xb0>
 800407e:	e018      	b.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004080:	4b70      	ldr	r3, [pc, #448]	@ (8004244 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004082:	68db      	ldr	r3, [r3, #12]
 8004084:	4a6f      	ldr	r2, [pc, #444]	@ (8004244 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004086:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800408a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800408c:	e015      	b.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0xca>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	3304      	adds	r3, #4
 8004092:	2100      	movs	r1, #0
 8004094:	4618      	mov	r0, r3
 8004096:	f000 fc69 	bl	800496c <RCCEx_PLLSAI1_Config>
 800409a:	4603      	mov	r3, r0
 800409c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800409e:	e00c      	b.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0xca>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	3320      	adds	r3, #32
 80040a4:	2100      	movs	r1, #0
 80040a6:	4618      	mov	r0, r3
 80040a8:	f000 fde0 	bl	8004c6c <RCCEx_PLLSAI2_Config>
 80040ac:	4603      	mov	r3, r0
 80040ae:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80040b0:	e003      	b.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0xca>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	74fb      	strb	r3, [r7, #19]
      break;
 80040b6:	e000      	b.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0xca>
      break;
 80040b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040ba:	7cfb      	ldrb	r3, [r7, #19]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d10b      	bne.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80040c0:	4b60      	ldr	r3, [pc, #384]	@ (8004244 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80040c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040c6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80040ce:	495d      	ldr	r1, [pc, #372]	@ (8004244 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80040d0:	4313      	orrs	r3, r2
 80040d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80040d6:	e001      	b.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0xec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040d8:	7cfb      	ldrb	r3, [r7, #19]
 80040da:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d059      	beq.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d013      	beq.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x128>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80040f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80040f8:	d00e      	beq.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x128>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80040fe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004102:	d009      	beq.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x128>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004108:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800410c:	d004      	beq.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x128>
 800410e:	f240 110f 	movw	r1, #271	@ 0x10f
 8004112:	484b      	ldr	r0, [pc, #300]	@ (8004240 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8004114:	f7fd fa36 	bl	8001584 <assert_failed>

    switch(PeriphClkInit->Sai2ClockSelection)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800411c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004120:	d02a      	beq.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x188>
 8004122:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004126:	d824      	bhi.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x182>
 8004128:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800412c:	d008      	beq.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x150>
 800412e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004132:	d81e      	bhi.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x182>
 8004134:	2b00      	cmp	r3, #0
 8004136:	d00a      	beq.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004138:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800413c:	d010      	beq.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x170>
 800413e:	e018      	b.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004140:	4b40      	ldr	r3, [pc, #256]	@ (8004244 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	4a3f      	ldr	r2, [pc, #252]	@ (8004244 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004146:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800414a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800414c:	e015      	b.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x18a>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	3304      	adds	r3, #4
 8004152:	2100      	movs	r1, #0
 8004154:	4618      	mov	r0, r3
 8004156:	f000 fc09 	bl	800496c <RCCEx_PLLSAI1_Config>
 800415a:	4603      	mov	r3, r0
 800415c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800415e:	e00c      	b.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x18a>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	3320      	adds	r3, #32
 8004164:	2100      	movs	r1, #0
 8004166:	4618      	mov	r0, r3
 8004168:	f000 fd80 	bl	8004c6c <RCCEx_PLLSAI2_Config>
 800416c:	4603      	mov	r3, r0
 800416e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004170:	e003      	b.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x18a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	74fb      	strb	r3, [r7, #19]
      break;
 8004176:	e000      	b.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x18a>
      break;
 8004178:	bf00      	nop
    }

    if(ret == HAL_OK)
 800417a:	7cfb      	ldrb	r3, [r7, #19]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d10b      	bne.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004180:	4b30      	ldr	r3, [pc, #192]	@ (8004244 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004182:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004186:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800418e:	492d      	ldr	r1, [pc, #180]	@ (8004244 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004190:	4313      	orrs	r3, r2
 8004192:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004196:	e001      	b.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004198:	7cfb      	ldrb	r3, [r7, #19]
 800419a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	f000 80c2 	beq.w	800432e <HAL_RCCEx_PeriphCLKConfig+0x33e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041aa:	2300      	movs	r3, #0
 80041ac:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d016      	beq.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80041be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80041c2:	d010      	beq.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80041ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80041ce:	d00a      	beq.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80041d6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80041da:	d004      	beq.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 80041dc:	f44f 71a2 	mov.w	r1, #324	@ 0x144
 80041e0:	4817      	ldr	r0, [pc, #92]	@ (8004240 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80041e2:	f7fd f9cf 	bl	8001584 <assert_failed>

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80041e6:	4b17      	ldr	r3, [pc, #92]	@ (8004244 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80041e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d101      	bne.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80041f2:	2301      	movs	r3, #1
 80041f4:	e000      	b.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x208>
 80041f6:	2300      	movs	r3, #0
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d00d      	beq.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x228>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041fc:	4b11      	ldr	r3, [pc, #68]	@ (8004244 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80041fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004200:	4a10      	ldr	r2, [pc, #64]	@ (8004244 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004202:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004206:	6593      	str	r3, [r2, #88]	@ 0x58
 8004208:	4b0e      	ldr	r3, [pc, #56]	@ (8004244 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800420a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800420c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004210:	60bb      	str	r3, [r7, #8]
 8004212:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004214:	2301      	movs	r3, #1
 8004216:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004218:	4b0b      	ldr	r3, [pc, #44]	@ (8004248 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a0a      	ldr	r2, [pc, #40]	@ (8004248 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800421e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004222:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004224:	f7fd ff64 	bl	80020f0 <HAL_GetTick>
 8004228:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800422a:	e00f      	b.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x25c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800422c:	f7fd ff60 	bl	80020f0 <HAL_GetTick>
 8004230:	4602      	mov	r2, r0
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	1ad3      	subs	r3, r2, r3
 8004236:	2b02      	cmp	r3, #2
 8004238:	d908      	bls.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x25c>
      {
        ret = HAL_TIMEOUT;
 800423a:	2303      	movs	r3, #3
 800423c:	74fb      	strb	r3, [r7, #19]
        break;
 800423e:	e00b      	b.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x268>
 8004240:	080091e8 	.word	0x080091e8
 8004244:	40021000 	.word	0x40021000
 8004248:	40007000 	.word	0x40007000
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800424c:	4b30      	ldr	r3, [pc, #192]	@ (8004310 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004254:	2b00      	cmp	r3, #0
 8004256:	d0e9      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x23c>
      }
    }

    if(ret == HAL_OK)
 8004258:	7cfb      	ldrb	r3, [r7, #19]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d15c      	bne.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800425e:	4b2d      	ldr	r3, [pc, #180]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8004260:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004264:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004268:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d01f      	beq.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004276:	697a      	ldr	r2, [r7, #20]
 8004278:	429a      	cmp	r2, r3
 800427a:	d019      	beq.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800427c:	4b25      	ldr	r3, [pc, #148]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 800427e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004282:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004286:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004288:	4b22      	ldr	r3, [pc, #136]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 800428a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800428e:	4a21      	ldr	r2, [pc, #132]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8004290:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004294:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004298:	4b1e      	ldr	r3, [pc, #120]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 800429a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800429e:	4a1d      	ldr	r2, [pc, #116]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 80042a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80042a8:	4a1a      	ldr	r2, [pc, #104]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	f003 0301 	and.w	r3, r3, #1
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d016      	beq.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042ba:	f7fd ff19 	bl	80020f0 <HAL_GetTick>
 80042be:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042c0:	e00b      	b.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x2ea>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042c2:	f7fd ff15 	bl	80020f0 <HAL_GetTick>
 80042c6:	4602      	mov	r2, r0
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	1ad3      	subs	r3, r2, r3
 80042cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d902      	bls.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x2ea>
          {
            ret = HAL_TIMEOUT;
 80042d4:	2303      	movs	r3, #3
 80042d6:	74fb      	strb	r3, [r7, #19]
            break;
 80042d8:	e006      	b.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042da:	4b0e      	ldr	r3, [pc, #56]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 80042dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042e0:	f003 0302 	and.w	r3, r3, #2
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d0ec      	beq.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
          }
        }
      }

      if(ret == HAL_OK)
 80042e8:	7cfb      	ldrb	r3, [r7, #19]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d10c      	bne.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x318>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042ee:	4b09      	ldr	r3, [pc, #36]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 80042f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042f4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042fe:	4905      	ldr	r1, [pc, #20]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8004300:	4313      	orrs	r3, r2
 8004302:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004306:	e009      	b.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x32c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004308:	7cfb      	ldrb	r3, [r7, #19]
 800430a:	74bb      	strb	r3, [r7, #18]
 800430c:	e006      	b.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x32c>
 800430e:	bf00      	nop
 8004310:	40007000 	.word	0x40007000
 8004314:	40021000 	.word	0x40021000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004318:	7cfb      	ldrb	r3, [r7, #19]
 800431a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800431c:	7c7b      	ldrb	r3, [r7, #17]
 800431e:	2b01      	cmp	r3, #1
 8004320:	d105      	bne.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x33e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004322:	4b8d      	ldr	r3, [pc, #564]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8004324:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004326:	4a8c      	ldr	r2, [pc, #560]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8004328:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800432c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f003 0301 	and.w	r3, r3, #1
 8004336:	2b00      	cmp	r3, #0
 8004338:	d01f      	beq.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800433e:	2b00      	cmp	r3, #0
 8004340:	d010      	beq.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004346:	2b01      	cmp	r3, #1
 8004348:	d00c      	beq.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x374>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800434e:	2b03      	cmp	r3, #3
 8004350:	d008      	beq.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004356:	2b02      	cmp	r3, #2
 8004358:	d004      	beq.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x374>
 800435a:	f240 1199 	movw	r1, #409	@ 0x199
 800435e:	487f      	ldr	r0, [pc, #508]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 8004360:	f7fd f910 	bl	8001584 <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004364:	4b7c      	ldr	r3, [pc, #496]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8004366:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800436a:	f023 0203 	bic.w	r2, r3, #3
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004372:	4979      	ldr	r1, [pc, #484]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8004374:	4313      	orrs	r3, r2
 8004376:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 0302 	and.w	r3, r3, #2
 8004382:	2b00      	cmp	r3, #0
 8004384:	d01f      	beq.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800438a:	2b00      	cmp	r3, #0
 800438c:	d010      	beq.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004392:	2b04      	cmp	r3, #4
 8004394:	d00c      	beq.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800439a:	2b0c      	cmp	r3, #12
 800439c:	d008      	beq.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043a2:	2b08      	cmp	r3, #8
 80043a4:	d004      	beq.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 80043a6:	f240 11a3 	movw	r1, #419	@ 0x1a3
 80043aa:	486c      	ldr	r0, [pc, #432]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 80043ac:	f7fd f8ea 	bl	8001584 <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80043b0:	4b69      	ldr	r3, [pc, #420]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 80043b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043b6:	f023 020c 	bic.w	r2, r3, #12
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043be:	4966      	ldr	r1, [pc, #408]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 80043c0:	4313      	orrs	r3, r2
 80043c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 0304 	and.w	r3, r3, #4
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d01f      	beq.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d010      	beq.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x40c>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043de:	2b10      	cmp	r3, #16
 80043e0:	d00c      	beq.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x40c>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043e6:	2b30      	cmp	r3, #48	@ 0x30
 80043e8:	d008      	beq.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x40c>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ee:	2b20      	cmp	r3, #32
 80043f0:	d004      	beq.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x40c>
 80043f2:	f240 11af 	movw	r1, #431	@ 0x1af
 80043f6:	4859      	ldr	r0, [pc, #356]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 80043f8:	f7fd f8c4 	bl	8001584 <assert_failed>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80043fc:	4b56      	ldr	r3, [pc, #344]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 80043fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004402:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800440a:	4953      	ldr	r1, [pc, #332]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 800440c:	4313      	orrs	r3, r2
 800440e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f003 0308 	and.w	r3, r3, #8
 800441a:	2b00      	cmp	r3, #0
 800441c:	d01f      	beq.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x46e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004422:	2b00      	cmp	r3, #0
 8004424:	d010      	beq.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x458>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800442a:	2b40      	cmp	r3, #64	@ 0x40
 800442c:	d00c      	beq.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x458>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004432:	2bc0      	cmp	r3, #192	@ 0xc0
 8004434:	d008      	beq.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x458>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800443a:	2b80      	cmp	r3, #128	@ 0x80
 800443c:	d004      	beq.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x458>
 800443e:	f240 11bd 	movw	r1, #445	@ 0x1bd
 8004442:	4846      	ldr	r0, [pc, #280]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 8004444:	f7fd f89e 	bl	8001584 <assert_failed>

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004448:	4b43      	ldr	r3, [pc, #268]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 800444a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800444e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004456:	4940      	ldr	r1, [pc, #256]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8004458:	4313      	orrs	r3, r2
 800445a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 0310 	and.w	r3, r3, #16
 8004466:	2b00      	cmp	r3, #0
 8004468:	d022      	beq.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x4c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800446e:	2b00      	cmp	r3, #0
 8004470:	d013      	beq.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004476:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800447a:	d00e      	beq.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004480:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004484:	d009      	beq.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800448a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800448e:	d004      	beq.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8004490:	f240 11cb 	movw	r1, #459	@ 0x1cb
 8004494:	4831      	ldr	r0, [pc, #196]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 8004496:	f7fd f875 	bl	8001584 <assert_failed>

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800449a:	4b2f      	ldr	r3, [pc, #188]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 800449c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044a0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044a8:	492b      	ldr	r1, [pc, #172]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 80044aa:	4313      	orrs	r3, r2
 80044ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 0320 	and.w	r3, r3, #32
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d022      	beq.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x512>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d013      	beq.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044cc:	d00e      	beq.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044d2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80044d6:	d009      	beq.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80044e0:	d004      	beq.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>
 80044e2:	f240 11d7 	movw	r1, #471	@ 0x1d7
 80044e6:	481d      	ldr	r0, [pc, #116]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 80044e8:	f7fd f84c 	bl	8001584 <assert_failed>

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80044ec:	4b1a      	ldr	r3, [pc, #104]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 80044ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044f2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044fa:	4917      	ldr	r1, [pc, #92]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 80044fc:	4313      	orrs	r3, r2
 80044fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800450a:	2b00      	cmp	r3, #0
 800450c:	d028      	beq.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004512:	2b00      	cmp	r3, #0
 8004514:	d013      	beq.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x54e>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800451a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800451e:	d00e      	beq.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x54e>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004524:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004528:	d009      	beq.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x54e>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800452e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004532:	d004      	beq.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x54e>
 8004534:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8004538:	4808      	ldr	r0, [pc, #32]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 800453a:	f7fd f823 	bl	8001584 <assert_failed>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800453e:	4b06      	ldr	r3, [pc, #24]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8004540:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004544:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800454c:	4902      	ldr	r1, [pc, #8]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 800454e:	4313      	orrs	r3, r2
 8004550:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004554:	e004      	b.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8004556:	bf00      	nop
 8004558:	40021000 	.word	0x40021000
 800455c:	080091e8 	.word	0x080091e8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004568:	2b00      	cmp	r3, #0
 800456a:	d022      	beq.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004570:	2b00      	cmp	r3, #0
 8004572:	d013      	beq.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004578:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800457c:	d00e      	beq.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004582:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004586:	d009      	beq.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800458c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004590:	d004      	beq.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8004592:	f240 11e7 	movw	r1, #487	@ 0x1e7
 8004596:	489e      	ldr	r0, [pc, #632]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 8004598:	f7fc fff4 	bl	8001584 <assert_failed>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800459c:	4b9d      	ldr	r3, [pc, #628]	@ (8004814 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 800459e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045a2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045aa:	499a      	ldr	r1, [pc, #616]	@ (8004814 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80045ac:	4313      	orrs	r3, r2
 80045ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d01d      	beq.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x60a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d00e      	beq.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045ce:	d009      	beq.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80045d8:	d004      	beq.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 80045da:	f240 11ef 	movw	r1, #495	@ 0x1ef
 80045de:	488c      	ldr	r0, [pc, #560]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 80045e0:	f7fc ffd0 	bl	8001584 <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80045e4:	4b8b      	ldr	r3, [pc, #556]	@ (8004814 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80045e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045ea:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045f2:	4988      	ldr	r1, [pc, #544]	@ (8004814 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80045f4:	4313      	orrs	r3, r2
 80045f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004602:	2b00      	cmp	r3, #0
 8004604:	d01d      	beq.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x652>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800460a:	2b00      	cmp	r3, #0
 800460c:	d00e      	beq.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x63c>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004612:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004616:	d009      	beq.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x63c>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800461c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004620:	d004      	beq.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x63c>
 8004622:	f240 11fb 	movw	r1, #507	@ 0x1fb
 8004626:	487a      	ldr	r0, [pc, #488]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 8004628:	f7fc ffac 	bl	8001584 <assert_failed>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800462c:	4b79      	ldr	r3, [pc, #484]	@ (8004814 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 800462e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004632:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800463a:	4976      	ldr	r1, [pc, #472]	@ (8004814 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 800463c:	4313      	orrs	r3, r2
 800463e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800464a:	2b00      	cmp	r3, #0
 800464c:	d01d      	beq.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004652:	2b00      	cmp	r3, #0
 8004654:	d00e      	beq.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x684>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800465a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800465e:	d009      	beq.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x684>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004664:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004668:	d004      	beq.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x684>
 800466a:	f240 2107 	movw	r1, #519	@ 0x207
 800466e:	4868      	ldr	r0, [pc, #416]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 8004670:	f7fc ff88 	bl	8001584 <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004674:	4b67      	ldr	r3, [pc, #412]	@ (8004814 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8004676:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800467a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004682:	4964      	ldr	r1, [pc, #400]	@ (8004814 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8004684:	4313      	orrs	r3, r2
 8004686:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004692:	2b00      	cmp	r3, #0
 8004694:	d040      	beq.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800469a:	2b00      	cmp	r3, #0
 800469c:	d013      	beq.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046a2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80046a6:	d00e      	beq.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046ac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80046b0:	d009      	beq.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046b6:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80046ba:	d004      	beq.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 80046bc:	f44f 7108 	mov.w	r1, #544	@ 0x220
 80046c0:	4853      	ldr	r0, [pc, #332]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 80046c2:	f7fc ff5f 	bl	8001584 <assert_failed>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80046c6:	4b53      	ldr	r3, [pc, #332]	@ (8004814 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80046c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046cc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046d4:	494f      	ldr	r1, [pc, #316]	@ (8004814 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80046d6:	4313      	orrs	r3, r2
 80046d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046e0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80046e4:	d106      	bne.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x704>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046e6:	4b4b      	ldr	r3, [pc, #300]	@ (8004814 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80046e8:	68db      	ldr	r3, [r3, #12]
 80046ea:	4a4a      	ldr	r2, [pc, #296]	@ (8004814 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80046ec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80046f0:	60d3      	str	r3, [r2, #12]
 80046f2:	e011      	b.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046f8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80046fc:	d10c      	bne.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x728>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	3304      	adds	r3, #4
 8004702:	2101      	movs	r1, #1
 8004704:	4618      	mov	r0, r3
 8004706:	f000 f931 	bl	800496c <RCCEx_PLLSAI1_Config>
 800470a:	4603      	mov	r3, r0
 800470c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800470e:	7cfb      	ldrb	r3, [r7, #19]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d001      	beq.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x728>
        {
          /* set overall return value */
          status = ret;
 8004714:	7cfb      	ldrb	r3, [r7, #19]
 8004716:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004720:	2b00      	cmp	r3, #0
 8004722:	d040      	beq.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x7b6>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004728:	2b00      	cmp	r3, #0
 800472a:	d013      	beq.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x764>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004730:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004734:	d00e      	beq.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x764>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800473a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800473e:	d009      	beq.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x764>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004744:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8004748:	d004      	beq.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x764>
 800474a:	f240 2141 	movw	r1, #577	@ 0x241
 800474e:	4830      	ldr	r0, [pc, #192]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 8004750:	f7fc ff18 	bl	8001584 <assert_failed>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004754:	4b2f      	ldr	r3, [pc, #188]	@ (8004814 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8004756:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800475a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004762:	492c      	ldr	r1, [pc, #176]	@ (8004814 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8004764:	4313      	orrs	r3, r2
 8004766:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800476e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004772:	d106      	bne.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x792>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004774:	4b27      	ldr	r3, [pc, #156]	@ (8004814 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8004776:	68db      	ldr	r3, [r3, #12]
 8004778:	4a26      	ldr	r2, [pc, #152]	@ (8004814 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 800477a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800477e:	60d3      	str	r3, [r2, #12]
 8004780:	e011      	b.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x7b6>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004786:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800478a:	d10c      	bne.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x7b6>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	3304      	adds	r3, #4
 8004790:	2101      	movs	r1, #1
 8004792:	4618      	mov	r0, r3
 8004794:	f000 f8ea 	bl	800496c <RCCEx_PLLSAI1_Config>
 8004798:	4603      	mov	r3, r0
 800479a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800479c:	7cfb      	ldrb	r3, [r7, #19]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d001      	beq.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x7b6>
      {
        /* set overall return value */
        status = ret;
 80047a2:	7cfb      	ldrb	r3, [r7, #19]
 80047a4:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d044      	beq.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d013      	beq.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047be:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80047c2:	d00e      	beq.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047c8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80047cc:	d009      	beq.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047d2:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80047d6:	d004      	beq.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
 80047d8:	f240 2166 	movw	r1, #614	@ 0x266
 80047dc:	480c      	ldr	r0, [pc, #48]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 80047de:	f7fc fed1 	bl	8001584 <assert_failed>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80047e2:	4b0c      	ldr	r3, [pc, #48]	@ (8004814 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80047e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047e8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047f0:	4908      	ldr	r1, [pc, #32]	@ (8004814 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80047f2:	4313      	orrs	r3, r2
 80047f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047fc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004800:	d10a      	bne.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x828>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004802:	4b04      	ldr	r3, [pc, #16]	@ (8004814 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8004804:	68db      	ldr	r3, [r3, #12]
 8004806:	4a03      	ldr	r2, [pc, #12]	@ (8004814 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8004808:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800480c:	60d3      	str	r3, [r2, #12]
 800480e:	e015      	b.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x84c>
 8004810:	080091e8 	.word	0x080091e8
 8004814:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800481c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004820:	d10c      	bne.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x84c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	3304      	adds	r3, #4
 8004826:	2101      	movs	r1, #1
 8004828:	4618      	mov	r0, r3
 800482a:	f000 f89f 	bl	800496c <RCCEx_PLLSAI1_Config>
 800482e:	4603      	mov	r3, r0
 8004830:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004832:	7cfb      	ldrb	r3, [r7, #19]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d001      	beq.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x84c>
      {
        /* set overall return value */
        status = ret;
 8004838:	7cfb      	ldrb	r3, [r7, #19]
 800483a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004844:	2b00      	cmp	r3, #0
 8004846:	d047      	beq.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800484c:	2b00      	cmp	r3, #0
 800484e:	d013      	beq.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x888>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004854:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004858:	d00e      	beq.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x888>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800485e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004862:	d009      	beq.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x888>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004868:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800486c:	d004      	beq.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x888>
 800486e:	f240 2186 	movw	r1, #646	@ 0x286
 8004872:	483c      	ldr	r0, [pc, #240]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x974>)
 8004874:	f7fc fe86 	bl	8001584 <assert_failed>

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004878:	4b3b      	ldr	r3, [pc, #236]	@ (8004968 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 800487a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800487e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004886:	4938      	ldr	r1, [pc, #224]	@ (8004968 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 8004888:	4313      	orrs	r3, r2
 800488a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004892:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004896:	d10d      	bne.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	3304      	adds	r3, #4
 800489c:	2102      	movs	r1, #2
 800489e:	4618      	mov	r0, r3
 80048a0:	f000 f864 	bl	800496c <RCCEx_PLLSAI1_Config>
 80048a4:	4603      	mov	r3, r0
 80048a6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80048a8:	7cfb      	ldrb	r3, [r7, #19]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d014      	beq.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
      {
        /* set overall return value */
        status = ret;
 80048ae:	7cfb      	ldrb	r3, [r7, #19]
 80048b0:	74bb      	strb	r3, [r7, #18]
 80048b2:	e011      	b.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80048b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80048bc:	d10c      	bne.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	3320      	adds	r3, #32
 80048c2:	2102      	movs	r1, #2
 80048c4:	4618      	mov	r0, r3
 80048c6:	f000 f9d1 	bl	8004c6c <RCCEx_PLLSAI2_Config>
 80048ca:	4603      	mov	r3, r0
 80048cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80048ce:	7cfb      	ldrb	r3, [r7, #19]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d001      	beq.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
      {
        /* set overall return value */
        status = ret;
 80048d4:	7cfb      	ldrb	r3, [r7, #19]
 80048d6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d018      	beq.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x926>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d009      	beq.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x910>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80048f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048f4:	d004      	beq.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x910>
 80048f6:	f240 21b6 	movw	r1, #694	@ 0x2b6
 80048fa:	481a      	ldr	r0, [pc, #104]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x974>)
 80048fc:	f7fc fe42 	bl	8001584 <assert_failed>

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004900:	4b19      	ldr	r3, [pc, #100]	@ (8004968 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 8004902:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004906:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800490e:	4916      	ldr	r1, [pc, #88]	@ (8004968 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 8004910:	4313      	orrs	r3, r2
 8004912:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800491e:	2b00      	cmp	r3, #0
 8004920:	d01b      	beq.n	800495a <HAL_RCCEx_PeriphCLKConfig+0x96a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004928:	2b00      	cmp	r3, #0
 800492a:	d00a      	beq.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0x952>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004932:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004936:	d004      	beq.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0x952>
 8004938:	f44f 7131 	mov.w	r1, #708	@ 0x2c4
 800493c:	4809      	ldr	r0, [pc, #36]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x974>)
 800493e:	f7fc fe21 	bl	8001584 <assert_failed>

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004942:	4b09      	ldr	r3, [pc, #36]	@ (8004968 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 8004944:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004948:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004952:	4905      	ldr	r1, [pc, #20]	@ (8004968 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 8004954:	4313      	orrs	r3, r2
 8004956:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800495a:	7cbb      	ldrb	r3, [r7, #18]
}
 800495c:	4618      	mov	r0, r3
 800495e:	3718      	adds	r7, #24
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}
 8004964:	080091e8 	.word	0x080091e8
 8004968:	40021000 	.word	0x40021000

0800496c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b084      	sub	sp, #16
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
 8004974:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004976:	2300      	movs	r3, #0
 8004978:	73fb      	strb	r3, [r7, #15]

  /* check for PLLSAI1 Parameters used to output PLLSAI1CLK */
  /* P, Q and R dividers are verified in each specific divider case below */
  assert_param(IS_RCC_PLLSAI1SOURCE(PllSai1->PLLSAI1Source));
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d010      	beq.n	80049a4 <RCCEx_PLLSAI1_Config+0x38>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	2b01      	cmp	r3, #1
 8004988:	d00c      	beq.n	80049a4 <RCCEx_PLLSAI1_Config+0x38>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	2b02      	cmp	r3, #2
 8004990:	d008      	beq.n	80049a4 <RCCEx_PLLSAI1_Config+0x38>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	2b03      	cmp	r3, #3
 8004998:	d004      	beq.n	80049a4 <RCCEx_PLLSAI1_Config+0x38>
 800499a:	f640 3162 	movw	r1, #2914	@ 0xb62
 800499e:	4887      	ldr	r0, [pc, #540]	@ (8004bbc <RCCEx_PLLSAI1_Config+0x250>)
 80049a0:	f7fc fdf0 	bl	8001584 <assert_failed>
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d003      	beq.n	80049b4 <RCCEx_PLLSAI1_Config+0x48>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	2b08      	cmp	r3, #8
 80049b2:	d904      	bls.n	80049be <RCCEx_PLLSAI1_Config+0x52>
 80049b4:	f640 3163 	movw	r1, #2915	@ 0xb63
 80049b8:	4880      	ldr	r0, [pc, #512]	@ (8004bbc <RCCEx_PLLSAI1_Config+0x250>)
 80049ba:	f7fc fde3 	bl	8001584 <assert_failed>
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	2b07      	cmp	r3, #7
 80049c4:	d903      	bls.n	80049ce <RCCEx_PLLSAI1_Config+0x62>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	2b56      	cmp	r3, #86	@ 0x56
 80049cc:	d904      	bls.n	80049d8 <RCCEx_PLLSAI1_Config+0x6c>
 80049ce:	f640 3164 	movw	r1, #2916	@ 0xb64
 80049d2:	487a      	ldr	r0, [pc, #488]	@ (8004bbc <RCCEx_PLLSAI1_Config+0x250>)
 80049d4:	f7fc fdd6 	bl	8001584 <assert_failed>
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	699b      	ldr	r3, [r3, #24]
 80049dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d10b      	bne.n	80049fc <RCCEx_PLLSAI1_Config+0x90>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	699b      	ldr	r3, [r3, #24]
 80049e8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d105      	bne.n	80049fc <RCCEx_PLLSAI1_Config+0x90>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	699b      	ldr	r3, [r3, #24]
 80049f4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d007      	beq.n	8004a0c <RCCEx_PLLSAI1_Config+0xa0>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	699b      	ldr	r3, [r3, #24]
 8004a00:	f023 7388 	bic.w	r3, r3, #17825792	@ 0x1100000
 8004a04:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d004      	beq.n	8004a16 <RCCEx_PLLSAI1_Config+0xaa>
 8004a0c:	f640 3165 	movw	r1, #2917	@ 0xb65
 8004a10:	486a      	ldr	r0, [pc, #424]	@ (8004bbc <RCCEx_PLLSAI1_Config+0x250>)
 8004a12:	f7fc fdb7 	bl	8001584 <assert_failed>

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004a16:	4b6a      	ldr	r3, [pc, #424]	@ (8004bc0 <RCCEx_PLLSAI1_Config+0x254>)
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	f003 0303 	and.w	r3, r3, #3
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d018      	beq.n	8004a54 <RCCEx_PLLSAI1_Config+0xe8>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004a22:	4b67      	ldr	r3, [pc, #412]	@ (8004bc0 <RCCEx_PLLSAI1_Config+0x254>)
 8004a24:	68db      	ldr	r3, [r3, #12]
 8004a26:	f003 0203 	and.w	r2, r3, #3
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	d10d      	bne.n	8004a4e <RCCEx_PLLSAI1_Config+0xe2>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
       ||
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d009      	beq.n	8004a4e <RCCEx_PLLSAI1_Config+0xe2>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004a3a:	4b61      	ldr	r3, [pc, #388]	@ (8004bc0 <RCCEx_PLLSAI1_Config+0x254>)
 8004a3c:	68db      	ldr	r3, [r3, #12]
 8004a3e:	091b      	lsrs	r3, r3, #4
 8004a40:	f003 0307 	and.w	r3, r3, #7
 8004a44:	1c5a      	adds	r2, r3, #1
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	685b      	ldr	r3, [r3, #4]
       ||
 8004a4a:	429a      	cmp	r2, r3
 8004a4c:	d047      	beq.n	8004ade <RCCEx_PLLSAI1_Config+0x172>
#endif
      )
    {
      status = HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	73fb      	strb	r3, [r7, #15]
 8004a52:	e044      	b.n	8004ade <RCCEx_PLLSAI1_Config+0x172>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	2b03      	cmp	r3, #3
 8004a5a:	d018      	beq.n	8004a8e <RCCEx_PLLSAI1_Config+0x122>
 8004a5c:	2b03      	cmp	r3, #3
 8004a5e:	d825      	bhi.n	8004aac <RCCEx_PLLSAI1_Config+0x140>
 8004a60:	2b01      	cmp	r3, #1
 8004a62:	d002      	beq.n	8004a6a <RCCEx_PLLSAI1_Config+0xfe>
 8004a64:	2b02      	cmp	r3, #2
 8004a66:	d009      	beq.n	8004a7c <RCCEx_PLLSAI1_Config+0x110>
 8004a68:	e020      	b.n	8004aac <RCCEx_PLLSAI1_Config+0x140>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004a6a:	4b55      	ldr	r3, [pc, #340]	@ (8004bc0 <RCCEx_PLLSAI1_Config+0x254>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 0302 	and.w	r3, r3, #2
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d11d      	bne.n	8004ab2 <RCCEx_PLLSAI1_Config+0x146>
      {
        status = HAL_ERROR;
 8004a76:	2301      	movs	r3, #1
 8004a78:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a7a:	e01a      	b.n	8004ab2 <RCCEx_PLLSAI1_Config+0x146>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004a7c:	4b50      	ldr	r3, [pc, #320]	@ (8004bc0 <RCCEx_PLLSAI1_Config+0x254>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d116      	bne.n	8004ab6 <RCCEx_PLLSAI1_Config+0x14a>
      {
        status = HAL_ERROR;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a8c:	e013      	b.n	8004ab6 <RCCEx_PLLSAI1_Config+0x14a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004a8e:	4b4c      	ldr	r3, [pc, #304]	@ (8004bc0 <RCCEx_PLLSAI1_Config+0x254>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d10f      	bne.n	8004aba <RCCEx_PLLSAI1_Config+0x14e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004a9a:	4b49      	ldr	r3, [pc, #292]	@ (8004bc0 <RCCEx_PLLSAI1_Config+0x254>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d109      	bne.n	8004aba <RCCEx_PLLSAI1_Config+0x14e>
        {
          status = HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004aaa:	e006      	b.n	8004aba <RCCEx_PLLSAI1_Config+0x14e>
    default:
      status = HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	73fb      	strb	r3, [r7, #15]
      break;
 8004ab0:	e004      	b.n	8004abc <RCCEx_PLLSAI1_Config+0x150>
      break;
 8004ab2:	bf00      	nop
 8004ab4:	e002      	b.n	8004abc <RCCEx_PLLSAI1_Config+0x150>
      break;
 8004ab6:	bf00      	nop
 8004ab8:	e000      	b.n	8004abc <RCCEx_PLLSAI1_Config+0x150>
      break;
 8004aba:	bf00      	nop
    }

    if(status == HAL_OK)
 8004abc:	7bfb      	ldrb	r3, [r7, #15]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d10d      	bne.n	8004ade <RCCEx_PLLSAI1_Config+0x172>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004ac2:	4b3f      	ldr	r3, [pc, #252]	@ (8004bc0 <RCCEx_PLLSAI1_Config+0x254>)
 8004ac4:	68db      	ldr	r3, [r3, #12]
 8004ac6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6819      	ldr	r1, [r3, #0]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	3b01      	subs	r3, #1
 8004ad4:	011b      	lsls	r3, r3, #4
 8004ad6:	430b      	orrs	r3, r1
 8004ad8:	4939      	ldr	r1, [pc, #228]	@ (8004bc0 <RCCEx_PLLSAI1_Config+0x254>)
 8004ada:	4313      	orrs	r3, r2
 8004adc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004ade:	7bfb      	ldrb	r3, [r7, #15]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	f040 80ba 	bne.w	8004c5a <RCCEx_PLLSAI1_Config+0x2ee>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004ae6:	4b36      	ldr	r3, [pc, #216]	@ (8004bc0 <RCCEx_PLLSAI1_Config+0x254>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a35      	ldr	r2, [pc, #212]	@ (8004bc0 <RCCEx_PLLSAI1_Config+0x254>)
 8004aec:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004af0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004af2:	f7fd fafd 	bl	80020f0 <HAL_GetTick>
 8004af6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004af8:	e009      	b.n	8004b0e <RCCEx_PLLSAI1_Config+0x1a2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004afa:	f7fd faf9 	bl	80020f0 <HAL_GetTick>
 8004afe:	4602      	mov	r2, r0
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	1ad3      	subs	r3, r2, r3
 8004b04:	2b02      	cmp	r3, #2
 8004b06:	d902      	bls.n	8004b0e <RCCEx_PLLSAI1_Config+0x1a2>
      {
        status = HAL_TIMEOUT;
 8004b08:	2303      	movs	r3, #3
 8004b0a:	73fb      	strb	r3, [r7, #15]
        break;
 8004b0c:	e005      	b.n	8004b1a <RCCEx_PLLSAI1_Config+0x1ae>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004b0e:	4b2c      	ldr	r3, [pc, #176]	@ (8004bc0 <RCCEx_PLLSAI1_Config+0x254>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d1ef      	bne.n	8004afa <RCCEx_PLLSAI1_Config+0x18e>
      }
    }

    if(status == HAL_OK)
 8004b1a:	7bfb      	ldrb	r3, [r7, #15]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	f040 809c 	bne.w	8004c5a <RCCEx_PLLSAI1_Config+0x2ee>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d11e      	bne.n	8004b66 <RCCEx_PLLSAI1_Config+0x1fa>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	68db      	ldr	r3, [r3, #12]
 8004b2c:	2b07      	cmp	r3, #7
 8004b2e:	d008      	beq.n	8004b42 <RCCEx_PLLSAI1_Config+0x1d6>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	68db      	ldr	r3, [r3, #12]
 8004b34:	2b11      	cmp	r3, #17
 8004b36:	d004      	beq.n	8004b42 <RCCEx_PLLSAI1_Config+0x1d6>
 8004b38:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 8004b3c:	481f      	ldr	r0, [pc, #124]	@ (8004bbc <RCCEx_PLLSAI1_Config+0x250>)
 8004b3e:	f7fc fd21 	bl	8001584 <assert_failed>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b42:	4b1f      	ldr	r3, [pc, #124]	@ (8004bc0 <RCCEx_PLLSAI1_Config+0x254>)
 8004b44:	691b      	ldr	r3, [r3, #16]
 8004b46:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004b4a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	6892      	ldr	r2, [r2, #8]
 8004b52:	0211      	lsls	r1, r2, #8
 8004b54:	687a      	ldr	r2, [r7, #4]
 8004b56:	68d2      	ldr	r2, [r2, #12]
 8004b58:	0912      	lsrs	r2, r2, #4
 8004b5a:	0452      	lsls	r2, r2, #17
 8004b5c:	430a      	orrs	r2, r1
 8004b5e:	4918      	ldr	r1, [pc, #96]	@ (8004bc0 <RCCEx_PLLSAI1_Config+0x254>)
 8004b60:	4313      	orrs	r3, r2
 8004b62:	610b      	str	r3, [r1, #16]
 8004b64:	e055      	b.n	8004c12 <RCCEx_PLLSAI1_Config+0x2a6>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d12b      	bne.n	8004bc4 <RCCEx_PLLSAI1_Config+0x258>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	691b      	ldr	r3, [r3, #16]
 8004b70:	2b02      	cmp	r3, #2
 8004b72:	d010      	beq.n	8004b96 <RCCEx_PLLSAI1_Config+0x22a>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	691b      	ldr	r3, [r3, #16]
 8004b78:	2b04      	cmp	r3, #4
 8004b7a:	d00c      	beq.n	8004b96 <RCCEx_PLLSAI1_Config+0x22a>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	691b      	ldr	r3, [r3, #16]
 8004b80:	2b06      	cmp	r3, #6
 8004b82:	d008      	beq.n	8004b96 <RCCEx_PLLSAI1_Config+0x22a>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	691b      	ldr	r3, [r3, #16]
 8004b88:	2b08      	cmp	r3, #8
 8004b8a:	d004      	beq.n	8004b96 <RCCEx_PLLSAI1_Config+0x22a>
 8004b8c:	f640 31dc 	movw	r1, #3036	@ 0xbdc
 8004b90:	480a      	ldr	r0, [pc, #40]	@ (8004bbc <RCCEx_PLLSAI1_Config+0x250>)
 8004b92:	f7fc fcf7 	bl	8001584 <assert_failed>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b96:	4b0a      	ldr	r3, [pc, #40]	@ (8004bc0 <RCCEx_PLLSAI1_Config+0x254>)
 8004b98:	691b      	ldr	r3, [r3, #16]
 8004b9a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004b9e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	6892      	ldr	r2, [r2, #8]
 8004ba6:	0211      	lsls	r1, r2, #8
 8004ba8:	687a      	ldr	r2, [r7, #4]
 8004baa:	6912      	ldr	r2, [r2, #16]
 8004bac:	0852      	lsrs	r2, r2, #1
 8004bae:	3a01      	subs	r2, #1
 8004bb0:	0552      	lsls	r2, r2, #21
 8004bb2:	430a      	orrs	r2, r1
 8004bb4:	4902      	ldr	r1, [pc, #8]	@ (8004bc0 <RCCEx_PLLSAI1_Config+0x254>)
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	610b      	str	r3, [r1, #16]
 8004bba:	e02a      	b.n	8004c12 <RCCEx_PLLSAI1_Config+0x2a6>
 8004bbc:	080091e8 	.word	0x080091e8
 8004bc0:	40021000 	.word	0x40021000
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	695b      	ldr	r3, [r3, #20]
 8004bc8:	2b02      	cmp	r3, #2
 8004bca:	d010      	beq.n	8004bee <RCCEx_PLLSAI1_Config+0x282>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	695b      	ldr	r3, [r3, #20]
 8004bd0:	2b04      	cmp	r3, #4
 8004bd2:	d00c      	beq.n	8004bee <RCCEx_PLLSAI1_Config+0x282>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	695b      	ldr	r3, [r3, #20]
 8004bd8:	2b06      	cmp	r3, #6
 8004bda:	d008      	beq.n	8004bee <RCCEx_PLLSAI1_Config+0x282>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	695b      	ldr	r3, [r3, #20]
 8004be0:	2b08      	cmp	r3, #8
 8004be2:	d004      	beq.n	8004bee <RCCEx_PLLSAI1_Config+0x282>
 8004be4:	f640 31ee 	movw	r1, #3054	@ 0xbee
 8004be8:	481e      	ldr	r0, [pc, #120]	@ (8004c64 <RCCEx_PLLSAI1_Config+0x2f8>)
 8004bea:	f7fc fccb 	bl	8001584 <assert_failed>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004bee:	4b1e      	ldr	r3, [pc, #120]	@ (8004c68 <RCCEx_PLLSAI1_Config+0x2fc>)
 8004bf0:	691b      	ldr	r3, [r3, #16]
 8004bf2:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004bf6:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004bfa:	687a      	ldr	r2, [r7, #4]
 8004bfc:	6892      	ldr	r2, [r2, #8]
 8004bfe:	0211      	lsls	r1, r2, #8
 8004c00:	687a      	ldr	r2, [r7, #4]
 8004c02:	6952      	ldr	r2, [r2, #20]
 8004c04:	0852      	lsrs	r2, r2, #1
 8004c06:	3a01      	subs	r2, #1
 8004c08:	0652      	lsls	r2, r2, #25
 8004c0a:	430a      	orrs	r2, r1
 8004c0c:	4916      	ldr	r1, [pc, #88]	@ (8004c68 <RCCEx_PLLSAI1_Config+0x2fc>)
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004c12:	4b15      	ldr	r3, [pc, #84]	@ (8004c68 <RCCEx_PLLSAI1_Config+0x2fc>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a14      	ldr	r2, [pc, #80]	@ (8004c68 <RCCEx_PLLSAI1_Config+0x2fc>)
 8004c18:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004c1c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c1e:	f7fd fa67 	bl	80020f0 <HAL_GetTick>
 8004c22:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004c24:	e009      	b.n	8004c3a <RCCEx_PLLSAI1_Config+0x2ce>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004c26:	f7fd fa63 	bl	80020f0 <HAL_GetTick>
 8004c2a:	4602      	mov	r2, r0
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	1ad3      	subs	r3, r2, r3
 8004c30:	2b02      	cmp	r3, #2
 8004c32:	d902      	bls.n	8004c3a <RCCEx_PLLSAI1_Config+0x2ce>
        {
          status = HAL_TIMEOUT;
 8004c34:	2303      	movs	r3, #3
 8004c36:	73fb      	strb	r3, [r7, #15]
          break;
 8004c38:	e005      	b.n	8004c46 <RCCEx_PLLSAI1_Config+0x2da>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004c3a:	4b0b      	ldr	r3, [pc, #44]	@ (8004c68 <RCCEx_PLLSAI1_Config+0x2fc>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d0ef      	beq.n	8004c26 <RCCEx_PLLSAI1_Config+0x2ba>
        }
      }

      if(status == HAL_OK)
 8004c46:	7bfb      	ldrb	r3, [r7, #15]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d106      	bne.n	8004c5a <RCCEx_PLLSAI1_Config+0x2ee>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004c4c:	4b06      	ldr	r3, [pc, #24]	@ (8004c68 <RCCEx_PLLSAI1_Config+0x2fc>)
 8004c4e:	691a      	ldr	r2, [r3, #16]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	699b      	ldr	r3, [r3, #24]
 8004c54:	4904      	ldr	r1, [pc, #16]	@ (8004c68 <RCCEx_PLLSAI1_Config+0x2fc>)
 8004c56:	4313      	orrs	r3, r2
 8004c58:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004c5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	3710      	adds	r7, #16
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}
 8004c64:	080091e8 	.word	0x080091e8
 8004c68:	40021000 	.word	0x40021000

08004c6c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b084      	sub	sp, #16
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
 8004c74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004c76:	2300      	movs	r3, #0
 8004c78:	73fb      	strb	r3, [r7, #15]

  /* check for PLLSAI2 Parameters used to output PLLSAI2CLK */
  /* P, Q and R dividers are verified in each specific divider case below */
  assert_param(IS_RCC_PLLSAI2SOURCE(PllSai2->PLLSAI2Source));
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d010      	beq.n	8004ca4 <RCCEx_PLLSAI2_Config+0x38>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	d00c      	beq.n	8004ca4 <RCCEx_PLLSAI2_Config+0x38>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	2b02      	cmp	r3, #2
 8004c90:	d008      	beq.n	8004ca4 <RCCEx_PLLSAI2_Config+0x38>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	2b03      	cmp	r3, #3
 8004c98:	d004      	beq.n	8004ca4 <RCCEx_PLLSAI2_Config+0x38>
 8004c9a:	f640 412f 	movw	r1, #3119	@ 0xc2f
 8004c9e:	4896      	ldr	r0, [pc, #600]	@ (8004ef8 <RCCEx_PLLSAI2_Config+0x28c>)
 8004ca0:	f7fc fc70 	bl	8001584 <assert_failed>
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d003      	beq.n	8004cb4 <RCCEx_PLLSAI2_Config+0x48>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	2b08      	cmp	r3, #8
 8004cb2:	d904      	bls.n	8004cbe <RCCEx_PLLSAI2_Config+0x52>
 8004cb4:	f44f 6143 	mov.w	r1, #3120	@ 0xc30
 8004cb8:	488f      	ldr	r0, [pc, #572]	@ (8004ef8 <RCCEx_PLLSAI2_Config+0x28c>)
 8004cba:	f7fc fc63 	bl	8001584 <assert_failed>
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	2b07      	cmp	r3, #7
 8004cc4:	d903      	bls.n	8004cce <RCCEx_PLLSAI2_Config+0x62>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	2b56      	cmp	r3, #86	@ 0x56
 8004ccc:	d904      	bls.n	8004cd8 <RCCEx_PLLSAI2_Config+0x6c>
 8004cce:	f640 4131 	movw	r1, #3121	@ 0xc31
 8004cd2:	4889      	ldr	r0, [pc, #548]	@ (8004ef8 <RCCEx_PLLSAI2_Config+0x28c>)
 8004cd4:	f7fc fc56 	bl	8001584 <assert_failed>
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	695b      	ldr	r3, [r3, #20]
 8004cdc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d105      	bne.n	8004cf0 <RCCEx_PLLSAI2_Config+0x84>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	695b      	ldr	r3, [r3, #20]
 8004ce8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d007      	beq.n	8004d00 <RCCEx_PLLSAI2_Config+0x94>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	695b      	ldr	r3, [r3, #20]
 8004cf4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004cf8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d004      	beq.n	8004d0a <RCCEx_PLLSAI2_Config+0x9e>
 8004d00:	f640 4132 	movw	r1, #3122	@ 0xc32
 8004d04:	487c      	ldr	r0, [pc, #496]	@ (8004ef8 <RCCEx_PLLSAI2_Config+0x28c>)
 8004d06:	f7fc fc3d 	bl	8001584 <assert_failed>

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004d0a:	4b7c      	ldr	r3, [pc, #496]	@ (8004efc <RCCEx_PLLSAI2_Config+0x290>)
 8004d0c:	68db      	ldr	r3, [r3, #12]
 8004d0e:	f003 0303 	and.w	r3, r3, #3
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d018      	beq.n	8004d48 <RCCEx_PLLSAI2_Config+0xdc>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004d16:	4b79      	ldr	r3, [pc, #484]	@ (8004efc <RCCEx_PLLSAI2_Config+0x290>)
 8004d18:	68db      	ldr	r3, [r3, #12]
 8004d1a:	f003 0203 	and.w	r2, r3, #3
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	429a      	cmp	r2, r3
 8004d24:	d10d      	bne.n	8004d42 <RCCEx_PLLSAI2_Config+0xd6>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
       ||
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d009      	beq.n	8004d42 <RCCEx_PLLSAI2_Config+0xd6>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004d2e:	4b73      	ldr	r3, [pc, #460]	@ (8004efc <RCCEx_PLLSAI2_Config+0x290>)
 8004d30:	68db      	ldr	r3, [r3, #12]
 8004d32:	091b      	lsrs	r3, r3, #4
 8004d34:	f003 0307 	and.w	r3, r3, #7
 8004d38:	1c5a      	adds	r2, r3, #1
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	685b      	ldr	r3, [r3, #4]
       ||
 8004d3e:	429a      	cmp	r2, r3
 8004d40:	d047      	beq.n	8004dd2 <RCCEx_PLLSAI2_Config+0x166>
#endif
      )
    {
      status = HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	73fb      	strb	r3, [r7, #15]
 8004d46:	e044      	b.n	8004dd2 <RCCEx_PLLSAI2_Config+0x166>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	2b03      	cmp	r3, #3
 8004d4e:	d018      	beq.n	8004d82 <RCCEx_PLLSAI2_Config+0x116>
 8004d50:	2b03      	cmp	r3, #3
 8004d52:	d825      	bhi.n	8004da0 <RCCEx_PLLSAI2_Config+0x134>
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	d002      	beq.n	8004d5e <RCCEx_PLLSAI2_Config+0xf2>
 8004d58:	2b02      	cmp	r3, #2
 8004d5a:	d009      	beq.n	8004d70 <RCCEx_PLLSAI2_Config+0x104>
 8004d5c:	e020      	b.n	8004da0 <RCCEx_PLLSAI2_Config+0x134>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004d5e:	4b67      	ldr	r3, [pc, #412]	@ (8004efc <RCCEx_PLLSAI2_Config+0x290>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f003 0302 	and.w	r3, r3, #2
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d11d      	bne.n	8004da6 <RCCEx_PLLSAI2_Config+0x13a>
      {
        status = HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d6e:	e01a      	b.n	8004da6 <RCCEx_PLLSAI2_Config+0x13a>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004d70:	4b62      	ldr	r3, [pc, #392]	@ (8004efc <RCCEx_PLLSAI2_Config+0x290>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d116      	bne.n	8004daa <RCCEx_PLLSAI2_Config+0x13e>
      {
        status = HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d80:	e013      	b.n	8004daa <RCCEx_PLLSAI2_Config+0x13e>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004d82:	4b5e      	ldr	r3, [pc, #376]	@ (8004efc <RCCEx_PLLSAI2_Config+0x290>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d10f      	bne.n	8004dae <RCCEx_PLLSAI2_Config+0x142>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004d8e:	4b5b      	ldr	r3, [pc, #364]	@ (8004efc <RCCEx_PLLSAI2_Config+0x290>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d109      	bne.n	8004dae <RCCEx_PLLSAI2_Config+0x142>
        {
          status = HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004d9e:	e006      	b.n	8004dae <RCCEx_PLLSAI2_Config+0x142>
    default:
      status = HAL_ERROR;
 8004da0:	2301      	movs	r3, #1
 8004da2:	73fb      	strb	r3, [r7, #15]
      break;
 8004da4:	e004      	b.n	8004db0 <RCCEx_PLLSAI2_Config+0x144>
      break;
 8004da6:	bf00      	nop
 8004da8:	e002      	b.n	8004db0 <RCCEx_PLLSAI2_Config+0x144>
      break;
 8004daa:	bf00      	nop
 8004dac:	e000      	b.n	8004db0 <RCCEx_PLLSAI2_Config+0x144>
      break;
 8004dae:	bf00      	nop
    }

    if(status == HAL_OK)
 8004db0:	7bfb      	ldrb	r3, [r7, #15]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d10d      	bne.n	8004dd2 <RCCEx_PLLSAI2_Config+0x166>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004db6:	4b51      	ldr	r3, [pc, #324]	@ (8004efc <RCCEx_PLLSAI2_Config+0x290>)
 8004db8:	68db      	ldr	r3, [r3, #12]
 8004dba:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6819      	ldr	r1, [r3, #0]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	3b01      	subs	r3, #1
 8004dc8:	011b      	lsls	r3, r3, #4
 8004dca:	430b      	orrs	r3, r1
 8004dcc:	494b      	ldr	r1, [pc, #300]	@ (8004efc <RCCEx_PLLSAI2_Config+0x290>)
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004dd2:	7bfb      	ldrb	r3, [r7, #15]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	f040 808a 	bne.w	8004eee <RCCEx_PLLSAI2_Config+0x282>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004dda:	4b48      	ldr	r3, [pc, #288]	@ (8004efc <RCCEx_PLLSAI2_Config+0x290>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a47      	ldr	r2, [pc, #284]	@ (8004efc <RCCEx_PLLSAI2_Config+0x290>)
 8004de0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004de4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004de6:	f7fd f983 	bl	80020f0 <HAL_GetTick>
 8004dea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004dec:	e009      	b.n	8004e02 <RCCEx_PLLSAI2_Config+0x196>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004dee:	f7fd f97f 	bl	80020f0 <HAL_GetTick>
 8004df2:	4602      	mov	r2, r0
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	1ad3      	subs	r3, r2, r3
 8004df8:	2b02      	cmp	r3, #2
 8004dfa:	d902      	bls.n	8004e02 <RCCEx_PLLSAI2_Config+0x196>
      {
        status = HAL_TIMEOUT;
 8004dfc:	2303      	movs	r3, #3
 8004dfe:	73fb      	strb	r3, [r7, #15]
        break;
 8004e00:	e005      	b.n	8004e0e <RCCEx_PLLSAI2_Config+0x1a2>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004e02:	4b3e      	ldr	r3, [pc, #248]	@ (8004efc <RCCEx_PLLSAI2_Config+0x290>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d1ef      	bne.n	8004dee <RCCEx_PLLSAI2_Config+0x182>
      }
    }

    if(status == HAL_OK)
 8004e0e:	7bfb      	ldrb	r3, [r7, #15]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d16c      	bne.n	8004eee <RCCEx_PLLSAI2_Config+0x282>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d11e      	bne.n	8004e58 <RCCEx_PLLSAI2_Config+0x1ec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	68db      	ldr	r3, [r3, #12]
 8004e1e:	2b07      	cmp	r3, #7
 8004e20:	d008      	beq.n	8004e34 <RCCEx_PLLSAI2_Config+0x1c8>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	68db      	ldr	r3, [r3, #12]
 8004e26:	2b11      	cmp	r3, #17
 8004e28:	d004      	beq.n	8004e34 <RCCEx_PLLSAI2_Config+0x1c8>
 8004e2a:	f640 4185 	movw	r1, #3205	@ 0xc85
 8004e2e:	4832      	ldr	r0, [pc, #200]	@ (8004ef8 <RCCEx_PLLSAI2_Config+0x28c>)
 8004e30:	f7fc fba8 	bl	8001584 <assert_failed>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004e34:	4b31      	ldr	r3, [pc, #196]	@ (8004efc <RCCEx_PLLSAI2_Config+0x290>)
 8004e36:	695b      	ldr	r3, [r3, #20]
 8004e38:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004e3c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e40:	687a      	ldr	r2, [r7, #4]
 8004e42:	6892      	ldr	r2, [r2, #8]
 8004e44:	0211      	lsls	r1, r2, #8
 8004e46:	687a      	ldr	r2, [r7, #4]
 8004e48:	68d2      	ldr	r2, [r2, #12]
 8004e4a:	0912      	lsrs	r2, r2, #4
 8004e4c:	0452      	lsls	r2, r2, #17
 8004e4e:	430a      	orrs	r2, r1
 8004e50:	492a      	ldr	r1, [pc, #168]	@ (8004efc <RCCEx_PLLSAI2_Config+0x290>)
 8004e52:	4313      	orrs	r3, r2
 8004e54:	614b      	str	r3, [r1, #20]
 8004e56:	e026      	b.n	8004ea6 <RCCEx_PLLSAI2_Config+0x23a>
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#endif /* RCC_PLLSAI2Q_DIV_SUPPORT */
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	691b      	ldr	r3, [r3, #16]
 8004e5c:	2b02      	cmp	r3, #2
 8004e5e:	d010      	beq.n	8004e82 <RCCEx_PLLSAI2_Config+0x216>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	691b      	ldr	r3, [r3, #16]
 8004e64:	2b04      	cmp	r3, #4
 8004e66:	d00c      	beq.n	8004e82 <RCCEx_PLLSAI2_Config+0x216>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	691b      	ldr	r3, [r3, #16]
 8004e6c:	2b06      	cmp	r3, #6
 8004e6e:	d008      	beq.n	8004e82 <RCCEx_PLLSAI2_Config+0x216>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	691b      	ldr	r3, [r3, #16]
 8004e74:	2b08      	cmp	r3, #8
 8004e76:	d004      	beq.n	8004e82 <RCCEx_PLLSAI2_Config+0x216>
 8004e78:	f640 41bd 	movw	r1, #3261	@ 0xcbd
 8004e7c:	481e      	ldr	r0, [pc, #120]	@ (8004ef8 <RCCEx_PLLSAI2_Config+0x28c>)
 8004e7e:	f7fc fb81 	bl	8001584 <assert_failed>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004e82:	4b1e      	ldr	r3, [pc, #120]	@ (8004efc <RCCEx_PLLSAI2_Config+0x290>)
 8004e84:	695b      	ldr	r3, [r3, #20]
 8004e86:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004e8a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	6892      	ldr	r2, [r2, #8]
 8004e92:	0211      	lsls	r1, r2, #8
 8004e94:	687a      	ldr	r2, [r7, #4]
 8004e96:	6912      	ldr	r2, [r2, #16]
 8004e98:	0852      	lsrs	r2, r2, #1
 8004e9a:	3a01      	subs	r2, #1
 8004e9c:	0652      	lsls	r2, r2, #25
 8004e9e:	430a      	orrs	r2, r1
 8004ea0:	4916      	ldr	r1, [pc, #88]	@ (8004efc <RCCEx_PLLSAI2_Config+0x290>)
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004ea6:	4b15      	ldr	r3, [pc, #84]	@ (8004efc <RCCEx_PLLSAI2_Config+0x290>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a14      	ldr	r2, [pc, #80]	@ (8004efc <RCCEx_PLLSAI2_Config+0x290>)
 8004eac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004eb0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eb2:	f7fd f91d 	bl	80020f0 <HAL_GetTick>
 8004eb6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004eb8:	e009      	b.n	8004ece <RCCEx_PLLSAI2_Config+0x262>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004eba:	f7fd f919 	bl	80020f0 <HAL_GetTick>
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	1ad3      	subs	r3, r2, r3
 8004ec4:	2b02      	cmp	r3, #2
 8004ec6:	d902      	bls.n	8004ece <RCCEx_PLLSAI2_Config+0x262>
        {
          status = HAL_TIMEOUT;
 8004ec8:	2303      	movs	r3, #3
 8004eca:	73fb      	strb	r3, [r7, #15]
          break;
 8004ecc:	e005      	b.n	8004eda <RCCEx_PLLSAI2_Config+0x26e>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004ece:	4b0b      	ldr	r3, [pc, #44]	@ (8004efc <RCCEx_PLLSAI2_Config+0x290>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d0ef      	beq.n	8004eba <RCCEx_PLLSAI2_Config+0x24e>
        }
      }

      if(status == HAL_OK)
 8004eda:	7bfb      	ldrb	r3, [r7, #15]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d106      	bne.n	8004eee <RCCEx_PLLSAI2_Config+0x282>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004ee0:	4b06      	ldr	r3, [pc, #24]	@ (8004efc <RCCEx_PLLSAI2_Config+0x290>)
 8004ee2:	695a      	ldr	r2, [r3, #20]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	695b      	ldr	r3, [r3, #20]
 8004ee8:	4904      	ldr	r1, [pc, #16]	@ (8004efc <RCCEx_PLLSAI2_Config+0x290>)
 8004eea:	4313      	orrs	r3, r2
 8004eec:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004eee:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	3710      	adds	r7, #16
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}
 8004ef8:	080091e8 	.word	0x080091e8
 8004efc:	40021000 	.word	0x40021000

08004f00 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b084      	sub	sp, #16
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d101      	bne.n	8004f12 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	e1dd      	b.n	80052ce <HAL_SPI_Init+0x3ce>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a7b      	ldr	r2, [pc, #492]	@ (8005104 <HAL_SPI_Init+0x204>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d00e      	beq.n	8004f3a <HAL_SPI_Init+0x3a>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a79      	ldr	r2, [pc, #484]	@ (8005108 <HAL_SPI_Init+0x208>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d009      	beq.n	8004f3a <HAL_SPI_Init+0x3a>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a78      	ldr	r2, [pc, #480]	@ (800510c <HAL_SPI_Init+0x20c>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d004      	beq.n	8004f3a <HAL_SPI_Init+0x3a>
 8004f30:	f240 1147 	movw	r1, #327	@ 0x147
 8004f34:	4876      	ldr	r0, [pc, #472]	@ (8005110 <HAL_SPI_Init+0x210>)
 8004f36:	f7fc fb25 	bl	8001584 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d009      	beq.n	8004f56 <HAL_SPI_Init+0x56>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004f4a:	d004      	beq.n	8004f56 <HAL_SPI_Init+0x56>
 8004f4c:	f44f 71a4 	mov.w	r1, #328	@ 0x148
 8004f50:	486f      	ldr	r0, [pc, #444]	@ (8005110 <HAL_SPI_Init+0x210>)
 8004f52:	f7fc fb17 	bl	8001584 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d00e      	beq.n	8004f7c <HAL_SPI_Init+0x7c>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f66:	d009      	beq.n	8004f7c <HAL_SPI_Init+0x7c>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	689b      	ldr	r3, [r3, #8]
 8004f6c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f70:	d004      	beq.n	8004f7c <HAL_SPI_Init+0x7c>
 8004f72:	f240 1149 	movw	r1, #329	@ 0x149
 8004f76:	4866      	ldr	r0, [pc, #408]	@ (8005110 <HAL_SPI_Init+0x210>)
 8004f78:	f7fc fb04 	bl	8001584 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	68db      	ldr	r3, [r3, #12]
 8004f80:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004f84:	d040      	beq.n	8005008 <HAL_SPI_Init+0x108>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	68db      	ldr	r3, [r3, #12]
 8004f8a:	f5b3 6f60 	cmp.w	r3, #3584	@ 0xe00
 8004f8e:	d03b      	beq.n	8005008 <HAL_SPI_Init+0x108>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	68db      	ldr	r3, [r3, #12]
 8004f94:	f5b3 6f50 	cmp.w	r3, #3328	@ 0xd00
 8004f98:	d036      	beq.n	8005008 <HAL_SPI_Init+0x108>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	68db      	ldr	r3, [r3, #12]
 8004f9e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004fa2:	d031      	beq.n	8005008 <HAL_SPI_Init+0x108>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	68db      	ldr	r3, [r3, #12]
 8004fa8:	f5b3 6f30 	cmp.w	r3, #2816	@ 0xb00
 8004fac:	d02c      	beq.n	8005008 <HAL_SPI_Init+0x108>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	68db      	ldr	r3, [r3, #12]
 8004fb2:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004fb6:	d027      	beq.n	8005008 <HAL_SPI_Init+0x108>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	68db      	ldr	r3, [r3, #12]
 8004fbc:	f5b3 6f10 	cmp.w	r3, #2304	@ 0x900
 8004fc0:	d022      	beq.n	8005008 <HAL_SPI_Init+0x108>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	68db      	ldr	r3, [r3, #12]
 8004fc6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004fca:	d01d      	beq.n	8005008 <HAL_SPI_Init+0x108>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	68db      	ldr	r3, [r3, #12]
 8004fd0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004fd4:	d018      	beq.n	8005008 <HAL_SPI_Init+0x108>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	68db      	ldr	r3, [r3, #12]
 8004fda:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004fde:	d013      	beq.n	8005008 <HAL_SPI_Init+0x108>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	68db      	ldr	r3, [r3, #12]
 8004fe4:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8004fe8:	d00e      	beq.n	8005008 <HAL_SPI_Init+0x108>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	68db      	ldr	r3, [r3, #12]
 8004fee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ff2:	d009      	beq.n	8005008 <HAL_SPI_Init+0x108>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	68db      	ldr	r3, [r3, #12]
 8004ff8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ffc:	d004      	beq.n	8005008 <HAL_SPI_Init+0x108>
 8004ffe:	f44f 71a5 	mov.w	r1, #330	@ 0x14a
 8005002:	4843      	ldr	r0, [pc, #268]	@ (8005110 <HAL_SPI_Init+0x210>)
 8005004:	f7fc fabe 	bl	8001584 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	699b      	ldr	r3, [r3, #24]
 800500c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005010:	d00d      	beq.n	800502e <HAL_SPI_Init+0x12e>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	699b      	ldr	r3, [r3, #24]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d009      	beq.n	800502e <HAL_SPI_Init+0x12e>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	699b      	ldr	r3, [r3, #24]
 800501e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005022:	d004      	beq.n	800502e <HAL_SPI_Init+0x12e>
 8005024:	f240 114b 	movw	r1, #331	@ 0x14b
 8005028:	4839      	ldr	r0, [pc, #228]	@ (8005110 <HAL_SPI_Init+0x210>)
 800502a:	f7fc faab 	bl	8001584 <assert_failed>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005032:	2b08      	cmp	r3, #8
 8005034:	d008      	beq.n	8005048 <HAL_SPI_Init+0x148>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800503a:	2b00      	cmp	r3, #0
 800503c:	d004      	beq.n	8005048 <HAL_SPI_Init+0x148>
 800503e:	f44f 71a6 	mov.w	r1, #332	@ 0x14c
 8005042:	4833      	ldr	r0, [pc, #204]	@ (8005110 <HAL_SPI_Init+0x210>)
 8005044:	f7fc fa9e 	bl	8001584 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	69db      	ldr	r3, [r3, #28]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d020      	beq.n	8005092 <HAL_SPI_Init+0x192>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	69db      	ldr	r3, [r3, #28]
 8005054:	2b08      	cmp	r3, #8
 8005056:	d01c      	beq.n	8005092 <HAL_SPI_Init+0x192>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	69db      	ldr	r3, [r3, #28]
 800505c:	2b10      	cmp	r3, #16
 800505e:	d018      	beq.n	8005092 <HAL_SPI_Init+0x192>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	69db      	ldr	r3, [r3, #28]
 8005064:	2b18      	cmp	r3, #24
 8005066:	d014      	beq.n	8005092 <HAL_SPI_Init+0x192>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	69db      	ldr	r3, [r3, #28]
 800506c:	2b20      	cmp	r3, #32
 800506e:	d010      	beq.n	8005092 <HAL_SPI_Init+0x192>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	69db      	ldr	r3, [r3, #28]
 8005074:	2b28      	cmp	r3, #40	@ 0x28
 8005076:	d00c      	beq.n	8005092 <HAL_SPI_Init+0x192>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	69db      	ldr	r3, [r3, #28]
 800507c:	2b30      	cmp	r3, #48	@ 0x30
 800507e:	d008      	beq.n	8005092 <HAL_SPI_Init+0x192>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	69db      	ldr	r3, [r3, #28]
 8005084:	2b38      	cmp	r3, #56	@ 0x38
 8005086:	d004      	beq.n	8005092 <HAL_SPI_Init+0x192>
 8005088:	f240 114d 	movw	r1, #333	@ 0x14d
 800508c:	4820      	ldr	r0, [pc, #128]	@ (8005110 <HAL_SPI_Init+0x210>)
 800508e:	f7fc fa79 	bl	8001584 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6a1b      	ldr	r3, [r3, #32]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d008      	beq.n	80050ac <HAL_SPI_Init+0x1ac>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6a1b      	ldr	r3, [r3, #32]
 800509e:	2b80      	cmp	r3, #128	@ 0x80
 80050a0:	d004      	beq.n	80050ac <HAL_SPI_Init+0x1ac>
 80050a2:	f44f 71a7 	mov.w	r1, #334	@ 0x14e
 80050a6:	481a      	ldr	r0, [pc, #104]	@ (8005110 <HAL_SPI_Init+0x210>)
 80050a8:	f7fc fa6c 	bl	8001584 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d008      	beq.n	80050c6 <HAL_SPI_Init+0x1c6>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050b8:	2b10      	cmp	r3, #16
 80050ba:	d004      	beq.n	80050c6 <HAL_SPI_Init+0x1c6>
 80050bc:	f240 114f 	movw	r1, #335	@ 0x14f
 80050c0:	4813      	ldr	r0, [pc, #76]	@ (8005110 <HAL_SPI_Init+0x210>)
 80050c2:	f7fc fa5f 	bl	8001584 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d151      	bne.n	8005172 <HAL_SPI_Init+0x272>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	691b      	ldr	r3, [r3, #16]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d008      	beq.n	80050e8 <HAL_SPI_Init+0x1e8>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	691b      	ldr	r3, [r3, #16]
 80050da:	2b02      	cmp	r3, #2
 80050dc:	d004      	beq.n	80050e8 <HAL_SPI_Init+0x1e8>
 80050de:	f44f 71a9 	mov.w	r1, #338	@ 0x152
 80050e2:	480b      	ldr	r0, [pc, #44]	@ (8005110 <HAL_SPI_Init+0x210>)
 80050e4:	f7fc fa4e 	bl	8001584 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	695b      	ldr	r3, [r3, #20]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d011      	beq.n	8005114 <HAL_SPI_Init+0x214>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	695b      	ldr	r3, [r3, #20]
 80050f4:	2b01      	cmp	r3, #1
 80050f6:	d00d      	beq.n	8005114 <HAL_SPI_Init+0x214>
 80050f8:	f240 1153 	movw	r1, #339	@ 0x153
 80050fc:	4804      	ldr	r0, [pc, #16]	@ (8005110 <HAL_SPI_Init+0x210>)
 80050fe:	f7fc fa41 	bl	8001584 <assert_failed>
 8005102:	e007      	b.n	8005114 <HAL_SPI_Init+0x214>
 8005104:	40013000 	.word	0x40013000
 8005108:	40003800 	.word	0x40003800
 800510c:	40003c00 	.word	0x40003c00
 8005110:	08009224 	.word	0x08009224

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800511c:	d125      	bne.n	800516a <HAL_SPI_Init+0x26a>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	69db      	ldr	r3, [r3, #28]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d050      	beq.n	80051c8 <HAL_SPI_Init+0x2c8>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	69db      	ldr	r3, [r3, #28]
 800512a:	2b08      	cmp	r3, #8
 800512c:	d04c      	beq.n	80051c8 <HAL_SPI_Init+0x2c8>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	69db      	ldr	r3, [r3, #28]
 8005132:	2b10      	cmp	r3, #16
 8005134:	d048      	beq.n	80051c8 <HAL_SPI_Init+0x2c8>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	69db      	ldr	r3, [r3, #28]
 800513a:	2b18      	cmp	r3, #24
 800513c:	d044      	beq.n	80051c8 <HAL_SPI_Init+0x2c8>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	69db      	ldr	r3, [r3, #28]
 8005142:	2b20      	cmp	r3, #32
 8005144:	d040      	beq.n	80051c8 <HAL_SPI_Init+0x2c8>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	69db      	ldr	r3, [r3, #28]
 800514a:	2b28      	cmp	r3, #40	@ 0x28
 800514c:	d03c      	beq.n	80051c8 <HAL_SPI_Init+0x2c8>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	69db      	ldr	r3, [r3, #28]
 8005152:	2b30      	cmp	r3, #48	@ 0x30
 8005154:	d038      	beq.n	80051c8 <HAL_SPI_Init+0x2c8>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	69db      	ldr	r3, [r3, #28]
 800515a:	2b38      	cmp	r3, #56	@ 0x38
 800515c:	d034      	beq.n	80051c8 <HAL_SPI_Init+0x2c8>
 800515e:	f240 1157 	movw	r1, #343	@ 0x157
 8005162:	485d      	ldr	r0, [pc, #372]	@ (80052d8 <HAL_SPI_Init+0x3d8>)
 8005164:	f7fc fa0e 	bl	8001584 <assert_failed>
 8005168:	e02e      	b.n	80051c8 <HAL_SPI_Init+0x2c8>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2200      	movs	r2, #0
 800516e:	61da      	str	r2, [r3, #28]
 8005170:	e02a      	b.n	80051c8 <HAL_SPI_Init+0x2c8>
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	69db      	ldr	r3, [r3, #28]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d020      	beq.n	80051bc <HAL_SPI_Init+0x2bc>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	69db      	ldr	r3, [r3, #28]
 800517e:	2b08      	cmp	r3, #8
 8005180:	d01c      	beq.n	80051bc <HAL_SPI_Init+0x2bc>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	69db      	ldr	r3, [r3, #28]
 8005186:	2b10      	cmp	r3, #16
 8005188:	d018      	beq.n	80051bc <HAL_SPI_Init+0x2bc>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	69db      	ldr	r3, [r3, #28]
 800518e:	2b18      	cmp	r3, #24
 8005190:	d014      	beq.n	80051bc <HAL_SPI_Init+0x2bc>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	69db      	ldr	r3, [r3, #28]
 8005196:	2b20      	cmp	r3, #32
 8005198:	d010      	beq.n	80051bc <HAL_SPI_Init+0x2bc>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	69db      	ldr	r3, [r3, #28]
 800519e:	2b28      	cmp	r3, #40	@ 0x28
 80051a0:	d00c      	beq.n	80051bc <HAL_SPI_Init+0x2bc>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	69db      	ldr	r3, [r3, #28]
 80051a6:	2b30      	cmp	r3, #48	@ 0x30
 80051a8:	d008      	beq.n	80051bc <HAL_SPI_Init+0x2bc>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	69db      	ldr	r3, [r3, #28]
 80051ae:	2b38      	cmp	r3, #56	@ 0x38
 80051b0:	d004      	beq.n	80051bc <HAL_SPI_Init+0x2bc>
 80051b2:	f240 1161 	movw	r1, #353	@ 0x161
 80051b6:	4848      	ldr	r0, [pc, #288]	@ (80052d8 <HAL_SPI_Init+0x3d8>)
 80051b8:	f7fc f9e4 	bl	8001584 <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2200      	movs	r2, #0
 80051c0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2200      	movs	r2, #0
 80051c6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2200      	movs	r2, #0
 80051cc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80051d4:	b2db      	uxtb	r3, r3
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d106      	bne.n	80051e8 <HAL_SPI_Init+0x2e8>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2200      	movs	r2, #0
 80051de:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f7fc fa12 	bl	800160c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2202      	movs	r2, #2
 80051ec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	681a      	ldr	r2, [r3, #0]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80051fe:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	68db      	ldr	r3, [r3, #12]
 8005204:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005208:	d902      	bls.n	8005210 <HAL_SPI_Init+0x310>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800520a:	2300      	movs	r3, #0
 800520c:	60fb      	str	r3, [r7, #12]
 800520e:	e002      	b.n	8005216 <HAL_SPI_Init+0x316>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005210:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005214:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	68db      	ldr	r3, [r3, #12]
 800521a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800521e:	d007      	beq.n	8005230 <HAL_SPI_Init+0x330>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	68db      	ldr	r3, [r3, #12]
 8005224:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005228:	d002      	beq.n	8005230 <HAL_SPI_Init+0x330>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2200      	movs	r2, #0
 800522e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005240:	431a      	orrs	r2, r3
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	691b      	ldr	r3, [r3, #16]
 8005246:	f003 0302 	and.w	r3, r3, #2
 800524a:	431a      	orrs	r2, r3
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	695b      	ldr	r3, [r3, #20]
 8005250:	f003 0301 	and.w	r3, r3, #1
 8005254:	431a      	orrs	r2, r3
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	699b      	ldr	r3, [r3, #24]
 800525a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800525e:	431a      	orrs	r2, r3
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	69db      	ldr	r3, [r3, #28]
 8005264:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005268:	431a      	orrs	r2, r3
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6a1b      	ldr	r3, [r3, #32]
 800526e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005272:	ea42 0103 	orr.w	r1, r2, r3
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800527a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	430a      	orrs	r2, r1
 8005284:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	699b      	ldr	r3, [r3, #24]
 800528a:	0c1b      	lsrs	r3, r3, #16
 800528c:	f003 0204 	and.w	r2, r3, #4
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005294:	f003 0310 	and.w	r3, r3, #16
 8005298:	431a      	orrs	r2, r3
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800529e:	f003 0308 	and.w	r3, r3, #8
 80052a2:	431a      	orrs	r2, r3
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	68db      	ldr	r3, [r3, #12]
 80052a8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80052ac:	ea42 0103 	orr.w	r1, r2, r3
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	430a      	orrs	r2, r1
 80052bc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2200      	movs	r2, #0
 80052c2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2201      	movs	r2, #1
 80052c8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80052cc:	2300      	movs	r3, #0
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3710      	adds	r7, #16
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}
 80052d6:	bf00      	nop
 80052d8:	08009224 	.word	0x08009224

080052dc <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b084      	sub	sp, #16
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	60f8      	str	r0, [r7, #12]
 80052e4:	60b9      	str	r1, [r7, #8]
 80052e6:	4613      	mov	r3, r2
 80052e8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d009      	beq.n	8005306 <HAL_SPI_Transmit_IT+0x2a>
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	689b      	ldr	r3, [r3, #8]
 80052f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80052fa:	d004      	beq.n	8005306 <HAL_SPI_Transmit_IT+0x2a>
 80052fc:	f240 6144 	movw	r1, #1604	@ 0x644
 8005300:	483e      	ldr	r0, [pc, #248]	@ (80053fc <HAL_SPI_Transmit_IT+0x120>)
 8005302:	f7fc f93f 	bl	8001584 <assert_failed>


  if ((pData == NULL) || (Size == 0U))
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d002      	beq.n	8005312 <HAL_SPI_Transmit_IT+0x36>
 800530c:	88fb      	ldrh	r3, [r7, #6]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d101      	bne.n	8005316 <HAL_SPI_Transmit_IT+0x3a>
  {
    return HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	e06d      	b.n	80053f2 <HAL_SPI_Transmit_IT+0x116>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800531c:	b2db      	uxtb	r3, r3
 800531e:	2b01      	cmp	r3, #1
 8005320:	d001      	beq.n	8005326 <HAL_SPI_Transmit_IT+0x4a>
  {
    return HAL_BUSY;
 8005322:	2302      	movs	r3, #2
 8005324:	e065      	b.n	80053f2 <HAL_SPI_Transmit_IT+0x116>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800532c:	2b01      	cmp	r3, #1
 800532e:	d101      	bne.n	8005334 <HAL_SPI_Transmit_IT+0x58>
 8005330:	2302      	movs	r3, #2
 8005332:	e05e      	b.n	80053f2 <HAL_SPI_Transmit_IT+0x116>
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2201      	movs	r2, #1
 8005338:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	2203      	movs	r2, #3
 8005340:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2200      	movs	r2, #0
 8005348:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	68ba      	ldr	r2, [r7, #8]
 800534e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	88fa      	ldrh	r2, [r7, #6]
 8005354:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	88fa      	ldrh	r2, [r7, #6]
 800535a:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	2200      	movs	r2, #0
 8005360:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2200      	movs	r2, #0
 8005366:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2200      	movs	r2, #0
 800536e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxISR       = NULL;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2200      	movs	r2, #0
 8005376:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	68db      	ldr	r3, [r3, #12]
 800537c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005380:	d903      	bls.n	800538a <HAL_SPI_Transmit_IT+0xae>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	4a1e      	ldr	r2, [pc, #120]	@ (8005400 <HAL_SPI_Transmit_IT+0x124>)
 8005386:	651a      	str	r2, [r3, #80]	@ 0x50
 8005388:	e002      	b.n	8005390 <HAL_SPI_Transmit_IT+0xb4>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	4a1d      	ldr	r2, [pc, #116]	@ (8005404 <HAL_SPI_Transmit_IT+0x128>)
 800538e:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	689b      	ldr	r3, [r3, #8]
 8005394:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005398:	d10f      	bne.n	80053ba <HAL_SPI_Transmit_IT+0xde>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	681a      	ldr	r2, [r3, #0]
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80053a8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80053b8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053c4:	2b40      	cmp	r3, #64	@ 0x40
 80053c6:	d007      	beq.n	80053d8 <HAL_SPI_Transmit_IT+0xfc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	681a      	ldr	r2, [r3, #0]
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80053d6:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	2200      	movs	r2, #0
 80053dc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	685a      	ldr	r2, [r3, #4]
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f042 02a0 	orr.w	r2, r2, #160	@ 0xa0
 80053ee:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80053f0:	2300      	movs	r3, #0
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	3710      	adds	r7, #16
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}
 80053fa:	bf00      	nop
 80053fc:	08009224 	.word	0x08009224
 8005400:	08005e15 	.word	0x08005e15
 8005404:	08005dcf 	.word	0x08005dcf

08005408 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b084      	sub	sp, #16
 800540c:	af00      	add	r7, sp, #0
 800540e:	60f8      	str	r0, [r7, #12]
 8005410:	60b9      	str	r1, [r7, #8]
 8005412:	4613      	mov	r3, r2
 8005414:	80fb      	strh	r3, [r7, #6]
  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800541a:	2b00      	cmp	r3, #0
 800541c:	d104      	bne.n	8005428 <HAL_SPI_Receive_DMA+0x20>
 800541e:	f240 71e2 	movw	r1, #2018	@ 0x7e2
 8005422:	488f      	ldr	r0, [pc, #572]	@ (8005660 <HAL_SPI_Receive_DMA+0x258>)
 8005424:	f7fc f8ae 	bl	8001584 <assert_failed>

  if (hspi->State != HAL_SPI_STATE_READY)
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800542e:	b2db      	uxtb	r3, r3
 8005430:	2b01      	cmp	r3, #1
 8005432:	d001      	beq.n	8005438 <HAL_SPI_Receive_DMA+0x30>
  {
    return HAL_BUSY;
 8005434:	2302      	movs	r3, #2
 8005436:	e10e      	b.n	8005656 <HAL_SPI_Receive_DMA+0x24e>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	689b      	ldr	r3, [r3, #8]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d119      	bne.n	8005474 <HAL_SPI_Receive_DMA+0x6c>
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005448:	d114      	bne.n	8005474 <HAL_SPI_Receive_DMA+0x6c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2204      	movs	r2, #4
 800544e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005456:	2b00      	cmp	r3, #0
 8005458:	d104      	bne.n	8005464 <HAL_SPI_Receive_DMA+0x5c>
 800545a:	f240 71ee 	movw	r1, #2030	@ 0x7ee
 800545e:	4880      	ldr	r0, [pc, #512]	@ (8005660 <HAL_SPI_Receive_DMA+0x258>)
 8005460:	f7fc f890 	bl	8001584 <assert_failed>

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8005464:	88fb      	ldrh	r3, [r7, #6]
 8005466:	68ba      	ldr	r2, [r7, #8]
 8005468:	68b9      	ldr	r1, [r7, #8]
 800546a:	68f8      	ldr	r0, [r7, #12]
 800546c:	f000 f900 	bl	8005670 <HAL_SPI_TransmitReceive_DMA>
 8005470:	4603      	mov	r3, r0
 8005472:	e0f0      	b.n	8005656 <HAL_SPI_Receive_DMA+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d002      	beq.n	8005480 <HAL_SPI_Receive_DMA+0x78>
 800547a:	88fb      	ldrh	r3, [r7, #6]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d101      	bne.n	8005484 <HAL_SPI_Receive_DMA+0x7c>
  {
    return HAL_ERROR;
 8005480:	2301      	movs	r3, #1
 8005482:	e0e8      	b.n	8005656 <HAL_SPI_Receive_DMA+0x24e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800548a:	2b01      	cmp	r3, #1
 800548c:	d101      	bne.n	8005492 <HAL_SPI_Receive_DMA+0x8a>
 800548e:	2302      	movs	r3, #2
 8005490:	e0e1      	b.n	8005656 <HAL_SPI_Receive_DMA+0x24e>
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2201      	movs	r2, #1
 8005496:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2204      	movs	r2, #4
 800549e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2200      	movs	r2, #0
 80054a6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	68ba      	ldr	r2, [r7, #8]
 80054ac:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	88fa      	ldrh	r2, [r7, #6]
 80054b2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	88fa      	ldrh	r2, [r7, #6]
 80054ba:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2200      	movs	r2, #0
 80054c2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2200      	movs	r2, #0
 80054c8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->TxXferSize  = 0U;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2200      	movs	r2, #0
 80054ce:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2200      	movs	r2, #0
 80054d4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80054de:	d10f      	bne.n	8005500 <HAL_SPI_Receive_DMA+0xf8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	681a      	ldr	r2, [r3, #0]
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80054ee:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	681a      	ldr	r2, [r3, #0]
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80054fe:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	685a      	ldr	r2, [r3, #4]
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800550e:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	68db      	ldr	r3, [r3, #12]
 8005514:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005518:	d908      	bls.n	800552c <HAL_SPI_Receive_DMA+0x124>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	685a      	ldr	r2, [r3, #4]
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005528:	605a      	str	r2, [r3, #4]
 800552a:	e042      	b.n	80055b2 <HAL_SPI_Receive_DMA+0x1aa>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	685a      	ldr	r2, [r3, #4]
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800553a:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005540:	699b      	ldr	r3, [r3, #24]
 8005542:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005546:	d134      	bne.n	80055b2 <HAL_SPI_Receive_DMA+0x1aa>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	685a      	ldr	r2, [r3, #4]
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005556:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800555e:	b29b      	uxth	r3, r3
 8005560:	f003 0301 	and.w	r3, r3, #1
 8005564:	2b00      	cmp	r3, #0
 8005566:	d111      	bne.n	800558c <HAL_SPI_Receive_DMA+0x184>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	685a      	ldr	r2, [r3, #4]
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005576:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800557e:	b29b      	uxth	r3, r3
 8005580:	085b      	lsrs	r3, r3, #1
 8005582:	b29a      	uxth	r2, r3
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800558a:	e012      	b.n	80055b2 <HAL_SPI_Receive_DMA+0x1aa>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	685a      	ldr	r2, [r3, #4]
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800559a:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80055a2:	b29b      	uxth	r3, r3
 80055a4:	085b      	lsrs	r3, r3, #1
 80055a6:	b29b      	uxth	r3, r3
 80055a8:	3301      	adds	r3, #1
 80055aa:	b29a      	uxth	r2, r3
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055b6:	4a2b      	ldr	r2, [pc, #172]	@ (8005664 <HAL_SPI_Receive_DMA+0x25c>)
 80055b8:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055be:	4a2a      	ldr	r2, [pc, #168]	@ (8005668 <HAL_SPI_Receive_DMA+0x260>)
 80055c0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055c6:	4a29      	ldr	r2, [pc, #164]	@ (800566c <HAL_SPI_Receive_DMA+0x264>)
 80055c8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055ce:	2200      	movs	r2, #0
 80055d0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	330c      	adds	r3, #12
 80055dc:	4619      	mov	r1, r3
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055e2:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80055ea:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80055ec:	f7fd f884 	bl	80026f8 <HAL_DMA_Start_IT>
 80055f0:	4603      	mov	r3, r0
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d00b      	beq.n	800560e <HAL_SPI_Receive_DMA+0x206>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055fa:	f043 0210 	orr.w	r2, r3, #16
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	2200      	movs	r2, #0
 8005606:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800560a:	2301      	movs	r3, #1
 800560c:	e023      	b.n	8005656 <HAL_SPI_Receive_DMA+0x24e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005618:	2b40      	cmp	r3, #64	@ 0x40
 800561a:	d007      	beq.n	800562c <HAL_SPI_Receive_DMA+0x224>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	681a      	ldr	r2, [r3, #0]
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800562a:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2200      	movs	r2, #0
 8005630:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	685a      	ldr	r2, [r3, #4]
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f042 0220 	orr.w	r2, r2, #32
 8005642:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	685a      	ldr	r2, [r3, #4]
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f042 0201 	orr.w	r2, r2, #1
 8005652:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8005654:	2300      	movs	r3, #0
}
 8005656:	4618      	mov	r0, r3
 8005658:	3710      	adds	r7, #16
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}
 800565e:	bf00      	nop
 8005660:	08009224 	.word	0x08009224
 8005664:	08005d2d 	.word	0x08005d2d
 8005668:	08005bf5 	.word	0x08005bf5
 800566c:	08005d65 	.word	0x08005d65

08005670 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b086      	sub	sp, #24
 8005674:	af00      	add	r7, sp, #0
 8005676:	60f8      	str	r0, [r7, #12]
 8005678:	60b9      	str	r1, [r7, #8]
 800567a:	607a      	str	r2, [r7, #4]
 800567c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;

  /* Check rx & tx dma handles */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005682:	2b00      	cmp	r3, #0
 8005684:	d104      	bne.n	8005690 <HAL_SPI_TransmitReceive_DMA+0x20>
 8005686:	f640 0172 	movw	r1, #2162	@ 0x872
 800568a:	487f      	ldr	r0, [pc, #508]	@ (8005888 <HAL_SPI_TransmitReceive_DMA+0x218>)
 800568c:	f7fb ff7a 	bl	8001584 <assert_failed>
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005694:	2b00      	cmp	r3, #0
 8005696:	d104      	bne.n	80056a2 <HAL_SPI_TransmitReceive_DMA+0x32>
 8005698:	f640 0173 	movw	r1, #2163	@ 0x873
 800569c:	487a      	ldr	r0, [pc, #488]	@ (8005888 <HAL_SPI_TransmitReceive_DMA+0x218>)
 800569e:	f7fb ff71 	bl	8001584 <assert_failed>

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	689b      	ldr	r3, [r3, #8]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d004      	beq.n	80056b4 <HAL_SPI_TransmitReceive_DMA+0x44>
 80056aa:	f640 0176 	movw	r1, #2166	@ 0x876
 80056ae:	4876      	ldr	r0, [pc, #472]	@ (8005888 <HAL_SPI_TransmitReceive_DMA+0x218>)
 80056b0:	f7fb ff68 	bl	8001584 <assert_failed>

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80056ba:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 80056c2:	7dfb      	ldrb	r3, [r7, #23]
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d00c      	beq.n	80056e2 <HAL_SPI_TransmitReceive_DMA+0x72>
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80056ce:	d106      	bne.n	80056de <HAL_SPI_TransmitReceive_DMA+0x6e>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	689b      	ldr	r3, [r3, #8]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d102      	bne.n	80056de <HAL_SPI_TransmitReceive_DMA+0x6e>
 80056d8:	7dfb      	ldrb	r3, [r7, #23]
 80056da:	2b04      	cmp	r3, #4
 80056dc:	d001      	beq.n	80056e2 <HAL_SPI_TransmitReceive_DMA+0x72>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80056de:	2302      	movs	r3, #2
 80056e0:	e15f      	b.n	80059a2 <HAL_SPI_TransmitReceive_DMA+0x332>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d005      	beq.n	80056f4 <HAL_SPI_TransmitReceive_DMA+0x84>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d002      	beq.n	80056f4 <HAL_SPI_TransmitReceive_DMA+0x84>
 80056ee:	887b      	ldrh	r3, [r7, #2]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d101      	bne.n	80056f8 <HAL_SPI_TransmitReceive_DMA+0x88>
  {
    return HAL_ERROR;
 80056f4:	2301      	movs	r3, #1
 80056f6:	e154      	b.n	80059a2 <HAL_SPI_TransmitReceive_DMA+0x332>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80056fe:	2b01      	cmp	r3, #1
 8005700:	d101      	bne.n	8005706 <HAL_SPI_TransmitReceive_DMA+0x96>
 8005702:	2302      	movs	r3, #2
 8005704:	e14d      	b.n	80059a2 <HAL_SPI_TransmitReceive_DMA+0x332>
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2201      	movs	r2, #1
 800570a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005714:	b2db      	uxtb	r3, r3
 8005716:	2b04      	cmp	r3, #4
 8005718:	d003      	beq.n	8005722 <HAL_SPI_TransmitReceive_DMA+0xb2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2205      	movs	r2, #5
 800571e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2200      	movs	r2, #0
 8005726:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	68ba      	ldr	r2, [r7, #8]
 800572c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	887a      	ldrh	r2, [r7, #2]
 8005732:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	887a      	ldrh	r2, [r7, #2]
 8005738:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	687a      	ldr	r2, [r7, #4]
 800573e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	887a      	ldrh	r2, [r7, #2]
 8005744:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	887a      	ldrh	r2, [r7, #2]
 800574c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2200      	movs	r2, #0
 8005754:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2200      	movs	r2, #0
 800575a:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	685a      	ldr	r2, [r3, #4]
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f422 42c0 	bic.w	r2, r2, #24576	@ 0x6000
 800576a:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	68db      	ldr	r3, [r3, #12]
 8005770:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005774:	d908      	bls.n	8005788 <HAL_SPI_TransmitReceive_DMA+0x118>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	685a      	ldr	r2, [r3, #4]
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005784:	605a      	str	r2, [r3, #4]
 8005786:	e06f      	b.n	8005868 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	685a      	ldr	r2, [r3, #4]
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005796:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800579c:	699b      	ldr	r3, [r3, #24]
 800579e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057a2:	d126      	bne.n	80057f2 <HAL_SPI_TransmitReceive_DMA+0x182>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 80057a8:	f003 0301 	and.w	r3, r3, #1
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d10f      	bne.n	80057d0 <HAL_SPI_TransmitReceive_DMA+0x160>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	685a      	ldr	r2, [r3, #4]
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80057be:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80057c4:	b29b      	uxth	r3, r3
 80057c6:	085b      	lsrs	r3, r3, #1
 80057c8:	b29a      	uxth	r2, r3
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80057ce:	e010      	b.n	80057f2 <HAL_SPI_TransmitReceive_DMA+0x182>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	685a      	ldr	r2, [r3, #4]
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80057de:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80057e4:	b29b      	uxth	r3, r3
 80057e6:	085b      	lsrs	r3, r3, #1
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	3301      	adds	r3, #1
 80057ec:	b29a      	uxth	r2, r3
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057f6:	699b      	ldr	r3, [r3, #24]
 80057f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057fc:	d134      	bne.n	8005868 <HAL_SPI_TransmitReceive_DMA+0x1f8>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	685a      	ldr	r2, [r3, #4]
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800580c:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005814:	b29b      	uxth	r3, r3
 8005816:	f003 0301 	and.w	r3, r3, #1
 800581a:	2b00      	cmp	r3, #0
 800581c:	d111      	bne.n	8005842 <HAL_SPI_TransmitReceive_DMA+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	685a      	ldr	r2, [r3, #4]
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800582c:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005834:	b29b      	uxth	r3, r3
 8005836:	085b      	lsrs	r3, r3, #1
 8005838:	b29a      	uxth	r2, r3
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8005840:	e012      	b.n	8005868 <HAL_SPI_TransmitReceive_DMA+0x1f8>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	685a      	ldr	r2, [r3, #4]
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005850:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005858:	b29b      	uxth	r3, r3
 800585a:	085b      	lsrs	r3, r3, #1
 800585c:	b29b      	uxth	r3, r3
 800585e:	3301      	adds	r3, #1
 8005860:	b29a      	uxth	r2, r3
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800586e:	b2db      	uxtb	r3, r3
 8005870:	2b04      	cmp	r3, #4
 8005872:	d10f      	bne.n	8005894 <HAL_SPI_TransmitReceive_DMA+0x224>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005878:	4a04      	ldr	r2, [pc, #16]	@ (800588c <HAL_SPI_TransmitReceive_DMA+0x21c>)
 800587a:	631a      	str	r2, [r3, #48]	@ 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005880:	4a03      	ldr	r2, [pc, #12]	@ (8005890 <HAL_SPI_TransmitReceive_DMA+0x220>)
 8005882:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005884:	e00e      	b.n	80058a4 <HAL_SPI_TransmitReceive_DMA+0x234>
 8005886:	bf00      	nop
 8005888:	08009224 	.word	0x08009224
 800588c:	08005d2d 	.word	0x08005d2d
 8005890:	08005bf5 	.word	0x08005bf5
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005898:	4a44      	ldr	r2, [pc, #272]	@ (80059ac <HAL_SPI_TransmitReceive_DMA+0x33c>)
 800589a:	631a      	str	r2, [r3, #48]	@ 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058a0:	4a43      	ldr	r2, [pc, #268]	@ (80059b0 <HAL_SPI_TransmitReceive_DMA+0x340>)
 80058a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058a8:	4a42      	ldr	r2, [pc, #264]	@ (80059b4 <HAL_SPI_TransmitReceive_DMA+0x344>)
 80058aa:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058b0:	2200      	movs	r2, #0
 80058b2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	330c      	adds	r3, #12
 80058be:	4619      	mov	r1, r3
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058c4:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80058cc:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80058ce:	f7fc ff13 	bl	80026f8 <HAL_DMA_Start_IT>
 80058d2:	4603      	mov	r3, r0
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d00b      	beq.n	80058f0 <HAL_SPI_TransmitReceive_DMA+0x280>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80058dc:	f043 0210 	orr.w	r2, r3, #16
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2200      	movs	r2, #0
 80058e8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 80058ec:	2301      	movs	r3, #1
 80058ee:	e058      	b.n	80059a2 <HAL_SPI_TransmitReceive_DMA+0x332>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	685a      	ldr	r2, [r3, #4]
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f042 0201 	orr.w	r2, r2, #1
 80058fe:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005904:	2200      	movs	r2, #0
 8005906:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800590c:	2200      	movs	r2, #0
 800590e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005914:	2200      	movs	r2, #0
 8005916:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800591c:	2200      	movs	r2, #0
 800591e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005928:	4619      	mov	r1, r3
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	330c      	adds	r3, #12
 8005930:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005936:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005938:	f7fc fede 	bl	80026f8 <HAL_DMA_Start_IT>
 800593c:	4603      	mov	r3, r0
 800593e:	2b00      	cmp	r3, #0
 8005940:	d00b      	beq.n	800595a <HAL_SPI_TransmitReceive_DMA+0x2ea>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005946:	f043 0210 	orr.w	r2, r3, #16
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2200      	movs	r2, #0
 8005952:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8005956:	2301      	movs	r3, #1
 8005958:	e023      	b.n	80059a2 <HAL_SPI_TransmitReceive_DMA+0x332>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005964:	2b40      	cmp	r3, #64	@ 0x40
 8005966:	d007      	beq.n	8005978 <HAL_SPI_TransmitReceive_DMA+0x308>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	681a      	ldr	r2, [r3, #0]
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005976:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2200      	movs	r2, #0
 800597c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	685a      	ldr	r2, [r3, #4]
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f042 0220 	orr.w	r2, r2, #32
 800598e:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	685a      	ldr	r2, [r3, #4]
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f042 0202 	orr.w	r2, r2, #2
 800599e:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80059a0:	2300      	movs	r3, #0
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	3718      	adds	r7, #24
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}
 80059aa:	bf00      	nop
 80059ac:	08005d49 	.word	0x08005d49
 80059b0:	08005c9d 	.word	0x08005c9d
 80059b4:	08005d65 	.word	0x08005d65

080059b8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b088      	sub	sp, #32
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80059d0:	69bb      	ldr	r3, [r7, #24]
 80059d2:	099b      	lsrs	r3, r3, #6
 80059d4:	f003 0301 	and.w	r3, r3, #1
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d10f      	bne.n	80059fc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80059dc:	69bb      	ldr	r3, [r7, #24]
 80059de:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d00a      	beq.n	80059fc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80059e6:	69fb      	ldr	r3, [r7, #28]
 80059e8:	099b      	lsrs	r3, r3, #6
 80059ea:	f003 0301 	and.w	r3, r3, #1
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d004      	beq.n	80059fc <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	4798      	blx	r3
    return;
 80059fa:	e0d7      	b.n	8005bac <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80059fc:	69bb      	ldr	r3, [r7, #24]
 80059fe:	085b      	lsrs	r3, r3, #1
 8005a00:	f003 0301 	and.w	r3, r3, #1
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d00a      	beq.n	8005a1e <HAL_SPI_IRQHandler+0x66>
 8005a08:	69fb      	ldr	r3, [r7, #28]
 8005a0a:	09db      	lsrs	r3, r3, #7
 8005a0c:	f003 0301 	and.w	r3, r3, #1
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d004      	beq.n	8005a1e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	4798      	blx	r3
    return;
 8005a1c:	e0c6      	b.n	8005bac <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005a1e:	69bb      	ldr	r3, [r7, #24]
 8005a20:	095b      	lsrs	r3, r3, #5
 8005a22:	f003 0301 	and.w	r3, r3, #1
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d10c      	bne.n	8005a44 <HAL_SPI_IRQHandler+0x8c>
 8005a2a:	69bb      	ldr	r3, [r7, #24]
 8005a2c:	099b      	lsrs	r3, r3, #6
 8005a2e:	f003 0301 	and.w	r3, r3, #1
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d106      	bne.n	8005a44 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005a36:	69bb      	ldr	r3, [r7, #24]
 8005a38:	0a1b      	lsrs	r3, r3, #8
 8005a3a:	f003 0301 	and.w	r3, r3, #1
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	f000 80b4 	beq.w	8005bac <HAL_SPI_IRQHandler+0x1f4>
 8005a44:	69fb      	ldr	r3, [r7, #28]
 8005a46:	095b      	lsrs	r3, r3, #5
 8005a48:	f003 0301 	and.w	r3, r3, #1
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	f000 80ad 	beq.w	8005bac <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005a52:	69bb      	ldr	r3, [r7, #24]
 8005a54:	099b      	lsrs	r3, r3, #6
 8005a56:	f003 0301 	and.w	r3, r3, #1
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d023      	beq.n	8005aa6 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005a64:	b2db      	uxtb	r3, r3
 8005a66:	2b03      	cmp	r3, #3
 8005a68:	d011      	beq.n	8005a8e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a6e:	f043 0204 	orr.w	r2, r3, #4
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005a76:	2300      	movs	r3, #0
 8005a78:	617b      	str	r3, [r7, #20]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	68db      	ldr	r3, [r3, #12]
 8005a80:	617b      	str	r3, [r7, #20]
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	689b      	ldr	r3, [r3, #8]
 8005a88:	617b      	str	r3, [r7, #20]
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	e00b      	b.n	8005aa6 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005a8e:	2300      	movs	r3, #0
 8005a90:	613b      	str	r3, [r7, #16]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	68db      	ldr	r3, [r3, #12]
 8005a98:	613b      	str	r3, [r7, #16]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	689b      	ldr	r3, [r3, #8]
 8005aa0:	613b      	str	r3, [r7, #16]
 8005aa2:	693b      	ldr	r3, [r7, #16]
        return;
 8005aa4:	e082      	b.n	8005bac <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005aa6:	69bb      	ldr	r3, [r7, #24]
 8005aa8:	095b      	lsrs	r3, r3, #5
 8005aaa:	f003 0301 	and.w	r3, r3, #1
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d014      	beq.n	8005adc <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ab6:	f043 0201 	orr.w	r2, r3, #1
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005abe:	2300      	movs	r3, #0
 8005ac0:	60fb      	str	r3, [r7, #12]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	689b      	ldr	r3, [r3, #8]
 8005ac8:	60fb      	str	r3, [r7, #12]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	681a      	ldr	r2, [r3, #0]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005ad8:	601a      	str	r2, [r3, #0]
 8005ada:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005adc:	69bb      	ldr	r3, [r7, #24]
 8005ade:	0a1b      	lsrs	r3, r3, #8
 8005ae0:	f003 0301 	and.w	r3, r3, #1
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d00c      	beq.n	8005b02 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005aec:	f043 0208 	orr.w	r2, r3, #8
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005af4:	2300      	movs	r3, #0
 8005af6:	60bb      	str	r3, [r7, #8]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	689b      	ldr	r3, [r3, #8]
 8005afe:	60bb      	str	r3, [r7, #8]
 8005b00:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d04f      	beq.n	8005baa <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	685a      	ldr	r2, [r3, #4]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005b18:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2201      	movs	r2, #1
 8005b1e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005b22:	69fb      	ldr	r3, [r7, #28]
 8005b24:	f003 0302 	and.w	r3, r3, #2
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d104      	bne.n	8005b36 <HAL_SPI_IRQHandler+0x17e>
 8005b2c:	69fb      	ldr	r3, [r7, #28]
 8005b2e:	f003 0301 	and.w	r3, r3, #1
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d034      	beq.n	8005ba0 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	685a      	ldr	r2, [r3, #4]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f022 0203 	bic.w	r2, r2, #3
 8005b44:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d011      	beq.n	8005b72 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b52:	4a18      	ldr	r2, [pc, #96]	@ (8005bb4 <HAL_SPI_IRQHandler+0x1fc>)
 8005b54:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f7fc fe3a 	bl	80027d4 <HAL_DMA_Abort_IT>
 8005b60:	4603      	mov	r3, r0
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d005      	beq.n	8005b72 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b6a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d016      	beq.n	8005ba8 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b7e:	4a0d      	ldr	r2, [pc, #52]	@ (8005bb4 <HAL_SPI_IRQHandler+0x1fc>)
 8005b80:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b86:	4618      	mov	r0, r3
 8005b88:	f7fc fe24 	bl	80027d4 <HAL_DMA_Abort_IT>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d00a      	beq.n	8005ba8 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b96:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8005b9e:	e003      	b.n	8005ba8 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005ba0:	6878      	ldr	r0, [r7, #4]
 8005ba2:	f000 f81d 	bl	8005be0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005ba6:	e000      	b.n	8005baa <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8005ba8:	bf00      	nop
    return;
 8005baa:	bf00      	nop
  }
}
 8005bac:	3720      	adds	r7, #32
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}
 8005bb2:	bf00      	nop
 8005bb4:	08005da5 	.word	0x08005da5

08005bb8 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b083      	sub	sp, #12
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8005bc0:	bf00      	nop
 8005bc2:	370c      	adds	r7, #12
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bca:	4770      	bx	lr

08005bcc <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b083      	sub	sp, #12
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8005bd4:	bf00      	nop
 8005bd6:	370c      	adds	r7, #12
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bde:	4770      	bx	lr

08005be0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b083      	sub	sp, #12
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005be8:	bf00      	nop
 8005bea:	370c      	adds	r7, #12
 8005bec:	46bd      	mov	sp, r7
 8005bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf2:	4770      	bx	lr

08005bf4 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b084      	sub	sp, #16
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c00:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005c02:	f7fc fa75 	bl	80020f0 <HAL_GetTick>
 8005c06:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f003 0320 	and.w	r3, r3, #32
 8005c12:	2b20      	cmp	r3, #32
 8005c14:	d03c      	beq.n	8005c90 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	685a      	ldr	r2, [r3, #4]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f022 0220 	bic.w	r2, r2, #32
 8005c24:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	689b      	ldr	r3, [r3, #8]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d10d      	bne.n	8005c4a <SPI_DMAReceiveCplt+0x56>
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005c36:	d108      	bne.n	8005c4a <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	685a      	ldr	r2, [r3, #4]
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f022 0203 	bic.w	r2, r2, #3
 8005c46:	605a      	str	r2, [r3, #4]
 8005c48:	e007      	b.n	8005c5a <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	685a      	ldr	r2, [r3, #4]
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f022 0201 	bic.w	r2, r2, #1
 8005c58:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005c5a:	68ba      	ldr	r2, [r7, #8]
 8005c5c:	2164      	movs	r1, #100	@ 0x64
 8005c5e:	68f8      	ldr	r0, [r7, #12]
 8005c60:	f000 fa18 	bl	8006094 <SPI_EndRxTransaction>
 8005c64:	4603      	mov	r3, r0
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d002      	beq.n	8005c70 <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2220      	movs	r2, #32
 8005c6e:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    hspi->RxXferCount = 0U;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	2200      	movs	r2, #0
 8005c74:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d003      	beq.n	8005c90 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005c88:	68f8      	ldr	r0, [r7, #12]
 8005c8a:	f7ff ffa9 	bl	8005be0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005c8e:	e002      	b.n	8005c96 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8005c90:	68f8      	ldr	r0, [r7, #12]
 8005c92:	f7fb fac5 	bl	8001220 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005c96:	3710      	adds	r7, #16
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bd80      	pop	{r7, pc}

08005c9c <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b084      	sub	sp, #16
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ca8:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005caa:	f7fc fa21 	bl	80020f0 <HAL_GetTick>
 8005cae:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f003 0320 	and.w	r3, r3, #32
 8005cba:	2b20      	cmp	r3, #32
 8005cbc:	d030      	beq.n	8005d20 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	685a      	ldr	r2, [r3, #4]
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f022 0220 	bic.w	r2, r2, #32
 8005ccc:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005cce:	68ba      	ldr	r2, [r7, #8]
 8005cd0:	2164      	movs	r1, #100	@ 0x64
 8005cd2:	68f8      	ldr	r0, [r7, #12]
 8005cd4:	f000 fa36 	bl	8006144 <SPI_EndRxTxTransaction>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d005      	beq.n	8005cea <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ce2:	f043 0220 	orr.w	r2, r3, #32
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	685a      	ldr	r2, [r3, #4]
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f022 0203 	bic.w	r2, r2, #3
 8005cf8:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->RxXferCount = 0U;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2200      	movs	r2, #0
 8005d04:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d003      	beq.n	8005d20 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005d18:	68f8      	ldr	r0, [r7, #12]
 8005d1a:	f7ff ff61 	bl	8005be0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005d1e:	e002      	b.n	8005d26 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8005d20:	68f8      	ldr	r0, [r7, #12]
 8005d22:	f7ff ff49 	bl	8005bb8 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005d26:	3710      	adds	r7, #16
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}

08005d2c <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b084      	sub	sp, #16
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d38:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8005d3a:	68f8      	ldr	r0, [r7, #12]
 8005d3c:	f7fb fa54 	bl	80011e8 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005d40:	bf00      	nop
 8005d42:	3710      	adds	r7, #16
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}

08005d48 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b084      	sub	sp, #16
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d54:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8005d56:	68f8      	ldr	r0, [r7, #12]
 8005d58:	f7ff ff38 	bl	8005bcc <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005d5c:	bf00      	nop
 8005d5e:	3710      	adds	r7, #16
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd80      	pop	{r7, pc}

08005d64 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b084      	sub	sp, #16
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d70:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	685a      	ldr	r2, [r3, #4]
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f022 0203 	bic.w	r2, r2, #3
 8005d80:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d86:	f043 0210 	orr.w	r2, r3, #16
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2201      	movs	r2, #1
 8005d92:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005d96:	68f8      	ldr	r0, [r7, #12]
 8005d98:	f7ff ff22 	bl	8005be0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005d9c:	bf00      	nop
 8005d9e:	3710      	adds	r7, #16
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd80      	pop	{r7, pc}

08005da4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b084      	sub	sp, #16
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005db0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2200      	movs	r2, #0
 8005db6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005dc0:	68f8      	ldr	r0, [r7, #12]
 8005dc2:	f7ff ff0d 	bl	8005be0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005dc6:	bf00      	nop
 8005dc8:	3710      	adds	r7, #16
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}

08005dce <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005dce:	b580      	push	{r7, lr}
 8005dd0:	b082      	sub	sp, #8
 8005dd2:	af00      	add	r7, sp, #0
 8005dd4:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	330c      	adds	r3, #12
 8005de0:	7812      	ldrb	r2, [r2, #0]
 8005de2:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005de8:	1c5a      	adds	r2, r3, #1
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005df2:	b29b      	uxth	r3, r3
 8005df4:	3b01      	subs	r3, #1
 8005df6:	b29a      	uxth	r2, r3
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	87da      	strh	r2, [r3, #62]	@ 0x3e

  if (hspi->TxXferCount == 0U)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e00:	b29b      	uxth	r3, r3
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d102      	bne.n	8005e0c <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f000 f9e2 	bl	80061d0 <SPI_CloseTx_ISR>
  }
}
 8005e0c:	bf00      	nop
 8005e0e:	3708      	adds	r7, #8
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bd80      	pop	{r7, pc}

08005e14 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b082      	sub	sp, #8
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e20:	881a      	ldrh	r2, [r3, #0]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e2c:	1c9a      	adds	r2, r3, #2
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e36:	b29b      	uxth	r3, r3
 8005e38:	3b01      	subs	r3, #1
 8005e3a:	b29a      	uxth	r2, r3
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  if (hspi->TxXferCount == 0U)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e44:	b29b      	uxth	r3, r3
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d102      	bne.n	8005e50 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f000 f9c0 	bl	80061d0 <SPI_CloseTx_ISR>
  }
}
 8005e50:	bf00      	nop
 8005e52:	3708      	adds	r7, #8
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bd80      	pop	{r7, pc}

08005e58 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b088      	sub	sp, #32
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	60f8      	str	r0, [r7, #12]
 8005e60:	60b9      	str	r1, [r7, #8]
 8005e62:	603b      	str	r3, [r7, #0]
 8005e64:	4613      	mov	r3, r2
 8005e66:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005e68:	f7fc f942 	bl	80020f0 <HAL_GetTick>
 8005e6c:	4602      	mov	r2, r0
 8005e6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e70:	1a9b      	subs	r3, r3, r2
 8005e72:	683a      	ldr	r2, [r7, #0]
 8005e74:	4413      	add	r3, r2
 8005e76:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005e78:	f7fc f93a 	bl	80020f0 <HAL_GetTick>
 8005e7c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005e7e:	4b39      	ldr	r3, [pc, #228]	@ (8005f64 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	015b      	lsls	r3, r3, #5
 8005e84:	0d1b      	lsrs	r3, r3, #20
 8005e86:	69fa      	ldr	r2, [r7, #28]
 8005e88:	fb02 f303 	mul.w	r3, r2, r3
 8005e8c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005e8e:	e054      	b.n	8005f3a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e96:	d050      	beq.n	8005f3a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005e98:	f7fc f92a 	bl	80020f0 <HAL_GetTick>
 8005e9c:	4602      	mov	r2, r0
 8005e9e:	69bb      	ldr	r3, [r7, #24]
 8005ea0:	1ad3      	subs	r3, r2, r3
 8005ea2:	69fa      	ldr	r2, [r7, #28]
 8005ea4:	429a      	cmp	r2, r3
 8005ea6:	d902      	bls.n	8005eae <SPI_WaitFlagStateUntilTimeout+0x56>
 8005ea8:	69fb      	ldr	r3, [r7, #28]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d13d      	bne.n	8005f2a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	685a      	ldr	r2, [r3, #4]
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005ebc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005ec6:	d111      	bne.n	8005eec <SPI_WaitFlagStateUntilTimeout+0x94>
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	689b      	ldr	r3, [r3, #8]
 8005ecc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ed0:	d004      	beq.n	8005edc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	689b      	ldr	r3, [r3, #8]
 8005ed6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005eda:	d107      	bne.n	8005eec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	681a      	ldr	r2, [r3, #0]
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005eea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ef0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ef4:	d10f      	bne.n	8005f16 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	681a      	ldr	r2, [r3, #0]
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005f04:	601a      	str	r2, [r3, #0]
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	681a      	ldr	r2, [r3, #0]
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005f14:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2201      	movs	r2, #1
 8005f1a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2200      	movs	r2, #0
 8005f22:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005f26:	2303      	movs	r3, #3
 8005f28:	e017      	b.n	8005f5a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005f2a:	697b      	ldr	r3, [r7, #20]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d101      	bne.n	8005f34 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005f30:	2300      	movs	r3, #0
 8005f32:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	3b01      	subs	r3, #1
 8005f38:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	689a      	ldr	r2, [r3, #8]
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	4013      	ands	r3, r2
 8005f44:	68ba      	ldr	r2, [r7, #8]
 8005f46:	429a      	cmp	r2, r3
 8005f48:	bf0c      	ite	eq
 8005f4a:	2301      	moveq	r3, #1
 8005f4c:	2300      	movne	r3, #0
 8005f4e:	b2db      	uxtb	r3, r3
 8005f50:	461a      	mov	r2, r3
 8005f52:	79fb      	ldrb	r3, [r7, #7]
 8005f54:	429a      	cmp	r2, r3
 8005f56:	d19b      	bne.n	8005e90 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005f58:	2300      	movs	r3, #0
}
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	3720      	adds	r7, #32
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd80      	pop	{r7, pc}
 8005f62:	bf00      	nop
 8005f64:	20000004 	.word	0x20000004

08005f68 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b08a      	sub	sp, #40	@ 0x28
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	60f8      	str	r0, [r7, #12]
 8005f70:	60b9      	str	r1, [r7, #8]
 8005f72:	607a      	str	r2, [r7, #4]
 8005f74:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005f76:	2300      	movs	r3, #0
 8005f78:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005f7a:	f7fc f8b9 	bl	80020f0 <HAL_GetTick>
 8005f7e:	4602      	mov	r2, r0
 8005f80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f82:	1a9b      	subs	r3, r3, r2
 8005f84:	683a      	ldr	r2, [r7, #0]
 8005f86:	4413      	add	r3, r2
 8005f88:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8005f8a:	f7fc f8b1 	bl	80020f0 <HAL_GetTick>
 8005f8e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	330c      	adds	r3, #12
 8005f96:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005f98:	4b3d      	ldr	r3, [pc, #244]	@ (8006090 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005f9a:	681a      	ldr	r2, [r3, #0]
 8005f9c:	4613      	mov	r3, r2
 8005f9e:	009b      	lsls	r3, r3, #2
 8005fa0:	4413      	add	r3, r2
 8005fa2:	00da      	lsls	r2, r3, #3
 8005fa4:	1ad3      	subs	r3, r2, r3
 8005fa6:	0d1b      	lsrs	r3, r3, #20
 8005fa8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005faa:	fb02 f303 	mul.w	r3, r2, r3
 8005fae:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005fb0:	e060      	b.n	8006074 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005fb8:	d107      	bne.n	8005fca <SPI_WaitFifoStateUntilTimeout+0x62>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d104      	bne.n	8005fca <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005fc0:	69fb      	ldr	r3, [r7, #28]
 8005fc2:	781b      	ldrb	r3, [r3, #0]
 8005fc4:	b2db      	uxtb	r3, r3
 8005fc6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005fc8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fd0:	d050      	beq.n	8006074 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005fd2:	f7fc f88d 	bl	80020f0 <HAL_GetTick>
 8005fd6:	4602      	mov	r2, r0
 8005fd8:	6a3b      	ldr	r3, [r7, #32]
 8005fda:	1ad3      	subs	r3, r2, r3
 8005fdc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fde:	429a      	cmp	r2, r3
 8005fe0:	d902      	bls.n	8005fe8 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d13d      	bne.n	8006064 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	685a      	ldr	r2, [r3, #4]
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005ff6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006000:	d111      	bne.n	8006026 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800600a:	d004      	beq.n	8006016 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	689b      	ldr	r3, [r3, #8]
 8006010:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006014:	d107      	bne.n	8006026 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	681a      	ldr	r2, [r3, #0]
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006024:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800602a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800602e:	d10f      	bne.n	8006050 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	681a      	ldr	r2, [r3, #0]
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800603e:	601a      	str	r2, [r3, #0]
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	681a      	ldr	r2, [r3, #0]
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800604e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	2201      	movs	r2, #1
 8006054:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2200      	movs	r2, #0
 800605c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006060:	2303      	movs	r3, #3
 8006062:	e010      	b.n	8006086 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006064:	69bb      	ldr	r3, [r7, #24]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d101      	bne.n	800606e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800606a:	2300      	movs	r3, #0
 800606c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800606e:	69bb      	ldr	r3, [r7, #24]
 8006070:	3b01      	subs	r3, #1
 8006072:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	689a      	ldr	r2, [r3, #8]
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	4013      	ands	r3, r2
 800607e:	687a      	ldr	r2, [r7, #4]
 8006080:	429a      	cmp	r2, r3
 8006082:	d196      	bne.n	8005fb2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006084:	2300      	movs	r3, #0
}
 8006086:	4618      	mov	r0, r3
 8006088:	3728      	adds	r7, #40	@ 0x28
 800608a:	46bd      	mov	sp, r7
 800608c:	bd80      	pop	{r7, pc}
 800608e:	bf00      	nop
 8006090:	20000004 	.word	0x20000004

08006094 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b086      	sub	sp, #24
 8006098:	af02      	add	r7, sp, #8
 800609a:	60f8      	str	r0, [r7, #12]
 800609c:	60b9      	str	r1, [r7, #8]
 800609e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80060a8:	d111      	bne.n	80060ce <SPI_EndRxTransaction+0x3a>
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	689b      	ldr	r3, [r3, #8]
 80060ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80060b2:	d004      	beq.n	80060be <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	689b      	ldr	r3, [r3, #8]
 80060b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80060bc:	d107      	bne.n	80060ce <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	681a      	ldr	r2, [r3, #0]
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80060cc:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	9300      	str	r3, [sp, #0]
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	2200      	movs	r2, #0
 80060d6:	2180      	movs	r1, #128	@ 0x80
 80060d8:	68f8      	ldr	r0, [r7, #12]
 80060da:	f7ff febd 	bl	8005e58 <SPI_WaitFlagStateUntilTimeout>
 80060de:	4603      	mov	r3, r0
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d007      	beq.n	80060f4 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80060e8:	f043 0220 	orr.w	r2, r3, #32
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80060f0:	2303      	movs	r3, #3
 80060f2:	e023      	b.n	800613c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	685b      	ldr	r3, [r3, #4]
 80060f8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80060fc:	d11d      	bne.n	800613a <SPI_EndRxTransaction+0xa6>
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	689b      	ldr	r3, [r3, #8]
 8006102:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006106:	d004      	beq.n	8006112 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	689b      	ldr	r3, [r3, #8]
 800610c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006110:	d113      	bne.n	800613a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	9300      	str	r3, [sp, #0]
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	2200      	movs	r2, #0
 800611a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800611e:	68f8      	ldr	r0, [r7, #12]
 8006120:	f7ff ff22 	bl	8005f68 <SPI_WaitFifoStateUntilTimeout>
 8006124:	4603      	mov	r3, r0
 8006126:	2b00      	cmp	r3, #0
 8006128:	d007      	beq.n	800613a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800612e:	f043 0220 	orr.w	r2, r3, #32
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8006136:	2303      	movs	r3, #3
 8006138:	e000      	b.n	800613c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800613a:	2300      	movs	r3, #0
}
 800613c:	4618      	mov	r0, r3
 800613e:	3710      	adds	r7, #16
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}

08006144 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b086      	sub	sp, #24
 8006148:	af02      	add	r7, sp, #8
 800614a:	60f8      	str	r0, [r7, #12]
 800614c:	60b9      	str	r1, [r7, #8]
 800614e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	9300      	str	r3, [sp, #0]
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	2200      	movs	r2, #0
 8006158:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800615c:	68f8      	ldr	r0, [r7, #12]
 800615e:	f7ff ff03 	bl	8005f68 <SPI_WaitFifoStateUntilTimeout>
 8006162:	4603      	mov	r3, r0
 8006164:	2b00      	cmp	r3, #0
 8006166:	d007      	beq.n	8006178 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800616c:	f043 0220 	orr.w	r2, r3, #32
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006174:	2303      	movs	r3, #3
 8006176:	e027      	b.n	80061c8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	9300      	str	r3, [sp, #0]
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	2200      	movs	r2, #0
 8006180:	2180      	movs	r1, #128	@ 0x80
 8006182:	68f8      	ldr	r0, [r7, #12]
 8006184:	f7ff fe68 	bl	8005e58 <SPI_WaitFlagStateUntilTimeout>
 8006188:	4603      	mov	r3, r0
 800618a:	2b00      	cmp	r3, #0
 800618c:	d007      	beq.n	800619e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006192:	f043 0220 	orr.w	r2, r3, #32
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800619a:	2303      	movs	r3, #3
 800619c:	e014      	b.n	80061c8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	9300      	str	r3, [sp, #0]
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	2200      	movs	r2, #0
 80061a6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80061aa:	68f8      	ldr	r0, [r7, #12]
 80061ac:	f7ff fedc 	bl	8005f68 <SPI_WaitFifoStateUntilTimeout>
 80061b0:	4603      	mov	r3, r0
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d007      	beq.n	80061c6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061ba:	f043 0220 	orr.w	r2, r3, #32
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80061c2:	2303      	movs	r3, #3
 80061c4:	e000      	b.n	80061c8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80061c6:	2300      	movs	r3, #0
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	3710      	adds	r7, #16
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd80      	pop	{r7, pc}

080061d0 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b084      	sub	sp, #16
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80061d8:	f7fb ff8a 	bl	80020f0 <HAL_GetTick>
 80061dc:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	685a      	ldr	r2, [r3, #4]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80061ec:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80061ee:	68fa      	ldr	r2, [r7, #12]
 80061f0:	2164      	movs	r1, #100	@ 0x64
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f7ff ffa6 	bl	8006144 <SPI_EndRxTxTransaction>
 80061f8:	4603      	mov	r3, r0
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d005      	beq.n	800620a <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006202:	f043 0220 	orr.w	r2, r3, #32
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	689b      	ldr	r3, [r3, #8]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d10a      	bne.n	8006228 <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006212:	2300      	movs	r3, #0
 8006214:	60bb      	str	r3, [r7, #8]
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	68db      	ldr	r3, [r3, #12]
 800621c:	60bb      	str	r3, [r7, #8]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	689b      	ldr	r3, [r3, #8]
 8006224:	60bb      	str	r3, [r7, #8]
 8006226:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2201      	movs	r2, #1
 800622c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006234:	2b00      	cmp	r3, #0
 8006236:	d003      	beq.n	8006240 <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f7ff fcd1 	bl	8005be0 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800623e:	e002      	b.n	8006246 <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 8006240:	6878      	ldr	r0, [r7, #4]
 8006242:	f7fb f809 	bl	8001258 <HAL_SPI_TxCpltCallback>
}
 8006246:	bf00      	nop
 8006248:	3710      	adds	r7, #16
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}
	...

08006250 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b082      	sub	sp, #8
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d101      	bne.n	8006262 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800625e:	2301      	movs	r3, #1
 8006260:	e0e6      	b.n	8006430 <HAL_TIM_Base_Init+0x1e0>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a74      	ldr	r2, [pc, #464]	@ (8006438 <HAL_TIM_Base_Init+0x1e8>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d036      	beq.n	80062da <HAL_TIM_Base_Init+0x8a>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006274:	d031      	beq.n	80062da <HAL_TIM_Base_Init+0x8a>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a70      	ldr	r2, [pc, #448]	@ (800643c <HAL_TIM_Base_Init+0x1ec>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d02c      	beq.n	80062da <HAL_TIM_Base_Init+0x8a>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a6e      	ldr	r2, [pc, #440]	@ (8006440 <HAL_TIM_Base_Init+0x1f0>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d027      	beq.n	80062da <HAL_TIM_Base_Init+0x8a>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a6d      	ldr	r2, [pc, #436]	@ (8006444 <HAL_TIM_Base_Init+0x1f4>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d022      	beq.n	80062da <HAL_TIM_Base_Init+0x8a>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a6b      	ldr	r2, [pc, #428]	@ (8006448 <HAL_TIM_Base_Init+0x1f8>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d01d      	beq.n	80062da <HAL_TIM_Base_Init+0x8a>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a6a      	ldr	r2, [pc, #424]	@ (800644c <HAL_TIM_Base_Init+0x1fc>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d018      	beq.n	80062da <HAL_TIM_Base_Init+0x8a>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a68      	ldr	r2, [pc, #416]	@ (8006450 <HAL_TIM_Base_Init+0x200>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d013      	beq.n	80062da <HAL_TIM_Base_Init+0x8a>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a67      	ldr	r2, [pc, #412]	@ (8006454 <HAL_TIM_Base_Init+0x204>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d00e      	beq.n	80062da <HAL_TIM_Base_Init+0x8a>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a65      	ldr	r2, [pc, #404]	@ (8006458 <HAL_TIM_Base_Init+0x208>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d009      	beq.n	80062da <HAL_TIM_Base_Init+0x8a>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a64      	ldr	r2, [pc, #400]	@ (800645c <HAL_TIM_Base_Init+0x20c>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d004      	beq.n	80062da <HAL_TIM_Base_Init+0x8a>
 80062d0:	f44f 718b 	mov.w	r1, #278	@ 0x116
 80062d4:	4862      	ldr	r0, [pc, #392]	@ (8006460 <HAL_TIM_Base_Init+0x210>)
 80062d6:	f7fb f955 	bl	8001584 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	689b      	ldr	r3, [r3, #8]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d014      	beq.n	800630c <HAL_TIM_Base_Init+0xbc>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	689b      	ldr	r3, [r3, #8]
 80062e6:	2b10      	cmp	r3, #16
 80062e8:	d010      	beq.n	800630c <HAL_TIM_Base_Init+0xbc>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	689b      	ldr	r3, [r3, #8]
 80062ee:	2b20      	cmp	r3, #32
 80062f0:	d00c      	beq.n	800630c <HAL_TIM_Base_Init+0xbc>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	689b      	ldr	r3, [r3, #8]
 80062f6:	2b40      	cmp	r3, #64	@ 0x40
 80062f8:	d008      	beq.n	800630c <HAL_TIM_Base_Init+0xbc>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	2b60      	cmp	r3, #96	@ 0x60
 8006300:	d004      	beq.n	800630c <HAL_TIM_Base_Init+0xbc>
 8006302:	f240 1117 	movw	r1, #279	@ 0x117
 8006306:	4856      	ldr	r0, [pc, #344]	@ (8006460 <HAL_TIM_Base_Init+0x210>)
 8006308:	f7fb f93c 	bl	8001584 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	691b      	ldr	r3, [r3, #16]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d00e      	beq.n	8006332 <HAL_TIM_Base_Init+0xe2>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	691b      	ldr	r3, [r3, #16]
 8006318:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800631c:	d009      	beq.n	8006332 <HAL_TIM_Base_Init+0xe2>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	691b      	ldr	r3, [r3, #16]
 8006322:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006326:	d004      	beq.n	8006332 <HAL_TIM_Base_Init+0xe2>
 8006328:	f44f 718c 	mov.w	r1, #280	@ 0x118
 800632c:	484c      	ldr	r0, [pc, #304]	@ (8006460 <HAL_TIM_Base_Init+0x210>)
 800632e:	f7fb f929 	bl	8001584 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800633a:	d004      	beq.n	8006346 <HAL_TIM_Base_Init+0xf6>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a40      	ldr	r2, [pc, #256]	@ (8006444 <HAL_TIM_Base_Init+0x1f4>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d107      	bne.n	8006356 <HAL_TIM_Base_Init+0x106>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	68db      	ldr	r3, [r3, #12]
 800634a:	2b00      	cmp	r3, #0
 800634c:	bf14      	ite	ne
 800634e:	2301      	movne	r3, #1
 8006350:	2300      	moveq	r3, #0
 8006352:	b2db      	uxtb	r3, r3
 8006354:	e00e      	b.n	8006374 <HAL_TIM_Base_Init+0x124>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	68db      	ldr	r3, [r3, #12]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d006      	beq.n	800636c <HAL_TIM_Base_Init+0x11c>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	68db      	ldr	r3, [r3, #12]
 8006362:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006366:	d201      	bcs.n	800636c <HAL_TIM_Base_Init+0x11c>
 8006368:	2301      	movs	r3, #1
 800636a:	e000      	b.n	800636e <HAL_TIM_Base_Init+0x11e>
 800636c:	2300      	movs	r3, #0
 800636e:	f003 0301 	and.w	r3, r3, #1
 8006372:	b2db      	uxtb	r3, r3
 8006374:	2b00      	cmp	r3, #0
 8006376:	d104      	bne.n	8006382 <HAL_TIM_Base_Init+0x132>
 8006378:	f240 1119 	movw	r1, #281	@ 0x119
 800637c:	4838      	ldr	r0, [pc, #224]	@ (8006460 <HAL_TIM_Base_Init+0x210>)
 800637e:	f7fb f901 	bl	8001584 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	699b      	ldr	r3, [r3, #24]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d008      	beq.n	800639c <HAL_TIM_Base_Init+0x14c>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	699b      	ldr	r3, [r3, #24]
 800638e:	2b80      	cmp	r3, #128	@ 0x80
 8006390:	d004      	beq.n	800639c <HAL_TIM_Base_Init+0x14c>
 8006392:	f44f 718d 	mov.w	r1, #282	@ 0x11a
 8006396:	4832      	ldr	r0, [pc, #200]	@ (8006460 <HAL_TIM_Base_Init+0x210>)
 8006398:	f7fb f8f4 	bl	8001584 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80063a2:	b2db      	uxtb	r3, r3
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d106      	bne.n	80063b6 <HAL_TIM_Base_Init+0x166>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2200      	movs	r2, #0
 80063ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80063b0:	6878      	ldr	r0, [r7, #4]
 80063b2:	f7fb fd3b 	bl	8001e2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2202      	movs	r2, #2
 80063ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681a      	ldr	r2, [r3, #0]
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	3304      	adds	r3, #4
 80063c6:	4619      	mov	r1, r3
 80063c8:	4610      	mov	r0, r2
 80063ca:	f000 fb47 	bl	8006a5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2201      	movs	r2, #1
 80063d2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2201      	movs	r2, #1
 80063da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2201      	movs	r2, #1
 80063e2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2201      	movs	r2, #1
 80063ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2201      	movs	r2, #1
 80063f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2201      	movs	r2, #1
 80063fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2201      	movs	r2, #1
 8006402:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2201      	movs	r2, #1
 800640a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2201      	movs	r2, #1
 8006412:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2201      	movs	r2, #1
 800641a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2201      	movs	r2, #1
 8006422:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2201      	movs	r2, #1
 800642a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800642e:	2300      	movs	r3, #0
}
 8006430:	4618      	mov	r0, r3
 8006432:	3708      	adds	r7, #8
 8006434:	46bd      	mov	sp, r7
 8006436:	bd80      	pop	{r7, pc}
 8006438:	40012c00 	.word	0x40012c00
 800643c:	40000400 	.word	0x40000400
 8006440:	40000800 	.word	0x40000800
 8006444:	40000c00 	.word	0x40000c00
 8006448:	40001000 	.word	0x40001000
 800644c:	40001400 	.word	0x40001400
 8006450:	40013400 	.word	0x40013400
 8006454:	40014000 	.word	0x40014000
 8006458:	40014400 	.word	0x40014400
 800645c:	40014800 	.word	0x40014800
 8006460:	0800925c 	.word	0x0800925c

08006464 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b086      	sub	sp, #24
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
 800646c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d101      	bne.n	8006478 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006474:	2301      	movs	r3, #1
 8006476:	e1b0      	b.n	80067da <HAL_TIM_Encoder_Init+0x376>
  }

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a7f      	ldr	r2, [pc, #508]	@ (800667c <HAL_TIM_Encoder_Init+0x218>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d01d      	beq.n	80064be <HAL_TIM_Encoder_Init+0x5a>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800648a:	d018      	beq.n	80064be <HAL_TIM_Encoder_Init+0x5a>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a7b      	ldr	r2, [pc, #492]	@ (8006680 <HAL_TIM_Encoder_Init+0x21c>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d013      	beq.n	80064be <HAL_TIM_Encoder_Init+0x5a>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a7a      	ldr	r2, [pc, #488]	@ (8006684 <HAL_TIM_Encoder_Init+0x220>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d00e      	beq.n	80064be <HAL_TIM_Encoder_Init+0x5a>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a78      	ldr	r2, [pc, #480]	@ (8006688 <HAL_TIM_Encoder_Init+0x224>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d009      	beq.n	80064be <HAL_TIM_Encoder_Init+0x5a>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a77      	ldr	r2, [pc, #476]	@ (800668c <HAL_TIM_Encoder_Init+0x228>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d004      	beq.n	80064be <HAL_TIM_Encoder_Init+0x5a>
 80064b4:	f640 31e3 	movw	r1, #3043	@ 0xbe3
 80064b8:	4875      	ldr	r0, [pc, #468]	@ (8006690 <HAL_TIM_Encoder_Init+0x22c>)
 80064ba:	f7fb f863 	bl	8001584 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	689b      	ldr	r3, [r3, #8]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d014      	beq.n	80064f0 <HAL_TIM_Encoder_Init+0x8c>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	689b      	ldr	r3, [r3, #8]
 80064ca:	2b10      	cmp	r3, #16
 80064cc:	d010      	beq.n	80064f0 <HAL_TIM_Encoder_Init+0x8c>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	689b      	ldr	r3, [r3, #8]
 80064d2:	2b20      	cmp	r3, #32
 80064d4:	d00c      	beq.n	80064f0 <HAL_TIM_Encoder_Init+0x8c>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	689b      	ldr	r3, [r3, #8]
 80064da:	2b40      	cmp	r3, #64	@ 0x40
 80064dc:	d008      	beq.n	80064f0 <HAL_TIM_Encoder_Init+0x8c>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	689b      	ldr	r3, [r3, #8]
 80064e2:	2b60      	cmp	r3, #96	@ 0x60
 80064e4:	d004      	beq.n	80064f0 <HAL_TIM_Encoder_Init+0x8c>
 80064e6:	f640 31e4 	movw	r1, #3044	@ 0xbe4
 80064ea:	4869      	ldr	r0, [pc, #420]	@ (8006690 <HAL_TIM_Encoder_Init+0x22c>)
 80064ec:	f7fb f84a 	bl	8001584 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	691b      	ldr	r3, [r3, #16]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d00e      	beq.n	8006516 <HAL_TIM_Encoder_Init+0xb2>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	691b      	ldr	r3, [r3, #16]
 80064fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006500:	d009      	beq.n	8006516 <HAL_TIM_Encoder_Init+0xb2>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	691b      	ldr	r3, [r3, #16]
 8006506:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800650a:	d004      	beq.n	8006516 <HAL_TIM_Encoder_Init+0xb2>
 800650c:	f640 31e5 	movw	r1, #3045	@ 0xbe5
 8006510:	485f      	ldr	r0, [pc, #380]	@ (8006690 <HAL_TIM_Encoder_Init+0x22c>)
 8006512:	f7fb f837 	bl	8001584 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	699b      	ldr	r3, [r3, #24]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d008      	beq.n	8006530 <HAL_TIM_Encoder_Init+0xcc>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	699b      	ldr	r3, [r3, #24]
 8006522:	2b80      	cmp	r3, #128	@ 0x80
 8006524:	d004      	beq.n	8006530 <HAL_TIM_Encoder_Init+0xcc>
 8006526:	f640 31e6 	movw	r1, #3046	@ 0xbe6
 800652a:	4859      	ldr	r0, [pc, #356]	@ (8006690 <HAL_TIM_Encoder_Init+0x22c>)
 800652c:	f7fb f82a 	bl	8001584 <assert_failed>
  assert_param(IS_TIM_ENCODER_MODE(sConfig->EncoderMode));
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	2b01      	cmp	r3, #1
 8006536:	d00c      	beq.n	8006552 <HAL_TIM_Encoder_Init+0xee>
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	2b02      	cmp	r3, #2
 800653e:	d008      	beq.n	8006552 <HAL_TIM_Encoder_Init+0xee>
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	2b03      	cmp	r3, #3
 8006546:	d004      	beq.n	8006552 <HAL_TIM_Encoder_Init+0xee>
 8006548:	f640 31e7 	movw	r1, #3047	@ 0xbe7
 800654c:	4850      	ldr	r0, [pc, #320]	@ (8006690 <HAL_TIM_Encoder_Init+0x22c>)
 800654e:	f7fb f819 	bl	8001584 <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC1Selection));
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	689b      	ldr	r3, [r3, #8]
 8006556:	2b01      	cmp	r3, #1
 8006558:	d00c      	beq.n	8006574 <HAL_TIM_Encoder_Init+0x110>
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	689b      	ldr	r3, [r3, #8]
 800655e:	2b02      	cmp	r3, #2
 8006560:	d008      	beq.n	8006574 <HAL_TIM_Encoder_Init+0x110>
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	689b      	ldr	r3, [r3, #8]
 8006566:	2b03      	cmp	r3, #3
 8006568:	d004      	beq.n	8006574 <HAL_TIM_Encoder_Init+0x110>
 800656a:	f640 31e8 	movw	r1, #3048	@ 0xbe8
 800656e:	4848      	ldr	r0, [pc, #288]	@ (8006690 <HAL_TIM_Encoder_Init+0x22c>)
 8006570:	f7fb f808 	bl	8001584 <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC2Selection));
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	699b      	ldr	r3, [r3, #24]
 8006578:	2b01      	cmp	r3, #1
 800657a:	d00c      	beq.n	8006596 <HAL_TIM_Encoder_Init+0x132>
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	699b      	ldr	r3, [r3, #24]
 8006580:	2b02      	cmp	r3, #2
 8006582:	d008      	beq.n	8006596 <HAL_TIM_Encoder_Init+0x132>
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	699b      	ldr	r3, [r3, #24]
 8006588:	2b03      	cmp	r3, #3
 800658a:	d004      	beq.n	8006596 <HAL_TIM_Encoder_Init+0x132>
 800658c:	f640 31e9 	movw	r1, #3049	@ 0xbe9
 8006590:	483f      	ldr	r0, [pc, #252]	@ (8006690 <HAL_TIM_Encoder_Init+0x22c>)
 8006592:	f7fa fff7 	bl	8001584 <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC1Polarity));
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d008      	beq.n	80065b0 <HAL_TIM_Encoder_Init+0x14c>
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	685b      	ldr	r3, [r3, #4]
 80065a2:	2b02      	cmp	r3, #2
 80065a4:	d004      	beq.n	80065b0 <HAL_TIM_Encoder_Init+0x14c>
 80065a6:	f640 31ea 	movw	r1, #3050	@ 0xbea
 80065aa:	4839      	ldr	r0, [pc, #228]	@ (8006690 <HAL_TIM_Encoder_Init+0x22c>)
 80065ac:	f7fa ffea 	bl	8001584 <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC2Polarity));
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	695b      	ldr	r3, [r3, #20]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d008      	beq.n	80065ca <HAL_TIM_Encoder_Init+0x166>
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	695b      	ldr	r3, [r3, #20]
 80065bc:	2b02      	cmp	r3, #2
 80065be:	d004      	beq.n	80065ca <HAL_TIM_Encoder_Init+0x166>
 80065c0:	f640 31eb 	movw	r1, #3051	@ 0xbeb
 80065c4:	4832      	ldr	r0, [pc, #200]	@ (8006690 <HAL_TIM_Encoder_Init+0x22c>)
 80065c6:	f7fa ffdd 	bl	8001584 <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	68db      	ldr	r3, [r3, #12]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d010      	beq.n	80065f4 <HAL_TIM_Encoder_Init+0x190>
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	68db      	ldr	r3, [r3, #12]
 80065d6:	2b04      	cmp	r3, #4
 80065d8:	d00c      	beq.n	80065f4 <HAL_TIM_Encoder_Init+0x190>
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	68db      	ldr	r3, [r3, #12]
 80065de:	2b08      	cmp	r3, #8
 80065e0:	d008      	beq.n	80065f4 <HAL_TIM_Encoder_Init+0x190>
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	68db      	ldr	r3, [r3, #12]
 80065e6:	2b0c      	cmp	r3, #12
 80065e8:	d004      	beq.n	80065f4 <HAL_TIM_Encoder_Init+0x190>
 80065ea:	f640 31ec 	movw	r1, #3052	@ 0xbec
 80065ee:	4828      	ldr	r0, [pc, #160]	@ (8006690 <HAL_TIM_Encoder_Init+0x22c>)
 80065f0:	f7fa ffc8 	bl	8001584 <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	69db      	ldr	r3, [r3, #28]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d010      	beq.n	800661e <HAL_TIM_Encoder_Init+0x1ba>
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	69db      	ldr	r3, [r3, #28]
 8006600:	2b04      	cmp	r3, #4
 8006602:	d00c      	beq.n	800661e <HAL_TIM_Encoder_Init+0x1ba>
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	69db      	ldr	r3, [r3, #28]
 8006608:	2b08      	cmp	r3, #8
 800660a:	d008      	beq.n	800661e <HAL_TIM_Encoder_Init+0x1ba>
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	69db      	ldr	r3, [r3, #28]
 8006610:	2b0c      	cmp	r3, #12
 8006612:	d004      	beq.n	800661e <HAL_TIM_Encoder_Init+0x1ba>
 8006614:	f640 31ed 	movw	r1, #3053	@ 0xbed
 8006618:	481d      	ldr	r0, [pc, #116]	@ (8006690 <HAL_TIM_Encoder_Init+0x22c>)
 800661a:	f7fa ffb3 	bl	8001584 <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	691b      	ldr	r3, [r3, #16]
 8006622:	2b0f      	cmp	r3, #15
 8006624:	d904      	bls.n	8006630 <HAL_TIM_Encoder_Init+0x1cc>
 8006626:	f640 31ee 	movw	r1, #3054	@ 0xbee
 800662a:	4819      	ldr	r0, [pc, #100]	@ (8006690 <HAL_TIM_Encoder_Init+0x22c>)
 800662c:	f7fa ffaa 	bl	8001584 <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	6a1b      	ldr	r3, [r3, #32]
 8006634:	2b0f      	cmp	r3, #15
 8006636:	d904      	bls.n	8006642 <HAL_TIM_Encoder_Init+0x1de>
 8006638:	f640 31ef 	movw	r1, #3055	@ 0xbef
 800663c:	4814      	ldr	r0, [pc, #80]	@ (8006690 <HAL_TIM_Encoder_Init+0x22c>)
 800663e:	f7fa ffa1 	bl	8001584 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800664a:	d004      	beq.n	8006656 <HAL_TIM_Encoder_Init+0x1f2>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a0d      	ldr	r2, [pc, #52]	@ (8006688 <HAL_TIM_Encoder_Init+0x224>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d107      	bne.n	8006666 <HAL_TIM_Encoder_Init+0x202>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	68db      	ldr	r3, [r3, #12]
 800665a:	2b00      	cmp	r3, #0
 800665c:	bf14      	ite	ne
 800665e:	2301      	movne	r3, #1
 8006660:	2300      	moveq	r3, #0
 8006662:	b2db      	uxtb	r3, r3
 8006664:	e01a      	b.n	800669c <HAL_TIM_Encoder_Init+0x238>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	68db      	ldr	r3, [r3, #12]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d012      	beq.n	8006694 <HAL_TIM_Encoder_Init+0x230>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	68db      	ldr	r3, [r3, #12]
 8006672:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006676:	d20d      	bcs.n	8006694 <HAL_TIM_Encoder_Init+0x230>
 8006678:	2301      	movs	r3, #1
 800667a:	e00c      	b.n	8006696 <HAL_TIM_Encoder_Init+0x232>
 800667c:	40012c00 	.word	0x40012c00
 8006680:	40000400 	.word	0x40000400
 8006684:	40000800 	.word	0x40000800
 8006688:	40000c00 	.word	0x40000c00
 800668c:	40013400 	.word	0x40013400
 8006690:	0800925c 	.word	0x0800925c
 8006694:	2300      	movs	r3, #0
 8006696:	f003 0301 	and.w	r3, r3, #1
 800669a:	b2db      	uxtb	r3, r3
 800669c:	2b00      	cmp	r3, #0
 800669e:	d104      	bne.n	80066aa <HAL_TIM_Encoder_Init+0x246>
 80066a0:	f44f 613f 	mov.w	r1, #3056	@ 0xbf0
 80066a4:	484f      	ldr	r0, [pc, #316]	@ (80067e4 <HAL_TIM_Encoder_Init+0x380>)
 80066a6:	f7fa ff6d 	bl	8001584 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80066b0:	b2db      	uxtb	r3, r3
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d106      	bne.n	80066c4 <HAL_TIM_Encoder_Init+0x260>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2200      	movs	r2, #0
 80066ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f7fb faf4 	bl	8001cac <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2202      	movs	r2, #2
 80066c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	689b      	ldr	r3, [r3, #8]
 80066d2:	687a      	ldr	r2, [r7, #4]
 80066d4:	6812      	ldr	r2, [r2, #0]
 80066d6:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 80066da:	f023 0307 	bic.w	r3, r3, #7
 80066de:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681a      	ldr	r2, [r3, #0]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	3304      	adds	r3, #4
 80066e8:	4619      	mov	r1, r3
 80066ea:	4610      	mov	r0, r2
 80066ec:	f000 f9b6 	bl	8006a5c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	689b      	ldr	r3, [r3, #8]
 80066f6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	699b      	ldr	r3, [r3, #24]
 80066fe:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	6a1b      	ldr	r3, [r3, #32]
 8006706:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	697a      	ldr	r2, [r7, #20]
 800670e:	4313      	orrs	r3, r2
 8006710:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006718:	f023 0303 	bic.w	r3, r3, #3
 800671c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	689a      	ldr	r2, [r3, #8]
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	699b      	ldr	r3, [r3, #24]
 8006726:	021b      	lsls	r3, r3, #8
 8006728:	4313      	orrs	r3, r2
 800672a:	693a      	ldr	r2, [r7, #16]
 800672c:	4313      	orrs	r3, r2
 800672e:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006730:	693b      	ldr	r3, [r7, #16]
 8006732:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8006736:	f023 030c 	bic.w	r3, r3, #12
 800673a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006742:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006746:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	68da      	ldr	r2, [r3, #12]
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	69db      	ldr	r3, [r3, #28]
 8006750:	021b      	lsls	r3, r3, #8
 8006752:	4313      	orrs	r3, r2
 8006754:	693a      	ldr	r2, [r7, #16]
 8006756:	4313      	orrs	r3, r2
 8006758:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	691b      	ldr	r3, [r3, #16]
 800675e:	011a      	lsls	r2, r3, #4
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	6a1b      	ldr	r3, [r3, #32]
 8006764:	031b      	lsls	r3, r3, #12
 8006766:	4313      	orrs	r3, r2
 8006768:	693a      	ldr	r2, [r7, #16]
 800676a:	4313      	orrs	r3, r2
 800676c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8006774:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800677c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	685a      	ldr	r2, [r3, #4]
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	695b      	ldr	r3, [r3, #20]
 8006786:	011b      	lsls	r3, r3, #4
 8006788:	4313      	orrs	r3, r2
 800678a:	68fa      	ldr	r2, [r7, #12]
 800678c:	4313      	orrs	r3, r2
 800678e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	697a      	ldr	r2, [r7, #20]
 8006796:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	693a      	ldr	r2, [r7, #16]
 800679e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	68fa      	ldr	r2, [r7, #12]
 80067a6:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2201      	movs	r2, #1
 80067ac:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2201      	movs	r2, #1
 80067b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2201      	movs	r2, #1
 80067bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2201      	movs	r2, #1
 80067c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2201      	movs	r2, #1
 80067cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2201      	movs	r2, #1
 80067d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80067d8:	2300      	movs	r3, #0
}
 80067da:	4618      	mov	r0, r3
 80067dc:	3718      	adds	r7, #24
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}
 80067e2:	bf00      	nop
 80067e4:	0800925c 	.word	0x0800925c

080067e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b084      	sub	sp, #16
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	68db      	ldr	r3, [r3, #12]
 80067f6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	691b      	ldr	r3, [r3, #16]
 80067fe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	f003 0302 	and.w	r3, r3, #2
 8006806:	2b00      	cmp	r3, #0
 8006808:	d020      	beq.n	800684c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	f003 0302 	and.w	r3, r3, #2
 8006810:	2b00      	cmp	r3, #0
 8006812:	d01b      	beq.n	800684c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f06f 0202 	mvn.w	r2, #2
 800681c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2201      	movs	r2, #1
 8006822:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	699b      	ldr	r3, [r3, #24]
 800682a:	f003 0303 	and.w	r3, r3, #3
 800682e:	2b00      	cmp	r3, #0
 8006830:	d003      	beq.n	800683a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f000 f8f3 	bl	8006a1e <HAL_TIM_IC_CaptureCallback>
 8006838:	e005      	b.n	8006846 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f000 f8e5 	bl	8006a0a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f000 f8f6 	bl	8006a32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2200      	movs	r2, #0
 800684a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	f003 0304 	and.w	r3, r3, #4
 8006852:	2b00      	cmp	r3, #0
 8006854:	d020      	beq.n	8006898 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	f003 0304 	and.w	r3, r3, #4
 800685c:	2b00      	cmp	r3, #0
 800685e:	d01b      	beq.n	8006898 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f06f 0204 	mvn.w	r2, #4
 8006868:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2202      	movs	r2, #2
 800686e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	699b      	ldr	r3, [r3, #24]
 8006876:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800687a:	2b00      	cmp	r3, #0
 800687c:	d003      	beq.n	8006886 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f000 f8cd 	bl	8006a1e <HAL_TIM_IC_CaptureCallback>
 8006884:	e005      	b.n	8006892 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f000 f8bf 	bl	8006a0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f000 f8d0 	bl	8006a32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2200      	movs	r2, #0
 8006896:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	f003 0308 	and.w	r3, r3, #8
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d020      	beq.n	80068e4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	f003 0308 	and.w	r3, r3, #8
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d01b      	beq.n	80068e4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f06f 0208 	mvn.w	r2, #8
 80068b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2204      	movs	r2, #4
 80068ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	69db      	ldr	r3, [r3, #28]
 80068c2:	f003 0303 	and.w	r3, r3, #3
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d003      	beq.n	80068d2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f000 f8a7 	bl	8006a1e <HAL_TIM_IC_CaptureCallback>
 80068d0:	e005      	b.n	80068de <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f000 f899 	bl	8006a0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068d8:	6878      	ldr	r0, [r7, #4]
 80068da:	f000 f8aa 	bl	8006a32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2200      	movs	r2, #0
 80068e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	f003 0310 	and.w	r3, r3, #16
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d020      	beq.n	8006930 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	f003 0310 	and.w	r3, r3, #16
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d01b      	beq.n	8006930 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f06f 0210 	mvn.w	r2, #16
 8006900:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2208      	movs	r2, #8
 8006906:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	69db      	ldr	r3, [r3, #28]
 800690e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006912:	2b00      	cmp	r3, #0
 8006914:	d003      	beq.n	800691e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f000 f881 	bl	8006a1e <HAL_TIM_IC_CaptureCallback>
 800691c:	e005      	b.n	800692a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f000 f873 	bl	8006a0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f000 f884 	bl	8006a32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2200      	movs	r2, #0
 800692e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	f003 0301 	and.w	r3, r3, #1
 8006936:	2b00      	cmp	r3, #0
 8006938:	d00c      	beq.n	8006954 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	f003 0301 	and.w	r3, r3, #1
 8006940:	2b00      	cmp	r3, #0
 8006942:	d007      	beq.n	8006954 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f06f 0201 	mvn.w	r2, #1
 800694c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f000 f851 	bl	80069f6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800695a:	2b00      	cmp	r3, #0
 800695c:	d104      	bne.n	8006968 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006964:	2b00      	cmp	r3, #0
 8006966:	d00c      	beq.n	8006982 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800696e:	2b00      	cmp	r3, #0
 8006970:	d007      	beq.n	8006982 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800697a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f000 fa73 	bl	8006e68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006988:	2b00      	cmp	r3, #0
 800698a:	d00c      	beq.n	80069a6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006992:	2b00      	cmp	r3, #0
 8006994:	d007      	beq.n	80069a6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800699e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	f000 fa6b 	bl	8006e7c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d00c      	beq.n	80069ca <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d007      	beq.n	80069ca <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80069c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f000 f83e 	bl	8006a46 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	f003 0320 	and.w	r3, r3, #32
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d00c      	beq.n	80069ee <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	f003 0320 	and.w	r3, r3, #32
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d007      	beq.n	80069ee <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f06f 0220 	mvn.w	r2, #32
 80069e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	f000 fa33 	bl	8006e54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80069ee:	bf00      	nop
 80069f0:	3710      	adds	r7, #16
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}

080069f6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80069f6:	b480      	push	{r7}
 80069f8:	b083      	sub	sp, #12
 80069fa:	af00      	add	r7, sp, #0
 80069fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80069fe:	bf00      	nop
 8006a00:	370c      	adds	r7, #12
 8006a02:	46bd      	mov	sp, r7
 8006a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a08:	4770      	bx	lr

08006a0a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006a0a:	b480      	push	{r7}
 8006a0c:	b083      	sub	sp, #12
 8006a0e:	af00      	add	r7, sp, #0
 8006a10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006a12:	bf00      	nop
 8006a14:	370c      	adds	r7, #12
 8006a16:	46bd      	mov	sp, r7
 8006a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1c:	4770      	bx	lr

08006a1e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006a1e:	b480      	push	{r7}
 8006a20:	b083      	sub	sp, #12
 8006a22:	af00      	add	r7, sp, #0
 8006a24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006a26:	bf00      	nop
 8006a28:	370c      	adds	r7, #12
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a30:	4770      	bx	lr

08006a32 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006a32:	b480      	push	{r7}
 8006a34:	b083      	sub	sp, #12
 8006a36:	af00      	add	r7, sp, #0
 8006a38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006a3a:	bf00      	nop
 8006a3c:	370c      	adds	r7, #12
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a44:	4770      	bx	lr

08006a46 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006a46:	b480      	push	{r7}
 8006a48:	b083      	sub	sp, #12
 8006a4a:	af00      	add	r7, sp, #0
 8006a4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006a4e:	bf00      	nop
 8006a50:	370c      	adds	r7, #12
 8006a52:	46bd      	mov	sp, r7
 8006a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a58:	4770      	bx	lr
	...

08006a5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b085      	sub	sp, #20
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
 8006a64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	4a46      	ldr	r2, [pc, #280]	@ (8006b88 <TIM_Base_SetConfig+0x12c>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d013      	beq.n	8006a9c <TIM_Base_SetConfig+0x40>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a7a:	d00f      	beq.n	8006a9c <TIM_Base_SetConfig+0x40>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	4a43      	ldr	r2, [pc, #268]	@ (8006b8c <TIM_Base_SetConfig+0x130>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d00b      	beq.n	8006a9c <TIM_Base_SetConfig+0x40>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	4a42      	ldr	r2, [pc, #264]	@ (8006b90 <TIM_Base_SetConfig+0x134>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d007      	beq.n	8006a9c <TIM_Base_SetConfig+0x40>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	4a41      	ldr	r2, [pc, #260]	@ (8006b94 <TIM_Base_SetConfig+0x138>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d003      	beq.n	8006a9c <TIM_Base_SetConfig+0x40>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	4a40      	ldr	r2, [pc, #256]	@ (8006b98 <TIM_Base_SetConfig+0x13c>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d108      	bne.n	8006aae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006aa2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	68fa      	ldr	r2, [r7, #12]
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	4a35      	ldr	r2, [pc, #212]	@ (8006b88 <TIM_Base_SetConfig+0x12c>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d01f      	beq.n	8006af6 <TIM_Base_SetConfig+0x9a>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006abc:	d01b      	beq.n	8006af6 <TIM_Base_SetConfig+0x9a>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	4a32      	ldr	r2, [pc, #200]	@ (8006b8c <TIM_Base_SetConfig+0x130>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d017      	beq.n	8006af6 <TIM_Base_SetConfig+0x9a>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	4a31      	ldr	r2, [pc, #196]	@ (8006b90 <TIM_Base_SetConfig+0x134>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d013      	beq.n	8006af6 <TIM_Base_SetConfig+0x9a>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	4a30      	ldr	r2, [pc, #192]	@ (8006b94 <TIM_Base_SetConfig+0x138>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d00f      	beq.n	8006af6 <TIM_Base_SetConfig+0x9a>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	4a2f      	ldr	r2, [pc, #188]	@ (8006b98 <TIM_Base_SetConfig+0x13c>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d00b      	beq.n	8006af6 <TIM_Base_SetConfig+0x9a>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	4a2e      	ldr	r2, [pc, #184]	@ (8006b9c <TIM_Base_SetConfig+0x140>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d007      	beq.n	8006af6 <TIM_Base_SetConfig+0x9a>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	4a2d      	ldr	r2, [pc, #180]	@ (8006ba0 <TIM_Base_SetConfig+0x144>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d003      	beq.n	8006af6 <TIM_Base_SetConfig+0x9a>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	4a2c      	ldr	r2, [pc, #176]	@ (8006ba4 <TIM_Base_SetConfig+0x148>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d108      	bne.n	8006b08 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006afc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	68db      	ldr	r3, [r3, #12]
 8006b02:	68fa      	ldr	r2, [r7, #12]
 8006b04:	4313      	orrs	r3, r2
 8006b06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	695b      	ldr	r3, [r3, #20]
 8006b12:	4313      	orrs	r3, r2
 8006b14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	68fa      	ldr	r2, [r7, #12]
 8006b1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	689a      	ldr	r2, [r3, #8]
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	681a      	ldr	r2, [r3, #0]
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	4a16      	ldr	r2, [pc, #88]	@ (8006b88 <TIM_Base_SetConfig+0x12c>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d00f      	beq.n	8006b54 <TIM_Base_SetConfig+0xf8>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	4a18      	ldr	r2, [pc, #96]	@ (8006b98 <TIM_Base_SetConfig+0x13c>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d00b      	beq.n	8006b54 <TIM_Base_SetConfig+0xf8>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	4a17      	ldr	r2, [pc, #92]	@ (8006b9c <TIM_Base_SetConfig+0x140>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d007      	beq.n	8006b54 <TIM_Base_SetConfig+0xf8>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	4a16      	ldr	r2, [pc, #88]	@ (8006ba0 <TIM_Base_SetConfig+0x144>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d003      	beq.n	8006b54 <TIM_Base_SetConfig+0xf8>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	4a15      	ldr	r2, [pc, #84]	@ (8006ba4 <TIM_Base_SetConfig+0x148>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d103      	bne.n	8006b5c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	691a      	ldr	r2, [r3, #16]
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2201      	movs	r2, #1
 8006b60:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	691b      	ldr	r3, [r3, #16]
 8006b66:	f003 0301 	and.w	r3, r3, #1
 8006b6a:	2b01      	cmp	r3, #1
 8006b6c:	d105      	bne.n	8006b7a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	691b      	ldr	r3, [r3, #16]
 8006b72:	f023 0201 	bic.w	r2, r3, #1
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	611a      	str	r2, [r3, #16]
  }
}
 8006b7a:	bf00      	nop
 8006b7c:	3714      	adds	r7, #20
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b84:	4770      	bx	lr
 8006b86:	bf00      	nop
 8006b88:	40012c00 	.word	0x40012c00
 8006b8c:	40000400 	.word	0x40000400
 8006b90:	40000800 	.word	0x40000800
 8006b94:	40000c00 	.word	0x40000c00
 8006b98:	40013400 	.word	0x40013400
 8006b9c:	40014000 	.word	0x40014000
 8006ba0:	40014400 	.word	0x40014400
 8006ba4:	40014800 	.word	0x40014800

08006ba8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b084      	sub	sp, #16
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
 8006bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4a34      	ldr	r2, [pc, #208]	@ (8006c88 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d02c      	beq.n	8006c16 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006bc4:	d027      	beq.n	8006c16 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4a30      	ldr	r2, [pc, #192]	@ (8006c8c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d022      	beq.n	8006c16 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4a2e      	ldr	r2, [pc, #184]	@ (8006c90 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d01d      	beq.n	8006c16 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4a2d      	ldr	r2, [pc, #180]	@ (8006c94 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d018      	beq.n	8006c16 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4a2b      	ldr	r2, [pc, #172]	@ (8006c98 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d013      	beq.n	8006c16 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4a2a      	ldr	r2, [pc, #168]	@ (8006c9c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d00e      	beq.n	8006c16 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4a28      	ldr	r2, [pc, #160]	@ (8006ca0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d009      	beq.n	8006c16 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	4a27      	ldr	r2, [pc, #156]	@ (8006ca4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d004      	beq.n	8006c16 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8006c0c:	f240 71ac 	movw	r1, #1964	@ 0x7ac
 8006c10:	4825      	ldr	r0, [pc, #148]	@ (8006ca8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006c12:	f7fa fcb7 	bl	8001584 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d020      	beq.n	8006c60 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	2b10      	cmp	r3, #16
 8006c24:	d01c      	beq.n	8006c60 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	2b20      	cmp	r3, #32
 8006c2c:	d018      	beq.n	8006c60 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	2b30      	cmp	r3, #48	@ 0x30
 8006c34:	d014      	beq.n	8006c60 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	2b40      	cmp	r3, #64	@ 0x40
 8006c3c:	d010      	beq.n	8006c60 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	2b50      	cmp	r3, #80	@ 0x50
 8006c44:	d00c      	beq.n	8006c60 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	2b60      	cmp	r3, #96	@ 0x60
 8006c4c:	d008      	beq.n	8006c60 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	2b70      	cmp	r3, #112	@ 0x70
 8006c54:	d004      	beq.n	8006c60 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006c56:	f240 71ad 	movw	r1, #1965	@ 0x7ad
 8006c5a:	4813      	ldr	r0, [pc, #76]	@ (8006ca8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006c5c:	f7fa fc92 	bl	8001584 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	689b      	ldr	r3, [r3, #8]
 8006c64:	2b80      	cmp	r3, #128	@ 0x80
 8006c66:	d008      	beq.n	8006c7a <HAL_TIMEx_MasterConfigSynchronization+0xd2>
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	689b      	ldr	r3, [r3, #8]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d004      	beq.n	8006c7a <HAL_TIMEx_MasterConfigSynchronization+0xd2>
 8006c70:	f240 71ae 	movw	r1, #1966	@ 0x7ae
 8006c74:	480c      	ldr	r0, [pc, #48]	@ (8006ca8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006c76:	f7fa fc85 	bl	8001584 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006c80:	2b01      	cmp	r3, #1
 8006c82:	d113      	bne.n	8006cac <HAL_TIMEx_MasterConfigSynchronization+0x104>
 8006c84:	2302      	movs	r3, #2
 8006c86:	e0d3      	b.n	8006e30 <HAL_TIMEx_MasterConfigSynchronization+0x288>
 8006c88:	40012c00 	.word	0x40012c00
 8006c8c:	40000400 	.word	0x40000400
 8006c90:	40000800 	.word	0x40000800
 8006c94:	40000c00 	.word	0x40000c00
 8006c98:	40001000 	.word	0x40001000
 8006c9c:	40001400 	.word	0x40001400
 8006ca0:	40013400 	.word	0x40013400
 8006ca4:	40014000 	.word	0x40014000
 8006ca8:	08009294 	.word	0x08009294
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2201      	movs	r2, #1
 8006cb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2202      	movs	r2, #2
 8006cb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	685b      	ldr	r3, [r3, #4]
 8006cc2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	689b      	ldr	r3, [r3, #8]
 8006cca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a59      	ldr	r2, [pc, #356]	@ (8006e38 <HAL_TIMEx_MasterConfigSynchronization+0x290>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d004      	beq.n	8006ce0 <HAL_TIMEx_MasterConfigSynchronization+0x138>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4a58      	ldr	r2, [pc, #352]	@ (8006e3c <HAL_TIMEx_MasterConfigSynchronization+0x294>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d161      	bne.n	8006da4 <HAL_TIMEx_MasterConfigSynchronization+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	685b      	ldr	r3, [r3, #4]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d054      	beq.n	8006d92 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	685b      	ldr	r3, [r3, #4]
 8006cec:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006cf0:	d04f      	beq.n	8006d92 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	685b      	ldr	r3, [r3, #4]
 8006cf6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006cfa:	d04a      	beq.n	8006d92 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	685b      	ldr	r3, [r3, #4]
 8006d00:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006d04:	d045      	beq.n	8006d92 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006d0e:	d040      	beq.n	8006d92 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	685b      	ldr	r3, [r3, #4]
 8006d14:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8006d18:	d03b      	beq.n	8006d92 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	685b      	ldr	r3, [r3, #4]
 8006d1e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006d22:	d036      	beq.n	8006d92 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	685b      	ldr	r3, [r3, #4]
 8006d28:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006d2c:	d031      	beq.n	8006d92 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	685b      	ldr	r3, [r3, #4]
 8006d32:	f5b3 0fe0 	cmp.w	r3, #7340032	@ 0x700000
 8006d36:	d02c      	beq.n	8006d92 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	685b      	ldr	r3, [r3, #4]
 8006d3c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006d40:	d027      	beq.n	8006d92 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	685b      	ldr	r3, [r3, #4]
 8006d46:	f5b3 0f10 	cmp.w	r3, #9437184	@ 0x900000
 8006d4a:	d022      	beq.n	8006d92 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	685b      	ldr	r3, [r3, #4]
 8006d50:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8006d54:	d01d      	beq.n	8006d92 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	685b      	ldr	r3, [r3, #4]
 8006d5a:	f5b3 0f30 	cmp.w	r3, #11534336	@ 0xb00000
 8006d5e:	d018      	beq.n	8006d92 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	685b      	ldr	r3, [r3, #4]
 8006d64:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006d68:	d013      	beq.n	8006d92 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	685b      	ldr	r3, [r3, #4]
 8006d6e:	f5b3 0f50 	cmp.w	r3, #13631488	@ 0xd00000
 8006d72:	d00e      	beq.n	8006d92 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	685b      	ldr	r3, [r3, #4]
 8006d78:	f5b3 0f60 	cmp.w	r3, #14680064	@ 0xe00000
 8006d7c:	d009      	beq.n	8006d92 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	685b      	ldr	r3, [r3, #4]
 8006d82:	f5b3 0f70 	cmp.w	r3, #15728640	@ 0xf00000
 8006d86:	d004      	beq.n	8006d92 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8006d88:	f44f 61f8 	mov.w	r1, #1984	@ 0x7c0
 8006d8c:	482c      	ldr	r0, [pc, #176]	@ (8006e40 <HAL_TIMEx_MasterConfigSynchronization+0x298>)
 8006d8e:	f7fa fbf9 	bl	8001584 <assert_failed>

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006d98:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	685b      	ldr	r3, [r3, #4]
 8006d9e:	68fa      	ldr	r2, [r7, #12]
 8006da0:	4313      	orrs	r3, r2
 8006da2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006daa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	68fa      	ldr	r2, [r7, #12]
 8006db2:	4313      	orrs	r3, r2
 8006db4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	68fa      	ldr	r2, [r7, #12]
 8006dbc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4a1d      	ldr	r2, [pc, #116]	@ (8006e38 <HAL_TIMEx_MasterConfigSynchronization+0x290>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d01d      	beq.n	8006e04 <HAL_TIMEx_MasterConfigSynchronization+0x25c>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006dd0:	d018      	beq.n	8006e04 <HAL_TIMEx_MasterConfigSynchronization+0x25c>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4a1b      	ldr	r2, [pc, #108]	@ (8006e44 <HAL_TIMEx_MasterConfigSynchronization+0x29c>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d013      	beq.n	8006e04 <HAL_TIMEx_MasterConfigSynchronization+0x25c>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4a19      	ldr	r2, [pc, #100]	@ (8006e48 <HAL_TIMEx_MasterConfigSynchronization+0x2a0>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d00e      	beq.n	8006e04 <HAL_TIMEx_MasterConfigSynchronization+0x25c>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a18      	ldr	r2, [pc, #96]	@ (8006e4c <HAL_TIMEx_MasterConfigSynchronization+0x2a4>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d009      	beq.n	8006e04 <HAL_TIMEx_MasterConfigSynchronization+0x25c>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a11      	ldr	r2, [pc, #68]	@ (8006e3c <HAL_TIMEx_MasterConfigSynchronization+0x294>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d004      	beq.n	8006e04 <HAL_TIMEx_MasterConfigSynchronization+0x25c>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4a14      	ldr	r2, [pc, #80]	@ (8006e50 <HAL_TIMEx_MasterConfigSynchronization+0x2a8>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d10c      	bne.n	8006e1e <HAL_TIMEx_MasterConfigSynchronization+0x276>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006e0a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	689b      	ldr	r3, [r3, #8]
 8006e10:	68ba      	ldr	r2, [r7, #8]
 8006e12:	4313      	orrs	r3, r2
 8006e14:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	68ba      	ldr	r2, [r7, #8]
 8006e1c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2201      	movs	r2, #1
 8006e22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006e2e:	2300      	movs	r3, #0
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	3710      	adds	r7, #16
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd80      	pop	{r7, pc}
 8006e38:	40012c00 	.word	0x40012c00
 8006e3c:	40013400 	.word	0x40013400
 8006e40:	08009294 	.word	0x08009294
 8006e44:	40000400 	.word	0x40000400
 8006e48:	40000800 	.word	0x40000800
 8006e4c:	40000c00 	.word	0x40000c00
 8006e50:	40014000 	.word	0x40014000

08006e54 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006e54:	b480      	push	{r7}
 8006e56:	b083      	sub	sp, #12
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006e5c:	bf00      	nop
 8006e5e:	370c      	adds	r7, #12
 8006e60:	46bd      	mov	sp, r7
 8006e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e66:	4770      	bx	lr

08006e68 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006e68:	b480      	push	{r7}
 8006e6a:	b083      	sub	sp, #12
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006e70:	bf00      	nop
 8006e72:	370c      	adds	r7, #12
 8006e74:	46bd      	mov	sp, r7
 8006e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7a:	4770      	bx	lr

08006e7c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b083      	sub	sp, #12
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006e84:	bf00      	nop
 8006e86:	370c      	adds	r7, #12
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8e:	4770      	bx	lr

08006e90 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b082      	sub	sp, #8
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d101      	bne.n	8006ea2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	e08b      	b.n	8006fba <HAL_UART_Init+0x12a>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	699b      	ldr	r3, [r3, #24]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d023      	beq.n	8006ef2 <HAL_UART_Init+0x62>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4a45      	ldr	r2, [pc, #276]	@ (8006fc4 <HAL_UART_Init+0x134>)
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d041      	beq.n	8006f38 <HAL_UART_Init+0xa8>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4a43      	ldr	r2, [pc, #268]	@ (8006fc8 <HAL_UART_Init+0x138>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d03c      	beq.n	8006f38 <HAL_UART_Init+0xa8>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4a42      	ldr	r2, [pc, #264]	@ (8006fcc <HAL_UART_Init+0x13c>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d037      	beq.n	8006f38 <HAL_UART_Init+0xa8>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4a40      	ldr	r2, [pc, #256]	@ (8006fd0 <HAL_UART_Init+0x140>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d032      	beq.n	8006f38 <HAL_UART_Init+0xa8>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4a3f      	ldr	r2, [pc, #252]	@ (8006fd4 <HAL_UART_Init+0x144>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d02d      	beq.n	8006f38 <HAL_UART_Init+0xa8>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4a3d      	ldr	r2, [pc, #244]	@ (8006fd8 <HAL_UART_Init+0x148>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d028      	beq.n	8006f38 <HAL_UART_Init+0xa8>
 8006ee6:	f44f 71a9 	mov.w	r1, #338	@ 0x152
 8006eea:	483c      	ldr	r0, [pc, #240]	@ (8006fdc <HAL_UART_Init+0x14c>)
 8006eec:	f7fa fb4a 	bl	8001584 <assert_failed>
 8006ef0:	e022      	b.n	8006f38 <HAL_UART_Init+0xa8>
  }
  else
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4a33      	ldr	r2, [pc, #204]	@ (8006fc4 <HAL_UART_Init+0x134>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d01d      	beq.n	8006f38 <HAL_UART_Init+0xa8>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4a31      	ldr	r2, [pc, #196]	@ (8006fc8 <HAL_UART_Init+0x138>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d018      	beq.n	8006f38 <HAL_UART_Init+0xa8>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4a30      	ldr	r2, [pc, #192]	@ (8006fcc <HAL_UART_Init+0x13c>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d013      	beq.n	8006f38 <HAL_UART_Init+0xa8>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4a2e      	ldr	r2, [pc, #184]	@ (8006fd0 <HAL_UART_Init+0x140>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d00e      	beq.n	8006f38 <HAL_UART_Init+0xa8>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4a2d      	ldr	r2, [pc, #180]	@ (8006fd4 <HAL_UART_Init+0x144>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d009      	beq.n	8006f38 <HAL_UART_Init+0xa8>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	4a2b      	ldr	r2, [pc, #172]	@ (8006fd8 <HAL_UART_Init+0x148>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d004      	beq.n	8006f38 <HAL_UART_Init+0xa8>
 8006f2e:	f240 1157 	movw	r1, #343	@ 0x157
 8006f32:	482a      	ldr	r0, [pc, #168]	@ (8006fdc <HAL_UART_Init+0x14c>)
 8006f34:	f7fa fb26 	bl	8001584 <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d106      	bne.n	8006f4e <HAL_UART_Init+0xbe>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2200      	movs	r2, #0
 8006f44:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f7fa ffe1 	bl	8001f10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2224      	movs	r2, #36	@ 0x24
 8006f52:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	681a      	ldr	r2, [r3, #0]
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f022 0201 	bic.w	r2, r2, #1
 8006f62:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d002      	beq.n	8006f72 <HAL_UART_Init+0xe2>
  {
    UART_AdvFeatureConfig(huart);
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	f000 fc7d 	bl	800786c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f000 f91c 	bl	80071b0 <UART_SetConfig>
 8006f78:	4603      	mov	r3, r0
 8006f7a:	2b01      	cmp	r3, #1
 8006f7c:	d101      	bne.n	8006f82 <HAL_UART_Init+0xf2>
  {
    return HAL_ERROR;
 8006f7e:	2301      	movs	r3, #1
 8006f80:	e01b      	b.n	8006fba <HAL_UART_Init+0x12a>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	685a      	ldr	r2, [r3, #4]
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006f90:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	689a      	ldr	r2, [r3, #8]
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006fa0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	681a      	ldr	r2, [r3, #0]
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f042 0201 	orr.w	r2, r2, #1
 8006fb0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f000 fdba 	bl	8007b2c <UART_CheckIdleState>
 8006fb8:	4603      	mov	r3, r0
}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	3708      	adds	r7, #8
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}
 8006fc2:	bf00      	nop
 8006fc4:	40013800 	.word	0x40013800
 8006fc8:	40004400 	.word	0x40004400
 8006fcc:	40004800 	.word	0x40004800
 8006fd0:	40004c00 	.word	0x40004c00
 8006fd4:	40005000 	.word	0x40005000
 8006fd8:	40008000 	.word	0x40008000
 8006fdc:	080092d0 	.word	0x080092d0

08006fe0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b08a      	sub	sp, #40	@ 0x28
 8006fe4:	af02      	add	r7, sp, #8
 8006fe6:	60f8      	str	r0, [r7, #12]
 8006fe8:	60b9      	str	r1, [r7, #8]
 8006fea:	603b      	str	r3, [r7, #0]
 8006fec:	4613      	mov	r3, r2
 8006fee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006ff4:	2b20      	cmp	r3, #32
 8006ff6:	d177      	bne.n	80070e8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d002      	beq.n	8007004 <HAL_UART_Transmit+0x24>
 8006ffe:	88fb      	ldrh	r3, [r7, #6]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d101      	bne.n	8007008 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007004:	2301      	movs	r3, #1
 8007006:	e070      	b.n	80070ea <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	2200      	movs	r2, #0
 800700c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	2221      	movs	r2, #33	@ 0x21
 8007014:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007016:	f7fb f86b 	bl	80020f0 <HAL_GetTick>
 800701a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	88fa      	ldrh	r2, [r7, #6]
 8007020:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	88fa      	ldrh	r2, [r7, #6]
 8007028:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	689b      	ldr	r3, [r3, #8]
 8007030:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007034:	d108      	bne.n	8007048 <HAL_UART_Transmit+0x68>
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	691b      	ldr	r3, [r3, #16]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d104      	bne.n	8007048 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800703e:	2300      	movs	r3, #0
 8007040:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	61bb      	str	r3, [r7, #24]
 8007046:	e003      	b.n	8007050 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800704c:	2300      	movs	r3, #0
 800704e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007050:	e02f      	b.n	80070b2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	9300      	str	r3, [sp, #0]
 8007056:	697b      	ldr	r3, [r7, #20]
 8007058:	2200      	movs	r2, #0
 800705a:	2180      	movs	r1, #128	@ 0x80
 800705c:	68f8      	ldr	r0, [r7, #12]
 800705e:	f000 fe0d 	bl	8007c7c <UART_WaitOnFlagUntilTimeout>
 8007062:	4603      	mov	r3, r0
 8007064:	2b00      	cmp	r3, #0
 8007066:	d004      	beq.n	8007072 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	2220      	movs	r2, #32
 800706c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800706e:	2303      	movs	r3, #3
 8007070:	e03b      	b.n	80070ea <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8007072:	69fb      	ldr	r3, [r7, #28]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d10b      	bne.n	8007090 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007078:	69bb      	ldr	r3, [r7, #24]
 800707a:	881a      	ldrh	r2, [r3, #0]
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007084:	b292      	uxth	r2, r2
 8007086:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007088:	69bb      	ldr	r3, [r7, #24]
 800708a:	3302      	adds	r3, #2
 800708c:	61bb      	str	r3, [r7, #24]
 800708e:	e007      	b.n	80070a0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007090:	69fb      	ldr	r3, [r7, #28]
 8007092:	781a      	ldrb	r2, [r3, #0]
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800709a:	69fb      	ldr	r3, [r7, #28]
 800709c:	3301      	adds	r3, #1
 800709e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80070a6:	b29b      	uxth	r3, r3
 80070a8:	3b01      	subs	r3, #1
 80070aa:	b29a      	uxth	r2, r3
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80070b8:	b29b      	uxth	r3, r3
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d1c9      	bne.n	8007052 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	9300      	str	r3, [sp, #0]
 80070c2:	697b      	ldr	r3, [r7, #20]
 80070c4:	2200      	movs	r2, #0
 80070c6:	2140      	movs	r1, #64	@ 0x40
 80070c8:	68f8      	ldr	r0, [r7, #12]
 80070ca:	f000 fdd7 	bl	8007c7c <UART_WaitOnFlagUntilTimeout>
 80070ce:	4603      	mov	r3, r0
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d004      	beq.n	80070de <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	2220      	movs	r2, #32
 80070d8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80070da:	2303      	movs	r3, #3
 80070dc:	e005      	b.n	80070ea <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	2220      	movs	r2, #32
 80070e2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80070e4:	2300      	movs	r3, #0
 80070e6:	e000      	b.n	80070ea <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80070e8:	2302      	movs	r3, #2
  }
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	3720      	adds	r7, #32
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}
	...

080070f4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80070f4:	b480      	push	{r7}
 80070f6:	b08b      	sub	sp, #44	@ 0x2c
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	60f8      	str	r0, [r7, #12]
 80070fc:	60b9      	str	r1, [r7, #8]
 80070fe:	4613      	mov	r3, r2
 8007100:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007106:	2b20      	cmp	r3, #32
 8007108:	d147      	bne.n	800719a <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d002      	beq.n	8007116 <HAL_UART_Transmit_IT+0x22>
 8007110:	88fb      	ldrh	r3, [r7, #6]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d101      	bne.n	800711a <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8007116:	2301      	movs	r3, #1
 8007118:	e040      	b.n	800719c <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	68ba      	ldr	r2, [r7, #8]
 800711e:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	88fa      	ldrh	r2, [r7, #6]
 8007124:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	88fa      	ldrh	r2, [r7, #6]
 800712c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	2200      	movs	r2, #0
 8007134:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	2200      	movs	r2, #0
 800713a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	2221      	movs	r2, #33	@ 0x21
 8007142:	67da      	str	r2, [r3, #124]	@ 0x7c
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	689b      	ldr	r3, [r3, #8]
 8007148:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800714c:	d107      	bne.n	800715e <HAL_UART_Transmit_IT+0x6a>
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	691b      	ldr	r3, [r3, #16]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d103      	bne.n	800715e <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	4a13      	ldr	r2, [pc, #76]	@ (80071a8 <HAL_UART_Transmit_IT+0xb4>)
 800715a:	66da      	str	r2, [r3, #108]	@ 0x6c
 800715c:	e002      	b.n	8007164 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	4a12      	ldr	r2, [pc, #72]	@ (80071ac <HAL_UART_Transmit_IT+0xb8>)
 8007162:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800716a:	697b      	ldr	r3, [r7, #20]
 800716c:	e853 3f00 	ldrex	r3, [r3]
 8007170:	613b      	str	r3, [r7, #16]
   return(result);
 8007172:	693b      	ldr	r3, [r7, #16]
 8007174:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007178:	627b      	str	r3, [r7, #36]	@ 0x24
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	461a      	mov	r2, r3
 8007180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007182:	623b      	str	r3, [r7, #32]
 8007184:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007186:	69f9      	ldr	r1, [r7, #28]
 8007188:	6a3a      	ldr	r2, [r7, #32]
 800718a:	e841 2300 	strex	r3, r2, [r1]
 800718e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007190:	69bb      	ldr	r3, [r7, #24]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d1e6      	bne.n	8007164 <HAL_UART_Transmit_IT+0x70>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8007196:	2300      	movs	r3, #0
 8007198:	e000      	b.n	800719c <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800719a:	2302      	movs	r3, #2
  }
}
 800719c:	4618      	mov	r0, r3
 800719e:	372c      	adds	r7, #44	@ 0x2c
 80071a0:	46bd      	mov	sp, r7
 80071a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a6:	4770      	bx	lr
 80071a8:	08007ed5 	.word	0x08007ed5
 80071ac:	08007e1f 	.word	0x08007e1f

080071b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80071b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80071b4:	b08a      	sub	sp, #40	@ 0x28
 80071b6:	af00      	add	r7, sp, #0
 80071b8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80071ba:	2300      	movs	r3, #0
 80071bc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  uint32_t lpuart_ker_ck_pres;
#endif /* USART_PRESC_PRESCALER */
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	685b      	ldr	r3, [r3, #4]
 80071c4:	4a9e      	ldr	r2, [pc, #632]	@ (8007440 <UART_SetConfig+0x290>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d904      	bls.n	80071d4 <UART_SetConfig+0x24>
 80071ca:	f640 4158 	movw	r1, #3160	@ 0xc58
 80071ce:	489d      	ldr	r0, [pc, #628]	@ (8007444 <UART_SetConfig+0x294>)
 80071d0:	f7fa f9d8 	bl	8001584 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	689b      	ldr	r3, [r3, #8]
 80071d8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80071dc:	d00d      	beq.n	80071fa <UART_SetConfig+0x4a>
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	689b      	ldr	r3, [r3, #8]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d009      	beq.n	80071fa <UART_SetConfig+0x4a>
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	689b      	ldr	r3, [r3, #8]
 80071ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80071ee:	d004      	beq.n	80071fa <UART_SetConfig+0x4a>
 80071f0:	f640 4159 	movw	r1, #3161	@ 0xc59
 80071f4:	4893      	ldr	r0, [pc, #588]	@ (8007444 <UART_SetConfig+0x294>)
 80071f6:	f7fa f9c5 	bl	8001584 <assert_failed>
  if (UART_INSTANCE_LOWPOWER(huart))
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4a92      	ldr	r2, [pc, #584]	@ (8007448 <UART_SetConfig+0x298>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d10e      	bne.n	8007222 <UART_SetConfig+0x72>
  {
    assert_param(IS_LPUART_STOPBITS(huart->Init.StopBits));
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	68db      	ldr	r3, [r3, #12]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d030      	beq.n	800726e <UART_SetConfig+0xbe>
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	68db      	ldr	r3, [r3, #12]
 8007210:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007214:	d02b      	beq.n	800726e <UART_SetConfig+0xbe>
 8007216:	f640 415c 	movw	r1, #3164	@ 0xc5c
 800721a:	488a      	ldr	r0, [pc, #552]	@ (8007444 <UART_SetConfig+0x294>)
 800721c:	f7fa f9b2 	bl	8001584 <assert_failed>
 8007220:	e025      	b.n	800726e <UART_SetConfig+0xbe>
  }
  else
  {
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	68db      	ldr	r3, [r3, #12]
 8007226:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800722a:	d012      	beq.n	8007252 <UART_SetConfig+0xa2>
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	68db      	ldr	r3, [r3, #12]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d00e      	beq.n	8007252 <UART_SetConfig+0xa2>
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	68db      	ldr	r3, [r3, #12]
 8007238:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800723c:	d009      	beq.n	8007252 <UART_SetConfig+0xa2>
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	68db      	ldr	r3, [r3, #12]
 8007242:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007246:	d004      	beq.n	8007252 <UART_SetConfig+0xa2>
 8007248:	f44f 6146 	mov.w	r1, #3168	@ 0xc60
 800724c:	487d      	ldr	r0, [pc, #500]	@ (8007444 <UART_SetConfig+0x294>)
 800724e:	f7fa f999 	bl	8001584 <assert_failed>
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	6a1b      	ldr	r3, [r3, #32]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d009      	beq.n	800726e <UART_SetConfig+0xbe>
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	6a1b      	ldr	r3, [r3, #32]
 800725e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007262:	d004      	beq.n	800726e <UART_SetConfig+0xbe>
 8007264:	f640 4161 	movw	r1, #3169	@ 0xc61
 8007268:	4876      	ldr	r0, [pc, #472]	@ (8007444 <UART_SetConfig+0x294>)
 800726a:	f7fa f98b 	bl	8001584 <assert_failed>
  }

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	691b      	ldr	r3, [r3, #16]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d00e      	beq.n	8007294 <UART_SetConfig+0xe4>
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	691b      	ldr	r3, [r3, #16]
 800727a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800727e:	d009      	beq.n	8007294 <UART_SetConfig+0xe4>
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	691b      	ldr	r3, [r3, #16]
 8007284:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007288:	d004      	beq.n	8007294 <UART_SetConfig+0xe4>
 800728a:	f640 4164 	movw	r1, #3172	@ 0xc64
 800728e:	486d      	ldr	r0, [pc, #436]	@ (8007444 <UART_SetConfig+0x294>)
 8007290:	f7fa f978 	bl	8001584 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	695b      	ldr	r3, [r3, #20]
 8007298:	f023 030c 	bic.w	r3, r3, #12
 800729c:	2b00      	cmp	r3, #0
 800729e:	d103      	bne.n	80072a8 <UART_SetConfig+0xf8>
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	695b      	ldr	r3, [r3, #20]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d104      	bne.n	80072b2 <UART_SetConfig+0x102>
 80072a8:	f640 4165 	movw	r1, #3173	@ 0xc65
 80072ac:	4865      	ldr	r0, [pc, #404]	@ (8007444 <UART_SetConfig+0x294>)
 80072ae:	f7fa f969 	bl	8001584 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	699b      	ldr	r3, [r3, #24]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d013      	beq.n	80072e2 <UART_SetConfig+0x132>
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	699b      	ldr	r3, [r3, #24]
 80072be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80072c2:	d00e      	beq.n	80072e2 <UART_SetConfig+0x132>
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	699b      	ldr	r3, [r3, #24]
 80072c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80072cc:	d009      	beq.n	80072e2 <UART_SetConfig+0x132>
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	699b      	ldr	r3, [r3, #24]
 80072d2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80072d6:	d004      	beq.n	80072e2 <UART_SetConfig+0x132>
 80072d8:	f640 4166 	movw	r1, #3174	@ 0xc66
 80072dc:	4859      	ldr	r0, [pc, #356]	@ (8007444 <UART_SetConfig+0x294>)
 80072de:	f7fa f951 	bl	8001584 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	69db      	ldr	r3, [r3, #28]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d009      	beq.n	80072fe <UART_SetConfig+0x14e>
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	69db      	ldr	r3, [r3, #28]
 80072ee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80072f2:	d004      	beq.n	80072fe <UART_SetConfig+0x14e>
 80072f4:	f640 4167 	movw	r1, #3175	@ 0xc67
 80072f8:	4852      	ldr	r0, [pc, #328]	@ (8007444 <UART_SetConfig+0x294>)
 80072fa:	f7fa f943 	bl	8001584 <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	689a      	ldr	r2, [r3, #8]
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	691b      	ldr	r3, [r3, #16]
 8007306:	431a      	orrs	r2, r3
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	695b      	ldr	r3, [r3, #20]
 800730c:	431a      	orrs	r2, r3
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	69db      	ldr	r3, [r3, #28]
 8007312:	4313      	orrs	r3, r2
 8007314:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	681a      	ldr	r2, [r3, #0]
 800731c:	4b4b      	ldr	r3, [pc, #300]	@ (800744c <UART_SetConfig+0x29c>)
 800731e:	4013      	ands	r3, r2
 8007320:	68fa      	ldr	r2, [r7, #12]
 8007322:	6812      	ldr	r2, [r2, #0]
 8007324:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007326:	430b      	orrs	r3, r1
 8007328:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	685b      	ldr	r3, [r3, #4]
 8007330:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	68da      	ldr	r2, [r3, #12]
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	430a      	orrs	r2, r1
 800733e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	699b      	ldr	r3, [r3, #24]
 8007344:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4a3f      	ldr	r2, [pc, #252]	@ (8007448 <UART_SetConfig+0x298>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d004      	beq.n	800735a <UART_SetConfig+0x1aa>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	6a1b      	ldr	r3, [r3, #32]
 8007354:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007356:	4313      	orrs	r3, r2
 8007358:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	689b      	ldr	r3, [r3, #8]
 8007360:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800736a:	430a      	orrs	r2, r1
 800736c:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4a37      	ldr	r2, [pc, #220]	@ (8007450 <UART_SetConfig+0x2a0>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d125      	bne.n	80073c4 <UART_SetConfig+0x214>
 8007378:	4b36      	ldr	r3, [pc, #216]	@ (8007454 <UART_SetConfig+0x2a4>)
 800737a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800737e:	f003 0303 	and.w	r3, r3, #3
 8007382:	2b03      	cmp	r3, #3
 8007384:	d81a      	bhi.n	80073bc <UART_SetConfig+0x20c>
 8007386:	a201      	add	r2, pc, #4	@ (adr r2, 800738c <UART_SetConfig+0x1dc>)
 8007388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800738c:	0800739d 	.word	0x0800739d
 8007390:	080073ad 	.word	0x080073ad
 8007394:	080073a5 	.word	0x080073a5
 8007398:	080073b5 	.word	0x080073b5
 800739c:	2301      	movs	r3, #1
 800739e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80073a2:	e114      	b.n	80075ce <UART_SetConfig+0x41e>
 80073a4:	2302      	movs	r3, #2
 80073a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80073aa:	e110      	b.n	80075ce <UART_SetConfig+0x41e>
 80073ac:	2304      	movs	r3, #4
 80073ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80073b2:	e10c      	b.n	80075ce <UART_SetConfig+0x41e>
 80073b4:	2308      	movs	r3, #8
 80073b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80073ba:	e108      	b.n	80075ce <UART_SetConfig+0x41e>
 80073bc:	2310      	movs	r3, #16
 80073be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80073c2:	e104      	b.n	80075ce <UART_SetConfig+0x41e>
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	4a23      	ldr	r2, [pc, #140]	@ (8007458 <UART_SetConfig+0x2a8>)
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d146      	bne.n	800745c <UART_SetConfig+0x2ac>
 80073ce:	4b21      	ldr	r3, [pc, #132]	@ (8007454 <UART_SetConfig+0x2a4>)
 80073d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073d4:	f003 030c 	and.w	r3, r3, #12
 80073d8:	2b0c      	cmp	r3, #12
 80073da:	d82d      	bhi.n	8007438 <UART_SetConfig+0x288>
 80073dc:	a201      	add	r2, pc, #4	@ (adr r2, 80073e4 <UART_SetConfig+0x234>)
 80073de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073e2:	bf00      	nop
 80073e4:	08007419 	.word	0x08007419
 80073e8:	08007439 	.word	0x08007439
 80073ec:	08007439 	.word	0x08007439
 80073f0:	08007439 	.word	0x08007439
 80073f4:	08007429 	.word	0x08007429
 80073f8:	08007439 	.word	0x08007439
 80073fc:	08007439 	.word	0x08007439
 8007400:	08007439 	.word	0x08007439
 8007404:	08007421 	.word	0x08007421
 8007408:	08007439 	.word	0x08007439
 800740c:	08007439 	.word	0x08007439
 8007410:	08007439 	.word	0x08007439
 8007414:	08007431 	.word	0x08007431
 8007418:	2300      	movs	r3, #0
 800741a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800741e:	e0d6      	b.n	80075ce <UART_SetConfig+0x41e>
 8007420:	2302      	movs	r3, #2
 8007422:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007426:	e0d2      	b.n	80075ce <UART_SetConfig+0x41e>
 8007428:	2304      	movs	r3, #4
 800742a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800742e:	e0ce      	b.n	80075ce <UART_SetConfig+0x41e>
 8007430:	2308      	movs	r3, #8
 8007432:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007436:	e0ca      	b.n	80075ce <UART_SetConfig+0x41e>
 8007438:	2310      	movs	r3, #16
 800743a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800743e:	e0c6      	b.n	80075ce <UART_SetConfig+0x41e>
 8007440:	00989680 	.word	0x00989680
 8007444:	080092d0 	.word	0x080092d0
 8007448:	40008000 	.word	0x40008000
 800744c:	efff69f3 	.word	0xefff69f3
 8007450:	40013800 	.word	0x40013800
 8007454:	40021000 	.word	0x40021000
 8007458:	40004400 	.word	0x40004400
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	4aae      	ldr	r2, [pc, #696]	@ (800771c <UART_SetConfig+0x56c>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d125      	bne.n	80074b2 <UART_SetConfig+0x302>
 8007466:	4bae      	ldr	r3, [pc, #696]	@ (8007720 <UART_SetConfig+0x570>)
 8007468:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800746c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007470:	2b30      	cmp	r3, #48	@ 0x30
 8007472:	d016      	beq.n	80074a2 <UART_SetConfig+0x2f2>
 8007474:	2b30      	cmp	r3, #48	@ 0x30
 8007476:	d818      	bhi.n	80074aa <UART_SetConfig+0x2fa>
 8007478:	2b20      	cmp	r3, #32
 800747a:	d00a      	beq.n	8007492 <UART_SetConfig+0x2e2>
 800747c:	2b20      	cmp	r3, #32
 800747e:	d814      	bhi.n	80074aa <UART_SetConfig+0x2fa>
 8007480:	2b00      	cmp	r3, #0
 8007482:	d002      	beq.n	800748a <UART_SetConfig+0x2da>
 8007484:	2b10      	cmp	r3, #16
 8007486:	d008      	beq.n	800749a <UART_SetConfig+0x2ea>
 8007488:	e00f      	b.n	80074aa <UART_SetConfig+0x2fa>
 800748a:	2300      	movs	r3, #0
 800748c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007490:	e09d      	b.n	80075ce <UART_SetConfig+0x41e>
 8007492:	2302      	movs	r3, #2
 8007494:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007498:	e099      	b.n	80075ce <UART_SetConfig+0x41e>
 800749a:	2304      	movs	r3, #4
 800749c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80074a0:	e095      	b.n	80075ce <UART_SetConfig+0x41e>
 80074a2:	2308      	movs	r3, #8
 80074a4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80074a8:	e091      	b.n	80075ce <UART_SetConfig+0x41e>
 80074aa:	2310      	movs	r3, #16
 80074ac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80074b0:	e08d      	b.n	80075ce <UART_SetConfig+0x41e>
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	4a9b      	ldr	r2, [pc, #620]	@ (8007724 <UART_SetConfig+0x574>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d125      	bne.n	8007508 <UART_SetConfig+0x358>
 80074bc:	4b98      	ldr	r3, [pc, #608]	@ (8007720 <UART_SetConfig+0x570>)
 80074be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074c2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80074c6:	2bc0      	cmp	r3, #192	@ 0xc0
 80074c8:	d016      	beq.n	80074f8 <UART_SetConfig+0x348>
 80074ca:	2bc0      	cmp	r3, #192	@ 0xc0
 80074cc:	d818      	bhi.n	8007500 <UART_SetConfig+0x350>
 80074ce:	2b80      	cmp	r3, #128	@ 0x80
 80074d0:	d00a      	beq.n	80074e8 <UART_SetConfig+0x338>
 80074d2:	2b80      	cmp	r3, #128	@ 0x80
 80074d4:	d814      	bhi.n	8007500 <UART_SetConfig+0x350>
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d002      	beq.n	80074e0 <UART_SetConfig+0x330>
 80074da:	2b40      	cmp	r3, #64	@ 0x40
 80074dc:	d008      	beq.n	80074f0 <UART_SetConfig+0x340>
 80074de:	e00f      	b.n	8007500 <UART_SetConfig+0x350>
 80074e0:	2300      	movs	r3, #0
 80074e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80074e6:	e072      	b.n	80075ce <UART_SetConfig+0x41e>
 80074e8:	2302      	movs	r3, #2
 80074ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80074ee:	e06e      	b.n	80075ce <UART_SetConfig+0x41e>
 80074f0:	2304      	movs	r3, #4
 80074f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80074f6:	e06a      	b.n	80075ce <UART_SetConfig+0x41e>
 80074f8:	2308      	movs	r3, #8
 80074fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80074fe:	e066      	b.n	80075ce <UART_SetConfig+0x41e>
 8007500:	2310      	movs	r3, #16
 8007502:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007506:	e062      	b.n	80075ce <UART_SetConfig+0x41e>
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	4a86      	ldr	r2, [pc, #536]	@ (8007728 <UART_SetConfig+0x578>)
 800750e:	4293      	cmp	r3, r2
 8007510:	d12a      	bne.n	8007568 <UART_SetConfig+0x3b8>
 8007512:	4b83      	ldr	r3, [pc, #524]	@ (8007720 <UART_SetConfig+0x570>)
 8007514:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007518:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800751c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007520:	d01a      	beq.n	8007558 <UART_SetConfig+0x3a8>
 8007522:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007526:	d81b      	bhi.n	8007560 <UART_SetConfig+0x3b0>
 8007528:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800752c:	d00c      	beq.n	8007548 <UART_SetConfig+0x398>
 800752e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007532:	d815      	bhi.n	8007560 <UART_SetConfig+0x3b0>
 8007534:	2b00      	cmp	r3, #0
 8007536:	d003      	beq.n	8007540 <UART_SetConfig+0x390>
 8007538:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800753c:	d008      	beq.n	8007550 <UART_SetConfig+0x3a0>
 800753e:	e00f      	b.n	8007560 <UART_SetConfig+0x3b0>
 8007540:	2300      	movs	r3, #0
 8007542:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007546:	e042      	b.n	80075ce <UART_SetConfig+0x41e>
 8007548:	2302      	movs	r3, #2
 800754a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800754e:	e03e      	b.n	80075ce <UART_SetConfig+0x41e>
 8007550:	2304      	movs	r3, #4
 8007552:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007556:	e03a      	b.n	80075ce <UART_SetConfig+0x41e>
 8007558:	2308      	movs	r3, #8
 800755a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800755e:	e036      	b.n	80075ce <UART_SetConfig+0x41e>
 8007560:	2310      	movs	r3, #16
 8007562:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007566:	e032      	b.n	80075ce <UART_SetConfig+0x41e>
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	4a6f      	ldr	r2, [pc, #444]	@ (800772c <UART_SetConfig+0x57c>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d12a      	bne.n	80075c8 <UART_SetConfig+0x418>
 8007572:	4b6b      	ldr	r3, [pc, #428]	@ (8007720 <UART_SetConfig+0x570>)
 8007574:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007578:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800757c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007580:	d01a      	beq.n	80075b8 <UART_SetConfig+0x408>
 8007582:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007586:	d81b      	bhi.n	80075c0 <UART_SetConfig+0x410>
 8007588:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800758c:	d00c      	beq.n	80075a8 <UART_SetConfig+0x3f8>
 800758e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007592:	d815      	bhi.n	80075c0 <UART_SetConfig+0x410>
 8007594:	2b00      	cmp	r3, #0
 8007596:	d003      	beq.n	80075a0 <UART_SetConfig+0x3f0>
 8007598:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800759c:	d008      	beq.n	80075b0 <UART_SetConfig+0x400>
 800759e:	e00f      	b.n	80075c0 <UART_SetConfig+0x410>
 80075a0:	2300      	movs	r3, #0
 80075a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80075a6:	e012      	b.n	80075ce <UART_SetConfig+0x41e>
 80075a8:	2302      	movs	r3, #2
 80075aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80075ae:	e00e      	b.n	80075ce <UART_SetConfig+0x41e>
 80075b0:	2304      	movs	r3, #4
 80075b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80075b6:	e00a      	b.n	80075ce <UART_SetConfig+0x41e>
 80075b8:	2308      	movs	r3, #8
 80075ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80075be:	e006      	b.n	80075ce <UART_SetConfig+0x41e>
 80075c0:	2310      	movs	r3, #16
 80075c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80075c6:	e002      	b.n	80075ce <UART_SetConfig+0x41e>
 80075c8:	2310      	movs	r3, #16
 80075ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	4a56      	ldr	r2, [pc, #344]	@ (800772c <UART_SetConfig+0x57c>)
 80075d4:	4293      	cmp	r3, r2
 80075d6:	d17a      	bne.n	80076ce <UART_SetConfig+0x51e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80075d8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80075dc:	2b08      	cmp	r3, #8
 80075de:	d824      	bhi.n	800762a <UART_SetConfig+0x47a>
 80075e0:	a201      	add	r2, pc, #4	@ (adr r2, 80075e8 <UART_SetConfig+0x438>)
 80075e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075e6:	bf00      	nop
 80075e8:	0800760d 	.word	0x0800760d
 80075ec:	0800762b 	.word	0x0800762b
 80075f0:	08007615 	.word	0x08007615
 80075f4:	0800762b 	.word	0x0800762b
 80075f8:	0800761b 	.word	0x0800761b
 80075fc:	0800762b 	.word	0x0800762b
 8007600:	0800762b 	.word	0x0800762b
 8007604:	0800762b 	.word	0x0800762b
 8007608:	08007623 	.word	0x08007623
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800760c:	f7fc fc64 	bl	8003ed8 <HAL_RCC_GetPCLK1Freq>
 8007610:	61f8      	str	r0, [r7, #28]
        break;
 8007612:	e010      	b.n	8007636 <UART_SetConfig+0x486>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007614:	4b46      	ldr	r3, [pc, #280]	@ (8007730 <UART_SetConfig+0x580>)
 8007616:	61fb      	str	r3, [r7, #28]
        break;
 8007618:	e00d      	b.n	8007636 <UART_SetConfig+0x486>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800761a:	f7fc fbc5 	bl	8003da8 <HAL_RCC_GetSysClockFreq>
 800761e:	61f8      	str	r0, [r7, #28]
        break;
 8007620:	e009      	b.n	8007636 <UART_SetConfig+0x486>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007622:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007626:	61fb      	str	r3, [r7, #28]
        break;
 8007628:	e005      	b.n	8007636 <UART_SetConfig+0x486>
      default:
        pclk = 0U;
 800762a:	2300      	movs	r3, #0
 800762c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800762e:	2301      	movs	r3, #1
 8007630:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007634:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007636:	69fb      	ldr	r3, [r7, #28]
 8007638:	2b00      	cmp	r3, #0
 800763a:	f000 8107 	beq.w	800784c <UART_SetConfig+0x69c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	685a      	ldr	r2, [r3, #4]
 8007642:	4613      	mov	r3, r2
 8007644:	005b      	lsls	r3, r3, #1
 8007646:	4413      	add	r3, r2
 8007648:	69fa      	ldr	r2, [r7, #28]
 800764a:	429a      	cmp	r2, r3
 800764c:	d305      	bcc.n	800765a <UART_SetConfig+0x4aa>
          (pclk > (4096U * huart->Init.BaudRate)))
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	685b      	ldr	r3, [r3, #4]
 8007652:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007654:	69fa      	ldr	r2, [r7, #28]
 8007656:	429a      	cmp	r2, r3
 8007658:	d903      	bls.n	8007662 <UART_SetConfig+0x4b2>
      {
        ret = HAL_ERROR;
 800765a:	2301      	movs	r3, #1
 800765c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007660:	e0f4      	b.n	800784c <UART_SetConfig+0x69c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007662:	69fb      	ldr	r3, [r7, #28]
 8007664:	2200      	movs	r2, #0
 8007666:	461c      	mov	r4, r3
 8007668:	4615      	mov	r5, r2
 800766a:	f04f 0200 	mov.w	r2, #0
 800766e:	f04f 0300 	mov.w	r3, #0
 8007672:	022b      	lsls	r3, r5, #8
 8007674:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007678:	0222      	lsls	r2, r4, #8
 800767a:	68f9      	ldr	r1, [r7, #12]
 800767c:	6849      	ldr	r1, [r1, #4]
 800767e:	0849      	lsrs	r1, r1, #1
 8007680:	2000      	movs	r0, #0
 8007682:	4688      	mov	r8, r1
 8007684:	4681      	mov	r9, r0
 8007686:	eb12 0a08 	adds.w	sl, r2, r8
 800768a:	eb43 0b09 	adc.w	fp, r3, r9
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	685b      	ldr	r3, [r3, #4]
 8007692:	2200      	movs	r2, #0
 8007694:	603b      	str	r3, [r7, #0]
 8007696:	607a      	str	r2, [r7, #4]
 8007698:	e9d7 2300 	ldrd	r2, r3, [r7]
 800769c:	4650      	mov	r0, sl
 800769e:	4659      	mov	r1, fp
 80076a0:	f7f8 fdee 	bl	8000280 <__aeabi_uldivmod>
 80076a4:	4602      	mov	r2, r0
 80076a6:	460b      	mov	r3, r1
 80076a8:	4613      	mov	r3, r2
 80076aa:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80076ac:	69bb      	ldr	r3, [r7, #24]
 80076ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80076b2:	d308      	bcc.n	80076c6 <UART_SetConfig+0x516>
 80076b4:	69bb      	ldr	r3, [r7, #24]
 80076b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80076ba:	d204      	bcs.n	80076c6 <UART_SetConfig+0x516>
        {
          huart->Instance->BRR = usartdiv;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	69ba      	ldr	r2, [r7, #24]
 80076c2:	60da      	str	r2, [r3, #12]
 80076c4:	e0c2      	b.n	800784c <UART_SetConfig+0x69c>
        }
        else
        {
          ret = HAL_ERROR;
 80076c6:	2301      	movs	r3, #1
 80076c8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80076cc:	e0be      	b.n	800784c <UART_SetConfig+0x69c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	69db      	ldr	r3, [r3, #28]
 80076d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80076d6:	d16a      	bne.n	80077ae <UART_SetConfig+0x5fe>
  {
    switch (clocksource)
 80076d8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80076dc:	2b08      	cmp	r3, #8
 80076de:	d834      	bhi.n	800774a <UART_SetConfig+0x59a>
 80076e0:	a201      	add	r2, pc, #4	@ (adr r2, 80076e8 <UART_SetConfig+0x538>)
 80076e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076e6:	bf00      	nop
 80076e8:	0800770d 	.word	0x0800770d
 80076ec:	08007715 	.word	0x08007715
 80076f0:	08007735 	.word	0x08007735
 80076f4:	0800774b 	.word	0x0800774b
 80076f8:	0800773b 	.word	0x0800773b
 80076fc:	0800774b 	.word	0x0800774b
 8007700:	0800774b 	.word	0x0800774b
 8007704:	0800774b 	.word	0x0800774b
 8007708:	08007743 	.word	0x08007743
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800770c:	f7fc fbe4 	bl	8003ed8 <HAL_RCC_GetPCLK1Freq>
 8007710:	61f8      	str	r0, [r7, #28]
        break;
 8007712:	e020      	b.n	8007756 <UART_SetConfig+0x5a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007714:	f7fc fbf6 	bl	8003f04 <HAL_RCC_GetPCLK2Freq>
 8007718:	61f8      	str	r0, [r7, #28]
        break;
 800771a:	e01c      	b.n	8007756 <UART_SetConfig+0x5a6>
 800771c:	40004800 	.word	0x40004800
 8007720:	40021000 	.word	0x40021000
 8007724:	40004c00 	.word	0x40004c00
 8007728:	40005000 	.word	0x40005000
 800772c:	40008000 	.word	0x40008000
 8007730:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007734:	4b4c      	ldr	r3, [pc, #304]	@ (8007868 <UART_SetConfig+0x6b8>)
 8007736:	61fb      	str	r3, [r7, #28]
        break;
 8007738:	e00d      	b.n	8007756 <UART_SetConfig+0x5a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800773a:	f7fc fb35 	bl	8003da8 <HAL_RCC_GetSysClockFreq>
 800773e:	61f8      	str	r0, [r7, #28]
        break;
 8007740:	e009      	b.n	8007756 <UART_SetConfig+0x5a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007742:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007746:	61fb      	str	r3, [r7, #28]
        break;
 8007748:	e005      	b.n	8007756 <UART_SetConfig+0x5a6>
      default:
        pclk = 0U;
 800774a:	2300      	movs	r3, #0
 800774c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800774e:	2301      	movs	r3, #1
 8007750:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007754:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007756:	69fb      	ldr	r3, [r7, #28]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d077      	beq.n	800784c <UART_SetConfig+0x69c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800775c:	69fb      	ldr	r3, [r7, #28]
 800775e:	005a      	lsls	r2, r3, #1
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	685b      	ldr	r3, [r3, #4]
 8007764:	085b      	lsrs	r3, r3, #1
 8007766:	441a      	add	r2, r3
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	685b      	ldr	r3, [r3, #4]
 800776c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007770:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007772:	69bb      	ldr	r3, [r7, #24]
 8007774:	2b0f      	cmp	r3, #15
 8007776:	d916      	bls.n	80077a6 <UART_SetConfig+0x5f6>
 8007778:	69bb      	ldr	r3, [r7, #24]
 800777a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800777e:	d212      	bcs.n	80077a6 <UART_SetConfig+0x5f6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007780:	69bb      	ldr	r3, [r7, #24]
 8007782:	b29b      	uxth	r3, r3
 8007784:	f023 030f 	bic.w	r3, r3, #15
 8007788:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800778a:	69bb      	ldr	r3, [r7, #24]
 800778c:	085b      	lsrs	r3, r3, #1
 800778e:	b29b      	uxth	r3, r3
 8007790:	f003 0307 	and.w	r3, r3, #7
 8007794:	b29a      	uxth	r2, r3
 8007796:	8afb      	ldrh	r3, [r7, #22]
 8007798:	4313      	orrs	r3, r2
 800779a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	8afa      	ldrh	r2, [r7, #22]
 80077a2:	60da      	str	r2, [r3, #12]
 80077a4:	e052      	b.n	800784c <UART_SetConfig+0x69c>
      }
      else
      {
        ret = HAL_ERROR;
 80077a6:	2301      	movs	r3, #1
 80077a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80077ac:	e04e      	b.n	800784c <UART_SetConfig+0x69c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80077ae:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80077b2:	2b08      	cmp	r3, #8
 80077b4:	d827      	bhi.n	8007806 <UART_SetConfig+0x656>
 80077b6:	a201      	add	r2, pc, #4	@ (adr r2, 80077bc <UART_SetConfig+0x60c>)
 80077b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077bc:	080077e1 	.word	0x080077e1
 80077c0:	080077e9 	.word	0x080077e9
 80077c4:	080077f1 	.word	0x080077f1
 80077c8:	08007807 	.word	0x08007807
 80077cc:	080077f7 	.word	0x080077f7
 80077d0:	08007807 	.word	0x08007807
 80077d4:	08007807 	.word	0x08007807
 80077d8:	08007807 	.word	0x08007807
 80077dc:	080077ff 	.word	0x080077ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80077e0:	f7fc fb7a 	bl	8003ed8 <HAL_RCC_GetPCLK1Freq>
 80077e4:	61f8      	str	r0, [r7, #28]
        break;
 80077e6:	e014      	b.n	8007812 <UART_SetConfig+0x662>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80077e8:	f7fc fb8c 	bl	8003f04 <HAL_RCC_GetPCLK2Freq>
 80077ec:	61f8      	str	r0, [r7, #28]
        break;
 80077ee:	e010      	b.n	8007812 <UART_SetConfig+0x662>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80077f0:	4b1d      	ldr	r3, [pc, #116]	@ (8007868 <UART_SetConfig+0x6b8>)
 80077f2:	61fb      	str	r3, [r7, #28]
        break;
 80077f4:	e00d      	b.n	8007812 <UART_SetConfig+0x662>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80077f6:	f7fc fad7 	bl	8003da8 <HAL_RCC_GetSysClockFreq>
 80077fa:	61f8      	str	r0, [r7, #28]
        break;
 80077fc:	e009      	b.n	8007812 <UART_SetConfig+0x662>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80077fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007802:	61fb      	str	r3, [r7, #28]
        break;
 8007804:	e005      	b.n	8007812 <UART_SetConfig+0x662>
      default:
        pclk = 0U;
 8007806:	2300      	movs	r3, #0
 8007808:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800780a:	2301      	movs	r3, #1
 800780c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007810:	bf00      	nop
    }

    if (pclk != 0U)
 8007812:	69fb      	ldr	r3, [r7, #28]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d019      	beq.n	800784c <UART_SetConfig+0x69c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	685b      	ldr	r3, [r3, #4]
 800781c:	085a      	lsrs	r2, r3, #1
 800781e:	69fb      	ldr	r3, [r7, #28]
 8007820:	441a      	add	r2, r3
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	685b      	ldr	r3, [r3, #4]
 8007826:	fbb2 f3f3 	udiv	r3, r2, r3
 800782a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800782c:	69bb      	ldr	r3, [r7, #24]
 800782e:	2b0f      	cmp	r3, #15
 8007830:	d909      	bls.n	8007846 <UART_SetConfig+0x696>
 8007832:	69bb      	ldr	r3, [r7, #24]
 8007834:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007838:	d205      	bcs.n	8007846 <UART_SetConfig+0x696>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800783a:	69bb      	ldr	r3, [r7, #24]
 800783c:	b29a      	uxth	r2, r3
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	60da      	str	r2, [r3, #12]
 8007844:	e002      	b.n	800784c <UART_SetConfig+0x69c>
      }
      else
      {
        ret = HAL_ERROR;
 8007846:	2301      	movs	r3, #1
 8007848:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	2200      	movs	r2, #0
 8007850:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	2200      	movs	r2, #0
 8007856:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007858:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800785c:	4618      	mov	r0, r3
 800785e:	3728      	adds	r7, #40	@ 0x28
 8007860:	46bd      	mov	sp, r7
 8007862:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007866:	bf00      	nop
 8007868:	00f42400 	.word	0x00f42400

0800786c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b082      	sub	sp, #8
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007878:	2bff      	cmp	r3, #255	@ 0xff
 800787a:	d904      	bls.n	8007886 <UART_AdvFeatureConfig+0x1a>
 800787c:	f640 514d 	movw	r1, #3405	@ 0xd4d
 8007880:	4891      	ldr	r0, [pc, #580]	@ (8007ac8 <UART_AdvFeatureConfig+0x25c>)
 8007882:	f7f9 fe7f 	bl	8001584 <assert_failed>

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800788a:	f003 0308 	and.w	r3, r3, #8
 800788e:	2b00      	cmp	r3, #0
 8007890:	d018      	beq.n	80078c4 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007896:	2b00      	cmp	r3, #0
 8007898:	d009      	beq.n	80078ae <UART_AdvFeatureConfig+0x42>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800789e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80078a2:	d004      	beq.n	80078ae <UART_AdvFeatureConfig+0x42>
 80078a4:	f640 5152 	movw	r1, #3410	@ 0xd52
 80078a8:	4887      	ldr	r0, [pc, #540]	@ (8007ac8 <UART_AdvFeatureConfig+0x25c>)
 80078aa:	f7f9 fe6b 	bl	8001584 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	685b      	ldr	r3, [r3, #4]
 80078b4:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	430a      	orrs	r2, r1
 80078c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078c8:	f003 0301 	and.w	r3, r3, #1
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d018      	beq.n	8007902 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d009      	beq.n	80078ec <UART_AdvFeatureConfig+0x80>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078dc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80078e0:	d004      	beq.n	80078ec <UART_AdvFeatureConfig+0x80>
 80078e2:	f640 5159 	movw	r1, #3417	@ 0xd59
 80078e6:	4878      	ldr	r0, [pc, #480]	@ (8007ac8 <UART_AdvFeatureConfig+0x25c>)
 80078e8:	f7f9 fe4c 	bl	8001584 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	685b      	ldr	r3, [r3, #4]
 80078f2:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	430a      	orrs	r2, r1
 8007900:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007906:	f003 0302 	and.w	r3, r3, #2
 800790a:	2b00      	cmp	r3, #0
 800790c:	d018      	beq.n	8007940 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007912:	2b00      	cmp	r3, #0
 8007914:	d009      	beq.n	800792a <UART_AdvFeatureConfig+0xbe>
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800791a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800791e:	d004      	beq.n	800792a <UART_AdvFeatureConfig+0xbe>
 8007920:	f44f 6156 	mov.w	r1, #3424	@ 0xd60
 8007924:	4868      	ldr	r0, [pc, #416]	@ (8007ac8 <UART_AdvFeatureConfig+0x25c>)
 8007926:	f7f9 fe2d 	bl	8001584 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	685b      	ldr	r3, [r3, #4]
 8007930:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	430a      	orrs	r2, r1
 800793e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007944:	f003 0304 	and.w	r3, r3, #4
 8007948:	2b00      	cmp	r3, #0
 800794a:	d018      	beq.n	800797e <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007950:	2b00      	cmp	r3, #0
 8007952:	d009      	beq.n	8007968 <UART_AdvFeatureConfig+0xfc>
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007958:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800795c:	d004      	beq.n	8007968 <UART_AdvFeatureConfig+0xfc>
 800795e:	f640 5167 	movw	r1, #3431	@ 0xd67
 8007962:	4859      	ldr	r0, [pc, #356]	@ (8007ac8 <UART_AdvFeatureConfig+0x25c>)
 8007964:	f7f9 fe0e 	bl	8001584 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	685b      	ldr	r3, [r3, #4]
 800796e:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	430a      	orrs	r2, r1
 800797c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007982:	f003 0310 	and.w	r3, r3, #16
 8007986:	2b00      	cmp	r3, #0
 8007988:	d018      	beq.n	80079bc <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800798e:	2b00      	cmp	r3, #0
 8007990:	d009      	beq.n	80079a6 <UART_AdvFeatureConfig+0x13a>
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007996:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800799a:	d004      	beq.n	80079a6 <UART_AdvFeatureConfig+0x13a>
 800799c:	f640 516e 	movw	r1, #3438	@ 0xd6e
 80079a0:	4849      	ldr	r0, [pc, #292]	@ (8007ac8 <UART_AdvFeatureConfig+0x25c>)
 80079a2:	f7f9 fdef 	bl	8001584 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	689b      	ldr	r3, [r3, #8]
 80079ac:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	430a      	orrs	r2, r1
 80079ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079c0:	f003 0320 	and.w	r3, r3, #32
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d018      	beq.n	80079fa <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d009      	beq.n	80079e4 <UART_AdvFeatureConfig+0x178>
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80079d8:	d004      	beq.n	80079e4 <UART_AdvFeatureConfig+0x178>
 80079da:	f640 5175 	movw	r1, #3445	@ 0xd75
 80079de:	483a      	ldr	r0, [pc, #232]	@ (8007ac8 <UART_AdvFeatureConfig+0x25c>)
 80079e0:	f7f9 fdd0 	bl	8001584 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	689b      	ldr	r3, [r3, #8]
 80079ea:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	430a      	orrs	r2, r1
 80079f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d06c      	beq.n	8007ae0 <UART_AdvFeatureConfig+0x274>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	4a30      	ldr	r2, [pc, #192]	@ (8007acc <UART_AdvFeatureConfig+0x260>)
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	d018      	beq.n	8007a42 <UART_AdvFeatureConfig+0x1d6>
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	4a2e      	ldr	r2, [pc, #184]	@ (8007ad0 <UART_AdvFeatureConfig+0x264>)
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d013      	beq.n	8007a42 <UART_AdvFeatureConfig+0x1d6>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	4a2d      	ldr	r2, [pc, #180]	@ (8007ad4 <UART_AdvFeatureConfig+0x268>)
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d00e      	beq.n	8007a42 <UART_AdvFeatureConfig+0x1d6>
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	4a2b      	ldr	r2, [pc, #172]	@ (8007ad8 <UART_AdvFeatureConfig+0x26c>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d009      	beq.n	8007a42 <UART_AdvFeatureConfig+0x1d6>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	4a2a      	ldr	r2, [pc, #168]	@ (8007adc <UART_AdvFeatureConfig+0x270>)
 8007a34:	4293      	cmp	r3, r2
 8007a36:	d004      	beq.n	8007a42 <UART_AdvFeatureConfig+0x1d6>
 8007a38:	f640 517c 	movw	r1, #3452	@ 0xd7c
 8007a3c:	4822      	ldr	r0, [pc, #136]	@ (8007ac8 <UART_AdvFeatureConfig+0x25c>)
 8007a3e:	f7f9 fda1 	bl	8001584 <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d009      	beq.n	8007a5e <UART_AdvFeatureConfig+0x1f2>
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a4e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007a52:	d004      	beq.n	8007a5e <UART_AdvFeatureConfig+0x1f2>
 8007a54:	f640 517d 	movw	r1, #3453	@ 0xd7d
 8007a58:	481b      	ldr	r0, [pc, #108]	@ (8007ac8 <UART_AdvFeatureConfig+0x25c>)
 8007a5a:	f7f9 fd93 	bl	8001584 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	685b      	ldr	r3, [r3, #4]
 8007a64:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	430a      	orrs	r2, r1
 8007a72:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a78:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007a7c:	d130      	bne.n	8007ae0 <UART_AdvFeatureConfig+0x274>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d013      	beq.n	8007aae <UART_AdvFeatureConfig+0x242>
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a8a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007a8e:	d00e      	beq.n	8007aae <UART_AdvFeatureConfig+0x242>
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a94:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007a98:	d009      	beq.n	8007aae <UART_AdvFeatureConfig+0x242>
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a9e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007aa2:	d004      	beq.n	8007aae <UART_AdvFeatureConfig+0x242>
 8007aa4:	f640 5182 	movw	r1, #3458	@ 0xd82
 8007aa8:	4807      	ldr	r0, [pc, #28]	@ (8007ac8 <UART_AdvFeatureConfig+0x25c>)
 8007aaa:	f7f9 fd6b 	bl	8001584 <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	685b      	ldr	r3, [r3, #4]
 8007ab4:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	430a      	orrs	r2, r1
 8007ac2:	605a      	str	r2, [r3, #4]
 8007ac4:	e00c      	b.n	8007ae0 <UART_AdvFeatureConfig+0x274>
 8007ac6:	bf00      	nop
 8007ac8:	080092d0 	.word	0x080092d0
 8007acc:	40013800 	.word	0x40013800
 8007ad0:	40004400 	.word	0x40004400
 8007ad4:	40004800 	.word	0x40004800
 8007ad8:	40004c00 	.word	0x40004c00
 8007adc:	40005000 	.word	0x40005000
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ae4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d018      	beq.n	8007b1e <UART_AdvFeatureConfig+0x2b2>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d009      	beq.n	8007b08 <UART_AdvFeatureConfig+0x29c>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007af8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007afc:	d004      	beq.n	8007b08 <UART_AdvFeatureConfig+0x29c>
 8007afe:	f640 518a 	movw	r1, #3466	@ 0xd8a
 8007b02:	4809      	ldr	r0, [pc, #36]	@ (8007b28 <UART_AdvFeatureConfig+0x2bc>)
 8007b04:	f7f9 fd3e 	bl	8001584 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	685b      	ldr	r3, [r3, #4]
 8007b0e:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	430a      	orrs	r2, r1
 8007b1c:	605a      	str	r2, [r3, #4]
  }
}
 8007b1e:	bf00      	nop
 8007b20:	3708      	adds	r7, #8
 8007b22:	46bd      	mov	sp, r7
 8007b24:	bd80      	pop	{r7, pc}
 8007b26:	bf00      	nop
 8007b28:	080092d0 	.word	0x080092d0

08007b2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b098      	sub	sp, #96	@ 0x60
 8007b30:	af02      	add	r7, sp, #8
 8007b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2200      	movs	r2, #0
 8007b38:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007b3c:	f7fa fad8 	bl	80020f0 <HAL_GetTick>
 8007b40:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f003 0308 	and.w	r3, r3, #8
 8007b4c:	2b08      	cmp	r3, #8
 8007b4e:	d12e      	bne.n	8007bae <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b50:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007b54:	9300      	str	r3, [sp, #0]
 8007b56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007b58:	2200      	movs	r2, #0
 8007b5a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	f000 f88c 	bl	8007c7c <UART_WaitOnFlagUntilTimeout>
 8007b64:	4603      	mov	r3, r0
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d021      	beq.n	8007bae <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b72:	e853 3f00 	ldrex	r3, [r3]
 8007b76:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007b78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b7a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007b7e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	461a      	mov	r2, r3
 8007b86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007b88:	647b      	str	r3, [r7, #68]	@ 0x44
 8007b8a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b8c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007b8e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007b90:	e841 2300 	strex	r3, r2, [r1]
 8007b94:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007b96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d1e6      	bne.n	8007b6a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2220      	movs	r2, #32
 8007ba0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007baa:	2303      	movs	r3, #3
 8007bac:	e062      	b.n	8007c74 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f003 0304 	and.w	r3, r3, #4
 8007bb8:	2b04      	cmp	r3, #4
 8007bba:	d149      	bne.n	8007c50 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007bbc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007bc0:	9300      	str	r3, [sp, #0]
 8007bc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	f000 f856 	bl	8007c7c <UART_WaitOnFlagUntilTimeout>
 8007bd0:	4603      	mov	r3, r0
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d03c      	beq.n	8007c50 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bde:	e853 3f00 	ldrex	r3, [r3]
 8007be2:	623b      	str	r3, [r7, #32]
   return(result);
 8007be4:	6a3b      	ldr	r3, [r7, #32]
 8007be6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007bea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	461a      	mov	r2, r3
 8007bf2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007bf4:	633b      	str	r3, [r7, #48]	@ 0x30
 8007bf6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bf8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007bfa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007bfc:	e841 2300 	strex	r3, r2, [r1]
 8007c00:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007c02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d1e6      	bne.n	8007bd6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	3308      	adds	r3, #8
 8007c0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c10:	693b      	ldr	r3, [r7, #16]
 8007c12:	e853 3f00 	ldrex	r3, [r3]
 8007c16:	60fb      	str	r3, [r7, #12]
   return(result);
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	f023 0301 	bic.w	r3, r3, #1
 8007c1e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	3308      	adds	r3, #8
 8007c26:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007c28:	61fa      	str	r2, [r7, #28]
 8007c2a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c2c:	69b9      	ldr	r1, [r7, #24]
 8007c2e:	69fa      	ldr	r2, [r7, #28]
 8007c30:	e841 2300 	strex	r3, r2, [r1]
 8007c34:	617b      	str	r3, [r7, #20]
   return(result);
 8007c36:	697b      	ldr	r3, [r7, #20]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d1e5      	bne.n	8007c08 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2220      	movs	r2, #32
 8007c40:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2200      	movs	r2, #0
 8007c48:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c4c:	2303      	movs	r3, #3
 8007c4e:	e011      	b.n	8007c74 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2220      	movs	r2, #32
 8007c54:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2220      	movs	r2, #32
 8007c5a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2200      	movs	r2, #0
 8007c62:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2200      	movs	r2, #0
 8007c68:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8007c72:	2300      	movs	r3, #0
}
 8007c74:	4618      	mov	r0, r3
 8007c76:	3758      	adds	r7, #88	@ 0x58
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bd80      	pop	{r7, pc}

08007c7c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b084      	sub	sp, #16
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	60f8      	str	r0, [r7, #12]
 8007c84:	60b9      	str	r1, [r7, #8]
 8007c86:	603b      	str	r3, [r7, #0]
 8007c88:	4613      	mov	r3, r2
 8007c8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c8c:	e04f      	b.n	8007d2e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c8e:	69bb      	ldr	r3, [r7, #24]
 8007c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c94:	d04b      	beq.n	8007d2e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c96:	f7fa fa2b 	bl	80020f0 <HAL_GetTick>
 8007c9a:	4602      	mov	r2, r0
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	1ad3      	subs	r3, r2, r3
 8007ca0:	69ba      	ldr	r2, [r7, #24]
 8007ca2:	429a      	cmp	r2, r3
 8007ca4:	d302      	bcc.n	8007cac <UART_WaitOnFlagUntilTimeout+0x30>
 8007ca6:	69bb      	ldr	r3, [r7, #24]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d101      	bne.n	8007cb0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007cac:	2303      	movs	r3, #3
 8007cae:	e04e      	b.n	8007d4e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f003 0304 	and.w	r3, r3, #4
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d037      	beq.n	8007d2e <UART_WaitOnFlagUntilTimeout+0xb2>
 8007cbe:	68bb      	ldr	r3, [r7, #8]
 8007cc0:	2b80      	cmp	r3, #128	@ 0x80
 8007cc2:	d034      	beq.n	8007d2e <UART_WaitOnFlagUntilTimeout+0xb2>
 8007cc4:	68bb      	ldr	r3, [r7, #8]
 8007cc6:	2b40      	cmp	r3, #64	@ 0x40
 8007cc8:	d031      	beq.n	8007d2e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	69db      	ldr	r3, [r3, #28]
 8007cd0:	f003 0308 	and.w	r3, r3, #8
 8007cd4:	2b08      	cmp	r3, #8
 8007cd6:	d110      	bne.n	8007cfa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	2208      	movs	r2, #8
 8007cde:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007ce0:	68f8      	ldr	r0, [r7, #12]
 8007ce2:	f000 f838 	bl	8007d56 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	2208      	movs	r2, #8
 8007cea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	e029      	b.n	8007d4e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	69db      	ldr	r3, [r3, #28]
 8007d00:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007d04:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007d08:	d111      	bne.n	8007d2e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007d12:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007d14:	68f8      	ldr	r0, [r7, #12]
 8007d16:	f000 f81e 	bl	8007d56 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	2220      	movs	r2, #32
 8007d1e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	2200      	movs	r2, #0
 8007d26:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8007d2a:	2303      	movs	r3, #3
 8007d2c:	e00f      	b.n	8007d4e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	69da      	ldr	r2, [r3, #28]
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	4013      	ands	r3, r2
 8007d38:	68ba      	ldr	r2, [r7, #8]
 8007d3a:	429a      	cmp	r2, r3
 8007d3c:	bf0c      	ite	eq
 8007d3e:	2301      	moveq	r3, #1
 8007d40:	2300      	movne	r3, #0
 8007d42:	b2db      	uxtb	r3, r3
 8007d44:	461a      	mov	r2, r3
 8007d46:	79fb      	ldrb	r3, [r7, #7]
 8007d48:	429a      	cmp	r2, r3
 8007d4a:	d0a0      	beq.n	8007c8e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007d4c:	2300      	movs	r3, #0
}
 8007d4e:	4618      	mov	r0, r3
 8007d50:	3710      	adds	r7, #16
 8007d52:	46bd      	mov	sp, r7
 8007d54:	bd80      	pop	{r7, pc}

08007d56 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007d56:	b480      	push	{r7}
 8007d58:	b095      	sub	sp, #84	@ 0x54
 8007d5a:	af00      	add	r7, sp, #0
 8007d5c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d66:	e853 3f00 	ldrex	r3, [r3]
 8007d6a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007d6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d6e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007d72:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	461a      	mov	r2, r3
 8007d7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d7c:	643b      	str	r3, [r7, #64]	@ 0x40
 8007d7e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d80:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007d82:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007d84:	e841 2300 	strex	r3, r2, [r1]
 8007d88:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007d8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d1e6      	bne.n	8007d5e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	3308      	adds	r3, #8
 8007d96:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d98:	6a3b      	ldr	r3, [r7, #32]
 8007d9a:	e853 3f00 	ldrex	r3, [r3]
 8007d9e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007da0:	69fb      	ldr	r3, [r7, #28]
 8007da2:	f023 0301 	bic.w	r3, r3, #1
 8007da6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	3308      	adds	r3, #8
 8007dae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007db0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007db2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007db4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007db6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007db8:	e841 2300 	strex	r3, r2, [r1]
 8007dbc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d1e5      	bne.n	8007d90 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007dc8:	2b01      	cmp	r3, #1
 8007dca:	d118      	bne.n	8007dfe <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	e853 3f00 	ldrex	r3, [r3]
 8007dd8:	60bb      	str	r3, [r7, #8]
   return(result);
 8007dda:	68bb      	ldr	r3, [r7, #8]
 8007ddc:	f023 0310 	bic.w	r3, r3, #16
 8007de0:	647b      	str	r3, [r7, #68]	@ 0x44
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	461a      	mov	r2, r3
 8007de8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007dea:	61bb      	str	r3, [r7, #24]
 8007dec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dee:	6979      	ldr	r1, [r7, #20]
 8007df0:	69ba      	ldr	r2, [r7, #24]
 8007df2:	e841 2300 	strex	r3, r2, [r1]
 8007df6:	613b      	str	r3, [r7, #16]
   return(result);
 8007df8:	693b      	ldr	r3, [r7, #16]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d1e6      	bne.n	8007dcc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2220      	movs	r2, #32
 8007e02:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2200      	movs	r2, #0
 8007e0a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007e12:	bf00      	nop
 8007e14:	3754      	adds	r7, #84	@ 0x54
 8007e16:	46bd      	mov	sp, r7
 8007e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1c:	4770      	bx	lr

08007e1e <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007e1e:	b480      	push	{r7}
 8007e20:	b08f      	sub	sp, #60	@ 0x3c
 8007e22:	af00      	add	r7, sp, #0
 8007e24:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007e2a:	2b21      	cmp	r3, #33	@ 0x21
 8007e2c:	d14c      	bne.n	8007ec8 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007e34:	b29b      	uxth	r3, r3
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d132      	bne.n	8007ea0 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e40:	6a3b      	ldr	r3, [r7, #32]
 8007e42:	e853 3f00 	ldrex	r3, [r3]
 8007e46:	61fb      	str	r3, [r7, #28]
   return(result);
 8007e48:	69fb      	ldr	r3, [r7, #28]
 8007e4a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007e4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	461a      	mov	r2, r3
 8007e56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e58:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007e5a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e5c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007e5e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007e60:	e841 2300 	strex	r3, r2, [r1]
 8007e64:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d1e6      	bne.n	8007e3a <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	e853 3f00 	ldrex	r3, [r3]
 8007e78:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e7a:	68bb      	ldr	r3, [r7, #8]
 8007e7c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007e80:	633b      	str	r3, [r7, #48]	@ 0x30
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	461a      	mov	r2, r3
 8007e88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e8a:	61bb      	str	r3, [r7, #24]
 8007e8c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e8e:	6979      	ldr	r1, [r7, #20]
 8007e90:	69ba      	ldr	r2, [r7, #24]
 8007e92:	e841 2300 	strex	r3, r2, [r1]
 8007e96:	613b      	str	r3, [r7, #16]
   return(result);
 8007e98:	693b      	ldr	r3, [r7, #16]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d1e6      	bne.n	8007e6c <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8007e9e:	e013      	b.n	8007ec8 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ea4:	781a      	ldrb	r2, [r3, #0]
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007eb0:	1c5a      	adds	r2, r3, #1
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007ebc:	b29b      	uxth	r3, r3
 8007ebe:	3b01      	subs	r3, #1
 8007ec0:	b29a      	uxth	r2, r3
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 8007ec8:	bf00      	nop
 8007eca:	373c      	adds	r7, #60	@ 0x3c
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed2:	4770      	bx	lr

08007ed4 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b091      	sub	sp, #68	@ 0x44
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007ee0:	2b21      	cmp	r3, #33	@ 0x21
 8007ee2:	d151      	bne.n	8007f88 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007eea:	b29b      	uxth	r3, r3
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d132      	bne.n	8007f56 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ef8:	e853 3f00 	ldrex	r3, [r3]
 8007efc:	623b      	str	r3, [r7, #32]
   return(result);
 8007efe:	6a3b      	ldr	r3, [r7, #32]
 8007f00:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007f04:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	461a      	mov	r2, r3
 8007f0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f0e:	633b      	str	r3, [r7, #48]	@ 0x30
 8007f10:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f12:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007f14:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007f16:	e841 2300 	strex	r3, r2, [r1]
 8007f1a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007f1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d1e6      	bne.n	8007ef0 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f28:	693b      	ldr	r3, [r7, #16]
 8007f2a:	e853 3f00 	ldrex	r3, [r3]
 8007f2e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007f36:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	461a      	mov	r2, r3
 8007f3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f40:	61fb      	str	r3, [r7, #28]
 8007f42:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f44:	69b9      	ldr	r1, [r7, #24]
 8007f46:	69fa      	ldr	r2, [r7, #28]
 8007f48:	e841 2300 	strex	r3, r2, [r1]
 8007f4c:	617b      	str	r3, [r7, #20]
   return(result);
 8007f4e:	697b      	ldr	r3, [r7, #20]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d1e6      	bne.n	8007f22 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8007f54:	e018      	b.n	8007f88 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8007f5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f5e:	881a      	ldrh	r2, [r3, #0]
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007f68:	b292      	uxth	r2, r2
 8007f6a:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f70:	1c9a      	adds	r2, r3, #2
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007f7c:	b29b      	uxth	r3, r3
 8007f7e:	3b01      	subs	r3, #1
 8007f80:	b29a      	uxth	r2, r3
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 8007f88:	bf00      	nop
 8007f8a:	3744      	adds	r7, #68	@ 0x44
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f92:	4770      	bx	lr

08007f94 <calloc>:
 8007f94:	4b02      	ldr	r3, [pc, #8]	@ (8007fa0 <calloc+0xc>)
 8007f96:	460a      	mov	r2, r1
 8007f98:	4601      	mov	r1, r0
 8007f9a:	6818      	ldr	r0, [r3, #0]
 8007f9c:	f000 b802 	b.w	8007fa4 <_calloc_r>
 8007fa0:	2000001c 	.word	0x2000001c

08007fa4 <_calloc_r>:
 8007fa4:	b570      	push	{r4, r5, r6, lr}
 8007fa6:	fba1 5402 	umull	r5, r4, r1, r2
 8007faa:	b934      	cbnz	r4, 8007fba <_calloc_r+0x16>
 8007fac:	4629      	mov	r1, r5
 8007fae:	f000 f837 	bl	8008020 <_malloc_r>
 8007fb2:	4606      	mov	r6, r0
 8007fb4:	b928      	cbnz	r0, 8007fc2 <_calloc_r+0x1e>
 8007fb6:	4630      	mov	r0, r6
 8007fb8:	bd70      	pop	{r4, r5, r6, pc}
 8007fba:	220c      	movs	r2, #12
 8007fbc:	6002      	str	r2, [r0, #0]
 8007fbe:	2600      	movs	r6, #0
 8007fc0:	e7f9      	b.n	8007fb6 <_calloc_r+0x12>
 8007fc2:	462a      	mov	r2, r5
 8007fc4:	4621      	mov	r1, r4
 8007fc6:	f000 fae5 	bl	8008594 <memset>
 8007fca:	e7f4      	b.n	8007fb6 <_calloc_r+0x12>

08007fcc <free>:
 8007fcc:	4b02      	ldr	r3, [pc, #8]	@ (8007fd8 <free+0xc>)
 8007fce:	4601      	mov	r1, r0
 8007fd0:	6818      	ldr	r0, [r3, #0]
 8007fd2:	f000 bb79 	b.w	80086c8 <_free_r>
 8007fd6:	bf00      	nop
 8007fd8:	2000001c 	.word	0x2000001c

08007fdc <sbrk_aligned>:
 8007fdc:	b570      	push	{r4, r5, r6, lr}
 8007fde:	4e0f      	ldr	r6, [pc, #60]	@ (800801c <sbrk_aligned+0x40>)
 8007fe0:	460c      	mov	r4, r1
 8007fe2:	6831      	ldr	r1, [r6, #0]
 8007fe4:	4605      	mov	r5, r0
 8007fe6:	b911      	cbnz	r1, 8007fee <sbrk_aligned+0x12>
 8007fe8:	f000 fb10 	bl	800860c <_sbrk_r>
 8007fec:	6030      	str	r0, [r6, #0]
 8007fee:	4621      	mov	r1, r4
 8007ff0:	4628      	mov	r0, r5
 8007ff2:	f000 fb0b 	bl	800860c <_sbrk_r>
 8007ff6:	1c43      	adds	r3, r0, #1
 8007ff8:	d103      	bne.n	8008002 <sbrk_aligned+0x26>
 8007ffa:	f04f 34ff 	mov.w	r4, #4294967295
 8007ffe:	4620      	mov	r0, r4
 8008000:	bd70      	pop	{r4, r5, r6, pc}
 8008002:	1cc4      	adds	r4, r0, #3
 8008004:	f024 0403 	bic.w	r4, r4, #3
 8008008:	42a0      	cmp	r0, r4
 800800a:	d0f8      	beq.n	8007ffe <sbrk_aligned+0x22>
 800800c:	1a21      	subs	r1, r4, r0
 800800e:	4628      	mov	r0, r5
 8008010:	f000 fafc 	bl	800860c <_sbrk_r>
 8008014:	3001      	adds	r0, #1
 8008016:	d1f2      	bne.n	8007ffe <sbrk_aligned+0x22>
 8008018:	e7ef      	b.n	8007ffa <sbrk_aligned+0x1e>
 800801a:	bf00      	nop
 800801c:	20000990 	.word	0x20000990

08008020 <_malloc_r>:
 8008020:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008024:	1ccd      	adds	r5, r1, #3
 8008026:	f025 0503 	bic.w	r5, r5, #3
 800802a:	3508      	adds	r5, #8
 800802c:	2d0c      	cmp	r5, #12
 800802e:	bf38      	it	cc
 8008030:	250c      	movcc	r5, #12
 8008032:	2d00      	cmp	r5, #0
 8008034:	4606      	mov	r6, r0
 8008036:	db01      	blt.n	800803c <_malloc_r+0x1c>
 8008038:	42a9      	cmp	r1, r5
 800803a:	d904      	bls.n	8008046 <_malloc_r+0x26>
 800803c:	230c      	movs	r3, #12
 800803e:	6033      	str	r3, [r6, #0]
 8008040:	2000      	movs	r0, #0
 8008042:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008046:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800811c <_malloc_r+0xfc>
 800804a:	f000 f869 	bl	8008120 <__malloc_lock>
 800804e:	f8d8 3000 	ldr.w	r3, [r8]
 8008052:	461c      	mov	r4, r3
 8008054:	bb44      	cbnz	r4, 80080a8 <_malloc_r+0x88>
 8008056:	4629      	mov	r1, r5
 8008058:	4630      	mov	r0, r6
 800805a:	f7ff ffbf 	bl	8007fdc <sbrk_aligned>
 800805e:	1c43      	adds	r3, r0, #1
 8008060:	4604      	mov	r4, r0
 8008062:	d158      	bne.n	8008116 <_malloc_r+0xf6>
 8008064:	f8d8 4000 	ldr.w	r4, [r8]
 8008068:	4627      	mov	r7, r4
 800806a:	2f00      	cmp	r7, #0
 800806c:	d143      	bne.n	80080f6 <_malloc_r+0xd6>
 800806e:	2c00      	cmp	r4, #0
 8008070:	d04b      	beq.n	800810a <_malloc_r+0xea>
 8008072:	6823      	ldr	r3, [r4, #0]
 8008074:	4639      	mov	r1, r7
 8008076:	4630      	mov	r0, r6
 8008078:	eb04 0903 	add.w	r9, r4, r3
 800807c:	f000 fac6 	bl	800860c <_sbrk_r>
 8008080:	4581      	cmp	r9, r0
 8008082:	d142      	bne.n	800810a <_malloc_r+0xea>
 8008084:	6821      	ldr	r1, [r4, #0]
 8008086:	1a6d      	subs	r5, r5, r1
 8008088:	4629      	mov	r1, r5
 800808a:	4630      	mov	r0, r6
 800808c:	f7ff ffa6 	bl	8007fdc <sbrk_aligned>
 8008090:	3001      	adds	r0, #1
 8008092:	d03a      	beq.n	800810a <_malloc_r+0xea>
 8008094:	6823      	ldr	r3, [r4, #0]
 8008096:	442b      	add	r3, r5
 8008098:	6023      	str	r3, [r4, #0]
 800809a:	f8d8 3000 	ldr.w	r3, [r8]
 800809e:	685a      	ldr	r2, [r3, #4]
 80080a0:	bb62      	cbnz	r2, 80080fc <_malloc_r+0xdc>
 80080a2:	f8c8 7000 	str.w	r7, [r8]
 80080a6:	e00f      	b.n	80080c8 <_malloc_r+0xa8>
 80080a8:	6822      	ldr	r2, [r4, #0]
 80080aa:	1b52      	subs	r2, r2, r5
 80080ac:	d420      	bmi.n	80080f0 <_malloc_r+0xd0>
 80080ae:	2a0b      	cmp	r2, #11
 80080b0:	d917      	bls.n	80080e2 <_malloc_r+0xc2>
 80080b2:	1961      	adds	r1, r4, r5
 80080b4:	42a3      	cmp	r3, r4
 80080b6:	6025      	str	r5, [r4, #0]
 80080b8:	bf18      	it	ne
 80080ba:	6059      	strne	r1, [r3, #4]
 80080bc:	6863      	ldr	r3, [r4, #4]
 80080be:	bf08      	it	eq
 80080c0:	f8c8 1000 	streq.w	r1, [r8]
 80080c4:	5162      	str	r2, [r4, r5]
 80080c6:	604b      	str	r3, [r1, #4]
 80080c8:	4630      	mov	r0, r6
 80080ca:	f000 f82f 	bl	800812c <__malloc_unlock>
 80080ce:	f104 000b 	add.w	r0, r4, #11
 80080d2:	1d23      	adds	r3, r4, #4
 80080d4:	f020 0007 	bic.w	r0, r0, #7
 80080d8:	1ac2      	subs	r2, r0, r3
 80080da:	bf1c      	itt	ne
 80080dc:	1a1b      	subne	r3, r3, r0
 80080de:	50a3      	strne	r3, [r4, r2]
 80080e0:	e7af      	b.n	8008042 <_malloc_r+0x22>
 80080e2:	6862      	ldr	r2, [r4, #4]
 80080e4:	42a3      	cmp	r3, r4
 80080e6:	bf0c      	ite	eq
 80080e8:	f8c8 2000 	streq.w	r2, [r8]
 80080ec:	605a      	strne	r2, [r3, #4]
 80080ee:	e7eb      	b.n	80080c8 <_malloc_r+0xa8>
 80080f0:	4623      	mov	r3, r4
 80080f2:	6864      	ldr	r4, [r4, #4]
 80080f4:	e7ae      	b.n	8008054 <_malloc_r+0x34>
 80080f6:	463c      	mov	r4, r7
 80080f8:	687f      	ldr	r7, [r7, #4]
 80080fa:	e7b6      	b.n	800806a <_malloc_r+0x4a>
 80080fc:	461a      	mov	r2, r3
 80080fe:	685b      	ldr	r3, [r3, #4]
 8008100:	42a3      	cmp	r3, r4
 8008102:	d1fb      	bne.n	80080fc <_malloc_r+0xdc>
 8008104:	2300      	movs	r3, #0
 8008106:	6053      	str	r3, [r2, #4]
 8008108:	e7de      	b.n	80080c8 <_malloc_r+0xa8>
 800810a:	230c      	movs	r3, #12
 800810c:	6033      	str	r3, [r6, #0]
 800810e:	4630      	mov	r0, r6
 8008110:	f000 f80c 	bl	800812c <__malloc_unlock>
 8008114:	e794      	b.n	8008040 <_malloc_r+0x20>
 8008116:	6005      	str	r5, [r0, #0]
 8008118:	e7d6      	b.n	80080c8 <_malloc_r+0xa8>
 800811a:	bf00      	nop
 800811c:	20000994 	.word	0x20000994

08008120 <__malloc_lock>:
 8008120:	4801      	ldr	r0, [pc, #4]	@ (8008128 <__malloc_lock+0x8>)
 8008122:	f000 bac0 	b.w	80086a6 <__retarget_lock_acquire_recursive>
 8008126:	bf00      	nop
 8008128:	20000ad8 	.word	0x20000ad8

0800812c <__malloc_unlock>:
 800812c:	4801      	ldr	r0, [pc, #4]	@ (8008134 <__malloc_unlock+0x8>)
 800812e:	f000 babb 	b.w	80086a8 <__retarget_lock_release_recursive>
 8008132:	bf00      	nop
 8008134:	20000ad8 	.word	0x20000ad8

08008138 <std>:
 8008138:	2300      	movs	r3, #0
 800813a:	b510      	push	{r4, lr}
 800813c:	4604      	mov	r4, r0
 800813e:	e9c0 3300 	strd	r3, r3, [r0]
 8008142:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008146:	6083      	str	r3, [r0, #8]
 8008148:	8181      	strh	r1, [r0, #12]
 800814a:	6643      	str	r3, [r0, #100]	@ 0x64
 800814c:	81c2      	strh	r2, [r0, #14]
 800814e:	6183      	str	r3, [r0, #24]
 8008150:	4619      	mov	r1, r3
 8008152:	2208      	movs	r2, #8
 8008154:	305c      	adds	r0, #92	@ 0x5c
 8008156:	f000 fa1d 	bl	8008594 <memset>
 800815a:	4b0d      	ldr	r3, [pc, #52]	@ (8008190 <std+0x58>)
 800815c:	6263      	str	r3, [r4, #36]	@ 0x24
 800815e:	4b0d      	ldr	r3, [pc, #52]	@ (8008194 <std+0x5c>)
 8008160:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008162:	4b0d      	ldr	r3, [pc, #52]	@ (8008198 <std+0x60>)
 8008164:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008166:	4b0d      	ldr	r3, [pc, #52]	@ (800819c <std+0x64>)
 8008168:	6323      	str	r3, [r4, #48]	@ 0x30
 800816a:	4b0d      	ldr	r3, [pc, #52]	@ (80081a0 <std+0x68>)
 800816c:	6224      	str	r4, [r4, #32]
 800816e:	429c      	cmp	r4, r3
 8008170:	d006      	beq.n	8008180 <std+0x48>
 8008172:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008176:	4294      	cmp	r4, r2
 8008178:	d002      	beq.n	8008180 <std+0x48>
 800817a:	33d0      	adds	r3, #208	@ 0xd0
 800817c:	429c      	cmp	r4, r3
 800817e:	d105      	bne.n	800818c <std+0x54>
 8008180:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008184:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008188:	f000 ba8c 	b.w	80086a4 <__retarget_lock_init_recursive>
 800818c:	bd10      	pop	{r4, pc}
 800818e:	bf00      	nop
 8008190:	080083e5 	.word	0x080083e5
 8008194:	08008407 	.word	0x08008407
 8008198:	0800843f 	.word	0x0800843f
 800819c:	08008463 	.word	0x08008463
 80081a0:	20000998 	.word	0x20000998

080081a4 <stdio_exit_handler>:
 80081a4:	4a02      	ldr	r2, [pc, #8]	@ (80081b0 <stdio_exit_handler+0xc>)
 80081a6:	4903      	ldr	r1, [pc, #12]	@ (80081b4 <stdio_exit_handler+0x10>)
 80081a8:	4803      	ldr	r0, [pc, #12]	@ (80081b8 <stdio_exit_handler+0x14>)
 80081aa:	f000 b869 	b.w	8008280 <_fwalk_sglue>
 80081ae:	bf00      	nop
 80081b0:	20000010 	.word	0x20000010
 80081b4:	08008e2d 	.word	0x08008e2d
 80081b8:	20000020 	.word	0x20000020

080081bc <cleanup_stdio>:
 80081bc:	6841      	ldr	r1, [r0, #4]
 80081be:	4b0c      	ldr	r3, [pc, #48]	@ (80081f0 <cleanup_stdio+0x34>)
 80081c0:	4299      	cmp	r1, r3
 80081c2:	b510      	push	{r4, lr}
 80081c4:	4604      	mov	r4, r0
 80081c6:	d001      	beq.n	80081cc <cleanup_stdio+0x10>
 80081c8:	f000 fe30 	bl	8008e2c <_fflush_r>
 80081cc:	68a1      	ldr	r1, [r4, #8]
 80081ce:	4b09      	ldr	r3, [pc, #36]	@ (80081f4 <cleanup_stdio+0x38>)
 80081d0:	4299      	cmp	r1, r3
 80081d2:	d002      	beq.n	80081da <cleanup_stdio+0x1e>
 80081d4:	4620      	mov	r0, r4
 80081d6:	f000 fe29 	bl	8008e2c <_fflush_r>
 80081da:	68e1      	ldr	r1, [r4, #12]
 80081dc:	4b06      	ldr	r3, [pc, #24]	@ (80081f8 <cleanup_stdio+0x3c>)
 80081de:	4299      	cmp	r1, r3
 80081e0:	d004      	beq.n	80081ec <cleanup_stdio+0x30>
 80081e2:	4620      	mov	r0, r4
 80081e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081e8:	f000 be20 	b.w	8008e2c <_fflush_r>
 80081ec:	bd10      	pop	{r4, pc}
 80081ee:	bf00      	nop
 80081f0:	20000998 	.word	0x20000998
 80081f4:	20000a00 	.word	0x20000a00
 80081f8:	20000a68 	.word	0x20000a68

080081fc <global_stdio_init.part.0>:
 80081fc:	b510      	push	{r4, lr}
 80081fe:	4b0b      	ldr	r3, [pc, #44]	@ (800822c <global_stdio_init.part.0+0x30>)
 8008200:	4c0b      	ldr	r4, [pc, #44]	@ (8008230 <global_stdio_init.part.0+0x34>)
 8008202:	4a0c      	ldr	r2, [pc, #48]	@ (8008234 <global_stdio_init.part.0+0x38>)
 8008204:	601a      	str	r2, [r3, #0]
 8008206:	4620      	mov	r0, r4
 8008208:	2200      	movs	r2, #0
 800820a:	2104      	movs	r1, #4
 800820c:	f7ff ff94 	bl	8008138 <std>
 8008210:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008214:	2201      	movs	r2, #1
 8008216:	2109      	movs	r1, #9
 8008218:	f7ff ff8e 	bl	8008138 <std>
 800821c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008220:	2202      	movs	r2, #2
 8008222:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008226:	2112      	movs	r1, #18
 8008228:	f7ff bf86 	b.w	8008138 <std>
 800822c:	20000ad0 	.word	0x20000ad0
 8008230:	20000998 	.word	0x20000998
 8008234:	080081a5 	.word	0x080081a5

08008238 <__sfp_lock_acquire>:
 8008238:	4801      	ldr	r0, [pc, #4]	@ (8008240 <__sfp_lock_acquire+0x8>)
 800823a:	f000 ba34 	b.w	80086a6 <__retarget_lock_acquire_recursive>
 800823e:	bf00      	nop
 8008240:	20000ad9 	.word	0x20000ad9

08008244 <__sfp_lock_release>:
 8008244:	4801      	ldr	r0, [pc, #4]	@ (800824c <__sfp_lock_release+0x8>)
 8008246:	f000 ba2f 	b.w	80086a8 <__retarget_lock_release_recursive>
 800824a:	bf00      	nop
 800824c:	20000ad9 	.word	0x20000ad9

08008250 <__sinit>:
 8008250:	b510      	push	{r4, lr}
 8008252:	4604      	mov	r4, r0
 8008254:	f7ff fff0 	bl	8008238 <__sfp_lock_acquire>
 8008258:	6a23      	ldr	r3, [r4, #32]
 800825a:	b11b      	cbz	r3, 8008264 <__sinit+0x14>
 800825c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008260:	f7ff bff0 	b.w	8008244 <__sfp_lock_release>
 8008264:	4b04      	ldr	r3, [pc, #16]	@ (8008278 <__sinit+0x28>)
 8008266:	6223      	str	r3, [r4, #32]
 8008268:	4b04      	ldr	r3, [pc, #16]	@ (800827c <__sinit+0x2c>)
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d1f5      	bne.n	800825c <__sinit+0xc>
 8008270:	f7ff ffc4 	bl	80081fc <global_stdio_init.part.0>
 8008274:	e7f2      	b.n	800825c <__sinit+0xc>
 8008276:	bf00      	nop
 8008278:	080081bd 	.word	0x080081bd
 800827c:	20000ad0 	.word	0x20000ad0

08008280 <_fwalk_sglue>:
 8008280:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008284:	4607      	mov	r7, r0
 8008286:	4688      	mov	r8, r1
 8008288:	4614      	mov	r4, r2
 800828a:	2600      	movs	r6, #0
 800828c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008290:	f1b9 0901 	subs.w	r9, r9, #1
 8008294:	d505      	bpl.n	80082a2 <_fwalk_sglue+0x22>
 8008296:	6824      	ldr	r4, [r4, #0]
 8008298:	2c00      	cmp	r4, #0
 800829a:	d1f7      	bne.n	800828c <_fwalk_sglue+0xc>
 800829c:	4630      	mov	r0, r6
 800829e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80082a2:	89ab      	ldrh	r3, [r5, #12]
 80082a4:	2b01      	cmp	r3, #1
 80082a6:	d907      	bls.n	80082b8 <_fwalk_sglue+0x38>
 80082a8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80082ac:	3301      	adds	r3, #1
 80082ae:	d003      	beq.n	80082b8 <_fwalk_sglue+0x38>
 80082b0:	4629      	mov	r1, r5
 80082b2:	4638      	mov	r0, r7
 80082b4:	47c0      	blx	r8
 80082b6:	4306      	orrs	r6, r0
 80082b8:	3568      	adds	r5, #104	@ 0x68
 80082ba:	e7e9      	b.n	8008290 <_fwalk_sglue+0x10>

080082bc <_puts_r>:
 80082bc:	6a03      	ldr	r3, [r0, #32]
 80082be:	b570      	push	{r4, r5, r6, lr}
 80082c0:	6884      	ldr	r4, [r0, #8]
 80082c2:	4605      	mov	r5, r0
 80082c4:	460e      	mov	r6, r1
 80082c6:	b90b      	cbnz	r3, 80082cc <_puts_r+0x10>
 80082c8:	f7ff ffc2 	bl	8008250 <__sinit>
 80082cc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80082ce:	07db      	lsls	r3, r3, #31
 80082d0:	d405      	bmi.n	80082de <_puts_r+0x22>
 80082d2:	89a3      	ldrh	r3, [r4, #12]
 80082d4:	0598      	lsls	r0, r3, #22
 80082d6:	d402      	bmi.n	80082de <_puts_r+0x22>
 80082d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80082da:	f000 f9e4 	bl	80086a6 <__retarget_lock_acquire_recursive>
 80082de:	89a3      	ldrh	r3, [r4, #12]
 80082e0:	0719      	lsls	r1, r3, #28
 80082e2:	d502      	bpl.n	80082ea <_puts_r+0x2e>
 80082e4:	6923      	ldr	r3, [r4, #16]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d135      	bne.n	8008356 <_puts_r+0x9a>
 80082ea:	4621      	mov	r1, r4
 80082ec:	4628      	mov	r0, r5
 80082ee:	f000 f8fb 	bl	80084e8 <__swsetup_r>
 80082f2:	b380      	cbz	r0, 8008356 <_puts_r+0x9a>
 80082f4:	f04f 35ff 	mov.w	r5, #4294967295
 80082f8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80082fa:	07da      	lsls	r2, r3, #31
 80082fc:	d405      	bmi.n	800830a <_puts_r+0x4e>
 80082fe:	89a3      	ldrh	r3, [r4, #12]
 8008300:	059b      	lsls	r3, r3, #22
 8008302:	d402      	bmi.n	800830a <_puts_r+0x4e>
 8008304:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008306:	f000 f9cf 	bl	80086a8 <__retarget_lock_release_recursive>
 800830a:	4628      	mov	r0, r5
 800830c:	bd70      	pop	{r4, r5, r6, pc}
 800830e:	2b00      	cmp	r3, #0
 8008310:	da04      	bge.n	800831c <_puts_r+0x60>
 8008312:	69a2      	ldr	r2, [r4, #24]
 8008314:	429a      	cmp	r2, r3
 8008316:	dc17      	bgt.n	8008348 <_puts_r+0x8c>
 8008318:	290a      	cmp	r1, #10
 800831a:	d015      	beq.n	8008348 <_puts_r+0x8c>
 800831c:	6823      	ldr	r3, [r4, #0]
 800831e:	1c5a      	adds	r2, r3, #1
 8008320:	6022      	str	r2, [r4, #0]
 8008322:	7019      	strb	r1, [r3, #0]
 8008324:	68a3      	ldr	r3, [r4, #8]
 8008326:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800832a:	3b01      	subs	r3, #1
 800832c:	60a3      	str	r3, [r4, #8]
 800832e:	2900      	cmp	r1, #0
 8008330:	d1ed      	bne.n	800830e <_puts_r+0x52>
 8008332:	2b00      	cmp	r3, #0
 8008334:	da11      	bge.n	800835a <_puts_r+0x9e>
 8008336:	4622      	mov	r2, r4
 8008338:	210a      	movs	r1, #10
 800833a:	4628      	mov	r0, r5
 800833c:	f000 f895 	bl	800846a <__swbuf_r>
 8008340:	3001      	adds	r0, #1
 8008342:	d0d7      	beq.n	80082f4 <_puts_r+0x38>
 8008344:	250a      	movs	r5, #10
 8008346:	e7d7      	b.n	80082f8 <_puts_r+0x3c>
 8008348:	4622      	mov	r2, r4
 800834a:	4628      	mov	r0, r5
 800834c:	f000 f88d 	bl	800846a <__swbuf_r>
 8008350:	3001      	adds	r0, #1
 8008352:	d1e7      	bne.n	8008324 <_puts_r+0x68>
 8008354:	e7ce      	b.n	80082f4 <_puts_r+0x38>
 8008356:	3e01      	subs	r6, #1
 8008358:	e7e4      	b.n	8008324 <_puts_r+0x68>
 800835a:	6823      	ldr	r3, [r4, #0]
 800835c:	1c5a      	adds	r2, r3, #1
 800835e:	6022      	str	r2, [r4, #0]
 8008360:	220a      	movs	r2, #10
 8008362:	701a      	strb	r2, [r3, #0]
 8008364:	e7ee      	b.n	8008344 <_puts_r+0x88>
	...

08008368 <puts>:
 8008368:	4b02      	ldr	r3, [pc, #8]	@ (8008374 <puts+0xc>)
 800836a:	4601      	mov	r1, r0
 800836c:	6818      	ldr	r0, [r3, #0]
 800836e:	f7ff bfa5 	b.w	80082bc <_puts_r>
 8008372:	bf00      	nop
 8008374:	2000001c 	.word	0x2000001c

08008378 <sniprintf>:
 8008378:	b40c      	push	{r2, r3}
 800837a:	b530      	push	{r4, r5, lr}
 800837c:	4b18      	ldr	r3, [pc, #96]	@ (80083e0 <sniprintf+0x68>)
 800837e:	1e0c      	subs	r4, r1, #0
 8008380:	681d      	ldr	r5, [r3, #0]
 8008382:	b09d      	sub	sp, #116	@ 0x74
 8008384:	da08      	bge.n	8008398 <sniprintf+0x20>
 8008386:	238b      	movs	r3, #139	@ 0x8b
 8008388:	602b      	str	r3, [r5, #0]
 800838a:	f04f 30ff 	mov.w	r0, #4294967295
 800838e:	b01d      	add	sp, #116	@ 0x74
 8008390:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008394:	b002      	add	sp, #8
 8008396:	4770      	bx	lr
 8008398:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800839c:	f8ad 3014 	strh.w	r3, [sp, #20]
 80083a0:	f04f 0300 	mov.w	r3, #0
 80083a4:	931b      	str	r3, [sp, #108]	@ 0x6c
 80083a6:	bf14      	ite	ne
 80083a8:	f104 33ff 	addne.w	r3, r4, #4294967295
 80083ac:	4623      	moveq	r3, r4
 80083ae:	9304      	str	r3, [sp, #16]
 80083b0:	9307      	str	r3, [sp, #28]
 80083b2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80083b6:	9002      	str	r0, [sp, #8]
 80083b8:	9006      	str	r0, [sp, #24]
 80083ba:	f8ad 3016 	strh.w	r3, [sp, #22]
 80083be:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80083c0:	ab21      	add	r3, sp, #132	@ 0x84
 80083c2:	a902      	add	r1, sp, #8
 80083c4:	4628      	mov	r0, r5
 80083c6:	9301      	str	r3, [sp, #4]
 80083c8:	f000 fa24 	bl	8008814 <_svfiprintf_r>
 80083cc:	1c43      	adds	r3, r0, #1
 80083ce:	bfbc      	itt	lt
 80083d0:	238b      	movlt	r3, #139	@ 0x8b
 80083d2:	602b      	strlt	r3, [r5, #0]
 80083d4:	2c00      	cmp	r4, #0
 80083d6:	d0da      	beq.n	800838e <sniprintf+0x16>
 80083d8:	9b02      	ldr	r3, [sp, #8]
 80083da:	2200      	movs	r2, #0
 80083dc:	701a      	strb	r2, [r3, #0]
 80083de:	e7d6      	b.n	800838e <sniprintf+0x16>
 80083e0:	2000001c 	.word	0x2000001c

080083e4 <__sread>:
 80083e4:	b510      	push	{r4, lr}
 80083e6:	460c      	mov	r4, r1
 80083e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083ec:	f000 f8fc 	bl	80085e8 <_read_r>
 80083f0:	2800      	cmp	r0, #0
 80083f2:	bfab      	itete	ge
 80083f4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80083f6:	89a3      	ldrhlt	r3, [r4, #12]
 80083f8:	181b      	addge	r3, r3, r0
 80083fa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80083fe:	bfac      	ite	ge
 8008400:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008402:	81a3      	strhlt	r3, [r4, #12]
 8008404:	bd10      	pop	{r4, pc}

08008406 <__swrite>:
 8008406:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800840a:	461f      	mov	r7, r3
 800840c:	898b      	ldrh	r3, [r1, #12]
 800840e:	05db      	lsls	r3, r3, #23
 8008410:	4605      	mov	r5, r0
 8008412:	460c      	mov	r4, r1
 8008414:	4616      	mov	r6, r2
 8008416:	d505      	bpl.n	8008424 <__swrite+0x1e>
 8008418:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800841c:	2302      	movs	r3, #2
 800841e:	2200      	movs	r2, #0
 8008420:	f000 f8d0 	bl	80085c4 <_lseek_r>
 8008424:	89a3      	ldrh	r3, [r4, #12]
 8008426:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800842a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800842e:	81a3      	strh	r3, [r4, #12]
 8008430:	4632      	mov	r2, r6
 8008432:	463b      	mov	r3, r7
 8008434:	4628      	mov	r0, r5
 8008436:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800843a:	f000 b8f7 	b.w	800862c <_write_r>

0800843e <__sseek>:
 800843e:	b510      	push	{r4, lr}
 8008440:	460c      	mov	r4, r1
 8008442:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008446:	f000 f8bd 	bl	80085c4 <_lseek_r>
 800844a:	1c43      	adds	r3, r0, #1
 800844c:	89a3      	ldrh	r3, [r4, #12]
 800844e:	bf15      	itete	ne
 8008450:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008452:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008456:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800845a:	81a3      	strheq	r3, [r4, #12]
 800845c:	bf18      	it	ne
 800845e:	81a3      	strhne	r3, [r4, #12]
 8008460:	bd10      	pop	{r4, pc}

08008462 <__sclose>:
 8008462:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008466:	f000 b89d 	b.w	80085a4 <_close_r>

0800846a <__swbuf_r>:
 800846a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800846c:	460e      	mov	r6, r1
 800846e:	4614      	mov	r4, r2
 8008470:	4605      	mov	r5, r0
 8008472:	b118      	cbz	r0, 800847c <__swbuf_r+0x12>
 8008474:	6a03      	ldr	r3, [r0, #32]
 8008476:	b90b      	cbnz	r3, 800847c <__swbuf_r+0x12>
 8008478:	f7ff feea 	bl	8008250 <__sinit>
 800847c:	69a3      	ldr	r3, [r4, #24]
 800847e:	60a3      	str	r3, [r4, #8]
 8008480:	89a3      	ldrh	r3, [r4, #12]
 8008482:	071a      	lsls	r2, r3, #28
 8008484:	d501      	bpl.n	800848a <__swbuf_r+0x20>
 8008486:	6923      	ldr	r3, [r4, #16]
 8008488:	b943      	cbnz	r3, 800849c <__swbuf_r+0x32>
 800848a:	4621      	mov	r1, r4
 800848c:	4628      	mov	r0, r5
 800848e:	f000 f82b 	bl	80084e8 <__swsetup_r>
 8008492:	b118      	cbz	r0, 800849c <__swbuf_r+0x32>
 8008494:	f04f 37ff 	mov.w	r7, #4294967295
 8008498:	4638      	mov	r0, r7
 800849a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800849c:	6823      	ldr	r3, [r4, #0]
 800849e:	6922      	ldr	r2, [r4, #16]
 80084a0:	1a98      	subs	r0, r3, r2
 80084a2:	6963      	ldr	r3, [r4, #20]
 80084a4:	b2f6      	uxtb	r6, r6
 80084a6:	4283      	cmp	r3, r0
 80084a8:	4637      	mov	r7, r6
 80084aa:	dc05      	bgt.n	80084b8 <__swbuf_r+0x4e>
 80084ac:	4621      	mov	r1, r4
 80084ae:	4628      	mov	r0, r5
 80084b0:	f000 fcbc 	bl	8008e2c <_fflush_r>
 80084b4:	2800      	cmp	r0, #0
 80084b6:	d1ed      	bne.n	8008494 <__swbuf_r+0x2a>
 80084b8:	68a3      	ldr	r3, [r4, #8]
 80084ba:	3b01      	subs	r3, #1
 80084bc:	60a3      	str	r3, [r4, #8]
 80084be:	6823      	ldr	r3, [r4, #0]
 80084c0:	1c5a      	adds	r2, r3, #1
 80084c2:	6022      	str	r2, [r4, #0]
 80084c4:	701e      	strb	r6, [r3, #0]
 80084c6:	6962      	ldr	r2, [r4, #20]
 80084c8:	1c43      	adds	r3, r0, #1
 80084ca:	429a      	cmp	r2, r3
 80084cc:	d004      	beq.n	80084d8 <__swbuf_r+0x6e>
 80084ce:	89a3      	ldrh	r3, [r4, #12]
 80084d0:	07db      	lsls	r3, r3, #31
 80084d2:	d5e1      	bpl.n	8008498 <__swbuf_r+0x2e>
 80084d4:	2e0a      	cmp	r6, #10
 80084d6:	d1df      	bne.n	8008498 <__swbuf_r+0x2e>
 80084d8:	4621      	mov	r1, r4
 80084da:	4628      	mov	r0, r5
 80084dc:	f000 fca6 	bl	8008e2c <_fflush_r>
 80084e0:	2800      	cmp	r0, #0
 80084e2:	d0d9      	beq.n	8008498 <__swbuf_r+0x2e>
 80084e4:	e7d6      	b.n	8008494 <__swbuf_r+0x2a>
	...

080084e8 <__swsetup_r>:
 80084e8:	b538      	push	{r3, r4, r5, lr}
 80084ea:	4b29      	ldr	r3, [pc, #164]	@ (8008590 <__swsetup_r+0xa8>)
 80084ec:	4605      	mov	r5, r0
 80084ee:	6818      	ldr	r0, [r3, #0]
 80084f0:	460c      	mov	r4, r1
 80084f2:	b118      	cbz	r0, 80084fc <__swsetup_r+0x14>
 80084f4:	6a03      	ldr	r3, [r0, #32]
 80084f6:	b90b      	cbnz	r3, 80084fc <__swsetup_r+0x14>
 80084f8:	f7ff feaa 	bl	8008250 <__sinit>
 80084fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008500:	0719      	lsls	r1, r3, #28
 8008502:	d422      	bmi.n	800854a <__swsetup_r+0x62>
 8008504:	06da      	lsls	r2, r3, #27
 8008506:	d407      	bmi.n	8008518 <__swsetup_r+0x30>
 8008508:	2209      	movs	r2, #9
 800850a:	602a      	str	r2, [r5, #0]
 800850c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008510:	81a3      	strh	r3, [r4, #12]
 8008512:	f04f 30ff 	mov.w	r0, #4294967295
 8008516:	e033      	b.n	8008580 <__swsetup_r+0x98>
 8008518:	0758      	lsls	r0, r3, #29
 800851a:	d512      	bpl.n	8008542 <__swsetup_r+0x5a>
 800851c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800851e:	b141      	cbz	r1, 8008532 <__swsetup_r+0x4a>
 8008520:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008524:	4299      	cmp	r1, r3
 8008526:	d002      	beq.n	800852e <__swsetup_r+0x46>
 8008528:	4628      	mov	r0, r5
 800852a:	f000 f8cd 	bl	80086c8 <_free_r>
 800852e:	2300      	movs	r3, #0
 8008530:	6363      	str	r3, [r4, #52]	@ 0x34
 8008532:	89a3      	ldrh	r3, [r4, #12]
 8008534:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008538:	81a3      	strh	r3, [r4, #12]
 800853a:	2300      	movs	r3, #0
 800853c:	6063      	str	r3, [r4, #4]
 800853e:	6923      	ldr	r3, [r4, #16]
 8008540:	6023      	str	r3, [r4, #0]
 8008542:	89a3      	ldrh	r3, [r4, #12]
 8008544:	f043 0308 	orr.w	r3, r3, #8
 8008548:	81a3      	strh	r3, [r4, #12]
 800854a:	6923      	ldr	r3, [r4, #16]
 800854c:	b94b      	cbnz	r3, 8008562 <__swsetup_r+0x7a>
 800854e:	89a3      	ldrh	r3, [r4, #12]
 8008550:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008554:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008558:	d003      	beq.n	8008562 <__swsetup_r+0x7a>
 800855a:	4621      	mov	r1, r4
 800855c:	4628      	mov	r0, r5
 800855e:	f000 fcb3 	bl	8008ec8 <__smakebuf_r>
 8008562:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008566:	f013 0201 	ands.w	r2, r3, #1
 800856a:	d00a      	beq.n	8008582 <__swsetup_r+0x9a>
 800856c:	2200      	movs	r2, #0
 800856e:	60a2      	str	r2, [r4, #8]
 8008570:	6962      	ldr	r2, [r4, #20]
 8008572:	4252      	negs	r2, r2
 8008574:	61a2      	str	r2, [r4, #24]
 8008576:	6922      	ldr	r2, [r4, #16]
 8008578:	b942      	cbnz	r2, 800858c <__swsetup_r+0xa4>
 800857a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800857e:	d1c5      	bne.n	800850c <__swsetup_r+0x24>
 8008580:	bd38      	pop	{r3, r4, r5, pc}
 8008582:	0799      	lsls	r1, r3, #30
 8008584:	bf58      	it	pl
 8008586:	6962      	ldrpl	r2, [r4, #20]
 8008588:	60a2      	str	r2, [r4, #8]
 800858a:	e7f4      	b.n	8008576 <__swsetup_r+0x8e>
 800858c:	2000      	movs	r0, #0
 800858e:	e7f7      	b.n	8008580 <__swsetup_r+0x98>
 8008590:	2000001c 	.word	0x2000001c

08008594 <memset>:
 8008594:	4402      	add	r2, r0
 8008596:	4603      	mov	r3, r0
 8008598:	4293      	cmp	r3, r2
 800859a:	d100      	bne.n	800859e <memset+0xa>
 800859c:	4770      	bx	lr
 800859e:	f803 1b01 	strb.w	r1, [r3], #1
 80085a2:	e7f9      	b.n	8008598 <memset+0x4>

080085a4 <_close_r>:
 80085a4:	b538      	push	{r3, r4, r5, lr}
 80085a6:	4d06      	ldr	r5, [pc, #24]	@ (80085c0 <_close_r+0x1c>)
 80085a8:	2300      	movs	r3, #0
 80085aa:	4604      	mov	r4, r0
 80085ac:	4608      	mov	r0, r1
 80085ae:	602b      	str	r3, [r5, #0]
 80085b0:	f7f9 f993 	bl	80018da <_close>
 80085b4:	1c43      	adds	r3, r0, #1
 80085b6:	d102      	bne.n	80085be <_close_r+0x1a>
 80085b8:	682b      	ldr	r3, [r5, #0]
 80085ba:	b103      	cbz	r3, 80085be <_close_r+0x1a>
 80085bc:	6023      	str	r3, [r4, #0]
 80085be:	bd38      	pop	{r3, r4, r5, pc}
 80085c0:	20000ad4 	.word	0x20000ad4

080085c4 <_lseek_r>:
 80085c4:	b538      	push	{r3, r4, r5, lr}
 80085c6:	4d07      	ldr	r5, [pc, #28]	@ (80085e4 <_lseek_r+0x20>)
 80085c8:	4604      	mov	r4, r0
 80085ca:	4608      	mov	r0, r1
 80085cc:	4611      	mov	r1, r2
 80085ce:	2200      	movs	r2, #0
 80085d0:	602a      	str	r2, [r5, #0]
 80085d2:	461a      	mov	r2, r3
 80085d4:	f7f9 f9a8 	bl	8001928 <_lseek>
 80085d8:	1c43      	adds	r3, r0, #1
 80085da:	d102      	bne.n	80085e2 <_lseek_r+0x1e>
 80085dc:	682b      	ldr	r3, [r5, #0]
 80085de:	b103      	cbz	r3, 80085e2 <_lseek_r+0x1e>
 80085e0:	6023      	str	r3, [r4, #0]
 80085e2:	bd38      	pop	{r3, r4, r5, pc}
 80085e4:	20000ad4 	.word	0x20000ad4

080085e8 <_read_r>:
 80085e8:	b538      	push	{r3, r4, r5, lr}
 80085ea:	4d07      	ldr	r5, [pc, #28]	@ (8008608 <_read_r+0x20>)
 80085ec:	4604      	mov	r4, r0
 80085ee:	4608      	mov	r0, r1
 80085f0:	4611      	mov	r1, r2
 80085f2:	2200      	movs	r2, #0
 80085f4:	602a      	str	r2, [r5, #0]
 80085f6:	461a      	mov	r2, r3
 80085f8:	f7f9 f952 	bl	80018a0 <_read>
 80085fc:	1c43      	adds	r3, r0, #1
 80085fe:	d102      	bne.n	8008606 <_read_r+0x1e>
 8008600:	682b      	ldr	r3, [r5, #0]
 8008602:	b103      	cbz	r3, 8008606 <_read_r+0x1e>
 8008604:	6023      	str	r3, [r4, #0]
 8008606:	bd38      	pop	{r3, r4, r5, pc}
 8008608:	20000ad4 	.word	0x20000ad4

0800860c <_sbrk_r>:
 800860c:	b538      	push	{r3, r4, r5, lr}
 800860e:	4d06      	ldr	r5, [pc, #24]	@ (8008628 <_sbrk_r+0x1c>)
 8008610:	2300      	movs	r3, #0
 8008612:	4604      	mov	r4, r0
 8008614:	4608      	mov	r0, r1
 8008616:	602b      	str	r3, [r5, #0]
 8008618:	f7f9 f994 	bl	8001944 <_sbrk>
 800861c:	1c43      	adds	r3, r0, #1
 800861e:	d102      	bne.n	8008626 <_sbrk_r+0x1a>
 8008620:	682b      	ldr	r3, [r5, #0]
 8008622:	b103      	cbz	r3, 8008626 <_sbrk_r+0x1a>
 8008624:	6023      	str	r3, [r4, #0]
 8008626:	bd38      	pop	{r3, r4, r5, pc}
 8008628:	20000ad4 	.word	0x20000ad4

0800862c <_write_r>:
 800862c:	b538      	push	{r3, r4, r5, lr}
 800862e:	4d07      	ldr	r5, [pc, #28]	@ (800864c <_write_r+0x20>)
 8008630:	4604      	mov	r4, r0
 8008632:	4608      	mov	r0, r1
 8008634:	4611      	mov	r1, r2
 8008636:	2200      	movs	r2, #0
 8008638:	602a      	str	r2, [r5, #0]
 800863a:	461a      	mov	r2, r3
 800863c:	f7f8 ff76 	bl	800152c <_write>
 8008640:	1c43      	adds	r3, r0, #1
 8008642:	d102      	bne.n	800864a <_write_r+0x1e>
 8008644:	682b      	ldr	r3, [r5, #0]
 8008646:	b103      	cbz	r3, 800864a <_write_r+0x1e>
 8008648:	6023      	str	r3, [r4, #0]
 800864a:	bd38      	pop	{r3, r4, r5, pc}
 800864c:	20000ad4 	.word	0x20000ad4

08008650 <__errno>:
 8008650:	4b01      	ldr	r3, [pc, #4]	@ (8008658 <__errno+0x8>)
 8008652:	6818      	ldr	r0, [r3, #0]
 8008654:	4770      	bx	lr
 8008656:	bf00      	nop
 8008658:	2000001c 	.word	0x2000001c

0800865c <__libc_init_array>:
 800865c:	b570      	push	{r4, r5, r6, lr}
 800865e:	4d0d      	ldr	r5, [pc, #52]	@ (8008694 <__libc_init_array+0x38>)
 8008660:	4c0d      	ldr	r4, [pc, #52]	@ (8008698 <__libc_init_array+0x3c>)
 8008662:	1b64      	subs	r4, r4, r5
 8008664:	10a4      	asrs	r4, r4, #2
 8008666:	2600      	movs	r6, #0
 8008668:	42a6      	cmp	r6, r4
 800866a:	d109      	bne.n	8008680 <__libc_init_array+0x24>
 800866c:	4d0b      	ldr	r5, [pc, #44]	@ (800869c <__libc_init_array+0x40>)
 800866e:	4c0c      	ldr	r4, [pc, #48]	@ (80086a0 <__libc_init_array+0x44>)
 8008670:	f000 fcd8 	bl	8009024 <_init>
 8008674:	1b64      	subs	r4, r4, r5
 8008676:	10a4      	asrs	r4, r4, #2
 8008678:	2600      	movs	r6, #0
 800867a:	42a6      	cmp	r6, r4
 800867c:	d105      	bne.n	800868a <__libc_init_array+0x2e>
 800867e:	bd70      	pop	{r4, r5, r6, pc}
 8008680:	f855 3b04 	ldr.w	r3, [r5], #4
 8008684:	4798      	blx	r3
 8008686:	3601      	adds	r6, #1
 8008688:	e7ee      	b.n	8008668 <__libc_init_array+0xc>
 800868a:	f855 3b04 	ldr.w	r3, [r5], #4
 800868e:	4798      	blx	r3
 8008690:	3601      	adds	r6, #1
 8008692:	e7f2      	b.n	800867a <__libc_init_array+0x1e>
 8008694:	08009390 	.word	0x08009390
 8008698:	08009390 	.word	0x08009390
 800869c:	08009390 	.word	0x08009390
 80086a0:	08009394 	.word	0x08009394

080086a4 <__retarget_lock_init_recursive>:
 80086a4:	4770      	bx	lr

080086a6 <__retarget_lock_acquire_recursive>:
 80086a6:	4770      	bx	lr

080086a8 <__retarget_lock_release_recursive>:
 80086a8:	4770      	bx	lr

080086aa <memcpy>:
 80086aa:	440a      	add	r2, r1
 80086ac:	4291      	cmp	r1, r2
 80086ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80086b2:	d100      	bne.n	80086b6 <memcpy+0xc>
 80086b4:	4770      	bx	lr
 80086b6:	b510      	push	{r4, lr}
 80086b8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80086bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80086c0:	4291      	cmp	r1, r2
 80086c2:	d1f9      	bne.n	80086b8 <memcpy+0xe>
 80086c4:	bd10      	pop	{r4, pc}
	...

080086c8 <_free_r>:
 80086c8:	b538      	push	{r3, r4, r5, lr}
 80086ca:	4605      	mov	r5, r0
 80086cc:	2900      	cmp	r1, #0
 80086ce:	d041      	beq.n	8008754 <_free_r+0x8c>
 80086d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80086d4:	1f0c      	subs	r4, r1, #4
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	bfb8      	it	lt
 80086da:	18e4      	addlt	r4, r4, r3
 80086dc:	f7ff fd20 	bl	8008120 <__malloc_lock>
 80086e0:	4a1d      	ldr	r2, [pc, #116]	@ (8008758 <_free_r+0x90>)
 80086e2:	6813      	ldr	r3, [r2, #0]
 80086e4:	b933      	cbnz	r3, 80086f4 <_free_r+0x2c>
 80086e6:	6063      	str	r3, [r4, #4]
 80086e8:	6014      	str	r4, [r2, #0]
 80086ea:	4628      	mov	r0, r5
 80086ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80086f0:	f7ff bd1c 	b.w	800812c <__malloc_unlock>
 80086f4:	42a3      	cmp	r3, r4
 80086f6:	d908      	bls.n	800870a <_free_r+0x42>
 80086f8:	6820      	ldr	r0, [r4, #0]
 80086fa:	1821      	adds	r1, r4, r0
 80086fc:	428b      	cmp	r3, r1
 80086fe:	bf01      	itttt	eq
 8008700:	6819      	ldreq	r1, [r3, #0]
 8008702:	685b      	ldreq	r3, [r3, #4]
 8008704:	1809      	addeq	r1, r1, r0
 8008706:	6021      	streq	r1, [r4, #0]
 8008708:	e7ed      	b.n	80086e6 <_free_r+0x1e>
 800870a:	461a      	mov	r2, r3
 800870c:	685b      	ldr	r3, [r3, #4]
 800870e:	b10b      	cbz	r3, 8008714 <_free_r+0x4c>
 8008710:	42a3      	cmp	r3, r4
 8008712:	d9fa      	bls.n	800870a <_free_r+0x42>
 8008714:	6811      	ldr	r1, [r2, #0]
 8008716:	1850      	adds	r0, r2, r1
 8008718:	42a0      	cmp	r0, r4
 800871a:	d10b      	bne.n	8008734 <_free_r+0x6c>
 800871c:	6820      	ldr	r0, [r4, #0]
 800871e:	4401      	add	r1, r0
 8008720:	1850      	adds	r0, r2, r1
 8008722:	4283      	cmp	r3, r0
 8008724:	6011      	str	r1, [r2, #0]
 8008726:	d1e0      	bne.n	80086ea <_free_r+0x22>
 8008728:	6818      	ldr	r0, [r3, #0]
 800872a:	685b      	ldr	r3, [r3, #4]
 800872c:	6053      	str	r3, [r2, #4]
 800872e:	4408      	add	r0, r1
 8008730:	6010      	str	r0, [r2, #0]
 8008732:	e7da      	b.n	80086ea <_free_r+0x22>
 8008734:	d902      	bls.n	800873c <_free_r+0x74>
 8008736:	230c      	movs	r3, #12
 8008738:	602b      	str	r3, [r5, #0]
 800873a:	e7d6      	b.n	80086ea <_free_r+0x22>
 800873c:	6820      	ldr	r0, [r4, #0]
 800873e:	1821      	adds	r1, r4, r0
 8008740:	428b      	cmp	r3, r1
 8008742:	bf04      	itt	eq
 8008744:	6819      	ldreq	r1, [r3, #0]
 8008746:	685b      	ldreq	r3, [r3, #4]
 8008748:	6063      	str	r3, [r4, #4]
 800874a:	bf04      	itt	eq
 800874c:	1809      	addeq	r1, r1, r0
 800874e:	6021      	streq	r1, [r4, #0]
 8008750:	6054      	str	r4, [r2, #4]
 8008752:	e7ca      	b.n	80086ea <_free_r+0x22>
 8008754:	bd38      	pop	{r3, r4, r5, pc}
 8008756:	bf00      	nop
 8008758:	20000994 	.word	0x20000994

0800875c <__ssputs_r>:
 800875c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008760:	688e      	ldr	r6, [r1, #8]
 8008762:	461f      	mov	r7, r3
 8008764:	42be      	cmp	r6, r7
 8008766:	680b      	ldr	r3, [r1, #0]
 8008768:	4682      	mov	sl, r0
 800876a:	460c      	mov	r4, r1
 800876c:	4690      	mov	r8, r2
 800876e:	d82d      	bhi.n	80087cc <__ssputs_r+0x70>
 8008770:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008774:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008778:	d026      	beq.n	80087c8 <__ssputs_r+0x6c>
 800877a:	6965      	ldr	r5, [r4, #20]
 800877c:	6909      	ldr	r1, [r1, #16]
 800877e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008782:	eba3 0901 	sub.w	r9, r3, r1
 8008786:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800878a:	1c7b      	adds	r3, r7, #1
 800878c:	444b      	add	r3, r9
 800878e:	106d      	asrs	r5, r5, #1
 8008790:	429d      	cmp	r5, r3
 8008792:	bf38      	it	cc
 8008794:	461d      	movcc	r5, r3
 8008796:	0553      	lsls	r3, r2, #21
 8008798:	d527      	bpl.n	80087ea <__ssputs_r+0x8e>
 800879a:	4629      	mov	r1, r5
 800879c:	f7ff fc40 	bl	8008020 <_malloc_r>
 80087a0:	4606      	mov	r6, r0
 80087a2:	b360      	cbz	r0, 80087fe <__ssputs_r+0xa2>
 80087a4:	6921      	ldr	r1, [r4, #16]
 80087a6:	464a      	mov	r2, r9
 80087a8:	f7ff ff7f 	bl	80086aa <memcpy>
 80087ac:	89a3      	ldrh	r3, [r4, #12]
 80087ae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80087b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80087b6:	81a3      	strh	r3, [r4, #12]
 80087b8:	6126      	str	r6, [r4, #16]
 80087ba:	6165      	str	r5, [r4, #20]
 80087bc:	444e      	add	r6, r9
 80087be:	eba5 0509 	sub.w	r5, r5, r9
 80087c2:	6026      	str	r6, [r4, #0]
 80087c4:	60a5      	str	r5, [r4, #8]
 80087c6:	463e      	mov	r6, r7
 80087c8:	42be      	cmp	r6, r7
 80087ca:	d900      	bls.n	80087ce <__ssputs_r+0x72>
 80087cc:	463e      	mov	r6, r7
 80087ce:	6820      	ldr	r0, [r4, #0]
 80087d0:	4632      	mov	r2, r6
 80087d2:	4641      	mov	r1, r8
 80087d4:	f000 fbb4 	bl	8008f40 <memmove>
 80087d8:	68a3      	ldr	r3, [r4, #8]
 80087da:	1b9b      	subs	r3, r3, r6
 80087dc:	60a3      	str	r3, [r4, #8]
 80087de:	6823      	ldr	r3, [r4, #0]
 80087e0:	4433      	add	r3, r6
 80087e2:	6023      	str	r3, [r4, #0]
 80087e4:	2000      	movs	r0, #0
 80087e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087ea:	462a      	mov	r2, r5
 80087ec:	f000 fbe4 	bl	8008fb8 <_realloc_r>
 80087f0:	4606      	mov	r6, r0
 80087f2:	2800      	cmp	r0, #0
 80087f4:	d1e0      	bne.n	80087b8 <__ssputs_r+0x5c>
 80087f6:	6921      	ldr	r1, [r4, #16]
 80087f8:	4650      	mov	r0, sl
 80087fa:	f7ff ff65 	bl	80086c8 <_free_r>
 80087fe:	230c      	movs	r3, #12
 8008800:	f8ca 3000 	str.w	r3, [sl]
 8008804:	89a3      	ldrh	r3, [r4, #12]
 8008806:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800880a:	81a3      	strh	r3, [r4, #12]
 800880c:	f04f 30ff 	mov.w	r0, #4294967295
 8008810:	e7e9      	b.n	80087e6 <__ssputs_r+0x8a>
	...

08008814 <_svfiprintf_r>:
 8008814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008818:	4698      	mov	r8, r3
 800881a:	898b      	ldrh	r3, [r1, #12]
 800881c:	061b      	lsls	r3, r3, #24
 800881e:	b09d      	sub	sp, #116	@ 0x74
 8008820:	4607      	mov	r7, r0
 8008822:	460d      	mov	r5, r1
 8008824:	4614      	mov	r4, r2
 8008826:	d510      	bpl.n	800884a <_svfiprintf_r+0x36>
 8008828:	690b      	ldr	r3, [r1, #16]
 800882a:	b973      	cbnz	r3, 800884a <_svfiprintf_r+0x36>
 800882c:	2140      	movs	r1, #64	@ 0x40
 800882e:	f7ff fbf7 	bl	8008020 <_malloc_r>
 8008832:	6028      	str	r0, [r5, #0]
 8008834:	6128      	str	r0, [r5, #16]
 8008836:	b930      	cbnz	r0, 8008846 <_svfiprintf_r+0x32>
 8008838:	230c      	movs	r3, #12
 800883a:	603b      	str	r3, [r7, #0]
 800883c:	f04f 30ff 	mov.w	r0, #4294967295
 8008840:	b01d      	add	sp, #116	@ 0x74
 8008842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008846:	2340      	movs	r3, #64	@ 0x40
 8008848:	616b      	str	r3, [r5, #20]
 800884a:	2300      	movs	r3, #0
 800884c:	9309      	str	r3, [sp, #36]	@ 0x24
 800884e:	2320      	movs	r3, #32
 8008850:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008854:	f8cd 800c 	str.w	r8, [sp, #12]
 8008858:	2330      	movs	r3, #48	@ 0x30
 800885a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80089f8 <_svfiprintf_r+0x1e4>
 800885e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008862:	f04f 0901 	mov.w	r9, #1
 8008866:	4623      	mov	r3, r4
 8008868:	469a      	mov	sl, r3
 800886a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800886e:	b10a      	cbz	r2, 8008874 <_svfiprintf_r+0x60>
 8008870:	2a25      	cmp	r2, #37	@ 0x25
 8008872:	d1f9      	bne.n	8008868 <_svfiprintf_r+0x54>
 8008874:	ebba 0b04 	subs.w	fp, sl, r4
 8008878:	d00b      	beq.n	8008892 <_svfiprintf_r+0x7e>
 800887a:	465b      	mov	r3, fp
 800887c:	4622      	mov	r2, r4
 800887e:	4629      	mov	r1, r5
 8008880:	4638      	mov	r0, r7
 8008882:	f7ff ff6b 	bl	800875c <__ssputs_r>
 8008886:	3001      	adds	r0, #1
 8008888:	f000 80a7 	beq.w	80089da <_svfiprintf_r+0x1c6>
 800888c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800888e:	445a      	add	r2, fp
 8008890:	9209      	str	r2, [sp, #36]	@ 0x24
 8008892:	f89a 3000 	ldrb.w	r3, [sl]
 8008896:	2b00      	cmp	r3, #0
 8008898:	f000 809f 	beq.w	80089da <_svfiprintf_r+0x1c6>
 800889c:	2300      	movs	r3, #0
 800889e:	f04f 32ff 	mov.w	r2, #4294967295
 80088a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80088a6:	f10a 0a01 	add.w	sl, sl, #1
 80088aa:	9304      	str	r3, [sp, #16]
 80088ac:	9307      	str	r3, [sp, #28]
 80088ae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80088b2:	931a      	str	r3, [sp, #104]	@ 0x68
 80088b4:	4654      	mov	r4, sl
 80088b6:	2205      	movs	r2, #5
 80088b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088bc:	484e      	ldr	r0, [pc, #312]	@ (80089f8 <_svfiprintf_r+0x1e4>)
 80088be:	f7f7 fc8f 	bl	80001e0 <memchr>
 80088c2:	9a04      	ldr	r2, [sp, #16]
 80088c4:	b9d8      	cbnz	r0, 80088fe <_svfiprintf_r+0xea>
 80088c6:	06d0      	lsls	r0, r2, #27
 80088c8:	bf44      	itt	mi
 80088ca:	2320      	movmi	r3, #32
 80088cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80088d0:	0711      	lsls	r1, r2, #28
 80088d2:	bf44      	itt	mi
 80088d4:	232b      	movmi	r3, #43	@ 0x2b
 80088d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80088da:	f89a 3000 	ldrb.w	r3, [sl]
 80088de:	2b2a      	cmp	r3, #42	@ 0x2a
 80088e0:	d015      	beq.n	800890e <_svfiprintf_r+0xfa>
 80088e2:	9a07      	ldr	r2, [sp, #28]
 80088e4:	4654      	mov	r4, sl
 80088e6:	2000      	movs	r0, #0
 80088e8:	f04f 0c0a 	mov.w	ip, #10
 80088ec:	4621      	mov	r1, r4
 80088ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80088f2:	3b30      	subs	r3, #48	@ 0x30
 80088f4:	2b09      	cmp	r3, #9
 80088f6:	d94b      	bls.n	8008990 <_svfiprintf_r+0x17c>
 80088f8:	b1b0      	cbz	r0, 8008928 <_svfiprintf_r+0x114>
 80088fa:	9207      	str	r2, [sp, #28]
 80088fc:	e014      	b.n	8008928 <_svfiprintf_r+0x114>
 80088fe:	eba0 0308 	sub.w	r3, r0, r8
 8008902:	fa09 f303 	lsl.w	r3, r9, r3
 8008906:	4313      	orrs	r3, r2
 8008908:	9304      	str	r3, [sp, #16]
 800890a:	46a2      	mov	sl, r4
 800890c:	e7d2      	b.n	80088b4 <_svfiprintf_r+0xa0>
 800890e:	9b03      	ldr	r3, [sp, #12]
 8008910:	1d19      	adds	r1, r3, #4
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	9103      	str	r1, [sp, #12]
 8008916:	2b00      	cmp	r3, #0
 8008918:	bfbb      	ittet	lt
 800891a:	425b      	neglt	r3, r3
 800891c:	f042 0202 	orrlt.w	r2, r2, #2
 8008920:	9307      	strge	r3, [sp, #28]
 8008922:	9307      	strlt	r3, [sp, #28]
 8008924:	bfb8      	it	lt
 8008926:	9204      	strlt	r2, [sp, #16]
 8008928:	7823      	ldrb	r3, [r4, #0]
 800892a:	2b2e      	cmp	r3, #46	@ 0x2e
 800892c:	d10a      	bne.n	8008944 <_svfiprintf_r+0x130>
 800892e:	7863      	ldrb	r3, [r4, #1]
 8008930:	2b2a      	cmp	r3, #42	@ 0x2a
 8008932:	d132      	bne.n	800899a <_svfiprintf_r+0x186>
 8008934:	9b03      	ldr	r3, [sp, #12]
 8008936:	1d1a      	adds	r2, r3, #4
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	9203      	str	r2, [sp, #12]
 800893c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008940:	3402      	adds	r4, #2
 8008942:	9305      	str	r3, [sp, #20]
 8008944:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008a08 <_svfiprintf_r+0x1f4>
 8008948:	7821      	ldrb	r1, [r4, #0]
 800894a:	2203      	movs	r2, #3
 800894c:	4650      	mov	r0, sl
 800894e:	f7f7 fc47 	bl	80001e0 <memchr>
 8008952:	b138      	cbz	r0, 8008964 <_svfiprintf_r+0x150>
 8008954:	9b04      	ldr	r3, [sp, #16]
 8008956:	eba0 000a 	sub.w	r0, r0, sl
 800895a:	2240      	movs	r2, #64	@ 0x40
 800895c:	4082      	lsls	r2, r0
 800895e:	4313      	orrs	r3, r2
 8008960:	3401      	adds	r4, #1
 8008962:	9304      	str	r3, [sp, #16]
 8008964:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008968:	4824      	ldr	r0, [pc, #144]	@ (80089fc <_svfiprintf_r+0x1e8>)
 800896a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800896e:	2206      	movs	r2, #6
 8008970:	f7f7 fc36 	bl	80001e0 <memchr>
 8008974:	2800      	cmp	r0, #0
 8008976:	d036      	beq.n	80089e6 <_svfiprintf_r+0x1d2>
 8008978:	4b21      	ldr	r3, [pc, #132]	@ (8008a00 <_svfiprintf_r+0x1ec>)
 800897a:	bb1b      	cbnz	r3, 80089c4 <_svfiprintf_r+0x1b0>
 800897c:	9b03      	ldr	r3, [sp, #12]
 800897e:	3307      	adds	r3, #7
 8008980:	f023 0307 	bic.w	r3, r3, #7
 8008984:	3308      	adds	r3, #8
 8008986:	9303      	str	r3, [sp, #12]
 8008988:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800898a:	4433      	add	r3, r6
 800898c:	9309      	str	r3, [sp, #36]	@ 0x24
 800898e:	e76a      	b.n	8008866 <_svfiprintf_r+0x52>
 8008990:	fb0c 3202 	mla	r2, ip, r2, r3
 8008994:	460c      	mov	r4, r1
 8008996:	2001      	movs	r0, #1
 8008998:	e7a8      	b.n	80088ec <_svfiprintf_r+0xd8>
 800899a:	2300      	movs	r3, #0
 800899c:	3401      	adds	r4, #1
 800899e:	9305      	str	r3, [sp, #20]
 80089a0:	4619      	mov	r1, r3
 80089a2:	f04f 0c0a 	mov.w	ip, #10
 80089a6:	4620      	mov	r0, r4
 80089a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80089ac:	3a30      	subs	r2, #48	@ 0x30
 80089ae:	2a09      	cmp	r2, #9
 80089b0:	d903      	bls.n	80089ba <_svfiprintf_r+0x1a6>
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d0c6      	beq.n	8008944 <_svfiprintf_r+0x130>
 80089b6:	9105      	str	r1, [sp, #20]
 80089b8:	e7c4      	b.n	8008944 <_svfiprintf_r+0x130>
 80089ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80089be:	4604      	mov	r4, r0
 80089c0:	2301      	movs	r3, #1
 80089c2:	e7f0      	b.n	80089a6 <_svfiprintf_r+0x192>
 80089c4:	ab03      	add	r3, sp, #12
 80089c6:	9300      	str	r3, [sp, #0]
 80089c8:	462a      	mov	r2, r5
 80089ca:	4b0e      	ldr	r3, [pc, #56]	@ (8008a04 <_svfiprintf_r+0x1f0>)
 80089cc:	a904      	add	r1, sp, #16
 80089ce:	4638      	mov	r0, r7
 80089d0:	f3af 8000 	nop.w
 80089d4:	1c42      	adds	r2, r0, #1
 80089d6:	4606      	mov	r6, r0
 80089d8:	d1d6      	bne.n	8008988 <_svfiprintf_r+0x174>
 80089da:	89ab      	ldrh	r3, [r5, #12]
 80089dc:	065b      	lsls	r3, r3, #25
 80089de:	f53f af2d 	bmi.w	800883c <_svfiprintf_r+0x28>
 80089e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80089e4:	e72c      	b.n	8008840 <_svfiprintf_r+0x2c>
 80089e6:	ab03      	add	r3, sp, #12
 80089e8:	9300      	str	r3, [sp, #0]
 80089ea:	462a      	mov	r2, r5
 80089ec:	4b05      	ldr	r3, [pc, #20]	@ (8008a04 <_svfiprintf_r+0x1f0>)
 80089ee:	a904      	add	r1, sp, #16
 80089f0:	4638      	mov	r0, r7
 80089f2:	f000 f879 	bl	8008ae8 <_printf_i>
 80089f6:	e7ed      	b.n	80089d4 <_svfiprintf_r+0x1c0>
 80089f8:	08009354 	.word	0x08009354
 80089fc:	0800935e 	.word	0x0800935e
 8008a00:	00000000 	.word	0x00000000
 8008a04:	0800875d 	.word	0x0800875d
 8008a08:	0800935a 	.word	0x0800935a

08008a0c <_printf_common>:
 8008a0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a10:	4616      	mov	r6, r2
 8008a12:	4698      	mov	r8, r3
 8008a14:	688a      	ldr	r2, [r1, #8]
 8008a16:	690b      	ldr	r3, [r1, #16]
 8008a18:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008a1c:	4293      	cmp	r3, r2
 8008a1e:	bfb8      	it	lt
 8008a20:	4613      	movlt	r3, r2
 8008a22:	6033      	str	r3, [r6, #0]
 8008a24:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008a28:	4607      	mov	r7, r0
 8008a2a:	460c      	mov	r4, r1
 8008a2c:	b10a      	cbz	r2, 8008a32 <_printf_common+0x26>
 8008a2e:	3301      	adds	r3, #1
 8008a30:	6033      	str	r3, [r6, #0]
 8008a32:	6823      	ldr	r3, [r4, #0]
 8008a34:	0699      	lsls	r1, r3, #26
 8008a36:	bf42      	ittt	mi
 8008a38:	6833      	ldrmi	r3, [r6, #0]
 8008a3a:	3302      	addmi	r3, #2
 8008a3c:	6033      	strmi	r3, [r6, #0]
 8008a3e:	6825      	ldr	r5, [r4, #0]
 8008a40:	f015 0506 	ands.w	r5, r5, #6
 8008a44:	d106      	bne.n	8008a54 <_printf_common+0x48>
 8008a46:	f104 0a19 	add.w	sl, r4, #25
 8008a4a:	68e3      	ldr	r3, [r4, #12]
 8008a4c:	6832      	ldr	r2, [r6, #0]
 8008a4e:	1a9b      	subs	r3, r3, r2
 8008a50:	42ab      	cmp	r3, r5
 8008a52:	dc26      	bgt.n	8008aa2 <_printf_common+0x96>
 8008a54:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008a58:	6822      	ldr	r2, [r4, #0]
 8008a5a:	3b00      	subs	r3, #0
 8008a5c:	bf18      	it	ne
 8008a5e:	2301      	movne	r3, #1
 8008a60:	0692      	lsls	r2, r2, #26
 8008a62:	d42b      	bmi.n	8008abc <_printf_common+0xb0>
 8008a64:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008a68:	4641      	mov	r1, r8
 8008a6a:	4638      	mov	r0, r7
 8008a6c:	47c8      	blx	r9
 8008a6e:	3001      	adds	r0, #1
 8008a70:	d01e      	beq.n	8008ab0 <_printf_common+0xa4>
 8008a72:	6823      	ldr	r3, [r4, #0]
 8008a74:	6922      	ldr	r2, [r4, #16]
 8008a76:	f003 0306 	and.w	r3, r3, #6
 8008a7a:	2b04      	cmp	r3, #4
 8008a7c:	bf02      	ittt	eq
 8008a7e:	68e5      	ldreq	r5, [r4, #12]
 8008a80:	6833      	ldreq	r3, [r6, #0]
 8008a82:	1aed      	subeq	r5, r5, r3
 8008a84:	68a3      	ldr	r3, [r4, #8]
 8008a86:	bf0c      	ite	eq
 8008a88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008a8c:	2500      	movne	r5, #0
 8008a8e:	4293      	cmp	r3, r2
 8008a90:	bfc4      	itt	gt
 8008a92:	1a9b      	subgt	r3, r3, r2
 8008a94:	18ed      	addgt	r5, r5, r3
 8008a96:	2600      	movs	r6, #0
 8008a98:	341a      	adds	r4, #26
 8008a9a:	42b5      	cmp	r5, r6
 8008a9c:	d11a      	bne.n	8008ad4 <_printf_common+0xc8>
 8008a9e:	2000      	movs	r0, #0
 8008aa0:	e008      	b.n	8008ab4 <_printf_common+0xa8>
 8008aa2:	2301      	movs	r3, #1
 8008aa4:	4652      	mov	r2, sl
 8008aa6:	4641      	mov	r1, r8
 8008aa8:	4638      	mov	r0, r7
 8008aaa:	47c8      	blx	r9
 8008aac:	3001      	adds	r0, #1
 8008aae:	d103      	bne.n	8008ab8 <_printf_common+0xac>
 8008ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ab4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ab8:	3501      	adds	r5, #1
 8008aba:	e7c6      	b.n	8008a4a <_printf_common+0x3e>
 8008abc:	18e1      	adds	r1, r4, r3
 8008abe:	1c5a      	adds	r2, r3, #1
 8008ac0:	2030      	movs	r0, #48	@ 0x30
 8008ac2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008ac6:	4422      	add	r2, r4
 8008ac8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008acc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008ad0:	3302      	adds	r3, #2
 8008ad2:	e7c7      	b.n	8008a64 <_printf_common+0x58>
 8008ad4:	2301      	movs	r3, #1
 8008ad6:	4622      	mov	r2, r4
 8008ad8:	4641      	mov	r1, r8
 8008ada:	4638      	mov	r0, r7
 8008adc:	47c8      	blx	r9
 8008ade:	3001      	adds	r0, #1
 8008ae0:	d0e6      	beq.n	8008ab0 <_printf_common+0xa4>
 8008ae2:	3601      	adds	r6, #1
 8008ae4:	e7d9      	b.n	8008a9a <_printf_common+0x8e>
	...

08008ae8 <_printf_i>:
 8008ae8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008aec:	7e0f      	ldrb	r7, [r1, #24]
 8008aee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008af0:	2f78      	cmp	r7, #120	@ 0x78
 8008af2:	4691      	mov	r9, r2
 8008af4:	4680      	mov	r8, r0
 8008af6:	460c      	mov	r4, r1
 8008af8:	469a      	mov	sl, r3
 8008afa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008afe:	d807      	bhi.n	8008b10 <_printf_i+0x28>
 8008b00:	2f62      	cmp	r7, #98	@ 0x62
 8008b02:	d80a      	bhi.n	8008b1a <_printf_i+0x32>
 8008b04:	2f00      	cmp	r7, #0
 8008b06:	f000 80d1 	beq.w	8008cac <_printf_i+0x1c4>
 8008b0a:	2f58      	cmp	r7, #88	@ 0x58
 8008b0c:	f000 80b8 	beq.w	8008c80 <_printf_i+0x198>
 8008b10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008b14:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008b18:	e03a      	b.n	8008b90 <_printf_i+0xa8>
 8008b1a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008b1e:	2b15      	cmp	r3, #21
 8008b20:	d8f6      	bhi.n	8008b10 <_printf_i+0x28>
 8008b22:	a101      	add	r1, pc, #4	@ (adr r1, 8008b28 <_printf_i+0x40>)
 8008b24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008b28:	08008b81 	.word	0x08008b81
 8008b2c:	08008b95 	.word	0x08008b95
 8008b30:	08008b11 	.word	0x08008b11
 8008b34:	08008b11 	.word	0x08008b11
 8008b38:	08008b11 	.word	0x08008b11
 8008b3c:	08008b11 	.word	0x08008b11
 8008b40:	08008b95 	.word	0x08008b95
 8008b44:	08008b11 	.word	0x08008b11
 8008b48:	08008b11 	.word	0x08008b11
 8008b4c:	08008b11 	.word	0x08008b11
 8008b50:	08008b11 	.word	0x08008b11
 8008b54:	08008c93 	.word	0x08008c93
 8008b58:	08008bbf 	.word	0x08008bbf
 8008b5c:	08008c4d 	.word	0x08008c4d
 8008b60:	08008b11 	.word	0x08008b11
 8008b64:	08008b11 	.word	0x08008b11
 8008b68:	08008cb5 	.word	0x08008cb5
 8008b6c:	08008b11 	.word	0x08008b11
 8008b70:	08008bbf 	.word	0x08008bbf
 8008b74:	08008b11 	.word	0x08008b11
 8008b78:	08008b11 	.word	0x08008b11
 8008b7c:	08008c55 	.word	0x08008c55
 8008b80:	6833      	ldr	r3, [r6, #0]
 8008b82:	1d1a      	adds	r2, r3, #4
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	6032      	str	r2, [r6, #0]
 8008b88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008b8c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008b90:	2301      	movs	r3, #1
 8008b92:	e09c      	b.n	8008cce <_printf_i+0x1e6>
 8008b94:	6833      	ldr	r3, [r6, #0]
 8008b96:	6820      	ldr	r0, [r4, #0]
 8008b98:	1d19      	adds	r1, r3, #4
 8008b9a:	6031      	str	r1, [r6, #0]
 8008b9c:	0606      	lsls	r6, r0, #24
 8008b9e:	d501      	bpl.n	8008ba4 <_printf_i+0xbc>
 8008ba0:	681d      	ldr	r5, [r3, #0]
 8008ba2:	e003      	b.n	8008bac <_printf_i+0xc4>
 8008ba4:	0645      	lsls	r5, r0, #25
 8008ba6:	d5fb      	bpl.n	8008ba0 <_printf_i+0xb8>
 8008ba8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008bac:	2d00      	cmp	r5, #0
 8008bae:	da03      	bge.n	8008bb8 <_printf_i+0xd0>
 8008bb0:	232d      	movs	r3, #45	@ 0x2d
 8008bb2:	426d      	negs	r5, r5
 8008bb4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008bb8:	4858      	ldr	r0, [pc, #352]	@ (8008d1c <_printf_i+0x234>)
 8008bba:	230a      	movs	r3, #10
 8008bbc:	e011      	b.n	8008be2 <_printf_i+0xfa>
 8008bbe:	6821      	ldr	r1, [r4, #0]
 8008bc0:	6833      	ldr	r3, [r6, #0]
 8008bc2:	0608      	lsls	r0, r1, #24
 8008bc4:	f853 5b04 	ldr.w	r5, [r3], #4
 8008bc8:	d402      	bmi.n	8008bd0 <_printf_i+0xe8>
 8008bca:	0649      	lsls	r1, r1, #25
 8008bcc:	bf48      	it	mi
 8008bce:	b2ad      	uxthmi	r5, r5
 8008bd0:	2f6f      	cmp	r7, #111	@ 0x6f
 8008bd2:	4852      	ldr	r0, [pc, #328]	@ (8008d1c <_printf_i+0x234>)
 8008bd4:	6033      	str	r3, [r6, #0]
 8008bd6:	bf14      	ite	ne
 8008bd8:	230a      	movne	r3, #10
 8008bda:	2308      	moveq	r3, #8
 8008bdc:	2100      	movs	r1, #0
 8008bde:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008be2:	6866      	ldr	r6, [r4, #4]
 8008be4:	60a6      	str	r6, [r4, #8]
 8008be6:	2e00      	cmp	r6, #0
 8008be8:	db05      	blt.n	8008bf6 <_printf_i+0x10e>
 8008bea:	6821      	ldr	r1, [r4, #0]
 8008bec:	432e      	orrs	r6, r5
 8008bee:	f021 0104 	bic.w	r1, r1, #4
 8008bf2:	6021      	str	r1, [r4, #0]
 8008bf4:	d04b      	beq.n	8008c8e <_printf_i+0x1a6>
 8008bf6:	4616      	mov	r6, r2
 8008bf8:	fbb5 f1f3 	udiv	r1, r5, r3
 8008bfc:	fb03 5711 	mls	r7, r3, r1, r5
 8008c00:	5dc7      	ldrb	r7, [r0, r7]
 8008c02:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008c06:	462f      	mov	r7, r5
 8008c08:	42bb      	cmp	r3, r7
 8008c0a:	460d      	mov	r5, r1
 8008c0c:	d9f4      	bls.n	8008bf8 <_printf_i+0x110>
 8008c0e:	2b08      	cmp	r3, #8
 8008c10:	d10b      	bne.n	8008c2a <_printf_i+0x142>
 8008c12:	6823      	ldr	r3, [r4, #0]
 8008c14:	07df      	lsls	r7, r3, #31
 8008c16:	d508      	bpl.n	8008c2a <_printf_i+0x142>
 8008c18:	6923      	ldr	r3, [r4, #16]
 8008c1a:	6861      	ldr	r1, [r4, #4]
 8008c1c:	4299      	cmp	r1, r3
 8008c1e:	bfde      	ittt	le
 8008c20:	2330      	movle	r3, #48	@ 0x30
 8008c22:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008c26:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008c2a:	1b92      	subs	r2, r2, r6
 8008c2c:	6122      	str	r2, [r4, #16]
 8008c2e:	f8cd a000 	str.w	sl, [sp]
 8008c32:	464b      	mov	r3, r9
 8008c34:	aa03      	add	r2, sp, #12
 8008c36:	4621      	mov	r1, r4
 8008c38:	4640      	mov	r0, r8
 8008c3a:	f7ff fee7 	bl	8008a0c <_printf_common>
 8008c3e:	3001      	adds	r0, #1
 8008c40:	d14a      	bne.n	8008cd8 <_printf_i+0x1f0>
 8008c42:	f04f 30ff 	mov.w	r0, #4294967295
 8008c46:	b004      	add	sp, #16
 8008c48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c4c:	6823      	ldr	r3, [r4, #0]
 8008c4e:	f043 0320 	orr.w	r3, r3, #32
 8008c52:	6023      	str	r3, [r4, #0]
 8008c54:	4832      	ldr	r0, [pc, #200]	@ (8008d20 <_printf_i+0x238>)
 8008c56:	2778      	movs	r7, #120	@ 0x78
 8008c58:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008c5c:	6823      	ldr	r3, [r4, #0]
 8008c5e:	6831      	ldr	r1, [r6, #0]
 8008c60:	061f      	lsls	r7, r3, #24
 8008c62:	f851 5b04 	ldr.w	r5, [r1], #4
 8008c66:	d402      	bmi.n	8008c6e <_printf_i+0x186>
 8008c68:	065f      	lsls	r7, r3, #25
 8008c6a:	bf48      	it	mi
 8008c6c:	b2ad      	uxthmi	r5, r5
 8008c6e:	6031      	str	r1, [r6, #0]
 8008c70:	07d9      	lsls	r1, r3, #31
 8008c72:	bf44      	itt	mi
 8008c74:	f043 0320 	orrmi.w	r3, r3, #32
 8008c78:	6023      	strmi	r3, [r4, #0]
 8008c7a:	b11d      	cbz	r5, 8008c84 <_printf_i+0x19c>
 8008c7c:	2310      	movs	r3, #16
 8008c7e:	e7ad      	b.n	8008bdc <_printf_i+0xf4>
 8008c80:	4826      	ldr	r0, [pc, #152]	@ (8008d1c <_printf_i+0x234>)
 8008c82:	e7e9      	b.n	8008c58 <_printf_i+0x170>
 8008c84:	6823      	ldr	r3, [r4, #0]
 8008c86:	f023 0320 	bic.w	r3, r3, #32
 8008c8a:	6023      	str	r3, [r4, #0]
 8008c8c:	e7f6      	b.n	8008c7c <_printf_i+0x194>
 8008c8e:	4616      	mov	r6, r2
 8008c90:	e7bd      	b.n	8008c0e <_printf_i+0x126>
 8008c92:	6833      	ldr	r3, [r6, #0]
 8008c94:	6825      	ldr	r5, [r4, #0]
 8008c96:	6961      	ldr	r1, [r4, #20]
 8008c98:	1d18      	adds	r0, r3, #4
 8008c9a:	6030      	str	r0, [r6, #0]
 8008c9c:	062e      	lsls	r6, r5, #24
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	d501      	bpl.n	8008ca6 <_printf_i+0x1be>
 8008ca2:	6019      	str	r1, [r3, #0]
 8008ca4:	e002      	b.n	8008cac <_printf_i+0x1c4>
 8008ca6:	0668      	lsls	r0, r5, #25
 8008ca8:	d5fb      	bpl.n	8008ca2 <_printf_i+0x1ba>
 8008caa:	8019      	strh	r1, [r3, #0]
 8008cac:	2300      	movs	r3, #0
 8008cae:	6123      	str	r3, [r4, #16]
 8008cb0:	4616      	mov	r6, r2
 8008cb2:	e7bc      	b.n	8008c2e <_printf_i+0x146>
 8008cb4:	6833      	ldr	r3, [r6, #0]
 8008cb6:	1d1a      	adds	r2, r3, #4
 8008cb8:	6032      	str	r2, [r6, #0]
 8008cba:	681e      	ldr	r6, [r3, #0]
 8008cbc:	6862      	ldr	r2, [r4, #4]
 8008cbe:	2100      	movs	r1, #0
 8008cc0:	4630      	mov	r0, r6
 8008cc2:	f7f7 fa8d 	bl	80001e0 <memchr>
 8008cc6:	b108      	cbz	r0, 8008ccc <_printf_i+0x1e4>
 8008cc8:	1b80      	subs	r0, r0, r6
 8008cca:	6060      	str	r0, [r4, #4]
 8008ccc:	6863      	ldr	r3, [r4, #4]
 8008cce:	6123      	str	r3, [r4, #16]
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008cd6:	e7aa      	b.n	8008c2e <_printf_i+0x146>
 8008cd8:	6923      	ldr	r3, [r4, #16]
 8008cda:	4632      	mov	r2, r6
 8008cdc:	4649      	mov	r1, r9
 8008cde:	4640      	mov	r0, r8
 8008ce0:	47d0      	blx	sl
 8008ce2:	3001      	adds	r0, #1
 8008ce4:	d0ad      	beq.n	8008c42 <_printf_i+0x15a>
 8008ce6:	6823      	ldr	r3, [r4, #0]
 8008ce8:	079b      	lsls	r3, r3, #30
 8008cea:	d413      	bmi.n	8008d14 <_printf_i+0x22c>
 8008cec:	68e0      	ldr	r0, [r4, #12]
 8008cee:	9b03      	ldr	r3, [sp, #12]
 8008cf0:	4298      	cmp	r0, r3
 8008cf2:	bfb8      	it	lt
 8008cf4:	4618      	movlt	r0, r3
 8008cf6:	e7a6      	b.n	8008c46 <_printf_i+0x15e>
 8008cf8:	2301      	movs	r3, #1
 8008cfa:	4632      	mov	r2, r6
 8008cfc:	4649      	mov	r1, r9
 8008cfe:	4640      	mov	r0, r8
 8008d00:	47d0      	blx	sl
 8008d02:	3001      	adds	r0, #1
 8008d04:	d09d      	beq.n	8008c42 <_printf_i+0x15a>
 8008d06:	3501      	adds	r5, #1
 8008d08:	68e3      	ldr	r3, [r4, #12]
 8008d0a:	9903      	ldr	r1, [sp, #12]
 8008d0c:	1a5b      	subs	r3, r3, r1
 8008d0e:	42ab      	cmp	r3, r5
 8008d10:	dcf2      	bgt.n	8008cf8 <_printf_i+0x210>
 8008d12:	e7eb      	b.n	8008cec <_printf_i+0x204>
 8008d14:	2500      	movs	r5, #0
 8008d16:	f104 0619 	add.w	r6, r4, #25
 8008d1a:	e7f5      	b.n	8008d08 <_printf_i+0x220>
 8008d1c:	08009365 	.word	0x08009365
 8008d20:	08009376 	.word	0x08009376

08008d24 <__sflush_r>:
 8008d24:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008d28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d2c:	0716      	lsls	r6, r2, #28
 8008d2e:	4605      	mov	r5, r0
 8008d30:	460c      	mov	r4, r1
 8008d32:	d454      	bmi.n	8008dde <__sflush_r+0xba>
 8008d34:	684b      	ldr	r3, [r1, #4]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	dc02      	bgt.n	8008d40 <__sflush_r+0x1c>
 8008d3a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	dd48      	ble.n	8008dd2 <__sflush_r+0xae>
 8008d40:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008d42:	2e00      	cmp	r6, #0
 8008d44:	d045      	beq.n	8008dd2 <__sflush_r+0xae>
 8008d46:	2300      	movs	r3, #0
 8008d48:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008d4c:	682f      	ldr	r7, [r5, #0]
 8008d4e:	6a21      	ldr	r1, [r4, #32]
 8008d50:	602b      	str	r3, [r5, #0]
 8008d52:	d030      	beq.n	8008db6 <__sflush_r+0x92>
 8008d54:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008d56:	89a3      	ldrh	r3, [r4, #12]
 8008d58:	0759      	lsls	r1, r3, #29
 8008d5a:	d505      	bpl.n	8008d68 <__sflush_r+0x44>
 8008d5c:	6863      	ldr	r3, [r4, #4]
 8008d5e:	1ad2      	subs	r2, r2, r3
 8008d60:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008d62:	b10b      	cbz	r3, 8008d68 <__sflush_r+0x44>
 8008d64:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008d66:	1ad2      	subs	r2, r2, r3
 8008d68:	2300      	movs	r3, #0
 8008d6a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008d6c:	6a21      	ldr	r1, [r4, #32]
 8008d6e:	4628      	mov	r0, r5
 8008d70:	47b0      	blx	r6
 8008d72:	1c43      	adds	r3, r0, #1
 8008d74:	89a3      	ldrh	r3, [r4, #12]
 8008d76:	d106      	bne.n	8008d86 <__sflush_r+0x62>
 8008d78:	6829      	ldr	r1, [r5, #0]
 8008d7a:	291d      	cmp	r1, #29
 8008d7c:	d82b      	bhi.n	8008dd6 <__sflush_r+0xb2>
 8008d7e:	4a2a      	ldr	r2, [pc, #168]	@ (8008e28 <__sflush_r+0x104>)
 8008d80:	40ca      	lsrs	r2, r1
 8008d82:	07d6      	lsls	r6, r2, #31
 8008d84:	d527      	bpl.n	8008dd6 <__sflush_r+0xb2>
 8008d86:	2200      	movs	r2, #0
 8008d88:	6062      	str	r2, [r4, #4]
 8008d8a:	04d9      	lsls	r1, r3, #19
 8008d8c:	6922      	ldr	r2, [r4, #16]
 8008d8e:	6022      	str	r2, [r4, #0]
 8008d90:	d504      	bpl.n	8008d9c <__sflush_r+0x78>
 8008d92:	1c42      	adds	r2, r0, #1
 8008d94:	d101      	bne.n	8008d9a <__sflush_r+0x76>
 8008d96:	682b      	ldr	r3, [r5, #0]
 8008d98:	b903      	cbnz	r3, 8008d9c <__sflush_r+0x78>
 8008d9a:	6560      	str	r0, [r4, #84]	@ 0x54
 8008d9c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008d9e:	602f      	str	r7, [r5, #0]
 8008da0:	b1b9      	cbz	r1, 8008dd2 <__sflush_r+0xae>
 8008da2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008da6:	4299      	cmp	r1, r3
 8008da8:	d002      	beq.n	8008db0 <__sflush_r+0x8c>
 8008daa:	4628      	mov	r0, r5
 8008dac:	f7ff fc8c 	bl	80086c8 <_free_r>
 8008db0:	2300      	movs	r3, #0
 8008db2:	6363      	str	r3, [r4, #52]	@ 0x34
 8008db4:	e00d      	b.n	8008dd2 <__sflush_r+0xae>
 8008db6:	2301      	movs	r3, #1
 8008db8:	4628      	mov	r0, r5
 8008dba:	47b0      	blx	r6
 8008dbc:	4602      	mov	r2, r0
 8008dbe:	1c50      	adds	r0, r2, #1
 8008dc0:	d1c9      	bne.n	8008d56 <__sflush_r+0x32>
 8008dc2:	682b      	ldr	r3, [r5, #0]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d0c6      	beq.n	8008d56 <__sflush_r+0x32>
 8008dc8:	2b1d      	cmp	r3, #29
 8008dca:	d001      	beq.n	8008dd0 <__sflush_r+0xac>
 8008dcc:	2b16      	cmp	r3, #22
 8008dce:	d11e      	bne.n	8008e0e <__sflush_r+0xea>
 8008dd0:	602f      	str	r7, [r5, #0]
 8008dd2:	2000      	movs	r0, #0
 8008dd4:	e022      	b.n	8008e1c <__sflush_r+0xf8>
 8008dd6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008dda:	b21b      	sxth	r3, r3
 8008ddc:	e01b      	b.n	8008e16 <__sflush_r+0xf2>
 8008dde:	690f      	ldr	r7, [r1, #16]
 8008de0:	2f00      	cmp	r7, #0
 8008de2:	d0f6      	beq.n	8008dd2 <__sflush_r+0xae>
 8008de4:	0793      	lsls	r3, r2, #30
 8008de6:	680e      	ldr	r6, [r1, #0]
 8008de8:	bf08      	it	eq
 8008dea:	694b      	ldreq	r3, [r1, #20]
 8008dec:	600f      	str	r7, [r1, #0]
 8008dee:	bf18      	it	ne
 8008df0:	2300      	movne	r3, #0
 8008df2:	eba6 0807 	sub.w	r8, r6, r7
 8008df6:	608b      	str	r3, [r1, #8]
 8008df8:	f1b8 0f00 	cmp.w	r8, #0
 8008dfc:	dde9      	ble.n	8008dd2 <__sflush_r+0xae>
 8008dfe:	6a21      	ldr	r1, [r4, #32]
 8008e00:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008e02:	4643      	mov	r3, r8
 8008e04:	463a      	mov	r2, r7
 8008e06:	4628      	mov	r0, r5
 8008e08:	47b0      	blx	r6
 8008e0a:	2800      	cmp	r0, #0
 8008e0c:	dc08      	bgt.n	8008e20 <__sflush_r+0xfc>
 8008e0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008e16:	81a3      	strh	r3, [r4, #12]
 8008e18:	f04f 30ff 	mov.w	r0, #4294967295
 8008e1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e20:	4407      	add	r7, r0
 8008e22:	eba8 0800 	sub.w	r8, r8, r0
 8008e26:	e7e7      	b.n	8008df8 <__sflush_r+0xd4>
 8008e28:	20400001 	.word	0x20400001

08008e2c <_fflush_r>:
 8008e2c:	b538      	push	{r3, r4, r5, lr}
 8008e2e:	690b      	ldr	r3, [r1, #16]
 8008e30:	4605      	mov	r5, r0
 8008e32:	460c      	mov	r4, r1
 8008e34:	b913      	cbnz	r3, 8008e3c <_fflush_r+0x10>
 8008e36:	2500      	movs	r5, #0
 8008e38:	4628      	mov	r0, r5
 8008e3a:	bd38      	pop	{r3, r4, r5, pc}
 8008e3c:	b118      	cbz	r0, 8008e46 <_fflush_r+0x1a>
 8008e3e:	6a03      	ldr	r3, [r0, #32]
 8008e40:	b90b      	cbnz	r3, 8008e46 <_fflush_r+0x1a>
 8008e42:	f7ff fa05 	bl	8008250 <__sinit>
 8008e46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d0f3      	beq.n	8008e36 <_fflush_r+0xa>
 8008e4e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008e50:	07d0      	lsls	r0, r2, #31
 8008e52:	d404      	bmi.n	8008e5e <_fflush_r+0x32>
 8008e54:	0599      	lsls	r1, r3, #22
 8008e56:	d402      	bmi.n	8008e5e <_fflush_r+0x32>
 8008e58:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008e5a:	f7ff fc24 	bl	80086a6 <__retarget_lock_acquire_recursive>
 8008e5e:	4628      	mov	r0, r5
 8008e60:	4621      	mov	r1, r4
 8008e62:	f7ff ff5f 	bl	8008d24 <__sflush_r>
 8008e66:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008e68:	07da      	lsls	r2, r3, #31
 8008e6a:	4605      	mov	r5, r0
 8008e6c:	d4e4      	bmi.n	8008e38 <_fflush_r+0xc>
 8008e6e:	89a3      	ldrh	r3, [r4, #12]
 8008e70:	059b      	lsls	r3, r3, #22
 8008e72:	d4e1      	bmi.n	8008e38 <_fflush_r+0xc>
 8008e74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008e76:	f7ff fc17 	bl	80086a8 <__retarget_lock_release_recursive>
 8008e7a:	e7dd      	b.n	8008e38 <_fflush_r+0xc>

08008e7c <__swhatbuf_r>:
 8008e7c:	b570      	push	{r4, r5, r6, lr}
 8008e7e:	460c      	mov	r4, r1
 8008e80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e84:	2900      	cmp	r1, #0
 8008e86:	b096      	sub	sp, #88	@ 0x58
 8008e88:	4615      	mov	r5, r2
 8008e8a:	461e      	mov	r6, r3
 8008e8c:	da0d      	bge.n	8008eaa <__swhatbuf_r+0x2e>
 8008e8e:	89a3      	ldrh	r3, [r4, #12]
 8008e90:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008e94:	f04f 0100 	mov.w	r1, #0
 8008e98:	bf14      	ite	ne
 8008e9a:	2340      	movne	r3, #64	@ 0x40
 8008e9c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008ea0:	2000      	movs	r0, #0
 8008ea2:	6031      	str	r1, [r6, #0]
 8008ea4:	602b      	str	r3, [r5, #0]
 8008ea6:	b016      	add	sp, #88	@ 0x58
 8008ea8:	bd70      	pop	{r4, r5, r6, pc}
 8008eaa:	466a      	mov	r2, sp
 8008eac:	f000 f862 	bl	8008f74 <_fstat_r>
 8008eb0:	2800      	cmp	r0, #0
 8008eb2:	dbec      	blt.n	8008e8e <__swhatbuf_r+0x12>
 8008eb4:	9901      	ldr	r1, [sp, #4]
 8008eb6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008eba:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008ebe:	4259      	negs	r1, r3
 8008ec0:	4159      	adcs	r1, r3
 8008ec2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008ec6:	e7eb      	b.n	8008ea0 <__swhatbuf_r+0x24>

08008ec8 <__smakebuf_r>:
 8008ec8:	898b      	ldrh	r3, [r1, #12]
 8008eca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008ecc:	079d      	lsls	r5, r3, #30
 8008ece:	4606      	mov	r6, r0
 8008ed0:	460c      	mov	r4, r1
 8008ed2:	d507      	bpl.n	8008ee4 <__smakebuf_r+0x1c>
 8008ed4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008ed8:	6023      	str	r3, [r4, #0]
 8008eda:	6123      	str	r3, [r4, #16]
 8008edc:	2301      	movs	r3, #1
 8008ede:	6163      	str	r3, [r4, #20]
 8008ee0:	b003      	add	sp, #12
 8008ee2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ee4:	ab01      	add	r3, sp, #4
 8008ee6:	466a      	mov	r2, sp
 8008ee8:	f7ff ffc8 	bl	8008e7c <__swhatbuf_r>
 8008eec:	9f00      	ldr	r7, [sp, #0]
 8008eee:	4605      	mov	r5, r0
 8008ef0:	4639      	mov	r1, r7
 8008ef2:	4630      	mov	r0, r6
 8008ef4:	f7ff f894 	bl	8008020 <_malloc_r>
 8008ef8:	b948      	cbnz	r0, 8008f0e <__smakebuf_r+0x46>
 8008efa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008efe:	059a      	lsls	r2, r3, #22
 8008f00:	d4ee      	bmi.n	8008ee0 <__smakebuf_r+0x18>
 8008f02:	f023 0303 	bic.w	r3, r3, #3
 8008f06:	f043 0302 	orr.w	r3, r3, #2
 8008f0a:	81a3      	strh	r3, [r4, #12]
 8008f0c:	e7e2      	b.n	8008ed4 <__smakebuf_r+0xc>
 8008f0e:	89a3      	ldrh	r3, [r4, #12]
 8008f10:	6020      	str	r0, [r4, #0]
 8008f12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f16:	81a3      	strh	r3, [r4, #12]
 8008f18:	9b01      	ldr	r3, [sp, #4]
 8008f1a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008f1e:	b15b      	cbz	r3, 8008f38 <__smakebuf_r+0x70>
 8008f20:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f24:	4630      	mov	r0, r6
 8008f26:	f000 f837 	bl	8008f98 <_isatty_r>
 8008f2a:	b128      	cbz	r0, 8008f38 <__smakebuf_r+0x70>
 8008f2c:	89a3      	ldrh	r3, [r4, #12]
 8008f2e:	f023 0303 	bic.w	r3, r3, #3
 8008f32:	f043 0301 	orr.w	r3, r3, #1
 8008f36:	81a3      	strh	r3, [r4, #12]
 8008f38:	89a3      	ldrh	r3, [r4, #12]
 8008f3a:	431d      	orrs	r5, r3
 8008f3c:	81a5      	strh	r5, [r4, #12]
 8008f3e:	e7cf      	b.n	8008ee0 <__smakebuf_r+0x18>

08008f40 <memmove>:
 8008f40:	4288      	cmp	r0, r1
 8008f42:	b510      	push	{r4, lr}
 8008f44:	eb01 0402 	add.w	r4, r1, r2
 8008f48:	d902      	bls.n	8008f50 <memmove+0x10>
 8008f4a:	4284      	cmp	r4, r0
 8008f4c:	4623      	mov	r3, r4
 8008f4e:	d807      	bhi.n	8008f60 <memmove+0x20>
 8008f50:	1e43      	subs	r3, r0, #1
 8008f52:	42a1      	cmp	r1, r4
 8008f54:	d008      	beq.n	8008f68 <memmove+0x28>
 8008f56:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008f5a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008f5e:	e7f8      	b.n	8008f52 <memmove+0x12>
 8008f60:	4402      	add	r2, r0
 8008f62:	4601      	mov	r1, r0
 8008f64:	428a      	cmp	r2, r1
 8008f66:	d100      	bne.n	8008f6a <memmove+0x2a>
 8008f68:	bd10      	pop	{r4, pc}
 8008f6a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008f6e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008f72:	e7f7      	b.n	8008f64 <memmove+0x24>

08008f74 <_fstat_r>:
 8008f74:	b538      	push	{r3, r4, r5, lr}
 8008f76:	4d07      	ldr	r5, [pc, #28]	@ (8008f94 <_fstat_r+0x20>)
 8008f78:	2300      	movs	r3, #0
 8008f7a:	4604      	mov	r4, r0
 8008f7c:	4608      	mov	r0, r1
 8008f7e:	4611      	mov	r1, r2
 8008f80:	602b      	str	r3, [r5, #0]
 8008f82:	f7f8 fcb6 	bl	80018f2 <_fstat>
 8008f86:	1c43      	adds	r3, r0, #1
 8008f88:	d102      	bne.n	8008f90 <_fstat_r+0x1c>
 8008f8a:	682b      	ldr	r3, [r5, #0]
 8008f8c:	b103      	cbz	r3, 8008f90 <_fstat_r+0x1c>
 8008f8e:	6023      	str	r3, [r4, #0]
 8008f90:	bd38      	pop	{r3, r4, r5, pc}
 8008f92:	bf00      	nop
 8008f94:	20000ad4 	.word	0x20000ad4

08008f98 <_isatty_r>:
 8008f98:	b538      	push	{r3, r4, r5, lr}
 8008f9a:	4d06      	ldr	r5, [pc, #24]	@ (8008fb4 <_isatty_r+0x1c>)
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	4604      	mov	r4, r0
 8008fa0:	4608      	mov	r0, r1
 8008fa2:	602b      	str	r3, [r5, #0]
 8008fa4:	f7f8 fcb5 	bl	8001912 <_isatty>
 8008fa8:	1c43      	adds	r3, r0, #1
 8008faa:	d102      	bne.n	8008fb2 <_isatty_r+0x1a>
 8008fac:	682b      	ldr	r3, [r5, #0]
 8008fae:	b103      	cbz	r3, 8008fb2 <_isatty_r+0x1a>
 8008fb0:	6023      	str	r3, [r4, #0]
 8008fb2:	bd38      	pop	{r3, r4, r5, pc}
 8008fb4:	20000ad4 	.word	0x20000ad4

08008fb8 <_realloc_r>:
 8008fb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fbc:	4607      	mov	r7, r0
 8008fbe:	4614      	mov	r4, r2
 8008fc0:	460d      	mov	r5, r1
 8008fc2:	b921      	cbnz	r1, 8008fce <_realloc_r+0x16>
 8008fc4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008fc8:	4611      	mov	r1, r2
 8008fca:	f7ff b829 	b.w	8008020 <_malloc_r>
 8008fce:	b92a      	cbnz	r2, 8008fdc <_realloc_r+0x24>
 8008fd0:	f7ff fb7a 	bl	80086c8 <_free_r>
 8008fd4:	4625      	mov	r5, r4
 8008fd6:	4628      	mov	r0, r5
 8008fd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fdc:	f000 f81a 	bl	8009014 <_malloc_usable_size_r>
 8008fe0:	4284      	cmp	r4, r0
 8008fe2:	4606      	mov	r6, r0
 8008fe4:	d802      	bhi.n	8008fec <_realloc_r+0x34>
 8008fe6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008fea:	d8f4      	bhi.n	8008fd6 <_realloc_r+0x1e>
 8008fec:	4621      	mov	r1, r4
 8008fee:	4638      	mov	r0, r7
 8008ff0:	f7ff f816 	bl	8008020 <_malloc_r>
 8008ff4:	4680      	mov	r8, r0
 8008ff6:	b908      	cbnz	r0, 8008ffc <_realloc_r+0x44>
 8008ff8:	4645      	mov	r5, r8
 8008ffa:	e7ec      	b.n	8008fd6 <_realloc_r+0x1e>
 8008ffc:	42b4      	cmp	r4, r6
 8008ffe:	4622      	mov	r2, r4
 8009000:	4629      	mov	r1, r5
 8009002:	bf28      	it	cs
 8009004:	4632      	movcs	r2, r6
 8009006:	f7ff fb50 	bl	80086aa <memcpy>
 800900a:	4629      	mov	r1, r5
 800900c:	4638      	mov	r0, r7
 800900e:	f7ff fb5b 	bl	80086c8 <_free_r>
 8009012:	e7f1      	b.n	8008ff8 <_realloc_r+0x40>

08009014 <_malloc_usable_size_r>:
 8009014:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009018:	1f18      	subs	r0, r3, #4
 800901a:	2b00      	cmp	r3, #0
 800901c:	bfbc      	itt	lt
 800901e:	580b      	ldrlt	r3, [r1, r0]
 8009020:	18c0      	addlt	r0, r0, r3
 8009022:	4770      	bx	lr

08009024 <_init>:
 8009024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009026:	bf00      	nop
 8009028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800902a:	bc08      	pop	{r3}
 800902c:	469e      	mov	lr, r3
 800902e:	4770      	bx	lr

08009030 <_fini>:
 8009030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009032:	bf00      	nop
 8009034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009036:	bc08      	pop	{r3}
 8009038:	469e      	mov	lr, r3
 800903a:	4770      	bx	lr
