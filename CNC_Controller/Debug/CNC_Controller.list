
CNC_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007420  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000328  080075b0  080075b0  000085b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080078d8  080078d8  00009070  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080078d8  080078d8  000088d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080078e0  080078e0  00009070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080078e0  080078e0  000088e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080078e4  080078e4  000088e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  080078e8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000468  20000070  08007958  00009070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004d8  08007958  000094d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000146f0  00000000  00000000  000090a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ec9  00000000  00000000  0001d790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001278  00000000  00000000  00020660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e62  00000000  00000000  000218d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000039a1  00000000  00000000  0002273a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b18e  00000000  00000000  000260db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f5aee  00000000  00000000  00041269  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00136d57  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000535c  00000000  00000000  00136d9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  0013c0f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007598 	.word	0x08007598

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08007598 	.word	0x08007598

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <log_event_ids>:

void log_poll(void){
    // No-op: transmission is synchronous via _write/HAL_UART_Transmit.
}

void log_event_ids(uint8_t service_id, uint8_t state_id, int32_t status){
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	4603      	mov	r3, r0
 80005a4:	603a      	str	r2, [r7, #0]
 80005a6:	71fb      	strb	r3, [r7, #7]
 80005a8:	460b      	mov	r3, r1
 80005aa:	71bb      	strb	r3, [r7, #6]
    printf("L:svc=%u,state=%u,status=%ld\r\n", (unsigned)service_id, (unsigned)state_id, (long)status);
 80005ac:	79f9      	ldrb	r1, [r7, #7]
 80005ae:	79ba      	ldrb	r2, [r7, #6]
 80005b0:	683b      	ldr	r3, [r7, #0]
 80005b2:	4803      	ldr	r0, [pc, #12]	@ (80005c0 <log_event_ids+0x24>)
 80005b4:	f006 fa32 	bl	8006a1c <iprintf>
}
 80005b8:	bf00      	nop
 80005ba:	3708      	adds	r7, #8
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	080075b0 	.word	0x080075b0

080005c4 <log_event_names>:

void log_event_names(const char* service_name, const char* state_name, const char* status_text){
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b084      	sub	sp, #16
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	60f8      	str	r0, [r7, #12]
 80005cc:	60b9      	str	r1, [r7, #8]
 80005ce:	607a      	str	r2, [r7, #4]
    if(!service_name) service_name = "?";
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d101      	bne.n	80005da <log_event_names+0x16>
 80005d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000604 <log_event_names+0x40>)
 80005d8:	60fb      	str	r3, [r7, #12]
    if(!state_name) state_name = "?";
 80005da:	68bb      	ldr	r3, [r7, #8]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d101      	bne.n	80005e4 <log_event_names+0x20>
 80005e0:	4b08      	ldr	r3, [pc, #32]	@ (8000604 <log_event_names+0x40>)
 80005e2:	60bb      	str	r3, [r7, #8]
    if(!status_text) status_text = "?";
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d101      	bne.n	80005ee <log_event_names+0x2a>
 80005ea:	4b06      	ldr	r3, [pc, #24]	@ (8000604 <log_event_names+0x40>)
 80005ec:	607b      	str	r3, [r7, #4]
    printf("LOG:service=%s,state=%s,status=%s\r\n", service_name, state_name, status_text);
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	68ba      	ldr	r2, [r7, #8]
 80005f2:	68f9      	ldr	r1, [r7, #12]
 80005f4:	4804      	ldr	r0, [pc, #16]	@ (8000608 <log_event_names+0x44>)
 80005f6:	f006 fa11 	bl	8006a1c <iprintf>
}
 80005fa:	bf00      	nop
 80005fc:	3710      	adds	r7, #16
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	080075d0 	.word	0x080075d0
 8000608:	080075d4 	.word	0x080075d4

0800060c <_write>:

// Keep _write exactly as-is: used by printf to send to USART1.
int _write(int fd, char *ptr, int len) {
 800060c:	b580      	push	{r7, lr}
 800060e:	b086      	sub	sp, #24
 8000610:	af00      	add	r7, sp, #0
 8000612:	60f8      	str	r0, [r7, #12]
 8000614:	60b9      	str	r1, [r7, #8]
 8000616:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef hstatus;

    if (fd == 1 || fd == 2) {
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	2b01      	cmp	r3, #1
 800061c:	d002      	beq.n	8000624 <_write+0x18>
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	2b02      	cmp	r3, #2
 8000622:	d111      	bne.n	8000648 <_write+0x3c>
      hstatus = HAL_UART_Transmit(&huart1, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	b29a      	uxth	r2, r3
 8000628:	f04f 33ff 	mov.w	r3, #4294967295
 800062c:	68b9      	ldr	r1, [r7, #8]
 800062e:	4809      	ldr	r0, [pc, #36]	@ (8000654 <_write+0x48>)
 8000630:	f005 f9c2 	bl	80059b8 <HAL_UART_Transmit>
 8000634:	4603      	mov	r3, r0
 8000636:	75fb      	strb	r3, [r7, #23]
      if (hstatus == HAL_OK)
 8000638:	7dfb      	ldrb	r3, [r7, #23]
 800063a:	2b00      	cmp	r3, #0
 800063c:	d101      	bne.n	8000642 <_write+0x36>
        return len;
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	e004      	b.n	800064c <_write+0x40>
      else
        return -1;
 8000642:	f04f 33ff 	mov.w	r3, #4294967295
 8000646:	e001      	b.n	800064c <_write+0x40>
    }
    return -1;
 8000648:	f04f 33ff 	mov.w	r3, #4294967295
}
 800064c:	4618      	mov	r0, r3
 800064e:	3718      	adds	r7, #24
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	20000300 	.word	0x20000300

08000658 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800065e:	4b10      	ldr	r3, [pc, #64]	@ (80006a0 <MX_DMA_Init+0x48>)
 8000660:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000662:	4a0f      	ldr	r2, [pc, #60]	@ (80006a0 <MX_DMA_Init+0x48>)
 8000664:	f043 0301 	orr.w	r3, r3, #1
 8000668:	6493      	str	r3, [r2, #72]	@ 0x48
 800066a:	4b0d      	ldr	r3, [pc, #52]	@ (80006a0 <MX_DMA_Init+0x48>)
 800066c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800066e:	f003 0301 	and.w	r3, r3, #1
 8000672:	607b      	str	r3, [r7, #4]
 8000674:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000676:	2200      	movs	r2, #0
 8000678:	2100      	movs	r1, #0
 800067a:	200c      	movs	r0, #12
 800067c:	f001 f806 	bl	800168c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000680:	200c      	movs	r0, #12
 8000682:	f001 f82f 	bl	80016e4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000686:	2200      	movs	r2, #0
 8000688:	2100      	movs	r1, #0
 800068a:	200d      	movs	r0, #13
 800068c:	f000 fffe 	bl	800168c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000690:	200d      	movs	r0, #13
 8000692:	f001 f827 	bl	80016e4 <HAL_NVIC_EnableIRQ>

}
 8000696:	bf00      	nop
 8000698:	3708      	adds	r7, #8
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	40021000 	.word	0x40021000

080006a4 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b08c      	sub	sp, #48	@ 0x30
 80006a8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006aa:	f107 031c 	add.w	r3, r7, #28
 80006ae:	2200      	movs	r2, #0
 80006b0:	601a      	str	r2, [r3, #0]
 80006b2:	605a      	str	r2, [r3, #4]
 80006b4:	609a      	str	r2, [r3, #8]
 80006b6:	60da      	str	r2, [r3, #12]
 80006b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006ba:	4b4d      	ldr	r3, [pc, #308]	@ (80007f0 <MX_GPIO_Init+0x14c>)
 80006bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006be:	4a4c      	ldr	r2, [pc, #304]	@ (80007f0 <MX_GPIO_Init+0x14c>)
 80006c0:	f043 0310 	orr.w	r3, r3, #16
 80006c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006c6:	4b4a      	ldr	r3, [pc, #296]	@ (80007f0 <MX_GPIO_Init+0x14c>)
 80006c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006ca:	f003 0310 	and.w	r3, r3, #16
 80006ce:	61bb      	str	r3, [r7, #24]
 80006d0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006d2:	4b47      	ldr	r3, [pc, #284]	@ (80007f0 <MX_GPIO_Init+0x14c>)
 80006d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006d6:	4a46      	ldr	r2, [pc, #280]	@ (80007f0 <MX_GPIO_Init+0x14c>)
 80006d8:	f043 0304 	orr.w	r3, r3, #4
 80006dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006de:	4b44      	ldr	r3, [pc, #272]	@ (80007f0 <MX_GPIO_Init+0x14c>)
 80006e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006e2:	f003 0304 	and.w	r3, r3, #4
 80006e6:	617b      	str	r3, [r7, #20]
 80006e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ea:	4b41      	ldr	r3, [pc, #260]	@ (80007f0 <MX_GPIO_Init+0x14c>)
 80006ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006ee:	4a40      	ldr	r2, [pc, #256]	@ (80007f0 <MX_GPIO_Init+0x14c>)
 80006f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006f6:	4b3e      	ldr	r3, [pc, #248]	@ (80007f0 <MX_GPIO_Init+0x14c>)
 80006f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006fe:	613b      	str	r3, [r7, #16]
 8000700:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000702:	4b3b      	ldr	r3, [pc, #236]	@ (80007f0 <MX_GPIO_Init+0x14c>)
 8000704:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000706:	4a3a      	ldr	r2, [pc, #232]	@ (80007f0 <MX_GPIO_Init+0x14c>)
 8000708:	f043 0301 	orr.w	r3, r3, #1
 800070c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800070e:	4b38      	ldr	r3, [pc, #224]	@ (80007f0 <MX_GPIO_Init+0x14c>)
 8000710:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000712:	f003 0301 	and.w	r3, r3, #1
 8000716:	60fb      	str	r3, [r7, #12]
 8000718:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800071a:	4b35      	ldr	r3, [pc, #212]	@ (80007f0 <MX_GPIO_Init+0x14c>)
 800071c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800071e:	4a34      	ldr	r2, [pc, #208]	@ (80007f0 <MX_GPIO_Init+0x14c>)
 8000720:	f043 0302 	orr.w	r3, r3, #2
 8000724:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000726:	4b32      	ldr	r3, [pc, #200]	@ (80007f0 <MX_GPIO_Init+0x14c>)
 8000728:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800072a:	f003 0302 	and.w	r3, r3, #2
 800072e:	60bb      	str	r3, [r7, #8]
 8000730:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000732:	4b2f      	ldr	r3, [pc, #188]	@ (80007f0 <MX_GPIO_Init+0x14c>)
 8000734:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000736:	4a2e      	ldr	r2, [pc, #184]	@ (80007f0 <MX_GPIO_Init+0x14c>)
 8000738:	f043 0308 	orr.w	r3, r3, #8
 800073c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800073e:	4b2c      	ldr	r3, [pc, #176]	@ (80007f0 <MX_GPIO_Init+0x14c>)
 8000740:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000742:	f003 0308 	and.w	r3, r3, #8
 8000746:	607b      	str	r3, [r7, #4]
 8000748:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PE2 PE5 PE6 PE7
                           PE8 PE9 PE10 PE11
                           PE12 PE13 PE14 PE15
                           PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 800074a:	f64f 73e7 	movw	r3, #65511	@ 0xffe7
 800074e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000750:	2303      	movs	r3, #3
 8000752:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000754:	2300      	movs	r3, #0
 8000756:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000758:	f107 031c 	add.w	r3, r7, #28
 800075c:	4619      	mov	r1, r3
 800075e:	4825      	ldr	r0, [pc, #148]	@ (80007f4 <MX_GPIO_Init+0x150>)
 8000760:	f001 fa8c 	bl	8001c7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC1 PC2 PC3 PC4
                           PC5 PC6 PC7 PC8
                           PC9 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 8000764:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000768:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800076a:	2303      	movs	r3, #3
 800076c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076e:	2300      	movs	r3, #0
 8000770:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000772:	f107 031c 	add.w	r3, r7, #28
 8000776:	4619      	mov	r1, r3
 8000778:	481f      	ldr	r0, [pc, #124]	@ (80007f8 <MX_GPIO_Init+0x154>)
 800077a:	f001 fa7f 	bl	8001c7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800077e:	2303      	movs	r3, #3
 8000780:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000782:	2303      	movs	r3, #3
 8000784:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000786:	2300      	movs	r3, #0
 8000788:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800078a:	f107 031c 	add.w	r3, r7, #28
 800078e:	4619      	mov	r1, r3
 8000790:	481a      	ldr	r0, [pc, #104]	@ (80007fc <MX_GPIO_Init+0x158>)
 8000792:	f001 fa73 	bl	8001c7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA8 PA9
                           PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_8|GPIO_PIN_9
 8000796:	f641 730c 	movw	r3, #7948	@ 0x1f0c
 800079a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800079c:	2303      	movs	r3, #3
 800079e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a0:	2300      	movs	r3, #0
 80007a2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007a4:	f107 031c 	add.w	r3, r7, #28
 80007a8:	4619      	mov	r1, r3
 80007aa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007ae:	f001 fa65 	bl	8001c7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB4 PB5 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 80007b2:	f64f 7337 	movw	r3, #65335	@ 0xff37
 80007b6:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007b8:	2303      	movs	r3, #3
 80007ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007bc:	2300      	movs	r3, #0
 80007be:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007c0:	f107 031c 	add.w	r3, r7, #28
 80007c4:	4619      	mov	r1, r3
 80007c6:	480e      	ldr	r0, [pc, #56]	@ (8000800 <MX_GPIO_Init+0x15c>)
 80007c8:	f001 fa58 	bl	8001c7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15
                           PD0 PD1 PD2 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80007cc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80007d0:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007d2:	2303      	movs	r3, #3
 80007d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d6:	2300      	movs	r3, #0
 80007d8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007da:	f107 031c 	add.w	r3, r7, #28
 80007de:	4619      	mov	r1, r3
 80007e0:	4808      	ldr	r0, [pc, #32]	@ (8000804 <MX_GPIO_Init+0x160>)
 80007e2:	f001 fa4b 	bl	8001c7c <HAL_GPIO_Init>

}
 80007e6:	bf00      	nop
 80007e8:	3730      	adds	r7, #48	@ 0x30
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	40021000 	.word	0x40021000
 80007f4:	48001000 	.word	0x48001000
 80007f8:	48000800 	.word	0x48000800
 80007fc:	48001c00 	.word	0x48001c00
 8000800:	48000400 	.word	0x48000400
 8000804:	48000c00 	.word	0x48000c00

08000808 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800080c:	f000 fdd9 	bl	80013c2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000810:	f000 f81e 	bl	8000850 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000814:	f7ff ff46 	bl	80006a4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000818:	f7ff ff1e 	bl	8000658 <MX_DMA_Init>
  MX_SPI1_Init();
 800081c:	f000 f8ac 	bl	8000978 <MX_SPI1_Init>
  MX_TIM6_Init();
 8000820:	f000 fba8 	bl	8000f74 <MX_TIM6_Init>
  MX_TIM2_Init();
 8000824:	f000 faa6 	bl	8000d74 <MX_TIM2_Init>
  MX_TIM5_Init();
 8000828:	f000 fb4e 	bl	8000ec8 <MX_TIM5_Init>
  MX_TIM7_Init();
 800082c:	f000 fbd8 	bl	8000fe0 <MX_TIM7_Init>
  MX_TIM3_Init();
 8000830:	f000 faf4 	bl	8000e1c <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000834:	f000 fd0e 	bl	8001254 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
	// app_init(); // (comentado a pedido)

	// Enfileira diretamente no SPI (slave) o frame de teste "hello".
	// O master (Raspberry) deve gerar clock para que os bytes sejam enviados.
	(void)HAL_SPI_Transmit_IT(&hspi1, g_hello_frame, (uint16_t)sizeof g_hello_frame);
 8000838:	2207      	movs	r2, #7
 800083a:	4903      	ldr	r1, [pc, #12]	@ (8000848 <main+0x40>)
 800083c:	4803      	ldr	r0, [pc, #12]	@ (800084c <main+0x44>)
 800083e:	f003 fe55 	bl	80044ec <HAL_SPI_Transmit_IT>
	// LOGT_THIS(LOG_STATE_START, PROTO_OK, "hello", "queued");
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000842:	bf00      	nop
 8000844:	e7fd      	b.n	8000842 <main+0x3a>
 8000846:	bf00      	nop
 8000848:	20000000 	.word	0x20000000
 800084c:	2000008c 	.word	0x2000008c

08000850 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b096      	sub	sp, #88	@ 0x58
 8000854:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000856:	f107 0314 	add.w	r3, r7, #20
 800085a:	2244      	movs	r2, #68	@ 0x44
 800085c:	2100      	movs	r1, #0
 800085e:	4618      	mov	r0, r3
 8000860:	f006 f931 	bl	8006ac6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000864:	463b      	mov	r3, r7
 8000866:	2200      	movs	r2, #0
 8000868:	601a      	str	r2, [r3, #0]
 800086a:	605a      	str	r2, [r3, #4]
 800086c:	609a      	str	r2, [r3, #8]
 800086e:	60da      	str	r2, [r3, #12]
 8000870:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000872:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000876:	f001 fc9b 	bl	80021b0 <HAL_PWREx_ControlVoltageScaling>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000880:	f000 f856 	bl	8000930 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000884:	2310      	movs	r3, #16
 8000886:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000888:	2301      	movs	r3, #1
 800088a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800088c:	2300      	movs	r3, #0
 800088e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000890:	2360      	movs	r3, #96	@ 0x60
 8000892:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000894:	2302      	movs	r3, #2
 8000896:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000898:	2301      	movs	r3, #1
 800089a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800089c:	2301      	movs	r3, #1
 800089e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80008a0:	2328      	movs	r3, #40	@ 0x28
 80008a2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80008a4:	2307      	movs	r3, #7
 80008a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80008a8:	2302      	movs	r3, #2
 80008aa:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80008ac:	2302      	movs	r3, #2
 80008ae:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008b0:	f107 0314 	add.w	r3, r7, #20
 80008b4:	4618      	mov	r0, r3
 80008b6:	f001 fcdd 	bl	8002274 <HAL_RCC_OscConfig>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80008c0:	f000 f836 	bl	8000930 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008c4:	230f      	movs	r3, #15
 80008c6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008c8:	2303      	movs	r3, #3
 80008ca:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008cc:	2300      	movs	r3, #0
 80008ce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008d6:	2300      	movs	r3, #0
 80008d8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80008da:	463b      	mov	r3, r7
 80008dc:	2104      	movs	r1, #4
 80008de:	4618      	mov	r0, r3
 80008e0:	f002 f9ca 	bl	8002c78 <HAL_RCC_ClockConfig>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80008ea:	f000 f821 	bl	8000930 <Error_Handler>
  }
}
 80008ee:	bf00      	nop
 80008f0:	3758      	adds	r7, #88	@ 0x58
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
	...

080008f8 <HAL_SPI_TxCpltCallback>:

/* USER CODE BEGIN 4 */
// Reenvia automaticamente o frame de "hello" após cada transmissão
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *h)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  if (h && h->Instance == SPI1)
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	2b00      	cmp	r3, #0
 8000904:	d009      	beq.n	800091a <HAL_SPI_TxCpltCallback+0x22>
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	4a06      	ldr	r2, [pc, #24]	@ (8000924 <HAL_SPI_TxCpltCallback+0x2c>)
 800090c:	4293      	cmp	r3, r2
 800090e:	d104      	bne.n	800091a <HAL_SPI_TxCpltCallback+0x22>
  {
    // Re-armar TX com o mesmo buffer; o master precisa gerar novo clock
    (void)HAL_SPI_Transmit_IT(&hspi1, g_hello_frame, (uint16_t)sizeof g_hello_frame);
 8000910:	2207      	movs	r2, #7
 8000912:	4905      	ldr	r1, [pc, #20]	@ (8000928 <HAL_SPI_TxCpltCallback+0x30>)
 8000914:	4805      	ldr	r0, [pc, #20]	@ (800092c <HAL_SPI_TxCpltCallback+0x34>)
 8000916:	f003 fde9 	bl	80044ec <HAL_SPI_Transmit_IT>
  }
}
 800091a:	bf00      	nop
 800091c:	3708      	adds	r7, #8
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	40013000 	.word	0x40013000
 8000928:	20000000 	.word	0x20000000
 800092c:	2000008c 	.word	0x2000008c

08000930 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
#if LOG_ENABLE
	log_event_ids(LOG_SVC_APP, LOG_STATE_ERROR, -1);
 8000934:	f04f 32ff 	mov.w	r2, #4294967295
 8000938:	2164      	movs	r1, #100	@ 0x64
 800093a:	2000      	movs	r0, #0
 800093c:	f7ff fe2e 	bl	800059c <log_event_ids>
	log_event_names("app", "error", "Error_Handler");
 8000940:	4a04      	ldr	r2, [pc, #16]	@ (8000954 <Error_Handler+0x24>)
 8000942:	4905      	ldr	r1, [pc, #20]	@ (8000958 <Error_Handler+0x28>)
 8000944:	4805      	ldr	r0, [pc, #20]	@ (800095c <Error_Handler+0x2c>)
 8000946:	f7ff fe3d 	bl	80005c4 <log_event_names>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800094a:	b672      	cpsid	i
}
 800094c:	bf00      	nop
#endif
	__disable_irq();
	while (1) {
 800094e:	bf00      	nop
 8000950:	e7fd      	b.n	800094e <Error_Handler+0x1e>
 8000952:	bf00      	nop
 8000954:	080075f8 	.word	0x080075f8
 8000958:	08007608 	.word	0x08007608
 800095c:	08007610 	.word	0x08007610

08000960 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8000960:	b480      	push	{r7}
 8000962:	b083      	sub	sp, #12
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
 8000968:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
	 ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 800096a:	bf00      	nop
 800096c:	370c      	adds	r7, #12
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr
	...

08000978 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800097c:	4b18      	ldr	r3, [pc, #96]	@ (80009e0 <MX_SPI1_Init+0x68>)
 800097e:	4a19      	ldr	r2, [pc, #100]	@ (80009e4 <MX_SPI1_Init+0x6c>)
 8000980:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8000982:	4b17      	ldr	r3, [pc, #92]	@ (80009e0 <MX_SPI1_Init+0x68>)
 8000984:	2200      	movs	r2, #0
 8000986:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000988:	4b15      	ldr	r3, [pc, #84]	@ (80009e0 <MX_SPI1_Init+0x68>)
 800098a:	2200      	movs	r2, #0
 800098c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800098e:	4b14      	ldr	r3, [pc, #80]	@ (80009e0 <MX_SPI1_Init+0x68>)
 8000990:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000994:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000996:	4b12      	ldr	r3, [pc, #72]	@ (80009e0 <MX_SPI1_Init+0x68>)
 8000998:	2202      	movs	r2, #2
 800099a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800099c:	4b10      	ldr	r3, [pc, #64]	@ (80009e0 <MX_SPI1_Init+0x68>)
 800099e:	2201      	movs	r2, #1
 80009a0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 80009a2:	4b0f      	ldr	r3, [pc, #60]	@ (80009e0 <MX_SPI1_Init+0x68>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009a8:	4b0d      	ldr	r3, [pc, #52]	@ (80009e0 <MX_SPI1_Init+0x68>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009ae:	4b0c      	ldr	r3, [pc, #48]	@ (80009e0 <MX_SPI1_Init+0x68>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009b4:	4b0a      	ldr	r3, [pc, #40]	@ (80009e0 <MX_SPI1_Init+0x68>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80009ba:	4b09      	ldr	r3, [pc, #36]	@ (80009e0 <MX_SPI1_Init+0x68>)
 80009bc:	2207      	movs	r2, #7
 80009be:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80009c0:	4b07      	ldr	r3, [pc, #28]	@ (80009e0 <MX_SPI1_Init+0x68>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80009c6:	4b06      	ldr	r3, [pc, #24]	@ (80009e0 <MX_SPI1_Init+0x68>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009cc:	4804      	ldr	r0, [pc, #16]	@ (80009e0 <MX_SPI1_Init+0x68>)
 80009ce:	f003 fb9f 	bl	8004110 <HAL_SPI_Init>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 80009d8:	f7ff ffaa 	bl	8000930 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009dc:	bf00      	nop
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	2000008c 	.word	0x2000008c
 80009e4:	40013000 	.word	0x40013000

080009e8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b08a      	sub	sp, #40	@ 0x28
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f0:	f107 0314 	add.w	r3, r7, #20
 80009f4:	2200      	movs	r2, #0
 80009f6:	601a      	str	r2, [r3, #0]
 80009f8:	605a      	str	r2, [r3, #4]
 80009fa:	609a      	str	r2, [r3, #8]
 80009fc:	60da      	str	r2, [r3, #12]
 80009fe:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a45      	ldr	r2, [pc, #276]	@ (8000b1c <HAL_SPI_MspInit+0x134>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	f040 8083 	bne.w	8000b12 <HAL_SPI_MspInit+0x12a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a0c:	4b44      	ldr	r3, [pc, #272]	@ (8000b20 <HAL_SPI_MspInit+0x138>)
 8000a0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a10:	4a43      	ldr	r2, [pc, #268]	@ (8000b20 <HAL_SPI_MspInit+0x138>)
 8000a12:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000a16:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a18:	4b41      	ldr	r3, [pc, #260]	@ (8000b20 <HAL_SPI_MspInit+0x138>)
 8000a1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a1c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000a20:	613b      	str	r3, [r7, #16]
 8000a22:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a24:	4b3e      	ldr	r3, [pc, #248]	@ (8000b20 <HAL_SPI_MspInit+0x138>)
 8000a26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a28:	4a3d      	ldr	r2, [pc, #244]	@ (8000b20 <HAL_SPI_MspInit+0x138>)
 8000a2a:	f043 0301 	orr.w	r3, r3, #1
 8000a2e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a30:	4b3b      	ldr	r3, [pc, #236]	@ (8000b20 <HAL_SPI_MspInit+0x138>)
 8000a32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a34:	f003 0301 	and.w	r3, r3, #1
 8000a38:	60fb      	str	r3, [r7, #12]
 8000a3a:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000a3c:	23f0      	movs	r3, #240	@ 0xf0
 8000a3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a40:	2302      	movs	r3, #2
 8000a42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a44:	2300      	movs	r3, #0
 8000a46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a48:	2303      	movs	r3, #3
 8000a4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a4c:	2305      	movs	r3, #5
 8000a4e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a50:	f107 0314 	add.w	r3, r7, #20
 8000a54:	4619      	mov	r1, r3
 8000a56:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a5a:	f001 f90f 	bl	8001c7c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8000a5e:	4b31      	ldr	r3, [pc, #196]	@ (8000b24 <HAL_SPI_MspInit+0x13c>)
 8000a60:	4a31      	ldr	r2, [pc, #196]	@ (8000b28 <HAL_SPI_MspInit+0x140>)
 8000a62:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_1;
 8000a64:	4b2f      	ldr	r3, [pc, #188]	@ (8000b24 <HAL_SPI_MspInit+0x13c>)
 8000a66:	2201      	movs	r2, #1
 8000a68:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a6a:	4b2e      	ldr	r3, [pc, #184]	@ (8000b24 <HAL_SPI_MspInit+0x13c>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a70:	4b2c      	ldr	r3, [pc, #176]	@ (8000b24 <HAL_SPI_MspInit+0x13c>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a76:	4b2b      	ldr	r3, [pc, #172]	@ (8000b24 <HAL_SPI_MspInit+0x13c>)
 8000a78:	2280      	movs	r2, #128	@ 0x80
 8000a7a:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a7c:	4b29      	ldr	r3, [pc, #164]	@ (8000b24 <HAL_SPI_MspInit+0x13c>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a82:	4b28      	ldr	r3, [pc, #160]	@ (8000b24 <HAL_SPI_MspInit+0x13c>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 8000a88:	4b26      	ldr	r3, [pc, #152]	@ (8000b24 <HAL_SPI_MspInit+0x13c>)
 8000a8a:	2220      	movs	r2, #32
 8000a8c:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000a8e:	4b25      	ldr	r3, [pc, #148]	@ (8000b24 <HAL_SPI_MspInit+0x13c>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000a94:	4823      	ldr	r0, [pc, #140]	@ (8000b24 <HAL_SPI_MspInit+0x13c>)
 8000a96:	f000 fe49 	bl	800172c <HAL_DMA_Init>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <HAL_SPI_MspInit+0xbc>
    {
      Error_Handler();
 8000aa0:	f7ff ff46 	bl	8000930 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	4a1f      	ldr	r2, [pc, #124]	@ (8000b24 <HAL_SPI_MspInit+0x13c>)
 8000aa8:	659a      	str	r2, [r3, #88]	@ 0x58
 8000aaa:	4a1e      	ldr	r2, [pc, #120]	@ (8000b24 <HAL_SPI_MspInit+0x13c>)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8000ab0:	4b1e      	ldr	r3, [pc, #120]	@ (8000b2c <HAL_SPI_MspInit+0x144>)
 8000ab2:	4a1f      	ldr	r2, [pc, #124]	@ (8000b30 <HAL_SPI_MspInit+0x148>)
 8000ab4:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 8000ab6:	4b1d      	ldr	r3, [pc, #116]	@ (8000b2c <HAL_SPI_MspInit+0x144>)
 8000ab8:	2201      	movs	r2, #1
 8000aba:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000abc:	4b1b      	ldr	r3, [pc, #108]	@ (8000b2c <HAL_SPI_MspInit+0x144>)
 8000abe:	2210      	movs	r2, #16
 8000ac0:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ac2:	4b1a      	ldr	r3, [pc, #104]	@ (8000b2c <HAL_SPI_MspInit+0x144>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000ac8:	4b18      	ldr	r3, [pc, #96]	@ (8000b2c <HAL_SPI_MspInit+0x144>)
 8000aca:	2280      	movs	r2, #128	@ 0x80
 8000acc:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ace:	4b17      	ldr	r3, [pc, #92]	@ (8000b2c <HAL_SPI_MspInit+0x144>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ad4:	4b15      	ldr	r3, [pc, #84]	@ (8000b2c <HAL_SPI_MspInit+0x144>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 8000ada:	4b14      	ldr	r3, [pc, #80]	@ (8000b2c <HAL_SPI_MspInit+0x144>)
 8000adc:	2220      	movs	r2, #32
 8000ade:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000ae0:	4b12      	ldr	r3, [pc, #72]	@ (8000b2c <HAL_SPI_MspInit+0x144>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000ae6:	4811      	ldr	r0, [pc, #68]	@ (8000b2c <HAL_SPI_MspInit+0x144>)
 8000ae8:	f000 fe20 	bl	800172c <HAL_DMA_Init>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <HAL_SPI_MspInit+0x10e>
    {
      Error_Handler();
 8000af2:	f7ff ff1d 	bl	8000930 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	4a0c      	ldr	r2, [pc, #48]	@ (8000b2c <HAL_SPI_MspInit+0x144>)
 8000afa:	655a      	str	r2, [r3, #84]	@ 0x54
 8000afc:	4a0b      	ldr	r2, [pc, #44]	@ (8000b2c <HAL_SPI_MspInit+0x144>)
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000b02:	2200      	movs	r2, #0
 8000b04:	2100      	movs	r1, #0
 8000b06:	2023      	movs	r0, #35	@ 0x23
 8000b08:	f000 fdc0 	bl	800168c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000b0c:	2023      	movs	r0, #35	@ 0x23
 8000b0e:	f000 fde9 	bl	80016e4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000b12:	bf00      	nop
 8000b14:	3728      	adds	r7, #40	@ 0x28
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	40013000 	.word	0x40013000
 8000b20:	40021000 	.word	0x40021000
 8000b24:	200000f0 	.word	0x200000f0
 8000b28:	4002001c 	.word	0x4002001c
 8000b2c:	20000138 	.word	0x20000138
 8000b30:	40020030 	.word	0x40020030

08000b34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b3a:	4b0f      	ldr	r3, [pc, #60]	@ (8000b78 <HAL_MspInit+0x44>)
 8000b3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b3e:	4a0e      	ldr	r2, [pc, #56]	@ (8000b78 <HAL_MspInit+0x44>)
 8000b40:	f043 0301 	orr.w	r3, r3, #1
 8000b44:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b46:	4b0c      	ldr	r3, [pc, #48]	@ (8000b78 <HAL_MspInit+0x44>)
 8000b48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b4a:	f003 0301 	and.w	r3, r3, #1
 8000b4e:	607b      	str	r3, [r7, #4]
 8000b50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b52:	4b09      	ldr	r3, [pc, #36]	@ (8000b78 <HAL_MspInit+0x44>)
 8000b54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b56:	4a08      	ldr	r2, [pc, #32]	@ (8000b78 <HAL_MspInit+0x44>)
 8000b58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b5c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b5e:	4b06      	ldr	r3, [pc, #24]	@ (8000b78 <HAL_MspInit+0x44>)
 8000b60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b66:	603b      	str	r3, [r7, #0]
 8000b68:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b6a:	bf00      	nop
 8000b6c:	370c      	adds	r7, #12
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	40021000 	.word	0x40021000

08000b7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8000b80:	bf00      	nop
 8000b82:	e7fd      	b.n	8000b80 <NMI_Handler+0x4>

08000b84 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b88:	bf00      	nop
 8000b8a:	e7fd      	b.n	8000b88 <HardFault_Handler+0x4>

08000b8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b90:	bf00      	nop
 8000b92:	e7fd      	b.n	8000b90 <MemManage_Handler+0x4>

08000b94 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b98:	bf00      	nop
 8000b9a:	e7fd      	b.n	8000b98 <BusFault_Handler+0x4>

08000b9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ba0:	bf00      	nop
 8000ba2:	e7fd      	b.n	8000ba0 <UsageFault_Handler+0x4>

08000ba4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ba8:	bf00      	nop
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr

08000bb2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bb2:	b480      	push	{r7}
 8000bb4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bb6:	bf00      	nop
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr

08000bc0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bc4:	bf00      	nop
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr

08000bce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bce:	b580      	push	{r7, lr}
 8000bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bd2:	f000 fc4b 	bl	800146c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}
	...

08000bdc <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8000be0:	4802      	ldr	r0, [pc, #8]	@ (8000bec <DMA1_Channel2_IRQHandler+0x10>)
 8000be2:	f000 ff9c 	bl	8001b1e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000be6:	bf00      	nop
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	200000f0 	.word	0x200000f0

08000bf0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000bf4:	4802      	ldr	r0, [pc, #8]	@ (8000c00 <DMA1_Channel3_IRQHandler+0x10>)
 8000bf6:	f000 ff92 	bl	8001b1e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000bfa:	bf00      	nop
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	20000138 	.word	0x20000138

08000c04 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000c08:	4802      	ldr	r0, [pc, #8]	@ (8000c14 <SPI1_IRQHandler+0x10>)
 8000c0a:	f003 fd05 	bl	8004618 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000c0e:	bf00      	nop
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	2000008c 	.word	0x2000008c

08000c18 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c1c:	4802      	ldr	r0, [pc, #8]	@ (8000c28 <TIM6_DAC_IRQHandler+0x10>)
 8000c1e:	f004 facf 	bl	80051c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c22:	bf00      	nop
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	20000268 	.word	0x20000268

08000c2c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000c30:	4802      	ldr	r0, [pc, #8]	@ (8000c3c <TIM7_IRQHandler+0x10>)
 8000c32:	f004 fac5 	bl	80051c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000c36:	bf00      	nop
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	200002b4 	.word	0x200002b4

08000c40 <_read>:
	_kill(status, -1);
	while (1) {
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b086      	sub	sp, #24
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	60f8      	str	r0, [r7, #12]
 8000c48:	60b9      	str	r1, [r7, #8]
 8000c4a:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	617b      	str	r3, [r7, #20]
 8000c50:	e00a      	b.n	8000c68 <_read+0x28>
		*ptr++ = __io_getchar();
 8000c52:	f3af 8000 	nop.w
 8000c56:	4601      	mov	r1, r0
 8000c58:	68bb      	ldr	r3, [r7, #8]
 8000c5a:	1c5a      	adds	r2, r3, #1
 8000c5c:	60ba      	str	r2, [r7, #8]
 8000c5e:	b2ca      	uxtb	r2, r1
 8000c60:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8000c62:	697b      	ldr	r3, [r7, #20]
 8000c64:	3301      	adds	r3, #1
 8000c66:	617b      	str	r3, [r7, #20]
 8000c68:	697a      	ldr	r2, [r7, #20]
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	429a      	cmp	r2, r3
 8000c6e:	dbf0      	blt.n	8000c52 <_read+0x12>
	}

	return len;
 8000c70:	687b      	ldr	r3, [r7, #4]
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	3718      	adds	r7, #24
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}

08000c7a <_close>:
		__io_putchar(*ptr++);
	}
	return len;
}

int _close(int file) {
 8000c7a:	b480      	push	{r7}
 8000c7c:	b083      	sub	sp, #12
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 8000c82:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	370c      	adds	r7, #12
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr

08000c92 <_fstat>:

int _fstat(int file, struct stat *st) {
 8000c92:	b480      	push	{r7}
 8000c94:	b083      	sub	sp, #12
 8000c96:	af00      	add	r7, sp, #0
 8000c98:	6078      	str	r0, [r7, #4]
 8000c9a:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ca2:	605a      	str	r2, [r3, #4]
	return 0;
 8000ca4:	2300      	movs	r3, #0
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	370c      	adds	r7, #12
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr

08000cb2 <_isatty>:

int _isatty(int file) {
 8000cb2:	b480      	push	{r7}
 8000cb4:	b083      	sub	sp, #12
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 8000cba:	2301      	movs	r3, #1
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	370c      	adds	r7, #12
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr

08000cc8 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8000cc8:	b480      	push	{r7}
 8000cca:	b085      	sub	sp, #20
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	60f8      	str	r0, [r7, #12]
 8000cd0:	60b9      	str	r1, [r7, #8]
 8000cd2:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 8000cd4:	2300      	movs	r3, #0
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3714      	adds	r7, #20
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
	...

08000ce4 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b086      	sub	sp, #24
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 8000cec:	4a14      	ldr	r2, [pc, #80]	@ (8000d40 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 8000cee:	4b15      	ldr	r3, [pc, #84]	@ (8000d44 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 8000cf0:	1ad3      	subs	r3, r2, r3
 8000cf2:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8000cf8:	4b13      	ldr	r3, [pc, #76]	@ (8000d48 <_sbrk+0x64>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d102      	bne.n	8000d06 <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 8000d00:	4b11      	ldr	r3, [pc, #68]	@ (8000d48 <_sbrk+0x64>)
 8000d02:	4a12      	ldr	r2, [pc, #72]	@ (8000d4c <_sbrk+0x68>)
 8000d04:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 8000d06:	4b10      	ldr	r3, [pc, #64]	@ (8000d48 <_sbrk+0x64>)
 8000d08:	681a      	ldr	r2, [r3, #0]
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	4413      	add	r3, r2
 8000d0e:	693a      	ldr	r2, [r7, #16]
 8000d10:	429a      	cmp	r2, r3
 8000d12:	d207      	bcs.n	8000d24 <_sbrk+0x40>
		errno = ENOMEM;
 8000d14:	f005 ff36 	bl	8006b84 <__errno>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	220c      	movs	r2, #12
 8000d1c:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 8000d1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d22:	e009      	b.n	8000d38 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8000d24:	4b08      	ldr	r3, [pc, #32]	@ (8000d48 <_sbrk+0x64>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 8000d2a:	4b07      	ldr	r3, [pc, #28]	@ (8000d48 <_sbrk+0x64>)
 8000d2c:	681a      	ldr	r2, [r3, #0]
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	4413      	add	r3, r2
 8000d32:	4a05      	ldr	r2, [pc, #20]	@ (8000d48 <_sbrk+0x64>)
 8000d34:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 8000d36:	68fb      	ldr	r3, [r7, #12]
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	3718      	adds	r7, #24
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	20018000 	.word	0x20018000
 8000d44:	00000400 	.word	0x00000400
 8000d48:	20000180 	.word	0x20000180
 8000d4c:	200004d8 	.word	0x200004d8

08000d50 <SystemInit>:
/**
 * @brief  Setup the microcontroller system.
 * @retval None
 */

void SystemInit(void) {
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 20U) | (3UL << 22U)); /* set CP10 and CP11 Full Access */
 8000d54:	4b06      	ldr	r3, [pc, #24]	@ (8000d70 <SystemInit+0x20>)
 8000d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d5a:	4a05      	ldr	r2, [pc, #20]	@ (8000d70 <SystemInit+0x20>)
 8000d5c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d60:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000d64:	bf00      	nop
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	e000ed00 	.word	0xe000ed00

08000d74 <MX_TIM2_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b08c      	sub	sp, #48	@ 0x30
 8000d78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000d7a:	f107 030c 	add.w	r3, r7, #12
 8000d7e:	2224      	movs	r2, #36	@ 0x24
 8000d80:	2100      	movs	r1, #0
 8000d82:	4618      	mov	r0, r3
 8000d84:	f005 fe9f 	bl	8006ac6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d88:	463b      	mov	r3, r7
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	601a      	str	r2, [r3, #0]
 8000d8e:	605a      	str	r2, [r3, #4]
 8000d90:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d92:	4b21      	ldr	r3, [pc, #132]	@ (8000e18 <MX_TIM2_Init+0xa4>)
 8000d94:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d98:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000d9a:	4b1f      	ldr	r3, [pc, #124]	@ (8000e18 <MX_TIM2_Init+0xa4>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000da0:	4b1d      	ldr	r3, [pc, #116]	@ (8000e18 <MX_TIM2_Init+0xa4>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000da6:	4b1c      	ldr	r3, [pc, #112]	@ (8000e18 <MX_TIM2_Init+0xa4>)
 8000da8:	f04f 32ff 	mov.w	r2, #4294967295
 8000dac:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dae:	4b1a      	ldr	r3, [pc, #104]	@ (8000e18 <MX_TIM2_Init+0xa4>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000db4:	4b18      	ldr	r3, [pc, #96]	@ (8000e18 <MX_TIM2_Init+0xa4>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000dde:	f107 030c 	add.w	r3, r7, #12
 8000de2:	4619      	mov	r1, r3
 8000de4:	480c      	ldr	r0, [pc, #48]	@ (8000e18 <MX_TIM2_Init+0xa4>)
 8000de6:	f004 f829 	bl	8004e3c <HAL_TIM_Encoder_Init>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000df0:	f7ff fd9e 	bl	8000930 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000df4:	2300      	movs	r3, #0
 8000df6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000dfc:	463b      	mov	r3, r7
 8000dfe:	4619      	mov	r1, r3
 8000e00:	4805      	ldr	r0, [pc, #20]	@ (8000e18 <MX_TIM2_Init+0xa4>)
 8000e02:	f004 fbbd 	bl	8005580 <HAL_TIMEx_MasterConfigSynchronization>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000e0c:	f7ff fd90 	bl	8000930 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e10:	bf00      	nop
 8000e12:	3730      	adds	r7, #48	@ 0x30
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	20000184 	.word	0x20000184

08000e1c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b08c      	sub	sp, #48	@ 0x30
 8000e20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000e22:	f107 030c 	add.w	r3, r7, #12
 8000e26:	2224      	movs	r2, #36	@ 0x24
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f005 fe4b 	bl	8006ac6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e30:	463b      	mov	r3, r7
 8000e32:	2200      	movs	r2, #0
 8000e34:	601a      	str	r2, [r3, #0]
 8000e36:	605a      	str	r2, [r3, #4]
 8000e38:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e3a:	4b21      	ldr	r3, [pc, #132]	@ (8000ec0 <MX_TIM3_Init+0xa4>)
 8000e3c:	4a21      	ldr	r2, [pc, #132]	@ (8000ec4 <MX_TIM3_Init+0xa8>)
 8000e3e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000e40:	4b1f      	ldr	r3, [pc, #124]	@ (8000ec0 <MX_TIM3_Init+0xa4>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e46:	4b1e      	ldr	r3, [pc, #120]	@ (8000ec0 <MX_TIM3_Init+0xa4>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000e4c:	4b1c      	ldr	r3, [pc, #112]	@ (8000ec0 <MX_TIM3_Init+0xa4>)
 8000e4e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000e52:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e54:	4b1a      	ldr	r3, [pc, #104]	@ (8000ec0 <MX_TIM3_Init+0xa4>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e5a:	4b19      	ldr	r3, [pc, #100]	@ (8000ec0 <MX_TIM3_Init+0xa4>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000e60:	2301      	movs	r3, #1
 8000e62:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000e64:	2300      	movs	r3, #0
 8000e66:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000e70:	2300      	movs	r3, #0
 8000e72:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000e74:	2300      	movs	r3, #0
 8000e76:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000e80:	2300      	movs	r3, #0
 8000e82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000e84:	f107 030c 	add.w	r3, r7, #12
 8000e88:	4619      	mov	r1, r3
 8000e8a:	480d      	ldr	r0, [pc, #52]	@ (8000ec0 <MX_TIM3_Init+0xa4>)
 8000e8c:	f003 ffd6 	bl	8004e3c <HAL_TIM_Encoder_Init>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000e96:	f7ff fd4b 	bl	8000930 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ea2:	463b      	mov	r3, r7
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	4806      	ldr	r0, [pc, #24]	@ (8000ec0 <MX_TIM3_Init+0xa4>)
 8000ea8:	f004 fb6a 	bl	8005580 <HAL_TIMEx_MasterConfigSynchronization>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000eb2:	f7ff fd3d 	bl	8000930 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000eb6:	bf00      	nop
 8000eb8:	3730      	adds	r7, #48	@ 0x30
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	200001d0 	.word	0x200001d0
 8000ec4:	40000400 	.word	0x40000400

08000ec8 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b08c      	sub	sp, #48	@ 0x30
 8000ecc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000ece:	f107 030c 	add.w	r3, r7, #12
 8000ed2:	2224      	movs	r2, #36	@ 0x24
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f005 fdf5 	bl	8006ac6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000edc:	463b      	mov	r3, r7
 8000ede:	2200      	movs	r2, #0
 8000ee0:	601a      	str	r2, [r3, #0]
 8000ee2:	605a      	str	r2, [r3, #4]
 8000ee4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000ee6:	4b21      	ldr	r3, [pc, #132]	@ (8000f6c <MX_TIM5_Init+0xa4>)
 8000ee8:	4a21      	ldr	r2, [pc, #132]	@ (8000f70 <MX_TIM5_Init+0xa8>)
 8000eea:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000eec:	4b1f      	ldr	r3, [pc, #124]	@ (8000f6c <MX_TIM5_Init+0xa4>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ef2:	4b1e      	ldr	r3, [pc, #120]	@ (8000f6c <MX_TIM5_Init+0xa4>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000ef8:	4b1c      	ldr	r3, [pc, #112]	@ (8000f6c <MX_TIM5_Init+0xa4>)
 8000efa:	f04f 32ff 	mov.w	r2, #4294967295
 8000efe:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f00:	4b1a      	ldr	r3, [pc, #104]	@ (8000f6c <MX_TIM5_Init+0xa4>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f06:	4b19      	ldr	r3, [pc, #100]	@ (8000f6c <MX_TIM5_Init+0xa4>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000f10:	2300      	movs	r3, #0
 8000f12:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000f14:	2301      	movs	r3, #1
 8000f16:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000f20:	2300      	movs	r3, #0
 8000f22:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000f24:	2301      	movs	r3, #1
 8000f26:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8000f30:	f107 030c 	add.w	r3, r7, #12
 8000f34:	4619      	mov	r1, r3
 8000f36:	480d      	ldr	r0, [pc, #52]	@ (8000f6c <MX_TIM5_Init+0xa4>)
 8000f38:	f003 ff80 	bl	8004e3c <HAL_TIM_Encoder_Init>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8000f42:	f7ff fcf5 	bl	8000930 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f46:	2300      	movs	r3, #0
 8000f48:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000f4e:	463b      	mov	r3, r7
 8000f50:	4619      	mov	r1, r3
 8000f52:	4806      	ldr	r0, [pc, #24]	@ (8000f6c <MX_TIM5_Init+0xa4>)
 8000f54:	f004 fb14 	bl	8005580 <HAL_TIMEx_MasterConfigSynchronization>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8000f5e:	f7ff fce7 	bl	8000930 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000f62:	bf00      	nop
 8000f64:	3730      	adds	r7, #48	@ 0x30
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	2000021c 	.word	0x2000021c
 8000f70:	40000c00 	.word	0x40000c00

08000f74 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f7a:	1d3b      	adds	r3, r7, #4
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	605a      	str	r2, [r3, #4]
 8000f82:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000f84:	4b14      	ldr	r3, [pc, #80]	@ (8000fd8 <MX_TIM6_Init+0x64>)
 8000f86:	4a15      	ldr	r2, [pc, #84]	@ (8000fdc <MX_TIM6_Init+0x68>)
 8000f88:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 79;
 8000f8a:	4b13      	ldr	r3, [pc, #76]	@ (8000fd8 <MX_TIM6_Init+0x64>)
 8000f8c:	224f      	movs	r2, #79	@ 0x4f
 8000f8e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f90:	4b11      	ldr	r3, [pc, #68]	@ (8000fd8 <MX_TIM6_Init+0x64>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 19;
 8000f96:	4b10      	ldr	r3, [pc, #64]	@ (8000fd8 <MX_TIM6_Init+0x64>)
 8000f98:	2213      	movs	r2, #19
 8000f9a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f9c:	4b0e      	ldr	r3, [pc, #56]	@ (8000fd8 <MX_TIM6_Init+0x64>)
 8000f9e:	2280      	movs	r2, #128	@ 0x80
 8000fa0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000fa2:	480d      	ldr	r0, [pc, #52]	@ (8000fd8 <MX_TIM6_Init+0x64>)
 8000fa4:	f003 fe40 	bl	8004c28 <HAL_TIM_Base_Init>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000fae:	f7ff fcbf 	bl	8000930 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000fb2:	2320      	movs	r3, #32
 8000fb4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000fba:	1d3b      	adds	r3, r7, #4
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4806      	ldr	r0, [pc, #24]	@ (8000fd8 <MX_TIM6_Init+0x64>)
 8000fc0:	f004 fade 	bl	8005580 <HAL_TIMEx_MasterConfigSynchronization>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000fca:	f7ff fcb1 	bl	8000930 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000fce:	bf00      	nop
 8000fd0:	3710      	adds	r7, #16
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	20000268 	.word	0x20000268
 8000fdc:	40001000 	.word	0x40001000

08000fe0 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fe6:	1d3b      	adds	r3, r7, #4
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]
 8000fec:	605a      	str	r2, [r3, #4]
 8000fee:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000ff0:	4b14      	ldr	r3, [pc, #80]	@ (8001044 <MX_TIM7_Init+0x64>)
 8000ff2:	4a15      	ldr	r2, [pc, #84]	@ (8001048 <MX_TIM7_Init+0x68>)
 8000ff4:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 7999;
 8000ff6:	4b13      	ldr	r3, [pc, #76]	@ (8001044 <MX_TIM7_Init+0x64>)
 8000ff8:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000ffc:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ffe:	4b11      	ldr	r3, [pc, #68]	@ (8001044 <MX_TIM7_Init+0x64>)
 8001000:	2200      	movs	r2, #0
 8001002:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9;
 8001004:	4b0f      	ldr	r3, [pc, #60]	@ (8001044 <MX_TIM7_Init+0x64>)
 8001006:	2209      	movs	r2, #9
 8001008:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800100a:	4b0e      	ldr	r3, [pc, #56]	@ (8001044 <MX_TIM7_Init+0x64>)
 800100c:	2280      	movs	r2, #128	@ 0x80
 800100e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001010:	480c      	ldr	r0, [pc, #48]	@ (8001044 <MX_TIM7_Init+0x64>)
 8001012:	f003 fe09 	bl	8004c28 <HAL_TIM_Base_Init>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 800101c:	f7ff fc88 	bl	8000930 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001020:	2300      	movs	r3, #0
 8001022:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001024:	2300      	movs	r3, #0
 8001026:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001028:	1d3b      	adds	r3, r7, #4
 800102a:	4619      	mov	r1, r3
 800102c:	4805      	ldr	r0, [pc, #20]	@ (8001044 <MX_TIM7_Init+0x64>)
 800102e:	f004 faa7 	bl	8005580 <HAL_TIMEx_MasterConfigSynchronization>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001038:	f7ff fc7a 	bl	8000930 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800103c:	bf00      	nop
 800103e:	3710      	adds	r7, #16
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	200002b4 	.word	0x200002b4
 8001048:	40001400 	.word	0x40001400

0800104c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b08e      	sub	sp, #56	@ 0x38
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001054:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	605a      	str	r2, [r3, #4]
 800105e:	609a      	str	r2, [r3, #8]
 8001060:	60da      	str	r2, [r3, #12]
 8001062:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800106c:	d146      	bne.n	80010fc <HAL_TIM_Encoder_MspInit+0xb0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800106e:	4b53      	ldr	r3, [pc, #332]	@ (80011bc <HAL_TIM_Encoder_MspInit+0x170>)
 8001070:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001072:	4a52      	ldr	r2, [pc, #328]	@ (80011bc <HAL_TIM_Encoder_MspInit+0x170>)
 8001074:	f043 0301 	orr.w	r3, r3, #1
 8001078:	6593      	str	r3, [r2, #88]	@ 0x58
 800107a:	4b50      	ldr	r3, [pc, #320]	@ (80011bc <HAL_TIM_Encoder_MspInit+0x170>)
 800107c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800107e:	f003 0301 	and.w	r3, r3, #1
 8001082:	623b      	str	r3, [r7, #32]
 8001084:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001086:	4b4d      	ldr	r3, [pc, #308]	@ (80011bc <HAL_TIM_Encoder_MspInit+0x170>)
 8001088:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800108a:	4a4c      	ldr	r2, [pc, #304]	@ (80011bc <HAL_TIM_Encoder_MspInit+0x170>)
 800108c:	f043 0301 	orr.w	r3, r3, #1
 8001090:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001092:	4b4a      	ldr	r3, [pc, #296]	@ (80011bc <HAL_TIM_Encoder_MspInit+0x170>)
 8001094:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001096:	f003 0301 	and.w	r3, r3, #1
 800109a:	61fb      	str	r3, [r7, #28]
 800109c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800109e:	4b47      	ldr	r3, [pc, #284]	@ (80011bc <HAL_TIM_Encoder_MspInit+0x170>)
 80010a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010a2:	4a46      	ldr	r2, [pc, #280]	@ (80011bc <HAL_TIM_Encoder_MspInit+0x170>)
 80010a4:	f043 0302 	orr.w	r3, r3, #2
 80010a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010aa:	4b44      	ldr	r3, [pc, #272]	@ (80011bc <HAL_TIM_Encoder_MspInit+0x170>)
 80010ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ae:	f003 0302 	and.w	r3, r3, #2
 80010b2:	61bb      	str	r3, [r7, #24]
 80010b4:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA15 (JTDI)     ------> TIM2_CH1
    PB3 (JTDO-TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80010b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80010ba:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010bc:	2302      	movs	r3, #2
 80010be:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c0:	2300      	movs	r3, #0
 80010c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c4:	2300      	movs	r3, #0
 80010c6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80010c8:	2301      	movs	r3, #1
 80010ca:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010d0:	4619      	mov	r1, r3
 80010d2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010d6:	f000 fdd1 	bl	8001c7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80010da:	2308      	movs	r3, #8
 80010dc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010de:	2302      	movs	r3, #2
 80010e0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e2:	2300      	movs	r3, #0
 80010e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e6:	2300      	movs	r3, #0
 80010e8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80010ea:	2301      	movs	r3, #1
 80010ec:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010f2:	4619      	mov	r1, r3
 80010f4:	4832      	ldr	r0, [pc, #200]	@ (80011c0 <HAL_TIM_Encoder_MspInit+0x174>)
 80010f6:	f000 fdc1 	bl	8001c7c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 80010fa:	e05b      	b.n	80011b4 <HAL_TIM_Encoder_MspInit+0x168>
  else if(tim_encoderHandle->Instance==TIM3)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a30      	ldr	r2, [pc, #192]	@ (80011c4 <HAL_TIM_Encoder_MspInit+0x178>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d128      	bne.n	8001158 <HAL_TIM_Encoder_MspInit+0x10c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001106:	4b2d      	ldr	r3, [pc, #180]	@ (80011bc <HAL_TIM_Encoder_MspInit+0x170>)
 8001108:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800110a:	4a2c      	ldr	r2, [pc, #176]	@ (80011bc <HAL_TIM_Encoder_MspInit+0x170>)
 800110c:	f043 0302 	orr.w	r3, r3, #2
 8001110:	6593      	str	r3, [r2, #88]	@ 0x58
 8001112:	4b2a      	ldr	r3, [pc, #168]	@ (80011bc <HAL_TIM_Encoder_MspInit+0x170>)
 8001114:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001116:	f003 0302 	and.w	r3, r3, #2
 800111a:	617b      	str	r3, [r7, #20]
 800111c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800111e:	4b27      	ldr	r3, [pc, #156]	@ (80011bc <HAL_TIM_Encoder_MspInit+0x170>)
 8001120:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001122:	4a26      	ldr	r2, [pc, #152]	@ (80011bc <HAL_TIM_Encoder_MspInit+0x170>)
 8001124:	f043 0310 	orr.w	r3, r3, #16
 8001128:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800112a:	4b24      	ldr	r3, [pc, #144]	@ (80011bc <HAL_TIM_Encoder_MspInit+0x170>)
 800112c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800112e:	f003 0310 	and.w	r3, r3, #16
 8001132:	613b      	str	r3, [r7, #16]
 8001134:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001136:	2318      	movs	r3, #24
 8001138:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113a:	2302      	movs	r3, #2
 800113c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113e:	2300      	movs	r3, #0
 8001140:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001142:	2300      	movs	r3, #0
 8001144:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001146:	2302      	movs	r3, #2
 8001148:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800114a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800114e:	4619      	mov	r1, r3
 8001150:	481d      	ldr	r0, [pc, #116]	@ (80011c8 <HAL_TIM_Encoder_MspInit+0x17c>)
 8001152:	f000 fd93 	bl	8001c7c <HAL_GPIO_Init>
}
 8001156:	e02d      	b.n	80011b4 <HAL_TIM_Encoder_MspInit+0x168>
  else if(tim_encoderHandle->Instance==TIM5)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a1b      	ldr	r2, [pc, #108]	@ (80011cc <HAL_TIM_Encoder_MspInit+0x180>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d128      	bne.n	80011b4 <HAL_TIM_Encoder_MspInit+0x168>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001162:	4b16      	ldr	r3, [pc, #88]	@ (80011bc <HAL_TIM_Encoder_MspInit+0x170>)
 8001164:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001166:	4a15      	ldr	r2, [pc, #84]	@ (80011bc <HAL_TIM_Encoder_MspInit+0x170>)
 8001168:	f043 0308 	orr.w	r3, r3, #8
 800116c:	6593      	str	r3, [r2, #88]	@ 0x58
 800116e:	4b13      	ldr	r3, [pc, #76]	@ (80011bc <HAL_TIM_Encoder_MspInit+0x170>)
 8001170:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001172:	f003 0308 	and.w	r3, r3, #8
 8001176:	60fb      	str	r3, [r7, #12]
 8001178:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800117a:	4b10      	ldr	r3, [pc, #64]	@ (80011bc <HAL_TIM_Encoder_MspInit+0x170>)
 800117c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800117e:	4a0f      	ldr	r2, [pc, #60]	@ (80011bc <HAL_TIM_Encoder_MspInit+0x170>)
 8001180:	f043 0301 	orr.w	r3, r3, #1
 8001184:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001186:	4b0d      	ldr	r3, [pc, #52]	@ (80011bc <HAL_TIM_Encoder_MspInit+0x170>)
 8001188:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800118a:	f003 0301 	and.w	r3, r3, #1
 800118e:	60bb      	str	r3, [r7, #8]
 8001190:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001192:	2303      	movs	r3, #3
 8001194:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001196:	2302      	movs	r3, #2
 8001198:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119a:	2300      	movs	r3, #0
 800119c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119e:	2300      	movs	r3, #0
 80011a0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80011a2:	2302      	movs	r3, #2
 80011a4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011aa:	4619      	mov	r1, r3
 80011ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011b0:	f000 fd64 	bl	8001c7c <HAL_GPIO_Init>
}
 80011b4:	bf00      	nop
 80011b6:	3738      	adds	r7, #56	@ 0x38
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	40021000 	.word	0x40021000
 80011c0:	48000400 	.word	0x48000400
 80011c4:	40000400 	.word	0x40000400
 80011c8:	48001000 	.word	0x48001000
 80011cc:	40000c00 	.word	0x40000c00

080011d0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a1a      	ldr	r2, [pc, #104]	@ (8001248 <HAL_TIM_Base_MspInit+0x78>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d114      	bne.n	800120c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80011e2:	4b1a      	ldr	r3, [pc, #104]	@ (800124c <HAL_TIM_Base_MspInit+0x7c>)
 80011e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011e6:	4a19      	ldr	r2, [pc, #100]	@ (800124c <HAL_TIM_Base_MspInit+0x7c>)
 80011e8:	f043 0310 	orr.w	r3, r3, #16
 80011ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80011ee:	4b17      	ldr	r3, [pc, #92]	@ (800124c <HAL_TIM_Base_MspInit+0x7c>)
 80011f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011f2:	f003 0310 	and.w	r3, r3, #16
 80011f6:	60fb      	str	r3, [r7, #12]
 80011f8:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80011fa:	2200      	movs	r2, #0
 80011fc:	2100      	movs	r1, #0
 80011fe:	2036      	movs	r0, #54	@ 0x36
 8001200:	f000 fa44 	bl	800168c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001204:	2036      	movs	r0, #54	@ 0x36
 8001206:	f000 fa6d 	bl	80016e4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 800120a:	e018      	b.n	800123e <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM7)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a0f      	ldr	r2, [pc, #60]	@ (8001250 <HAL_TIM_Base_MspInit+0x80>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d113      	bne.n	800123e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001216:	4b0d      	ldr	r3, [pc, #52]	@ (800124c <HAL_TIM_Base_MspInit+0x7c>)
 8001218:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800121a:	4a0c      	ldr	r2, [pc, #48]	@ (800124c <HAL_TIM_Base_MspInit+0x7c>)
 800121c:	f043 0320 	orr.w	r3, r3, #32
 8001220:	6593      	str	r3, [r2, #88]	@ 0x58
 8001222:	4b0a      	ldr	r3, [pc, #40]	@ (800124c <HAL_TIM_Base_MspInit+0x7c>)
 8001224:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001226:	f003 0320 	and.w	r3, r3, #32
 800122a:	60bb      	str	r3, [r7, #8]
 800122c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800122e:	2200      	movs	r2, #0
 8001230:	2100      	movs	r1, #0
 8001232:	2037      	movs	r0, #55	@ 0x37
 8001234:	f000 fa2a 	bl	800168c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001238:	2037      	movs	r0, #55	@ 0x37
 800123a:	f000 fa53 	bl	80016e4 <HAL_NVIC_EnableIRQ>
}
 800123e:	bf00      	nop
 8001240:	3710      	adds	r7, #16
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	40001000 	.word	0x40001000
 800124c:	40021000 	.word	0x40021000
 8001250:	40001400 	.word	0x40001400

08001254 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001258:	4b14      	ldr	r3, [pc, #80]	@ (80012ac <MX_USART1_UART_Init+0x58>)
 800125a:	4a15      	ldr	r2, [pc, #84]	@ (80012b0 <MX_USART1_UART_Init+0x5c>)
 800125c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800125e:	4b13      	ldr	r3, [pc, #76]	@ (80012ac <MX_USART1_UART_Init+0x58>)
 8001260:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001264:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001266:	4b11      	ldr	r3, [pc, #68]	@ (80012ac <MX_USART1_UART_Init+0x58>)
 8001268:	2200      	movs	r2, #0
 800126a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800126c:	4b0f      	ldr	r3, [pc, #60]	@ (80012ac <MX_USART1_UART_Init+0x58>)
 800126e:	2200      	movs	r2, #0
 8001270:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001272:	4b0e      	ldr	r3, [pc, #56]	@ (80012ac <MX_USART1_UART_Init+0x58>)
 8001274:	2200      	movs	r2, #0
 8001276:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001278:	4b0c      	ldr	r3, [pc, #48]	@ (80012ac <MX_USART1_UART_Init+0x58>)
 800127a:	220c      	movs	r2, #12
 800127c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800127e:	4b0b      	ldr	r3, [pc, #44]	@ (80012ac <MX_USART1_UART_Init+0x58>)
 8001280:	2200      	movs	r2, #0
 8001282:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001284:	4b09      	ldr	r3, [pc, #36]	@ (80012ac <MX_USART1_UART_Init+0x58>)
 8001286:	2200      	movs	r2, #0
 8001288:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800128a:	4b08      	ldr	r3, [pc, #32]	@ (80012ac <MX_USART1_UART_Init+0x58>)
 800128c:	2200      	movs	r2, #0
 800128e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001290:	4b06      	ldr	r3, [pc, #24]	@ (80012ac <MX_USART1_UART_Init+0x58>)
 8001292:	2200      	movs	r2, #0
 8001294:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001296:	4805      	ldr	r0, [pc, #20]	@ (80012ac <MX_USART1_UART_Init+0x58>)
 8001298:	f004 fae6 	bl	8005868 <HAL_UART_Init>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80012a2:	f7ff fb45 	bl	8000930 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	20000300 	.word	0x20000300
 80012b0:	40013800 	.word	0x40013800

080012b4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b0ac      	sub	sp, #176	@ 0xb0
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012bc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	605a      	str	r2, [r3, #4]
 80012c6:	609a      	str	r2, [r3, #8]
 80012c8:	60da      	str	r2, [r3, #12]
 80012ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012cc:	f107 0314 	add.w	r3, r7, #20
 80012d0:	2288      	movs	r2, #136	@ 0x88
 80012d2:	2100      	movs	r1, #0
 80012d4:	4618      	mov	r0, r3
 80012d6:	f005 fbf6 	bl	8006ac6 <memset>
  if(uartHandle->Instance==USART1)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a21      	ldr	r2, [pc, #132]	@ (8001364 <HAL_UART_MspInit+0xb0>)
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d13a      	bne.n	800135a <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80012e4:	2301      	movs	r3, #1
 80012e6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80012e8:	2300      	movs	r3, #0
 80012ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012ec:	f107 0314 	add.w	r3, r7, #20
 80012f0:	4618      	mov	r0, r3
 80012f2:	f001 ff85 	bl	8003200 <HAL_RCCEx_PeriphCLKConfig>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80012fc:	f7ff fb18 	bl	8000930 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001300:	4b19      	ldr	r3, [pc, #100]	@ (8001368 <HAL_UART_MspInit+0xb4>)
 8001302:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001304:	4a18      	ldr	r2, [pc, #96]	@ (8001368 <HAL_UART_MspInit+0xb4>)
 8001306:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800130a:	6613      	str	r3, [r2, #96]	@ 0x60
 800130c:	4b16      	ldr	r3, [pc, #88]	@ (8001368 <HAL_UART_MspInit+0xb4>)
 800130e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001310:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001314:	613b      	str	r3, [r7, #16]
 8001316:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001318:	4b13      	ldr	r3, [pc, #76]	@ (8001368 <HAL_UART_MspInit+0xb4>)
 800131a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800131c:	4a12      	ldr	r2, [pc, #72]	@ (8001368 <HAL_UART_MspInit+0xb4>)
 800131e:	f043 0302 	orr.w	r3, r3, #2
 8001322:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001324:	4b10      	ldr	r3, [pc, #64]	@ (8001368 <HAL_UART_MspInit+0xb4>)
 8001326:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001328:	f003 0302 	and.w	r3, r3, #2
 800132c:	60fb      	str	r3, [r7, #12]
 800132e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001330:	23c0      	movs	r3, #192	@ 0xc0
 8001332:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001336:	2302      	movs	r3, #2
 8001338:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133c:	2300      	movs	r3, #0
 800133e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001342:	2303      	movs	r3, #3
 8001344:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001348:	2307      	movs	r3, #7
 800134a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800134e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001352:	4619      	mov	r1, r3
 8001354:	4805      	ldr	r0, [pc, #20]	@ (800136c <HAL_UART_MspInit+0xb8>)
 8001356:	f000 fc91 	bl	8001c7c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800135a:	bf00      	nop
 800135c:	37b0      	adds	r7, #176	@ 0xb0
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	40013800 	.word	0x40013800
 8001368:	40021000 	.word	0x40021000
 800136c:	48000400 	.word	0x48000400

08001370 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001370:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80013a8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001374:	f7ff fcec 	bl	8000d50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001378:	480c      	ldr	r0, [pc, #48]	@ (80013ac <LoopForever+0x6>)
  ldr r1, =_edata
 800137a:	490d      	ldr	r1, [pc, #52]	@ (80013b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800137c:	4a0d      	ldr	r2, [pc, #52]	@ (80013b4 <LoopForever+0xe>)
  movs r3, #0
 800137e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001380:	e002      	b.n	8001388 <LoopCopyDataInit>

08001382 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001382:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001384:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001386:	3304      	adds	r3, #4

08001388 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001388:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800138a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800138c:	d3f9      	bcc.n	8001382 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800138e:	4a0a      	ldr	r2, [pc, #40]	@ (80013b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001390:	4c0a      	ldr	r4, [pc, #40]	@ (80013bc <LoopForever+0x16>)
  movs r3, #0
 8001392:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001394:	e001      	b.n	800139a <LoopFillZerobss>

08001396 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001396:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001398:	3204      	adds	r2, #4

0800139a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800139a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800139c:	d3fb      	bcc.n	8001396 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800139e:	f005 fbf7 	bl	8006b90 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013a2:	f7ff fa31 	bl	8000808 <main>

080013a6 <LoopForever>:

LoopForever:
    b LoopForever
 80013a6:	e7fe      	b.n	80013a6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80013a8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80013ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013b0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80013b4:	080078e8 	.word	0x080078e8
  ldr r2, =_sbss
 80013b8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80013bc:	200004d8 	.word	0x200004d8

080013c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80013c0:	e7fe      	b.n	80013c0 <ADC1_2_IRQHandler>

080013c2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013c2:	b580      	push	{r7, lr}
 80013c4:	b082      	sub	sp, #8
 80013c6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80013c8:	2300      	movs	r3, #0
 80013ca:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013cc:	2003      	movs	r0, #3
 80013ce:	f000 f93d 	bl	800164c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013d2:	200f      	movs	r0, #15
 80013d4:	f000 f80e 	bl	80013f4 <HAL_InitTick>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d002      	beq.n	80013e4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	71fb      	strb	r3, [r7, #7]
 80013e2:	e001      	b.n	80013e8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80013e4:	f7ff fba6 	bl	8000b34 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80013e8:	79fb      	ldrb	r3, [r7, #7]
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
	...

080013f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b084      	sub	sp, #16
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80013fc:	2300      	movs	r3, #0
 80013fe:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001400:	4b17      	ldr	r3, [pc, #92]	@ (8001460 <HAL_InitTick+0x6c>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d023      	beq.n	8001450 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001408:	4b16      	ldr	r3, [pc, #88]	@ (8001464 <HAL_InitTick+0x70>)
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	4b14      	ldr	r3, [pc, #80]	@ (8001460 <HAL_InitTick+0x6c>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	4619      	mov	r1, r3
 8001412:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001416:	fbb3 f3f1 	udiv	r3, r3, r1
 800141a:	fbb2 f3f3 	udiv	r3, r2, r3
 800141e:	4618      	mov	r0, r3
 8001420:	f000 f978 	bl	8001714 <HAL_SYSTICK_Config>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d10f      	bne.n	800144a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2b0f      	cmp	r3, #15
 800142e:	d809      	bhi.n	8001444 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001430:	2200      	movs	r2, #0
 8001432:	6879      	ldr	r1, [r7, #4]
 8001434:	f04f 30ff 	mov.w	r0, #4294967295
 8001438:	f000 f928 	bl	800168c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800143c:	4a0a      	ldr	r2, [pc, #40]	@ (8001468 <HAL_InitTick+0x74>)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6013      	str	r3, [r2, #0]
 8001442:	e007      	b.n	8001454 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001444:	2301      	movs	r3, #1
 8001446:	73fb      	strb	r3, [r7, #15]
 8001448:	e004      	b.n	8001454 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	73fb      	strb	r3, [r7, #15]
 800144e:	e001      	b.n	8001454 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001450:	2301      	movs	r3, #1
 8001452:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001454:	7bfb      	ldrb	r3, [r7, #15]
}
 8001456:	4618      	mov	r0, r3
 8001458:	3710      	adds	r7, #16
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	20000010 	.word	0x20000010
 8001464:	20000008 	.word	0x20000008
 8001468:	2000000c 	.word	0x2000000c

0800146c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001470:	4b06      	ldr	r3, [pc, #24]	@ (800148c <HAL_IncTick+0x20>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	461a      	mov	r2, r3
 8001476:	4b06      	ldr	r3, [pc, #24]	@ (8001490 <HAL_IncTick+0x24>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4413      	add	r3, r2
 800147c:	4a04      	ldr	r2, [pc, #16]	@ (8001490 <HAL_IncTick+0x24>)
 800147e:	6013      	str	r3, [r2, #0]
}
 8001480:	bf00      	nop
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	20000010 	.word	0x20000010
 8001490:	20000388 	.word	0x20000388

08001494 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  return uwTick;
 8001498:	4b03      	ldr	r3, [pc, #12]	@ (80014a8 <HAL_GetTick+0x14>)
 800149a:	681b      	ldr	r3, [r3, #0]
}
 800149c:	4618      	mov	r0, r3
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	20000388 	.word	0x20000388

080014ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b085      	sub	sp, #20
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	f003 0307 	and.w	r3, r3, #7
 80014ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014bc:	4b0c      	ldr	r3, [pc, #48]	@ (80014f0 <__NVIC_SetPriorityGrouping+0x44>)
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014c2:	68ba      	ldr	r2, [r7, #8]
 80014c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80014c8:	4013      	ands	r3, r2
 80014ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014d4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80014d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014de:	4a04      	ldr	r2, [pc, #16]	@ (80014f0 <__NVIC_SetPriorityGrouping+0x44>)
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	60d3      	str	r3, [r2, #12]
}
 80014e4:	bf00      	nop
 80014e6:	3714      	adds	r7, #20
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr
 80014f0:	e000ed00 	.word	0xe000ed00

080014f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014f8:	4b04      	ldr	r3, [pc, #16]	@ (800150c <__NVIC_GetPriorityGrouping+0x18>)
 80014fa:	68db      	ldr	r3, [r3, #12]
 80014fc:	0a1b      	lsrs	r3, r3, #8
 80014fe:	f003 0307 	and.w	r3, r3, #7
}
 8001502:	4618      	mov	r0, r3
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr
 800150c:	e000ed00 	.word	0xe000ed00

08001510 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	4603      	mov	r3, r0
 8001518:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800151a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800151e:	2b00      	cmp	r3, #0
 8001520:	db0b      	blt.n	800153a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001522:	79fb      	ldrb	r3, [r7, #7]
 8001524:	f003 021f 	and.w	r2, r3, #31
 8001528:	4907      	ldr	r1, [pc, #28]	@ (8001548 <__NVIC_EnableIRQ+0x38>)
 800152a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800152e:	095b      	lsrs	r3, r3, #5
 8001530:	2001      	movs	r0, #1
 8001532:	fa00 f202 	lsl.w	r2, r0, r2
 8001536:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800153a:	bf00      	nop
 800153c:	370c      	adds	r7, #12
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	e000e100 	.word	0xe000e100

0800154c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	4603      	mov	r3, r0
 8001554:	6039      	str	r1, [r7, #0]
 8001556:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001558:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155c:	2b00      	cmp	r3, #0
 800155e:	db0a      	blt.n	8001576 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	b2da      	uxtb	r2, r3
 8001564:	490c      	ldr	r1, [pc, #48]	@ (8001598 <__NVIC_SetPriority+0x4c>)
 8001566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800156a:	0112      	lsls	r2, r2, #4
 800156c:	b2d2      	uxtb	r2, r2
 800156e:	440b      	add	r3, r1
 8001570:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001574:	e00a      	b.n	800158c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	b2da      	uxtb	r2, r3
 800157a:	4908      	ldr	r1, [pc, #32]	@ (800159c <__NVIC_SetPriority+0x50>)
 800157c:	79fb      	ldrb	r3, [r7, #7]
 800157e:	f003 030f 	and.w	r3, r3, #15
 8001582:	3b04      	subs	r3, #4
 8001584:	0112      	lsls	r2, r2, #4
 8001586:	b2d2      	uxtb	r2, r2
 8001588:	440b      	add	r3, r1
 800158a:	761a      	strb	r2, [r3, #24]
}
 800158c:	bf00      	nop
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr
 8001598:	e000e100 	.word	0xe000e100
 800159c:	e000ed00 	.word	0xe000ed00

080015a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b089      	sub	sp, #36	@ 0x24
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	60f8      	str	r0, [r7, #12]
 80015a8:	60b9      	str	r1, [r7, #8]
 80015aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	f003 0307 	and.w	r3, r3, #7
 80015b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	f1c3 0307 	rsb	r3, r3, #7
 80015ba:	2b04      	cmp	r3, #4
 80015bc:	bf28      	it	cs
 80015be:	2304      	movcs	r3, #4
 80015c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	3304      	adds	r3, #4
 80015c6:	2b06      	cmp	r3, #6
 80015c8:	d902      	bls.n	80015d0 <NVIC_EncodePriority+0x30>
 80015ca:	69fb      	ldr	r3, [r7, #28]
 80015cc:	3b03      	subs	r3, #3
 80015ce:	e000      	b.n	80015d2 <NVIC_EncodePriority+0x32>
 80015d0:	2300      	movs	r3, #0
 80015d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015d4:	f04f 32ff 	mov.w	r2, #4294967295
 80015d8:	69bb      	ldr	r3, [r7, #24]
 80015da:	fa02 f303 	lsl.w	r3, r2, r3
 80015de:	43da      	mvns	r2, r3
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	401a      	ands	r2, r3
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015e8:	f04f 31ff 	mov.w	r1, #4294967295
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	fa01 f303 	lsl.w	r3, r1, r3
 80015f2:	43d9      	mvns	r1, r3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015f8:	4313      	orrs	r3, r2
         );
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3724      	adds	r7, #36	@ 0x24
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
	...

08001608 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	3b01      	subs	r3, #1
 8001614:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001618:	d301      	bcc.n	800161e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800161a:	2301      	movs	r3, #1
 800161c:	e00f      	b.n	800163e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800161e:	4a0a      	ldr	r2, [pc, #40]	@ (8001648 <SysTick_Config+0x40>)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	3b01      	subs	r3, #1
 8001624:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001626:	210f      	movs	r1, #15
 8001628:	f04f 30ff 	mov.w	r0, #4294967295
 800162c:	f7ff ff8e 	bl	800154c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001630:	4b05      	ldr	r3, [pc, #20]	@ (8001648 <SysTick_Config+0x40>)
 8001632:	2200      	movs	r2, #0
 8001634:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001636:	4b04      	ldr	r3, [pc, #16]	@ (8001648 <SysTick_Config+0x40>)
 8001638:	2207      	movs	r2, #7
 800163a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800163c:	2300      	movs	r3, #0
}
 800163e:	4618      	mov	r0, r3
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	e000e010 	.word	0xe000e010

0800164c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2b07      	cmp	r3, #7
 8001658:	d00f      	beq.n	800167a <HAL_NVIC_SetPriorityGrouping+0x2e>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2b06      	cmp	r3, #6
 800165e:	d00c      	beq.n	800167a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2b05      	cmp	r3, #5
 8001664:	d009      	beq.n	800167a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2b04      	cmp	r3, #4
 800166a:	d006      	beq.n	800167a <HAL_NVIC_SetPriorityGrouping+0x2e>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2b03      	cmp	r3, #3
 8001670:	d003      	beq.n	800167a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001672:	21a6      	movs	r1, #166	@ 0xa6
 8001674:	4804      	ldr	r0, [pc, #16]	@ (8001688 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8001676:	f7ff f973 	bl	8000960 <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f7ff ff16 	bl	80014ac <__NVIC_SetPriorityGrouping>
}
 8001680:	bf00      	nop
 8001682:	3708      	adds	r7, #8
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	08007614 	.word	0x08007614

0800168c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b086      	sub	sp, #24
 8001690:	af00      	add	r7, sp, #0
 8001692:	4603      	mov	r3, r0
 8001694:	60b9      	str	r1, [r7, #8]
 8001696:	607a      	str	r2, [r7, #4]
 8001698:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800169a:	2300      	movs	r3, #0
 800169c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2b0f      	cmp	r3, #15
 80016a2:	d903      	bls.n	80016ac <HAL_NVIC_SetPriority+0x20>
 80016a4:	21be      	movs	r1, #190	@ 0xbe
 80016a6:	480e      	ldr	r0, [pc, #56]	@ (80016e0 <HAL_NVIC_SetPriority+0x54>)
 80016a8:	f7ff f95a 	bl	8000960 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	2b0f      	cmp	r3, #15
 80016b0:	d903      	bls.n	80016ba <HAL_NVIC_SetPriority+0x2e>
 80016b2:	21bf      	movs	r1, #191	@ 0xbf
 80016b4:	480a      	ldr	r0, [pc, #40]	@ (80016e0 <HAL_NVIC_SetPriority+0x54>)
 80016b6:	f7ff f953 	bl	8000960 <assert_failed>

  prioritygroup = NVIC_GetPriorityGrouping();
 80016ba:	f7ff ff1b 	bl	80014f4 <__NVIC_GetPriorityGrouping>
 80016be:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016c0:	687a      	ldr	r2, [r7, #4]
 80016c2:	68b9      	ldr	r1, [r7, #8]
 80016c4:	6978      	ldr	r0, [r7, #20]
 80016c6:	f7ff ff6b 	bl	80015a0 <NVIC_EncodePriority>
 80016ca:	4602      	mov	r2, r0
 80016cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016d0:	4611      	mov	r1, r2
 80016d2:	4618      	mov	r0, r3
 80016d4:	f7ff ff3a 	bl	800154c <__NVIC_SetPriority>
}
 80016d8:	bf00      	nop
 80016da:	3718      	adds	r7, #24
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	08007614 	.word	0x08007614

080016e4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	4603      	mov	r3, r0
 80016ec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80016ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	da03      	bge.n	80016fe <HAL_NVIC_EnableIRQ+0x1a>
 80016f6:	21d2      	movs	r1, #210	@ 0xd2
 80016f8:	4805      	ldr	r0, [pc, #20]	@ (8001710 <HAL_NVIC_EnableIRQ+0x2c>)
 80016fa:	f7ff f931 	bl	8000960 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001702:	4618      	mov	r0, r3
 8001704:	f7ff ff04 	bl	8001510 <__NVIC_EnableIRQ>
}
 8001708:	bf00      	nop
 800170a:	3708      	adds	r7, #8
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	08007614 	.word	0x08007614

08001714 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800171c:	6878      	ldr	r0, [r7, #4]
 800171e:	f7ff ff73 	bl	8001608 <SysTick_Config>
 8001722:	4603      	mov	r3, r0
}
 8001724:	4618      	mov	r0, r3
 8001726:	3708      	adds	r7, #8
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}

0800172c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d101      	bne.n	800173e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e19d      	b.n	8001a7a <HAL_DMA_Init+0x34e>
  }

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a79      	ldr	r2, [pc, #484]	@ (8001928 <HAL_DMA_Init+0x1fc>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d044      	beq.n	80017d2 <HAL_DMA_Init+0xa6>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a77      	ldr	r2, [pc, #476]	@ (800192c <HAL_DMA_Init+0x200>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d03f      	beq.n	80017d2 <HAL_DMA_Init+0xa6>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a76      	ldr	r2, [pc, #472]	@ (8001930 <HAL_DMA_Init+0x204>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d03a      	beq.n	80017d2 <HAL_DMA_Init+0xa6>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a74      	ldr	r2, [pc, #464]	@ (8001934 <HAL_DMA_Init+0x208>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d035      	beq.n	80017d2 <HAL_DMA_Init+0xa6>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a73      	ldr	r2, [pc, #460]	@ (8001938 <HAL_DMA_Init+0x20c>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d030      	beq.n	80017d2 <HAL_DMA_Init+0xa6>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a71      	ldr	r2, [pc, #452]	@ (800193c <HAL_DMA_Init+0x210>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d02b      	beq.n	80017d2 <HAL_DMA_Init+0xa6>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a70      	ldr	r2, [pc, #448]	@ (8001940 <HAL_DMA_Init+0x214>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d026      	beq.n	80017d2 <HAL_DMA_Init+0xa6>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a6e      	ldr	r2, [pc, #440]	@ (8001944 <HAL_DMA_Init+0x218>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d021      	beq.n	80017d2 <HAL_DMA_Init+0xa6>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a6d      	ldr	r2, [pc, #436]	@ (8001948 <HAL_DMA_Init+0x21c>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d01c      	beq.n	80017d2 <HAL_DMA_Init+0xa6>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a6b      	ldr	r2, [pc, #428]	@ (800194c <HAL_DMA_Init+0x220>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d017      	beq.n	80017d2 <HAL_DMA_Init+0xa6>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a6a      	ldr	r2, [pc, #424]	@ (8001950 <HAL_DMA_Init+0x224>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d012      	beq.n	80017d2 <HAL_DMA_Init+0xa6>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a68      	ldr	r2, [pc, #416]	@ (8001954 <HAL_DMA_Init+0x228>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d00d      	beq.n	80017d2 <HAL_DMA_Init+0xa6>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a67      	ldr	r2, [pc, #412]	@ (8001958 <HAL_DMA_Init+0x22c>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d008      	beq.n	80017d2 <HAL_DMA_Init+0xa6>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a65      	ldr	r2, [pc, #404]	@ (800195c <HAL_DMA_Init+0x230>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d003      	beq.n	80017d2 <HAL_DMA_Init+0xa6>
 80017ca:	21a5      	movs	r1, #165	@ 0xa5
 80017cc:	4864      	ldr	r0, [pc, #400]	@ (8001960 <HAL_DMA_Init+0x234>)
 80017ce:	f7ff f8c7 	bl	8000960 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d00c      	beq.n	80017f4 <HAL_DMA_Init+0xc8>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	2b10      	cmp	r3, #16
 80017e0:	d008      	beq.n	80017f4 <HAL_DMA_Init+0xc8>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80017ea:	d003      	beq.n	80017f4 <HAL_DMA_Init+0xc8>
 80017ec:	21a6      	movs	r1, #166	@ 0xa6
 80017ee:	485c      	ldr	r0, [pc, #368]	@ (8001960 <HAL_DMA_Init+0x234>)
 80017f0:	f7ff f8b6 	bl	8000960 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	2b40      	cmp	r3, #64	@ 0x40
 80017fa:	d007      	beq.n	800180c <HAL_DMA_Init+0xe0>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d003      	beq.n	800180c <HAL_DMA_Init+0xe0>
 8001804:	21a7      	movs	r1, #167	@ 0xa7
 8001806:	4856      	ldr	r0, [pc, #344]	@ (8001960 <HAL_DMA_Init+0x234>)
 8001808:	f7ff f8aa 	bl	8000960 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	691b      	ldr	r3, [r3, #16]
 8001810:	2b80      	cmp	r3, #128	@ 0x80
 8001812:	d007      	beq.n	8001824 <HAL_DMA_Init+0xf8>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	691b      	ldr	r3, [r3, #16]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d003      	beq.n	8001824 <HAL_DMA_Init+0xf8>
 800181c:	21a8      	movs	r1, #168	@ 0xa8
 800181e:	4850      	ldr	r0, [pc, #320]	@ (8001960 <HAL_DMA_Init+0x234>)
 8001820:	f7ff f89e 	bl	8000960 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	695b      	ldr	r3, [r3, #20]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d00d      	beq.n	8001848 <HAL_DMA_Init+0x11c>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	695b      	ldr	r3, [r3, #20]
 8001830:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001834:	d008      	beq.n	8001848 <HAL_DMA_Init+0x11c>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	695b      	ldr	r3, [r3, #20]
 800183a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800183e:	d003      	beq.n	8001848 <HAL_DMA_Init+0x11c>
 8001840:	21a9      	movs	r1, #169	@ 0xa9
 8001842:	4847      	ldr	r0, [pc, #284]	@ (8001960 <HAL_DMA_Init+0x234>)
 8001844:	f7ff f88c 	bl	8000960 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	699b      	ldr	r3, [r3, #24]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d00d      	beq.n	800186c <HAL_DMA_Init+0x140>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	699b      	ldr	r3, [r3, #24]
 8001854:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001858:	d008      	beq.n	800186c <HAL_DMA_Init+0x140>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	699b      	ldr	r3, [r3, #24]
 800185e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001862:	d003      	beq.n	800186c <HAL_DMA_Init+0x140>
 8001864:	21aa      	movs	r1, #170	@ 0xaa
 8001866:	483e      	ldr	r0, [pc, #248]	@ (8001960 <HAL_DMA_Init+0x234>)
 8001868:	f7ff f87a 	bl	8000960 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	69db      	ldr	r3, [r3, #28]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d007      	beq.n	8001884 <HAL_DMA_Init+0x158>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	69db      	ldr	r3, [r3, #28]
 8001878:	2b20      	cmp	r3, #32
 800187a:	d003      	beq.n	8001884 <HAL_DMA_Init+0x158>
 800187c:	21ab      	movs	r1, #171	@ 0xab
 800187e:	4838      	ldr	r0, [pc, #224]	@ (8001960 <HAL_DMA_Init+0x234>)
 8001880:	f7ff f86e 	bl	8000960 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6a1b      	ldr	r3, [r3, #32]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d012      	beq.n	80018b2 <HAL_DMA_Init+0x186>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6a1b      	ldr	r3, [r3, #32]
 8001890:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001894:	d00d      	beq.n	80018b2 <HAL_DMA_Init+0x186>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6a1b      	ldr	r3, [r3, #32]
 800189a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800189e:	d008      	beq.n	80018b2 <HAL_DMA_Init+0x186>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6a1b      	ldr	r3, [r3, #32]
 80018a4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80018a8:	d003      	beq.n	80018b2 <HAL_DMA_Init+0x186>
 80018aa:	21ac      	movs	r1, #172	@ 0xac
 80018ac:	482c      	ldr	r0, [pc, #176]	@ (8001960 <HAL_DMA_Init+0x234>)
 80018ae:	f7ff f857 	bl	8000960 <assert_failed>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d01f      	beq.n	80018fa <HAL_DMA_Init+0x1ce>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d01b      	beq.n	80018fa <HAL_DMA_Init+0x1ce>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	2b02      	cmp	r3, #2
 80018c8:	d017      	beq.n	80018fa <HAL_DMA_Init+0x1ce>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	2b03      	cmp	r3, #3
 80018d0:	d013      	beq.n	80018fa <HAL_DMA_Init+0x1ce>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	2b04      	cmp	r3, #4
 80018d8:	d00f      	beq.n	80018fa <HAL_DMA_Init+0x1ce>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	2b05      	cmp	r3, #5
 80018e0:	d00b      	beq.n	80018fa <HAL_DMA_Init+0x1ce>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	2b06      	cmp	r3, #6
 80018e8:	d007      	beq.n	80018fa <HAL_DMA_Init+0x1ce>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	2b07      	cmp	r3, #7
 80018f0:	d003      	beq.n	80018fa <HAL_DMA_Init+0x1ce>
 80018f2:	21ae      	movs	r1, #174	@ 0xae
 80018f4:	481a      	ldr	r0, [pc, #104]	@ (8001960 <HAL_DMA_Init+0x234>)
 80018f6:	f7ff f833 	bl	8000960 <assert_failed>

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	461a      	mov	r2, r3
 8001900:	4b18      	ldr	r3, [pc, #96]	@ (8001964 <HAL_DMA_Init+0x238>)
 8001902:	429a      	cmp	r2, r3
 8001904:	d836      	bhi.n	8001974 <HAL_DMA_Init+0x248>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	461a      	mov	r2, r3
 800190c:	4b16      	ldr	r3, [pc, #88]	@ (8001968 <HAL_DMA_Init+0x23c>)
 800190e:	4413      	add	r3, r2
 8001910:	4a16      	ldr	r2, [pc, #88]	@ (800196c <HAL_DMA_Init+0x240>)
 8001912:	fba2 2303 	umull	r2, r3, r2, r3
 8001916:	091b      	lsrs	r3, r3, #4
 8001918:	009a      	lsls	r2, r3, #2
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4a13      	ldr	r2, [pc, #76]	@ (8001970 <HAL_DMA_Init+0x244>)
 8001922:	641a      	str	r2, [r3, #64]	@ 0x40
 8001924:	e035      	b.n	8001992 <HAL_DMA_Init+0x266>
 8001926:	bf00      	nop
 8001928:	40020008 	.word	0x40020008
 800192c:	4002001c 	.word	0x4002001c
 8001930:	40020030 	.word	0x40020030
 8001934:	40020044 	.word	0x40020044
 8001938:	40020058 	.word	0x40020058
 800193c:	4002006c 	.word	0x4002006c
 8001940:	40020080 	.word	0x40020080
 8001944:	40020408 	.word	0x40020408
 8001948:	4002041c 	.word	0x4002041c
 800194c:	40020430 	.word	0x40020430
 8001950:	40020444 	.word	0x40020444
 8001954:	40020458 	.word	0x40020458
 8001958:	4002046c 	.word	0x4002046c
 800195c:	40020480 	.word	0x40020480
 8001960:	08007650 	.word	0x08007650
 8001964:	40020407 	.word	0x40020407
 8001968:	bffdfff8 	.word	0xbffdfff8
 800196c:	cccccccd 	.word	0xcccccccd
 8001970:	40020000 	.word	0x40020000
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	461a      	mov	r2, r3
 800197a:	4b42      	ldr	r3, [pc, #264]	@ (8001a84 <HAL_DMA_Init+0x358>)
 800197c:	4413      	add	r3, r2
 800197e:	4a42      	ldr	r2, [pc, #264]	@ (8001a88 <HAL_DMA_Init+0x35c>)
 8001980:	fba2 2303 	umull	r2, r3, r2, r3
 8001984:	091b      	lsrs	r3, r3, #4
 8001986:	009a      	lsls	r2, r3, #2
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	4a3f      	ldr	r2, [pc, #252]	@ (8001a8c <HAL_DMA_Init+0x360>)
 8001990:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2202      	movs	r2, #2
 8001996:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80019a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80019ac:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80019b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	691b      	ldr	r3, [r3, #16]
 80019bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	699b      	ldr	r3, [r3, #24]
 80019c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6a1b      	ldr	r3, [r3, #32]
 80019d4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80019d6:	68fa      	ldr	r2, [r7, #12]
 80019d8:	4313      	orrs	r3, r2
 80019da:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	68fa      	ldr	r2, [r7, #12]
 80019e2:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80019ec:	d039      	beq.n	8001a62 <HAL_DMA_Init+0x336>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019f2:	4a27      	ldr	r2, [pc, #156]	@ (8001a90 <HAL_DMA_Init+0x364>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d11a      	bne.n	8001a2e <HAL_DMA_Init+0x302>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80019f8:	4b26      	ldr	r3, [pc, #152]	@ (8001a94 <HAL_DMA_Init+0x368>)
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a00:	f003 031c 	and.w	r3, r3, #28
 8001a04:	210f      	movs	r1, #15
 8001a06:	fa01 f303 	lsl.w	r3, r1, r3
 8001a0a:	43db      	mvns	r3, r3
 8001a0c:	4921      	ldr	r1, [pc, #132]	@ (8001a94 <HAL_DMA_Init+0x368>)
 8001a0e:	4013      	ands	r3, r2
 8001a10:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001a12:	4b20      	ldr	r3, [pc, #128]	@ (8001a94 <HAL_DMA_Init+0x368>)
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6859      	ldr	r1, [r3, #4]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a1e:	f003 031c 	and.w	r3, r3, #28
 8001a22:	fa01 f303 	lsl.w	r3, r1, r3
 8001a26:	491b      	ldr	r1, [pc, #108]	@ (8001a94 <HAL_DMA_Init+0x368>)
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	600b      	str	r3, [r1, #0]
 8001a2c:	e019      	b.n	8001a62 <HAL_DMA_Init+0x336>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001a2e:	4b1a      	ldr	r3, [pc, #104]	@ (8001a98 <HAL_DMA_Init+0x36c>)
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a36:	f003 031c 	and.w	r3, r3, #28
 8001a3a:	210f      	movs	r1, #15
 8001a3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a40:	43db      	mvns	r3, r3
 8001a42:	4915      	ldr	r1, [pc, #84]	@ (8001a98 <HAL_DMA_Init+0x36c>)
 8001a44:	4013      	ands	r3, r2
 8001a46:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001a48:	4b13      	ldr	r3, [pc, #76]	@ (8001a98 <HAL_DMA_Init+0x36c>)
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6859      	ldr	r1, [r3, #4]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a54:	f003 031c 	and.w	r3, r3, #28
 8001a58:	fa01 f303 	lsl.w	r3, r1, r3
 8001a5c:	490e      	ldr	r1, [pc, #56]	@ (8001a98 <HAL_DMA_Init+0x36c>)
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2200      	movs	r2, #0
 8001a66:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2200      	movs	r2, #0
 8001a74:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001a78:	2300      	movs	r3, #0
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3710      	adds	r7, #16
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	bffdfbf8 	.word	0xbffdfbf8
 8001a88:	cccccccd 	.word	0xcccccccd
 8001a8c:	40020400 	.word	0x40020400
 8001a90:	40020000 	.word	0x40020000
 8001a94:	400200a8 	.word	0x400200a8
 8001a98:	400204a8 	.word	0x400204a8

08001a9c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001aae:	b2db      	uxtb	r3, r3
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	d005      	beq.n	8001ac0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2204      	movs	r2, #4
 8001ab8:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	73fb      	strb	r3, [r7, #15]
 8001abe:	e029      	b.n	8001b14 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f022 020e 	bic.w	r2, r2, #14
 8001ace:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f022 0201 	bic.w	r2, r2, #1
 8001ade:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ae4:	f003 021c 	and.w	r2, r3, #28
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aec:	2101      	movs	r1, #1
 8001aee:	fa01 f202 	lsl.w	r2, r1, r2
 8001af2:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2201      	movs	r2, #1
 8001af8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2200      	movs	r2, #0
 8001b00:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d003      	beq.n	8001b14 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	4798      	blx	r3
    }
  }
  return status;
 8001b14:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3710      	adds	r7, #16
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}

08001b1e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b1e:	b580      	push	{r7, lr}
 8001b20:	b084      	sub	sp, #16
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b3a:	f003 031c 	and.w	r3, r3, #28
 8001b3e:	2204      	movs	r2, #4
 8001b40:	409a      	lsls	r2, r3
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	4013      	ands	r3, r2
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d026      	beq.n	8001b98 <HAL_DMA_IRQHandler+0x7a>
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	f003 0304 	and.w	r3, r3, #4
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d021      	beq.n	8001b98 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 0320 	and.w	r3, r3, #32
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d107      	bne.n	8001b72 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f022 0204 	bic.w	r2, r2, #4
 8001b70:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b76:	f003 021c 	and.w	r2, r3, #28
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b7e:	2104      	movs	r1, #4
 8001b80:	fa01 f202 	lsl.w	r2, r1, r2
 8001b84:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d071      	beq.n	8001c72 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001b96:	e06c      	b.n	8001c72 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b9c:	f003 031c 	and.w	r3, r3, #28
 8001ba0:	2202      	movs	r2, #2
 8001ba2:	409a      	lsls	r2, r3
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d02e      	beq.n	8001c0a <HAL_DMA_IRQHandler+0xec>
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	f003 0302 	and.w	r3, r3, #2
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d029      	beq.n	8001c0a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0320 	and.w	r3, r3, #32
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d10b      	bne.n	8001bdc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f022 020a 	bic.w	r2, r2, #10
 8001bd2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001be0:	f003 021c 	and.w	r2, r3, #28
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be8:	2102      	movs	r1, #2
 8001bea:	fa01 f202 	lsl.w	r2, r1, r2
 8001bee:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d038      	beq.n	8001c72 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001c08:	e033      	b.n	8001c72 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c0e:	f003 031c 	and.w	r3, r3, #28
 8001c12:	2208      	movs	r2, #8
 8001c14:	409a      	lsls	r2, r3
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	4013      	ands	r3, r2
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d02a      	beq.n	8001c74 <HAL_DMA_IRQHandler+0x156>
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	f003 0308 	and.w	r3, r3, #8
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d025      	beq.n	8001c74 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f022 020e 	bic.w	r2, r2, #14
 8001c36:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c3c:	f003 021c 	and.w	r2, r3, #28
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c44:	2101      	movs	r1, #1
 8001c46:	fa01 f202 	lsl.w	r2, r1, r2
 8001c4a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2201      	movs	r2, #1
 8001c50:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2201      	movs	r2, #1
 8001c56:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d004      	beq.n	8001c74 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001c72:	bf00      	nop
 8001c74:	bf00      	nop
}
 8001c76:	3710      	adds	r7, #16
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}

08001c7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b086      	sub	sp, #24
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c86:	2300      	movs	r3, #0
 8001c88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001c90:	d01f      	beq.n	8001cd2 <HAL_GPIO_Init+0x56>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4a3c      	ldr	r2, [pc, #240]	@ (8001d88 <HAL_GPIO_Init+0x10c>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d01b      	beq.n	8001cd2 <HAL_GPIO_Init+0x56>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4a3b      	ldr	r2, [pc, #236]	@ (8001d8c <HAL_GPIO_Init+0x110>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d017      	beq.n	8001cd2 <HAL_GPIO_Init+0x56>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4a3a      	ldr	r2, [pc, #232]	@ (8001d90 <HAL_GPIO_Init+0x114>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d013      	beq.n	8001cd2 <HAL_GPIO_Init+0x56>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4a39      	ldr	r2, [pc, #228]	@ (8001d94 <HAL_GPIO_Init+0x118>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d00f      	beq.n	8001cd2 <HAL_GPIO_Init+0x56>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4a38      	ldr	r2, [pc, #224]	@ (8001d98 <HAL_GPIO_Init+0x11c>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d00b      	beq.n	8001cd2 <HAL_GPIO_Init+0x56>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4a37      	ldr	r2, [pc, #220]	@ (8001d9c <HAL_GPIO_Init+0x120>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d007      	beq.n	8001cd2 <HAL_GPIO_Init+0x56>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4a36      	ldr	r2, [pc, #216]	@ (8001da0 <HAL_GPIO_Init+0x124>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d003      	beq.n	8001cd2 <HAL_GPIO_Init+0x56>
 8001cca:	21aa      	movs	r1, #170	@ 0xaa
 8001ccc:	4835      	ldr	r0, [pc, #212]	@ (8001da4 <HAL_GPIO_Init+0x128>)
 8001cce:	f7fe fe47 	bl	8000960 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	b29b      	uxth	r3, r3
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d004      	beq.n	8001ce6 <HAL_GPIO_Init+0x6a>
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ce4:	d303      	bcc.n	8001cee <HAL_GPIO_Init+0x72>
 8001ce6:	21ab      	movs	r1, #171	@ 0xab
 8001ce8:	482e      	ldr	r0, [pc, #184]	@ (8001da4 <HAL_GPIO_Init+0x128>)
 8001cea:	f7fe fe39 	bl	8000960 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	f000 823d 	beq.w	8002172 <HAL_GPIO_Init+0x4f6>
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	f000 8238 	beq.w	8002172 <HAL_GPIO_Init+0x4f6>
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	2b11      	cmp	r3, #17
 8001d08:	f000 8233 	beq.w	8002172 <HAL_GPIO_Init+0x4f6>
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	2b02      	cmp	r3, #2
 8001d12:	f000 822e 	beq.w	8002172 <HAL_GPIO_Init+0x4f6>
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	2b12      	cmp	r3, #18
 8001d1c:	f000 8229 	beq.w	8002172 <HAL_GPIO_Init+0x4f6>
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 8001d28:	f000 8223 	beq.w	8002172 <HAL_GPIO_Init+0x4f6>
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8001d34:	f000 821d 	beq.w	8002172 <HAL_GPIO_Init+0x4f6>
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f5b3 1f44 	cmp.w	r3, #3211264	@ 0x310000
 8001d40:	f000 8217 	beq.w	8002172 <HAL_GPIO_Init+0x4f6>
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f5b3 1f90 	cmp.w	r3, #1179648	@ 0x120000
 8001d4c:	f000 8211 	beq.w	8002172 <HAL_GPIO_Init+0x4f6>
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f5b3 1f08 	cmp.w	r3, #2228224	@ 0x220000
 8001d58:	f000 820b 	beq.w	8002172 <HAL_GPIO_Init+0x4f6>
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f5b3 1f48 	cmp.w	r3, #3276800	@ 0x320000
 8001d64:	f000 8205 	beq.w	8002172 <HAL_GPIO_Init+0x4f6>
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	2b03      	cmp	r3, #3
 8001d6e:	f000 8200 	beq.w	8002172 <HAL_GPIO_Init+0x4f6>
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	2b0b      	cmp	r3, #11
 8001d78:	f000 81fb 	beq.w	8002172 <HAL_GPIO_Init+0x4f6>
 8001d7c:	21ac      	movs	r1, #172	@ 0xac
 8001d7e:	4809      	ldr	r0, [pc, #36]	@ (8001da4 <HAL_GPIO_Init+0x128>)
 8001d80:	f7fe fdee 	bl	8000960 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d84:	e1f5      	b.n	8002172 <HAL_GPIO_Init+0x4f6>
 8001d86:	bf00      	nop
 8001d88:	48000400 	.word	0x48000400
 8001d8c:	48000800 	.word	0x48000800
 8001d90:	48000c00 	.word	0x48000c00
 8001d94:	48001000 	.word	0x48001000
 8001d98:	48001400 	.word	0x48001400
 8001d9c:	48001800 	.word	0x48001800
 8001da0:	48001c00 	.word	0x48001c00
 8001da4:	08007688 	.word	0x08007688
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	2101      	movs	r1, #1
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	fa01 f303 	lsl.w	r3, r1, r3
 8001db4:	4013      	ands	r3, r2
 8001db6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	f000 81d6 	beq.w	800216c <HAL_GPIO_Init+0x4f0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f003 0303 	and.w	r3, r3, #3
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d005      	beq.n	8001dd8 <HAL_GPIO_Init+0x15c>
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f003 0303 	and.w	r3, r3, #3
 8001dd4:	2b02      	cmp	r3, #2
 8001dd6:	d144      	bne.n	8001e62 <HAL_GPIO_Init+0x1e6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d00f      	beq.n	8001e00 <HAL_GPIO_Init+0x184>
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d00b      	beq.n	8001e00 <HAL_GPIO_Init+0x184>
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	2b02      	cmp	r3, #2
 8001dee:	d007      	beq.n	8001e00 <HAL_GPIO_Init+0x184>
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	2b03      	cmp	r3, #3
 8001df6:	d003      	beq.n	8001e00 <HAL_GPIO_Init+0x184>
 8001df8:	21bb      	movs	r1, #187	@ 0xbb
 8001dfa:	489c      	ldr	r0, [pc, #624]	@ (800206c <HAL_GPIO_Init+0x3f0>)
 8001dfc:	f7fe fdb0 	bl	8000960 <assert_failed>

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	005b      	lsls	r3, r3, #1
 8001e0a:	2203      	movs	r2, #3
 8001e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e10:	43db      	mvns	r3, r3
 8001e12:	693a      	ldr	r2, [r7, #16]
 8001e14:	4013      	ands	r3, r2
 8001e16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	68da      	ldr	r2, [r3, #12]
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	005b      	lsls	r3, r3, #1
 8001e20:	fa02 f303 	lsl.w	r3, r2, r3
 8001e24:	693a      	ldr	r2, [r7, #16]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	693a      	ldr	r2, [r7, #16]
 8001e2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e36:	2201      	movs	r2, #1
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3e:	43db      	mvns	r3, r3
 8001e40:	693a      	ldr	r2, [r7, #16]
 8001e42:	4013      	ands	r3, r2
 8001e44:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	091b      	lsrs	r3, r3, #4
 8001e4c:	f003 0201 	and.w	r2, r3, #1
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	fa02 f303 	lsl.w	r3, r2, r3
 8001e56:	693a      	ldr	r2, [r7, #16]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	693a      	ldr	r2, [r7, #16]
 8001e60:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	f003 0303 	and.w	r3, r3, #3
 8001e6a:	2b03      	cmp	r3, #3
 8001e6c:	d118      	bne.n	8001ea0 <HAL_GPIO_Init+0x224>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e72:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001e74:	2201      	movs	r2, #1
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7c:	43db      	mvns	r3, r3
 8001e7e:	693a      	ldr	r2, [r7, #16]
 8001e80:	4013      	ands	r3, r2
 8001e82:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	08db      	lsrs	r3, r3, #3
 8001e8a:	f003 0201 	and.w	r2, r3, #1
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	fa02 f303 	lsl.w	r3, r2, r3
 8001e94:	693a      	ldr	r2, [r7, #16]
 8001e96:	4313      	orrs	r3, r2
 8001e98:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	693a      	ldr	r2, [r7, #16]
 8001e9e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f003 0303 	and.w	r3, r3, #3
 8001ea8:	2b03      	cmp	r3, #3
 8001eaa:	d027      	beq.n	8001efc <HAL_GPIO_Init+0x280>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d00b      	beq.n	8001ecc <HAL_GPIO_Init+0x250>
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d007      	beq.n	8001ecc <HAL_GPIO_Init+0x250>
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	d003      	beq.n	8001ecc <HAL_GPIO_Init+0x250>
 8001ec4:	21dc      	movs	r1, #220	@ 0xdc
 8001ec6:	4869      	ldr	r0, [pc, #420]	@ (800206c <HAL_GPIO_Init+0x3f0>)
 8001ec8:	f7fe fd4a 	bl	8000960 <assert_failed>

        temp = GPIOx->PUPDR;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	005b      	lsls	r3, r3, #1
 8001ed6:	2203      	movs	r2, #3
 8001ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8001edc:	43db      	mvns	r3, r3
 8001ede:	693a      	ldr	r2, [r7, #16]
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	689a      	ldr	r2, [r3, #8]
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	005b      	lsls	r3, r3, #1
 8001eec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef0:	693a      	ldr	r2, [r7, #16]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	693a      	ldr	r2, [r7, #16]
 8001efa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f003 0303 	and.w	r3, r3, #3
 8001f04:	2b02      	cmp	r3, #2
 8001f06:	d14f      	bne.n	8001fa8 <HAL_GPIO_Init+0x32c>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001f0e:	d01f      	beq.n	8001f50 <HAL_GPIO_Init+0x2d4>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	4a57      	ldr	r2, [pc, #348]	@ (8002070 <HAL_GPIO_Init+0x3f4>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d01b      	beq.n	8001f50 <HAL_GPIO_Init+0x2d4>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	4a56      	ldr	r2, [pc, #344]	@ (8002074 <HAL_GPIO_Init+0x3f8>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d017      	beq.n	8001f50 <HAL_GPIO_Init+0x2d4>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	4a55      	ldr	r2, [pc, #340]	@ (8002078 <HAL_GPIO_Init+0x3fc>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d013      	beq.n	8001f50 <HAL_GPIO_Init+0x2d4>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	4a54      	ldr	r2, [pc, #336]	@ (800207c <HAL_GPIO_Init+0x400>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d00f      	beq.n	8001f50 <HAL_GPIO_Init+0x2d4>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	4a53      	ldr	r2, [pc, #332]	@ (8002080 <HAL_GPIO_Init+0x404>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d00b      	beq.n	8001f50 <HAL_GPIO_Init+0x2d4>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	4a52      	ldr	r2, [pc, #328]	@ (8002084 <HAL_GPIO_Init+0x408>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d007      	beq.n	8001f50 <HAL_GPIO_Init+0x2d4>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	4a51      	ldr	r2, [pc, #324]	@ (8002088 <HAL_GPIO_Init+0x40c>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d003      	beq.n	8001f50 <HAL_GPIO_Init+0x2d4>
 8001f48:	21e8      	movs	r1, #232	@ 0xe8
 8001f4a:	4848      	ldr	r0, [pc, #288]	@ (800206c <HAL_GPIO_Init+0x3f0>)
 8001f4c:	f7fe fd08 	bl	8000960 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	691b      	ldr	r3, [r3, #16]
 8001f54:	2b0f      	cmp	r3, #15
 8001f56:	d903      	bls.n	8001f60 <HAL_GPIO_Init+0x2e4>
 8001f58:	21e9      	movs	r1, #233	@ 0xe9
 8001f5a:	4844      	ldr	r0, [pc, #272]	@ (800206c <HAL_GPIO_Init+0x3f0>)
 8001f5c:	f7fe fd00 	bl	8000960 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	08da      	lsrs	r2, r3, #3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	3208      	adds	r2, #8
 8001f68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f6c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	f003 0307 	and.w	r3, r3, #7
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	220f      	movs	r2, #15
 8001f78:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7c:	43db      	mvns	r3, r3
 8001f7e:	693a      	ldr	r2, [r7, #16]
 8001f80:	4013      	ands	r3, r2
 8001f82:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	691a      	ldr	r2, [r3, #16]
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	f003 0307 	and.w	r3, r3, #7
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	fa02 f303 	lsl.w	r3, r2, r3
 8001f94:	693a      	ldr	r2, [r7, #16]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	08da      	lsrs	r2, r3, #3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	3208      	adds	r2, #8
 8001fa2:	6939      	ldr	r1, [r7, #16]
 8001fa4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	005b      	lsls	r3, r3, #1
 8001fb2:	2203      	movs	r2, #3
 8001fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb8:	43db      	mvns	r3, r3
 8001fba:	693a      	ldr	r2, [r7, #16]
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f003 0203 	and.w	r2, r3, #3
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	005b      	lsls	r3, r3, #1
 8001fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd0:	693a      	ldr	r2, [r7, #16]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	693a      	ldr	r2, [r7, #16]
 8001fda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	f000 80c1 	beq.w	800216c <HAL_GPIO_Init+0x4f0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fea:	4b28      	ldr	r3, [pc, #160]	@ (800208c <HAL_GPIO_Init+0x410>)
 8001fec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fee:	4a27      	ldr	r2, [pc, #156]	@ (800208c <HAL_GPIO_Init+0x410>)
 8001ff0:	f043 0301 	orr.w	r3, r3, #1
 8001ff4:	6613      	str	r3, [r2, #96]	@ 0x60
 8001ff6:	4b25      	ldr	r3, [pc, #148]	@ (800208c <HAL_GPIO_Init+0x410>)
 8001ff8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ffa:	f003 0301 	and.w	r3, r3, #1
 8001ffe:	60bb      	str	r3, [r7, #8]
 8002000:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002002:	4a23      	ldr	r2, [pc, #140]	@ (8002090 <HAL_GPIO_Init+0x414>)
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	089b      	lsrs	r3, r3, #2
 8002008:	3302      	adds	r3, #2
 800200a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800200e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	f003 0303 	and.w	r3, r3, #3
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	220f      	movs	r2, #15
 800201a:	fa02 f303 	lsl.w	r3, r2, r3
 800201e:	43db      	mvns	r3, r3
 8002020:	693a      	ldr	r2, [r7, #16]
 8002022:	4013      	ands	r3, r2
 8002024:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800202c:	d03a      	beq.n	80020a4 <HAL_GPIO_Init+0x428>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a0f      	ldr	r2, [pc, #60]	@ (8002070 <HAL_GPIO_Init+0x3f4>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d034      	beq.n	80020a0 <HAL_GPIO_Init+0x424>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a0e      	ldr	r2, [pc, #56]	@ (8002074 <HAL_GPIO_Init+0x3f8>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d02e      	beq.n	800209c <HAL_GPIO_Init+0x420>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a0d      	ldr	r2, [pc, #52]	@ (8002078 <HAL_GPIO_Init+0x3fc>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d028      	beq.n	8002098 <HAL_GPIO_Init+0x41c>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a0c      	ldr	r2, [pc, #48]	@ (800207c <HAL_GPIO_Init+0x400>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d022      	beq.n	8002094 <HAL_GPIO_Init+0x418>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a0b      	ldr	r2, [pc, #44]	@ (8002080 <HAL_GPIO_Init+0x404>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d007      	beq.n	8002066 <HAL_GPIO_Init+0x3ea>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a0a      	ldr	r2, [pc, #40]	@ (8002084 <HAL_GPIO_Init+0x408>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d101      	bne.n	8002062 <HAL_GPIO_Init+0x3e6>
 800205e:	2306      	movs	r3, #6
 8002060:	e021      	b.n	80020a6 <HAL_GPIO_Init+0x42a>
 8002062:	2307      	movs	r3, #7
 8002064:	e01f      	b.n	80020a6 <HAL_GPIO_Init+0x42a>
 8002066:	2305      	movs	r3, #5
 8002068:	e01d      	b.n	80020a6 <HAL_GPIO_Init+0x42a>
 800206a:	bf00      	nop
 800206c:	08007688 	.word	0x08007688
 8002070:	48000400 	.word	0x48000400
 8002074:	48000800 	.word	0x48000800
 8002078:	48000c00 	.word	0x48000c00
 800207c:	48001000 	.word	0x48001000
 8002080:	48001400 	.word	0x48001400
 8002084:	48001800 	.word	0x48001800
 8002088:	48001c00 	.word	0x48001c00
 800208c:	40021000 	.word	0x40021000
 8002090:	40010000 	.word	0x40010000
 8002094:	2304      	movs	r3, #4
 8002096:	e006      	b.n	80020a6 <HAL_GPIO_Init+0x42a>
 8002098:	2303      	movs	r3, #3
 800209a:	e004      	b.n	80020a6 <HAL_GPIO_Init+0x42a>
 800209c:	2302      	movs	r3, #2
 800209e:	e002      	b.n	80020a6 <HAL_GPIO_Init+0x42a>
 80020a0:	2301      	movs	r3, #1
 80020a2:	e000      	b.n	80020a6 <HAL_GPIO_Init+0x42a>
 80020a4:	2300      	movs	r3, #0
 80020a6:	697a      	ldr	r2, [r7, #20]
 80020a8:	f002 0203 	and.w	r2, r2, #3
 80020ac:	0092      	lsls	r2, r2, #2
 80020ae:	4093      	lsls	r3, r2
 80020b0:	693a      	ldr	r2, [r7, #16]
 80020b2:	4313      	orrs	r3, r2
 80020b4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80020b6:	4935      	ldr	r1, [pc, #212]	@ (800218c <HAL_GPIO_Init+0x510>)
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	089b      	lsrs	r3, r3, #2
 80020bc:	3302      	adds	r3, #2
 80020be:	693a      	ldr	r2, [r7, #16]
 80020c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80020c4:	4b32      	ldr	r3, [pc, #200]	@ (8002190 <HAL_GPIO_Init+0x514>)
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	43db      	mvns	r3, r3
 80020ce:	693a      	ldr	r2, [r7, #16]
 80020d0:	4013      	ands	r3, r2
 80020d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d003      	beq.n	80020e8 <HAL_GPIO_Init+0x46c>
        {
          temp |= iocurrent;
 80020e0:	693a      	ldr	r2, [r7, #16]
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	4313      	orrs	r3, r2
 80020e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80020e8:	4a29      	ldr	r2, [pc, #164]	@ (8002190 <HAL_GPIO_Init+0x514>)
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80020ee:	4b28      	ldr	r3, [pc, #160]	@ (8002190 <HAL_GPIO_Init+0x514>)
 80020f0:	68db      	ldr	r3, [r3, #12]
 80020f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	43db      	mvns	r3, r3
 80020f8:	693a      	ldr	r2, [r7, #16]
 80020fa:	4013      	ands	r3, r2
 80020fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d003      	beq.n	8002112 <HAL_GPIO_Init+0x496>
        {
          temp |= iocurrent;
 800210a:	693a      	ldr	r2, [r7, #16]
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	4313      	orrs	r3, r2
 8002110:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002112:	4a1f      	ldr	r2, [pc, #124]	@ (8002190 <HAL_GPIO_Init+0x514>)
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002118:	4b1d      	ldr	r3, [pc, #116]	@ (8002190 <HAL_GPIO_Init+0x514>)
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	43db      	mvns	r3, r3
 8002122:	693a      	ldr	r2, [r7, #16]
 8002124:	4013      	ands	r3, r2
 8002126:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002130:	2b00      	cmp	r3, #0
 8002132:	d003      	beq.n	800213c <HAL_GPIO_Init+0x4c0>
        {
          temp |= iocurrent;
 8002134:	693a      	ldr	r2, [r7, #16]
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	4313      	orrs	r3, r2
 800213a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800213c:	4a14      	ldr	r2, [pc, #80]	@ (8002190 <HAL_GPIO_Init+0x514>)
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002142:	4b13      	ldr	r3, [pc, #76]	@ (8002190 <HAL_GPIO_Init+0x514>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	43db      	mvns	r3, r3
 800214c:	693a      	ldr	r2, [r7, #16]
 800214e:	4013      	ands	r3, r2
 8002150:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d003      	beq.n	8002166 <HAL_GPIO_Init+0x4ea>
        {
          temp |= iocurrent;
 800215e:	693a      	ldr	r2, [r7, #16]
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	4313      	orrs	r3, r2
 8002164:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002166:	4a0a      	ldr	r2, [pc, #40]	@ (8002190 <HAL_GPIO_Init+0x514>)
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	3301      	adds	r3, #1
 8002170:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	fa22 f303 	lsr.w	r3, r2, r3
 800217c:	2b00      	cmp	r3, #0
 800217e:	f47f ae13 	bne.w	8001da8 <HAL_GPIO_Init+0x12c>
  }
}
 8002182:	bf00      	nop
 8002184:	bf00      	nop
 8002186:	3718      	adds	r7, #24
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}
 800218c:	40010000 	.word	0x40010000
 8002190:	40010400 	.word	0x40010400

08002194 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002194:	b480      	push	{r7}
 8002196:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002198:	4b04      	ldr	r3, [pc, #16]	@ (80021ac <HAL_PWREx_GetVoltageRange+0x18>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	40007000 	.word	0x40007000

080021b0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b084      	sub	sp, #16
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80021be:	d007      	beq.n	80021d0 <HAL_PWREx_ControlVoltageScaling+0x20>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021c6:	d003      	beq.n	80021d0 <HAL_PWREx_ControlVoltageScaling+0x20>
 80021c8:	21a7      	movs	r1, #167	@ 0xa7
 80021ca:	4826      	ldr	r0, [pc, #152]	@ (8002264 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 80021cc:	f7fe fbc8 	bl	8000960 <assert_failed>
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80021d6:	d130      	bne.n	800223a <HAL_PWREx_ControlVoltageScaling+0x8a>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80021d8:	4b23      	ldr	r3, [pc, #140]	@ (8002268 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80021e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80021e4:	d038      	beq.n	8002258 <HAL_PWREx_ControlVoltageScaling+0xa8>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80021e6:	4b20      	ldr	r3, [pc, #128]	@ (8002268 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80021ee:	4a1e      	ldr	r2, [pc, #120]	@ (8002268 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 80021f0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80021f4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80021f6:	4b1d      	ldr	r3, [pc, #116]	@ (800226c <HAL_PWREx_ControlVoltageScaling+0xbc>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	2232      	movs	r2, #50	@ 0x32
 80021fc:	fb02 f303 	mul.w	r3, r2, r3
 8002200:	4a1b      	ldr	r2, [pc, #108]	@ (8002270 <HAL_PWREx_ControlVoltageScaling+0xc0>)
 8002202:	fba2 2303 	umull	r2, r3, r2, r3
 8002206:	0c9b      	lsrs	r3, r3, #18
 8002208:	3301      	adds	r3, #1
 800220a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800220c:	e002      	b.n	8002214 <HAL_PWREx_ControlVoltageScaling+0x64>
      {
        wait_loop_index--;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	3b01      	subs	r3, #1
 8002212:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002214:	4b14      	ldr	r3, [pc, #80]	@ (8002268 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8002216:	695b      	ldr	r3, [r3, #20]
 8002218:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800221c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002220:	d102      	bne.n	8002228 <HAL_PWREx_ControlVoltageScaling+0x78>
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d1f2      	bne.n	800220e <HAL_PWREx_ControlVoltageScaling+0x5e>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002228:	4b0f      	ldr	r3, [pc, #60]	@ (8002268 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 800222a:	695b      	ldr	r3, [r3, #20]
 800222c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002230:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002234:	d110      	bne.n	8002258 <HAL_PWREx_ControlVoltageScaling+0xa8>
      {
        return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e00f      	b.n	800225a <HAL_PWREx_ControlVoltageScaling+0xaa>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800223a:	4b0b      	ldr	r3, [pc, #44]	@ (8002268 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002242:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002246:	d007      	beq.n	8002258 <HAL_PWREx_ControlVoltageScaling+0xa8>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002248:	4b07      	ldr	r3, [pc, #28]	@ (8002268 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002250:	4a05      	ldr	r2, [pc, #20]	@ (8002268 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8002252:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002256:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002258:	2300      	movs	r3, #0
}
 800225a:	4618      	mov	r0, r3
 800225c:	3710      	adds	r7, #16
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	080076c4 	.word	0x080076c4
 8002268:	40007000 	.word	0x40007000
 800226c:	20000008 	.word	0x20000008
 8002270:	431bde83 	.word	0x431bde83

08002274 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b088      	sub	sp, #32
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d102      	bne.n	8002288 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	f000 bcef 	b.w	8002c66 <HAL_RCC_OscConfig+0x9f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d008      	beq.n	80022a2 <HAL_RCC_OscConfig+0x2e>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	2b1f      	cmp	r3, #31
 8002296:	d904      	bls.n	80022a2 <HAL_RCC_OscConfig+0x2e>
 8002298:	f44f 71d1 	mov.w	r1, #418	@ 0x1a2
 800229c:	489a      	ldr	r0, [pc, #616]	@ (8002508 <HAL_RCC_OscConfig+0x294>)
 800229e:	f7fe fb5f 	bl	8000960 <assert_failed>

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022a2:	4b9a      	ldr	r3, [pc, #616]	@ (800250c <HAL_RCC_OscConfig+0x298>)
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	f003 030c 	and.w	r3, r3, #12
 80022aa:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022ac:	4b97      	ldr	r3, [pc, #604]	@ (800250c <HAL_RCC_OscConfig+0x298>)
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	f003 0303 	and.w	r3, r3, #3
 80022b4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0310 	and.w	r3, r3, #16
 80022be:	2b00      	cmp	r3, #0
 80022c0:	f000 813d 	beq.w	800253e <HAL_RCC_OscConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	699b      	ldr	r3, [r3, #24]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d008      	beq.n	80022de <HAL_RCC_OscConfig+0x6a>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	699b      	ldr	r3, [r3, #24]
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d004      	beq.n	80022de <HAL_RCC_OscConfig+0x6a>
 80022d4:	f240 11ab 	movw	r1, #427	@ 0x1ab
 80022d8:	488b      	ldr	r0, [pc, #556]	@ (8002508 <HAL_RCC_OscConfig+0x294>)
 80022da:	f7fe fb41 	bl	8000960 <assert_failed>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	69db      	ldr	r3, [r3, #28]
 80022e2:	2bff      	cmp	r3, #255	@ 0xff
 80022e4:	d904      	bls.n	80022f0 <HAL_RCC_OscConfig+0x7c>
 80022e6:	f44f 71d6 	mov.w	r1, #428	@ 0x1ac
 80022ea:	4887      	ldr	r0, [pc, #540]	@ (8002508 <HAL_RCC_OscConfig+0x294>)
 80022ec:	f7fe fb38 	bl	8000960 <assert_failed>
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6a1b      	ldr	r3, [r3, #32]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d030      	beq.n	800235a <HAL_RCC_OscConfig+0xe6>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6a1b      	ldr	r3, [r3, #32]
 80022fc:	2b10      	cmp	r3, #16
 80022fe:	d02c      	beq.n	800235a <HAL_RCC_OscConfig+0xe6>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6a1b      	ldr	r3, [r3, #32]
 8002304:	2b20      	cmp	r3, #32
 8002306:	d028      	beq.n	800235a <HAL_RCC_OscConfig+0xe6>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6a1b      	ldr	r3, [r3, #32]
 800230c:	2b30      	cmp	r3, #48	@ 0x30
 800230e:	d024      	beq.n	800235a <HAL_RCC_OscConfig+0xe6>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6a1b      	ldr	r3, [r3, #32]
 8002314:	2b40      	cmp	r3, #64	@ 0x40
 8002316:	d020      	beq.n	800235a <HAL_RCC_OscConfig+0xe6>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6a1b      	ldr	r3, [r3, #32]
 800231c:	2b50      	cmp	r3, #80	@ 0x50
 800231e:	d01c      	beq.n	800235a <HAL_RCC_OscConfig+0xe6>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6a1b      	ldr	r3, [r3, #32]
 8002324:	2b60      	cmp	r3, #96	@ 0x60
 8002326:	d018      	beq.n	800235a <HAL_RCC_OscConfig+0xe6>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6a1b      	ldr	r3, [r3, #32]
 800232c:	2b70      	cmp	r3, #112	@ 0x70
 800232e:	d014      	beq.n	800235a <HAL_RCC_OscConfig+0xe6>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6a1b      	ldr	r3, [r3, #32]
 8002334:	2b80      	cmp	r3, #128	@ 0x80
 8002336:	d010      	beq.n	800235a <HAL_RCC_OscConfig+0xe6>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6a1b      	ldr	r3, [r3, #32]
 800233c:	2b90      	cmp	r3, #144	@ 0x90
 800233e:	d00c      	beq.n	800235a <HAL_RCC_OscConfig+0xe6>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6a1b      	ldr	r3, [r3, #32]
 8002344:	2ba0      	cmp	r3, #160	@ 0xa0
 8002346:	d008      	beq.n	800235a <HAL_RCC_OscConfig+0xe6>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6a1b      	ldr	r3, [r3, #32]
 800234c:	2bb0      	cmp	r3, #176	@ 0xb0
 800234e:	d004      	beq.n	800235a <HAL_RCC_OscConfig+0xe6>
 8002350:	f240 11ad 	movw	r1, #429	@ 0x1ad
 8002354:	486c      	ldr	r0, [pc, #432]	@ (8002508 <HAL_RCC_OscConfig+0x294>)
 8002356:	f7fe fb03 	bl	8000960 <assert_failed>

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800235a:	69bb      	ldr	r3, [r7, #24]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d007      	beq.n	8002370 <HAL_RCC_OscConfig+0xfc>
 8002360:	69bb      	ldr	r3, [r7, #24]
 8002362:	2b0c      	cmp	r3, #12
 8002364:	f040 808e 	bne.w	8002484 <HAL_RCC_OscConfig+0x210>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	2b01      	cmp	r3, #1
 800236c:	f040 808a 	bne.w	8002484 <HAL_RCC_OscConfig+0x210>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002370:	4b66      	ldr	r3, [pc, #408]	@ (800250c <HAL_RCC_OscConfig+0x298>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0302 	and.w	r3, r3, #2
 8002378:	2b00      	cmp	r3, #0
 800237a:	d006      	beq.n	800238a <HAL_RCC_OscConfig+0x116>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	699b      	ldr	r3, [r3, #24]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d102      	bne.n	800238a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	f000 bc6e 	b.w	8002c66 <HAL_RCC_OscConfig+0x9f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6a1a      	ldr	r2, [r3, #32]
 800238e:	4b5f      	ldr	r3, [pc, #380]	@ (800250c <HAL_RCC_OscConfig+0x298>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0308 	and.w	r3, r3, #8
 8002396:	2b00      	cmp	r3, #0
 8002398:	d004      	beq.n	80023a4 <HAL_RCC_OscConfig+0x130>
 800239a:	4b5c      	ldr	r3, [pc, #368]	@ (800250c <HAL_RCC_OscConfig+0x298>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80023a2:	e005      	b.n	80023b0 <HAL_RCC_OscConfig+0x13c>
 80023a4:	4b59      	ldr	r3, [pc, #356]	@ (800250c <HAL_RCC_OscConfig+0x298>)
 80023a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023aa:	091b      	lsrs	r3, r3, #4
 80023ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d224      	bcs.n	80023fe <HAL_RCC_OscConfig+0x18a>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6a1b      	ldr	r3, [r3, #32]
 80023b8:	4618      	mov	r0, r3
 80023ba:	f000 fec1 	bl	8003140 <RCC_SetFlashLatencyFromMSIRange>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d002      	beq.n	80023ca <HAL_RCC_OscConfig+0x156>
          {
            return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	f000 bc4e 	b.w	8002c66 <HAL_RCC_OscConfig+0x9f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023ca:	4b50      	ldr	r3, [pc, #320]	@ (800250c <HAL_RCC_OscConfig+0x298>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a4f      	ldr	r2, [pc, #316]	@ (800250c <HAL_RCC_OscConfig+0x298>)
 80023d0:	f043 0308 	orr.w	r3, r3, #8
 80023d4:	6013      	str	r3, [r2, #0]
 80023d6:	4b4d      	ldr	r3, [pc, #308]	@ (800250c <HAL_RCC_OscConfig+0x298>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6a1b      	ldr	r3, [r3, #32]
 80023e2:	494a      	ldr	r1, [pc, #296]	@ (800250c <HAL_RCC_OscConfig+0x298>)
 80023e4:	4313      	orrs	r3, r2
 80023e6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023e8:	4b48      	ldr	r3, [pc, #288]	@ (800250c <HAL_RCC_OscConfig+0x298>)
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	69db      	ldr	r3, [r3, #28]
 80023f4:	021b      	lsls	r3, r3, #8
 80023f6:	4945      	ldr	r1, [pc, #276]	@ (800250c <HAL_RCC_OscConfig+0x298>)
 80023f8:	4313      	orrs	r3, r2
 80023fa:	604b      	str	r3, [r1, #4]
 80023fc:	e026      	b.n	800244c <HAL_RCC_OscConfig+0x1d8>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023fe:	4b43      	ldr	r3, [pc, #268]	@ (800250c <HAL_RCC_OscConfig+0x298>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a42      	ldr	r2, [pc, #264]	@ (800250c <HAL_RCC_OscConfig+0x298>)
 8002404:	f043 0308 	orr.w	r3, r3, #8
 8002408:	6013      	str	r3, [r2, #0]
 800240a:	4b40      	ldr	r3, [pc, #256]	@ (800250c <HAL_RCC_OscConfig+0x298>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6a1b      	ldr	r3, [r3, #32]
 8002416:	493d      	ldr	r1, [pc, #244]	@ (800250c <HAL_RCC_OscConfig+0x298>)
 8002418:	4313      	orrs	r3, r2
 800241a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800241c:	4b3b      	ldr	r3, [pc, #236]	@ (800250c <HAL_RCC_OscConfig+0x298>)
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	69db      	ldr	r3, [r3, #28]
 8002428:	021b      	lsls	r3, r3, #8
 800242a:	4938      	ldr	r1, [pc, #224]	@ (800250c <HAL_RCC_OscConfig+0x298>)
 800242c:	4313      	orrs	r3, r2
 800242e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002430:	69bb      	ldr	r3, [r7, #24]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d10a      	bne.n	800244c <HAL_RCC_OscConfig+0x1d8>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6a1b      	ldr	r3, [r3, #32]
 800243a:	4618      	mov	r0, r3
 800243c:	f000 fe80 	bl	8003140 <RCC_SetFlashLatencyFromMSIRange>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d002      	beq.n	800244c <HAL_RCC_OscConfig+0x1d8>
            {
              return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	f000 bc0d 	b.w	8002c66 <HAL_RCC_OscConfig+0x9f2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800244c:	f000 fdb4 	bl	8002fb8 <HAL_RCC_GetSysClockFreq>
 8002450:	4602      	mov	r2, r0
 8002452:	4b2e      	ldr	r3, [pc, #184]	@ (800250c <HAL_RCC_OscConfig+0x298>)
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	091b      	lsrs	r3, r3, #4
 8002458:	f003 030f 	and.w	r3, r3, #15
 800245c:	492c      	ldr	r1, [pc, #176]	@ (8002510 <HAL_RCC_OscConfig+0x29c>)
 800245e:	5ccb      	ldrb	r3, [r1, r3]
 8002460:	f003 031f 	and.w	r3, r3, #31
 8002464:	fa22 f303 	lsr.w	r3, r2, r3
 8002468:	4a2a      	ldr	r2, [pc, #168]	@ (8002514 <HAL_RCC_OscConfig+0x2a0>)
 800246a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800246c:	4b2a      	ldr	r3, [pc, #168]	@ (8002518 <HAL_RCC_OscConfig+0x2a4>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4618      	mov	r0, r3
 8002472:	f7fe ffbf 	bl	80013f4 <HAL_InitTick>
 8002476:	4603      	mov	r3, r0
 8002478:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800247a:	7bfb      	ldrb	r3, [r7, #15]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d05d      	beq.n	800253c <HAL_RCC_OscConfig+0x2c8>
        {
          return status;
 8002480:	7bfb      	ldrb	r3, [r7, #15]
 8002482:	e3f0      	b.n	8002c66 <HAL_RCC_OscConfig+0x9f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	699b      	ldr	r3, [r3, #24]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d032      	beq.n	80024f2 <HAL_RCC_OscConfig+0x27e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800248c:	4b1f      	ldr	r3, [pc, #124]	@ (800250c <HAL_RCC_OscConfig+0x298>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a1e      	ldr	r2, [pc, #120]	@ (800250c <HAL_RCC_OscConfig+0x298>)
 8002492:	f043 0301 	orr.w	r3, r3, #1
 8002496:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002498:	f7fe fffc 	bl	8001494 <HAL_GetTick>
 800249c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800249e:	e008      	b.n	80024b2 <HAL_RCC_OscConfig+0x23e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80024a0:	f7fe fff8 	bl	8001494 <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d901      	bls.n	80024b2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	e3d9      	b.n	8002c66 <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80024b2:	4b16      	ldr	r3, [pc, #88]	@ (800250c <HAL_RCC_OscConfig+0x298>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0302 	and.w	r3, r3, #2
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d0f0      	beq.n	80024a0 <HAL_RCC_OscConfig+0x22c>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024be:	4b13      	ldr	r3, [pc, #76]	@ (800250c <HAL_RCC_OscConfig+0x298>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a12      	ldr	r2, [pc, #72]	@ (800250c <HAL_RCC_OscConfig+0x298>)
 80024c4:	f043 0308 	orr.w	r3, r3, #8
 80024c8:	6013      	str	r3, [r2, #0]
 80024ca:	4b10      	ldr	r3, [pc, #64]	@ (800250c <HAL_RCC_OscConfig+0x298>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6a1b      	ldr	r3, [r3, #32]
 80024d6:	490d      	ldr	r1, [pc, #52]	@ (800250c <HAL_RCC_OscConfig+0x298>)
 80024d8:	4313      	orrs	r3, r2
 80024da:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024dc:	4b0b      	ldr	r3, [pc, #44]	@ (800250c <HAL_RCC_OscConfig+0x298>)
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	69db      	ldr	r3, [r3, #28]
 80024e8:	021b      	lsls	r3, r3, #8
 80024ea:	4908      	ldr	r1, [pc, #32]	@ (800250c <HAL_RCC_OscConfig+0x298>)
 80024ec:	4313      	orrs	r3, r2
 80024ee:	604b      	str	r3, [r1, #4]
 80024f0:	e025      	b.n	800253e <HAL_RCC_OscConfig+0x2ca>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80024f2:	4b06      	ldr	r3, [pc, #24]	@ (800250c <HAL_RCC_OscConfig+0x298>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a05      	ldr	r2, [pc, #20]	@ (800250c <HAL_RCC_OscConfig+0x298>)
 80024f8:	f023 0301 	bic.w	r3, r3, #1
 80024fc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80024fe:	f7fe ffc9 	bl	8001494 <HAL_GetTick>
 8002502:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002504:	e013      	b.n	800252e <HAL_RCC_OscConfig+0x2ba>
 8002506:	bf00      	nop
 8002508:	08007700 	.word	0x08007700
 800250c:	40021000 	.word	0x40021000
 8002510:	0800785c 	.word	0x0800785c
 8002514:	20000008 	.word	0x20000008
 8002518:	2000000c 	.word	0x2000000c
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800251c:	f7fe ffba 	bl	8001494 <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	2b02      	cmp	r3, #2
 8002528:	d901      	bls.n	800252e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800252a:	2303      	movs	r3, #3
 800252c:	e39b      	b.n	8002c66 <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800252e:	4b97      	ldr	r3, [pc, #604]	@ (800278c <HAL_RCC_OscConfig+0x518>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0302 	and.w	r3, r3, #2
 8002536:	2b00      	cmp	r3, #0
 8002538:	d1f0      	bne.n	800251c <HAL_RCC_OscConfig+0x2a8>
 800253a:	e000      	b.n	800253e <HAL_RCC_OscConfig+0x2ca>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800253c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0301 	and.w	r3, r3, #1
 8002546:	2b00      	cmp	r3, #0
 8002548:	d07e      	beq.n	8002648 <HAL_RCC_OscConfig+0x3d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d00e      	beq.n	8002570 <HAL_RCC_OscConfig+0x2fc>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800255a:	d009      	beq.n	8002570 <HAL_RCC_OscConfig+0x2fc>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002564:	d004      	beq.n	8002570 <HAL_RCC_OscConfig+0x2fc>
 8002566:	f240 2119 	movw	r1, #537	@ 0x219
 800256a:	4889      	ldr	r0, [pc, #548]	@ (8002790 <HAL_RCC_OscConfig+0x51c>)
 800256c:	f7fe f9f8 	bl	8000960 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002570:	69bb      	ldr	r3, [r7, #24]
 8002572:	2b08      	cmp	r3, #8
 8002574:	d005      	beq.n	8002582 <HAL_RCC_OscConfig+0x30e>
 8002576:	69bb      	ldr	r3, [r7, #24]
 8002578:	2b0c      	cmp	r3, #12
 800257a:	d10e      	bne.n	800259a <HAL_RCC_OscConfig+0x326>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	2b03      	cmp	r3, #3
 8002580:	d10b      	bne.n	800259a <HAL_RCC_OscConfig+0x326>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002582:	4b82      	ldr	r3, [pc, #520]	@ (800278c <HAL_RCC_OscConfig+0x518>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d05b      	beq.n	8002646 <HAL_RCC_OscConfig+0x3d2>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d157      	bne.n	8002646 <HAL_RCC_OscConfig+0x3d2>
      {
        return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e365      	b.n	8002c66 <HAL_RCC_OscConfig+0x9f2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025a2:	d106      	bne.n	80025b2 <HAL_RCC_OscConfig+0x33e>
 80025a4:	4b79      	ldr	r3, [pc, #484]	@ (800278c <HAL_RCC_OscConfig+0x518>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a78      	ldr	r2, [pc, #480]	@ (800278c <HAL_RCC_OscConfig+0x518>)
 80025aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025ae:	6013      	str	r3, [r2, #0]
 80025b0:	e01d      	b.n	80025ee <HAL_RCC_OscConfig+0x37a>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80025ba:	d10c      	bne.n	80025d6 <HAL_RCC_OscConfig+0x362>
 80025bc:	4b73      	ldr	r3, [pc, #460]	@ (800278c <HAL_RCC_OscConfig+0x518>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a72      	ldr	r2, [pc, #456]	@ (800278c <HAL_RCC_OscConfig+0x518>)
 80025c2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80025c6:	6013      	str	r3, [r2, #0]
 80025c8:	4b70      	ldr	r3, [pc, #448]	@ (800278c <HAL_RCC_OscConfig+0x518>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a6f      	ldr	r2, [pc, #444]	@ (800278c <HAL_RCC_OscConfig+0x518>)
 80025ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025d2:	6013      	str	r3, [r2, #0]
 80025d4:	e00b      	b.n	80025ee <HAL_RCC_OscConfig+0x37a>
 80025d6:	4b6d      	ldr	r3, [pc, #436]	@ (800278c <HAL_RCC_OscConfig+0x518>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a6c      	ldr	r2, [pc, #432]	@ (800278c <HAL_RCC_OscConfig+0x518>)
 80025dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025e0:	6013      	str	r3, [r2, #0]
 80025e2:	4b6a      	ldr	r3, [pc, #424]	@ (800278c <HAL_RCC_OscConfig+0x518>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a69      	ldr	r2, [pc, #420]	@ (800278c <HAL_RCC_OscConfig+0x518>)
 80025e8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80025ec:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d013      	beq.n	800261e <HAL_RCC_OscConfig+0x3aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025f6:	f7fe ff4d 	bl	8001494 <HAL_GetTick>
 80025fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025fc:	e008      	b.n	8002610 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025fe:	f7fe ff49 	bl	8001494 <HAL_GetTick>
 8002602:	4602      	mov	r2, r0
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	2b64      	cmp	r3, #100	@ 0x64
 800260a:	d901      	bls.n	8002610 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 800260c:	2303      	movs	r3, #3
 800260e:	e32a      	b.n	8002c66 <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002610:	4b5e      	ldr	r3, [pc, #376]	@ (800278c <HAL_RCC_OscConfig+0x518>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002618:	2b00      	cmp	r3, #0
 800261a:	d0f0      	beq.n	80025fe <HAL_RCC_OscConfig+0x38a>
 800261c:	e014      	b.n	8002648 <HAL_RCC_OscConfig+0x3d4>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800261e:	f7fe ff39 	bl	8001494 <HAL_GetTick>
 8002622:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002624:	e008      	b.n	8002638 <HAL_RCC_OscConfig+0x3c4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002626:	f7fe ff35 	bl	8001494 <HAL_GetTick>
 800262a:	4602      	mov	r2, r0
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	2b64      	cmp	r3, #100	@ 0x64
 8002632:	d901      	bls.n	8002638 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8002634:	2303      	movs	r3, #3
 8002636:	e316      	b.n	8002c66 <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002638:	4b54      	ldr	r3, [pc, #336]	@ (800278c <HAL_RCC_OscConfig+0x518>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002640:	2b00      	cmp	r3, #0
 8002642:	d1f0      	bne.n	8002626 <HAL_RCC_OscConfig+0x3b2>
 8002644:	e000      	b.n	8002648 <HAL_RCC_OscConfig+0x3d4>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002646:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0302 	and.w	r3, r3, #2
 8002650:	2b00      	cmp	r3, #0
 8002652:	d077      	beq.n	8002744 <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d009      	beq.n	8002670 <HAL_RCC_OscConfig+0x3fc>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002664:	d004      	beq.n	8002670 <HAL_RCC_OscConfig+0x3fc>
 8002666:	f44f 7113 	mov.w	r1, #588	@ 0x24c
 800266a:	4849      	ldr	r0, [pc, #292]	@ (8002790 <HAL_RCC_OscConfig+0x51c>)
 800266c:	f7fe f978 	bl	8000960 <assert_failed>
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	691b      	ldr	r3, [r3, #16]
 8002674:	2b1f      	cmp	r3, #31
 8002676:	d904      	bls.n	8002682 <HAL_RCC_OscConfig+0x40e>
 8002678:	f240 214d 	movw	r1, #589	@ 0x24d
 800267c:	4844      	ldr	r0, [pc, #272]	@ (8002790 <HAL_RCC_OscConfig+0x51c>)
 800267e:	f7fe f96f 	bl	8000960 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002682:	69bb      	ldr	r3, [r7, #24]
 8002684:	2b04      	cmp	r3, #4
 8002686:	d005      	beq.n	8002694 <HAL_RCC_OscConfig+0x420>
 8002688:	69bb      	ldr	r3, [r7, #24]
 800268a:	2b0c      	cmp	r3, #12
 800268c:	d119      	bne.n	80026c2 <HAL_RCC_OscConfig+0x44e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	2b02      	cmp	r3, #2
 8002692:	d116      	bne.n	80026c2 <HAL_RCC_OscConfig+0x44e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002694:	4b3d      	ldr	r3, [pc, #244]	@ (800278c <HAL_RCC_OscConfig+0x518>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800269c:	2b00      	cmp	r3, #0
 800269e:	d005      	beq.n	80026ac <HAL_RCC_OscConfig+0x438>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d101      	bne.n	80026ac <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e2dc      	b.n	8002c66 <HAL_RCC_OscConfig+0x9f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026ac:	4b37      	ldr	r3, [pc, #220]	@ (800278c <HAL_RCC_OscConfig+0x518>)
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	691b      	ldr	r3, [r3, #16]
 80026b8:	061b      	lsls	r3, r3, #24
 80026ba:	4934      	ldr	r1, [pc, #208]	@ (800278c <HAL_RCC_OscConfig+0x518>)
 80026bc:	4313      	orrs	r3, r2
 80026be:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026c0:	e040      	b.n	8002744 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	68db      	ldr	r3, [r3, #12]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d023      	beq.n	8002712 <HAL_RCC_OscConfig+0x49e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026ca:	4b30      	ldr	r3, [pc, #192]	@ (800278c <HAL_RCC_OscConfig+0x518>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a2f      	ldr	r2, [pc, #188]	@ (800278c <HAL_RCC_OscConfig+0x518>)
 80026d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026d6:	f7fe fedd 	bl	8001494 <HAL_GetTick>
 80026da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026dc:	e008      	b.n	80026f0 <HAL_RCC_OscConfig+0x47c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026de:	f7fe fed9 	bl	8001494 <HAL_GetTick>
 80026e2:	4602      	mov	r2, r0
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	d901      	bls.n	80026f0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80026ec:	2303      	movs	r3, #3
 80026ee:	e2ba      	b.n	8002c66 <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026f0:	4b26      	ldr	r3, [pc, #152]	@ (800278c <HAL_RCC_OscConfig+0x518>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d0f0      	beq.n	80026de <HAL_RCC_OscConfig+0x46a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026fc:	4b23      	ldr	r3, [pc, #140]	@ (800278c <HAL_RCC_OscConfig+0x518>)
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	691b      	ldr	r3, [r3, #16]
 8002708:	061b      	lsls	r3, r3, #24
 800270a:	4920      	ldr	r1, [pc, #128]	@ (800278c <HAL_RCC_OscConfig+0x518>)
 800270c:	4313      	orrs	r3, r2
 800270e:	604b      	str	r3, [r1, #4]
 8002710:	e018      	b.n	8002744 <HAL_RCC_OscConfig+0x4d0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002712:	4b1e      	ldr	r3, [pc, #120]	@ (800278c <HAL_RCC_OscConfig+0x518>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a1d      	ldr	r2, [pc, #116]	@ (800278c <HAL_RCC_OscConfig+0x518>)
 8002718:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800271c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800271e:	f7fe feb9 	bl	8001494 <HAL_GetTick>
 8002722:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002724:	e008      	b.n	8002738 <HAL_RCC_OscConfig+0x4c4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002726:	f7fe feb5 	bl	8001494 <HAL_GetTick>
 800272a:	4602      	mov	r2, r0
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	2b02      	cmp	r3, #2
 8002732:	d901      	bls.n	8002738 <HAL_RCC_OscConfig+0x4c4>
          {
            return HAL_TIMEOUT;
 8002734:	2303      	movs	r3, #3
 8002736:	e296      	b.n	8002c66 <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002738:	4b14      	ldr	r3, [pc, #80]	@ (800278c <HAL_RCC_OscConfig+0x518>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002740:	2b00      	cmp	r3, #0
 8002742:	d1f0      	bne.n	8002726 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 0308 	and.w	r3, r3, #8
 800274c:	2b00      	cmp	r3, #0
 800274e:	d04e      	beq.n	80027ee <HAL_RCC_OscConfig+0x57a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	695b      	ldr	r3, [r3, #20]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d008      	beq.n	800276a <HAL_RCC_OscConfig+0x4f6>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	695b      	ldr	r3, [r3, #20]
 800275c:	2b01      	cmp	r3, #1
 800275e:	d004      	beq.n	800276a <HAL_RCC_OscConfig+0x4f6>
 8002760:	f240 218d 	movw	r1, #653	@ 0x28d
 8002764:	480a      	ldr	r0, [pc, #40]	@ (8002790 <HAL_RCC_OscConfig+0x51c>)
 8002766:	f7fe f8fb 	bl	8000960 <assert_failed>

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	695b      	ldr	r3, [r3, #20]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d021      	beq.n	80027b6 <HAL_RCC_OscConfig+0x542>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002772:	4b06      	ldr	r3, [pc, #24]	@ (800278c <HAL_RCC_OscConfig+0x518>)
 8002774:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002778:	4a04      	ldr	r2, [pc, #16]	@ (800278c <HAL_RCC_OscConfig+0x518>)
 800277a:	f043 0301 	orr.w	r3, r3, #1
 800277e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002782:	f7fe fe87 	bl	8001494 <HAL_GetTick>
 8002786:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002788:	e00d      	b.n	80027a6 <HAL_RCC_OscConfig+0x532>
 800278a:	bf00      	nop
 800278c:	40021000 	.word	0x40021000
 8002790:	08007700 	.word	0x08007700
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002794:	f7fe fe7e 	bl	8001494 <HAL_GetTick>
 8002798:	4602      	mov	r2, r0
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	2b02      	cmp	r3, #2
 80027a0:	d901      	bls.n	80027a6 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 80027a2:	2303      	movs	r3, #3
 80027a4:	e25f      	b.n	8002c66 <HAL_RCC_OscConfig+0x9f2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80027a6:	4b66      	ldr	r3, [pc, #408]	@ (8002940 <HAL_RCC_OscConfig+0x6cc>)
 80027a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80027ac:	f003 0302 	and.w	r3, r3, #2
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d0ef      	beq.n	8002794 <HAL_RCC_OscConfig+0x520>
 80027b4:	e01b      	b.n	80027ee <HAL_RCC_OscConfig+0x57a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027b6:	4b62      	ldr	r3, [pc, #392]	@ (8002940 <HAL_RCC_OscConfig+0x6cc>)
 80027b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80027bc:	4a60      	ldr	r2, [pc, #384]	@ (8002940 <HAL_RCC_OscConfig+0x6cc>)
 80027be:	f023 0301 	bic.w	r3, r3, #1
 80027c2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027c6:	f7fe fe65 	bl	8001494 <HAL_GetTick>
 80027ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80027cc:	e008      	b.n	80027e0 <HAL_RCC_OscConfig+0x56c>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027ce:	f7fe fe61 	bl	8001494 <HAL_GetTick>
 80027d2:	4602      	mov	r2, r0
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d901      	bls.n	80027e0 <HAL_RCC_OscConfig+0x56c>
        {
          return HAL_TIMEOUT;
 80027dc:	2303      	movs	r3, #3
 80027de:	e242      	b.n	8002c66 <HAL_RCC_OscConfig+0x9f2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80027e0:	4b57      	ldr	r3, [pc, #348]	@ (8002940 <HAL_RCC_OscConfig+0x6cc>)
 80027e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80027e6:	f003 0302 	and.w	r3, r3, #2
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d1ef      	bne.n	80027ce <HAL_RCC_OscConfig+0x55a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 0304 	and.w	r3, r3, #4
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	f000 80b8 	beq.w	800296c <HAL_RCC_OscConfig+0x6f8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027fc:	2300      	movs	r3, #0
 80027fe:	77fb      	strb	r3, [r7, #31]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d00c      	beq.n	8002822 <HAL_RCC_OscConfig+0x5ae>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	2b01      	cmp	r3, #1
 800280e:	d008      	beq.n	8002822 <HAL_RCC_OscConfig+0x5ae>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	2b05      	cmp	r3, #5
 8002816:	d004      	beq.n	8002822 <HAL_RCC_OscConfig+0x5ae>
 8002818:	f44f 7138 	mov.w	r1, #736	@ 0x2e0
 800281c:	4849      	ldr	r0, [pc, #292]	@ (8002944 <HAL_RCC_OscConfig+0x6d0>)
 800281e:	f7fe f89f 	bl	8000960 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002822:	4b47      	ldr	r3, [pc, #284]	@ (8002940 <HAL_RCC_OscConfig+0x6cc>)
 8002824:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002826:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d10d      	bne.n	800284a <HAL_RCC_OscConfig+0x5d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800282e:	4b44      	ldr	r3, [pc, #272]	@ (8002940 <HAL_RCC_OscConfig+0x6cc>)
 8002830:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002832:	4a43      	ldr	r2, [pc, #268]	@ (8002940 <HAL_RCC_OscConfig+0x6cc>)
 8002834:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002838:	6593      	str	r3, [r2, #88]	@ 0x58
 800283a:	4b41      	ldr	r3, [pc, #260]	@ (8002940 <HAL_RCC_OscConfig+0x6cc>)
 800283c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800283e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002842:	60bb      	str	r3, [r7, #8]
 8002844:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002846:	2301      	movs	r3, #1
 8002848:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800284a:	4b3f      	ldr	r3, [pc, #252]	@ (8002948 <HAL_RCC_OscConfig+0x6d4>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002852:	2b00      	cmp	r3, #0
 8002854:	d118      	bne.n	8002888 <HAL_RCC_OscConfig+0x614>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002856:	4b3c      	ldr	r3, [pc, #240]	@ (8002948 <HAL_RCC_OscConfig+0x6d4>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a3b      	ldr	r2, [pc, #236]	@ (8002948 <HAL_RCC_OscConfig+0x6d4>)
 800285c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002860:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002862:	f7fe fe17 	bl	8001494 <HAL_GetTick>
 8002866:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002868:	e008      	b.n	800287c <HAL_RCC_OscConfig+0x608>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800286a:	f7fe fe13 	bl	8001494 <HAL_GetTick>
 800286e:	4602      	mov	r2, r0
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	2b02      	cmp	r3, #2
 8002876:	d901      	bls.n	800287c <HAL_RCC_OscConfig+0x608>
        {
          return HAL_TIMEOUT;
 8002878:	2303      	movs	r3, #3
 800287a:	e1f4      	b.n	8002c66 <HAL_RCC_OscConfig+0x9f2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800287c:	4b32      	ldr	r3, [pc, #200]	@ (8002948 <HAL_RCC_OscConfig+0x6d4>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002884:	2b00      	cmp	r3, #0
 8002886:	d0f0      	beq.n	800286a <HAL_RCC_OscConfig+0x5f6>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	2b01      	cmp	r3, #1
 800288e:	d108      	bne.n	80028a2 <HAL_RCC_OscConfig+0x62e>
 8002890:	4b2b      	ldr	r3, [pc, #172]	@ (8002940 <HAL_RCC_OscConfig+0x6cc>)
 8002892:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002896:	4a2a      	ldr	r2, [pc, #168]	@ (8002940 <HAL_RCC_OscConfig+0x6cc>)
 8002898:	f043 0301 	orr.w	r3, r3, #1
 800289c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80028a0:	e024      	b.n	80028ec <HAL_RCC_OscConfig+0x678>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	2b05      	cmp	r3, #5
 80028a8:	d110      	bne.n	80028cc <HAL_RCC_OscConfig+0x658>
 80028aa:	4b25      	ldr	r3, [pc, #148]	@ (8002940 <HAL_RCC_OscConfig+0x6cc>)
 80028ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028b0:	4a23      	ldr	r2, [pc, #140]	@ (8002940 <HAL_RCC_OscConfig+0x6cc>)
 80028b2:	f043 0304 	orr.w	r3, r3, #4
 80028b6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80028ba:	4b21      	ldr	r3, [pc, #132]	@ (8002940 <HAL_RCC_OscConfig+0x6cc>)
 80028bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028c0:	4a1f      	ldr	r2, [pc, #124]	@ (8002940 <HAL_RCC_OscConfig+0x6cc>)
 80028c2:	f043 0301 	orr.w	r3, r3, #1
 80028c6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80028ca:	e00f      	b.n	80028ec <HAL_RCC_OscConfig+0x678>
 80028cc:	4b1c      	ldr	r3, [pc, #112]	@ (8002940 <HAL_RCC_OscConfig+0x6cc>)
 80028ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028d2:	4a1b      	ldr	r2, [pc, #108]	@ (8002940 <HAL_RCC_OscConfig+0x6cc>)
 80028d4:	f023 0301 	bic.w	r3, r3, #1
 80028d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80028dc:	4b18      	ldr	r3, [pc, #96]	@ (8002940 <HAL_RCC_OscConfig+0x6cc>)
 80028de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028e2:	4a17      	ldr	r2, [pc, #92]	@ (8002940 <HAL_RCC_OscConfig+0x6cc>)
 80028e4:	f023 0304 	bic.w	r3, r3, #4
 80028e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d016      	beq.n	8002922 <HAL_RCC_OscConfig+0x6ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028f4:	f7fe fdce 	bl	8001494 <HAL_GetTick>
 80028f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028fa:	e00a      	b.n	8002912 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028fc:	f7fe fdca 	bl	8001494 <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	f241 3288 	movw	r2, #5000	@ 0x1388
 800290a:	4293      	cmp	r3, r2
 800290c:	d901      	bls.n	8002912 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e1a9      	b.n	8002c66 <HAL_RCC_OscConfig+0x9f2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002912:	4b0b      	ldr	r3, [pc, #44]	@ (8002940 <HAL_RCC_OscConfig+0x6cc>)
 8002914:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002918:	f003 0302 	and.w	r3, r3, #2
 800291c:	2b00      	cmp	r3, #0
 800291e:	d0ed      	beq.n	80028fc <HAL_RCC_OscConfig+0x688>
 8002920:	e01b      	b.n	800295a <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002922:	f7fe fdb7 	bl	8001494 <HAL_GetTick>
 8002926:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002928:	e010      	b.n	800294c <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800292a:	f7fe fdb3 	bl	8001494 <HAL_GetTick>
 800292e:	4602      	mov	r2, r0
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002938:	4293      	cmp	r3, r2
 800293a:	d907      	bls.n	800294c <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 800293c:	2303      	movs	r3, #3
 800293e:	e192      	b.n	8002c66 <HAL_RCC_OscConfig+0x9f2>
 8002940:	40021000 	.word	0x40021000
 8002944:	08007700 	.word	0x08007700
 8002948:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800294c:	4b98      	ldr	r3, [pc, #608]	@ (8002bb0 <HAL_RCC_OscConfig+0x93c>)
 800294e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002952:	f003 0302 	and.w	r3, r3, #2
 8002956:	2b00      	cmp	r3, #0
 8002958:	d1e7      	bne.n	800292a <HAL_RCC_OscConfig+0x6b6>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800295a:	7ffb      	ldrb	r3, [r7, #31]
 800295c:	2b01      	cmp	r3, #1
 800295e:	d105      	bne.n	800296c <HAL_RCC_OscConfig+0x6f8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002960:	4b93      	ldr	r3, [pc, #588]	@ (8002bb0 <HAL_RCC_OscConfig+0x93c>)
 8002962:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002964:	4a92      	ldr	r2, [pc, #584]	@ (8002bb0 <HAL_RCC_OscConfig+0x93c>)
 8002966:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800296a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002970:	2b00      	cmp	r3, #0
 8002972:	d00c      	beq.n	800298e <HAL_RCC_OscConfig+0x71a>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002978:	2b01      	cmp	r3, #1
 800297a:	d008      	beq.n	800298e <HAL_RCC_OscConfig+0x71a>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002980:	2b02      	cmp	r3, #2
 8002982:	d004      	beq.n	800298e <HAL_RCC_OscConfig+0x71a>
 8002984:	f240 316e 	movw	r1, #878	@ 0x36e
 8002988:	488a      	ldr	r0, [pc, #552]	@ (8002bb4 <HAL_RCC_OscConfig+0x940>)
 800298a:	f7fd ffe9 	bl	8000960 <assert_failed>

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002992:	2b00      	cmp	r3, #0
 8002994:	f000 8166 	beq.w	8002c64 <HAL_RCC_OscConfig+0x9f0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800299c:	2b02      	cmp	r3, #2
 800299e:	f040 813c 	bne.w	8002c1a <HAL_RCC_OscConfig+0x9a6>
    {
      /* Check the parameters */
      assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d010      	beq.n	80029cc <HAL_RCC_OscConfig+0x758>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d00c      	beq.n	80029cc <HAL_RCC_OscConfig+0x758>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029b6:	2b02      	cmp	r3, #2
 80029b8:	d008      	beq.n	80029cc <HAL_RCC_OscConfig+0x758>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029be:	2b03      	cmp	r3, #3
 80029c0:	d004      	beq.n	80029cc <HAL_RCC_OscConfig+0x758>
 80029c2:	f240 3176 	movw	r1, #886	@ 0x376
 80029c6:	487b      	ldr	r0, [pc, #492]	@ (8002bb4 <HAL_RCC_OscConfig+0x940>)
 80029c8:	f7fd ffca 	bl	8000960 <assert_failed>
      assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d003      	beq.n	80029dc <HAL_RCC_OscConfig+0x768>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029d8:	2b08      	cmp	r3, #8
 80029da:	d904      	bls.n	80029e6 <HAL_RCC_OscConfig+0x772>
 80029dc:	f240 3177 	movw	r1, #887	@ 0x377
 80029e0:	4874      	ldr	r0, [pc, #464]	@ (8002bb4 <HAL_RCC_OscConfig+0x940>)
 80029e2:	f7fd ffbd 	bl	8000960 <assert_failed>
      assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029ea:	2b07      	cmp	r3, #7
 80029ec:	d903      	bls.n	80029f6 <HAL_RCC_OscConfig+0x782>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029f2:	2b56      	cmp	r3, #86	@ 0x56
 80029f4:	d904      	bls.n	8002a00 <HAL_RCC_OscConfig+0x78c>
 80029f6:	f44f 715e 	mov.w	r1, #888	@ 0x378
 80029fa:	486e      	ldr	r0, [pc, #440]	@ (8002bb4 <HAL_RCC_OscConfig+0x940>)
 80029fc:	f7fd ffb0 	bl	8000960 <assert_failed>
#if defined(RCC_PLLP_SUPPORT)
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a04:	2b07      	cmp	r3, #7
 8002a06:	d008      	beq.n	8002a1a <HAL_RCC_OscConfig+0x7a6>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a0c:	2b11      	cmp	r3, #17
 8002a0e:	d004      	beq.n	8002a1a <HAL_RCC_OscConfig+0x7a6>
 8002a10:	f240 317a 	movw	r1, #890	@ 0x37a
 8002a14:	4867      	ldr	r0, [pc, #412]	@ (8002bb4 <HAL_RCC_OscConfig+0x940>)
 8002a16:	f7fd ffa3 	bl	8000960 <assert_failed>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a1e:	2b02      	cmp	r3, #2
 8002a20:	d010      	beq.n	8002a44 <HAL_RCC_OscConfig+0x7d0>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a26:	2b04      	cmp	r3, #4
 8002a28:	d00c      	beq.n	8002a44 <HAL_RCC_OscConfig+0x7d0>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a2e:	2b06      	cmp	r3, #6
 8002a30:	d008      	beq.n	8002a44 <HAL_RCC_OscConfig+0x7d0>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a36:	2b08      	cmp	r3, #8
 8002a38:	d004      	beq.n	8002a44 <HAL_RCC_OscConfig+0x7d0>
 8002a3a:	f44f 715f 	mov.w	r1, #892	@ 0x37c
 8002a3e:	485d      	ldr	r0, [pc, #372]	@ (8002bb4 <HAL_RCC_OscConfig+0x940>)
 8002a40:	f7fd ff8e 	bl	8000960 <assert_failed>
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a48:	2b02      	cmp	r3, #2
 8002a4a:	d010      	beq.n	8002a6e <HAL_RCC_OscConfig+0x7fa>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a50:	2b04      	cmp	r3, #4
 8002a52:	d00c      	beq.n	8002a6e <HAL_RCC_OscConfig+0x7fa>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a58:	2b06      	cmp	r3, #6
 8002a5a:	d008      	beq.n	8002a6e <HAL_RCC_OscConfig+0x7fa>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a60:	2b08      	cmp	r3, #8
 8002a62:	d004      	beq.n	8002a6e <HAL_RCC_OscConfig+0x7fa>
 8002a64:	f240 317d 	movw	r1, #893	@ 0x37d
 8002a68:	4852      	ldr	r0, [pc, #328]	@ (8002bb4 <HAL_RCC_OscConfig+0x940>)
 8002a6a:	f7fd ff79 	bl	8000960 <assert_failed>

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002a6e:	4b50      	ldr	r3, [pc, #320]	@ (8002bb0 <HAL_RCC_OscConfig+0x93c>)
 8002a70:	68db      	ldr	r3, [r3, #12]
 8002a72:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	f003 0203 	and.w	r2, r3, #3
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d130      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x870>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a8c:	3b01      	subs	r3, #1
 8002a8e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d127      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x870>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a9e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d11f      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x870>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002aae:	2a07      	cmp	r2, #7
 8002ab0:	bf14      	ite	ne
 8002ab2:	2201      	movne	r2, #1
 8002ab4:	2200      	moveq	r2, #0
 8002ab6:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d113      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x870>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ac6:	085b      	lsrs	r3, r3, #1
 8002ac8:	3b01      	subs	r3, #1
 8002aca:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d109      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x870>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ada:	085b      	lsrs	r3, r3, #1
 8002adc:	3b01      	subs	r3, #1
 8002ade:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d074      	beq.n	8002bce <HAL_RCC_OscConfig+0x95a>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ae4:	69bb      	ldr	r3, [r7, #24]
 8002ae6:	2b0c      	cmp	r3, #12
 8002ae8:	d06f      	beq.n	8002bca <HAL_RCC_OscConfig+0x956>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002aea:	4b31      	ldr	r3, [pc, #196]	@ (8002bb0 <HAL_RCC_OscConfig+0x93c>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d105      	bne.n	8002b02 <HAL_RCC_OscConfig+0x88e>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002af6:	4b2e      	ldr	r3, [pc, #184]	@ (8002bb0 <HAL_RCC_OscConfig+0x93c>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d001      	beq.n	8002b06 <HAL_RCC_OscConfig+0x892>
#endif
            )
          {
            return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e0af      	b.n	8002c66 <HAL_RCC_OscConfig+0x9f2>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002b06:	4b2a      	ldr	r3, [pc, #168]	@ (8002bb0 <HAL_RCC_OscConfig+0x93c>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a29      	ldr	r2, [pc, #164]	@ (8002bb0 <HAL_RCC_OscConfig+0x93c>)
 8002b0c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b10:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b12:	f7fe fcbf 	bl	8001494 <HAL_GetTick>
 8002b16:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b18:	e008      	b.n	8002b2c <HAL_RCC_OscConfig+0x8b8>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b1a:	f7fe fcbb 	bl	8001494 <HAL_GetTick>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	2b02      	cmp	r3, #2
 8002b26:	d901      	bls.n	8002b2c <HAL_RCC_OscConfig+0x8b8>
              {
                return HAL_TIMEOUT;
 8002b28:	2303      	movs	r3, #3
 8002b2a:	e09c      	b.n	8002c66 <HAL_RCC_OscConfig+0x9f2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b2c:	4b20      	ldr	r3, [pc, #128]	@ (8002bb0 <HAL_RCC_OscConfig+0x93c>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d1f0      	bne.n	8002b1a <HAL_RCC_OscConfig+0x8a6>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b38:	4b1d      	ldr	r3, [pc, #116]	@ (8002bb0 <HAL_RCC_OscConfig+0x93c>)
 8002b3a:	68da      	ldr	r2, [r3, #12]
 8002b3c:	4b1e      	ldr	r3, [pc, #120]	@ (8002bb8 <HAL_RCC_OscConfig+0x944>)
 8002b3e:	4013      	ands	r3, r2
 8002b40:	687a      	ldr	r2, [r7, #4]
 8002b42:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002b48:	3a01      	subs	r2, #1
 8002b4a:	0112      	lsls	r2, r2, #4
 8002b4c:	4311      	orrs	r1, r2
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002b52:	0212      	lsls	r2, r2, #8
 8002b54:	4311      	orrs	r1, r2
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002b5a:	0852      	lsrs	r2, r2, #1
 8002b5c:	3a01      	subs	r2, #1
 8002b5e:	0552      	lsls	r2, r2, #21
 8002b60:	4311      	orrs	r1, r2
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002b66:	0852      	lsrs	r2, r2, #1
 8002b68:	3a01      	subs	r2, #1
 8002b6a:	0652      	lsls	r2, r2, #25
 8002b6c:	4311      	orrs	r1, r2
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002b72:	0912      	lsrs	r2, r2, #4
 8002b74:	0452      	lsls	r2, r2, #17
 8002b76:	430a      	orrs	r2, r1
 8002b78:	490d      	ldr	r1, [pc, #52]	@ (8002bb0 <HAL_RCC_OscConfig+0x93c>)
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002b7e:	4b0c      	ldr	r3, [pc, #48]	@ (8002bb0 <HAL_RCC_OscConfig+0x93c>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a0b      	ldr	r2, [pc, #44]	@ (8002bb0 <HAL_RCC_OscConfig+0x93c>)
 8002b84:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b88:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b8a:	4b09      	ldr	r3, [pc, #36]	@ (8002bb0 <HAL_RCC_OscConfig+0x93c>)
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	4a08      	ldr	r2, [pc, #32]	@ (8002bb0 <HAL_RCC_OscConfig+0x93c>)
 8002b90:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b94:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b96:	f7fe fc7d 	bl	8001494 <HAL_GetTick>
 8002b9a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b9c:	e00e      	b.n	8002bbc <HAL_RCC_OscConfig+0x948>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b9e:	f7fe fc79 	bl	8001494 <HAL_GetTick>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	1ad3      	subs	r3, r2, r3
 8002ba8:	2b02      	cmp	r3, #2
 8002baa:	d907      	bls.n	8002bbc <HAL_RCC_OscConfig+0x948>
              {
                return HAL_TIMEOUT;
 8002bac:	2303      	movs	r3, #3
 8002bae:	e05a      	b.n	8002c66 <HAL_RCC_OscConfig+0x9f2>
 8002bb0:	40021000 	.word	0x40021000
 8002bb4:	08007700 	.word	0x08007700
 8002bb8:	f99d808c 	.word	0xf99d808c
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bbc:	4b2c      	ldr	r3, [pc, #176]	@ (8002c70 <HAL_RCC_OscConfig+0x9fc>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d0ea      	beq.n	8002b9e <HAL_RCC_OscConfig+0x92a>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002bc8:	e04c      	b.n	8002c64 <HAL_RCC_OscConfig+0x9f0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e04b      	b.n	8002c66 <HAL_RCC_OscConfig+0x9f2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bce:	4b28      	ldr	r3, [pc, #160]	@ (8002c70 <HAL_RCC_OscConfig+0x9fc>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d144      	bne.n	8002c64 <HAL_RCC_OscConfig+0x9f0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002bda:	4b25      	ldr	r3, [pc, #148]	@ (8002c70 <HAL_RCC_OscConfig+0x9fc>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a24      	ldr	r2, [pc, #144]	@ (8002c70 <HAL_RCC_OscConfig+0x9fc>)
 8002be0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002be4:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002be6:	4b22      	ldr	r3, [pc, #136]	@ (8002c70 <HAL_RCC_OscConfig+0x9fc>)
 8002be8:	68db      	ldr	r3, [r3, #12]
 8002bea:	4a21      	ldr	r2, [pc, #132]	@ (8002c70 <HAL_RCC_OscConfig+0x9fc>)
 8002bec:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002bf0:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002bf2:	f7fe fc4f 	bl	8001494 <HAL_GetTick>
 8002bf6:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bf8:	e008      	b.n	8002c0c <HAL_RCC_OscConfig+0x998>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bfa:	f7fe fc4b 	bl	8001494 <HAL_GetTick>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	1ad3      	subs	r3, r2, r3
 8002c04:	2b02      	cmp	r3, #2
 8002c06:	d901      	bls.n	8002c0c <HAL_RCC_OscConfig+0x998>
            {
              return HAL_TIMEOUT;
 8002c08:	2303      	movs	r3, #3
 8002c0a:	e02c      	b.n	8002c66 <HAL_RCC_OscConfig+0x9f2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c0c:	4b18      	ldr	r3, [pc, #96]	@ (8002c70 <HAL_RCC_OscConfig+0x9fc>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d0f0      	beq.n	8002bfa <HAL_RCC_OscConfig+0x986>
 8002c18:	e024      	b.n	8002c64 <HAL_RCC_OscConfig+0x9f0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c1a:	69bb      	ldr	r3, [r7, #24]
 8002c1c:	2b0c      	cmp	r3, #12
 8002c1e:	d01f      	beq.n	8002c60 <HAL_RCC_OscConfig+0x9ec>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c20:	4b13      	ldr	r3, [pc, #76]	@ (8002c70 <HAL_RCC_OscConfig+0x9fc>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a12      	ldr	r2, [pc, #72]	@ (8002c70 <HAL_RCC_OscConfig+0x9fc>)
 8002c26:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002c2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c2c:	f7fe fc32 	bl	8001494 <HAL_GetTick>
 8002c30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c32:	e008      	b.n	8002c46 <HAL_RCC_OscConfig+0x9d2>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c34:	f7fe fc2e 	bl	8001494 <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d901      	bls.n	8002c46 <HAL_RCC_OscConfig+0x9d2>
          {
            return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e00f      	b.n	8002c66 <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c46:	4b0a      	ldr	r3, [pc, #40]	@ (8002c70 <HAL_RCC_OscConfig+0x9fc>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d1f0      	bne.n	8002c34 <HAL_RCC_OscConfig+0x9c0>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002c52:	4b07      	ldr	r3, [pc, #28]	@ (8002c70 <HAL_RCC_OscConfig+0x9fc>)
 8002c54:	68da      	ldr	r2, [r3, #12]
 8002c56:	4906      	ldr	r1, [pc, #24]	@ (8002c70 <HAL_RCC_OscConfig+0x9fc>)
 8002c58:	4b06      	ldr	r3, [pc, #24]	@ (8002c74 <HAL_RCC_OscConfig+0xa00>)
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	60cb      	str	r3, [r1, #12]
 8002c5e:	e001      	b.n	8002c64 <HAL_RCC_OscConfig+0x9f0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e000      	b.n	8002c66 <HAL_RCC_OscConfig+0x9f2>
      }
    }
  }
  return HAL_OK;
 8002c64:	2300      	movs	r3, #0
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3720      	adds	r7, #32
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	40021000 	.word	0x40021000
 8002c74:	feeefffc 	.word	0xfeeefffc

08002c78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b084      	sub	sp, #16
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d101      	bne.n	8002c8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e186      	b.n	8002f9a <HAL_RCC_ClockConfig+0x322>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d003      	beq.n	8002c9c <HAL_RCC_ClockConfig+0x24>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	2b0f      	cmp	r3, #15
 8002c9a:	d904      	bls.n	8002ca6 <HAL_RCC_ClockConfig+0x2e>
 8002c9c:	f240 4159 	movw	r1, #1113	@ 0x459
 8002ca0:	4882      	ldr	r0, [pc, #520]	@ (8002eac <HAL_RCC_ClockConfig+0x234>)
 8002ca2:	f7fd fe5d 	bl	8000960 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d010      	beq.n	8002cce <HAL_RCC_ClockConfig+0x56>
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d00d      	beq.n	8002cce <HAL_RCC_ClockConfig+0x56>
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	2b02      	cmp	r3, #2
 8002cb6:	d00a      	beq.n	8002cce <HAL_RCC_ClockConfig+0x56>
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	2b03      	cmp	r3, #3
 8002cbc:	d007      	beq.n	8002cce <HAL_RCC_ClockConfig+0x56>
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	2b04      	cmp	r3, #4
 8002cc2:	d004      	beq.n	8002cce <HAL_RCC_ClockConfig+0x56>
 8002cc4:	f240 415a 	movw	r1, #1114	@ 0x45a
 8002cc8:	4878      	ldr	r0, [pc, #480]	@ (8002eac <HAL_RCC_ClockConfig+0x234>)
 8002cca:	f7fd fe49 	bl	8000960 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002cce:	4b78      	ldr	r3, [pc, #480]	@ (8002eb0 <HAL_RCC_ClockConfig+0x238>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0307 	and.w	r3, r3, #7
 8002cd6:	683a      	ldr	r2, [r7, #0]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d910      	bls.n	8002cfe <HAL_RCC_ClockConfig+0x86>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cdc:	4b74      	ldr	r3, [pc, #464]	@ (8002eb0 <HAL_RCC_ClockConfig+0x238>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f023 0207 	bic.w	r2, r3, #7
 8002ce4:	4972      	ldr	r1, [pc, #456]	@ (8002eb0 <HAL_RCC_ClockConfig+0x238>)
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cec:	4b70      	ldr	r3, [pc, #448]	@ (8002eb0 <HAL_RCC_ClockConfig+0x238>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0307 	and.w	r3, r3, #7
 8002cf4:	683a      	ldr	r2, [r7, #0]
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d001      	beq.n	8002cfe <HAL_RCC_ClockConfig+0x86>
    {
      return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e14d      	b.n	8002f9a <HAL_RCC_ClockConfig+0x322>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0302 	and.w	r3, r3, #2
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d039      	beq.n	8002d7e <HAL_RCC_ClockConfig+0x106>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d024      	beq.n	8002d5c <HAL_RCC_ClockConfig+0xe4>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	2b80      	cmp	r3, #128	@ 0x80
 8002d18:	d020      	beq.n	8002d5c <HAL_RCC_ClockConfig+0xe4>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	2b90      	cmp	r3, #144	@ 0x90
 8002d20:	d01c      	beq.n	8002d5c <HAL_RCC_ClockConfig+0xe4>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	2ba0      	cmp	r3, #160	@ 0xa0
 8002d28:	d018      	beq.n	8002d5c <HAL_RCC_ClockConfig+0xe4>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	2bb0      	cmp	r3, #176	@ 0xb0
 8002d30:	d014      	beq.n	8002d5c <HAL_RCC_ClockConfig+0xe4>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	2bc0      	cmp	r3, #192	@ 0xc0
 8002d38:	d010      	beq.n	8002d5c <HAL_RCC_ClockConfig+0xe4>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	2bd0      	cmp	r3, #208	@ 0xd0
 8002d40:	d00c      	beq.n	8002d5c <HAL_RCC_ClockConfig+0xe4>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	2be0      	cmp	r3, #224	@ 0xe0
 8002d48:	d008      	beq.n	8002d5c <HAL_RCC_ClockConfig+0xe4>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	2bf0      	cmp	r3, #240	@ 0xf0
 8002d50:	d004      	beq.n	8002d5c <HAL_RCC_ClockConfig+0xe4>
 8002d52:	f240 4172 	movw	r1, #1138	@ 0x472
 8002d56:	4855      	ldr	r0, [pc, #340]	@ (8002eac <HAL_RCC_ClockConfig+0x234>)
 8002d58:	f7fd fe02 	bl	8000960 <assert_failed>

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	689a      	ldr	r2, [r3, #8]
 8002d60:	4b54      	ldr	r3, [pc, #336]	@ (8002eb4 <HAL_RCC_ClockConfig+0x23c>)
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d908      	bls.n	8002d7e <HAL_RCC_ClockConfig+0x106>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d6c:	4b51      	ldr	r3, [pc, #324]	@ (8002eb4 <HAL_RCC_ClockConfig+0x23c>)
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	494e      	ldr	r1, [pc, #312]	@ (8002eb4 <HAL_RCC_ClockConfig+0x23c>)
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0301 	and.w	r3, r3, #1
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d061      	beq.n	8002e4e <HAL_RCC_ClockConfig+0x1d6>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d010      	beq.n	8002db4 <HAL_RCC_ClockConfig+0x13c>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d00c      	beq.n	8002db4 <HAL_RCC_ClockConfig+0x13c>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d008      	beq.n	8002db4 <HAL_RCC_ClockConfig+0x13c>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	2b03      	cmp	r3, #3
 8002da8:	d004      	beq.n	8002db4 <HAL_RCC_ClockConfig+0x13c>
 8002daa:	f240 417d 	movw	r1, #1149	@ 0x47d
 8002dae:	483f      	ldr	r0, [pc, #252]	@ (8002eac <HAL_RCC_ClockConfig+0x234>)
 8002db0:	f7fd fdd6 	bl	8000960 <assert_failed>

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	2b03      	cmp	r3, #3
 8002dba:	d107      	bne.n	8002dcc <HAL_RCC_ClockConfig+0x154>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dbc:	4b3d      	ldr	r3, [pc, #244]	@ (8002eb4 <HAL_RCC_ClockConfig+0x23c>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d121      	bne.n	8002e0c <HAL_RCC_ClockConfig+0x194>
      {
        return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e0e6      	b.n	8002f9a <HAL_RCC_ClockConfig+0x322>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	2b02      	cmp	r3, #2
 8002dd2:	d107      	bne.n	8002de4 <HAL_RCC_ClockConfig+0x16c>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002dd4:	4b37      	ldr	r3, [pc, #220]	@ (8002eb4 <HAL_RCC_ClockConfig+0x23c>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d115      	bne.n	8002e0c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e0da      	b.n	8002f9a <HAL_RCC_ClockConfig+0x322>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d107      	bne.n	8002dfc <HAL_RCC_ClockConfig+0x184>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002dec:	4b31      	ldr	r3, [pc, #196]	@ (8002eb4 <HAL_RCC_ClockConfig+0x23c>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 0302 	and.w	r3, r3, #2
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d109      	bne.n	8002e0c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e0ce      	b.n	8002f9a <HAL_RCC_ClockConfig+0x322>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002dfc:	4b2d      	ldr	r3, [pc, #180]	@ (8002eb4 <HAL_RCC_ClockConfig+0x23c>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d101      	bne.n	8002e0c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e0c6      	b.n	8002f9a <HAL_RCC_ClockConfig+0x322>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e0c:	4b29      	ldr	r3, [pc, #164]	@ (8002eb4 <HAL_RCC_ClockConfig+0x23c>)
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	f023 0203 	bic.w	r2, r3, #3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	4926      	ldr	r1, [pc, #152]	@ (8002eb4 <HAL_RCC_ClockConfig+0x23c>)
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e1e:	f7fe fb39 	bl	8001494 <HAL_GetTick>
 8002e22:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e24:	e00a      	b.n	8002e3c <HAL_RCC_ClockConfig+0x1c4>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e26:	f7fe fb35 	bl	8001494 <HAL_GetTick>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d901      	bls.n	8002e3c <HAL_RCC_ClockConfig+0x1c4>
      {
        return HAL_TIMEOUT;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	e0ae      	b.n	8002f9a <HAL_RCC_ClockConfig+0x322>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e3c:	4b1d      	ldr	r3, [pc, #116]	@ (8002eb4 <HAL_RCC_ClockConfig+0x23c>)
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	f003 020c 	and.w	r2, r3, #12
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d1eb      	bne.n	8002e26 <HAL_RCC_ClockConfig+0x1ae>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0302 	and.w	r3, r3, #2
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d010      	beq.n	8002e7c <HAL_RCC_ClockConfig+0x204>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	689a      	ldr	r2, [r3, #8]
 8002e5e:	4b15      	ldr	r3, [pc, #84]	@ (8002eb4 <HAL_RCC_ClockConfig+0x23c>)
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d208      	bcs.n	8002e7c <HAL_RCC_ClockConfig+0x204>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e6a:	4b12      	ldr	r3, [pc, #72]	@ (8002eb4 <HAL_RCC_ClockConfig+0x23c>)
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	490f      	ldr	r1, [pc, #60]	@ (8002eb4 <HAL_RCC_ClockConfig+0x23c>)
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e7c:	4b0c      	ldr	r3, [pc, #48]	@ (8002eb0 <HAL_RCC_ClockConfig+0x238>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 0307 	and.w	r3, r3, #7
 8002e84:	683a      	ldr	r2, [r7, #0]
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d216      	bcs.n	8002eb8 <HAL_RCC_ClockConfig+0x240>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e8a:	4b09      	ldr	r3, [pc, #36]	@ (8002eb0 <HAL_RCC_ClockConfig+0x238>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f023 0207 	bic.w	r2, r3, #7
 8002e92:	4907      	ldr	r1, [pc, #28]	@ (8002eb0 <HAL_RCC_ClockConfig+0x238>)
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	4313      	orrs	r3, r2
 8002e98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e9a:	4b05      	ldr	r3, [pc, #20]	@ (8002eb0 <HAL_RCC_ClockConfig+0x238>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0307 	and.w	r3, r3, #7
 8002ea2:	683a      	ldr	r2, [r7, #0]
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d007      	beq.n	8002eb8 <HAL_RCC_ClockConfig+0x240>
    {
      return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e076      	b.n	8002f9a <HAL_RCC_ClockConfig+0x322>
 8002eac:	08007700 	.word	0x08007700
 8002eb0:	40022000 	.word	0x40022000
 8002eb4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0304 	and.w	r3, r3, #4
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d025      	beq.n	8002f10 <HAL_RCC_ClockConfig+0x298>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d018      	beq.n	8002efe <HAL_RCC_ClockConfig+0x286>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ed4:	d013      	beq.n	8002efe <HAL_RCC_ClockConfig+0x286>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	68db      	ldr	r3, [r3, #12]
 8002eda:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8002ede:	d00e      	beq.n	8002efe <HAL_RCC_ClockConfig+0x286>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8002ee8:	d009      	beq.n	8002efe <HAL_RCC_ClockConfig+0x286>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	68db      	ldr	r3, [r3, #12]
 8002eee:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002ef2:	d004      	beq.n	8002efe <HAL_RCC_ClockConfig+0x286>
 8002ef4:	f240 41f5 	movw	r1, #1269	@ 0x4f5
 8002ef8:	482a      	ldr	r0, [pc, #168]	@ (8002fa4 <HAL_RCC_ClockConfig+0x32c>)
 8002efa:	f7fd fd31 	bl	8000960 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002efe:	4b2a      	ldr	r3, [pc, #168]	@ (8002fa8 <HAL_RCC_ClockConfig+0x330>)
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	68db      	ldr	r3, [r3, #12]
 8002f0a:	4927      	ldr	r1, [pc, #156]	@ (8002fa8 <HAL_RCC_ClockConfig+0x330>)
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 0308 	and.w	r3, r3, #8
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d026      	beq.n	8002f6a <HAL_RCC_ClockConfig+0x2f2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	691b      	ldr	r3, [r3, #16]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d018      	beq.n	8002f56 <HAL_RCC_ClockConfig+0x2de>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	691b      	ldr	r3, [r3, #16]
 8002f28:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f2c:	d013      	beq.n	8002f56 <HAL_RCC_ClockConfig+0x2de>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	691b      	ldr	r3, [r3, #16]
 8002f32:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8002f36:	d00e      	beq.n	8002f56 <HAL_RCC_ClockConfig+0x2de>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	691b      	ldr	r3, [r3, #16]
 8002f3c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8002f40:	d009      	beq.n	8002f56 <HAL_RCC_ClockConfig+0x2de>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	691b      	ldr	r3, [r3, #16]
 8002f46:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002f4a:	d004      	beq.n	8002f56 <HAL_RCC_ClockConfig+0x2de>
 8002f4c:	f240 41fc 	movw	r1, #1276	@ 0x4fc
 8002f50:	4814      	ldr	r0, [pc, #80]	@ (8002fa4 <HAL_RCC_ClockConfig+0x32c>)
 8002f52:	f7fd fd05 	bl	8000960 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f56:	4b14      	ldr	r3, [pc, #80]	@ (8002fa8 <HAL_RCC_ClockConfig+0x330>)
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	691b      	ldr	r3, [r3, #16]
 8002f62:	00db      	lsls	r3, r3, #3
 8002f64:	4910      	ldr	r1, [pc, #64]	@ (8002fa8 <HAL_RCC_ClockConfig+0x330>)
 8002f66:	4313      	orrs	r3, r2
 8002f68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002f6a:	f000 f825 	bl	8002fb8 <HAL_RCC_GetSysClockFreq>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	4b0d      	ldr	r3, [pc, #52]	@ (8002fa8 <HAL_RCC_ClockConfig+0x330>)
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	091b      	lsrs	r3, r3, #4
 8002f76:	f003 030f 	and.w	r3, r3, #15
 8002f7a:	490c      	ldr	r1, [pc, #48]	@ (8002fac <HAL_RCC_ClockConfig+0x334>)
 8002f7c:	5ccb      	ldrb	r3, [r1, r3]
 8002f7e:	f003 031f 	and.w	r3, r3, #31
 8002f82:	fa22 f303 	lsr.w	r3, r2, r3
 8002f86:	4a0a      	ldr	r2, [pc, #40]	@ (8002fb0 <HAL_RCC_ClockConfig+0x338>)
 8002f88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002f8a:	4b0a      	ldr	r3, [pc, #40]	@ (8002fb4 <HAL_RCC_ClockConfig+0x33c>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f7fe fa30 	bl	80013f4 <HAL_InitTick>
 8002f94:	4603      	mov	r3, r0
 8002f96:	72fb      	strb	r3, [r7, #11]

  return status;
 8002f98:	7afb      	ldrb	r3, [r7, #11]
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3710      	adds	r7, #16
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	08007700 	.word	0x08007700
 8002fa8:	40021000 	.word	0x40021000
 8002fac:	0800785c 	.word	0x0800785c
 8002fb0:	20000008 	.word	0x20000008
 8002fb4:	2000000c 	.word	0x2000000c

08002fb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b089      	sub	sp, #36	@ 0x24
 8002fbc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	61fb      	str	r3, [r7, #28]
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fc6:	4b3e      	ldr	r3, [pc, #248]	@ (80030c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	f003 030c 	and.w	r3, r3, #12
 8002fce:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002fd0:	4b3b      	ldr	r3, [pc, #236]	@ (80030c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	f003 0303 	and.w	r3, r3, #3
 8002fd8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d005      	beq.n	8002fec <HAL_RCC_GetSysClockFreq+0x34>
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	2b0c      	cmp	r3, #12
 8002fe4:	d121      	bne.n	800302a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d11e      	bne.n	800302a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002fec:	4b34      	ldr	r3, [pc, #208]	@ (80030c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 0308 	and.w	r3, r3, #8
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d107      	bne.n	8003008 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002ff8:	4b31      	ldr	r3, [pc, #196]	@ (80030c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ffa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ffe:	0a1b      	lsrs	r3, r3, #8
 8003000:	f003 030f 	and.w	r3, r3, #15
 8003004:	61fb      	str	r3, [r7, #28]
 8003006:	e005      	b.n	8003014 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003008:	4b2d      	ldr	r3, [pc, #180]	@ (80030c0 <HAL_RCC_GetSysClockFreq+0x108>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	091b      	lsrs	r3, r3, #4
 800300e:	f003 030f 	and.w	r3, r3, #15
 8003012:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003014:	4a2b      	ldr	r2, [pc, #172]	@ (80030c4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800301c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d10d      	bne.n	8003040 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003024:	69fb      	ldr	r3, [r7, #28]
 8003026:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003028:	e00a      	b.n	8003040 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	2b04      	cmp	r3, #4
 800302e:	d102      	bne.n	8003036 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003030:	4b25      	ldr	r3, [pc, #148]	@ (80030c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003032:	61bb      	str	r3, [r7, #24]
 8003034:	e004      	b.n	8003040 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	2b08      	cmp	r3, #8
 800303a:	d101      	bne.n	8003040 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800303c:	4b23      	ldr	r3, [pc, #140]	@ (80030cc <HAL_RCC_GetSysClockFreq+0x114>)
 800303e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	2b0c      	cmp	r3, #12
 8003044:	d134      	bne.n	80030b0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003046:	4b1e      	ldr	r3, [pc, #120]	@ (80030c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003048:	68db      	ldr	r3, [r3, #12]
 800304a:	f003 0303 	and.w	r3, r3, #3
 800304e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	2b02      	cmp	r3, #2
 8003054:	d003      	beq.n	800305e <HAL_RCC_GetSysClockFreq+0xa6>
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	2b03      	cmp	r3, #3
 800305a:	d003      	beq.n	8003064 <HAL_RCC_GetSysClockFreq+0xac>
 800305c:	e005      	b.n	800306a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800305e:	4b1a      	ldr	r3, [pc, #104]	@ (80030c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003060:	617b      	str	r3, [r7, #20]
      break;
 8003062:	e005      	b.n	8003070 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003064:	4b19      	ldr	r3, [pc, #100]	@ (80030cc <HAL_RCC_GetSysClockFreq+0x114>)
 8003066:	617b      	str	r3, [r7, #20]
      break;
 8003068:	e002      	b.n	8003070 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	617b      	str	r3, [r7, #20]
      break;
 800306e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003070:	4b13      	ldr	r3, [pc, #76]	@ (80030c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	091b      	lsrs	r3, r3, #4
 8003076:	f003 0307 	and.w	r3, r3, #7
 800307a:	3301      	adds	r3, #1
 800307c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800307e:	4b10      	ldr	r3, [pc, #64]	@ (80030c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003080:	68db      	ldr	r3, [r3, #12]
 8003082:	0a1b      	lsrs	r3, r3, #8
 8003084:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003088:	697a      	ldr	r2, [r7, #20]
 800308a:	fb03 f202 	mul.w	r2, r3, r2
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	fbb2 f3f3 	udiv	r3, r2, r3
 8003094:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003096:	4b0a      	ldr	r3, [pc, #40]	@ (80030c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003098:	68db      	ldr	r3, [r3, #12]
 800309a:	0e5b      	lsrs	r3, r3, #25
 800309c:	f003 0303 	and.w	r3, r3, #3
 80030a0:	3301      	adds	r3, #1
 80030a2:	005b      	lsls	r3, r3, #1
 80030a4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80030a6:	697a      	ldr	r2, [r7, #20]
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ae:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80030b0:	69bb      	ldr	r3, [r7, #24]
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3724      	adds	r7, #36	@ 0x24
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr
 80030be:	bf00      	nop
 80030c0:	40021000 	.word	0x40021000
 80030c4:	08007874 	.word	0x08007874
 80030c8:	00f42400 	.word	0x00f42400
 80030cc:	007a1200 	.word	0x007a1200

080030d0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030d0:	b480      	push	{r7}
 80030d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030d4:	4b03      	ldr	r3, [pc, #12]	@ (80030e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80030d6:	681b      	ldr	r3, [r3, #0]
}
 80030d8:	4618      	mov	r0, r3
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr
 80030e2:	bf00      	nop
 80030e4:	20000008 	.word	0x20000008

080030e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80030ec:	f7ff fff0 	bl	80030d0 <HAL_RCC_GetHCLKFreq>
 80030f0:	4602      	mov	r2, r0
 80030f2:	4b06      	ldr	r3, [pc, #24]	@ (800310c <HAL_RCC_GetPCLK1Freq+0x24>)
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	0a1b      	lsrs	r3, r3, #8
 80030f8:	f003 0307 	and.w	r3, r3, #7
 80030fc:	4904      	ldr	r1, [pc, #16]	@ (8003110 <HAL_RCC_GetPCLK1Freq+0x28>)
 80030fe:	5ccb      	ldrb	r3, [r1, r3]
 8003100:	f003 031f 	and.w	r3, r3, #31
 8003104:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003108:	4618      	mov	r0, r3
 800310a:	bd80      	pop	{r7, pc}
 800310c:	40021000 	.word	0x40021000
 8003110:	0800786c 	.word	0x0800786c

08003114 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003118:	f7ff ffda 	bl	80030d0 <HAL_RCC_GetHCLKFreq>
 800311c:	4602      	mov	r2, r0
 800311e:	4b06      	ldr	r3, [pc, #24]	@ (8003138 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	0adb      	lsrs	r3, r3, #11
 8003124:	f003 0307 	and.w	r3, r3, #7
 8003128:	4904      	ldr	r1, [pc, #16]	@ (800313c <HAL_RCC_GetPCLK2Freq+0x28>)
 800312a:	5ccb      	ldrb	r3, [r1, r3]
 800312c:	f003 031f 	and.w	r3, r3, #31
 8003130:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003134:	4618      	mov	r0, r3
 8003136:	bd80      	pop	{r7, pc}
 8003138:	40021000 	.word	0x40021000
 800313c:	0800786c 	.word	0x0800786c

08003140 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b086      	sub	sp, #24
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003148:	2300      	movs	r3, #0
 800314a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800314c:	4b2a      	ldr	r3, [pc, #168]	@ (80031f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800314e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003150:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003154:	2b00      	cmp	r3, #0
 8003156:	d003      	beq.n	8003160 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003158:	f7ff f81c 	bl	8002194 <HAL_PWREx_GetVoltageRange>
 800315c:	6178      	str	r0, [r7, #20]
 800315e:	e014      	b.n	800318a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003160:	4b25      	ldr	r3, [pc, #148]	@ (80031f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003162:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003164:	4a24      	ldr	r2, [pc, #144]	@ (80031f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003166:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800316a:	6593      	str	r3, [r2, #88]	@ 0x58
 800316c:	4b22      	ldr	r3, [pc, #136]	@ (80031f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800316e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003170:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003174:	60fb      	str	r3, [r7, #12]
 8003176:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003178:	f7ff f80c 	bl	8002194 <HAL_PWREx_GetVoltageRange>
 800317c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800317e:	4b1e      	ldr	r3, [pc, #120]	@ (80031f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003180:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003182:	4a1d      	ldr	r2, [pc, #116]	@ (80031f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003184:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003188:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003190:	d10b      	bne.n	80031aa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2b80      	cmp	r3, #128	@ 0x80
 8003196:	d919      	bls.n	80031cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2ba0      	cmp	r3, #160	@ 0xa0
 800319c:	d902      	bls.n	80031a4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800319e:	2302      	movs	r3, #2
 80031a0:	613b      	str	r3, [r7, #16]
 80031a2:	e013      	b.n	80031cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80031a4:	2301      	movs	r3, #1
 80031a6:	613b      	str	r3, [r7, #16]
 80031a8:	e010      	b.n	80031cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2b80      	cmp	r3, #128	@ 0x80
 80031ae:	d902      	bls.n	80031b6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80031b0:	2303      	movs	r3, #3
 80031b2:	613b      	str	r3, [r7, #16]
 80031b4:	e00a      	b.n	80031cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2b80      	cmp	r3, #128	@ 0x80
 80031ba:	d102      	bne.n	80031c2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80031bc:	2302      	movs	r3, #2
 80031be:	613b      	str	r3, [r7, #16]
 80031c0:	e004      	b.n	80031cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2b70      	cmp	r3, #112	@ 0x70
 80031c6:	d101      	bne.n	80031cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80031c8:	2301      	movs	r3, #1
 80031ca:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80031cc:	4b0b      	ldr	r3, [pc, #44]	@ (80031fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f023 0207 	bic.w	r2, r3, #7
 80031d4:	4909      	ldr	r1, [pc, #36]	@ (80031fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	4313      	orrs	r3, r2
 80031da:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80031dc:	4b07      	ldr	r3, [pc, #28]	@ (80031fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0307 	and.w	r3, r3, #7
 80031e4:	693a      	ldr	r2, [r7, #16]
 80031e6:	429a      	cmp	r2, r3
 80031e8:	d001      	beq.n	80031ee <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e000      	b.n	80031f0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80031ee:	2300      	movs	r3, #0
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	3718      	adds	r7, #24
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	40021000 	.word	0x40021000
 80031fc:	40022000 	.word	0x40022000

08003200 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b086      	sub	sp, #24
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003208:	2300      	movs	r3, #0
 800320a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800320c:	2300      	movs	r3, #0
 800320e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003218:	2b00      	cmp	r3, #0
 800321a:	d004      	beq.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x26>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003224:	d303      	bcc.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x2e>
 8003226:	21c9      	movs	r1, #201	@ 0xc9
 8003228:	4889      	ldr	r0, [pc, #548]	@ (8003450 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800322a:	f7fd fb99 	bl	8000960 <assert_failed>

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003236:	2b00      	cmp	r3, #0
 8003238:	d058      	beq.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800323e:	2b00      	cmp	r3, #0
 8003240:	d012      	beq.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003246:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800324a:	d00d      	beq.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x68>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003250:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003254:	d008      	beq.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800325a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800325e:	d003      	beq.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8003260:	21d1      	movs	r1, #209	@ 0xd1
 8003262:	487b      	ldr	r0, [pc, #492]	@ (8003450 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003264:	f7fd fb7c 	bl	8000960 <assert_failed>

    switch(PeriphClkInit->Sai1ClockSelection)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800326c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003270:	d02a      	beq.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0xc8>
 8003272:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003276:	d824      	bhi.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
 8003278:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800327c:	d008      	beq.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800327e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003282:	d81e      	bhi.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
 8003284:	2b00      	cmp	r3, #0
 8003286:	d00a      	beq.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8003288:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800328c:	d010      	beq.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0xb0>
 800328e:	e018      	b.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003290:	4b70      	ldr	r3, [pc, #448]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	4a6f      	ldr	r2, [pc, #444]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003296:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800329a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800329c:	e015      	b.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0xca>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	3304      	adds	r3, #4
 80032a2:	2100      	movs	r1, #0
 80032a4:	4618      	mov	r0, r3
 80032a6:	f000 fc69 	bl	8003b7c <RCCEx_PLLSAI1_Config>
 80032aa:	4603      	mov	r3, r0
 80032ac:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80032ae:	e00c      	b.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0xca>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	3320      	adds	r3, #32
 80032b4:	2100      	movs	r1, #0
 80032b6:	4618      	mov	r0, r3
 80032b8:	f000 fde0 	bl	8003e7c <RCCEx_PLLSAI2_Config>
 80032bc:	4603      	mov	r3, r0
 80032be:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80032c0:	e003      	b.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0xca>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	74fb      	strb	r3, [r7, #19]
      break;
 80032c6:	e000      	b.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0xca>
      break;
 80032c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032ca:	7cfb      	ldrb	r3, [r7, #19]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d10b      	bne.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80032d0:	4b60      	ldr	r3, [pc, #384]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80032d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032d6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80032de:	495d      	ldr	r1, [pc, #372]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80032e0:	4313      	orrs	r3, r2
 80032e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80032e6:	e001      	b.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0xec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032e8:	7cfb      	ldrb	r3, [r7, #19]
 80032ea:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d059      	beq.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d013      	beq.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x128>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003304:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003308:	d00e      	beq.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x128>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800330e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003312:	d009      	beq.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x128>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003318:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800331c:	d004      	beq.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x128>
 800331e:	f240 110f 	movw	r1, #271	@ 0x10f
 8003322:	484b      	ldr	r0, [pc, #300]	@ (8003450 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003324:	f7fd fb1c 	bl	8000960 <assert_failed>

    switch(PeriphClkInit->Sai2ClockSelection)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800332c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003330:	d02a      	beq.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x188>
 8003332:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003336:	d824      	bhi.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x182>
 8003338:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800333c:	d008      	beq.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x150>
 800333e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003342:	d81e      	bhi.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x182>
 8003344:	2b00      	cmp	r3, #0
 8003346:	d00a      	beq.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003348:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800334c:	d010      	beq.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x170>
 800334e:	e018      	b.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003350:	4b40      	ldr	r3, [pc, #256]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	4a3f      	ldr	r2, [pc, #252]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003356:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800335a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800335c:	e015      	b.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x18a>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	3304      	adds	r3, #4
 8003362:	2100      	movs	r1, #0
 8003364:	4618      	mov	r0, r3
 8003366:	f000 fc09 	bl	8003b7c <RCCEx_PLLSAI1_Config>
 800336a:	4603      	mov	r3, r0
 800336c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800336e:	e00c      	b.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x18a>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	3320      	adds	r3, #32
 8003374:	2100      	movs	r1, #0
 8003376:	4618      	mov	r0, r3
 8003378:	f000 fd80 	bl	8003e7c <RCCEx_PLLSAI2_Config>
 800337c:	4603      	mov	r3, r0
 800337e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003380:	e003      	b.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x18a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	74fb      	strb	r3, [r7, #19]
      break;
 8003386:	e000      	b.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x18a>
      break;
 8003388:	bf00      	nop
    }

    if(ret == HAL_OK)
 800338a:	7cfb      	ldrb	r3, [r7, #19]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d10b      	bne.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003390:	4b30      	ldr	r3, [pc, #192]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003392:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003396:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800339e:	492d      	ldr	r1, [pc, #180]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80033a0:	4313      	orrs	r3, r2
 80033a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80033a6:	e001      	b.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033a8:	7cfb      	ldrb	r3, [r7, #19]
 80033aa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	f000 80c2 	beq.w	800353e <HAL_RCCEx_PeriphCLKConfig+0x33e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033ba:	2300      	movs	r3, #0
 80033bc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d016      	beq.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80033ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80033d2:	d010      	beq.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80033da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80033de:	d00a      	beq.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80033e6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80033ea:	d004      	beq.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 80033ec:	f44f 71a2 	mov.w	r1, #324	@ 0x144
 80033f0:	4817      	ldr	r0, [pc, #92]	@ (8003450 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80033f2:	f7fd fab5 	bl	8000960 <assert_failed>

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80033f6:	4b17      	ldr	r3, [pc, #92]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80033f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d101      	bne.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8003402:	2301      	movs	r3, #1
 8003404:	e000      	b.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8003406:	2300      	movs	r3, #0
 8003408:	2b00      	cmp	r3, #0
 800340a:	d00d      	beq.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x228>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800340c:	4b11      	ldr	r3, [pc, #68]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800340e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003410:	4a10      	ldr	r2, [pc, #64]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003412:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003416:	6593      	str	r3, [r2, #88]	@ 0x58
 8003418:	4b0e      	ldr	r3, [pc, #56]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800341a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800341c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003420:	60bb      	str	r3, [r7, #8]
 8003422:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003424:	2301      	movs	r3, #1
 8003426:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003428:	4b0b      	ldr	r3, [pc, #44]	@ (8003458 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a0a      	ldr	r2, [pc, #40]	@ (8003458 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800342e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003432:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003434:	f7fe f82e 	bl	8001494 <HAL_GetTick>
 8003438:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800343a:	e00f      	b.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x25c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800343c:	f7fe f82a 	bl	8001494 <HAL_GetTick>
 8003440:	4602      	mov	r2, r0
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	2b02      	cmp	r3, #2
 8003448:	d908      	bls.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x25c>
      {
        ret = HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	74fb      	strb	r3, [r7, #19]
        break;
 800344e:	e00b      	b.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x268>
 8003450:	08007738 	.word	0x08007738
 8003454:	40021000 	.word	0x40021000
 8003458:	40007000 	.word	0x40007000
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800345c:	4b30      	ldr	r3, [pc, #192]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003464:	2b00      	cmp	r3, #0
 8003466:	d0e9      	beq.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x23c>
      }
    }

    if(ret == HAL_OK)
 8003468:	7cfb      	ldrb	r3, [r7, #19]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d15c      	bne.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800346e:	4b2d      	ldr	r3, [pc, #180]	@ (8003524 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8003470:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003474:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003478:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d01f      	beq.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003486:	697a      	ldr	r2, [r7, #20]
 8003488:	429a      	cmp	r2, r3
 800348a:	d019      	beq.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800348c:	4b25      	ldr	r3, [pc, #148]	@ (8003524 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 800348e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003492:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003496:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003498:	4b22      	ldr	r3, [pc, #136]	@ (8003524 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 800349a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800349e:	4a21      	ldr	r2, [pc, #132]	@ (8003524 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 80034a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80034a8:	4b1e      	ldr	r3, [pc, #120]	@ (8003524 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 80034aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034ae:	4a1d      	ldr	r2, [pc, #116]	@ (8003524 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 80034b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80034b8:	4a1a      	ldr	r2, [pc, #104]	@ (8003524 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	f003 0301 	and.w	r3, r3, #1
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d016      	beq.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ca:	f7fd ffe3 	bl	8001494 <HAL_GetTick>
 80034ce:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034d0:	e00b      	b.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x2ea>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034d2:	f7fd ffdf 	bl	8001494 <HAL_GetTick>
 80034d6:	4602      	mov	r2, r0
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	1ad3      	subs	r3, r2, r3
 80034dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d902      	bls.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x2ea>
          {
            ret = HAL_TIMEOUT;
 80034e4:	2303      	movs	r3, #3
 80034e6:	74fb      	strb	r3, [r7, #19]
            break;
 80034e8:	e006      	b.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034ea:	4b0e      	ldr	r3, [pc, #56]	@ (8003524 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 80034ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034f0:	f003 0302 	and.w	r3, r3, #2
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d0ec      	beq.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
          }
        }
      }

      if(ret == HAL_OK)
 80034f8:	7cfb      	ldrb	r3, [r7, #19]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d10c      	bne.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x318>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034fe:	4b09      	ldr	r3, [pc, #36]	@ (8003524 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8003500:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003504:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800350e:	4905      	ldr	r1, [pc, #20]	@ (8003524 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8003510:	4313      	orrs	r3, r2
 8003512:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003516:	e009      	b.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x32c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003518:	7cfb      	ldrb	r3, [r7, #19]
 800351a:	74bb      	strb	r3, [r7, #18]
 800351c:	e006      	b.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x32c>
 800351e:	bf00      	nop
 8003520:	40007000 	.word	0x40007000
 8003524:	40021000 	.word	0x40021000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003528:	7cfb      	ldrb	r3, [r7, #19]
 800352a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800352c:	7c7b      	ldrb	r3, [r7, #17]
 800352e:	2b01      	cmp	r3, #1
 8003530:	d105      	bne.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x33e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003532:	4b8d      	ldr	r3, [pc, #564]	@ (8003768 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8003534:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003536:	4a8c      	ldr	r2, [pc, #560]	@ (8003768 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8003538:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800353c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 0301 	and.w	r3, r3, #1
 8003546:	2b00      	cmp	r3, #0
 8003548:	d01f      	beq.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800354e:	2b00      	cmp	r3, #0
 8003550:	d010      	beq.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003556:	2b01      	cmp	r3, #1
 8003558:	d00c      	beq.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x374>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800355e:	2b03      	cmp	r3, #3
 8003560:	d008      	beq.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003566:	2b02      	cmp	r3, #2
 8003568:	d004      	beq.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x374>
 800356a:	f240 1199 	movw	r1, #409	@ 0x199
 800356e:	487f      	ldr	r0, [pc, #508]	@ (800376c <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 8003570:	f7fd f9f6 	bl	8000960 <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003574:	4b7c      	ldr	r3, [pc, #496]	@ (8003768 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8003576:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800357a:	f023 0203 	bic.w	r2, r3, #3
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003582:	4979      	ldr	r1, [pc, #484]	@ (8003768 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8003584:	4313      	orrs	r3, r2
 8003586:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 0302 	and.w	r3, r3, #2
 8003592:	2b00      	cmp	r3, #0
 8003594:	d01f      	beq.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800359a:	2b00      	cmp	r3, #0
 800359c:	d010      	beq.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035a2:	2b04      	cmp	r3, #4
 80035a4:	d00c      	beq.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035aa:	2b0c      	cmp	r3, #12
 80035ac:	d008      	beq.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035b2:	2b08      	cmp	r3, #8
 80035b4:	d004      	beq.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 80035b6:	f240 11a3 	movw	r1, #419	@ 0x1a3
 80035ba:	486c      	ldr	r0, [pc, #432]	@ (800376c <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 80035bc:	f7fd f9d0 	bl	8000960 <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80035c0:	4b69      	ldr	r3, [pc, #420]	@ (8003768 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 80035c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035c6:	f023 020c 	bic.w	r2, r3, #12
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035ce:	4966      	ldr	r1, [pc, #408]	@ (8003768 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 80035d0:	4313      	orrs	r3, r2
 80035d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0304 	and.w	r3, r3, #4
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d01f      	beq.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d010      	beq.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x40c>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ee:	2b10      	cmp	r3, #16
 80035f0:	d00c      	beq.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x40c>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035f6:	2b30      	cmp	r3, #48	@ 0x30
 80035f8:	d008      	beq.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x40c>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035fe:	2b20      	cmp	r3, #32
 8003600:	d004      	beq.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8003602:	f240 11af 	movw	r1, #431	@ 0x1af
 8003606:	4859      	ldr	r0, [pc, #356]	@ (800376c <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 8003608:	f7fd f9aa 	bl	8000960 <assert_failed>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800360c:	4b56      	ldr	r3, [pc, #344]	@ (8003768 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 800360e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003612:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800361a:	4953      	ldr	r1, [pc, #332]	@ (8003768 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 800361c:	4313      	orrs	r3, r2
 800361e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 0308 	and.w	r3, r3, #8
 800362a:	2b00      	cmp	r3, #0
 800362c:	d01f      	beq.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x46e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003632:	2b00      	cmp	r3, #0
 8003634:	d010      	beq.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x458>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800363a:	2b40      	cmp	r3, #64	@ 0x40
 800363c:	d00c      	beq.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x458>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003642:	2bc0      	cmp	r3, #192	@ 0xc0
 8003644:	d008      	beq.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x458>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800364a:	2b80      	cmp	r3, #128	@ 0x80
 800364c:	d004      	beq.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x458>
 800364e:	f240 11bd 	movw	r1, #445	@ 0x1bd
 8003652:	4846      	ldr	r0, [pc, #280]	@ (800376c <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 8003654:	f7fd f984 	bl	8000960 <assert_failed>

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003658:	4b43      	ldr	r3, [pc, #268]	@ (8003768 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 800365a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800365e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003666:	4940      	ldr	r1, [pc, #256]	@ (8003768 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8003668:	4313      	orrs	r3, r2
 800366a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 0310 	and.w	r3, r3, #16
 8003676:	2b00      	cmp	r3, #0
 8003678:	d022      	beq.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800367e:	2b00      	cmp	r3, #0
 8003680:	d013      	beq.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003686:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800368a:	d00e      	beq.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003690:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003694:	d009      	beq.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800369a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800369e:	d004      	beq.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 80036a0:	f240 11cb 	movw	r1, #459	@ 0x1cb
 80036a4:	4831      	ldr	r0, [pc, #196]	@ (800376c <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 80036a6:	f7fd f95b 	bl	8000960 <assert_failed>

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80036aa:	4b2f      	ldr	r3, [pc, #188]	@ (8003768 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 80036ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036b0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036b8:	492b      	ldr	r1, [pc, #172]	@ (8003768 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 80036ba:	4313      	orrs	r3, r2
 80036bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 0320 	and.w	r3, r3, #32
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d022      	beq.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x512>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d013      	beq.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036dc:	d00e      	beq.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036e2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80036e6:	d009      	beq.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80036f0:	d004      	beq.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
 80036f2:	f240 11d7 	movw	r1, #471	@ 0x1d7
 80036f6:	481d      	ldr	r0, [pc, #116]	@ (800376c <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 80036f8:	f7fd f932 	bl	8000960 <assert_failed>

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80036fc:	4b1a      	ldr	r3, [pc, #104]	@ (8003768 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 80036fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003702:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800370a:	4917      	ldr	r1, [pc, #92]	@ (8003768 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 800370c:	4313      	orrs	r3, r2
 800370e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800371a:	2b00      	cmp	r3, #0
 800371c:	d028      	beq.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003722:	2b00      	cmp	r3, #0
 8003724:	d013      	beq.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x54e>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800372a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800372e:	d00e      	beq.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x54e>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003734:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003738:	d009      	beq.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x54e>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800373e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003742:	d004      	beq.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x54e>
 8003744:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8003748:	4808      	ldr	r0, [pc, #32]	@ (800376c <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 800374a:	f7fd f909 	bl	8000960 <assert_failed>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800374e:	4b06      	ldr	r3, [pc, #24]	@ (8003768 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8003750:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003754:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800375c:	4902      	ldr	r1, [pc, #8]	@ (8003768 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 800375e:	4313      	orrs	r3, r2
 8003760:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003764:	e004      	b.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8003766:	bf00      	nop
 8003768:	40021000 	.word	0x40021000
 800376c:	08007738 	.word	0x08007738
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003778:	2b00      	cmp	r3, #0
 800377a:	d022      	beq.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003780:	2b00      	cmp	r3, #0
 8003782:	d013      	beq.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003788:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800378c:	d00e      	beq.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003792:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003796:	d009      	beq.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800379c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80037a0:	d004      	beq.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80037a2:	f240 11e7 	movw	r1, #487	@ 0x1e7
 80037a6:	489e      	ldr	r0, [pc, #632]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 80037a8:	f7fd f8da 	bl	8000960 <assert_failed>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80037ac:	4b9d      	ldr	r3, [pc, #628]	@ (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80037ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037b2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037ba:	499a      	ldr	r1, [pc, #616]	@ (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80037bc:	4313      	orrs	r3, r2
 80037be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d01d      	beq.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x60a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d00e      	beq.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037de:	d009      	beq.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037e8:	d004      	beq.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 80037ea:	f240 11ef 	movw	r1, #495	@ 0x1ef
 80037ee:	488c      	ldr	r0, [pc, #560]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 80037f0:	f7fd f8b6 	bl	8000960 <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80037f4:	4b8b      	ldr	r3, [pc, #556]	@ (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80037f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037fa:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003802:	4988      	ldr	r1, [pc, #544]	@ (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8003804:	4313      	orrs	r3, r2
 8003806:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003812:	2b00      	cmp	r3, #0
 8003814:	d01d      	beq.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x652>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800381a:	2b00      	cmp	r3, #0
 800381c:	d00e      	beq.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x63c>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003822:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003826:	d009      	beq.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x63c>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800382c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003830:	d004      	beq.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x63c>
 8003832:	f240 11fb 	movw	r1, #507	@ 0x1fb
 8003836:	487a      	ldr	r0, [pc, #488]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 8003838:	f7fd f892 	bl	8000960 <assert_failed>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800383c:	4b79      	ldr	r3, [pc, #484]	@ (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 800383e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003842:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800384a:	4976      	ldr	r1, [pc, #472]	@ (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 800384c:	4313      	orrs	r3, r2
 800384e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800385a:	2b00      	cmp	r3, #0
 800385c:	d01d      	beq.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003862:	2b00      	cmp	r3, #0
 8003864:	d00e      	beq.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x684>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800386a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800386e:	d009      	beq.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x684>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003874:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003878:	d004      	beq.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x684>
 800387a:	f240 2107 	movw	r1, #519	@ 0x207
 800387e:	4868      	ldr	r0, [pc, #416]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 8003880:	f7fd f86e 	bl	8000960 <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003884:	4b67      	ldr	r3, [pc, #412]	@ (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8003886:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800388a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003892:	4964      	ldr	r1, [pc, #400]	@ (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8003894:	4313      	orrs	r3, r2
 8003896:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d040      	beq.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d013      	beq.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80038b2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80038b6:	d00e      	beq.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80038bc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80038c0:	d009      	beq.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80038c6:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80038ca:	d004      	beq.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 80038cc:	f44f 7108 	mov.w	r1, #544	@ 0x220
 80038d0:	4853      	ldr	r0, [pc, #332]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 80038d2:	f7fd f845 	bl	8000960 <assert_failed>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80038d6:	4b53      	ldr	r3, [pc, #332]	@ (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80038d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038dc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80038e4:	494f      	ldr	r1, [pc, #316]	@ (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80038e6:	4313      	orrs	r3, r2
 80038e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80038f0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80038f4:	d106      	bne.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x704>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038f6:	4b4b      	ldr	r3, [pc, #300]	@ (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80038f8:	68db      	ldr	r3, [r3, #12]
 80038fa:	4a4a      	ldr	r2, [pc, #296]	@ (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80038fc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003900:	60d3      	str	r3, [r2, #12]
 8003902:	e011      	b.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003908:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800390c:	d10c      	bne.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x728>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	3304      	adds	r3, #4
 8003912:	2101      	movs	r1, #1
 8003914:	4618      	mov	r0, r3
 8003916:	f000 f931 	bl	8003b7c <RCCEx_PLLSAI1_Config>
 800391a:	4603      	mov	r3, r0
 800391c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800391e:	7cfb      	ldrb	r3, [r7, #19]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d001      	beq.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x728>
        {
          /* set overall return value */
          status = ret;
 8003924:	7cfb      	ldrb	r3, [r7, #19]
 8003926:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003930:	2b00      	cmp	r3, #0
 8003932:	d040      	beq.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x7b6>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003938:	2b00      	cmp	r3, #0
 800393a:	d013      	beq.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x764>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003940:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003944:	d00e      	beq.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x764>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800394a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800394e:	d009      	beq.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x764>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003954:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8003958:	d004      	beq.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x764>
 800395a:	f240 2141 	movw	r1, #577	@ 0x241
 800395e:	4830      	ldr	r0, [pc, #192]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 8003960:	f7fc fffe 	bl	8000960 <assert_failed>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003964:	4b2f      	ldr	r3, [pc, #188]	@ (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8003966:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800396a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003972:	492c      	ldr	r1, [pc, #176]	@ (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8003974:	4313      	orrs	r3, r2
 8003976:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800397e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003982:	d106      	bne.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x792>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003984:	4b27      	ldr	r3, [pc, #156]	@ (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8003986:	68db      	ldr	r3, [r3, #12]
 8003988:	4a26      	ldr	r2, [pc, #152]	@ (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 800398a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800398e:	60d3      	str	r3, [r2, #12]
 8003990:	e011      	b.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x7b6>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003996:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800399a:	d10c      	bne.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x7b6>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	3304      	adds	r3, #4
 80039a0:	2101      	movs	r1, #1
 80039a2:	4618      	mov	r0, r3
 80039a4:	f000 f8ea 	bl	8003b7c <RCCEx_PLLSAI1_Config>
 80039a8:	4603      	mov	r3, r0
 80039aa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80039ac:	7cfb      	ldrb	r3, [r7, #19]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d001      	beq.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x7b6>
      {
        /* set overall return value */
        status = ret;
 80039b2:	7cfb      	ldrb	r3, [r7, #19]
 80039b4:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d044      	beq.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d013      	beq.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039ce:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80039d2:	d00e      	beq.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039d8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80039dc:	d009      	beq.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039e2:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80039e6:	d004      	beq.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
 80039e8:	f240 2166 	movw	r1, #614	@ 0x266
 80039ec:	480c      	ldr	r0, [pc, #48]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 80039ee:	f7fc ffb7 	bl	8000960 <assert_failed>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80039f2:	4b0c      	ldr	r3, [pc, #48]	@ (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80039f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039f8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a00:	4908      	ldr	r1, [pc, #32]	@ (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8003a02:	4313      	orrs	r3, r2
 8003a04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a0c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003a10:	d10a      	bne.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x828>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a12:	4b04      	ldr	r3, [pc, #16]	@ (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8003a14:	68db      	ldr	r3, [r3, #12]
 8003a16:	4a03      	ldr	r2, [pc, #12]	@ (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8003a18:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003a1c:	60d3      	str	r3, [r2, #12]
 8003a1e:	e015      	b.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x84c>
 8003a20:	08007738 	.word	0x08007738
 8003a24:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a2c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003a30:	d10c      	bne.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x84c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	3304      	adds	r3, #4
 8003a36:	2101      	movs	r1, #1
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f000 f89f 	bl	8003b7c <RCCEx_PLLSAI1_Config>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a42:	7cfb      	ldrb	r3, [r7, #19]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d001      	beq.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x84c>
      {
        /* set overall return value */
        status = ret;
 8003a48:	7cfb      	ldrb	r3, [r7, #19]
 8003a4a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d047      	beq.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d013      	beq.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x888>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003a64:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003a68:	d00e      	beq.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x888>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003a6e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003a72:	d009      	beq.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x888>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003a78:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003a7c:	d004      	beq.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x888>
 8003a7e:	f240 2186 	movw	r1, #646	@ 0x286
 8003a82:	483c      	ldr	r0, [pc, #240]	@ (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x974>)
 8003a84:	f7fc ff6c 	bl	8000960 <assert_failed>

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003a88:	4b3b      	ldr	r3, [pc, #236]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 8003a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a8e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003a96:	4938      	ldr	r1, [pc, #224]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003aa2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003aa6:	d10d      	bne.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	3304      	adds	r3, #4
 8003aac:	2102      	movs	r1, #2
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f000 f864 	bl	8003b7c <RCCEx_PLLSAI1_Config>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ab8:	7cfb      	ldrb	r3, [r7, #19]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d014      	beq.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
      {
        /* set overall return value */
        status = ret;
 8003abe:	7cfb      	ldrb	r3, [r7, #19]
 8003ac0:	74bb      	strb	r3, [r7, #18]
 8003ac2:	e011      	b.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003ac8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003acc:	d10c      	bne.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	3320      	adds	r3, #32
 8003ad2:	2102      	movs	r1, #2
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f000 f9d1 	bl	8003e7c <RCCEx_PLLSAI2_Config>
 8003ada:	4603      	mov	r3, r0
 8003adc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ade:	7cfb      	ldrb	r3, [r7, #19]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d001      	beq.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
      {
        /* set overall return value */
        status = ret;
 8003ae4:	7cfb      	ldrb	r3, [r7, #19]
 8003ae6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d018      	beq.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x926>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d009      	beq.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x910>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003b00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b04:	d004      	beq.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x910>
 8003b06:	f240 21b6 	movw	r1, #694	@ 0x2b6
 8003b0a:	481a      	ldr	r0, [pc, #104]	@ (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x974>)
 8003b0c:	f7fc ff28 	bl	8000960 <assert_failed>

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003b10:	4b19      	ldr	r3, [pc, #100]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 8003b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b16:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003b1e:	4916      	ldr	r1, [pc, #88]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 8003b20:	4313      	orrs	r3, r2
 8003b22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d01b      	beq.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x96a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d00a      	beq.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x952>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003b42:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003b46:	d004      	beq.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x952>
 8003b48:	f44f 7131 	mov.w	r1, #708	@ 0x2c4
 8003b4c:	4809      	ldr	r0, [pc, #36]	@ (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x974>)
 8003b4e:	f7fc ff07 	bl	8000960 <assert_failed>

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003b52:	4b09      	ldr	r3, [pc, #36]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 8003b54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b58:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003b62:	4905      	ldr	r1, [pc, #20]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 8003b64:	4313      	orrs	r3, r2
 8003b66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003b6a:	7cbb      	ldrb	r3, [r7, #18]
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3718      	adds	r7, #24
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	08007738 	.word	0x08007738
 8003b78:	40021000 	.word	0x40021000

08003b7c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b084      	sub	sp, #16
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
 8003b84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b86:	2300      	movs	r3, #0
 8003b88:	73fb      	strb	r3, [r7, #15]

  /* check for PLLSAI1 Parameters used to output PLLSAI1CLK */
  /* P, Q and R dividers are verified in each specific divider case below */
  assert_param(IS_RCC_PLLSAI1SOURCE(PllSai1->PLLSAI1Source));
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d010      	beq.n	8003bb4 <RCCEx_PLLSAI1_Config+0x38>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d00c      	beq.n	8003bb4 <RCCEx_PLLSAI1_Config+0x38>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	2b02      	cmp	r3, #2
 8003ba0:	d008      	beq.n	8003bb4 <RCCEx_PLLSAI1_Config+0x38>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	2b03      	cmp	r3, #3
 8003ba8:	d004      	beq.n	8003bb4 <RCCEx_PLLSAI1_Config+0x38>
 8003baa:	f640 3162 	movw	r1, #2914	@ 0xb62
 8003bae:	4887      	ldr	r0, [pc, #540]	@ (8003dcc <RCCEx_PLLSAI1_Config+0x250>)
 8003bb0:	f7fc fed6 	bl	8000960 <assert_failed>
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d003      	beq.n	8003bc4 <RCCEx_PLLSAI1_Config+0x48>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	2b08      	cmp	r3, #8
 8003bc2:	d904      	bls.n	8003bce <RCCEx_PLLSAI1_Config+0x52>
 8003bc4:	f640 3163 	movw	r1, #2915	@ 0xb63
 8003bc8:	4880      	ldr	r0, [pc, #512]	@ (8003dcc <RCCEx_PLLSAI1_Config+0x250>)
 8003bca:	f7fc fec9 	bl	8000960 <assert_failed>
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	2b07      	cmp	r3, #7
 8003bd4:	d903      	bls.n	8003bde <RCCEx_PLLSAI1_Config+0x62>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	2b56      	cmp	r3, #86	@ 0x56
 8003bdc:	d904      	bls.n	8003be8 <RCCEx_PLLSAI1_Config+0x6c>
 8003bde:	f640 3164 	movw	r1, #2916	@ 0xb64
 8003be2:	487a      	ldr	r0, [pc, #488]	@ (8003dcc <RCCEx_PLLSAI1_Config+0x250>)
 8003be4:	f7fc febc 	bl	8000960 <assert_failed>
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	699b      	ldr	r3, [r3, #24]
 8003bec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d10b      	bne.n	8003c0c <RCCEx_PLLSAI1_Config+0x90>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	699b      	ldr	r3, [r3, #24]
 8003bf8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d105      	bne.n	8003c0c <RCCEx_PLLSAI1_Config+0x90>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	699b      	ldr	r3, [r3, #24]
 8003c04:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d007      	beq.n	8003c1c <RCCEx_PLLSAI1_Config+0xa0>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	699b      	ldr	r3, [r3, #24]
 8003c10:	f023 7388 	bic.w	r3, r3, #17825792	@ 0x1100000
 8003c14:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d004      	beq.n	8003c26 <RCCEx_PLLSAI1_Config+0xaa>
 8003c1c:	f640 3165 	movw	r1, #2917	@ 0xb65
 8003c20:	486a      	ldr	r0, [pc, #424]	@ (8003dcc <RCCEx_PLLSAI1_Config+0x250>)
 8003c22:	f7fc fe9d 	bl	8000960 <assert_failed>

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003c26:	4b6a      	ldr	r3, [pc, #424]	@ (8003dd0 <RCCEx_PLLSAI1_Config+0x254>)
 8003c28:	68db      	ldr	r3, [r3, #12]
 8003c2a:	f003 0303 	and.w	r3, r3, #3
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d018      	beq.n	8003c64 <RCCEx_PLLSAI1_Config+0xe8>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003c32:	4b67      	ldr	r3, [pc, #412]	@ (8003dd0 <RCCEx_PLLSAI1_Config+0x254>)
 8003c34:	68db      	ldr	r3, [r3, #12]
 8003c36:	f003 0203 	and.w	r2, r3, #3
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d10d      	bne.n	8003c5e <RCCEx_PLLSAI1_Config+0xe2>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
       ||
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d009      	beq.n	8003c5e <RCCEx_PLLSAI1_Config+0xe2>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003c4a:	4b61      	ldr	r3, [pc, #388]	@ (8003dd0 <RCCEx_PLLSAI1_Config+0x254>)
 8003c4c:	68db      	ldr	r3, [r3, #12]
 8003c4e:	091b      	lsrs	r3, r3, #4
 8003c50:	f003 0307 	and.w	r3, r3, #7
 8003c54:	1c5a      	adds	r2, r3, #1
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	685b      	ldr	r3, [r3, #4]
       ||
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d047      	beq.n	8003cee <RCCEx_PLLSAI1_Config+0x172>
#endif
      )
    {
      status = HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	73fb      	strb	r3, [r7, #15]
 8003c62:	e044      	b.n	8003cee <RCCEx_PLLSAI1_Config+0x172>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	2b03      	cmp	r3, #3
 8003c6a:	d018      	beq.n	8003c9e <RCCEx_PLLSAI1_Config+0x122>
 8003c6c:	2b03      	cmp	r3, #3
 8003c6e:	d825      	bhi.n	8003cbc <RCCEx_PLLSAI1_Config+0x140>
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d002      	beq.n	8003c7a <RCCEx_PLLSAI1_Config+0xfe>
 8003c74:	2b02      	cmp	r3, #2
 8003c76:	d009      	beq.n	8003c8c <RCCEx_PLLSAI1_Config+0x110>
 8003c78:	e020      	b.n	8003cbc <RCCEx_PLLSAI1_Config+0x140>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003c7a:	4b55      	ldr	r3, [pc, #340]	@ (8003dd0 <RCCEx_PLLSAI1_Config+0x254>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 0302 	and.w	r3, r3, #2
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d11d      	bne.n	8003cc2 <RCCEx_PLLSAI1_Config+0x146>
      {
        status = HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c8a:	e01a      	b.n	8003cc2 <RCCEx_PLLSAI1_Config+0x146>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003c8c:	4b50      	ldr	r3, [pc, #320]	@ (8003dd0 <RCCEx_PLLSAI1_Config+0x254>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d116      	bne.n	8003cc6 <RCCEx_PLLSAI1_Config+0x14a>
      {
        status = HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c9c:	e013      	b.n	8003cc6 <RCCEx_PLLSAI1_Config+0x14a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003c9e:	4b4c      	ldr	r3, [pc, #304]	@ (8003dd0 <RCCEx_PLLSAI1_Config+0x254>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d10f      	bne.n	8003cca <RCCEx_PLLSAI1_Config+0x14e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003caa:	4b49      	ldr	r3, [pc, #292]	@ (8003dd0 <RCCEx_PLLSAI1_Config+0x254>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d109      	bne.n	8003cca <RCCEx_PLLSAI1_Config+0x14e>
        {
          status = HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003cba:	e006      	b.n	8003cca <RCCEx_PLLSAI1_Config+0x14e>
    default:
      status = HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	73fb      	strb	r3, [r7, #15]
      break;
 8003cc0:	e004      	b.n	8003ccc <RCCEx_PLLSAI1_Config+0x150>
      break;
 8003cc2:	bf00      	nop
 8003cc4:	e002      	b.n	8003ccc <RCCEx_PLLSAI1_Config+0x150>
      break;
 8003cc6:	bf00      	nop
 8003cc8:	e000      	b.n	8003ccc <RCCEx_PLLSAI1_Config+0x150>
      break;
 8003cca:	bf00      	nop
    }

    if(status == HAL_OK)
 8003ccc:	7bfb      	ldrb	r3, [r7, #15]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d10d      	bne.n	8003cee <RCCEx_PLLSAI1_Config+0x172>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003cd2:	4b3f      	ldr	r3, [pc, #252]	@ (8003dd0 <RCCEx_PLLSAI1_Config+0x254>)
 8003cd4:	68db      	ldr	r3, [r3, #12]
 8003cd6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6819      	ldr	r1, [r3, #0]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	3b01      	subs	r3, #1
 8003ce4:	011b      	lsls	r3, r3, #4
 8003ce6:	430b      	orrs	r3, r1
 8003ce8:	4939      	ldr	r1, [pc, #228]	@ (8003dd0 <RCCEx_PLLSAI1_Config+0x254>)
 8003cea:	4313      	orrs	r3, r2
 8003cec:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003cee:	7bfb      	ldrb	r3, [r7, #15]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	f040 80ba 	bne.w	8003e6a <RCCEx_PLLSAI1_Config+0x2ee>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003cf6:	4b36      	ldr	r3, [pc, #216]	@ (8003dd0 <RCCEx_PLLSAI1_Config+0x254>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a35      	ldr	r2, [pc, #212]	@ (8003dd0 <RCCEx_PLLSAI1_Config+0x254>)
 8003cfc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003d00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d02:	f7fd fbc7 	bl	8001494 <HAL_GetTick>
 8003d06:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003d08:	e009      	b.n	8003d1e <RCCEx_PLLSAI1_Config+0x1a2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003d0a:	f7fd fbc3 	bl	8001494 <HAL_GetTick>
 8003d0e:	4602      	mov	r2, r0
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	1ad3      	subs	r3, r2, r3
 8003d14:	2b02      	cmp	r3, #2
 8003d16:	d902      	bls.n	8003d1e <RCCEx_PLLSAI1_Config+0x1a2>
      {
        status = HAL_TIMEOUT;
 8003d18:	2303      	movs	r3, #3
 8003d1a:	73fb      	strb	r3, [r7, #15]
        break;
 8003d1c:	e005      	b.n	8003d2a <RCCEx_PLLSAI1_Config+0x1ae>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003d1e:	4b2c      	ldr	r3, [pc, #176]	@ (8003dd0 <RCCEx_PLLSAI1_Config+0x254>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d1ef      	bne.n	8003d0a <RCCEx_PLLSAI1_Config+0x18e>
      }
    }

    if(status == HAL_OK)
 8003d2a:	7bfb      	ldrb	r3, [r7, #15]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	f040 809c 	bne.w	8003e6a <RCCEx_PLLSAI1_Config+0x2ee>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d11e      	bne.n	8003d76 <RCCEx_PLLSAI1_Config+0x1fa>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	2b07      	cmp	r3, #7
 8003d3e:	d008      	beq.n	8003d52 <RCCEx_PLLSAI1_Config+0x1d6>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	2b11      	cmp	r3, #17
 8003d46:	d004      	beq.n	8003d52 <RCCEx_PLLSAI1_Config+0x1d6>
 8003d48:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 8003d4c:	481f      	ldr	r0, [pc, #124]	@ (8003dcc <RCCEx_PLLSAI1_Config+0x250>)
 8003d4e:	f7fc fe07 	bl	8000960 <assert_failed>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d52:	4b1f      	ldr	r3, [pc, #124]	@ (8003dd0 <RCCEx_PLLSAI1_Config+0x254>)
 8003d54:	691b      	ldr	r3, [r3, #16]
 8003d56:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003d5a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d5e:	687a      	ldr	r2, [r7, #4]
 8003d60:	6892      	ldr	r2, [r2, #8]
 8003d62:	0211      	lsls	r1, r2, #8
 8003d64:	687a      	ldr	r2, [r7, #4]
 8003d66:	68d2      	ldr	r2, [r2, #12]
 8003d68:	0912      	lsrs	r2, r2, #4
 8003d6a:	0452      	lsls	r2, r2, #17
 8003d6c:	430a      	orrs	r2, r1
 8003d6e:	4918      	ldr	r1, [pc, #96]	@ (8003dd0 <RCCEx_PLLSAI1_Config+0x254>)
 8003d70:	4313      	orrs	r3, r2
 8003d72:	610b      	str	r3, [r1, #16]
 8003d74:	e055      	b.n	8003e22 <RCCEx_PLLSAI1_Config+0x2a6>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d12b      	bne.n	8003dd4 <RCCEx_PLLSAI1_Config+0x258>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	691b      	ldr	r3, [r3, #16]
 8003d80:	2b02      	cmp	r3, #2
 8003d82:	d010      	beq.n	8003da6 <RCCEx_PLLSAI1_Config+0x22a>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	691b      	ldr	r3, [r3, #16]
 8003d88:	2b04      	cmp	r3, #4
 8003d8a:	d00c      	beq.n	8003da6 <RCCEx_PLLSAI1_Config+0x22a>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	691b      	ldr	r3, [r3, #16]
 8003d90:	2b06      	cmp	r3, #6
 8003d92:	d008      	beq.n	8003da6 <RCCEx_PLLSAI1_Config+0x22a>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	691b      	ldr	r3, [r3, #16]
 8003d98:	2b08      	cmp	r3, #8
 8003d9a:	d004      	beq.n	8003da6 <RCCEx_PLLSAI1_Config+0x22a>
 8003d9c:	f640 31dc 	movw	r1, #3036	@ 0xbdc
 8003da0:	480a      	ldr	r0, [pc, #40]	@ (8003dcc <RCCEx_PLLSAI1_Config+0x250>)
 8003da2:	f7fc fddd 	bl	8000960 <assert_failed>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003da6:	4b0a      	ldr	r3, [pc, #40]	@ (8003dd0 <RCCEx_PLLSAI1_Config+0x254>)
 8003da8:	691b      	ldr	r3, [r3, #16]
 8003daa:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003dae:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	6892      	ldr	r2, [r2, #8]
 8003db6:	0211      	lsls	r1, r2, #8
 8003db8:	687a      	ldr	r2, [r7, #4]
 8003dba:	6912      	ldr	r2, [r2, #16]
 8003dbc:	0852      	lsrs	r2, r2, #1
 8003dbe:	3a01      	subs	r2, #1
 8003dc0:	0552      	lsls	r2, r2, #21
 8003dc2:	430a      	orrs	r2, r1
 8003dc4:	4902      	ldr	r1, [pc, #8]	@ (8003dd0 <RCCEx_PLLSAI1_Config+0x254>)
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	610b      	str	r3, [r1, #16]
 8003dca:	e02a      	b.n	8003e22 <RCCEx_PLLSAI1_Config+0x2a6>
 8003dcc:	08007738 	.word	0x08007738
 8003dd0:	40021000 	.word	0x40021000
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	695b      	ldr	r3, [r3, #20]
 8003dd8:	2b02      	cmp	r3, #2
 8003dda:	d010      	beq.n	8003dfe <RCCEx_PLLSAI1_Config+0x282>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	695b      	ldr	r3, [r3, #20]
 8003de0:	2b04      	cmp	r3, #4
 8003de2:	d00c      	beq.n	8003dfe <RCCEx_PLLSAI1_Config+0x282>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	695b      	ldr	r3, [r3, #20]
 8003de8:	2b06      	cmp	r3, #6
 8003dea:	d008      	beq.n	8003dfe <RCCEx_PLLSAI1_Config+0x282>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	695b      	ldr	r3, [r3, #20]
 8003df0:	2b08      	cmp	r3, #8
 8003df2:	d004      	beq.n	8003dfe <RCCEx_PLLSAI1_Config+0x282>
 8003df4:	f640 31ee 	movw	r1, #3054	@ 0xbee
 8003df8:	481e      	ldr	r0, [pc, #120]	@ (8003e74 <RCCEx_PLLSAI1_Config+0x2f8>)
 8003dfa:	f7fc fdb1 	bl	8000960 <assert_failed>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003dfe:	4b1e      	ldr	r3, [pc, #120]	@ (8003e78 <RCCEx_PLLSAI1_Config+0x2fc>)
 8003e00:	691b      	ldr	r3, [r3, #16]
 8003e02:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003e06:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	6892      	ldr	r2, [r2, #8]
 8003e0e:	0211      	lsls	r1, r2, #8
 8003e10:	687a      	ldr	r2, [r7, #4]
 8003e12:	6952      	ldr	r2, [r2, #20]
 8003e14:	0852      	lsrs	r2, r2, #1
 8003e16:	3a01      	subs	r2, #1
 8003e18:	0652      	lsls	r2, r2, #25
 8003e1a:	430a      	orrs	r2, r1
 8003e1c:	4916      	ldr	r1, [pc, #88]	@ (8003e78 <RCCEx_PLLSAI1_Config+0x2fc>)
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003e22:	4b15      	ldr	r3, [pc, #84]	@ (8003e78 <RCCEx_PLLSAI1_Config+0x2fc>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a14      	ldr	r2, [pc, #80]	@ (8003e78 <RCCEx_PLLSAI1_Config+0x2fc>)
 8003e28:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003e2c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e2e:	f7fd fb31 	bl	8001494 <HAL_GetTick>
 8003e32:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003e34:	e009      	b.n	8003e4a <RCCEx_PLLSAI1_Config+0x2ce>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003e36:	f7fd fb2d 	bl	8001494 <HAL_GetTick>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	1ad3      	subs	r3, r2, r3
 8003e40:	2b02      	cmp	r3, #2
 8003e42:	d902      	bls.n	8003e4a <RCCEx_PLLSAI1_Config+0x2ce>
        {
          status = HAL_TIMEOUT;
 8003e44:	2303      	movs	r3, #3
 8003e46:	73fb      	strb	r3, [r7, #15]
          break;
 8003e48:	e005      	b.n	8003e56 <RCCEx_PLLSAI1_Config+0x2da>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003e4a:	4b0b      	ldr	r3, [pc, #44]	@ (8003e78 <RCCEx_PLLSAI1_Config+0x2fc>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d0ef      	beq.n	8003e36 <RCCEx_PLLSAI1_Config+0x2ba>
        }
      }

      if(status == HAL_OK)
 8003e56:	7bfb      	ldrb	r3, [r7, #15]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d106      	bne.n	8003e6a <RCCEx_PLLSAI1_Config+0x2ee>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003e5c:	4b06      	ldr	r3, [pc, #24]	@ (8003e78 <RCCEx_PLLSAI1_Config+0x2fc>)
 8003e5e:	691a      	ldr	r2, [r3, #16]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	699b      	ldr	r3, [r3, #24]
 8003e64:	4904      	ldr	r1, [pc, #16]	@ (8003e78 <RCCEx_PLLSAI1_Config+0x2fc>)
 8003e66:	4313      	orrs	r3, r2
 8003e68:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003e6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3710      	adds	r7, #16
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}
 8003e74:	08007738 	.word	0x08007738
 8003e78:	40021000 	.word	0x40021000

08003e7c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b084      	sub	sp, #16
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
 8003e84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003e86:	2300      	movs	r3, #0
 8003e88:	73fb      	strb	r3, [r7, #15]

  /* check for PLLSAI2 Parameters used to output PLLSAI2CLK */
  /* P, Q and R dividers are verified in each specific divider case below */
  assert_param(IS_RCC_PLLSAI2SOURCE(PllSai2->PLLSAI2Source));
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d010      	beq.n	8003eb4 <RCCEx_PLLSAI2_Config+0x38>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d00c      	beq.n	8003eb4 <RCCEx_PLLSAI2_Config+0x38>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	2b02      	cmp	r3, #2
 8003ea0:	d008      	beq.n	8003eb4 <RCCEx_PLLSAI2_Config+0x38>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	2b03      	cmp	r3, #3
 8003ea8:	d004      	beq.n	8003eb4 <RCCEx_PLLSAI2_Config+0x38>
 8003eaa:	f640 412f 	movw	r1, #3119	@ 0xc2f
 8003eae:	4896      	ldr	r0, [pc, #600]	@ (8004108 <RCCEx_PLLSAI2_Config+0x28c>)
 8003eb0:	f7fc fd56 	bl	8000960 <assert_failed>
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d003      	beq.n	8003ec4 <RCCEx_PLLSAI2_Config+0x48>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	2b08      	cmp	r3, #8
 8003ec2:	d904      	bls.n	8003ece <RCCEx_PLLSAI2_Config+0x52>
 8003ec4:	f44f 6143 	mov.w	r1, #3120	@ 0xc30
 8003ec8:	488f      	ldr	r0, [pc, #572]	@ (8004108 <RCCEx_PLLSAI2_Config+0x28c>)
 8003eca:	f7fc fd49 	bl	8000960 <assert_failed>
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	2b07      	cmp	r3, #7
 8003ed4:	d903      	bls.n	8003ede <RCCEx_PLLSAI2_Config+0x62>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	2b56      	cmp	r3, #86	@ 0x56
 8003edc:	d904      	bls.n	8003ee8 <RCCEx_PLLSAI2_Config+0x6c>
 8003ede:	f640 4131 	movw	r1, #3121	@ 0xc31
 8003ee2:	4889      	ldr	r0, [pc, #548]	@ (8004108 <RCCEx_PLLSAI2_Config+0x28c>)
 8003ee4:	f7fc fd3c 	bl	8000960 <assert_failed>
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	695b      	ldr	r3, [r3, #20]
 8003eec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d105      	bne.n	8003f00 <RCCEx_PLLSAI2_Config+0x84>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	695b      	ldr	r3, [r3, #20]
 8003ef8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d007      	beq.n	8003f10 <RCCEx_PLLSAI2_Config+0x94>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	695b      	ldr	r3, [r3, #20]
 8003f04:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f08:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d004      	beq.n	8003f1a <RCCEx_PLLSAI2_Config+0x9e>
 8003f10:	f640 4132 	movw	r1, #3122	@ 0xc32
 8003f14:	487c      	ldr	r0, [pc, #496]	@ (8004108 <RCCEx_PLLSAI2_Config+0x28c>)
 8003f16:	f7fc fd23 	bl	8000960 <assert_failed>

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003f1a:	4b7c      	ldr	r3, [pc, #496]	@ (800410c <RCCEx_PLLSAI2_Config+0x290>)
 8003f1c:	68db      	ldr	r3, [r3, #12]
 8003f1e:	f003 0303 	and.w	r3, r3, #3
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d018      	beq.n	8003f58 <RCCEx_PLLSAI2_Config+0xdc>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003f26:	4b79      	ldr	r3, [pc, #484]	@ (800410c <RCCEx_PLLSAI2_Config+0x290>)
 8003f28:	68db      	ldr	r3, [r3, #12]
 8003f2a:	f003 0203 	and.w	r2, r3, #3
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	429a      	cmp	r2, r3
 8003f34:	d10d      	bne.n	8003f52 <RCCEx_PLLSAI2_Config+0xd6>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
       ||
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d009      	beq.n	8003f52 <RCCEx_PLLSAI2_Config+0xd6>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003f3e:	4b73      	ldr	r3, [pc, #460]	@ (800410c <RCCEx_PLLSAI2_Config+0x290>)
 8003f40:	68db      	ldr	r3, [r3, #12]
 8003f42:	091b      	lsrs	r3, r3, #4
 8003f44:	f003 0307 	and.w	r3, r3, #7
 8003f48:	1c5a      	adds	r2, r3, #1
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	685b      	ldr	r3, [r3, #4]
       ||
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	d047      	beq.n	8003fe2 <RCCEx_PLLSAI2_Config+0x166>
#endif
      )
    {
      status = HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	73fb      	strb	r3, [r7, #15]
 8003f56:	e044      	b.n	8003fe2 <RCCEx_PLLSAI2_Config+0x166>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	2b03      	cmp	r3, #3
 8003f5e:	d018      	beq.n	8003f92 <RCCEx_PLLSAI2_Config+0x116>
 8003f60:	2b03      	cmp	r3, #3
 8003f62:	d825      	bhi.n	8003fb0 <RCCEx_PLLSAI2_Config+0x134>
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d002      	beq.n	8003f6e <RCCEx_PLLSAI2_Config+0xf2>
 8003f68:	2b02      	cmp	r3, #2
 8003f6a:	d009      	beq.n	8003f80 <RCCEx_PLLSAI2_Config+0x104>
 8003f6c:	e020      	b.n	8003fb0 <RCCEx_PLLSAI2_Config+0x134>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003f6e:	4b67      	ldr	r3, [pc, #412]	@ (800410c <RCCEx_PLLSAI2_Config+0x290>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 0302 	and.w	r3, r3, #2
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d11d      	bne.n	8003fb6 <RCCEx_PLLSAI2_Config+0x13a>
      {
        status = HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f7e:	e01a      	b.n	8003fb6 <RCCEx_PLLSAI2_Config+0x13a>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003f80:	4b62      	ldr	r3, [pc, #392]	@ (800410c <RCCEx_PLLSAI2_Config+0x290>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d116      	bne.n	8003fba <RCCEx_PLLSAI2_Config+0x13e>
      {
        status = HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f90:	e013      	b.n	8003fba <RCCEx_PLLSAI2_Config+0x13e>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003f92:	4b5e      	ldr	r3, [pc, #376]	@ (800410c <RCCEx_PLLSAI2_Config+0x290>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d10f      	bne.n	8003fbe <RCCEx_PLLSAI2_Config+0x142>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003f9e:	4b5b      	ldr	r3, [pc, #364]	@ (800410c <RCCEx_PLLSAI2_Config+0x290>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d109      	bne.n	8003fbe <RCCEx_PLLSAI2_Config+0x142>
        {
          status = HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003fae:	e006      	b.n	8003fbe <RCCEx_PLLSAI2_Config+0x142>
    default:
      status = HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	73fb      	strb	r3, [r7, #15]
      break;
 8003fb4:	e004      	b.n	8003fc0 <RCCEx_PLLSAI2_Config+0x144>
      break;
 8003fb6:	bf00      	nop
 8003fb8:	e002      	b.n	8003fc0 <RCCEx_PLLSAI2_Config+0x144>
      break;
 8003fba:	bf00      	nop
 8003fbc:	e000      	b.n	8003fc0 <RCCEx_PLLSAI2_Config+0x144>
      break;
 8003fbe:	bf00      	nop
    }

    if(status == HAL_OK)
 8003fc0:	7bfb      	ldrb	r3, [r7, #15]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d10d      	bne.n	8003fe2 <RCCEx_PLLSAI2_Config+0x166>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003fc6:	4b51      	ldr	r3, [pc, #324]	@ (800410c <RCCEx_PLLSAI2_Config+0x290>)
 8003fc8:	68db      	ldr	r3, [r3, #12]
 8003fca:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6819      	ldr	r1, [r3, #0]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	3b01      	subs	r3, #1
 8003fd8:	011b      	lsls	r3, r3, #4
 8003fda:	430b      	orrs	r3, r1
 8003fdc:	494b      	ldr	r1, [pc, #300]	@ (800410c <RCCEx_PLLSAI2_Config+0x290>)
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003fe2:	7bfb      	ldrb	r3, [r7, #15]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	f040 808a 	bne.w	80040fe <RCCEx_PLLSAI2_Config+0x282>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003fea:	4b48      	ldr	r3, [pc, #288]	@ (800410c <RCCEx_PLLSAI2_Config+0x290>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a47      	ldr	r2, [pc, #284]	@ (800410c <RCCEx_PLLSAI2_Config+0x290>)
 8003ff0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ff4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ff6:	f7fd fa4d 	bl	8001494 <HAL_GetTick>
 8003ffa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003ffc:	e009      	b.n	8004012 <RCCEx_PLLSAI2_Config+0x196>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003ffe:	f7fd fa49 	bl	8001494 <HAL_GetTick>
 8004002:	4602      	mov	r2, r0
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	1ad3      	subs	r3, r2, r3
 8004008:	2b02      	cmp	r3, #2
 800400a:	d902      	bls.n	8004012 <RCCEx_PLLSAI2_Config+0x196>
      {
        status = HAL_TIMEOUT;
 800400c:	2303      	movs	r3, #3
 800400e:	73fb      	strb	r3, [r7, #15]
        break;
 8004010:	e005      	b.n	800401e <RCCEx_PLLSAI2_Config+0x1a2>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004012:	4b3e      	ldr	r3, [pc, #248]	@ (800410c <RCCEx_PLLSAI2_Config+0x290>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800401a:	2b00      	cmp	r3, #0
 800401c:	d1ef      	bne.n	8003ffe <RCCEx_PLLSAI2_Config+0x182>
      }
    }

    if(status == HAL_OK)
 800401e:	7bfb      	ldrb	r3, [r7, #15]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d16c      	bne.n	80040fe <RCCEx_PLLSAI2_Config+0x282>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d11e      	bne.n	8004068 <RCCEx_PLLSAI2_Config+0x1ec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	68db      	ldr	r3, [r3, #12]
 800402e:	2b07      	cmp	r3, #7
 8004030:	d008      	beq.n	8004044 <RCCEx_PLLSAI2_Config+0x1c8>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	68db      	ldr	r3, [r3, #12]
 8004036:	2b11      	cmp	r3, #17
 8004038:	d004      	beq.n	8004044 <RCCEx_PLLSAI2_Config+0x1c8>
 800403a:	f640 4185 	movw	r1, #3205	@ 0xc85
 800403e:	4832      	ldr	r0, [pc, #200]	@ (8004108 <RCCEx_PLLSAI2_Config+0x28c>)
 8004040:	f7fc fc8e 	bl	8000960 <assert_failed>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004044:	4b31      	ldr	r3, [pc, #196]	@ (800410c <RCCEx_PLLSAI2_Config+0x290>)
 8004046:	695b      	ldr	r3, [r3, #20]
 8004048:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800404c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004050:	687a      	ldr	r2, [r7, #4]
 8004052:	6892      	ldr	r2, [r2, #8]
 8004054:	0211      	lsls	r1, r2, #8
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	68d2      	ldr	r2, [r2, #12]
 800405a:	0912      	lsrs	r2, r2, #4
 800405c:	0452      	lsls	r2, r2, #17
 800405e:	430a      	orrs	r2, r1
 8004060:	492a      	ldr	r1, [pc, #168]	@ (800410c <RCCEx_PLLSAI2_Config+0x290>)
 8004062:	4313      	orrs	r3, r2
 8004064:	614b      	str	r3, [r1, #20]
 8004066:	e026      	b.n	80040b6 <RCCEx_PLLSAI2_Config+0x23a>
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#endif /* RCC_PLLSAI2Q_DIV_SUPPORT */
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	691b      	ldr	r3, [r3, #16]
 800406c:	2b02      	cmp	r3, #2
 800406e:	d010      	beq.n	8004092 <RCCEx_PLLSAI2_Config+0x216>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	691b      	ldr	r3, [r3, #16]
 8004074:	2b04      	cmp	r3, #4
 8004076:	d00c      	beq.n	8004092 <RCCEx_PLLSAI2_Config+0x216>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	691b      	ldr	r3, [r3, #16]
 800407c:	2b06      	cmp	r3, #6
 800407e:	d008      	beq.n	8004092 <RCCEx_PLLSAI2_Config+0x216>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	691b      	ldr	r3, [r3, #16]
 8004084:	2b08      	cmp	r3, #8
 8004086:	d004      	beq.n	8004092 <RCCEx_PLLSAI2_Config+0x216>
 8004088:	f640 41bd 	movw	r1, #3261	@ 0xcbd
 800408c:	481e      	ldr	r0, [pc, #120]	@ (8004108 <RCCEx_PLLSAI2_Config+0x28c>)
 800408e:	f7fc fc67 	bl	8000960 <assert_failed>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004092:	4b1e      	ldr	r3, [pc, #120]	@ (800410c <RCCEx_PLLSAI2_Config+0x290>)
 8004094:	695b      	ldr	r3, [r3, #20]
 8004096:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800409a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800409e:	687a      	ldr	r2, [r7, #4]
 80040a0:	6892      	ldr	r2, [r2, #8]
 80040a2:	0211      	lsls	r1, r2, #8
 80040a4:	687a      	ldr	r2, [r7, #4]
 80040a6:	6912      	ldr	r2, [r2, #16]
 80040a8:	0852      	lsrs	r2, r2, #1
 80040aa:	3a01      	subs	r2, #1
 80040ac:	0652      	lsls	r2, r2, #25
 80040ae:	430a      	orrs	r2, r1
 80040b0:	4916      	ldr	r1, [pc, #88]	@ (800410c <RCCEx_PLLSAI2_Config+0x290>)
 80040b2:	4313      	orrs	r3, r2
 80040b4:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80040b6:	4b15      	ldr	r3, [pc, #84]	@ (800410c <RCCEx_PLLSAI2_Config+0x290>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a14      	ldr	r2, [pc, #80]	@ (800410c <RCCEx_PLLSAI2_Config+0x290>)
 80040bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80040c0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040c2:	f7fd f9e7 	bl	8001494 <HAL_GetTick>
 80040c6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80040c8:	e009      	b.n	80040de <RCCEx_PLLSAI2_Config+0x262>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80040ca:	f7fd f9e3 	bl	8001494 <HAL_GetTick>
 80040ce:	4602      	mov	r2, r0
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	1ad3      	subs	r3, r2, r3
 80040d4:	2b02      	cmp	r3, #2
 80040d6:	d902      	bls.n	80040de <RCCEx_PLLSAI2_Config+0x262>
        {
          status = HAL_TIMEOUT;
 80040d8:	2303      	movs	r3, #3
 80040da:	73fb      	strb	r3, [r7, #15]
          break;
 80040dc:	e005      	b.n	80040ea <RCCEx_PLLSAI2_Config+0x26e>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80040de:	4b0b      	ldr	r3, [pc, #44]	@ (800410c <RCCEx_PLLSAI2_Config+0x290>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d0ef      	beq.n	80040ca <RCCEx_PLLSAI2_Config+0x24e>
        }
      }

      if(status == HAL_OK)
 80040ea:	7bfb      	ldrb	r3, [r7, #15]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d106      	bne.n	80040fe <RCCEx_PLLSAI2_Config+0x282>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80040f0:	4b06      	ldr	r3, [pc, #24]	@ (800410c <RCCEx_PLLSAI2_Config+0x290>)
 80040f2:	695a      	ldr	r2, [r3, #20]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	695b      	ldr	r3, [r3, #20]
 80040f8:	4904      	ldr	r1, [pc, #16]	@ (800410c <RCCEx_PLLSAI2_Config+0x290>)
 80040fa:	4313      	orrs	r3, r2
 80040fc:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80040fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004100:	4618      	mov	r0, r3
 8004102:	3710      	adds	r7, #16
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}
 8004108:	08007738 	.word	0x08007738
 800410c:	40021000 	.word	0x40021000

08004110 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b084      	sub	sp, #16
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d101      	bne.n	8004122 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	e1dd      	b.n	80044de <HAL_SPI_Init+0x3ce>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a7b      	ldr	r2, [pc, #492]	@ (8004314 <HAL_SPI_Init+0x204>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d00e      	beq.n	800414a <HAL_SPI_Init+0x3a>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a79      	ldr	r2, [pc, #484]	@ (8004318 <HAL_SPI_Init+0x208>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d009      	beq.n	800414a <HAL_SPI_Init+0x3a>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a78      	ldr	r2, [pc, #480]	@ (800431c <HAL_SPI_Init+0x20c>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d004      	beq.n	800414a <HAL_SPI_Init+0x3a>
 8004140:	f240 1147 	movw	r1, #327	@ 0x147
 8004144:	4876      	ldr	r0, [pc, #472]	@ (8004320 <HAL_SPI_Init+0x210>)
 8004146:	f7fc fc0b 	bl	8000960 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d009      	beq.n	8004166 <HAL_SPI_Init+0x56>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800415a:	d004      	beq.n	8004166 <HAL_SPI_Init+0x56>
 800415c:	f44f 71a4 	mov.w	r1, #328	@ 0x148
 8004160:	486f      	ldr	r0, [pc, #444]	@ (8004320 <HAL_SPI_Init+0x210>)
 8004162:	f7fc fbfd 	bl	8000960 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d00e      	beq.n	800418c <HAL_SPI_Init+0x7c>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004176:	d009      	beq.n	800418c <HAL_SPI_Init+0x7c>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004180:	d004      	beq.n	800418c <HAL_SPI_Init+0x7c>
 8004182:	f240 1149 	movw	r1, #329	@ 0x149
 8004186:	4866      	ldr	r0, [pc, #408]	@ (8004320 <HAL_SPI_Init+0x210>)
 8004188:	f7fc fbea 	bl	8000960 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	68db      	ldr	r3, [r3, #12]
 8004190:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004194:	d040      	beq.n	8004218 <HAL_SPI_Init+0x108>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	68db      	ldr	r3, [r3, #12]
 800419a:	f5b3 6f60 	cmp.w	r3, #3584	@ 0xe00
 800419e:	d03b      	beq.n	8004218 <HAL_SPI_Init+0x108>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	f5b3 6f50 	cmp.w	r3, #3328	@ 0xd00
 80041a8:	d036      	beq.n	8004218 <HAL_SPI_Init+0x108>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	68db      	ldr	r3, [r3, #12]
 80041ae:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80041b2:	d031      	beq.n	8004218 <HAL_SPI_Init+0x108>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	f5b3 6f30 	cmp.w	r3, #2816	@ 0xb00
 80041bc:	d02c      	beq.n	8004218 <HAL_SPI_Init+0x108>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	68db      	ldr	r3, [r3, #12]
 80041c2:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80041c6:	d027      	beq.n	8004218 <HAL_SPI_Init+0x108>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	f5b3 6f10 	cmp.w	r3, #2304	@ 0x900
 80041d0:	d022      	beq.n	8004218 <HAL_SPI_Init+0x108>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	68db      	ldr	r3, [r3, #12]
 80041d6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80041da:	d01d      	beq.n	8004218 <HAL_SPI_Init+0x108>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80041e4:	d018      	beq.n	8004218 <HAL_SPI_Init+0x108>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	68db      	ldr	r3, [r3, #12]
 80041ea:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80041ee:	d013      	beq.n	8004218 <HAL_SPI_Init+0x108>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	68db      	ldr	r3, [r3, #12]
 80041f4:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80041f8:	d00e      	beq.n	8004218 <HAL_SPI_Init+0x108>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	68db      	ldr	r3, [r3, #12]
 80041fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004202:	d009      	beq.n	8004218 <HAL_SPI_Init+0x108>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800420c:	d004      	beq.n	8004218 <HAL_SPI_Init+0x108>
 800420e:	f44f 71a5 	mov.w	r1, #330	@ 0x14a
 8004212:	4843      	ldr	r0, [pc, #268]	@ (8004320 <HAL_SPI_Init+0x210>)
 8004214:	f7fc fba4 	bl	8000960 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	699b      	ldr	r3, [r3, #24]
 800421c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004220:	d00d      	beq.n	800423e <HAL_SPI_Init+0x12e>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	699b      	ldr	r3, [r3, #24]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d009      	beq.n	800423e <HAL_SPI_Init+0x12e>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	699b      	ldr	r3, [r3, #24]
 800422e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004232:	d004      	beq.n	800423e <HAL_SPI_Init+0x12e>
 8004234:	f240 114b 	movw	r1, #331	@ 0x14b
 8004238:	4839      	ldr	r0, [pc, #228]	@ (8004320 <HAL_SPI_Init+0x210>)
 800423a:	f7fc fb91 	bl	8000960 <assert_failed>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004242:	2b08      	cmp	r3, #8
 8004244:	d008      	beq.n	8004258 <HAL_SPI_Init+0x148>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800424a:	2b00      	cmp	r3, #0
 800424c:	d004      	beq.n	8004258 <HAL_SPI_Init+0x148>
 800424e:	f44f 71a6 	mov.w	r1, #332	@ 0x14c
 8004252:	4833      	ldr	r0, [pc, #204]	@ (8004320 <HAL_SPI_Init+0x210>)
 8004254:	f7fc fb84 	bl	8000960 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	69db      	ldr	r3, [r3, #28]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d020      	beq.n	80042a2 <HAL_SPI_Init+0x192>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	69db      	ldr	r3, [r3, #28]
 8004264:	2b08      	cmp	r3, #8
 8004266:	d01c      	beq.n	80042a2 <HAL_SPI_Init+0x192>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	69db      	ldr	r3, [r3, #28]
 800426c:	2b10      	cmp	r3, #16
 800426e:	d018      	beq.n	80042a2 <HAL_SPI_Init+0x192>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	69db      	ldr	r3, [r3, #28]
 8004274:	2b18      	cmp	r3, #24
 8004276:	d014      	beq.n	80042a2 <HAL_SPI_Init+0x192>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	69db      	ldr	r3, [r3, #28]
 800427c:	2b20      	cmp	r3, #32
 800427e:	d010      	beq.n	80042a2 <HAL_SPI_Init+0x192>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	69db      	ldr	r3, [r3, #28]
 8004284:	2b28      	cmp	r3, #40	@ 0x28
 8004286:	d00c      	beq.n	80042a2 <HAL_SPI_Init+0x192>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	69db      	ldr	r3, [r3, #28]
 800428c:	2b30      	cmp	r3, #48	@ 0x30
 800428e:	d008      	beq.n	80042a2 <HAL_SPI_Init+0x192>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	69db      	ldr	r3, [r3, #28]
 8004294:	2b38      	cmp	r3, #56	@ 0x38
 8004296:	d004      	beq.n	80042a2 <HAL_SPI_Init+0x192>
 8004298:	f240 114d 	movw	r1, #333	@ 0x14d
 800429c:	4820      	ldr	r0, [pc, #128]	@ (8004320 <HAL_SPI_Init+0x210>)
 800429e:	f7fc fb5f 	bl	8000960 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6a1b      	ldr	r3, [r3, #32]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d008      	beq.n	80042bc <HAL_SPI_Init+0x1ac>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6a1b      	ldr	r3, [r3, #32]
 80042ae:	2b80      	cmp	r3, #128	@ 0x80
 80042b0:	d004      	beq.n	80042bc <HAL_SPI_Init+0x1ac>
 80042b2:	f44f 71a7 	mov.w	r1, #334	@ 0x14e
 80042b6:	481a      	ldr	r0, [pc, #104]	@ (8004320 <HAL_SPI_Init+0x210>)
 80042b8:	f7fc fb52 	bl	8000960 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d008      	beq.n	80042d6 <HAL_SPI_Init+0x1c6>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042c8:	2b10      	cmp	r3, #16
 80042ca:	d004      	beq.n	80042d6 <HAL_SPI_Init+0x1c6>
 80042cc:	f240 114f 	movw	r1, #335	@ 0x14f
 80042d0:	4813      	ldr	r0, [pc, #76]	@ (8004320 <HAL_SPI_Init+0x210>)
 80042d2:	f7fc fb45 	bl	8000960 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d151      	bne.n	8004382 <HAL_SPI_Init+0x272>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	691b      	ldr	r3, [r3, #16]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d008      	beq.n	80042f8 <HAL_SPI_Init+0x1e8>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	691b      	ldr	r3, [r3, #16]
 80042ea:	2b02      	cmp	r3, #2
 80042ec:	d004      	beq.n	80042f8 <HAL_SPI_Init+0x1e8>
 80042ee:	f44f 71a9 	mov.w	r1, #338	@ 0x152
 80042f2:	480b      	ldr	r0, [pc, #44]	@ (8004320 <HAL_SPI_Init+0x210>)
 80042f4:	f7fc fb34 	bl	8000960 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	695b      	ldr	r3, [r3, #20]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d011      	beq.n	8004324 <HAL_SPI_Init+0x214>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	695b      	ldr	r3, [r3, #20]
 8004304:	2b01      	cmp	r3, #1
 8004306:	d00d      	beq.n	8004324 <HAL_SPI_Init+0x214>
 8004308:	f240 1153 	movw	r1, #339	@ 0x153
 800430c:	4804      	ldr	r0, [pc, #16]	@ (8004320 <HAL_SPI_Init+0x210>)
 800430e:	f7fc fb27 	bl	8000960 <assert_failed>
 8004312:	e007      	b.n	8004324 <HAL_SPI_Init+0x214>
 8004314:	40013000 	.word	0x40013000
 8004318:	40003800 	.word	0x40003800
 800431c:	40003c00 	.word	0x40003c00
 8004320:	08007774 	.word	0x08007774

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800432c:	d125      	bne.n	800437a <HAL_SPI_Init+0x26a>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	69db      	ldr	r3, [r3, #28]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d050      	beq.n	80043d8 <HAL_SPI_Init+0x2c8>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	69db      	ldr	r3, [r3, #28]
 800433a:	2b08      	cmp	r3, #8
 800433c:	d04c      	beq.n	80043d8 <HAL_SPI_Init+0x2c8>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	69db      	ldr	r3, [r3, #28]
 8004342:	2b10      	cmp	r3, #16
 8004344:	d048      	beq.n	80043d8 <HAL_SPI_Init+0x2c8>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	69db      	ldr	r3, [r3, #28]
 800434a:	2b18      	cmp	r3, #24
 800434c:	d044      	beq.n	80043d8 <HAL_SPI_Init+0x2c8>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	69db      	ldr	r3, [r3, #28]
 8004352:	2b20      	cmp	r3, #32
 8004354:	d040      	beq.n	80043d8 <HAL_SPI_Init+0x2c8>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	69db      	ldr	r3, [r3, #28]
 800435a:	2b28      	cmp	r3, #40	@ 0x28
 800435c:	d03c      	beq.n	80043d8 <HAL_SPI_Init+0x2c8>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	69db      	ldr	r3, [r3, #28]
 8004362:	2b30      	cmp	r3, #48	@ 0x30
 8004364:	d038      	beq.n	80043d8 <HAL_SPI_Init+0x2c8>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	69db      	ldr	r3, [r3, #28]
 800436a:	2b38      	cmp	r3, #56	@ 0x38
 800436c:	d034      	beq.n	80043d8 <HAL_SPI_Init+0x2c8>
 800436e:	f240 1157 	movw	r1, #343	@ 0x157
 8004372:	485d      	ldr	r0, [pc, #372]	@ (80044e8 <HAL_SPI_Init+0x3d8>)
 8004374:	f7fc faf4 	bl	8000960 <assert_failed>
 8004378:	e02e      	b.n	80043d8 <HAL_SPI_Init+0x2c8>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2200      	movs	r2, #0
 800437e:	61da      	str	r2, [r3, #28]
 8004380:	e02a      	b.n	80043d8 <HAL_SPI_Init+0x2c8>
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	69db      	ldr	r3, [r3, #28]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d020      	beq.n	80043cc <HAL_SPI_Init+0x2bc>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	69db      	ldr	r3, [r3, #28]
 800438e:	2b08      	cmp	r3, #8
 8004390:	d01c      	beq.n	80043cc <HAL_SPI_Init+0x2bc>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	69db      	ldr	r3, [r3, #28]
 8004396:	2b10      	cmp	r3, #16
 8004398:	d018      	beq.n	80043cc <HAL_SPI_Init+0x2bc>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	69db      	ldr	r3, [r3, #28]
 800439e:	2b18      	cmp	r3, #24
 80043a0:	d014      	beq.n	80043cc <HAL_SPI_Init+0x2bc>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	69db      	ldr	r3, [r3, #28]
 80043a6:	2b20      	cmp	r3, #32
 80043a8:	d010      	beq.n	80043cc <HAL_SPI_Init+0x2bc>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	69db      	ldr	r3, [r3, #28]
 80043ae:	2b28      	cmp	r3, #40	@ 0x28
 80043b0:	d00c      	beq.n	80043cc <HAL_SPI_Init+0x2bc>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	69db      	ldr	r3, [r3, #28]
 80043b6:	2b30      	cmp	r3, #48	@ 0x30
 80043b8:	d008      	beq.n	80043cc <HAL_SPI_Init+0x2bc>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	69db      	ldr	r3, [r3, #28]
 80043be:	2b38      	cmp	r3, #56	@ 0x38
 80043c0:	d004      	beq.n	80043cc <HAL_SPI_Init+0x2bc>
 80043c2:	f240 1161 	movw	r1, #353	@ 0x161
 80043c6:	4848      	ldr	r0, [pc, #288]	@ (80044e8 <HAL_SPI_Init+0x3d8>)
 80043c8:	f7fc faca 	bl	8000960 <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2200      	movs	r2, #0
 80043d0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2200      	movs	r2, #0
 80043d6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2200      	movs	r2, #0
 80043dc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d106      	bne.n	80043f8 <HAL_SPI_Init+0x2e8>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2200      	movs	r2, #0
 80043ee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f7fc faf8 	bl	80009e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2202      	movs	r2, #2
 80043fc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800440e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004418:	d902      	bls.n	8004420 <HAL_SPI_Init+0x310>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800441a:	2300      	movs	r3, #0
 800441c:	60fb      	str	r3, [r7, #12]
 800441e:	e002      	b.n	8004426 <HAL_SPI_Init+0x316>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004420:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004424:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	68db      	ldr	r3, [r3, #12]
 800442a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800442e:	d007      	beq.n	8004440 <HAL_SPI_Init+0x330>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	68db      	ldr	r3, [r3, #12]
 8004434:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004438:	d002      	beq.n	8004440 <HAL_SPI_Init+0x330>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2200      	movs	r2, #0
 800443e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004450:	431a      	orrs	r2, r3
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	691b      	ldr	r3, [r3, #16]
 8004456:	f003 0302 	and.w	r3, r3, #2
 800445a:	431a      	orrs	r2, r3
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	695b      	ldr	r3, [r3, #20]
 8004460:	f003 0301 	and.w	r3, r3, #1
 8004464:	431a      	orrs	r2, r3
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	699b      	ldr	r3, [r3, #24]
 800446a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800446e:	431a      	orrs	r2, r3
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	69db      	ldr	r3, [r3, #28]
 8004474:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004478:	431a      	orrs	r2, r3
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6a1b      	ldr	r3, [r3, #32]
 800447e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004482:	ea42 0103 	orr.w	r1, r2, r3
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800448a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	430a      	orrs	r2, r1
 8004494:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	699b      	ldr	r3, [r3, #24]
 800449a:	0c1b      	lsrs	r3, r3, #16
 800449c:	f003 0204 	and.w	r2, r3, #4
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044a4:	f003 0310 	and.w	r3, r3, #16
 80044a8:	431a      	orrs	r2, r3
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044ae:	f003 0308 	and.w	r3, r3, #8
 80044b2:	431a      	orrs	r2, r3
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80044bc:	ea42 0103 	orr.w	r1, r2, r3
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	430a      	orrs	r2, r1
 80044cc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2200      	movs	r2, #0
 80044d2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2201      	movs	r2, #1
 80044d8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80044dc:	2300      	movs	r3, #0
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3710      	adds	r7, #16
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	bf00      	nop
 80044e8:	08007774 	.word	0x08007774

080044ec <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b084      	sub	sp, #16
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	60f8      	str	r0, [r7, #12]
 80044f4:	60b9      	str	r1, [r7, #8]
 80044f6:	4613      	mov	r3, r2
 80044f8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d009      	beq.n	8004516 <HAL_SPI_Transmit_IT+0x2a>
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800450a:	d004      	beq.n	8004516 <HAL_SPI_Transmit_IT+0x2a>
 800450c:	f240 6144 	movw	r1, #1604	@ 0x644
 8004510:	483e      	ldr	r0, [pc, #248]	@ (800460c <HAL_SPI_Transmit_IT+0x120>)
 8004512:	f7fc fa25 	bl	8000960 <assert_failed>


  if ((pData == NULL) || (Size == 0U))
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d002      	beq.n	8004522 <HAL_SPI_Transmit_IT+0x36>
 800451c:	88fb      	ldrh	r3, [r7, #6]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d101      	bne.n	8004526 <HAL_SPI_Transmit_IT+0x3a>
  {
    return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e06d      	b.n	8004602 <HAL_SPI_Transmit_IT+0x116>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800452c:	b2db      	uxtb	r3, r3
 800452e:	2b01      	cmp	r3, #1
 8004530:	d001      	beq.n	8004536 <HAL_SPI_Transmit_IT+0x4a>
  {
    return HAL_BUSY;
 8004532:	2302      	movs	r3, #2
 8004534:	e065      	b.n	8004602 <HAL_SPI_Transmit_IT+0x116>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800453c:	2b01      	cmp	r3, #1
 800453e:	d101      	bne.n	8004544 <HAL_SPI_Transmit_IT+0x58>
 8004540:	2302      	movs	r3, #2
 8004542:	e05e      	b.n	8004602 <HAL_SPI_Transmit_IT+0x116>
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2201      	movs	r2, #1
 8004548:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2203      	movs	r2, #3
 8004550:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2200      	movs	r2, #0
 8004558:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	68ba      	ldr	r2, [r7, #8]
 800455e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	88fa      	ldrh	r2, [r7, #6]
 8004564:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	88fa      	ldrh	r2, [r7, #6]
 800456a:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2200      	movs	r2, #0
 8004570:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2200      	movs	r2, #0
 8004576:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2200      	movs	r2, #0
 800457e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxISR       = NULL;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2200      	movs	r2, #0
 8004586:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	68db      	ldr	r3, [r3, #12]
 800458c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004590:	d903      	bls.n	800459a <HAL_SPI_Transmit_IT+0xae>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	4a1e      	ldr	r2, [pc, #120]	@ (8004610 <HAL_SPI_Transmit_IT+0x124>)
 8004596:	651a      	str	r2, [r3, #80]	@ 0x50
 8004598:	e002      	b.n	80045a0 <HAL_SPI_Transmit_IT+0xb4>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	4a1d      	ldr	r2, [pc, #116]	@ (8004614 <HAL_SPI_Transmit_IT+0x128>)
 800459e:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80045a8:	d10f      	bne.n	80045ca <HAL_SPI_Transmit_IT+0xde>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80045b8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80045c8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045d4:	2b40      	cmp	r3, #64	@ 0x40
 80045d6:	d007      	beq.n	80045e8 <HAL_SPI_Transmit_IT+0xfc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80045e6:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2200      	movs	r2, #0
 80045ec:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	685a      	ldr	r2, [r3, #4]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f042 02a0 	orr.w	r2, r2, #160	@ 0xa0
 80045fe:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8004600:	2300      	movs	r3, #0
}
 8004602:	4618      	mov	r0, r3
 8004604:	3710      	adds	r7, #16
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}
 800460a:	bf00      	nop
 800460c:	08007774 	.word	0x08007774
 8004610:	0800489d 	.word	0x0800489d
 8004614:	08004857 	.word	0x08004857

08004618 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b088      	sub	sp, #32
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004630:	69bb      	ldr	r3, [r7, #24]
 8004632:	099b      	lsrs	r3, r3, #6
 8004634:	f003 0301 	and.w	r3, r3, #1
 8004638:	2b00      	cmp	r3, #0
 800463a:	d10f      	bne.n	800465c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800463c:	69bb      	ldr	r3, [r7, #24]
 800463e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004642:	2b00      	cmp	r3, #0
 8004644:	d00a      	beq.n	800465c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004646:	69fb      	ldr	r3, [r7, #28]
 8004648:	099b      	lsrs	r3, r3, #6
 800464a:	f003 0301 	and.w	r3, r3, #1
 800464e:	2b00      	cmp	r3, #0
 8004650:	d004      	beq.n	800465c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	4798      	blx	r3
    return;
 800465a:	e0d7      	b.n	800480c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800465c:	69bb      	ldr	r3, [r7, #24]
 800465e:	085b      	lsrs	r3, r3, #1
 8004660:	f003 0301 	and.w	r3, r3, #1
 8004664:	2b00      	cmp	r3, #0
 8004666:	d00a      	beq.n	800467e <HAL_SPI_IRQHandler+0x66>
 8004668:	69fb      	ldr	r3, [r7, #28]
 800466a:	09db      	lsrs	r3, r3, #7
 800466c:	f003 0301 	and.w	r3, r3, #1
 8004670:	2b00      	cmp	r3, #0
 8004672:	d004      	beq.n	800467e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	4798      	blx	r3
    return;
 800467c:	e0c6      	b.n	800480c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800467e:	69bb      	ldr	r3, [r7, #24]
 8004680:	095b      	lsrs	r3, r3, #5
 8004682:	f003 0301 	and.w	r3, r3, #1
 8004686:	2b00      	cmp	r3, #0
 8004688:	d10c      	bne.n	80046a4 <HAL_SPI_IRQHandler+0x8c>
 800468a:	69bb      	ldr	r3, [r7, #24]
 800468c:	099b      	lsrs	r3, r3, #6
 800468e:	f003 0301 	and.w	r3, r3, #1
 8004692:	2b00      	cmp	r3, #0
 8004694:	d106      	bne.n	80046a4 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004696:	69bb      	ldr	r3, [r7, #24]
 8004698:	0a1b      	lsrs	r3, r3, #8
 800469a:	f003 0301 	and.w	r3, r3, #1
 800469e:	2b00      	cmp	r3, #0
 80046a0:	f000 80b4 	beq.w	800480c <HAL_SPI_IRQHandler+0x1f4>
 80046a4:	69fb      	ldr	r3, [r7, #28]
 80046a6:	095b      	lsrs	r3, r3, #5
 80046a8:	f003 0301 	and.w	r3, r3, #1
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	f000 80ad 	beq.w	800480c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80046b2:	69bb      	ldr	r3, [r7, #24]
 80046b4:	099b      	lsrs	r3, r3, #6
 80046b6:	f003 0301 	and.w	r3, r3, #1
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d023      	beq.n	8004706 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	2b03      	cmp	r3, #3
 80046c8:	d011      	beq.n	80046ee <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046ce:	f043 0204 	orr.w	r2, r3, #4
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80046d6:	2300      	movs	r3, #0
 80046d8:	617b      	str	r3, [r7, #20]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	68db      	ldr	r3, [r3, #12]
 80046e0:	617b      	str	r3, [r7, #20]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	617b      	str	r3, [r7, #20]
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	e00b      	b.n	8004706 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80046ee:	2300      	movs	r3, #0
 80046f0:	613b      	str	r3, [r7, #16]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	68db      	ldr	r3, [r3, #12]
 80046f8:	613b      	str	r3, [r7, #16]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	613b      	str	r3, [r7, #16]
 8004702:	693b      	ldr	r3, [r7, #16]
        return;
 8004704:	e082      	b.n	800480c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004706:	69bb      	ldr	r3, [r7, #24]
 8004708:	095b      	lsrs	r3, r3, #5
 800470a:	f003 0301 	and.w	r3, r3, #1
 800470e:	2b00      	cmp	r3, #0
 8004710:	d014      	beq.n	800473c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004716:	f043 0201 	orr.w	r2, r3, #1
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800471e:	2300      	movs	r3, #0
 8004720:	60fb      	str	r3, [r7, #12]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	60fb      	str	r3, [r7, #12]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004738:	601a      	str	r2, [r3, #0]
 800473a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800473c:	69bb      	ldr	r3, [r7, #24]
 800473e:	0a1b      	lsrs	r3, r3, #8
 8004740:	f003 0301 	and.w	r3, r3, #1
 8004744:	2b00      	cmp	r3, #0
 8004746:	d00c      	beq.n	8004762 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800474c:	f043 0208 	orr.w	r2, r3, #8
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004754:	2300      	movs	r3, #0
 8004756:	60bb      	str	r3, [r7, #8]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	60bb      	str	r3, [r7, #8]
 8004760:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004766:	2b00      	cmp	r3, #0
 8004768:	d04f      	beq.n	800480a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	685a      	ldr	r2, [r3, #4]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004778:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2201      	movs	r2, #1
 800477e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004782:	69fb      	ldr	r3, [r7, #28]
 8004784:	f003 0302 	and.w	r3, r3, #2
 8004788:	2b00      	cmp	r3, #0
 800478a:	d104      	bne.n	8004796 <HAL_SPI_IRQHandler+0x17e>
 800478c:	69fb      	ldr	r3, [r7, #28]
 800478e:	f003 0301 	and.w	r3, r3, #1
 8004792:	2b00      	cmp	r3, #0
 8004794:	d034      	beq.n	8004800 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	685a      	ldr	r2, [r3, #4]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f022 0203 	bic.w	r2, r2, #3
 80047a4:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d011      	beq.n	80047d2 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047b2:	4a18      	ldr	r2, [pc, #96]	@ (8004814 <HAL_SPI_IRQHandler+0x1fc>)
 80047b4:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047ba:	4618      	mov	r0, r3
 80047bc:	f7fd f96e 	bl	8001a9c <HAL_DMA_Abort_IT>
 80047c0:	4603      	mov	r3, r0
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d005      	beq.n	80047d2 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047ca:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d016      	beq.n	8004808 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047de:	4a0d      	ldr	r2, [pc, #52]	@ (8004814 <HAL_SPI_IRQHandler+0x1fc>)
 80047e0:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047e6:	4618      	mov	r0, r3
 80047e8:	f7fd f958 	bl	8001a9c <HAL_DMA_Abort_IT>
 80047ec:	4603      	mov	r3, r0
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d00a      	beq.n	8004808 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047f6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 80047fe:	e003      	b.n	8004808 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	f000 f809 	bl	8004818 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004806:	e000      	b.n	800480a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8004808:	bf00      	nop
    return;
 800480a:	bf00      	nop
  }
}
 800480c:	3720      	adds	r7, #32
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}
 8004812:	bf00      	nop
 8004814:	0800482d 	.word	0x0800482d

08004818 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004818:	b480      	push	{r7}
 800481a:	b083      	sub	sp, #12
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004820:	bf00      	nop
 8004822:	370c      	adds	r7, #12
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr

0800482c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b084      	sub	sp, #16
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004838:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2200      	movs	r2, #0
 800483e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2200      	movs	r2, #0
 8004846:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004848:	68f8      	ldr	r0, [r7, #12]
 800484a:	f7ff ffe5 	bl	8004818 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800484e:	bf00      	nop
 8004850:	3710      	adds	r7, #16
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}

08004856 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004856:	b580      	push	{r7, lr}
 8004858:	b082      	sub	sp, #8
 800485a:	af00      	add	r7, sp, #0
 800485c:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	330c      	adds	r3, #12
 8004868:	7812      	ldrb	r2, [r2, #0]
 800486a:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004870:	1c5a      	adds	r2, r3, #1
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800487a:	b29b      	uxth	r3, r3
 800487c:	3b01      	subs	r3, #1
 800487e:	b29a      	uxth	r2, r3
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	87da      	strh	r2, [r3, #62]	@ 0x3e

  if (hspi->TxXferCount == 0U)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004888:	b29b      	uxth	r3, r3
 800488a:	2b00      	cmp	r3, #0
 800488c:	d102      	bne.n	8004894 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f000 f98a 	bl	8004ba8 <SPI_CloseTx_ISR>
  }
}
 8004894:	bf00      	nop
 8004896:	3708      	adds	r7, #8
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}

0800489c <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b082      	sub	sp, #8
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048a8:	881a      	ldrh	r2, [r3, #0]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048b4:	1c9a      	adds	r2, r3, #2
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80048be:	b29b      	uxth	r3, r3
 80048c0:	3b01      	subs	r3, #1
 80048c2:	b29a      	uxth	r2, r3
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	87da      	strh	r2, [r3, #62]	@ 0x3e

  if (hspi->TxXferCount == 0U)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d102      	bne.n	80048d8 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f000 f968 	bl	8004ba8 <SPI_CloseTx_ISR>
  }
}
 80048d8:	bf00      	nop
 80048da:	3708      	adds	r7, #8
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}

080048e0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b088      	sub	sp, #32
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	60f8      	str	r0, [r7, #12]
 80048e8:	60b9      	str	r1, [r7, #8]
 80048ea:	603b      	str	r3, [r7, #0]
 80048ec:	4613      	mov	r3, r2
 80048ee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80048f0:	f7fc fdd0 	bl	8001494 <HAL_GetTick>
 80048f4:	4602      	mov	r2, r0
 80048f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048f8:	1a9b      	subs	r3, r3, r2
 80048fa:	683a      	ldr	r2, [r7, #0]
 80048fc:	4413      	add	r3, r2
 80048fe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004900:	f7fc fdc8 	bl	8001494 <HAL_GetTick>
 8004904:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004906:	4b39      	ldr	r3, [pc, #228]	@ (80049ec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	015b      	lsls	r3, r3, #5
 800490c:	0d1b      	lsrs	r3, r3, #20
 800490e:	69fa      	ldr	r2, [r7, #28]
 8004910:	fb02 f303 	mul.w	r3, r2, r3
 8004914:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004916:	e054      	b.n	80049c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800491e:	d050      	beq.n	80049c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004920:	f7fc fdb8 	bl	8001494 <HAL_GetTick>
 8004924:	4602      	mov	r2, r0
 8004926:	69bb      	ldr	r3, [r7, #24]
 8004928:	1ad3      	subs	r3, r2, r3
 800492a:	69fa      	ldr	r2, [r7, #28]
 800492c:	429a      	cmp	r2, r3
 800492e:	d902      	bls.n	8004936 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004930:	69fb      	ldr	r3, [r7, #28]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d13d      	bne.n	80049b2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	685a      	ldr	r2, [r3, #4]
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004944:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800494e:	d111      	bne.n	8004974 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004958:	d004      	beq.n	8004964 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004962:	d107      	bne.n	8004974 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	681a      	ldr	r2, [r3, #0]
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004972:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004978:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800497c:	d10f      	bne.n	800499e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800498c:	601a      	str	r2, [r3, #0]
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800499c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2201      	movs	r2, #1
 80049a2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2200      	movs	r2, #0
 80049aa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80049ae:	2303      	movs	r3, #3
 80049b0:	e017      	b.n	80049e2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d101      	bne.n	80049bc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80049b8:	2300      	movs	r3, #0
 80049ba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	3b01      	subs	r3, #1
 80049c0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	689a      	ldr	r2, [r3, #8]
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	4013      	ands	r3, r2
 80049cc:	68ba      	ldr	r2, [r7, #8]
 80049ce:	429a      	cmp	r2, r3
 80049d0:	bf0c      	ite	eq
 80049d2:	2301      	moveq	r3, #1
 80049d4:	2300      	movne	r3, #0
 80049d6:	b2db      	uxtb	r3, r3
 80049d8:	461a      	mov	r2, r3
 80049da:	79fb      	ldrb	r3, [r7, #7]
 80049dc:	429a      	cmp	r2, r3
 80049de:	d19b      	bne.n	8004918 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80049e0:	2300      	movs	r3, #0
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	3720      	adds	r7, #32
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}
 80049ea:	bf00      	nop
 80049ec:	20000008 	.word	0x20000008

080049f0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b08a      	sub	sp, #40	@ 0x28
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	60f8      	str	r0, [r7, #12]
 80049f8:	60b9      	str	r1, [r7, #8]
 80049fa:	607a      	str	r2, [r7, #4]
 80049fc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80049fe:	2300      	movs	r3, #0
 8004a00:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004a02:	f7fc fd47 	bl	8001494 <HAL_GetTick>
 8004a06:	4602      	mov	r2, r0
 8004a08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a0a:	1a9b      	subs	r3, r3, r2
 8004a0c:	683a      	ldr	r2, [r7, #0]
 8004a0e:	4413      	add	r3, r2
 8004a10:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8004a12:	f7fc fd3f 	bl	8001494 <HAL_GetTick>
 8004a16:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	330c      	adds	r3, #12
 8004a1e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004a20:	4b3d      	ldr	r3, [pc, #244]	@ (8004b18 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	4613      	mov	r3, r2
 8004a26:	009b      	lsls	r3, r3, #2
 8004a28:	4413      	add	r3, r2
 8004a2a:	00da      	lsls	r2, r3, #3
 8004a2c:	1ad3      	subs	r3, r2, r3
 8004a2e:	0d1b      	lsrs	r3, r3, #20
 8004a30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a32:	fb02 f303 	mul.w	r3, r2, r3
 8004a36:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004a38:	e060      	b.n	8004afc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004a40:	d107      	bne.n	8004a52 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d104      	bne.n	8004a52 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004a48:	69fb      	ldr	r3, [r7, #28]
 8004a4a:	781b      	ldrb	r3, [r3, #0]
 8004a4c:	b2db      	uxtb	r3, r3
 8004a4e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004a50:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a58:	d050      	beq.n	8004afc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004a5a:	f7fc fd1b 	bl	8001494 <HAL_GetTick>
 8004a5e:	4602      	mov	r2, r0
 8004a60:	6a3b      	ldr	r3, [r7, #32]
 8004a62:	1ad3      	subs	r3, r2, r3
 8004a64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a66:	429a      	cmp	r2, r3
 8004a68:	d902      	bls.n	8004a70 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d13d      	bne.n	8004aec <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	685a      	ldr	r2, [r3, #4]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004a7e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004a88:	d111      	bne.n	8004aae <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a92:	d004      	beq.n	8004a9e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a9c:	d107      	bne.n	8004aae <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004aac:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ab2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ab6:	d10f      	bne.n	8004ad8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004ac6:	601a      	str	r2, [r3, #0]
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004ad6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2201      	movs	r2, #1
 8004adc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004ae8:	2303      	movs	r3, #3
 8004aea:	e010      	b.n	8004b0e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004aec:	69bb      	ldr	r3, [r7, #24]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d101      	bne.n	8004af6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004af2:	2300      	movs	r3, #0
 8004af4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8004af6:	69bb      	ldr	r3, [r7, #24]
 8004af8:	3b01      	subs	r3, #1
 8004afa:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	689a      	ldr	r2, [r3, #8]
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	4013      	ands	r3, r2
 8004b06:	687a      	ldr	r2, [r7, #4]
 8004b08:	429a      	cmp	r2, r3
 8004b0a:	d196      	bne.n	8004a3a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004b0c:	2300      	movs	r3, #0
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	3728      	adds	r7, #40	@ 0x28
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}
 8004b16:	bf00      	nop
 8004b18:	20000008 	.word	0x20000008

08004b1c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b086      	sub	sp, #24
 8004b20:	af02      	add	r7, sp, #8
 8004b22:	60f8      	str	r0, [r7, #12]
 8004b24:	60b9      	str	r1, [r7, #8]
 8004b26:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	9300      	str	r3, [sp, #0]
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8004b34:	68f8      	ldr	r0, [r7, #12]
 8004b36:	f7ff ff5b 	bl	80049f0 <SPI_WaitFifoStateUntilTimeout>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d007      	beq.n	8004b50 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b44:	f043 0220 	orr.w	r2, r3, #32
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004b4c:	2303      	movs	r3, #3
 8004b4e:	e027      	b.n	8004ba0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	9300      	str	r3, [sp, #0]
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	2200      	movs	r2, #0
 8004b58:	2180      	movs	r1, #128	@ 0x80
 8004b5a:	68f8      	ldr	r0, [r7, #12]
 8004b5c:	f7ff fec0 	bl	80048e0 <SPI_WaitFlagStateUntilTimeout>
 8004b60:	4603      	mov	r3, r0
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d007      	beq.n	8004b76 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b6a:	f043 0220 	orr.w	r2, r3, #32
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004b72:	2303      	movs	r3, #3
 8004b74:	e014      	b.n	8004ba0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	9300      	str	r3, [sp, #0]
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004b82:	68f8      	ldr	r0, [r7, #12]
 8004b84:	f7ff ff34 	bl	80049f0 <SPI_WaitFifoStateUntilTimeout>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d007      	beq.n	8004b9e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b92:	f043 0220 	orr.w	r2, r3, #32
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004b9a:	2303      	movs	r3, #3
 8004b9c:	e000      	b.n	8004ba0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004b9e:	2300      	movs	r3, #0
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3710      	adds	r7, #16
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}

08004ba8 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b084      	sub	sp, #16
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004bb0:	f7fc fc70 	bl	8001494 <HAL_GetTick>
 8004bb4:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	685a      	ldr	r2, [r3, #4]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004bc4:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004bc6:	68fa      	ldr	r2, [r7, #12]
 8004bc8:	2164      	movs	r1, #100	@ 0x64
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f7ff ffa6 	bl	8004b1c <SPI_EndRxTxTransaction>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d005      	beq.n	8004be2 <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004bda:	f043 0220 	orr.w	r2, r3, #32
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	689b      	ldr	r3, [r3, #8]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d10a      	bne.n	8004c00 <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004bea:	2300      	movs	r3, #0
 8004bec:	60bb      	str	r3, [r7, #8]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	60bb      	str	r3, [r7, #8]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	60bb      	str	r3, [r7, #8]
 8004bfe:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2201      	movs	r2, #1
 8004c04:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d003      	beq.n	8004c18 <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8004c10:	6878      	ldr	r0, [r7, #4]
 8004c12:	f7ff fe01 	bl	8004818 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8004c16:	e002      	b.n	8004c1e <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	f7fb fe6d 	bl	80008f8 <HAL_SPI_TxCpltCallback>
}
 8004c1e:	bf00      	nop
 8004c20:	3710      	adds	r7, #16
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}
	...

08004c28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b082      	sub	sp, #8
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d101      	bne.n	8004c3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	e0e6      	b.n	8004e08 <HAL_TIM_Base_Init+0x1e0>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a74      	ldr	r2, [pc, #464]	@ (8004e10 <HAL_TIM_Base_Init+0x1e8>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d036      	beq.n	8004cb2 <HAL_TIM_Base_Init+0x8a>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c4c:	d031      	beq.n	8004cb2 <HAL_TIM_Base_Init+0x8a>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a70      	ldr	r2, [pc, #448]	@ (8004e14 <HAL_TIM_Base_Init+0x1ec>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d02c      	beq.n	8004cb2 <HAL_TIM_Base_Init+0x8a>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a6e      	ldr	r2, [pc, #440]	@ (8004e18 <HAL_TIM_Base_Init+0x1f0>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d027      	beq.n	8004cb2 <HAL_TIM_Base_Init+0x8a>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a6d      	ldr	r2, [pc, #436]	@ (8004e1c <HAL_TIM_Base_Init+0x1f4>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d022      	beq.n	8004cb2 <HAL_TIM_Base_Init+0x8a>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a6b      	ldr	r2, [pc, #428]	@ (8004e20 <HAL_TIM_Base_Init+0x1f8>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d01d      	beq.n	8004cb2 <HAL_TIM_Base_Init+0x8a>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a6a      	ldr	r2, [pc, #424]	@ (8004e24 <HAL_TIM_Base_Init+0x1fc>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d018      	beq.n	8004cb2 <HAL_TIM_Base_Init+0x8a>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a68      	ldr	r2, [pc, #416]	@ (8004e28 <HAL_TIM_Base_Init+0x200>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d013      	beq.n	8004cb2 <HAL_TIM_Base_Init+0x8a>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a67      	ldr	r2, [pc, #412]	@ (8004e2c <HAL_TIM_Base_Init+0x204>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d00e      	beq.n	8004cb2 <HAL_TIM_Base_Init+0x8a>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a65      	ldr	r2, [pc, #404]	@ (8004e30 <HAL_TIM_Base_Init+0x208>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d009      	beq.n	8004cb2 <HAL_TIM_Base_Init+0x8a>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a64      	ldr	r2, [pc, #400]	@ (8004e34 <HAL_TIM_Base_Init+0x20c>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d004      	beq.n	8004cb2 <HAL_TIM_Base_Init+0x8a>
 8004ca8:	f44f 718b 	mov.w	r1, #278	@ 0x116
 8004cac:	4862      	ldr	r0, [pc, #392]	@ (8004e38 <HAL_TIM_Base_Init+0x210>)
 8004cae:	f7fb fe57 	bl	8000960 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d014      	beq.n	8004ce4 <HAL_TIM_Base_Init+0xbc>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	2b10      	cmp	r3, #16
 8004cc0:	d010      	beq.n	8004ce4 <HAL_TIM_Base_Init+0xbc>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	2b20      	cmp	r3, #32
 8004cc8:	d00c      	beq.n	8004ce4 <HAL_TIM_Base_Init+0xbc>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	2b40      	cmp	r3, #64	@ 0x40
 8004cd0:	d008      	beq.n	8004ce4 <HAL_TIM_Base_Init+0xbc>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	2b60      	cmp	r3, #96	@ 0x60
 8004cd8:	d004      	beq.n	8004ce4 <HAL_TIM_Base_Init+0xbc>
 8004cda:	f240 1117 	movw	r1, #279	@ 0x117
 8004cde:	4856      	ldr	r0, [pc, #344]	@ (8004e38 <HAL_TIM_Base_Init+0x210>)
 8004ce0:	f7fb fe3e 	bl	8000960 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	691b      	ldr	r3, [r3, #16]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d00e      	beq.n	8004d0a <HAL_TIM_Base_Init+0xe2>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	691b      	ldr	r3, [r3, #16]
 8004cf0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004cf4:	d009      	beq.n	8004d0a <HAL_TIM_Base_Init+0xe2>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	691b      	ldr	r3, [r3, #16]
 8004cfa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004cfe:	d004      	beq.n	8004d0a <HAL_TIM_Base_Init+0xe2>
 8004d00:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8004d04:	484c      	ldr	r0, [pc, #304]	@ (8004e38 <HAL_TIM_Base_Init+0x210>)
 8004d06:	f7fb fe2b 	bl	8000960 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d12:	d004      	beq.n	8004d1e <HAL_TIM_Base_Init+0xf6>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a40      	ldr	r2, [pc, #256]	@ (8004e1c <HAL_TIM_Base_Init+0x1f4>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d107      	bne.n	8004d2e <HAL_TIM_Base_Init+0x106>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	68db      	ldr	r3, [r3, #12]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	bf14      	ite	ne
 8004d26:	2301      	movne	r3, #1
 8004d28:	2300      	moveq	r3, #0
 8004d2a:	b2db      	uxtb	r3, r3
 8004d2c:	e00e      	b.n	8004d4c <HAL_TIM_Base_Init+0x124>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	68db      	ldr	r3, [r3, #12]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d006      	beq.n	8004d44 <HAL_TIM_Base_Init+0x11c>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	68db      	ldr	r3, [r3, #12]
 8004d3a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d3e:	d201      	bcs.n	8004d44 <HAL_TIM_Base_Init+0x11c>
 8004d40:	2301      	movs	r3, #1
 8004d42:	e000      	b.n	8004d46 <HAL_TIM_Base_Init+0x11e>
 8004d44:	2300      	movs	r3, #0
 8004d46:	f003 0301 	and.w	r3, r3, #1
 8004d4a:	b2db      	uxtb	r3, r3
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d104      	bne.n	8004d5a <HAL_TIM_Base_Init+0x132>
 8004d50:	f240 1119 	movw	r1, #281	@ 0x119
 8004d54:	4838      	ldr	r0, [pc, #224]	@ (8004e38 <HAL_TIM_Base_Init+0x210>)
 8004d56:	f7fb fe03 	bl	8000960 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	699b      	ldr	r3, [r3, #24]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d008      	beq.n	8004d74 <HAL_TIM_Base_Init+0x14c>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	699b      	ldr	r3, [r3, #24]
 8004d66:	2b80      	cmp	r3, #128	@ 0x80
 8004d68:	d004      	beq.n	8004d74 <HAL_TIM_Base_Init+0x14c>
 8004d6a:	f44f 718d 	mov.w	r1, #282	@ 0x11a
 8004d6e:	4832      	ldr	r0, [pc, #200]	@ (8004e38 <HAL_TIM_Base_Init+0x210>)
 8004d70:	f7fb fdf6 	bl	8000960 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d7a:	b2db      	uxtb	r3, r3
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d106      	bne.n	8004d8e <HAL_TIM_Base_Init+0x166>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2200      	movs	r2, #0
 8004d84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d88:	6878      	ldr	r0, [r7, #4]
 8004d8a:	f7fc fa21 	bl	80011d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2202      	movs	r2, #2
 8004d92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	3304      	adds	r3, #4
 8004d9e:	4619      	mov	r1, r3
 8004da0:	4610      	mov	r0, r2
 8004da2:	f000 fb47 	bl	8005434 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2201      	movs	r2, #1
 8004daa:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2201      	movs	r2, #1
 8004db2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2201      	movs	r2, #1
 8004dba:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2201      	movs	r2, #1
 8004dc2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2201      	movs	r2, #1
 8004dca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2201      	movs	r2, #1
 8004dda:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2201      	movs	r2, #1
 8004de2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2201      	movs	r2, #1
 8004dea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2201      	movs	r2, #1
 8004df2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2201      	movs	r2, #1
 8004dfa:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2201      	movs	r2, #1
 8004e02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004e06:	2300      	movs	r3, #0
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	3708      	adds	r7, #8
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd80      	pop	{r7, pc}
 8004e10:	40012c00 	.word	0x40012c00
 8004e14:	40000400 	.word	0x40000400
 8004e18:	40000800 	.word	0x40000800
 8004e1c:	40000c00 	.word	0x40000c00
 8004e20:	40001000 	.word	0x40001000
 8004e24:	40001400 	.word	0x40001400
 8004e28:	40013400 	.word	0x40013400
 8004e2c:	40014000 	.word	0x40014000
 8004e30:	40014400 	.word	0x40014400
 8004e34:	40014800 	.word	0x40014800
 8004e38:	080077ac 	.word	0x080077ac

08004e3c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b086      	sub	sp, #24
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
 8004e44:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d101      	bne.n	8004e50 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	e1b0      	b.n	80051b2 <HAL_TIM_Encoder_Init+0x376>
  }

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a7f      	ldr	r2, [pc, #508]	@ (8005054 <HAL_TIM_Encoder_Init+0x218>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d01d      	beq.n	8004e96 <HAL_TIM_Encoder_Init+0x5a>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e62:	d018      	beq.n	8004e96 <HAL_TIM_Encoder_Init+0x5a>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a7b      	ldr	r2, [pc, #492]	@ (8005058 <HAL_TIM_Encoder_Init+0x21c>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d013      	beq.n	8004e96 <HAL_TIM_Encoder_Init+0x5a>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a7a      	ldr	r2, [pc, #488]	@ (800505c <HAL_TIM_Encoder_Init+0x220>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d00e      	beq.n	8004e96 <HAL_TIM_Encoder_Init+0x5a>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a78      	ldr	r2, [pc, #480]	@ (8005060 <HAL_TIM_Encoder_Init+0x224>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d009      	beq.n	8004e96 <HAL_TIM_Encoder_Init+0x5a>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a77      	ldr	r2, [pc, #476]	@ (8005064 <HAL_TIM_Encoder_Init+0x228>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d004      	beq.n	8004e96 <HAL_TIM_Encoder_Init+0x5a>
 8004e8c:	f640 31e3 	movw	r1, #3043	@ 0xbe3
 8004e90:	4875      	ldr	r0, [pc, #468]	@ (8005068 <HAL_TIM_Encoder_Init+0x22c>)
 8004e92:	f7fb fd65 	bl	8000960 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	689b      	ldr	r3, [r3, #8]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d014      	beq.n	8004ec8 <HAL_TIM_Encoder_Init+0x8c>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	2b10      	cmp	r3, #16
 8004ea4:	d010      	beq.n	8004ec8 <HAL_TIM_Encoder_Init+0x8c>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	2b20      	cmp	r3, #32
 8004eac:	d00c      	beq.n	8004ec8 <HAL_TIM_Encoder_Init+0x8c>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	2b40      	cmp	r3, #64	@ 0x40
 8004eb4:	d008      	beq.n	8004ec8 <HAL_TIM_Encoder_Init+0x8c>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	2b60      	cmp	r3, #96	@ 0x60
 8004ebc:	d004      	beq.n	8004ec8 <HAL_TIM_Encoder_Init+0x8c>
 8004ebe:	f640 31e4 	movw	r1, #3044	@ 0xbe4
 8004ec2:	4869      	ldr	r0, [pc, #420]	@ (8005068 <HAL_TIM_Encoder_Init+0x22c>)
 8004ec4:	f7fb fd4c 	bl	8000960 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	691b      	ldr	r3, [r3, #16]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d00e      	beq.n	8004eee <HAL_TIM_Encoder_Init+0xb2>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	691b      	ldr	r3, [r3, #16]
 8004ed4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ed8:	d009      	beq.n	8004eee <HAL_TIM_Encoder_Init+0xb2>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	691b      	ldr	r3, [r3, #16]
 8004ede:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ee2:	d004      	beq.n	8004eee <HAL_TIM_Encoder_Init+0xb2>
 8004ee4:	f640 31e5 	movw	r1, #3045	@ 0xbe5
 8004ee8:	485f      	ldr	r0, [pc, #380]	@ (8005068 <HAL_TIM_Encoder_Init+0x22c>)
 8004eea:	f7fb fd39 	bl	8000960 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	699b      	ldr	r3, [r3, #24]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d008      	beq.n	8004f08 <HAL_TIM_Encoder_Init+0xcc>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	699b      	ldr	r3, [r3, #24]
 8004efa:	2b80      	cmp	r3, #128	@ 0x80
 8004efc:	d004      	beq.n	8004f08 <HAL_TIM_Encoder_Init+0xcc>
 8004efe:	f640 31e6 	movw	r1, #3046	@ 0xbe6
 8004f02:	4859      	ldr	r0, [pc, #356]	@ (8005068 <HAL_TIM_Encoder_Init+0x22c>)
 8004f04:	f7fb fd2c 	bl	8000960 <assert_failed>
  assert_param(IS_TIM_ENCODER_MODE(sConfig->EncoderMode));
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d00c      	beq.n	8004f2a <HAL_TIM_Encoder_Init+0xee>
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	2b02      	cmp	r3, #2
 8004f16:	d008      	beq.n	8004f2a <HAL_TIM_Encoder_Init+0xee>
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	2b03      	cmp	r3, #3
 8004f1e:	d004      	beq.n	8004f2a <HAL_TIM_Encoder_Init+0xee>
 8004f20:	f640 31e7 	movw	r1, #3047	@ 0xbe7
 8004f24:	4850      	ldr	r0, [pc, #320]	@ (8005068 <HAL_TIM_Encoder_Init+0x22c>)
 8004f26:	f7fb fd1b 	bl	8000960 <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC1Selection));
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	d00c      	beq.n	8004f4c <HAL_TIM_Encoder_Init+0x110>
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	2b02      	cmp	r3, #2
 8004f38:	d008      	beq.n	8004f4c <HAL_TIM_Encoder_Init+0x110>
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	689b      	ldr	r3, [r3, #8]
 8004f3e:	2b03      	cmp	r3, #3
 8004f40:	d004      	beq.n	8004f4c <HAL_TIM_Encoder_Init+0x110>
 8004f42:	f640 31e8 	movw	r1, #3048	@ 0xbe8
 8004f46:	4848      	ldr	r0, [pc, #288]	@ (8005068 <HAL_TIM_Encoder_Init+0x22c>)
 8004f48:	f7fb fd0a 	bl	8000960 <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC2Selection));
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	699b      	ldr	r3, [r3, #24]
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d00c      	beq.n	8004f6e <HAL_TIM_Encoder_Init+0x132>
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	699b      	ldr	r3, [r3, #24]
 8004f58:	2b02      	cmp	r3, #2
 8004f5a:	d008      	beq.n	8004f6e <HAL_TIM_Encoder_Init+0x132>
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	699b      	ldr	r3, [r3, #24]
 8004f60:	2b03      	cmp	r3, #3
 8004f62:	d004      	beq.n	8004f6e <HAL_TIM_Encoder_Init+0x132>
 8004f64:	f640 31e9 	movw	r1, #3049	@ 0xbe9
 8004f68:	483f      	ldr	r0, [pc, #252]	@ (8005068 <HAL_TIM_Encoder_Init+0x22c>)
 8004f6a:	f7fb fcf9 	bl	8000960 <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC1Polarity));
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d008      	beq.n	8004f88 <HAL_TIM_Encoder_Init+0x14c>
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	2b02      	cmp	r3, #2
 8004f7c:	d004      	beq.n	8004f88 <HAL_TIM_Encoder_Init+0x14c>
 8004f7e:	f640 31ea 	movw	r1, #3050	@ 0xbea
 8004f82:	4839      	ldr	r0, [pc, #228]	@ (8005068 <HAL_TIM_Encoder_Init+0x22c>)
 8004f84:	f7fb fcec 	bl	8000960 <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC2Polarity));
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	695b      	ldr	r3, [r3, #20]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d008      	beq.n	8004fa2 <HAL_TIM_Encoder_Init+0x166>
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	695b      	ldr	r3, [r3, #20]
 8004f94:	2b02      	cmp	r3, #2
 8004f96:	d004      	beq.n	8004fa2 <HAL_TIM_Encoder_Init+0x166>
 8004f98:	f640 31eb 	movw	r1, #3051	@ 0xbeb
 8004f9c:	4832      	ldr	r0, [pc, #200]	@ (8005068 <HAL_TIM_Encoder_Init+0x22c>)
 8004f9e:	f7fb fcdf 	bl	8000960 <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	68db      	ldr	r3, [r3, #12]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d010      	beq.n	8004fcc <HAL_TIM_Encoder_Init+0x190>
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	68db      	ldr	r3, [r3, #12]
 8004fae:	2b04      	cmp	r3, #4
 8004fb0:	d00c      	beq.n	8004fcc <HAL_TIM_Encoder_Init+0x190>
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	68db      	ldr	r3, [r3, #12]
 8004fb6:	2b08      	cmp	r3, #8
 8004fb8:	d008      	beq.n	8004fcc <HAL_TIM_Encoder_Init+0x190>
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	68db      	ldr	r3, [r3, #12]
 8004fbe:	2b0c      	cmp	r3, #12
 8004fc0:	d004      	beq.n	8004fcc <HAL_TIM_Encoder_Init+0x190>
 8004fc2:	f640 31ec 	movw	r1, #3052	@ 0xbec
 8004fc6:	4828      	ldr	r0, [pc, #160]	@ (8005068 <HAL_TIM_Encoder_Init+0x22c>)
 8004fc8:	f7fb fcca 	bl	8000960 <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	69db      	ldr	r3, [r3, #28]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d010      	beq.n	8004ff6 <HAL_TIM_Encoder_Init+0x1ba>
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	69db      	ldr	r3, [r3, #28]
 8004fd8:	2b04      	cmp	r3, #4
 8004fda:	d00c      	beq.n	8004ff6 <HAL_TIM_Encoder_Init+0x1ba>
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	69db      	ldr	r3, [r3, #28]
 8004fe0:	2b08      	cmp	r3, #8
 8004fe2:	d008      	beq.n	8004ff6 <HAL_TIM_Encoder_Init+0x1ba>
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	69db      	ldr	r3, [r3, #28]
 8004fe8:	2b0c      	cmp	r3, #12
 8004fea:	d004      	beq.n	8004ff6 <HAL_TIM_Encoder_Init+0x1ba>
 8004fec:	f640 31ed 	movw	r1, #3053	@ 0xbed
 8004ff0:	481d      	ldr	r0, [pc, #116]	@ (8005068 <HAL_TIM_Encoder_Init+0x22c>)
 8004ff2:	f7fb fcb5 	bl	8000960 <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	691b      	ldr	r3, [r3, #16]
 8004ffa:	2b0f      	cmp	r3, #15
 8004ffc:	d904      	bls.n	8005008 <HAL_TIM_Encoder_Init+0x1cc>
 8004ffe:	f640 31ee 	movw	r1, #3054	@ 0xbee
 8005002:	4819      	ldr	r0, [pc, #100]	@ (8005068 <HAL_TIM_Encoder_Init+0x22c>)
 8005004:	f7fb fcac 	bl	8000960 <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	6a1b      	ldr	r3, [r3, #32]
 800500c:	2b0f      	cmp	r3, #15
 800500e:	d904      	bls.n	800501a <HAL_TIM_Encoder_Init+0x1de>
 8005010:	f640 31ef 	movw	r1, #3055	@ 0xbef
 8005014:	4814      	ldr	r0, [pc, #80]	@ (8005068 <HAL_TIM_Encoder_Init+0x22c>)
 8005016:	f7fb fca3 	bl	8000960 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005022:	d004      	beq.n	800502e <HAL_TIM_Encoder_Init+0x1f2>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a0d      	ldr	r2, [pc, #52]	@ (8005060 <HAL_TIM_Encoder_Init+0x224>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d107      	bne.n	800503e <HAL_TIM_Encoder_Init+0x202>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	68db      	ldr	r3, [r3, #12]
 8005032:	2b00      	cmp	r3, #0
 8005034:	bf14      	ite	ne
 8005036:	2301      	movne	r3, #1
 8005038:	2300      	moveq	r3, #0
 800503a:	b2db      	uxtb	r3, r3
 800503c:	e01a      	b.n	8005074 <HAL_TIM_Encoder_Init+0x238>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	68db      	ldr	r3, [r3, #12]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d012      	beq.n	800506c <HAL_TIM_Encoder_Init+0x230>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	68db      	ldr	r3, [r3, #12]
 800504a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800504e:	d20d      	bcs.n	800506c <HAL_TIM_Encoder_Init+0x230>
 8005050:	2301      	movs	r3, #1
 8005052:	e00c      	b.n	800506e <HAL_TIM_Encoder_Init+0x232>
 8005054:	40012c00 	.word	0x40012c00
 8005058:	40000400 	.word	0x40000400
 800505c:	40000800 	.word	0x40000800
 8005060:	40000c00 	.word	0x40000c00
 8005064:	40013400 	.word	0x40013400
 8005068:	080077ac 	.word	0x080077ac
 800506c:	2300      	movs	r3, #0
 800506e:	f003 0301 	and.w	r3, r3, #1
 8005072:	b2db      	uxtb	r3, r3
 8005074:	2b00      	cmp	r3, #0
 8005076:	d104      	bne.n	8005082 <HAL_TIM_Encoder_Init+0x246>
 8005078:	f44f 613f 	mov.w	r1, #3056	@ 0xbf0
 800507c:	484f      	ldr	r0, [pc, #316]	@ (80051bc <HAL_TIM_Encoder_Init+0x380>)
 800507e:	f7fb fc6f 	bl	8000960 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005088:	b2db      	uxtb	r3, r3
 800508a:	2b00      	cmp	r3, #0
 800508c:	d106      	bne.n	800509c <HAL_TIM_Encoder_Init+0x260>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2200      	movs	r2, #0
 8005092:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	f7fb ffd8 	bl	800104c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2202      	movs	r2, #2
 80050a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	687a      	ldr	r2, [r7, #4]
 80050ac:	6812      	ldr	r2, [r2, #0]
 80050ae:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 80050b2:	f023 0307 	bic.w	r3, r3, #7
 80050b6:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681a      	ldr	r2, [r3, #0]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	3304      	adds	r3, #4
 80050c0:	4619      	mov	r1, r3
 80050c2:	4610      	mov	r0, r2
 80050c4:	f000 f9b6 	bl	8005434 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	699b      	ldr	r3, [r3, #24]
 80050d6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	6a1b      	ldr	r3, [r3, #32]
 80050de:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	697a      	ldr	r2, [r7, #20]
 80050e6:	4313      	orrs	r3, r2
 80050e8:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050f0:	f023 0303 	bic.w	r3, r3, #3
 80050f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	689a      	ldr	r2, [r3, #8]
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	699b      	ldr	r3, [r3, #24]
 80050fe:	021b      	lsls	r3, r3, #8
 8005100:	4313      	orrs	r3, r2
 8005102:	693a      	ldr	r2, [r7, #16]
 8005104:	4313      	orrs	r3, r2
 8005106:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800510e:	f023 030c 	bic.w	r3, r3, #12
 8005112:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800511a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800511e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	68da      	ldr	r2, [r3, #12]
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	69db      	ldr	r3, [r3, #28]
 8005128:	021b      	lsls	r3, r3, #8
 800512a:	4313      	orrs	r3, r2
 800512c:	693a      	ldr	r2, [r7, #16]
 800512e:	4313      	orrs	r3, r2
 8005130:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	691b      	ldr	r3, [r3, #16]
 8005136:	011a      	lsls	r2, r3, #4
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	6a1b      	ldr	r3, [r3, #32]
 800513c:	031b      	lsls	r3, r3, #12
 800513e:	4313      	orrs	r3, r2
 8005140:	693a      	ldr	r2, [r7, #16]
 8005142:	4313      	orrs	r3, r2
 8005144:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800514c:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005154:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	685a      	ldr	r2, [r3, #4]
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	695b      	ldr	r3, [r3, #20]
 800515e:	011b      	lsls	r3, r3, #4
 8005160:	4313      	orrs	r3, r2
 8005162:	68fa      	ldr	r2, [r7, #12]
 8005164:	4313      	orrs	r3, r2
 8005166:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	697a      	ldr	r2, [r7, #20]
 800516e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	693a      	ldr	r2, [r7, #16]
 8005176:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	68fa      	ldr	r2, [r7, #12]
 800517e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2201      	movs	r2, #1
 8005184:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2201      	movs	r2, #1
 800518c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2201      	movs	r2, #1
 8005194:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2201      	movs	r2, #1
 800519c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2201      	movs	r2, #1
 80051a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2201      	movs	r2, #1
 80051ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80051b0:	2300      	movs	r3, #0
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3718      	adds	r7, #24
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}
 80051ba:	bf00      	nop
 80051bc:	080077ac 	.word	0x080077ac

080051c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b084      	sub	sp, #16
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	68db      	ldr	r3, [r3, #12]
 80051ce:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	691b      	ldr	r3, [r3, #16]
 80051d6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	f003 0302 	and.w	r3, r3, #2
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d020      	beq.n	8005224 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	f003 0302 	and.w	r3, r3, #2
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d01b      	beq.n	8005224 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f06f 0202 	mvn.w	r2, #2
 80051f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2201      	movs	r2, #1
 80051fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	699b      	ldr	r3, [r3, #24]
 8005202:	f003 0303 	and.w	r3, r3, #3
 8005206:	2b00      	cmp	r3, #0
 8005208:	d003      	beq.n	8005212 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f000 f8f3 	bl	80053f6 <HAL_TIM_IC_CaptureCallback>
 8005210:	e005      	b.n	800521e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f000 f8e5 	bl	80053e2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005218:	6878      	ldr	r0, [r7, #4]
 800521a:	f000 f8f6 	bl	800540a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2200      	movs	r2, #0
 8005222:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	f003 0304 	and.w	r3, r3, #4
 800522a:	2b00      	cmp	r3, #0
 800522c:	d020      	beq.n	8005270 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	f003 0304 	and.w	r3, r3, #4
 8005234:	2b00      	cmp	r3, #0
 8005236:	d01b      	beq.n	8005270 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f06f 0204 	mvn.w	r2, #4
 8005240:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2202      	movs	r2, #2
 8005246:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	699b      	ldr	r3, [r3, #24]
 800524e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005252:	2b00      	cmp	r3, #0
 8005254:	d003      	beq.n	800525e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f000 f8cd 	bl	80053f6 <HAL_TIM_IC_CaptureCallback>
 800525c:	e005      	b.n	800526a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f000 f8bf 	bl	80053e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005264:	6878      	ldr	r0, [r7, #4]
 8005266:	f000 f8d0 	bl	800540a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2200      	movs	r2, #0
 800526e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	f003 0308 	and.w	r3, r3, #8
 8005276:	2b00      	cmp	r3, #0
 8005278:	d020      	beq.n	80052bc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	f003 0308 	and.w	r3, r3, #8
 8005280:	2b00      	cmp	r3, #0
 8005282:	d01b      	beq.n	80052bc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f06f 0208 	mvn.w	r2, #8
 800528c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2204      	movs	r2, #4
 8005292:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	69db      	ldr	r3, [r3, #28]
 800529a:	f003 0303 	and.w	r3, r3, #3
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d003      	beq.n	80052aa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f000 f8a7 	bl	80053f6 <HAL_TIM_IC_CaptureCallback>
 80052a8:	e005      	b.n	80052b6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f000 f899 	bl	80053e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052b0:	6878      	ldr	r0, [r7, #4]
 80052b2:	f000 f8aa 	bl	800540a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2200      	movs	r2, #0
 80052ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	f003 0310 	and.w	r3, r3, #16
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d020      	beq.n	8005308 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	f003 0310 	and.w	r3, r3, #16
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d01b      	beq.n	8005308 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f06f 0210 	mvn.w	r2, #16
 80052d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2208      	movs	r2, #8
 80052de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	69db      	ldr	r3, [r3, #28]
 80052e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d003      	beq.n	80052f6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f000 f881 	bl	80053f6 <HAL_TIM_IC_CaptureCallback>
 80052f4:	e005      	b.n	8005302 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f000 f873 	bl	80053e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052fc:	6878      	ldr	r0, [r7, #4]
 80052fe:	f000 f884 	bl	800540a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2200      	movs	r2, #0
 8005306:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	f003 0301 	and.w	r3, r3, #1
 800530e:	2b00      	cmp	r3, #0
 8005310:	d00c      	beq.n	800532c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	f003 0301 	and.w	r3, r3, #1
 8005318:	2b00      	cmp	r3, #0
 800531a:	d007      	beq.n	800532c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f06f 0201 	mvn.w	r2, #1
 8005324:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f000 f851 	bl	80053ce <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005332:	2b00      	cmp	r3, #0
 8005334:	d104      	bne.n	8005340 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800533c:	2b00      	cmp	r3, #0
 800533e:	d00c      	beq.n	800535a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005346:	2b00      	cmp	r3, #0
 8005348:	d007      	beq.n	800535a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005352:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	f000 fa73 	bl	8005840 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005360:	2b00      	cmp	r3, #0
 8005362:	d00c      	beq.n	800537e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800536a:	2b00      	cmp	r3, #0
 800536c:	d007      	beq.n	800537e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005376:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	f000 fa6b 	bl	8005854 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005384:	2b00      	cmp	r3, #0
 8005386:	d00c      	beq.n	80053a2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800538e:	2b00      	cmp	r3, #0
 8005390:	d007      	beq.n	80053a2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800539a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800539c:	6878      	ldr	r0, [r7, #4]
 800539e:	f000 f83e 	bl	800541e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	f003 0320 	and.w	r3, r3, #32
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d00c      	beq.n	80053c6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	f003 0320 	and.w	r3, r3, #32
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d007      	beq.n	80053c6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f06f 0220 	mvn.w	r2, #32
 80053be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	f000 fa33 	bl	800582c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80053c6:	bf00      	nop
 80053c8:	3710      	adds	r7, #16
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}

080053ce <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80053ce:	b480      	push	{r7}
 80053d0:	b083      	sub	sp, #12
 80053d2:	af00      	add	r7, sp, #0
 80053d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80053d6:	bf00      	nop
 80053d8:	370c      	adds	r7, #12
 80053da:	46bd      	mov	sp, r7
 80053dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e0:	4770      	bx	lr

080053e2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80053e2:	b480      	push	{r7}
 80053e4:	b083      	sub	sp, #12
 80053e6:	af00      	add	r7, sp, #0
 80053e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80053ea:	bf00      	nop
 80053ec:	370c      	adds	r7, #12
 80053ee:	46bd      	mov	sp, r7
 80053f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f4:	4770      	bx	lr

080053f6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80053f6:	b480      	push	{r7}
 80053f8:	b083      	sub	sp, #12
 80053fa:	af00      	add	r7, sp, #0
 80053fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80053fe:	bf00      	nop
 8005400:	370c      	adds	r7, #12
 8005402:	46bd      	mov	sp, r7
 8005404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005408:	4770      	bx	lr

0800540a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800540a:	b480      	push	{r7}
 800540c:	b083      	sub	sp, #12
 800540e:	af00      	add	r7, sp, #0
 8005410:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005412:	bf00      	nop
 8005414:	370c      	adds	r7, #12
 8005416:	46bd      	mov	sp, r7
 8005418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541c:	4770      	bx	lr

0800541e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800541e:	b480      	push	{r7}
 8005420:	b083      	sub	sp, #12
 8005422:	af00      	add	r7, sp, #0
 8005424:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005426:	bf00      	nop
 8005428:	370c      	adds	r7, #12
 800542a:	46bd      	mov	sp, r7
 800542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005430:	4770      	bx	lr
	...

08005434 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005434:	b480      	push	{r7}
 8005436:	b085      	sub	sp, #20
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
 800543c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	4a46      	ldr	r2, [pc, #280]	@ (8005560 <TIM_Base_SetConfig+0x12c>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d013      	beq.n	8005474 <TIM_Base_SetConfig+0x40>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005452:	d00f      	beq.n	8005474 <TIM_Base_SetConfig+0x40>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	4a43      	ldr	r2, [pc, #268]	@ (8005564 <TIM_Base_SetConfig+0x130>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d00b      	beq.n	8005474 <TIM_Base_SetConfig+0x40>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	4a42      	ldr	r2, [pc, #264]	@ (8005568 <TIM_Base_SetConfig+0x134>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d007      	beq.n	8005474 <TIM_Base_SetConfig+0x40>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	4a41      	ldr	r2, [pc, #260]	@ (800556c <TIM_Base_SetConfig+0x138>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d003      	beq.n	8005474 <TIM_Base_SetConfig+0x40>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	4a40      	ldr	r2, [pc, #256]	@ (8005570 <TIM_Base_SetConfig+0x13c>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d108      	bne.n	8005486 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800547a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	68fa      	ldr	r2, [r7, #12]
 8005482:	4313      	orrs	r3, r2
 8005484:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	4a35      	ldr	r2, [pc, #212]	@ (8005560 <TIM_Base_SetConfig+0x12c>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d01f      	beq.n	80054ce <TIM_Base_SetConfig+0x9a>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005494:	d01b      	beq.n	80054ce <TIM_Base_SetConfig+0x9a>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	4a32      	ldr	r2, [pc, #200]	@ (8005564 <TIM_Base_SetConfig+0x130>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d017      	beq.n	80054ce <TIM_Base_SetConfig+0x9a>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	4a31      	ldr	r2, [pc, #196]	@ (8005568 <TIM_Base_SetConfig+0x134>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d013      	beq.n	80054ce <TIM_Base_SetConfig+0x9a>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	4a30      	ldr	r2, [pc, #192]	@ (800556c <TIM_Base_SetConfig+0x138>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d00f      	beq.n	80054ce <TIM_Base_SetConfig+0x9a>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	4a2f      	ldr	r2, [pc, #188]	@ (8005570 <TIM_Base_SetConfig+0x13c>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d00b      	beq.n	80054ce <TIM_Base_SetConfig+0x9a>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	4a2e      	ldr	r2, [pc, #184]	@ (8005574 <TIM_Base_SetConfig+0x140>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d007      	beq.n	80054ce <TIM_Base_SetConfig+0x9a>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	4a2d      	ldr	r2, [pc, #180]	@ (8005578 <TIM_Base_SetConfig+0x144>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d003      	beq.n	80054ce <TIM_Base_SetConfig+0x9a>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	4a2c      	ldr	r2, [pc, #176]	@ (800557c <TIM_Base_SetConfig+0x148>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d108      	bne.n	80054e0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80054d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	68db      	ldr	r3, [r3, #12]
 80054da:	68fa      	ldr	r2, [r7, #12]
 80054dc:	4313      	orrs	r3, r2
 80054de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	695b      	ldr	r3, [r3, #20]
 80054ea:	4313      	orrs	r3, r2
 80054ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	68fa      	ldr	r2, [r7, #12]
 80054f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	689a      	ldr	r2, [r3, #8]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	681a      	ldr	r2, [r3, #0]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	4a16      	ldr	r2, [pc, #88]	@ (8005560 <TIM_Base_SetConfig+0x12c>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d00f      	beq.n	800552c <TIM_Base_SetConfig+0xf8>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	4a18      	ldr	r2, [pc, #96]	@ (8005570 <TIM_Base_SetConfig+0x13c>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d00b      	beq.n	800552c <TIM_Base_SetConfig+0xf8>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	4a17      	ldr	r2, [pc, #92]	@ (8005574 <TIM_Base_SetConfig+0x140>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d007      	beq.n	800552c <TIM_Base_SetConfig+0xf8>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	4a16      	ldr	r2, [pc, #88]	@ (8005578 <TIM_Base_SetConfig+0x144>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d003      	beq.n	800552c <TIM_Base_SetConfig+0xf8>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	4a15      	ldr	r2, [pc, #84]	@ (800557c <TIM_Base_SetConfig+0x148>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d103      	bne.n	8005534 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	691a      	ldr	r2, [r3, #16]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2201      	movs	r2, #1
 8005538:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	691b      	ldr	r3, [r3, #16]
 800553e:	f003 0301 	and.w	r3, r3, #1
 8005542:	2b01      	cmp	r3, #1
 8005544:	d105      	bne.n	8005552 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	691b      	ldr	r3, [r3, #16]
 800554a:	f023 0201 	bic.w	r2, r3, #1
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	611a      	str	r2, [r3, #16]
  }
}
 8005552:	bf00      	nop
 8005554:	3714      	adds	r7, #20
 8005556:	46bd      	mov	sp, r7
 8005558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555c:	4770      	bx	lr
 800555e:	bf00      	nop
 8005560:	40012c00 	.word	0x40012c00
 8005564:	40000400 	.word	0x40000400
 8005568:	40000800 	.word	0x40000800
 800556c:	40000c00 	.word	0x40000c00
 8005570:	40013400 	.word	0x40013400
 8005574:	40014000 	.word	0x40014000
 8005578:	40014400 	.word	0x40014400
 800557c:	40014800 	.word	0x40014800

08005580 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b084      	sub	sp, #16
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
 8005588:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a34      	ldr	r2, [pc, #208]	@ (8005660 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d02c      	beq.n	80055ee <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800559c:	d027      	beq.n	80055ee <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a30      	ldr	r2, [pc, #192]	@ (8005664 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d022      	beq.n	80055ee <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a2e      	ldr	r2, [pc, #184]	@ (8005668 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d01d      	beq.n	80055ee <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a2d      	ldr	r2, [pc, #180]	@ (800566c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d018      	beq.n	80055ee <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a2b      	ldr	r2, [pc, #172]	@ (8005670 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d013      	beq.n	80055ee <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a2a      	ldr	r2, [pc, #168]	@ (8005674 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d00e      	beq.n	80055ee <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a28      	ldr	r2, [pc, #160]	@ (8005678 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d009      	beq.n	80055ee <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a27      	ldr	r2, [pc, #156]	@ (800567c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d004      	beq.n	80055ee <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 80055e4:	f240 71ac 	movw	r1, #1964	@ 0x7ac
 80055e8:	4825      	ldr	r0, [pc, #148]	@ (8005680 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80055ea:	f7fb f9b9 	bl	8000960 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d020      	beq.n	8005638 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	2b10      	cmp	r3, #16
 80055fc:	d01c      	beq.n	8005638 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	2b20      	cmp	r3, #32
 8005604:	d018      	beq.n	8005638 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	2b30      	cmp	r3, #48	@ 0x30
 800560c:	d014      	beq.n	8005638 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	2b40      	cmp	r3, #64	@ 0x40
 8005614:	d010      	beq.n	8005638 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	2b50      	cmp	r3, #80	@ 0x50
 800561c:	d00c      	beq.n	8005638 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	2b60      	cmp	r3, #96	@ 0x60
 8005624:	d008      	beq.n	8005638 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	2b70      	cmp	r3, #112	@ 0x70
 800562c:	d004      	beq.n	8005638 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800562e:	f240 71ad 	movw	r1, #1965	@ 0x7ad
 8005632:	4813      	ldr	r0, [pc, #76]	@ (8005680 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005634:	f7fb f994 	bl	8000960 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	689b      	ldr	r3, [r3, #8]
 800563c:	2b80      	cmp	r3, #128	@ 0x80
 800563e:	d008      	beq.n	8005652 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d004      	beq.n	8005652 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
 8005648:	f240 71ae 	movw	r1, #1966	@ 0x7ae
 800564c:	480c      	ldr	r0, [pc, #48]	@ (8005680 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800564e:	f7fb f987 	bl	8000960 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005658:	2b01      	cmp	r3, #1
 800565a:	d113      	bne.n	8005684 <HAL_TIMEx_MasterConfigSynchronization+0x104>
 800565c:	2302      	movs	r3, #2
 800565e:	e0d3      	b.n	8005808 <HAL_TIMEx_MasterConfigSynchronization+0x288>
 8005660:	40012c00 	.word	0x40012c00
 8005664:	40000400 	.word	0x40000400
 8005668:	40000800 	.word	0x40000800
 800566c:	40000c00 	.word	0x40000c00
 8005670:	40001000 	.word	0x40001000
 8005674:	40001400 	.word	0x40001400
 8005678:	40013400 	.word	0x40013400
 800567c:	40014000 	.word	0x40014000
 8005680:	080077e4 	.word	0x080077e4
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2201      	movs	r2, #1
 8005688:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2202      	movs	r2, #2
 8005690:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	689b      	ldr	r3, [r3, #8]
 80056a2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a59      	ldr	r2, [pc, #356]	@ (8005810 <HAL_TIMEx_MasterConfigSynchronization+0x290>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d004      	beq.n	80056b8 <HAL_TIMEx_MasterConfigSynchronization+0x138>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a58      	ldr	r2, [pc, #352]	@ (8005814 <HAL_TIMEx_MasterConfigSynchronization+0x294>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d161      	bne.n	800577c <HAL_TIMEx_MasterConfigSynchronization+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d054      	beq.n	800576a <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80056c8:	d04f      	beq.n	800576a <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80056d2:	d04a      	beq.n	800576a <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80056dc:	d045      	beq.n	800576a <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80056e6:	d040      	beq.n	800576a <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 80056f0:	d03b      	beq.n	800576a <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80056fa:	d036      	beq.n	800576a <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005704:	d031      	beq.n	800576a <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	f5b3 0fe0 	cmp.w	r3, #7340032	@ 0x700000
 800570e:	d02c      	beq.n	800576a <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005718:	d027      	beq.n	800576a <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	f5b3 0f10 	cmp.w	r3, #9437184	@ 0x900000
 8005722:	d022      	beq.n	800576a <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800572c:	d01d      	beq.n	800576a <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	f5b3 0f30 	cmp.w	r3, #11534336	@ 0xb00000
 8005736:	d018      	beq.n	800576a <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005740:	d013      	beq.n	800576a <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	f5b3 0f50 	cmp.w	r3, #13631488	@ 0xd00000
 800574a:	d00e      	beq.n	800576a <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	f5b3 0f60 	cmp.w	r3, #14680064	@ 0xe00000
 8005754:	d009      	beq.n	800576a <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	f5b3 0f70 	cmp.w	r3, #15728640	@ 0xf00000
 800575e:	d004      	beq.n	800576a <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8005760:	f44f 61f8 	mov.w	r1, #1984	@ 0x7c0
 8005764:	482c      	ldr	r0, [pc, #176]	@ (8005818 <HAL_TIMEx_MasterConfigSynchronization+0x298>)
 8005766:	f7fb f8fb 	bl	8000960 <assert_failed>

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005770:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	68fa      	ldr	r2, [r7, #12]
 8005778:	4313      	orrs	r3, r2
 800577a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005782:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	68fa      	ldr	r2, [r7, #12]
 800578a:	4313      	orrs	r3, r2
 800578c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	68fa      	ldr	r2, [r7, #12]
 8005794:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a1d      	ldr	r2, [pc, #116]	@ (8005810 <HAL_TIMEx_MasterConfigSynchronization+0x290>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d01d      	beq.n	80057dc <HAL_TIMEx_MasterConfigSynchronization+0x25c>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057a8:	d018      	beq.n	80057dc <HAL_TIMEx_MasterConfigSynchronization+0x25c>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a1b      	ldr	r2, [pc, #108]	@ (800581c <HAL_TIMEx_MasterConfigSynchronization+0x29c>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d013      	beq.n	80057dc <HAL_TIMEx_MasterConfigSynchronization+0x25c>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a19      	ldr	r2, [pc, #100]	@ (8005820 <HAL_TIMEx_MasterConfigSynchronization+0x2a0>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d00e      	beq.n	80057dc <HAL_TIMEx_MasterConfigSynchronization+0x25c>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a18      	ldr	r2, [pc, #96]	@ (8005824 <HAL_TIMEx_MasterConfigSynchronization+0x2a4>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d009      	beq.n	80057dc <HAL_TIMEx_MasterConfigSynchronization+0x25c>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a11      	ldr	r2, [pc, #68]	@ (8005814 <HAL_TIMEx_MasterConfigSynchronization+0x294>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d004      	beq.n	80057dc <HAL_TIMEx_MasterConfigSynchronization+0x25c>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a14      	ldr	r2, [pc, #80]	@ (8005828 <HAL_TIMEx_MasterConfigSynchronization+0x2a8>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d10c      	bne.n	80057f6 <HAL_TIMEx_MasterConfigSynchronization+0x276>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80057e2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	68ba      	ldr	r2, [r7, #8]
 80057ea:	4313      	orrs	r3, r2
 80057ec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	68ba      	ldr	r2, [r7, #8]
 80057f4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2201      	movs	r2, #1
 80057fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2200      	movs	r2, #0
 8005802:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005806:	2300      	movs	r3, #0
}
 8005808:	4618      	mov	r0, r3
 800580a:	3710      	adds	r7, #16
 800580c:	46bd      	mov	sp, r7
 800580e:	bd80      	pop	{r7, pc}
 8005810:	40012c00 	.word	0x40012c00
 8005814:	40013400 	.word	0x40013400
 8005818:	080077e4 	.word	0x080077e4
 800581c:	40000400 	.word	0x40000400
 8005820:	40000800 	.word	0x40000800
 8005824:	40000c00 	.word	0x40000c00
 8005828:	40014000 	.word	0x40014000

0800582c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800582c:	b480      	push	{r7}
 800582e:	b083      	sub	sp, #12
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005834:	bf00      	nop
 8005836:	370c      	adds	r7, #12
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr

08005840 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005840:	b480      	push	{r7}
 8005842:	b083      	sub	sp, #12
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005848:	bf00      	nop
 800584a:	370c      	adds	r7, #12
 800584c:	46bd      	mov	sp, r7
 800584e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005852:	4770      	bx	lr

08005854 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005854:	b480      	push	{r7}
 8005856:	b083      	sub	sp, #12
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800585c:	bf00      	nop
 800585e:	370c      	adds	r7, #12
 8005860:	46bd      	mov	sp, r7
 8005862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005866:	4770      	bx	lr

08005868 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b082      	sub	sp, #8
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d101      	bne.n	800587a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005876:	2301      	movs	r3, #1
 8005878:	e08b      	b.n	8005992 <HAL_UART_Init+0x12a>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	699b      	ldr	r3, [r3, #24]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d023      	beq.n	80058ca <HAL_UART_Init+0x62>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a45      	ldr	r2, [pc, #276]	@ (800599c <HAL_UART_Init+0x134>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d041      	beq.n	8005910 <HAL_UART_Init+0xa8>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a43      	ldr	r2, [pc, #268]	@ (80059a0 <HAL_UART_Init+0x138>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d03c      	beq.n	8005910 <HAL_UART_Init+0xa8>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a42      	ldr	r2, [pc, #264]	@ (80059a4 <HAL_UART_Init+0x13c>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d037      	beq.n	8005910 <HAL_UART_Init+0xa8>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a40      	ldr	r2, [pc, #256]	@ (80059a8 <HAL_UART_Init+0x140>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d032      	beq.n	8005910 <HAL_UART_Init+0xa8>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a3f      	ldr	r2, [pc, #252]	@ (80059ac <HAL_UART_Init+0x144>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d02d      	beq.n	8005910 <HAL_UART_Init+0xa8>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a3d      	ldr	r2, [pc, #244]	@ (80059b0 <HAL_UART_Init+0x148>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d028      	beq.n	8005910 <HAL_UART_Init+0xa8>
 80058be:	f44f 71a9 	mov.w	r1, #338	@ 0x152
 80058c2:	483c      	ldr	r0, [pc, #240]	@ (80059b4 <HAL_UART_Init+0x14c>)
 80058c4:	f7fb f84c 	bl	8000960 <assert_failed>
 80058c8:	e022      	b.n	8005910 <HAL_UART_Init+0xa8>
  }
  else
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4a33      	ldr	r2, [pc, #204]	@ (800599c <HAL_UART_Init+0x134>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d01d      	beq.n	8005910 <HAL_UART_Init+0xa8>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a31      	ldr	r2, [pc, #196]	@ (80059a0 <HAL_UART_Init+0x138>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d018      	beq.n	8005910 <HAL_UART_Init+0xa8>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a30      	ldr	r2, [pc, #192]	@ (80059a4 <HAL_UART_Init+0x13c>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d013      	beq.n	8005910 <HAL_UART_Init+0xa8>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a2e      	ldr	r2, [pc, #184]	@ (80059a8 <HAL_UART_Init+0x140>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d00e      	beq.n	8005910 <HAL_UART_Init+0xa8>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a2d      	ldr	r2, [pc, #180]	@ (80059ac <HAL_UART_Init+0x144>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d009      	beq.n	8005910 <HAL_UART_Init+0xa8>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a2b      	ldr	r2, [pc, #172]	@ (80059b0 <HAL_UART_Init+0x148>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d004      	beq.n	8005910 <HAL_UART_Init+0xa8>
 8005906:	f240 1157 	movw	r1, #343	@ 0x157
 800590a:	482a      	ldr	r0, [pc, #168]	@ (80059b4 <HAL_UART_Init+0x14c>)
 800590c:	f7fb f828 	bl	8000960 <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005914:	2b00      	cmp	r3, #0
 8005916:	d106      	bne.n	8005926 <HAL_UART_Init+0xbe>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2200      	movs	r2, #0
 800591c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005920:	6878      	ldr	r0, [r7, #4]
 8005922:	f7fb fcc7 	bl	80012b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2224      	movs	r2, #36	@ 0x24
 800592a:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	681a      	ldr	r2, [r3, #0]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f022 0201 	bic.w	r2, r2, #1
 800593a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005940:	2b00      	cmp	r3, #0
 8005942:	d002      	beq.n	800594a <HAL_UART_Init+0xe2>
  {
    UART_AdvFeatureConfig(huart);
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	f000 fc1f 	bl	8006188 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f000 f8be 	bl	8005acc <UART_SetConfig>
 8005950:	4603      	mov	r3, r0
 8005952:	2b01      	cmp	r3, #1
 8005954:	d101      	bne.n	800595a <HAL_UART_Init+0xf2>
  {
    return HAL_ERROR;
 8005956:	2301      	movs	r3, #1
 8005958:	e01b      	b.n	8005992 <HAL_UART_Init+0x12a>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	685a      	ldr	r2, [r3, #4]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005968:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	689a      	ldr	r2, [r3, #8]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005978:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	681a      	ldr	r2, [r3, #0]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f042 0201 	orr.w	r2, r2, #1
 8005988:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f000 fd5c 	bl	8006448 <UART_CheckIdleState>
 8005990:	4603      	mov	r3, r0
}
 8005992:	4618      	mov	r0, r3
 8005994:	3708      	adds	r7, #8
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}
 800599a:	bf00      	nop
 800599c:	40013800 	.word	0x40013800
 80059a0:	40004400 	.word	0x40004400
 80059a4:	40004800 	.word	0x40004800
 80059a8:	40004c00 	.word	0x40004c00
 80059ac:	40005000 	.word	0x40005000
 80059b0:	40008000 	.word	0x40008000
 80059b4:	08007820 	.word	0x08007820

080059b8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b08a      	sub	sp, #40	@ 0x28
 80059bc:	af02      	add	r7, sp, #8
 80059be:	60f8      	str	r0, [r7, #12]
 80059c0:	60b9      	str	r1, [r7, #8]
 80059c2:	603b      	str	r3, [r7, #0]
 80059c4:	4613      	mov	r3, r2
 80059c6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80059cc:	2b20      	cmp	r3, #32
 80059ce:	d177      	bne.n	8005ac0 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d002      	beq.n	80059dc <HAL_UART_Transmit+0x24>
 80059d6:	88fb      	ldrh	r3, [r7, #6]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d101      	bne.n	80059e0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80059dc:	2301      	movs	r3, #1
 80059de:	e070      	b.n	8005ac2 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2200      	movs	r2, #0
 80059e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2221      	movs	r2, #33	@ 0x21
 80059ec:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80059ee:	f7fb fd51 	bl	8001494 <HAL_GetTick>
 80059f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	88fa      	ldrh	r2, [r7, #6]
 80059f8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	88fa      	ldrh	r2, [r7, #6]
 8005a00:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	689b      	ldr	r3, [r3, #8]
 8005a08:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a0c:	d108      	bne.n	8005a20 <HAL_UART_Transmit+0x68>
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	691b      	ldr	r3, [r3, #16]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d104      	bne.n	8005a20 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005a16:	2300      	movs	r3, #0
 8005a18:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	61bb      	str	r3, [r7, #24]
 8005a1e:	e003      	b.n	8005a28 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005a24:	2300      	movs	r3, #0
 8005a26:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005a28:	e02f      	b.n	8005a8a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	9300      	str	r3, [sp, #0]
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	2200      	movs	r2, #0
 8005a32:	2180      	movs	r1, #128	@ 0x80
 8005a34:	68f8      	ldr	r0, [r7, #12]
 8005a36:	f000 fdaf 	bl	8006598 <UART_WaitOnFlagUntilTimeout>
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d004      	beq.n	8005a4a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2220      	movs	r2, #32
 8005a44:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005a46:	2303      	movs	r3, #3
 8005a48:	e03b      	b.n	8005ac2 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005a4a:	69fb      	ldr	r3, [r7, #28]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d10b      	bne.n	8005a68 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005a50:	69bb      	ldr	r3, [r7, #24]
 8005a52:	881a      	ldrh	r2, [r3, #0]
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a5c:	b292      	uxth	r2, r2
 8005a5e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005a60:	69bb      	ldr	r3, [r7, #24]
 8005a62:	3302      	adds	r3, #2
 8005a64:	61bb      	str	r3, [r7, #24]
 8005a66:	e007      	b.n	8005a78 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005a68:	69fb      	ldr	r3, [r7, #28]
 8005a6a:	781a      	ldrb	r2, [r3, #0]
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005a72:	69fb      	ldr	r3, [r7, #28]
 8005a74:	3301      	adds	r3, #1
 8005a76:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005a7e:	b29b      	uxth	r3, r3
 8005a80:	3b01      	subs	r3, #1
 8005a82:	b29a      	uxth	r2, r3
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005a90:	b29b      	uxth	r3, r3
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d1c9      	bne.n	8005a2a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	9300      	str	r3, [sp, #0]
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	2140      	movs	r1, #64	@ 0x40
 8005aa0:	68f8      	ldr	r0, [r7, #12]
 8005aa2:	f000 fd79 	bl	8006598 <UART_WaitOnFlagUntilTimeout>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d004      	beq.n	8005ab6 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2220      	movs	r2, #32
 8005ab0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005ab2:	2303      	movs	r3, #3
 8005ab4:	e005      	b.n	8005ac2 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2220      	movs	r2, #32
 8005aba:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005abc:	2300      	movs	r3, #0
 8005abe:	e000      	b.n	8005ac2 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005ac0:	2302      	movs	r3, #2
  }
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	3720      	adds	r7, #32
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}
	...

08005acc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005acc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ad0:	b08a      	sub	sp, #40	@ 0x28
 8005ad2:	af00      	add	r7, sp, #0
 8005ad4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  uint32_t lpuart_ker_ck_pres;
#endif /* USART_PRESC_PRESCALER */
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	4a9e      	ldr	r2, [pc, #632]	@ (8005d5c <UART_SetConfig+0x290>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d904      	bls.n	8005af0 <UART_SetConfig+0x24>
 8005ae6:	f640 4158 	movw	r1, #3160	@ 0xc58
 8005aea:	489d      	ldr	r0, [pc, #628]	@ (8005d60 <UART_SetConfig+0x294>)
 8005aec:	f7fa ff38 	bl	8000960 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	689b      	ldr	r3, [r3, #8]
 8005af4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005af8:	d00d      	beq.n	8005b16 <UART_SetConfig+0x4a>
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	689b      	ldr	r3, [r3, #8]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d009      	beq.n	8005b16 <UART_SetConfig+0x4a>
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	689b      	ldr	r3, [r3, #8]
 8005b06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b0a:	d004      	beq.n	8005b16 <UART_SetConfig+0x4a>
 8005b0c:	f640 4159 	movw	r1, #3161	@ 0xc59
 8005b10:	4893      	ldr	r0, [pc, #588]	@ (8005d60 <UART_SetConfig+0x294>)
 8005b12:	f7fa ff25 	bl	8000960 <assert_failed>
  if (UART_INSTANCE_LOWPOWER(huart))
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a92      	ldr	r2, [pc, #584]	@ (8005d64 <UART_SetConfig+0x298>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d10e      	bne.n	8005b3e <UART_SetConfig+0x72>
  {
    assert_param(IS_LPUART_STOPBITS(huart->Init.StopBits));
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	68db      	ldr	r3, [r3, #12]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d030      	beq.n	8005b8a <UART_SetConfig+0xbe>
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	68db      	ldr	r3, [r3, #12]
 8005b2c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b30:	d02b      	beq.n	8005b8a <UART_SetConfig+0xbe>
 8005b32:	f640 415c 	movw	r1, #3164	@ 0xc5c
 8005b36:	488a      	ldr	r0, [pc, #552]	@ (8005d60 <UART_SetConfig+0x294>)
 8005b38:	f7fa ff12 	bl	8000960 <assert_failed>
 8005b3c:	e025      	b.n	8005b8a <UART_SetConfig+0xbe>
  }
  else
  {
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	68db      	ldr	r3, [r3, #12]
 8005b42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b46:	d012      	beq.n	8005b6e <UART_SetConfig+0xa2>
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	68db      	ldr	r3, [r3, #12]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d00e      	beq.n	8005b6e <UART_SetConfig+0xa2>
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	68db      	ldr	r3, [r3, #12]
 8005b54:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005b58:	d009      	beq.n	8005b6e <UART_SetConfig+0xa2>
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	68db      	ldr	r3, [r3, #12]
 8005b5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b62:	d004      	beq.n	8005b6e <UART_SetConfig+0xa2>
 8005b64:	f44f 6146 	mov.w	r1, #3168	@ 0xc60
 8005b68:	487d      	ldr	r0, [pc, #500]	@ (8005d60 <UART_SetConfig+0x294>)
 8005b6a:	f7fa fef9 	bl	8000960 <assert_failed>
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	6a1b      	ldr	r3, [r3, #32]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d009      	beq.n	8005b8a <UART_SetConfig+0xbe>
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	6a1b      	ldr	r3, [r3, #32]
 8005b7a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b7e:	d004      	beq.n	8005b8a <UART_SetConfig+0xbe>
 8005b80:	f640 4161 	movw	r1, #3169	@ 0xc61
 8005b84:	4876      	ldr	r0, [pc, #472]	@ (8005d60 <UART_SetConfig+0x294>)
 8005b86:	f7fa feeb 	bl	8000960 <assert_failed>
  }

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	691b      	ldr	r3, [r3, #16]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d00e      	beq.n	8005bb0 <UART_SetConfig+0xe4>
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	691b      	ldr	r3, [r3, #16]
 8005b96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b9a:	d009      	beq.n	8005bb0 <UART_SetConfig+0xe4>
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	691b      	ldr	r3, [r3, #16]
 8005ba0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005ba4:	d004      	beq.n	8005bb0 <UART_SetConfig+0xe4>
 8005ba6:	f640 4164 	movw	r1, #3172	@ 0xc64
 8005baa:	486d      	ldr	r0, [pc, #436]	@ (8005d60 <UART_SetConfig+0x294>)
 8005bac:	f7fa fed8 	bl	8000960 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	695b      	ldr	r3, [r3, #20]
 8005bb4:	f023 030c 	bic.w	r3, r3, #12
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d103      	bne.n	8005bc4 <UART_SetConfig+0xf8>
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	695b      	ldr	r3, [r3, #20]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d104      	bne.n	8005bce <UART_SetConfig+0x102>
 8005bc4:	f640 4165 	movw	r1, #3173	@ 0xc65
 8005bc8:	4865      	ldr	r0, [pc, #404]	@ (8005d60 <UART_SetConfig+0x294>)
 8005bca:	f7fa fec9 	bl	8000960 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	699b      	ldr	r3, [r3, #24]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d013      	beq.n	8005bfe <UART_SetConfig+0x132>
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	699b      	ldr	r3, [r3, #24]
 8005bda:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005bde:	d00e      	beq.n	8005bfe <UART_SetConfig+0x132>
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	699b      	ldr	r3, [r3, #24]
 8005be4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005be8:	d009      	beq.n	8005bfe <UART_SetConfig+0x132>
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	699b      	ldr	r3, [r3, #24]
 8005bee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005bf2:	d004      	beq.n	8005bfe <UART_SetConfig+0x132>
 8005bf4:	f640 4166 	movw	r1, #3174	@ 0xc66
 8005bf8:	4859      	ldr	r0, [pc, #356]	@ (8005d60 <UART_SetConfig+0x294>)
 8005bfa:	f7fa feb1 	bl	8000960 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	69db      	ldr	r3, [r3, #28]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d009      	beq.n	8005c1a <UART_SetConfig+0x14e>
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	69db      	ldr	r3, [r3, #28]
 8005c0a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c0e:	d004      	beq.n	8005c1a <UART_SetConfig+0x14e>
 8005c10:	f640 4167 	movw	r1, #3175	@ 0xc67
 8005c14:	4852      	ldr	r0, [pc, #328]	@ (8005d60 <UART_SetConfig+0x294>)
 8005c16:	f7fa fea3 	bl	8000960 <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	689a      	ldr	r2, [r3, #8]
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	691b      	ldr	r3, [r3, #16]
 8005c22:	431a      	orrs	r2, r3
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	695b      	ldr	r3, [r3, #20]
 8005c28:	431a      	orrs	r2, r3
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	69db      	ldr	r3, [r3, #28]
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	681a      	ldr	r2, [r3, #0]
 8005c38:	4b4b      	ldr	r3, [pc, #300]	@ (8005d68 <UART_SetConfig+0x29c>)
 8005c3a:	4013      	ands	r3, r2
 8005c3c:	68fa      	ldr	r2, [r7, #12]
 8005c3e:	6812      	ldr	r2, [r2, #0]
 8005c40:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005c42:	430b      	orrs	r3, r1
 8005c44:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	68da      	ldr	r2, [r3, #12]
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	430a      	orrs	r2, r1
 8005c5a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	699b      	ldr	r3, [r3, #24]
 8005c60:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a3f      	ldr	r2, [pc, #252]	@ (8005d64 <UART_SetConfig+0x298>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d004      	beq.n	8005c76 <UART_SetConfig+0x1aa>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	6a1b      	ldr	r3, [r3, #32]
 8005c70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c72:	4313      	orrs	r3, r2
 8005c74:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	689b      	ldr	r3, [r3, #8]
 8005c7c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c86:	430a      	orrs	r2, r1
 8005c88:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a37      	ldr	r2, [pc, #220]	@ (8005d6c <UART_SetConfig+0x2a0>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d125      	bne.n	8005ce0 <UART_SetConfig+0x214>
 8005c94:	4b36      	ldr	r3, [pc, #216]	@ (8005d70 <UART_SetConfig+0x2a4>)
 8005c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c9a:	f003 0303 	and.w	r3, r3, #3
 8005c9e:	2b03      	cmp	r3, #3
 8005ca0:	d81a      	bhi.n	8005cd8 <UART_SetConfig+0x20c>
 8005ca2:	a201      	add	r2, pc, #4	@ (adr r2, 8005ca8 <UART_SetConfig+0x1dc>)
 8005ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ca8:	08005cb9 	.word	0x08005cb9
 8005cac:	08005cc9 	.word	0x08005cc9
 8005cb0:	08005cc1 	.word	0x08005cc1
 8005cb4:	08005cd1 	.word	0x08005cd1
 8005cb8:	2301      	movs	r3, #1
 8005cba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005cbe:	e114      	b.n	8005eea <UART_SetConfig+0x41e>
 8005cc0:	2302      	movs	r3, #2
 8005cc2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005cc6:	e110      	b.n	8005eea <UART_SetConfig+0x41e>
 8005cc8:	2304      	movs	r3, #4
 8005cca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005cce:	e10c      	b.n	8005eea <UART_SetConfig+0x41e>
 8005cd0:	2308      	movs	r3, #8
 8005cd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005cd6:	e108      	b.n	8005eea <UART_SetConfig+0x41e>
 8005cd8:	2310      	movs	r3, #16
 8005cda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005cde:	e104      	b.n	8005eea <UART_SetConfig+0x41e>
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a23      	ldr	r2, [pc, #140]	@ (8005d74 <UART_SetConfig+0x2a8>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d146      	bne.n	8005d78 <UART_SetConfig+0x2ac>
 8005cea:	4b21      	ldr	r3, [pc, #132]	@ (8005d70 <UART_SetConfig+0x2a4>)
 8005cec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cf0:	f003 030c 	and.w	r3, r3, #12
 8005cf4:	2b0c      	cmp	r3, #12
 8005cf6:	d82d      	bhi.n	8005d54 <UART_SetConfig+0x288>
 8005cf8:	a201      	add	r2, pc, #4	@ (adr r2, 8005d00 <UART_SetConfig+0x234>)
 8005cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cfe:	bf00      	nop
 8005d00:	08005d35 	.word	0x08005d35
 8005d04:	08005d55 	.word	0x08005d55
 8005d08:	08005d55 	.word	0x08005d55
 8005d0c:	08005d55 	.word	0x08005d55
 8005d10:	08005d45 	.word	0x08005d45
 8005d14:	08005d55 	.word	0x08005d55
 8005d18:	08005d55 	.word	0x08005d55
 8005d1c:	08005d55 	.word	0x08005d55
 8005d20:	08005d3d 	.word	0x08005d3d
 8005d24:	08005d55 	.word	0x08005d55
 8005d28:	08005d55 	.word	0x08005d55
 8005d2c:	08005d55 	.word	0x08005d55
 8005d30:	08005d4d 	.word	0x08005d4d
 8005d34:	2300      	movs	r3, #0
 8005d36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d3a:	e0d6      	b.n	8005eea <UART_SetConfig+0x41e>
 8005d3c:	2302      	movs	r3, #2
 8005d3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d42:	e0d2      	b.n	8005eea <UART_SetConfig+0x41e>
 8005d44:	2304      	movs	r3, #4
 8005d46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d4a:	e0ce      	b.n	8005eea <UART_SetConfig+0x41e>
 8005d4c:	2308      	movs	r3, #8
 8005d4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d52:	e0ca      	b.n	8005eea <UART_SetConfig+0x41e>
 8005d54:	2310      	movs	r3, #16
 8005d56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d5a:	e0c6      	b.n	8005eea <UART_SetConfig+0x41e>
 8005d5c:	00989680 	.word	0x00989680
 8005d60:	08007820 	.word	0x08007820
 8005d64:	40008000 	.word	0x40008000
 8005d68:	efff69f3 	.word	0xefff69f3
 8005d6c:	40013800 	.word	0x40013800
 8005d70:	40021000 	.word	0x40021000
 8005d74:	40004400 	.word	0x40004400
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4aae      	ldr	r2, [pc, #696]	@ (8006038 <UART_SetConfig+0x56c>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d125      	bne.n	8005dce <UART_SetConfig+0x302>
 8005d82:	4bae      	ldr	r3, [pc, #696]	@ (800603c <UART_SetConfig+0x570>)
 8005d84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d88:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005d8c:	2b30      	cmp	r3, #48	@ 0x30
 8005d8e:	d016      	beq.n	8005dbe <UART_SetConfig+0x2f2>
 8005d90:	2b30      	cmp	r3, #48	@ 0x30
 8005d92:	d818      	bhi.n	8005dc6 <UART_SetConfig+0x2fa>
 8005d94:	2b20      	cmp	r3, #32
 8005d96:	d00a      	beq.n	8005dae <UART_SetConfig+0x2e2>
 8005d98:	2b20      	cmp	r3, #32
 8005d9a:	d814      	bhi.n	8005dc6 <UART_SetConfig+0x2fa>
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d002      	beq.n	8005da6 <UART_SetConfig+0x2da>
 8005da0:	2b10      	cmp	r3, #16
 8005da2:	d008      	beq.n	8005db6 <UART_SetConfig+0x2ea>
 8005da4:	e00f      	b.n	8005dc6 <UART_SetConfig+0x2fa>
 8005da6:	2300      	movs	r3, #0
 8005da8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005dac:	e09d      	b.n	8005eea <UART_SetConfig+0x41e>
 8005dae:	2302      	movs	r3, #2
 8005db0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005db4:	e099      	b.n	8005eea <UART_SetConfig+0x41e>
 8005db6:	2304      	movs	r3, #4
 8005db8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005dbc:	e095      	b.n	8005eea <UART_SetConfig+0x41e>
 8005dbe:	2308      	movs	r3, #8
 8005dc0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005dc4:	e091      	b.n	8005eea <UART_SetConfig+0x41e>
 8005dc6:	2310      	movs	r3, #16
 8005dc8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005dcc:	e08d      	b.n	8005eea <UART_SetConfig+0x41e>
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a9b      	ldr	r2, [pc, #620]	@ (8006040 <UART_SetConfig+0x574>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d125      	bne.n	8005e24 <UART_SetConfig+0x358>
 8005dd8:	4b98      	ldr	r3, [pc, #608]	@ (800603c <UART_SetConfig+0x570>)
 8005dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dde:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005de2:	2bc0      	cmp	r3, #192	@ 0xc0
 8005de4:	d016      	beq.n	8005e14 <UART_SetConfig+0x348>
 8005de6:	2bc0      	cmp	r3, #192	@ 0xc0
 8005de8:	d818      	bhi.n	8005e1c <UART_SetConfig+0x350>
 8005dea:	2b80      	cmp	r3, #128	@ 0x80
 8005dec:	d00a      	beq.n	8005e04 <UART_SetConfig+0x338>
 8005dee:	2b80      	cmp	r3, #128	@ 0x80
 8005df0:	d814      	bhi.n	8005e1c <UART_SetConfig+0x350>
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d002      	beq.n	8005dfc <UART_SetConfig+0x330>
 8005df6:	2b40      	cmp	r3, #64	@ 0x40
 8005df8:	d008      	beq.n	8005e0c <UART_SetConfig+0x340>
 8005dfa:	e00f      	b.n	8005e1c <UART_SetConfig+0x350>
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e02:	e072      	b.n	8005eea <UART_SetConfig+0x41e>
 8005e04:	2302      	movs	r3, #2
 8005e06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e0a:	e06e      	b.n	8005eea <UART_SetConfig+0x41e>
 8005e0c:	2304      	movs	r3, #4
 8005e0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e12:	e06a      	b.n	8005eea <UART_SetConfig+0x41e>
 8005e14:	2308      	movs	r3, #8
 8005e16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e1a:	e066      	b.n	8005eea <UART_SetConfig+0x41e>
 8005e1c:	2310      	movs	r3, #16
 8005e1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e22:	e062      	b.n	8005eea <UART_SetConfig+0x41e>
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a86      	ldr	r2, [pc, #536]	@ (8006044 <UART_SetConfig+0x578>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d12a      	bne.n	8005e84 <UART_SetConfig+0x3b8>
 8005e2e:	4b83      	ldr	r3, [pc, #524]	@ (800603c <UART_SetConfig+0x570>)
 8005e30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e34:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e38:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005e3c:	d01a      	beq.n	8005e74 <UART_SetConfig+0x3a8>
 8005e3e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005e42:	d81b      	bhi.n	8005e7c <UART_SetConfig+0x3b0>
 8005e44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e48:	d00c      	beq.n	8005e64 <UART_SetConfig+0x398>
 8005e4a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e4e:	d815      	bhi.n	8005e7c <UART_SetConfig+0x3b0>
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d003      	beq.n	8005e5c <UART_SetConfig+0x390>
 8005e54:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e58:	d008      	beq.n	8005e6c <UART_SetConfig+0x3a0>
 8005e5a:	e00f      	b.n	8005e7c <UART_SetConfig+0x3b0>
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e62:	e042      	b.n	8005eea <UART_SetConfig+0x41e>
 8005e64:	2302      	movs	r3, #2
 8005e66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e6a:	e03e      	b.n	8005eea <UART_SetConfig+0x41e>
 8005e6c:	2304      	movs	r3, #4
 8005e6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e72:	e03a      	b.n	8005eea <UART_SetConfig+0x41e>
 8005e74:	2308      	movs	r3, #8
 8005e76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e7a:	e036      	b.n	8005eea <UART_SetConfig+0x41e>
 8005e7c:	2310      	movs	r3, #16
 8005e7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e82:	e032      	b.n	8005eea <UART_SetConfig+0x41e>
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a6f      	ldr	r2, [pc, #444]	@ (8006048 <UART_SetConfig+0x57c>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d12a      	bne.n	8005ee4 <UART_SetConfig+0x418>
 8005e8e:	4b6b      	ldr	r3, [pc, #428]	@ (800603c <UART_SetConfig+0x570>)
 8005e90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e94:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005e98:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005e9c:	d01a      	beq.n	8005ed4 <UART_SetConfig+0x408>
 8005e9e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005ea2:	d81b      	bhi.n	8005edc <UART_SetConfig+0x410>
 8005ea4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005ea8:	d00c      	beq.n	8005ec4 <UART_SetConfig+0x3f8>
 8005eaa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005eae:	d815      	bhi.n	8005edc <UART_SetConfig+0x410>
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d003      	beq.n	8005ebc <UART_SetConfig+0x3f0>
 8005eb4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005eb8:	d008      	beq.n	8005ecc <UART_SetConfig+0x400>
 8005eba:	e00f      	b.n	8005edc <UART_SetConfig+0x410>
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ec2:	e012      	b.n	8005eea <UART_SetConfig+0x41e>
 8005ec4:	2302      	movs	r3, #2
 8005ec6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005eca:	e00e      	b.n	8005eea <UART_SetConfig+0x41e>
 8005ecc:	2304      	movs	r3, #4
 8005ece:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ed2:	e00a      	b.n	8005eea <UART_SetConfig+0x41e>
 8005ed4:	2308      	movs	r3, #8
 8005ed6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005eda:	e006      	b.n	8005eea <UART_SetConfig+0x41e>
 8005edc:	2310      	movs	r3, #16
 8005ede:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ee2:	e002      	b.n	8005eea <UART_SetConfig+0x41e>
 8005ee4:	2310      	movs	r3, #16
 8005ee6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4a56      	ldr	r2, [pc, #344]	@ (8006048 <UART_SetConfig+0x57c>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d17a      	bne.n	8005fea <UART_SetConfig+0x51e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005ef4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005ef8:	2b08      	cmp	r3, #8
 8005efa:	d824      	bhi.n	8005f46 <UART_SetConfig+0x47a>
 8005efc:	a201      	add	r2, pc, #4	@ (adr r2, 8005f04 <UART_SetConfig+0x438>)
 8005efe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f02:	bf00      	nop
 8005f04:	08005f29 	.word	0x08005f29
 8005f08:	08005f47 	.word	0x08005f47
 8005f0c:	08005f31 	.word	0x08005f31
 8005f10:	08005f47 	.word	0x08005f47
 8005f14:	08005f37 	.word	0x08005f37
 8005f18:	08005f47 	.word	0x08005f47
 8005f1c:	08005f47 	.word	0x08005f47
 8005f20:	08005f47 	.word	0x08005f47
 8005f24:	08005f3f 	.word	0x08005f3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f28:	f7fd f8de 	bl	80030e8 <HAL_RCC_GetPCLK1Freq>
 8005f2c:	61f8      	str	r0, [r7, #28]
        break;
 8005f2e:	e010      	b.n	8005f52 <UART_SetConfig+0x486>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f30:	4b46      	ldr	r3, [pc, #280]	@ (800604c <UART_SetConfig+0x580>)
 8005f32:	61fb      	str	r3, [r7, #28]
        break;
 8005f34:	e00d      	b.n	8005f52 <UART_SetConfig+0x486>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f36:	f7fd f83f 	bl	8002fb8 <HAL_RCC_GetSysClockFreq>
 8005f3a:	61f8      	str	r0, [r7, #28]
        break;
 8005f3c:	e009      	b.n	8005f52 <UART_SetConfig+0x486>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005f42:	61fb      	str	r3, [r7, #28]
        break;
 8005f44:	e005      	b.n	8005f52 <UART_SetConfig+0x486>
      default:
        pclk = 0U;
 8005f46:	2300      	movs	r3, #0
 8005f48:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005f50:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005f52:	69fb      	ldr	r3, [r7, #28]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	f000 8107 	beq.w	8006168 <UART_SetConfig+0x69c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	685a      	ldr	r2, [r3, #4]
 8005f5e:	4613      	mov	r3, r2
 8005f60:	005b      	lsls	r3, r3, #1
 8005f62:	4413      	add	r3, r2
 8005f64:	69fa      	ldr	r2, [r7, #28]
 8005f66:	429a      	cmp	r2, r3
 8005f68:	d305      	bcc.n	8005f76 <UART_SetConfig+0x4aa>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005f70:	69fa      	ldr	r2, [r7, #28]
 8005f72:	429a      	cmp	r2, r3
 8005f74:	d903      	bls.n	8005f7e <UART_SetConfig+0x4b2>
      {
        ret = HAL_ERROR;
 8005f76:	2301      	movs	r3, #1
 8005f78:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005f7c:	e0f4      	b.n	8006168 <UART_SetConfig+0x69c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005f7e:	69fb      	ldr	r3, [r7, #28]
 8005f80:	2200      	movs	r2, #0
 8005f82:	461c      	mov	r4, r3
 8005f84:	4615      	mov	r5, r2
 8005f86:	f04f 0200 	mov.w	r2, #0
 8005f8a:	f04f 0300 	mov.w	r3, #0
 8005f8e:	022b      	lsls	r3, r5, #8
 8005f90:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005f94:	0222      	lsls	r2, r4, #8
 8005f96:	68f9      	ldr	r1, [r7, #12]
 8005f98:	6849      	ldr	r1, [r1, #4]
 8005f9a:	0849      	lsrs	r1, r1, #1
 8005f9c:	2000      	movs	r0, #0
 8005f9e:	4688      	mov	r8, r1
 8005fa0:	4681      	mov	r9, r0
 8005fa2:	eb12 0a08 	adds.w	sl, r2, r8
 8005fa6:	eb43 0b09 	adc.w	fp, r3, r9
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	603b      	str	r3, [r7, #0]
 8005fb2:	607a      	str	r2, [r7, #4]
 8005fb4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005fb8:	4650      	mov	r0, sl
 8005fba:	4659      	mov	r1, fp
 8005fbc:	f7fa f958 	bl	8000270 <__aeabi_uldivmod>
 8005fc0:	4602      	mov	r2, r0
 8005fc2:	460b      	mov	r3, r1
 8005fc4:	4613      	mov	r3, r2
 8005fc6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005fc8:	69bb      	ldr	r3, [r7, #24]
 8005fca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005fce:	d308      	bcc.n	8005fe2 <UART_SetConfig+0x516>
 8005fd0:	69bb      	ldr	r3, [r7, #24]
 8005fd2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005fd6:	d204      	bcs.n	8005fe2 <UART_SetConfig+0x516>
        {
          huart->Instance->BRR = usartdiv;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	69ba      	ldr	r2, [r7, #24]
 8005fde:	60da      	str	r2, [r3, #12]
 8005fe0:	e0c2      	b.n	8006168 <UART_SetConfig+0x69c>
        }
        else
        {
          ret = HAL_ERROR;
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005fe8:	e0be      	b.n	8006168 <UART_SetConfig+0x69c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	69db      	ldr	r3, [r3, #28]
 8005fee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ff2:	d16a      	bne.n	80060ca <UART_SetConfig+0x5fe>
  {
    switch (clocksource)
 8005ff4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005ff8:	2b08      	cmp	r3, #8
 8005ffa:	d834      	bhi.n	8006066 <UART_SetConfig+0x59a>
 8005ffc:	a201      	add	r2, pc, #4	@ (adr r2, 8006004 <UART_SetConfig+0x538>)
 8005ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006002:	bf00      	nop
 8006004:	08006029 	.word	0x08006029
 8006008:	08006031 	.word	0x08006031
 800600c:	08006051 	.word	0x08006051
 8006010:	08006067 	.word	0x08006067
 8006014:	08006057 	.word	0x08006057
 8006018:	08006067 	.word	0x08006067
 800601c:	08006067 	.word	0x08006067
 8006020:	08006067 	.word	0x08006067
 8006024:	0800605f 	.word	0x0800605f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006028:	f7fd f85e 	bl	80030e8 <HAL_RCC_GetPCLK1Freq>
 800602c:	61f8      	str	r0, [r7, #28]
        break;
 800602e:	e020      	b.n	8006072 <UART_SetConfig+0x5a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006030:	f7fd f870 	bl	8003114 <HAL_RCC_GetPCLK2Freq>
 8006034:	61f8      	str	r0, [r7, #28]
        break;
 8006036:	e01c      	b.n	8006072 <UART_SetConfig+0x5a6>
 8006038:	40004800 	.word	0x40004800
 800603c:	40021000 	.word	0x40021000
 8006040:	40004c00 	.word	0x40004c00
 8006044:	40005000 	.word	0x40005000
 8006048:	40008000 	.word	0x40008000
 800604c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006050:	4b4c      	ldr	r3, [pc, #304]	@ (8006184 <UART_SetConfig+0x6b8>)
 8006052:	61fb      	str	r3, [r7, #28]
        break;
 8006054:	e00d      	b.n	8006072 <UART_SetConfig+0x5a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006056:	f7fc ffaf 	bl	8002fb8 <HAL_RCC_GetSysClockFreq>
 800605a:	61f8      	str	r0, [r7, #28]
        break;
 800605c:	e009      	b.n	8006072 <UART_SetConfig+0x5a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800605e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006062:	61fb      	str	r3, [r7, #28]
        break;
 8006064:	e005      	b.n	8006072 <UART_SetConfig+0x5a6>
      default:
        pclk = 0U;
 8006066:	2300      	movs	r3, #0
 8006068:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800606a:	2301      	movs	r3, #1
 800606c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006070:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006072:	69fb      	ldr	r3, [r7, #28]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d077      	beq.n	8006168 <UART_SetConfig+0x69c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006078:	69fb      	ldr	r3, [r7, #28]
 800607a:	005a      	lsls	r2, r3, #1
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	085b      	lsrs	r3, r3, #1
 8006082:	441a      	add	r2, r3
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	fbb2 f3f3 	udiv	r3, r2, r3
 800608c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800608e:	69bb      	ldr	r3, [r7, #24]
 8006090:	2b0f      	cmp	r3, #15
 8006092:	d916      	bls.n	80060c2 <UART_SetConfig+0x5f6>
 8006094:	69bb      	ldr	r3, [r7, #24]
 8006096:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800609a:	d212      	bcs.n	80060c2 <UART_SetConfig+0x5f6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800609c:	69bb      	ldr	r3, [r7, #24]
 800609e:	b29b      	uxth	r3, r3
 80060a0:	f023 030f 	bic.w	r3, r3, #15
 80060a4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80060a6:	69bb      	ldr	r3, [r7, #24]
 80060a8:	085b      	lsrs	r3, r3, #1
 80060aa:	b29b      	uxth	r3, r3
 80060ac:	f003 0307 	and.w	r3, r3, #7
 80060b0:	b29a      	uxth	r2, r3
 80060b2:	8afb      	ldrh	r3, [r7, #22]
 80060b4:	4313      	orrs	r3, r2
 80060b6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	8afa      	ldrh	r2, [r7, #22]
 80060be:	60da      	str	r2, [r3, #12]
 80060c0:	e052      	b.n	8006168 <UART_SetConfig+0x69c>
      }
      else
      {
        ret = HAL_ERROR;
 80060c2:	2301      	movs	r3, #1
 80060c4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80060c8:	e04e      	b.n	8006168 <UART_SetConfig+0x69c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80060ca:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80060ce:	2b08      	cmp	r3, #8
 80060d0:	d827      	bhi.n	8006122 <UART_SetConfig+0x656>
 80060d2:	a201      	add	r2, pc, #4	@ (adr r2, 80060d8 <UART_SetConfig+0x60c>)
 80060d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060d8:	080060fd 	.word	0x080060fd
 80060dc:	08006105 	.word	0x08006105
 80060e0:	0800610d 	.word	0x0800610d
 80060e4:	08006123 	.word	0x08006123
 80060e8:	08006113 	.word	0x08006113
 80060ec:	08006123 	.word	0x08006123
 80060f0:	08006123 	.word	0x08006123
 80060f4:	08006123 	.word	0x08006123
 80060f8:	0800611b 	.word	0x0800611b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060fc:	f7fc fff4 	bl	80030e8 <HAL_RCC_GetPCLK1Freq>
 8006100:	61f8      	str	r0, [r7, #28]
        break;
 8006102:	e014      	b.n	800612e <UART_SetConfig+0x662>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006104:	f7fd f806 	bl	8003114 <HAL_RCC_GetPCLK2Freq>
 8006108:	61f8      	str	r0, [r7, #28]
        break;
 800610a:	e010      	b.n	800612e <UART_SetConfig+0x662>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800610c:	4b1d      	ldr	r3, [pc, #116]	@ (8006184 <UART_SetConfig+0x6b8>)
 800610e:	61fb      	str	r3, [r7, #28]
        break;
 8006110:	e00d      	b.n	800612e <UART_SetConfig+0x662>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006112:	f7fc ff51 	bl	8002fb8 <HAL_RCC_GetSysClockFreq>
 8006116:	61f8      	str	r0, [r7, #28]
        break;
 8006118:	e009      	b.n	800612e <UART_SetConfig+0x662>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800611a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800611e:	61fb      	str	r3, [r7, #28]
        break;
 8006120:	e005      	b.n	800612e <UART_SetConfig+0x662>
      default:
        pclk = 0U;
 8006122:	2300      	movs	r3, #0
 8006124:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006126:	2301      	movs	r3, #1
 8006128:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800612c:	bf00      	nop
    }

    if (pclk != 0U)
 800612e:	69fb      	ldr	r3, [r7, #28]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d019      	beq.n	8006168 <UART_SetConfig+0x69c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	085a      	lsrs	r2, r3, #1
 800613a:	69fb      	ldr	r3, [r7, #28]
 800613c:	441a      	add	r2, r3
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	685b      	ldr	r3, [r3, #4]
 8006142:	fbb2 f3f3 	udiv	r3, r2, r3
 8006146:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006148:	69bb      	ldr	r3, [r7, #24]
 800614a:	2b0f      	cmp	r3, #15
 800614c:	d909      	bls.n	8006162 <UART_SetConfig+0x696>
 800614e:	69bb      	ldr	r3, [r7, #24]
 8006150:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006154:	d205      	bcs.n	8006162 <UART_SetConfig+0x696>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006156:	69bb      	ldr	r3, [r7, #24]
 8006158:	b29a      	uxth	r2, r3
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	60da      	str	r2, [r3, #12]
 8006160:	e002      	b.n	8006168 <UART_SetConfig+0x69c>
      }
      else
      {
        ret = HAL_ERROR;
 8006162:	2301      	movs	r3, #1
 8006164:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2200      	movs	r2, #0
 800616c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2200      	movs	r2, #0
 8006172:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006174:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8006178:	4618      	mov	r0, r3
 800617a:	3728      	adds	r7, #40	@ 0x28
 800617c:	46bd      	mov	sp, r7
 800617e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006182:	bf00      	nop
 8006184:	00f42400 	.word	0x00f42400

08006188 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b082      	sub	sp, #8
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006194:	2bff      	cmp	r3, #255	@ 0xff
 8006196:	d904      	bls.n	80061a2 <UART_AdvFeatureConfig+0x1a>
 8006198:	f640 514d 	movw	r1, #3405	@ 0xd4d
 800619c:	4891      	ldr	r0, [pc, #580]	@ (80063e4 <UART_AdvFeatureConfig+0x25c>)
 800619e:	f7fa fbdf 	bl	8000960 <assert_failed>

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061a6:	f003 0308 	and.w	r3, r3, #8
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d018      	beq.n	80061e0 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d009      	beq.n	80061ca <UART_AdvFeatureConfig+0x42>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80061be:	d004      	beq.n	80061ca <UART_AdvFeatureConfig+0x42>
 80061c0:	f640 5152 	movw	r1, #3410	@ 0xd52
 80061c4:	4887      	ldr	r0, [pc, #540]	@ (80063e4 <UART_AdvFeatureConfig+0x25c>)
 80061c6:	f7fa fbcb 	bl	8000960 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	685b      	ldr	r3, [r3, #4]
 80061d0:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	430a      	orrs	r2, r1
 80061de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061e4:	f003 0301 	and.w	r3, r3, #1
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d018      	beq.n	800621e <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d009      	beq.n	8006208 <UART_AdvFeatureConfig+0x80>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061f8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80061fc:	d004      	beq.n	8006208 <UART_AdvFeatureConfig+0x80>
 80061fe:	f640 5159 	movw	r1, #3417	@ 0xd59
 8006202:	4878      	ldr	r0, [pc, #480]	@ (80063e4 <UART_AdvFeatureConfig+0x25c>)
 8006204:	f7fa fbac 	bl	8000960 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	430a      	orrs	r2, r1
 800621c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006222:	f003 0302 	and.w	r3, r3, #2
 8006226:	2b00      	cmp	r3, #0
 8006228:	d018      	beq.n	800625c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800622e:	2b00      	cmp	r3, #0
 8006230:	d009      	beq.n	8006246 <UART_AdvFeatureConfig+0xbe>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006236:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800623a:	d004      	beq.n	8006246 <UART_AdvFeatureConfig+0xbe>
 800623c:	f44f 6156 	mov.w	r1, #3424	@ 0xd60
 8006240:	4868      	ldr	r0, [pc, #416]	@ (80063e4 <UART_AdvFeatureConfig+0x25c>)
 8006242:	f7fa fb8d 	bl	8000960 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	430a      	orrs	r2, r1
 800625a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006260:	f003 0304 	and.w	r3, r3, #4
 8006264:	2b00      	cmp	r3, #0
 8006266:	d018      	beq.n	800629a <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800626c:	2b00      	cmp	r3, #0
 800626e:	d009      	beq.n	8006284 <UART_AdvFeatureConfig+0xfc>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006274:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006278:	d004      	beq.n	8006284 <UART_AdvFeatureConfig+0xfc>
 800627a:	f640 5167 	movw	r1, #3431	@ 0xd67
 800627e:	4859      	ldr	r0, [pc, #356]	@ (80063e4 <UART_AdvFeatureConfig+0x25c>)
 8006280:	f7fa fb6e 	bl	8000960 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	430a      	orrs	r2, r1
 8006298:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800629e:	f003 0310 	and.w	r3, r3, #16
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d018      	beq.n	80062d8 <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d009      	beq.n	80062c2 <UART_AdvFeatureConfig+0x13a>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062b6:	d004      	beq.n	80062c2 <UART_AdvFeatureConfig+0x13a>
 80062b8:	f640 516e 	movw	r1, #3438	@ 0xd6e
 80062bc:	4849      	ldr	r0, [pc, #292]	@ (80063e4 <UART_AdvFeatureConfig+0x25c>)
 80062be:	f7fa fb4f 	bl	8000960 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	689b      	ldr	r3, [r3, #8]
 80062c8:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	430a      	orrs	r2, r1
 80062d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062dc:	f003 0320 	and.w	r3, r3, #32
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d018      	beq.n	8006316 <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d009      	beq.n	8006300 <UART_AdvFeatureConfig+0x178>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80062f4:	d004      	beq.n	8006300 <UART_AdvFeatureConfig+0x178>
 80062f6:	f640 5175 	movw	r1, #3445	@ 0xd75
 80062fa:	483a      	ldr	r0, [pc, #232]	@ (80063e4 <UART_AdvFeatureConfig+0x25c>)
 80062fc:	f7fa fb30 	bl	8000960 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	689b      	ldr	r3, [r3, #8]
 8006306:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	430a      	orrs	r2, r1
 8006314:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800631a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800631e:	2b00      	cmp	r3, #0
 8006320:	d06c      	beq.n	80063fc <UART_AdvFeatureConfig+0x274>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4a30      	ldr	r2, [pc, #192]	@ (80063e8 <UART_AdvFeatureConfig+0x260>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d018      	beq.n	800635e <UART_AdvFeatureConfig+0x1d6>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a2e      	ldr	r2, [pc, #184]	@ (80063ec <UART_AdvFeatureConfig+0x264>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d013      	beq.n	800635e <UART_AdvFeatureConfig+0x1d6>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4a2d      	ldr	r2, [pc, #180]	@ (80063f0 <UART_AdvFeatureConfig+0x268>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d00e      	beq.n	800635e <UART_AdvFeatureConfig+0x1d6>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4a2b      	ldr	r2, [pc, #172]	@ (80063f4 <UART_AdvFeatureConfig+0x26c>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d009      	beq.n	800635e <UART_AdvFeatureConfig+0x1d6>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4a2a      	ldr	r2, [pc, #168]	@ (80063f8 <UART_AdvFeatureConfig+0x270>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d004      	beq.n	800635e <UART_AdvFeatureConfig+0x1d6>
 8006354:	f640 517c 	movw	r1, #3452	@ 0xd7c
 8006358:	4822      	ldr	r0, [pc, #136]	@ (80063e4 <UART_AdvFeatureConfig+0x25c>)
 800635a:	f7fa fb01 	bl	8000960 <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006362:	2b00      	cmp	r3, #0
 8006364:	d009      	beq.n	800637a <UART_AdvFeatureConfig+0x1f2>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800636a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800636e:	d004      	beq.n	800637a <UART_AdvFeatureConfig+0x1f2>
 8006370:	f640 517d 	movw	r1, #3453	@ 0xd7d
 8006374:	481b      	ldr	r0, [pc, #108]	@ (80063e4 <UART_AdvFeatureConfig+0x25c>)
 8006376:	f7fa faf3 	bl	8000960 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	430a      	orrs	r2, r1
 800638e:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006394:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006398:	d130      	bne.n	80063fc <UART_AdvFeatureConfig+0x274>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d013      	beq.n	80063ca <UART_AdvFeatureConfig+0x242>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063a6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80063aa:	d00e      	beq.n	80063ca <UART_AdvFeatureConfig+0x242>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063b0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80063b4:	d009      	beq.n	80063ca <UART_AdvFeatureConfig+0x242>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063ba:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80063be:	d004      	beq.n	80063ca <UART_AdvFeatureConfig+0x242>
 80063c0:	f640 5182 	movw	r1, #3458	@ 0xd82
 80063c4:	4807      	ldr	r0, [pc, #28]	@ (80063e4 <UART_AdvFeatureConfig+0x25c>)
 80063c6:	f7fa facb 	bl	8000960 <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	430a      	orrs	r2, r1
 80063de:	605a      	str	r2, [r3, #4]
 80063e0:	e00c      	b.n	80063fc <UART_AdvFeatureConfig+0x274>
 80063e2:	bf00      	nop
 80063e4:	08007820 	.word	0x08007820
 80063e8:	40013800 	.word	0x40013800
 80063ec:	40004400 	.word	0x40004400
 80063f0:	40004800 	.word	0x40004800
 80063f4:	40004c00 	.word	0x40004c00
 80063f8:	40005000 	.word	0x40005000
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006400:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006404:	2b00      	cmp	r3, #0
 8006406:	d018      	beq.n	800643a <UART_AdvFeatureConfig+0x2b2>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800640c:	2b00      	cmp	r3, #0
 800640e:	d009      	beq.n	8006424 <UART_AdvFeatureConfig+0x29c>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006414:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006418:	d004      	beq.n	8006424 <UART_AdvFeatureConfig+0x29c>
 800641a:	f640 518a 	movw	r1, #3466	@ 0xd8a
 800641e:	4809      	ldr	r0, [pc, #36]	@ (8006444 <UART_AdvFeatureConfig+0x2bc>)
 8006420:	f7fa fa9e 	bl	8000960 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	430a      	orrs	r2, r1
 8006438:	605a      	str	r2, [r3, #4]
  }
}
 800643a:	bf00      	nop
 800643c:	3708      	adds	r7, #8
 800643e:	46bd      	mov	sp, r7
 8006440:	bd80      	pop	{r7, pc}
 8006442:	bf00      	nop
 8006444:	08007820 	.word	0x08007820

08006448 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b098      	sub	sp, #96	@ 0x60
 800644c:	af02      	add	r7, sp, #8
 800644e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2200      	movs	r2, #0
 8006454:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006458:	f7fb f81c 	bl	8001494 <HAL_GetTick>
 800645c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f003 0308 	and.w	r3, r3, #8
 8006468:	2b08      	cmp	r3, #8
 800646a:	d12e      	bne.n	80064ca <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800646c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006470:	9300      	str	r3, [sp, #0]
 8006472:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006474:	2200      	movs	r2, #0
 8006476:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f000 f88c 	bl	8006598 <UART_WaitOnFlagUntilTimeout>
 8006480:	4603      	mov	r3, r0
 8006482:	2b00      	cmp	r3, #0
 8006484:	d021      	beq.n	80064ca <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800648c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800648e:	e853 3f00 	ldrex	r3, [r3]
 8006492:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006494:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006496:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800649a:	653b      	str	r3, [r7, #80]	@ 0x50
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	461a      	mov	r2, r3
 80064a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80064a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80064a6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064a8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80064aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80064ac:	e841 2300 	strex	r3, r2, [r1]
 80064b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80064b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d1e6      	bne.n	8006486 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2220      	movs	r2, #32
 80064bc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2200      	movs	r2, #0
 80064c2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80064c6:	2303      	movs	r3, #3
 80064c8:	e062      	b.n	8006590 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f003 0304 	and.w	r3, r3, #4
 80064d4:	2b04      	cmp	r3, #4
 80064d6:	d149      	bne.n	800656c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80064d8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80064dc:	9300      	str	r3, [sp, #0]
 80064de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80064e0:	2200      	movs	r2, #0
 80064e2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f000 f856 	bl	8006598 <UART_WaitOnFlagUntilTimeout>
 80064ec:	4603      	mov	r3, r0
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d03c      	beq.n	800656c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064fa:	e853 3f00 	ldrex	r3, [r3]
 80064fe:	623b      	str	r3, [r7, #32]
   return(result);
 8006500:	6a3b      	ldr	r3, [r7, #32]
 8006502:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006506:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	461a      	mov	r2, r3
 800650e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006510:	633b      	str	r3, [r7, #48]	@ 0x30
 8006512:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006514:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006516:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006518:	e841 2300 	strex	r3, r2, [r1]
 800651c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800651e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006520:	2b00      	cmp	r3, #0
 8006522:	d1e6      	bne.n	80064f2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	3308      	adds	r3, #8
 800652a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800652c:	693b      	ldr	r3, [r7, #16]
 800652e:	e853 3f00 	ldrex	r3, [r3]
 8006532:	60fb      	str	r3, [r7, #12]
   return(result);
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	f023 0301 	bic.w	r3, r3, #1
 800653a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	3308      	adds	r3, #8
 8006542:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006544:	61fa      	str	r2, [r7, #28]
 8006546:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006548:	69b9      	ldr	r1, [r7, #24]
 800654a:	69fa      	ldr	r2, [r7, #28]
 800654c:	e841 2300 	strex	r3, r2, [r1]
 8006550:	617b      	str	r3, [r7, #20]
   return(result);
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d1e5      	bne.n	8006524 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2220      	movs	r2, #32
 800655c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2200      	movs	r2, #0
 8006564:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006568:	2303      	movs	r3, #3
 800656a:	e011      	b.n	8006590 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2220      	movs	r2, #32
 8006570:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2220      	movs	r2, #32
 8006576:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2200      	movs	r2, #0
 800657e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2200      	movs	r2, #0
 8006584:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2200      	movs	r2, #0
 800658a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800658e:	2300      	movs	r3, #0
}
 8006590:	4618      	mov	r0, r3
 8006592:	3758      	adds	r7, #88	@ 0x58
 8006594:	46bd      	mov	sp, r7
 8006596:	bd80      	pop	{r7, pc}

08006598 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b084      	sub	sp, #16
 800659c:	af00      	add	r7, sp, #0
 800659e:	60f8      	str	r0, [r7, #12]
 80065a0:	60b9      	str	r1, [r7, #8]
 80065a2:	603b      	str	r3, [r7, #0]
 80065a4:	4613      	mov	r3, r2
 80065a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065a8:	e04f      	b.n	800664a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065aa:	69bb      	ldr	r3, [r7, #24]
 80065ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065b0:	d04b      	beq.n	800664a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065b2:	f7fa ff6f 	bl	8001494 <HAL_GetTick>
 80065b6:	4602      	mov	r2, r0
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	1ad3      	subs	r3, r2, r3
 80065bc:	69ba      	ldr	r2, [r7, #24]
 80065be:	429a      	cmp	r2, r3
 80065c0:	d302      	bcc.n	80065c8 <UART_WaitOnFlagUntilTimeout+0x30>
 80065c2:	69bb      	ldr	r3, [r7, #24]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d101      	bne.n	80065cc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80065c8:	2303      	movs	r3, #3
 80065ca:	e04e      	b.n	800666a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f003 0304 	and.w	r3, r3, #4
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d037      	beq.n	800664a <UART_WaitOnFlagUntilTimeout+0xb2>
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	2b80      	cmp	r3, #128	@ 0x80
 80065de:	d034      	beq.n	800664a <UART_WaitOnFlagUntilTimeout+0xb2>
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	2b40      	cmp	r3, #64	@ 0x40
 80065e4:	d031      	beq.n	800664a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	69db      	ldr	r3, [r3, #28]
 80065ec:	f003 0308 	and.w	r3, r3, #8
 80065f0:	2b08      	cmp	r3, #8
 80065f2:	d110      	bne.n	8006616 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	2208      	movs	r2, #8
 80065fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80065fc:	68f8      	ldr	r0, [r7, #12]
 80065fe:	f000 f838 	bl	8006672 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	2208      	movs	r2, #8
 8006606:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	2200      	movs	r2, #0
 800660e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006612:	2301      	movs	r3, #1
 8006614:	e029      	b.n	800666a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	69db      	ldr	r3, [r3, #28]
 800661c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006620:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006624:	d111      	bne.n	800664a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800662e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006630:	68f8      	ldr	r0, [r7, #12]
 8006632:	f000 f81e 	bl	8006672 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2220      	movs	r2, #32
 800663a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2200      	movs	r2, #0
 8006642:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006646:	2303      	movs	r3, #3
 8006648:	e00f      	b.n	800666a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	69da      	ldr	r2, [r3, #28]
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	4013      	ands	r3, r2
 8006654:	68ba      	ldr	r2, [r7, #8]
 8006656:	429a      	cmp	r2, r3
 8006658:	bf0c      	ite	eq
 800665a:	2301      	moveq	r3, #1
 800665c:	2300      	movne	r3, #0
 800665e:	b2db      	uxtb	r3, r3
 8006660:	461a      	mov	r2, r3
 8006662:	79fb      	ldrb	r3, [r7, #7]
 8006664:	429a      	cmp	r2, r3
 8006666:	d0a0      	beq.n	80065aa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006668:	2300      	movs	r3, #0
}
 800666a:	4618      	mov	r0, r3
 800666c:	3710      	adds	r7, #16
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}

08006672 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006672:	b480      	push	{r7}
 8006674:	b095      	sub	sp, #84	@ 0x54
 8006676:	af00      	add	r7, sp, #0
 8006678:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006680:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006682:	e853 3f00 	ldrex	r3, [r3]
 8006686:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006688:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800668a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800668e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	461a      	mov	r2, r3
 8006696:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006698:	643b      	str	r3, [r7, #64]	@ 0x40
 800669a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800669c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800669e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80066a0:	e841 2300 	strex	r3, r2, [r1]
 80066a4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80066a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d1e6      	bne.n	800667a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	3308      	adds	r3, #8
 80066b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066b4:	6a3b      	ldr	r3, [r7, #32]
 80066b6:	e853 3f00 	ldrex	r3, [r3]
 80066ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80066bc:	69fb      	ldr	r3, [r7, #28]
 80066be:	f023 0301 	bic.w	r3, r3, #1
 80066c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	3308      	adds	r3, #8
 80066ca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80066cc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80066ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80066d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80066d4:	e841 2300 	strex	r3, r2, [r1]
 80066d8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80066da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d1e5      	bne.n	80066ac <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80066e4:	2b01      	cmp	r3, #1
 80066e6:	d118      	bne.n	800671a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	e853 3f00 	ldrex	r3, [r3]
 80066f4:	60bb      	str	r3, [r7, #8]
   return(result);
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	f023 0310 	bic.w	r3, r3, #16
 80066fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	461a      	mov	r2, r3
 8006704:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006706:	61bb      	str	r3, [r7, #24]
 8006708:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800670a:	6979      	ldr	r1, [r7, #20]
 800670c:	69ba      	ldr	r2, [r7, #24]
 800670e:	e841 2300 	strex	r3, r2, [r1]
 8006712:	613b      	str	r3, [r7, #16]
   return(result);
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d1e6      	bne.n	80066e8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2220      	movs	r2, #32
 800671e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2200      	movs	r2, #0
 8006726:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2200      	movs	r2, #0
 800672c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800672e:	bf00      	nop
 8006730:	3754      	adds	r7, #84	@ 0x54
 8006732:	46bd      	mov	sp, r7
 8006734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006738:	4770      	bx	lr
	...

0800673c <sbrk_aligned>:
 800673c:	b570      	push	{r4, r5, r6, lr}
 800673e:	4e0f      	ldr	r6, [pc, #60]	@ (800677c <sbrk_aligned+0x40>)
 8006740:	460c      	mov	r4, r1
 8006742:	6831      	ldr	r1, [r6, #0]
 8006744:	4605      	mov	r5, r0
 8006746:	b911      	cbnz	r1, 800674e <sbrk_aligned+0x12>
 8006748:	f000 f9fa 	bl	8006b40 <_sbrk_r>
 800674c:	6030      	str	r0, [r6, #0]
 800674e:	4621      	mov	r1, r4
 8006750:	4628      	mov	r0, r5
 8006752:	f000 f9f5 	bl	8006b40 <_sbrk_r>
 8006756:	1c43      	adds	r3, r0, #1
 8006758:	d103      	bne.n	8006762 <sbrk_aligned+0x26>
 800675a:	f04f 34ff 	mov.w	r4, #4294967295
 800675e:	4620      	mov	r0, r4
 8006760:	bd70      	pop	{r4, r5, r6, pc}
 8006762:	1cc4      	adds	r4, r0, #3
 8006764:	f024 0403 	bic.w	r4, r4, #3
 8006768:	42a0      	cmp	r0, r4
 800676a:	d0f8      	beq.n	800675e <sbrk_aligned+0x22>
 800676c:	1a21      	subs	r1, r4, r0
 800676e:	4628      	mov	r0, r5
 8006770:	f000 f9e6 	bl	8006b40 <_sbrk_r>
 8006774:	3001      	adds	r0, #1
 8006776:	d1f2      	bne.n	800675e <sbrk_aligned+0x22>
 8006778:	e7ef      	b.n	800675a <sbrk_aligned+0x1e>
 800677a:	bf00      	nop
 800677c:	2000038c 	.word	0x2000038c

08006780 <_malloc_r>:
 8006780:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006784:	1ccd      	adds	r5, r1, #3
 8006786:	f025 0503 	bic.w	r5, r5, #3
 800678a:	3508      	adds	r5, #8
 800678c:	2d0c      	cmp	r5, #12
 800678e:	bf38      	it	cc
 8006790:	250c      	movcc	r5, #12
 8006792:	2d00      	cmp	r5, #0
 8006794:	4606      	mov	r6, r0
 8006796:	db01      	blt.n	800679c <_malloc_r+0x1c>
 8006798:	42a9      	cmp	r1, r5
 800679a:	d904      	bls.n	80067a6 <_malloc_r+0x26>
 800679c:	230c      	movs	r3, #12
 800679e:	6033      	str	r3, [r6, #0]
 80067a0:	2000      	movs	r0, #0
 80067a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80067a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800687c <_malloc_r+0xfc>
 80067aa:	f000 f869 	bl	8006880 <__malloc_lock>
 80067ae:	f8d8 3000 	ldr.w	r3, [r8]
 80067b2:	461c      	mov	r4, r3
 80067b4:	bb44      	cbnz	r4, 8006808 <_malloc_r+0x88>
 80067b6:	4629      	mov	r1, r5
 80067b8:	4630      	mov	r0, r6
 80067ba:	f7ff ffbf 	bl	800673c <sbrk_aligned>
 80067be:	1c43      	adds	r3, r0, #1
 80067c0:	4604      	mov	r4, r0
 80067c2:	d158      	bne.n	8006876 <_malloc_r+0xf6>
 80067c4:	f8d8 4000 	ldr.w	r4, [r8]
 80067c8:	4627      	mov	r7, r4
 80067ca:	2f00      	cmp	r7, #0
 80067cc:	d143      	bne.n	8006856 <_malloc_r+0xd6>
 80067ce:	2c00      	cmp	r4, #0
 80067d0:	d04b      	beq.n	800686a <_malloc_r+0xea>
 80067d2:	6823      	ldr	r3, [r4, #0]
 80067d4:	4639      	mov	r1, r7
 80067d6:	4630      	mov	r0, r6
 80067d8:	eb04 0903 	add.w	r9, r4, r3
 80067dc:	f000 f9b0 	bl	8006b40 <_sbrk_r>
 80067e0:	4581      	cmp	r9, r0
 80067e2:	d142      	bne.n	800686a <_malloc_r+0xea>
 80067e4:	6821      	ldr	r1, [r4, #0]
 80067e6:	1a6d      	subs	r5, r5, r1
 80067e8:	4629      	mov	r1, r5
 80067ea:	4630      	mov	r0, r6
 80067ec:	f7ff ffa6 	bl	800673c <sbrk_aligned>
 80067f0:	3001      	adds	r0, #1
 80067f2:	d03a      	beq.n	800686a <_malloc_r+0xea>
 80067f4:	6823      	ldr	r3, [r4, #0]
 80067f6:	442b      	add	r3, r5
 80067f8:	6023      	str	r3, [r4, #0]
 80067fa:	f8d8 3000 	ldr.w	r3, [r8]
 80067fe:	685a      	ldr	r2, [r3, #4]
 8006800:	bb62      	cbnz	r2, 800685c <_malloc_r+0xdc>
 8006802:	f8c8 7000 	str.w	r7, [r8]
 8006806:	e00f      	b.n	8006828 <_malloc_r+0xa8>
 8006808:	6822      	ldr	r2, [r4, #0]
 800680a:	1b52      	subs	r2, r2, r5
 800680c:	d420      	bmi.n	8006850 <_malloc_r+0xd0>
 800680e:	2a0b      	cmp	r2, #11
 8006810:	d917      	bls.n	8006842 <_malloc_r+0xc2>
 8006812:	1961      	adds	r1, r4, r5
 8006814:	42a3      	cmp	r3, r4
 8006816:	6025      	str	r5, [r4, #0]
 8006818:	bf18      	it	ne
 800681a:	6059      	strne	r1, [r3, #4]
 800681c:	6863      	ldr	r3, [r4, #4]
 800681e:	bf08      	it	eq
 8006820:	f8c8 1000 	streq.w	r1, [r8]
 8006824:	5162      	str	r2, [r4, r5]
 8006826:	604b      	str	r3, [r1, #4]
 8006828:	4630      	mov	r0, r6
 800682a:	f000 f82f 	bl	800688c <__malloc_unlock>
 800682e:	f104 000b 	add.w	r0, r4, #11
 8006832:	1d23      	adds	r3, r4, #4
 8006834:	f020 0007 	bic.w	r0, r0, #7
 8006838:	1ac2      	subs	r2, r0, r3
 800683a:	bf1c      	itt	ne
 800683c:	1a1b      	subne	r3, r3, r0
 800683e:	50a3      	strne	r3, [r4, r2]
 8006840:	e7af      	b.n	80067a2 <_malloc_r+0x22>
 8006842:	6862      	ldr	r2, [r4, #4]
 8006844:	42a3      	cmp	r3, r4
 8006846:	bf0c      	ite	eq
 8006848:	f8c8 2000 	streq.w	r2, [r8]
 800684c:	605a      	strne	r2, [r3, #4]
 800684e:	e7eb      	b.n	8006828 <_malloc_r+0xa8>
 8006850:	4623      	mov	r3, r4
 8006852:	6864      	ldr	r4, [r4, #4]
 8006854:	e7ae      	b.n	80067b4 <_malloc_r+0x34>
 8006856:	463c      	mov	r4, r7
 8006858:	687f      	ldr	r7, [r7, #4]
 800685a:	e7b6      	b.n	80067ca <_malloc_r+0x4a>
 800685c:	461a      	mov	r2, r3
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	42a3      	cmp	r3, r4
 8006862:	d1fb      	bne.n	800685c <_malloc_r+0xdc>
 8006864:	2300      	movs	r3, #0
 8006866:	6053      	str	r3, [r2, #4]
 8006868:	e7de      	b.n	8006828 <_malloc_r+0xa8>
 800686a:	230c      	movs	r3, #12
 800686c:	6033      	str	r3, [r6, #0]
 800686e:	4630      	mov	r0, r6
 8006870:	f000 f80c 	bl	800688c <__malloc_unlock>
 8006874:	e794      	b.n	80067a0 <_malloc_r+0x20>
 8006876:	6005      	str	r5, [r0, #0]
 8006878:	e7d6      	b.n	8006828 <_malloc_r+0xa8>
 800687a:	bf00      	nop
 800687c:	20000390 	.word	0x20000390

08006880 <__malloc_lock>:
 8006880:	4801      	ldr	r0, [pc, #4]	@ (8006888 <__malloc_lock+0x8>)
 8006882:	f000 b9aa 	b.w	8006bda <__retarget_lock_acquire_recursive>
 8006886:	bf00      	nop
 8006888:	200004d4 	.word	0x200004d4

0800688c <__malloc_unlock>:
 800688c:	4801      	ldr	r0, [pc, #4]	@ (8006894 <__malloc_unlock+0x8>)
 800688e:	f000 b9a5 	b.w	8006bdc <__retarget_lock_release_recursive>
 8006892:	bf00      	nop
 8006894:	200004d4 	.word	0x200004d4

08006898 <std>:
 8006898:	2300      	movs	r3, #0
 800689a:	b510      	push	{r4, lr}
 800689c:	4604      	mov	r4, r0
 800689e:	e9c0 3300 	strd	r3, r3, [r0]
 80068a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80068a6:	6083      	str	r3, [r0, #8]
 80068a8:	8181      	strh	r1, [r0, #12]
 80068aa:	6643      	str	r3, [r0, #100]	@ 0x64
 80068ac:	81c2      	strh	r2, [r0, #14]
 80068ae:	6183      	str	r3, [r0, #24]
 80068b0:	4619      	mov	r1, r3
 80068b2:	2208      	movs	r2, #8
 80068b4:	305c      	adds	r0, #92	@ 0x5c
 80068b6:	f000 f906 	bl	8006ac6 <memset>
 80068ba:	4b0d      	ldr	r3, [pc, #52]	@ (80068f0 <std+0x58>)
 80068bc:	6263      	str	r3, [r4, #36]	@ 0x24
 80068be:	4b0d      	ldr	r3, [pc, #52]	@ (80068f4 <std+0x5c>)
 80068c0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80068c2:	4b0d      	ldr	r3, [pc, #52]	@ (80068f8 <std+0x60>)
 80068c4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80068c6:	4b0d      	ldr	r3, [pc, #52]	@ (80068fc <std+0x64>)
 80068c8:	6323      	str	r3, [r4, #48]	@ 0x30
 80068ca:	4b0d      	ldr	r3, [pc, #52]	@ (8006900 <std+0x68>)
 80068cc:	6224      	str	r4, [r4, #32]
 80068ce:	429c      	cmp	r4, r3
 80068d0:	d006      	beq.n	80068e0 <std+0x48>
 80068d2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80068d6:	4294      	cmp	r4, r2
 80068d8:	d002      	beq.n	80068e0 <std+0x48>
 80068da:	33d0      	adds	r3, #208	@ 0xd0
 80068dc:	429c      	cmp	r4, r3
 80068de:	d105      	bne.n	80068ec <std+0x54>
 80068e0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80068e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068e8:	f000 b976 	b.w	8006bd8 <__retarget_lock_init_recursive>
 80068ec:	bd10      	pop	{r4, pc}
 80068ee:	bf00      	nop
 80068f0:	08006a41 	.word	0x08006a41
 80068f4:	08006a63 	.word	0x08006a63
 80068f8:	08006a9b 	.word	0x08006a9b
 80068fc:	08006abf 	.word	0x08006abf
 8006900:	20000394 	.word	0x20000394

08006904 <stdio_exit_handler>:
 8006904:	4a02      	ldr	r2, [pc, #8]	@ (8006910 <stdio_exit_handler+0xc>)
 8006906:	4903      	ldr	r1, [pc, #12]	@ (8006914 <stdio_exit_handler+0x10>)
 8006908:	4803      	ldr	r0, [pc, #12]	@ (8006918 <stdio_exit_handler+0x14>)
 800690a:	f000 b869 	b.w	80069e0 <_fwalk_sglue>
 800690e:	bf00      	nop
 8006910:	20000014 	.word	0x20000014
 8006914:	08007319 	.word	0x08007319
 8006918:	20000024 	.word	0x20000024

0800691c <cleanup_stdio>:
 800691c:	6841      	ldr	r1, [r0, #4]
 800691e:	4b0c      	ldr	r3, [pc, #48]	@ (8006950 <cleanup_stdio+0x34>)
 8006920:	4299      	cmp	r1, r3
 8006922:	b510      	push	{r4, lr}
 8006924:	4604      	mov	r4, r0
 8006926:	d001      	beq.n	800692c <cleanup_stdio+0x10>
 8006928:	f000 fcf6 	bl	8007318 <_fflush_r>
 800692c:	68a1      	ldr	r1, [r4, #8]
 800692e:	4b09      	ldr	r3, [pc, #36]	@ (8006954 <cleanup_stdio+0x38>)
 8006930:	4299      	cmp	r1, r3
 8006932:	d002      	beq.n	800693a <cleanup_stdio+0x1e>
 8006934:	4620      	mov	r0, r4
 8006936:	f000 fcef 	bl	8007318 <_fflush_r>
 800693a:	68e1      	ldr	r1, [r4, #12]
 800693c:	4b06      	ldr	r3, [pc, #24]	@ (8006958 <cleanup_stdio+0x3c>)
 800693e:	4299      	cmp	r1, r3
 8006940:	d004      	beq.n	800694c <cleanup_stdio+0x30>
 8006942:	4620      	mov	r0, r4
 8006944:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006948:	f000 bce6 	b.w	8007318 <_fflush_r>
 800694c:	bd10      	pop	{r4, pc}
 800694e:	bf00      	nop
 8006950:	20000394 	.word	0x20000394
 8006954:	200003fc 	.word	0x200003fc
 8006958:	20000464 	.word	0x20000464

0800695c <global_stdio_init.part.0>:
 800695c:	b510      	push	{r4, lr}
 800695e:	4b0b      	ldr	r3, [pc, #44]	@ (800698c <global_stdio_init.part.0+0x30>)
 8006960:	4c0b      	ldr	r4, [pc, #44]	@ (8006990 <global_stdio_init.part.0+0x34>)
 8006962:	4a0c      	ldr	r2, [pc, #48]	@ (8006994 <global_stdio_init.part.0+0x38>)
 8006964:	601a      	str	r2, [r3, #0]
 8006966:	4620      	mov	r0, r4
 8006968:	2200      	movs	r2, #0
 800696a:	2104      	movs	r1, #4
 800696c:	f7ff ff94 	bl	8006898 <std>
 8006970:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006974:	2201      	movs	r2, #1
 8006976:	2109      	movs	r1, #9
 8006978:	f7ff ff8e 	bl	8006898 <std>
 800697c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006980:	2202      	movs	r2, #2
 8006982:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006986:	2112      	movs	r1, #18
 8006988:	f7ff bf86 	b.w	8006898 <std>
 800698c:	200004cc 	.word	0x200004cc
 8006990:	20000394 	.word	0x20000394
 8006994:	08006905 	.word	0x08006905

08006998 <__sfp_lock_acquire>:
 8006998:	4801      	ldr	r0, [pc, #4]	@ (80069a0 <__sfp_lock_acquire+0x8>)
 800699a:	f000 b91e 	b.w	8006bda <__retarget_lock_acquire_recursive>
 800699e:	bf00      	nop
 80069a0:	200004d5 	.word	0x200004d5

080069a4 <__sfp_lock_release>:
 80069a4:	4801      	ldr	r0, [pc, #4]	@ (80069ac <__sfp_lock_release+0x8>)
 80069a6:	f000 b919 	b.w	8006bdc <__retarget_lock_release_recursive>
 80069aa:	bf00      	nop
 80069ac:	200004d5 	.word	0x200004d5

080069b0 <__sinit>:
 80069b0:	b510      	push	{r4, lr}
 80069b2:	4604      	mov	r4, r0
 80069b4:	f7ff fff0 	bl	8006998 <__sfp_lock_acquire>
 80069b8:	6a23      	ldr	r3, [r4, #32]
 80069ba:	b11b      	cbz	r3, 80069c4 <__sinit+0x14>
 80069bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069c0:	f7ff bff0 	b.w	80069a4 <__sfp_lock_release>
 80069c4:	4b04      	ldr	r3, [pc, #16]	@ (80069d8 <__sinit+0x28>)
 80069c6:	6223      	str	r3, [r4, #32]
 80069c8:	4b04      	ldr	r3, [pc, #16]	@ (80069dc <__sinit+0x2c>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d1f5      	bne.n	80069bc <__sinit+0xc>
 80069d0:	f7ff ffc4 	bl	800695c <global_stdio_init.part.0>
 80069d4:	e7f2      	b.n	80069bc <__sinit+0xc>
 80069d6:	bf00      	nop
 80069d8:	0800691d 	.word	0x0800691d
 80069dc:	200004cc 	.word	0x200004cc

080069e0 <_fwalk_sglue>:
 80069e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80069e4:	4607      	mov	r7, r0
 80069e6:	4688      	mov	r8, r1
 80069e8:	4614      	mov	r4, r2
 80069ea:	2600      	movs	r6, #0
 80069ec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80069f0:	f1b9 0901 	subs.w	r9, r9, #1
 80069f4:	d505      	bpl.n	8006a02 <_fwalk_sglue+0x22>
 80069f6:	6824      	ldr	r4, [r4, #0]
 80069f8:	2c00      	cmp	r4, #0
 80069fa:	d1f7      	bne.n	80069ec <_fwalk_sglue+0xc>
 80069fc:	4630      	mov	r0, r6
 80069fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a02:	89ab      	ldrh	r3, [r5, #12]
 8006a04:	2b01      	cmp	r3, #1
 8006a06:	d907      	bls.n	8006a18 <_fwalk_sglue+0x38>
 8006a08:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006a0c:	3301      	adds	r3, #1
 8006a0e:	d003      	beq.n	8006a18 <_fwalk_sglue+0x38>
 8006a10:	4629      	mov	r1, r5
 8006a12:	4638      	mov	r0, r7
 8006a14:	47c0      	blx	r8
 8006a16:	4306      	orrs	r6, r0
 8006a18:	3568      	adds	r5, #104	@ 0x68
 8006a1a:	e7e9      	b.n	80069f0 <_fwalk_sglue+0x10>

08006a1c <iprintf>:
 8006a1c:	b40f      	push	{r0, r1, r2, r3}
 8006a1e:	b507      	push	{r0, r1, r2, lr}
 8006a20:	4906      	ldr	r1, [pc, #24]	@ (8006a3c <iprintf+0x20>)
 8006a22:	ab04      	add	r3, sp, #16
 8006a24:	6808      	ldr	r0, [r1, #0]
 8006a26:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a2a:	6881      	ldr	r1, [r0, #8]
 8006a2c:	9301      	str	r3, [sp, #4]
 8006a2e:	f000 f94b 	bl	8006cc8 <_vfiprintf_r>
 8006a32:	b003      	add	sp, #12
 8006a34:	f85d eb04 	ldr.w	lr, [sp], #4
 8006a38:	b004      	add	sp, #16
 8006a3a:	4770      	bx	lr
 8006a3c:	20000020 	.word	0x20000020

08006a40 <__sread>:
 8006a40:	b510      	push	{r4, lr}
 8006a42:	460c      	mov	r4, r1
 8006a44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a48:	f000 f868 	bl	8006b1c <_read_r>
 8006a4c:	2800      	cmp	r0, #0
 8006a4e:	bfab      	itete	ge
 8006a50:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006a52:	89a3      	ldrhlt	r3, [r4, #12]
 8006a54:	181b      	addge	r3, r3, r0
 8006a56:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006a5a:	bfac      	ite	ge
 8006a5c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006a5e:	81a3      	strhlt	r3, [r4, #12]
 8006a60:	bd10      	pop	{r4, pc}

08006a62 <__swrite>:
 8006a62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a66:	461f      	mov	r7, r3
 8006a68:	898b      	ldrh	r3, [r1, #12]
 8006a6a:	05db      	lsls	r3, r3, #23
 8006a6c:	4605      	mov	r5, r0
 8006a6e:	460c      	mov	r4, r1
 8006a70:	4616      	mov	r6, r2
 8006a72:	d505      	bpl.n	8006a80 <__swrite+0x1e>
 8006a74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a78:	2302      	movs	r3, #2
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	f000 f83c 	bl	8006af8 <_lseek_r>
 8006a80:	89a3      	ldrh	r3, [r4, #12]
 8006a82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a86:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006a8a:	81a3      	strh	r3, [r4, #12]
 8006a8c:	4632      	mov	r2, r6
 8006a8e:	463b      	mov	r3, r7
 8006a90:	4628      	mov	r0, r5
 8006a92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a96:	f000 b863 	b.w	8006b60 <_write_r>

08006a9a <__sseek>:
 8006a9a:	b510      	push	{r4, lr}
 8006a9c:	460c      	mov	r4, r1
 8006a9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006aa2:	f000 f829 	bl	8006af8 <_lseek_r>
 8006aa6:	1c43      	adds	r3, r0, #1
 8006aa8:	89a3      	ldrh	r3, [r4, #12]
 8006aaa:	bf15      	itete	ne
 8006aac:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006aae:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006ab2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006ab6:	81a3      	strheq	r3, [r4, #12]
 8006ab8:	bf18      	it	ne
 8006aba:	81a3      	strhne	r3, [r4, #12]
 8006abc:	bd10      	pop	{r4, pc}

08006abe <__sclose>:
 8006abe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ac2:	f000 b809 	b.w	8006ad8 <_close_r>

08006ac6 <memset>:
 8006ac6:	4402      	add	r2, r0
 8006ac8:	4603      	mov	r3, r0
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d100      	bne.n	8006ad0 <memset+0xa>
 8006ace:	4770      	bx	lr
 8006ad0:	f803 1b01 	strb.w	r1, [r3], #1
 8006ad4:	e7f9      	b.n	8006aca <memset+0x4>
	...

08006ad8 <_close_r>:
 8006ad8:	b538      	push	{r3, r4, r5, lr}
 8006ada:	4d06      	ldr	r5, [pc, #24]	@ (8006af4 <_close_r+0x1c>)
 8006adc:	2300      	movs	r3, #0
 8006ade:	4604      	mov	r4, r0
 8006ae0:	4608      	mov	r0, r1
 8006ae2:	602b      	str	r3, [r5, #0]
 8006ae4:	f7fa f8c9 	bl	8000c7a <_close>
 8006ae8:	1c43      	adds	r3, r0, #1
 8006aea:	d102      	bne.n	8006af2 <_close_r+0x1a>
 8006aec:	682b      	ldr	r3, [r5, #0]
 8006aee:	b103      	cbz	r3, 8006af2 <_close_r+0x1a>
 8006af0:	6023      	str	r3, [r4, #0]
 8006af2:	bd38      	pop	{r3, r4, r5, pc}
 8006af4:	200004d0 	.word	0x200004d0

08006af8 <_lseek_r>:
 8006af8:	b538      	push	{r3, r4, r5, lr}
 8006afa:	4d07      	ldr	r5, [pc, #28]	@ (8006b18 <_lseek_r+0x20>)
 8006afc:	4604      	mov	r4, r0
 8006afe:	4608      	mov	r0, r1
 8006b00:	4611      	mov	r1, r2
 8006b02:	2200      	movs	r2, #0
 8006b04:	602a      	str	r2, [r5, #0]
 8006b06:	461a      	mov	r2, r3
 8006b08:	f7fa f8de 	bl	8000cc8 <_lseek>
 8006b0c:	1c43      	adds	r3, r0, #1
 8006b0e:	d102      	bne.n	8006b16 <_lseek_r+0x1e>
 8006b10:	682b      	ldr	r3, [r5, #0]
 8006b12:	b103      	cbz	r3, 8006b16 <_lseek_r+0x1e>
 8006b14:	6023      	str	r3, [r4, #0]
 8006b16:	bd38      	pop	{r3, r4, r5, pc}
 8006b18:	200004d0 	.word	0x200004d0

08006b1c <_read_r>:
 8006b1c:	b538      	push	{r3, r4, r5, lr}
 8006b1e:	4d07      	ldr	r5, [pc, #28]	@ (8006b3c <_read_r+0x20>)
 8006b20:	4604      	mov	r4, r0
 8006b22:	4608      	mov	r0, r1
 8006b24:	4611      	mov	r1, r2
 8006b26:	2200      	movs	r2, #0
 8006b28:	602a      	str	r2, [r5, #0]
 8006b2a:	461a      	mov	r2, r3
 8006b2c:	f7fa f888 	bl	8000c40 <_read>
 8006b30:	1c43      	adds	r3, r0, #1
 8006b32:	d102      	bne.n	8006b3a <_read_r+0x1e>
 8006b34:	682b      	ldr	r3, [r5, #0]
 8006b36:	b103      	cbz	r3, 8006b3a <_read_r+0x1e>
 8006b38:	6023      	str	r3, [r4, #0]
 8006b3a:	bd38      	pop	{r3, r4, r5, pc}
 8006b3c:	200004d0 	.word	0x200004d0

08006b40 <_sbrk_r>:
 8006b40:	b538      	push	{r3, r4, r5, lr}
 8006b42:	4d06      	ldr	r5, [pc, #24]	@ (8006b5c <_sbrk_r+0x1c>)
 8006b44:	2300      	movs	r3, #0
 8006b46:	4604      	mov	r4, r0
 8006b48:	4608      	mov	r0, r1
 8006b4a:	602b      	str	r3, [r5, #0]
 8006b4c:	f7fa f8ca 	bl	8000ce4 <_sbrk>
 8006b50:	1c43      	adds	r3, r0, #1
 8006b52:	d102      	bne.n	8006b5a <_sbrk_r+0x1a>
 8006b54:	682b      	ldr	r3, [r5, #0]
 8006b56:	b103      	cbz	r3, 8006b5a <_sbrk_r+0x1a>
 8006b58:	6023      	str	r3, [r4, #0]
 8006b5a:	bd38      	pop	{r3, r4, r5, pc}
 8006b5c:	200004d0 	.word	0x200004d0

08006b60 <_write_r>:
 8006b60:	b538      	push	{r3, r4, r5, lr}
 8006b62:	4d07      	ldr	r5, [pc, #28]	@ (8006b80 <_write_r+0x20>)
 8006b64:	4604      	mov	r4, r0
 8006b66:	4608      	mov	r0, r1
 8006b68:	4611      	mov	r1, r2
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	602a      	str	r2, [r5, #0]
 8006b6e:	461a      	mov	r2, r3
 8006b70:	f7f9 fd4c 	bl	800060c <_write>
 8006b74:	1c43      	adds	r3, r0, #1
 8006b76:	d102      	bne.n	8006b7e <_write_r+0x1e>
 8006b78:	682b      	ldr	r3, [r5, #0]
 8006b7a:	b103      	cbz	r3, 8006b7e <_write_r+0x1e>
 8006b7c:	6023      	str	r3, [r4, #0]
 8006b7e:	bd38      	pop	{r3, r4, r5, pc}
 8006b80:	200004d0 	.word	0x200004d0

08006b84 <__errno>:
 8006b84:	4b01      	ldr	r3, [pc, #4]	@ (8006b8c <__errno+0x8>)
 8006b86:	6818      	ldr	r0, [r3, #0]
 8006b88:	4770      	bx	lr
 8006b8a:	bf00      	nop
 8006b8c:	20000020 	.word	0x20000020

08006b90 <__libc_init_array>:
 8006b90:	b570      	push	{r4, r5, r6, lr}
 8006b92:	4d0d      	ldr	r5, [pc, #52]	@ (8006bc8 <__libc_init_array+0x38>)
 8006b94:	4c0d      	ldr	r4, [pc, #52]	@ (8006bcc <__libc_init_array+0x3c>)
 8006b96:	1b64      	subs	r4, r4, r5
 8006b98:	10a4      	asrs	r4, r4, #2
 8006b9a:	2600      	movs	r6, #0
 8006b9c:	42a6      	cmp	r6, r4
 8006b9e:	d109      	bne.n	8006bb4 <__libc_init_array+0x24>
 8006ba0:	4d0b      	ldr	r5, [pc, #44]	@ (8006bd0 <__libc_init_array+0x40>)
 8006ba2:	4c0c      	ldr	r4, [pc, #48]	@ (8006bd4 <__libc_init_array+0x44>)
 8006ba4:	f000 fcf8 	bl	8007598 <_init>
 8006ba8:	1b64      	subs	r4, r4, r5
 8006baa:	10a4      	asrs	r4, r4, #2
 8006bac:	2600      	movs	r6, #0
 8006bae:	42a6      	cmp	r6, r4
 8006bb0:	d105      	bne.n	8006bbe <__libc_init_array+0x2e>
 8006bb2:	bd70      	pop	{r4, r5, r6, pc}
 8006bb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bb8:	4798      	blx	r3
 8006bba:	3601      	adds	r6, #1
 8006bbc:	e7ee      	b.n	8006b9c <__libc_init_array+0xc>
 8006bbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bc2:	4798      	blx	r3
 8006bc4:	3601      	adds	r6, #1
 8006bc6:	e7f2      	b.n	8006bae <__libc_init_array+0x1e>
 8006bc8:	080078e0 	.word	0x080078e0
 8006bcc:	080078e0 	.word	0x080078e0
 8006bd0:	080078e0 	.word	0x080078e0
 8006bd4:	080078e4 	.word	0x080078e4

08006bd8 <__retarget_lock_init_recursive>:
 8006bd8:	4770      	bx	lr

08006bda <__retarget_lock_acquire_recursive>:
 8006bda:	4770      	bx	lr

08006bdc <__retarget_lock_release_recursive>:
 8006bdc:	4770      	bx	lr
	...

08006be0 <_free_r>:
 8006be0:	b538      	push	{r3, r4, r5, lr}
 8006be2:	4605      	mov	r5, r0
 8006be4:	2900      	cmp	r1, #0
 8006be6:	d041      	beq.n	8006c6c <_free_r+0x8c>
 8006be8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006bec:	1f0c      	subs	r4, r1, #4
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	bfb8      	it	lt
 8006bf2:	18e4      	addlt	r4, r4, r3
 8006bf4:	f7ff fe44 	bl	8006880 <__malloc_lock>
 8006bf8:	4a1d      	ldr	r2, [pc, #116]	@ (8006c70 <_free_r+0x90>)
 8006bfa:	6813      	ldr	r3, [r2, #0]
 8006bfc:	b933      	cbnz	r3, 8006c0c <_free_r+0x2c>
 8006bfe:	6063      	str	r3, [r4, #4]
 8006c00:	6014      	str	r4, [r2, #0]
 8006c02:	4628      	mov	r0, r5
 8006c04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006c08:	f7ff be40 	b.w	800688c <__malloc_unlock>
 8006c0c:	42a3      	cmp	r3, r4
 8006c0e:	d908      	bls.n	8006c22 <_free_r+0x42>
 8006c10:	6820      	ldr	r0, [r4, #0]
 8006c12:	1821      	adds	r1, r4, r0
 8006c14:	428b      	cmp	r3, r1
 8006c16:	bf01      	itttt	eq
 8006c18:	6819      	ldreq	r1, [r3, #0]
 8006c1a:	685b      	ldreq	r3, [r3, #4]
 8006c1c:	1809      	addeq	r1, r1, r0
 8006c1e:	6021      	streq	r1, [r4, #0]
 8006c20:	e7ed      	b.n	8006bfe <_free_r+0x1e>
 8006c22:	461a      	mov	r2, r3
 8006c24:	685b      	ldr	r3, [r3, #4]
 8006c26:	b10b      	cbz	r3, 8006c2c <_free_r+0x4c>
 8006c28:	42a3      	cmp	r3, r4
 8006c2a:	d9fa      	bls.n	8006c22 <_free_r+0x42>
 8006c2c:	6811      	ldr	r1, [r2, #0]
 8006c2e:	1850      	adds	r0, r2, r1
 8006c30:	42a0      	cmp	r0, r4
 8006c32:	d10b      	bne.n	8006c4c <_free_r+0x6c>
 8006c34:	6820      	ldr	r0, [r4, #0]
 8006c36:	4401      	add	r1, r0
 8006c38:	1850      	adds	r0, r2, r1
 8006c3a:	4283      	cmp	r3, r0
 8006c3c:	6011      	str	r1, [r2, #0]
 8006c3e:	d1e0      	bne.n	8006c02 <_free_r+0x22>
 8006c40:	6818      	ldr	r0, [r3, #0]
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	6053      	str	r3, [r2, #4]
 8006c46:	4408      	add	r0, r1
 8006c48:	6010      	str	r0, [r2, #0]
 8006c4a:	e7da      	b.n	8006c02 <_free_r+0x22>
 8006c4c:	d902      	bls.n	8006c54 <_free_r+0x74>
 8006c4e:	230c      	movs	r3, #12
 8006c50:	602b      	str	r3, [r5, #0]
 8006c52:	e7d6      	b.n	8006c02 <_free_r+0x22>
 8006c54:	6820      	ldr	r0, [r4, #0]
 8006c56:	1821      	adds	r1, r4, r0
 8006c58:	428b      	cmp	r3, r1
 8006c5a:	bf04      	itt	eq
 8006c5c:	6819      	ldreq	r1, [r3, #0]
 8006c5e:	685b      	ldreq	r3, [r3, #4]
 8006c60:	6063      	str	r3, [r4, #4]
 8006c62:	bf04      	itt	eq
 8006c64:	1809      	addeq	r1, r1, r0
 8006c66:	6021      	streq	r1, [r4, #0]
 8006c68:	6054      	str	r4, [r2, #4]
 8006c6a:	e7ca      	b.n	8006c02 <_free_r+0x22>
 8006c6c:	bd38      	pop	{r3, r4, r5, pc}
 8006c6e:	bf00      	nop
 8006c70:	20000390 	.word	0x20000390

08006c74 <__sfputc_r>:
 8006c74:	6893      	ldr	r3, [r2, #8]
 8006c76:	3b01      	subs	r3, #1
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	b410      	push	{r4}
 8006c7c:	6093      	str	r3, [r2, #8]
 8006c7e:	da08      	bge.n	8006c92 <__sfputc_r+0x1e>
 8006c80:	6994      	ldr	r4, [r2, #24]
 8006c82:	42a3      	cmp	r3, r4
 8006c84:	db01      	blt.n	8006c8a <__sfputc_r+0x16>
 8006c86:	290a      	cmp	r1, #10
 8006c88:	d103      	bne.n	8006c92 <__sfputc_r+0x1e>
 8006c8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006c8e:	f000 bbcd 	b.w	800742c <__swbuf_r>
 8006c92:	6813      	ldr	r3, [r2, #0]
 8006c94:	1c58      	adds	r0, r3, #1
 8006c96:	6010      	str	r0, [r2, #0]
 8006c98:	7019      	strb	r1, [r3, #0]
 8006c9a:	4608      	mov	r0, r1
 8006c9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ca0:	4770      	bx	lr

08006ca2 <__sfputs_r>:
 8006ca2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ca4:	4606      	mov	r6, r0
 8006ca6:	460f      	mov	r7, r1
 8006ca8:	4614      	mov	r4, r2
 8006caa:	18d5      	adds	r5, r2, r3
 8006cac:	42ac      	cmp	r4, r5
 8006cae:	d101      	bne.n	8006cb4 <__sfputs_r+0x12>
 8006cb0:	2000      	movs	r0, #0
 8006cb2:	e007      	b.n	8006cc4 <__sfputs_r+0x22>
 8006cb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006cb8:	463a      	mov	r2, r7
 8006cba:	4630      	mov	r0, r6
 8006cbc:	f7ff ffda 	bl	8006c74 <__sfputc_r>
 8006cc0:	1c43      	adds	r3, r0, #1
 8006cc2:	d1f3      	bne.n	8006cac <__sfputs_r+0xa>
 8006cc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006cc8 <_vfiprintf_r>:
 8006cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ccc:	460d      	mov	r5, r1
 8006cce:	b09d      	sub	sp, #116	@ 0x74
 8006cd0:	4614      	mov	r4, r2
 8006cd2:	4698      	mov	r8, r3
 8006cd4:	4606      	mov	r6, r0
 8006cd6:	b118      	cbz	r0, 8006ce0 <_vfiprintf_r+0x18>
 8006cd8:	6a03      	ldr	r3, [r0, #32]
 8006cda:	b90b      	cbnz	r3, 8006ce0 <_vfiprintf_r+0x18>
 8006cdc:	f7ff fe68 	bl	80069b0 <__sinit>
 8006ce0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006ce2:	07d9      	lsls	r1, r3, #31
 8006ce4:	d405      	bmi.n	8006cf2 <_vfiprintf_r+0x2a>
 8006ce6:	89ab      	ldrh	r3, [r5, #12]
 8006ce8:	059a      	lsls	r2, r3, #22
 8006cea:	d402      	bmi.n	8006cf2 <_vfiprintf_r+0x2a>
 8006cec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006cee:	f7ff ff74 	bl	8006bda <__retarget_lock_acquire_recursive>
 8006cf2:	89ab      	ldrh	r3, [r5, #12]
 8006cf4:	071b      	lsls	r3, r3, #28
 8006cf6:	d501      	bpl.n	8006cfc <_vfiprintf_r+0x34>
 8006cf8:	692b      	ldr	r3, [r5, #16]
 8006cfa:	b99b      	cbnz	r3, 8006d24 <_vfiprintf_r+0x5c>
 8006cfc:	4629      	mov	r1, r5
 8006cfe:	4630      	mov	r0, r6
 8006d00:	f000 fbd2 	bl	80074a8 <__swsetup_r>
 8006d04:	b170      	cbz	r0, 8006d24 <_vfiprintf_r+0x5c>
 8006d06:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006d08:	07dc      	lsls	r4, r3, #31
 8006d0a:	d504      	bpl.n	8006d16 <_vfiprintf_r+0x4e>
 8006d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8006d10:	b01d      	add	sp, #116	@ 0x74
 8006d12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d16:	89ab      	ldrh	r3, [r5, #12]
 8006d18:	0598      	lsls	r0, r3, #22
 8006d1a:	d4f7      	bmi.n	8006d0c <_vfiprintf_r+0x44>
 8006d1c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006d1e:	f7ff ff5d 	bl	8006bdc <__retarget_lock_release_recursive>
 8006d22:	e7f3      	b.n	8006d0c <_vfiprintf_r+0x44>
 8006d24:	2300      	movs	r3, #0
 8006d26:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d28:	2320      	movs	r3, #32
 8006d2a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006d2e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006d32:	2330      	movs	r3, #48	@ 0x30
 8006d34:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006ee4 <_vfiprintf_r+0x21c>
 8006d38:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006d3c:	f04f 0901 	mov.w	r9, #1
 8006d40:	4623      	mov	r3, r4
 8006d42:	469a      	mov	sl, r3
 8006d44:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d48:	b10a      	cbz	r2, 8006d4e <_vfiprintf_r+0x86>
 8006d4a:	2a25      	cmp	r2, #37	@ 0x25
 8006d4c:	d1f9      	bne.n	8006d42 <_vfiprintf_r+0x7a>
 8006d4e:	ebba 0b04 	subs.w	fp, sl, r4
 8006d52:	d00b      	beq.n	8006d6c <_vfiprintf_r+0xa4>
 8006d54:	465b      	mov	r3, fp
 8006d56:	4622      	mov	r2, r4
 8006d58:	4629      	mov	r1, r5
 8006d5a:	4630      	mov	r0, r6
 8006d5c:	f7ff ffa1 	bl	8006ca2 <__sfputs_r>
 8006d60:	3001      	adds	r0, #1
 8006d62:	f000 80a7 	beq.w	8006eb4 <_vfiprintf_r+0x1ec>
 8006d66:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006d68:	445a      	add	r2, fp
 8006d6a:	9209      	str	r2, [sp, #36]	@ 0x24
 8006d6c:	f89a 3000 	ldrb.w	r3, [sl]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	f000 809f 	beq.w	8006eb4 <_vfiprintf_r+0x1ec>
 8006d76:	2300      	movs	r3, #0
 8006d78:	f04f 32ff 	mov.w	r2, #4294967295
 8006d7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006d80:	f10a 0a01 	add.w	sl, sl, #1
 8006d84:	9304      	str	r3, [sp, #16]
 8006d86:	9307      	str	r3, [sp, #28]
 8006d88:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006d8c:	931a      	str	r3, [sp, #104]	@ 0x68
 8006d8e:	4654      	mov	r4, sl
 8006d90:	2205      	movs	r2, #5
 8006d92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d96:	4853      	ldr	r0, [pc, #332]	@ (8006ee4 <_vfiprintf_r+0x21c>)
 8006d98:	f7f9 fa1a 	bl	80001d0 <memchr>
 8006d9c:	9a04      	ldr	r2, [sp, #16]
 8006d9e:	b9d8      	cbnz	r0, 8006dd8 <_vfiprintf_r+0x110>
 8006da0:	06d1      	lsls	r1, r2, #27
 8006da2:	bf44      	itt	mi
 8006da4:	2320      	movmi	r3, #32
 8006da6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006daa:	0713      	lsls	r3, r2, #28
 8006dac:	bf44      	itt	mi
 8006dae:	232b      	movmi	r3, #43	@ 0x2b
 8006db0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006db4:	f89a 3000 	ldrb.w	r3, [sl]
 8006db8:	2b2a      	cmp	r3, #42	@ 0x2a
 8006dba:	d015      	beq.n	8006de8 <_vfiprintf_r+0x120>
 8006dbc:	9a07      	ldr	r2, [sp, #28]
 8006dbe:	4654      	mov	r4, sl
 8006dc0:	2000      	movs	r0, #0
 8006dc2:	f04f 0c0a 	mov.w	ip, #10
 8006dc6:	4621      	mov	r1, r4
 8006dc8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006dcc:	3b30      	subs	r3, #48	@ 0x30
 8006dce:	2b09      	cmp	r3, #9
 8006dd0:	d94b      	bls.n	8006e6a <_vfiprintf_r+0x1a2>
 8006dd2:	b1b0      	cbz	r0, 8006e02 <_vfiprintf_r+0x13a>
 8006dd4:	9207      	str	r2, [sp, #28]
 8006dd6:	e014      	b.n	8006e02 <_vfiprintf_r+0x13a>
 8006dd8:	eba0 0308 	sub.w	r3, r0, r8
 8006ddc:	fa09 f303 	lsl.w	r3, r9, r3
 8006de0:	4313      	orrs	r3, r2
 8006de2:	9304      	str	r3, [sp, #16]
 8006de4:	46a2      	mov	sl, r4
 8006de6:	e7d2      	b.n	8006d8e <_vfiprintf_r+0xc6>
 8006de8:	9b03      	ldr	r3, [sp, #12]
 8006dea:	1d19      	adds	r1, r3, #4
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	9103      	str	r1, [sp, #12]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	bfbb      	ittet	lt
 8006df4:	425b      	neglt	r3, r3
 8006df6:	f042 0202 	orrlt.w	r2, r2, #2
 8006dfa:	9307      	strge	r3, [sp, #28]
 8006dfc:	9307      	strlt	r3, [sp, #28]
 8006dfe:	bfb8      	it	lt
 8006e00:	9204      	strlt	r2, [sp, #16]
 8006e02:	7823      	ldrb	r3, [r4, #0]
 8006e04:	2b2e      	cmp	r3, #46	@ 0x2e
 8006e06:	d10a      	bne.n	8006e1e <_vfiprintf_r+0x156>
 8006e08:	7863      	ldrb	r3, [r4, #1]
 8006e0a:	2b2a      	cmp	r3, #42	@ 0x2a
 8006e0c:	d132      	bne.n	8006e74 <_vfiprintf_r+0x1ac>
 8006e0e:	9b03      	ldr	r3, [sp, #12]
 8006e10:	1d1a      	adds	r2, r3, #4
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	9203      	str	r2, [sp, #12]
 8006e16:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006e1a:	3402      	adds	r4, #2
 8006e1c:	9305      	str	r3, [sp, #20]
 8006e1e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006ef4 <_vfiprintf_r+0x22c>
 8006e22:	7821      	ldrb	r1, [r4, #0]
 8006e24:	2203      	movs	r2, #3
 8006e26:	4650      	mov	r0, sl
 8006e28:	f7f9 f9d2 	bl	80001d0 <memchr>
 8006e2c:	b138      	cbz	r0, 8006e3e <_vfiprintf_r+0x176>
 8006e2e:	9b04      	ldr	r3, [sp, #16]
 8006e30:	eba0 000a 	sub.w	r0, r0, sl
 8006e34:	2240      	movs	r2, #64	@ 0x40
 8006e36:	4082      	lsls	r2, r0
 8006e38:	4313      	orrs	r3, r2
 8006e3a:	3401      	adds	r4, #1
 8006e3c:	9304      	str	r3, [sp, #16]
 8006e3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e42:	4829      	ldr	r0, [pc, #164]	@ (8006ee8 <_vfiprintf_r+0x220>)
 8006e44:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006e48:	2206      	movs	r2, #6
 8006e4a:	f7f9 f9c1 	bl	80001d0 <memchr>
 8006e4e:	2800      	cmp	r0, #0
 8006e50:	d03f      	beq.n	8006ed2 <_vfiprintf_r+0x20a>
 8006e52:	4b26      	ldr	r3, [pc, #152]	@ (8006eec <_vfiprintf_r+0x224>)
 8006e54:	bb1b      	cbnz	r3, 8006e9e <_vfiprintf_r+0x1d6>
 8006e56:	9b03      	ldr	r3, [sp, #12]
 8006e58:	3307      	adds	r3, #7
 8006e5a:	f023 0307 	bic.w	r3, r3, #7
 8006e5e:	3308      	adds	r3, #8
 8006e60:	9303      	str	r3, [sp, #12]
 8006e62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e64:	443b      	add	r3, r7
 8006e66:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e68:	e76a      	b.n	8006d40 <_vfiprintf_r+0x78>
 8006e6a:	fb0c 3202 	mla	r2, ip, r2, r3
 8006e6e:	460c      	mov	r4, r1
 8006e70:	2001      	movs	r0, #1
 8006e72:	e7a8      	b.n	8006dc6 <_vfiprintf_r+0xfe>
 8006e74:	2300      	movs	r3, #0
 8006e76:	3401      	adds	r4, #1
 8006e78:	9305      	str	r3, [sp, #20]
 8006e7a:	4619      	mov	r1, r3
 8006e7c:	f04f 0c0a 	mov.w	ip, #10
 8006e80:	4620      	mov	r0, r4
 8006e82:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e86:	3a30      	subs	r2, #48	@ 0x30
 8006e88:	2a09      	cmp	r2, #9
 8006e8a:	d903      	bls.n	8006e94 <_vfiprintf_r+0x1cc>
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d0c6      	beq.n	8006e1e <_vfiprintf_r+0x156>
 8006e90:	9105      	str	r1, [sp, #20]
 8006e92:	e7c4      	b.n	8006e1e <_vfiprintf_r+0x156>
 8006e94:	fb0c 2101 	mla	r1, ip, r1, r2
 8006e98:	4604      	mov	r4, r0
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	e7f0      	b.n	8006e80 <_vfiprintf_r+0x1b8>
 8006e9e:	ab03      	add	r3, sp, #12
 8006ea0:	9300      	str	r3, [sp, #0]
 8006ea2:	462a      	mov	r2, r5
 8006ea4:	4b12      	ldr	r3, [pc, #72]	@ (8006ef0 <_vfiprintf_r+0x228>)
 8006ea6:	a904      	add	r1, sp, #16
 8006ea8:	4630      	mov	r0, r6
 8006eaa:	f3af 8000 	nop.w
 8006eae:	4607      	mov	r7, r0
 8006eb0:	1c78      	adds	r0, r7, #1
 8006eb2:	d1d6      	bne.n	8006e62 <_vfiprintf_r+0x19a>
 8006eb4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006eb6:	07d9      	lsls	r1, r3, #31
 8006eb8:	d405      	bmi.n	8006ec6 <_vfiprintf_r+0x1fe>
 8006eba:	89ab      	ldrh	r3, [r5, #12]
 8006ebc:	059a      	lsls	r2, r3, #22
 8006ebe:	d402      	bmi.n	8006ec6 <_vfiprintf_r+0x1fe>
 8006ec0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006ec2:	f7ff fe8b 	bl	8006bdc <__retarget_lock_release_recursive>
 8006ec6:	89ab      	ldrh	r3, [r5, #12]
 8006ec8:	065b      	lsls	r3, r3, #25
 8006eca:	f53f af1f 	bmi.w	8006d0c <_vfiprintf_r+0x44>
 8006ece:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006ed0:	e71e      	b.n	8006d10 <_vfiprintf_r+0x48>
 8006ed2:	ab03      	add	r3, sp, #12
 8006ed4:	9300      	str	r3, [sp, #0]
 8006ed6:	462a      	mov	r2, r5
 8006ed8:	4b05      	ldr	r3, [pc, #20]	@ (8006ef0 <_vfiprintf_r+0x228>)
 8006eda:	a904      	add	r1, sp, #16
 8006edc:	4630      	mov	r0, r6
 8006ede:	f000 f879 	bl	8006fd4 <_printf_i>
 8006ee2:	e7e4      	b.n	8006eae <_vfiprintf_r+0x1e6>
 8006ee4:	080078a4 	.word	0x080078a4
 8006ee8:	080078ae 	.word	0x080078ae
 8006eec:	00000000 	.word	0x00000000
 8006ef0:	08006ca3 	.word	0x08006ca3
 8006ef4:	080078aa 	.word	0x080078aa

08006ef8 <_printf_common>:
 8006ef8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006efc:	4616      	mov	r6, r2
 8006efe:	4698      	mov	r8, r3
 8006f00:	688a      	ldr	r2, [r1, #8]
 8006f02:	690b      	ldr	r3, [r1, #16]
 8006f04:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	bfb8      	it	lt
 8006f0c:	4613      	movlt	r3, r2
 8006f0e:	6033      	str	r3, [r6, #0]
 8006f10:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006f14:	4607      	mov	r7, r0
 8006f16:	460c      	mov	r4, r1
 8006f18:	b10a      	cbz	r2, 8006f1e <_printf_common+0x26>
 8006f1a:	3301      	adds	r3, #1
 8006f1c:	6033      	str	r3, [r6, #0]
 8006f1e:	6823      	ldr	r3, [r4, #0]
 8006f20:	0699      	lsls	r1, r3, #26
 8006f22:	bf42      	ittt	mi
 8006f24:	6833      	ldrmi	r3, [r6, #0]
 8006f26:	3302      	addmi	r3, #2
 8006f28:	6033      	strmi	r3, [r6, #0]
 8006f2a:	6825      	ldr	r5, [r4, #0]
 8006f2c:	f015 0506 	ands.w	r5, r5, #6
 8006f30:	d106      	bne.n	8006f40 <_printf_common+0x48>
 8006f32:	f104 0a19 	add.w	sl, r4, #25
 8006f36:	68e3      	ldr	r3, [r4, #12]
 8006f38:	6832      	ldr	r2, [r6, #0]
 8006f3a:	1a9b      	subs	r3, r3, r2
 8006f3c:	42ab      	cmp	r3, r5
 8006f3e:	dc26      	bgt.n	8006f8e <_printf_common+0x96>
 8006f40:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006f44:	6822      	ldr	r2, [r4, #0]
 8006f46:	3b00      	subs	r3, #0
 8006f48:	bf18      	it	ne
 8006f4a:	2301      	movne	r3, #1
 8006f4c:	0692      	lsls	r2, r2, #26
 8006f4e:	d42b      	bmi.n	8006fa8 <_printf_common+0xb0>
 8006f50:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006f54:	4641      	mov	r1, r8
 8006f56:	4638      	mov	r0, r7
 8006f58:	47c8      	blx	r9
 8006f5a:	3001      	adds	r0, #1
 8006f5c:	d01e      	beq.n	8006f9c <_printf_common+0xa4>
 8006f5e:	6823      	ldr	r3, [r4, #0]
 8006f60:	6922      	ldr	r2, [r4, #16]
 8006f62:	f003 0306 	and.w	r3, r3, #6
 8006f66:	2b04      	cmp	r3, #4
 8006f68:	bf02      	ittt	eq
 8006f6a:	68e5      	ldreq	r5, [r4, #12]
 8006f6c:	6833      	ldreq	r3, [r6, #0]
 8006f6e:	1aed      	subeq	r5, r5, r3
 8006f70:	68a3      	ldr	r3, [r4, #8]
 8006f72:	bf0c      	ite	eq
 8006f74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006f78:	2500      	movne	r5, #0
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	bfc4      	itt	gt
 8006f7e:	1a9b      	subgt	r3, r3, r2
 8006f80:	18ed      	addgt	r5, r5, r3
 8006f82:	2600      	movs	r6, #0
 8006f84:	341a      	adds	r4, #26
 8006f86:	42b5      	cmp	r5, r6
 8006f88:	d11a      	bne.n	8006fc0 <_printf_common+0xc8>
 8006f8a:	2000      	movs	r0, #0
 8006f8c:	e008      	b.n	8006fa0 <_printf_common+0xa8>
 8006f8e:	2301      	movs	r3, #1
 8006f90:	4652      	mov	r2, sl
 8006f92:	4641      	mov	r1, r8
 8006f94:	4638      	mov	r0, r7
 8006f96:	47c8      	blx	r9
 8006f98:	3001      	adds	r0, #1
 8006f9a:	d103      	bne.n	8006fa4 <_printf_common+0xac>
 8006f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8006fa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fa4:	3501      	adds	r5, #1
 8006fa6:	e7c6      	b.n	8006f36 <_printf_common+0x3e>
 8006fa8:	18e1      	adds	r1, r4, r3
 8006faa:	1c5a      	adds	r2, r3, #1
 8006fac:	2030      	movs	r0, #48	@ 0x30
 8006fae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006fb2:	4422      	add	r2, r4
 8006fb4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006fb8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006fbc:	3302      	adds	r3, #2
 8006fbe:	e7c7      	b.n	8006f50 <_printf_common+0x58>
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	4622      	mov	r2, r4
 8006fc4:	4641      	mov	r1, r8
 8006fc6:	4638      	mov	r0, r7
 8006fc8:	47c8      	blx	r9
 8006fca:	3001      	adds	r0, #1
 8006fcc:	d0e6      	beq.n	8006f9c <_printf_common+0xa4>
 8006fce:	3601      	adds	r6, #1
 8006fd0:	e7d9      	b.n	8006f86 <_printf_common+0x8e>
	...

08006fd4 <_printf_i>:
 8006fd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006fd8:	7e0f      	ldrb	r7, [r1, #24]
 8006fda:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006fdc:	2f78      	cmp	r7, #120	@ 0x78
 8006fde:	4691      	mov	r9, r2
 8006fe0:	4680      	mov	r8, r0
 8006fe2:	460c      	mov	r4, r1
 8006fe4:	469a      	mov	sl, r3
 8006fe6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006fea:	d807      	bhi.n	8006ffc <_printf_i+0x28>
 8006fec:	2f62      	cmp	r7, #98	@ 0x62
 8006fee:	d80a      	bhi.n	8007006 <_printf_i+0x32>
 8006ff0:	2f00      	cmp	r7, #0
 8006ff2:	f000 80d1 	beq.w	8007198 <_printf_i+0x1c4>
 8006ff6:	2f58      	cmp	r7, #88	@ 0x58
 8006ff8:	f000 80b8 	beq.w	800716c <_printf_i+0x198>
 8006ffc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007000:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007004:	e03a      	b.n	800707c <_printf_i+0xa8>
 8007006:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800700a:	2b15      	cmp	r3, #21
 800700c:	d8f6      	bhi.n	8006ffc <_printf_i+0x28>
 800700e:	a101      	add	r1, pc, #4	@ (adr r1, 8007014 <_printf_i+0x40>)
 8007010:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007014:	0800706d 	.word	0x0800706d
 8007018:	08007081 	.word	0x08007081
 800701c:	08006ffd 	.word	0x08006ffd
 8007020:	08006ffd 	.word	0x08006ffd
 8007024:	08006ffd 	.word	0x08006ffd
 8007028:	08006ffd 	.word	0x08006ffd
 800702c:	08007081 	.word	0x08007081
 8007030:	08006ffd 	.word	0x08006ffd
 8007034:	08006ffd 	.word	0x08006ffd
 8007038:	08006ffd 	.word	0x08006ffd
 800703c:	08006ffd 	.word	0x08006ffd
 8007040:	0800717f 	.word	0x0800717f
 8007044:	080070ab 	.word	0x080070ab
 8007048:	08007139 	.word	0x08007139
 800704c:	08006ffd 	.word	0x08006ffd
 8007050:	08006ffd 	.word	0x08006ffd
 8007054:	080071a1 	.word	0x080071a1
 8007058:	08006ffd 	.word	0x08006ffd
 800705c:	080070ab 	.word	0x080070ab
 8007060:	08006ffd 	.word	0x08006ffd
 8007064:	08006ffd 	.word	0x08006ffd
 8007068:	08007141 	.word	0x08007141
 800706c:	6833      	ldr	r3, [r6, #0]
 800706e:	1d1a      	adds	r2, r3, #4
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	6032      	str	r2, [r6, #0]
 8007074:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007078:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800707c:	2301      	movs	r3, #1
 800707e:	e09c      	b.n	80071ba <_printf_i+0x1e6>
 8007080:	6833      	ldr	r3, [r6, #0]
 8007082:	6820      	ldr	r0, [r4, #0]
 8007084:	1d19      	adds	r1, r3, #4
 8007086:	6031      	str	r1, [r6, #0]
 8007088:	0606      	lsls	r6, r0, #24
 800708a:	d501      	bpl.n	8007090 <_printf_i+0xbc>
 800708c:	681d      	ldr	r5, [r3, #0]
 800708e:	e003      	b.n	8007098 <_printf_i+0xc4>
 8007090:	0645      	lsls	r5, r0, #25
 8007092:	d5fb      	bpl.n	800708c <_printf_i+0xb8>
 8007094:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007098:	2d00      	cmp	r5, #0
 800709a:	da03      	bge.n	80070a4 <_printf_i+0xd0>
 800709c:	232d      	movs	r3, #45	@ 0x2d
 800709e:	426d      	negs	r5, r5
 80070a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80070a4:	4858      	ldr	r0, [pc, #352]	@ (8007208 <_printf_i+0x234>)
 80070a6:	230a      	movs	r3, #10
 80070a8:	e011      	b.n	80070ce <_printf_i+0xfa>
 80070aa:	6821      	ldr	r1, [r4, #0]
 80070ac:	6833      	ldr	r3, [r6, #0]
 80070ae:	0608      	lsls	r0, r1, #24
 80070b0:	f853 5b04 	ldr.w	r5, [r3], #4
 80070b4:	d402      	bmi.n	80070bc <_printf_i+0xe8>
 80070b6:	0649      	lsls	r1, r1, #25
 80070b8:	bf48      	it	mi
 80070ba:	b2ad      	uxthmi	r5, r5
 80070bc:	2f6f      	cmp	r7, #111	@ 0x6f
 80070be:	4852      	ldr	r0, [pc, #328]	@ (8007208 <_printf_i+0x234>)
 80070c0:	6033      	str	r3, [r6, #0]
 80070c2:	bf14      	ite	ne
 80070c4:	230a      	movne	r3, #10
 80070c6:	2308      	moveq	r3, #8
 80070c8:	2100      	movs	r1, #0
 80070ca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80070ce:	6866      	ldr	r6, [r4, #4]
 80070d0:	60a6      	str	r6, [r4, #8]
 80070d2:	2e00      	cmp	r6, #0
 80070d4:	db05      	blt.n	80070e2 <_printf_i+0x10e>
 80070d6:	6821      	ldr	r1, [r4, #0]
 80070d8:	432e      	orrs	r6, r5
 80070da:	f021 0104 	bic.w	r1, r1, #4
 80070de:	6021      	str	r1, [r4, #0]
 80070e0:	d04b      	beq.n	800717a <_printf_i+0x1a6>
 80070e2:	4616      	mov	r6, r2
 80070e4:	fbb5 f1f3 	udiv	r1, r5, r3
 80070e8:	fb03 5711 	mls	r7, r3, r1, r5
 80070ec:	5dc7      	ldrb	r7, [r0, r7]
 80070ee:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80070f2:	462f      	mov	r7, r5
 80070f4:	42bb      	cmp	r3, r7
 80070f6:	460d      	mov	r5, r1
 80070f8:	d9f4      	bls.n	80070e4 <_printf_i+0x110>
 80070fa:	2b08      	cmp	r3, #8
 80070fc:	d10b      	bne.n	8007116 <_printf_i+0x142>
 80070fe:	6823      	ldr	r3, [r4, #0]
 8007100:	07df      	lsls	r7, r3, #31
 8007102:	d508      	bpl.n	8007116 <_printf_i+0x142>
 8007104:	6923      	ldr	r3, [r4, #16]
 8007106:	6861      	ldr	r1, [r4, #4]
 8007108:	4299      	cmp	r1, r3
 800710a:	bfde      	ittt	le
 800710c:	2330      	movle	r3, #48	@ 0x30
 800710e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007112:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007116:	1b92      	subs	r2, r2, r6
 8007118:	6122      	str	r2, [r4, #16]
 800711a:	f8cd a000 	str.w	sl, [sp]
 800711e:	464b      	mov	r3, r9
 8007120:	aa03      	add	r2, sp, #12
 8007122:	4621      	mov	r1, r4
 8007124:	4640      	mov	r0, r8
 8007126:	f7ff fee7 	bl	8006ef8 <_printf_common>
 800712a:	3001      	adds	r0, #1
 800712c:	d14a      	bne.n	80071c4 <_printf_i+0x1f0>
 800712e:	f04f 30ff 	mov.w	r0, #4294967295
 8007132:	b004      	add	sp, #16
 8007134:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007138:	6823      	ldr	r3, [r4, #0]
 800713a:	f043 0320 	orr.w	r3, r3, #32
 800713e:	6023      	str	r3, [r4, #0]
 8007140:	4832      	ldr	r0, [pc, #200]	@ (800720c <_printf_i+0x238>)
 8007142:	2778      	movs	r7, #120	@ 0x78
 8007144:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007148:	6823      	ldr	r3, [r4, #0]
 800714a:	6831      	ldr	r1, [r6, #0]
 800714c:	061f      	lsls	r7, r3, #24
 800714e:	f851 5b04 	ldr.w	r5, [r1], #4
 8007152:	d402      	bmi.n	800715a <_printf_i+0x186>
 8007154:	065f      	lsls	r7, r3, #25
 8007156:	bf48      	it	mi
 8007158:	b2ad      	uxthmi	r5, r5
 800715a:	6031      	str	r1, [r6, #0]
 800715c:	07d9      	lsls	r1, r3, #31
 800715e:	bf44      	itt	mi
 8007160:	f043 0320 	orrmi.w	r3, r3, #32
 8007164:	6023      	strmi	r3, [r4, #0]
 8007166:	b11d      	cbz	r5, 8007170 <_printf_i+0x19c>
 8007168:	2310      	movs	r3, #16
 800716a:	e7ad      	b.n	80070c8 <_printf_i+0xf4>
 800716c:	4826      	ldr	r0, [pc, #152]	@ (8007208 <_printf_i+0x234>)
 800716e:	e7e9      	b.n	8007144 <_printf_i+0x170>
 8007170:	6823      	ldr	r3, [r4, #0]
 8007172:	f023 0320 	bic.w	r3, r3, #32
 8007176:	6023      	str	r3, [r4, #0]
 8007178:	e7f6      	b.n	8007168 <_printf_i+0x194>
 800717a:	4616      	mov	r6, r2
 800717c:	e7bd      	b.n	80070fa <_printf_i+0x126>
 800717e:	6833      	ldr	r3, [r6, #0]
 8007180:	6825      	ldr	r5, [r4, #0]
 8007182:	6961      	ldr	r1, [r4, #20]
 8007184:	1d18      	adds	r0, r3, #4
 8007186:	6030      	str	r0, [r6, #0]
 8007188:	062e      	lsls	r6, r5, #24
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	d501      	bpl.n	8007192 <_printf_i+0x1be>
 800718e:	6019      	str	r1, [r3, #0]
 8007190:	e002      	b.n	8007198 <_printf_i+0x1c4>
 8007192:	0668      	lsls	r0, r5, #25
 8007194:	d5fb      	bpl.n	800718e <_printf_i+0x1ba>
 8007196:	8019      	strh	r1, [r3, #0]
 8007198:	2300      	movs	r3, #0
 800719a:	6123      	str	r3, [r4, #16]
 800719c:	4616      	mov	r6, r2
 800719e:	e7bc      	b.n	800711a <_printf_i+0x146>
 80071a0:	6833      	ldr	r3, [r6, #0]
 80071a2:	1d1a      	adds	r2, r3, #4
 80071a4:	6032      	str	r2, [r6, #0]
 80071a6:	681e      	ldr	r6, [r3, #0]
 80071a8:	6862      	ldr	r2, [r4, #4]
 80071aa:	2100      	movs	r1, #0
 80071ac:	4630      	mov	r0, r6
 80071ae:	f7f9 f80f 	bl	80001d0 <memchr>
 80071b2:	b108      	cbz	r0, 80071b8 <_printf_i+0x1e4>
 80071b4:	1b80      	subs	r0, r0, r6
 80071b6:	6060      	str	r0, [r4, #4]
 80071b8:	6863      	ldr	r3, [r4, #4]
 80071ba:	6123      	str	r3, [r4, #16]
 80071bc:	2300      	movs	r3, #0
 80071be:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80071c2:	e7aa      	b.n	800711a <_printf_i+0x146>
 80071c4:	6923      	ldr	r3, [r4, #16]
 80071c6:	4632      	mov	r2, r6
 80071c8:	4649      	mov	r1, r9
 80071ca:	4640      	mov	r0, r8
 80071cc:	47d0      	blx	sl
 80071ce:	3001      	adds	r0, #1
 80071d0:	d0ad      	beq.n	800712e <_printf_i+0x15a>
 80071d2:	6823      	ldr	r3, [r4, #0]
 80071d4:	079b      	lsls	r3, r3, #30
 80071d6:	d413      	bmi.n	8007200 <_printf_i+0x22c>
 80071d8:	68e0      	ldr	r0, [r4, #12]
 80071da:	9b03      	ldr	r3, [sp, #12]
 80071dc:	4298      	cmp	r0, r3
 80071de:	bfb8      	it	lt
 80071e0:	4618      	movlt	r0, r3
 80071e2:	e7a6      	b.n	8007132 <_printf_i+0x15e>
 80071e4:	2301      	movs	r3, #1
 80071e6:	4632      	mov	r2, r6
 80071e8:	4649      	mov	r1, r9
 80071ea:	4640      	mov	r0, r8
 80071ec:	47d0      	blx	sl
 80071ee:	3001      	adds	r0, #1
 80071f0:	d09d      	beq.n	800712e <_printf_i+0x15a>
 80071f2:	3501      	adds	r5, #1
 80071f4:	68e3      	ldr	r3, [r4, #12]
 80071f6:	9903      	ldr	r1, [sp, #12]
 80071f8:	1a5b      	subs	r3, r3, r1
 80071fa:	42ab      	cmp	r3, r5
 80071fc:	dcf2      	bgt.n	80071e4 <_printf_i+0x210>
 80071fe:	e7eb      	b.n	80071d8 <_printf_i+0x204>
 8007200:	2500      	movs	r5, #0
 8007202:	f104 0619 	add.w	r6, r4, #25
 8007206:	e7f5      	b.n	80071f4 <_printf_i+0x220>
 8007208:	080078b5 	.word	0x080078b5
 800720c:	080078c6 	.word	0x080078c6

08007210 <__sflush_r>:
 8007210:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007218:	0716      	lsls	r6, r2, #28
 800721a:	4605      	mov	r5, r0
 800721c:	460c      	mov	r4, r1
 800721e:	d454      	bmi.n	80072ca <__sflush_r+0xba>
 8007220:	684b      	ldr	r3, [r1, #4]
 8007222:	2b00      	cmp	r3, #0
 8007224:	dc02      	bgt.n	800722c <__sflush_r+0x1c>
 8007226:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007228:	2b00      	cmp	r3, #0
 800722a:	dd48      	ble.n	80072be <__sflush_r+0xae>
 800722c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800722e:	2e00      	cmp	r6, #0
 8007230:	d045      	beq.n	80072be <__sflush_r+0xae>
 8007232:	2300      	movs	r3, #0
 8007234:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007238:	682f      	ldr	r7, [r5, #0]
 800723a:	6a21      	ldr	r1, [r4, #32]
 800723c:	602b      	str	r3, [r5, #0]
 800723e:	d030      	beq.n	80072a2 <__sflush_r+0x92>
 8007240:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007242:	89a3      	ldrh	r3, [r4, #12]
 8007244:	0759      	lsls	r1, r3, #29
 8007246:	d505      	bpl.n	8007254 <__sflush_r+0x44>
 8007248:	6863      	ldr	r3, [r4, #4]
 800724a:	1ad2      	subs	r2, r2, r3
 800724c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800724e:	b10b      	cbz	r3, 8007254 <__sflush_r+0x44>
 8007250:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007252:	1ad2      	subs	r2, r2, r3
 8007254:	2300      	movs	r3, #0
 8007256:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007258:	6a21      	ldr	r1, [r4, #32]
 800725a:	4628      	mov	r0, r5
 800725c:	47b0      	blx	r6
 800725e:	1c43      	adds	r3, r0, #1
 8007260:	89a3      	ldrh	r3, [r4, #12]
 8007262:	d106      	bne.n	8007272 <__sflush_r+0x62>
 8007264:	6829      	ldr	r1, [r5, #0]
 8007266:	291d      	cmp	r1, #29
 8007268:	d82b      	bhi.n	80072c2 <__sflush_r+0xb2>
 800726a:	4a2a      	ldr	r2, [pc, #168]	@ (8007314 <__sflush_r+0x104>)
 800726c:	40ca      	lsrs	r2, r1
 800726e:	07d6      	lsls	r6, r2, #31
 8007270:	d527      	bpl.n	80072c2 <__sflush_r+0xb2>
 8007272:	2200      	movs	r2, #0
 8007274:	6062      	str	r2, [r4, #4]
 8007276:	04d9      	lsls	r1, r3, #19
 8007278:	6922      	ldr	r2, [r4, #16]
 800727a:	6022      	str	r2, [r4, #0]
 800727c:	d504      	bpl.n	8007288 <__sflush_r+0x78>
 800727e:	1c42      	adds	r2, r0, #1
 8007280:	d101      	bne.n	8007286 <__sflush_r+0x76>
 8007282:	682b      	ldr	r3, [r5, #0]
 8007284:	b903      	cbnz	r3, 8007288 <__sflush_r+0x78>
 8007286:	6560      	str	r0, [r4, #84]	@ 0x54
 8007288:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800728a:	602f      	str	r7, [r5, #0]
 800728c:	b1b9      	cbz	r1, 80072be <__sflush_r+0xae>
 800728e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007292:	4299      	cmp	r1, r3
 8007294:	d002      	beq.n	800729c <__sflush_r+0x8c>
 8007296:	4628      	mov	r0, r5
 8007298:	f7ff fca2 	bl	8006be0 <_free_r>
 800729c:	2300      	movs	r3, #0
 800729e:	6363      	str	r3, [r4, #52]	@ 0x34
 80072a0:	e00d      	b.n	80072be <__sflush_r+0xae>
 80072a2:	2301      	movs	r3, #1
 80072a4:	4628      	mov	r0, r5
 80072a6:	47b0      	blx	r6
 80072a8:	4602      	mov	r2, r0
 80072aa:	1c50      	adds	r0, r2, #1
 80072ac:	d1c9      	bne.n	8007242 <__sflush_r+0x32>
 80072ae:	682b      	ldr	r3, [r5, #0]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d0c6      	beq.n	8007242 <__sflush_r+0x32>
 80072b4:	2b1d      	cmp	r3, #29
 80072b6:	d001      	beq.n	80072bc <__sflush_r+0xac>
 80072b8:	2b16      	cmp	r3, #22
 80072ba:	d11e      	bne.n	80072fa <__sflush_r+0xea>
 80072bc:	602f      	str	r7, [r5, #0]
 80072be:	2000      	movs	r0, #0
 80072c0:	e022      	b.n	8007308 <__sflush_r+0xf8>
 80072c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80072c6:	b21b      	sxth	r3, r3
 80072c8:	e01b      	b.n	8007302 <__sflush_r+0xf2>
 80072ca:	690f      	ldr	r7, [r1, #16]
 80072cc:	2f00      	cmp	r7, #0
 80072ce:	d0f6      	beq.n	80072be <__sflush_r+0xae>
 80072d0:	0793      	lsls	r3, r2, #30
 80072d2:	680e      	ldr	r6, [r1, #0]
 80072d4:	bf08      	it	eq
 80072d6:	694b      	ldreq	r3, [r1, #20]
 80072d8:	600f      	str	r7, [r1, #0]
 80072da:	bf18      	it	ne
 80072dc:	2300      	movne	r3, #0
 80072de:	eba6 0807 	sub.w	r8, r6, r7
 80072e2:	608b      	str	r3, [r1, #8]
 80072e4:	f1b8 0f00 	cmp.w	r8, #0
 80072e8:	dde9      	ble.n	80072be <__sflush_r+0xae>
 80072ea:	6a21      	ldr	r1, [r4, #32]
 80072ec:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80072ee:	4643      	mov	r3, r8
 80072f0:	463a      	mov	r2, r7
 80072f2:	4628      	mov	r0, r5
 80072f4:	47b0      	blx	r6
 80072f6:	2800      	cmp	r0, #0
 80072f8:	dc08      	bgt.n	800730c <__sflush_r+0xfc>
 80072fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80072fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007302:	81a3      	strh	r3, [r4, #12]
 8007304:	f04f 30ff 	mov.w	r0, #4294967295
 8007308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800730c:	4407      	add	r7, r0
 800730e:	eba8 0800 	sub.w	r8, r8, r0
 8007312:	e7e7      	b.n	80072e4 <__sflush_r+0xd4>
 8007314:	20400001 	.word	0x20400001

08007318 <_fflush_r>:
 8007318:	b538      	push	{r3, r4, r5, lr}
 800731a:	690b      	ldr	r3, [r1, #16]
 800731c:	4605      	mov	r5, r0
 800731e:	460c      	mov	r4, r1
 8007320:	b913      	cbnz	r3, 8007328 <_fflush_r+0x10>
 8007322:	2500      	movs	r5, #0
 8007324:	4628      	mov	r0, r5
 8007326:	bd38      	pop	{r3, r4, r5, pc}
 8007328:	b118      	cbz	r0, 8007332 <_fflush_r+0x1a>
 800732a:	6a03      	ldr	r3, [r0, #32]
 800732c:	b90b      	cbnz	r3, 8007332 <_fflush_r+0x1a>
 800732e:	f7ff fb3f 	bl	80069b0 <__sinit>
 8007332:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d0f3      	beq.n	8007322 <_fflush_r+0xa>
 800733a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800733c:	07d0      	lsls	r0, r2, #31
 800733e:	d404      	bmi.n	800734a <_fflush_r+0x32>
 8007340:	0599      	lsls	r1, r3, #22
 8007342:	d402      	bmi.n	800734a <_fflush_r+0x32>
 8007344:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007346:	f7ff fc48 	bl	8006bda <__retarget_lock_acquire_recursive>
 800734a:	4628      	mov	r0, r5
 800734c:	4621      	mov	r1, r4
 800734e:	f7ff ff5f 	bl	8007210 <__sflush_r>
 8007352:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007354:	07da      	lsls	r2, r3, #31
 8007356:	4605      	mov	r5, r0
 8007358:	d4e4      	bmi.n	8007324 <_fflush_r+0xc>
 800735a:	89a3      	ldrh	r3, [r4, #12]
 800735c:	059b      	lsls	r3, r3, #22
 800735e:	d4e1      	bmi.n	8007324 <_fflush_r+0xc>
 8007360:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007362:	f7ff fc3b 	bl	8006bdc <__retarget_lock_release_recursive>
 8007366:	e7dd      	b.n	8007324 <_fflush_r+0xc>

08007368 <__swhatbuf_r>:
 8007368:	b570      	push	{r4, r5, r6, lr}
 800736a:	460c      	mov	r4, r1
 800736c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007370:	2900      	cmp	r1, #0
 8007372:	b096      	sub	sp, #88	@ 0x58
 8007374:	4615      	mov	r5, r2
 8007376:	461e      	mov	r6, r3
 8007378:	da0d      	bge.n	8007396 <__swhatbuf_r+0x2e>
 800737a:	89a3      	ldrh	r3, [r4, #12]
 800737c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007380:	f04f 0100 	mov.w	r1, #0
 8007384:	bf14      	ite	ne
 8007386:	2340      	movne	r3, #64	@ 0x40
 8007388:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800738c:	2000      	movs	r0, #0
 800738e:	6031      	str	r1, [r6, #0]
 8007390:	602b      	str	r3, [r5, #0]
 8007392:	b016      	add	sp, #88	@ 0x58
 8007394:	bd70      	pop	{r4, r5, r6, pc}
 8007396:	466a      	mov	r2, sp
 8007398:	f000 f8dc 	bl	8007554 <_fstat_r>
 800739c:	2800      	cmp	r0, #0
 800739e:	dbec      	blt.n	800737a <__swhatbuf_r+0x12>
 80073a0:	9901      	ldr	r1, [sp, #4]
 80073a2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80073a6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80073aa:	4259      	negs	r1, r3
 80073ac:	4159      	adcs	r1, r3
 80073ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80073b2:	e7eb      	b.n	800738c <__swhatbuf_r+0x24>

080073b4 <__smakebuf_r>:
 80073b4:	898b      	ldrh	r3, [r1, #12]
 80073b6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80073b8:	079d      	lsls	r5, r3, #30
 80073ba:	4606      	mov	r6, r0
 80073bc:	460c      	mov	r4, r1
 80073be:	d507      	bpl.n	80073d0 <__smakebuf_r+0x1c>
 80073c0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80073c4:	6023      	str	r3, [r4, #0]
 80073c6:	6123      	str	r3, [r4, #16]
 80073c8:	2301      	movs	r3, #1
 80073ca:	6163      	str	r3, [r4, #20]
 80073cc:	b003      	add	sp, #12
 80073ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073d0:	ab01      	add	r3, sp, #4
 80073d2:	466a      	mov	r2, sp
 80073d4:	f7ff ffc8 	bl	8007368 <__swhatbuf_r>
 80073d8:	9f00      	ldr	r7, [sp, #0]
 80073da:	4605      	mov	r5, r0
 80073dc:	4639      	mov	r1, r7
 80073de:	4630      	mov	r0, r6
 80073e0:	f7ff f9ce 	bl	8006780 <_malloc_r>
 80073e4:	b948      	cbnz	r0, 80073fa <__smakebuf_r+0x46>
 80073e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073ea:	059a      	lsls	r2, r3, #22
 80073ec:	d4ee      	bmi.n	80073cc <__smakebuf_r+0x18>
 80073ee:	f023 0303 	bic.w	r3, r3, #3
 80073f2:	f043 0302 	orr.w	r3, r3, #2
 80073f6:	81a3      	strh	r3, [r4, #12]
 80073f8:	e7e2      	b.n	80073c0 <__smakebuf_r+0xc>
 80073fa:	89a3      	ldrh	r3, [r4, #12]
 80073fc:	6020      	str	r0, [r4, #0]
 80073fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007402:	81a3      	strh	r3, [r4, #12]
 8007404:	9b01      	ldr	r3, [sp, #4]
 8007406:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800740a:	b15b      	cbz	r3, 8007424 <__smakebuf_r+0x70>
 800740c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007410:	4630      	mov	r0, r6
 8007412:	f000 f8b1 	bl	8007578 <_isatty_r>
 8007416:	b128      	cbz	r0, 8007424 <__smakebuf_r+0x70>
 8007418:	89a3      	ldrh	r3, [r4, #12]
 800741a:	f023 0303 	bic.w	r3, r3, #3
 800741e:	f043 0301 	orr.w	r3, r3, #1
 8007422:	81a3      	strh	r3, [r4, #12]
 8007424:	89a3      	ldrh	r3, [r4, #12]
 8007426:	431d      	orrs	r5, r3
 8007428:	81a5      	strh	r5, [r4, #12]
 800742a:	e7cf      	b.n	80073cc <__smakebuf_r+0x18>

0800742c <__swbuf_r>:
 800742c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800742e:	460e      	mov	r6, r1
 8007430:	4614      	mov	r4, r2
 8007432:	4605      	mov	r5, r0
 8007434:	b118      	cbz	r0, 800743e <__swbuf_r+0x12>
 8007436:	6a03      	ldr	r3, [r0, #32]
 8007438:	b90b      	cbnz	r3, 800743e <__swbuf_r+0x12>
 800743a:	f7ff fab9 	bl	80069b0 <__sinit>
 800743e:	69a3      	ldr	r3, [r4, #24]
 8007440:	60a3      	str	r3, [r4, #8]
 8007442:	89a3      	ldrh	r3, [r4, #12]
 8007444:	071a      	lsls	r2, r3, #28
 8007446:	d501      	bpl.n	800744c <__swbuf_r+0x20>
 8007448:	6923      	ldr	r3, [r4, #16]
 800744a:	b943      	cbnz	r3, 800745e <__swbuf_r+0x32>
 800744c:	4621      	mov	r1, r4
 800744e:	4628      	mov	r0, r5
 8007450:	f000 f82a 	bl	80074a8 <__swsetup_r>
 8007454:	b118      	cbz	r0, 800745e <__swbuf_r+0x32>
 8007456:	f04f 37ff 	mov.w	r7, #4294967295
 800745a:	4638      	mov	r0, r7
 800745c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800745e:	6823      	ldr	r3, [r4, #0]
 8007460:	6922      	ldr	r2, [r4, #16]
 8007462:	1a98      	subs	r0, r3, r2
 8007464:	6963      	ldr	r3, [r4, #20]
 8007466:	b2f6      	uxtb	r6, r6
 8007468:	4283      	cmp	r3, r0
 800746a:	4637      	mov	r7, r6
 800746c:	dc05      	bgt.n	800747a <__swbuf_r+0x4e>
 800746e:	4621      	mov	r1, r4
 8007470:	4628      	mov	r0, r5
 8007472:	f7ff ff51 	bl	8007318 <_fflush_r>
 8007476:	2800      	cmp	r0, #0
 8007478:	d1ed      	bne.n	8007456 <__swbuf_r+0x2a>
 800747a:	68a3      	ldr	r3, [r4, #8]
 800747c:	3b01      	subs	r3, #1
 800747e:	60a3      	str	r3, [r4, #8]
 8007480:	6823      	ldr	r3, [r4, #0]
 8007482:	1c5a      	adds	r2, r3, #1
 8007484:	6022      	str	r2, [r4, #0]
 8007486:	701e      	strb	r6, [r3, #0]
 8007488:	6962      	ldr	r2, [r4, #20]
 800748a:	1c43      	adds	r3, r0, #1
 800748c:	429a      	cmp	r2, r3
 800748e:	d004      	beq.n	800749a <__swbuf_r+0x6e>
 8007490:	89a3      	ldrh	r3, [r4, #12]
 8007492:	07db      	lsls	r3, r3, #31
 8007494:	d5e1      	bpl.n	800745a <__swbuf_r+0x2e>
 8007496:	2e0a      	cmp	r6, #10
 8007498:	d1df      	bne.n	800745a <__swbuf_r+0x2e>
 800749a:	4621      	mov	r1, r4
 800749c:	4628      	mov	r0, r5
 800749e:	f7ff ff3b 	bl	8007318 <_fflush_r>
 80074a2:	2800      	cmp	r0, #0
 80074a4:	d0d9      	beq.n	800745a <__swbuf_r+0x2e>
 80074a6:	e7d6      	b.n	8007456 <__swbuf_r+0x2a>

080074a8 <__swsetup_r>:
 80074a8:	b538      	push	{r3, r4, r5, lr}
 80074aa:	4b29      	ldr	r3, [pc, #164]	@ (8007550 <__swsetup_r+0xa8>)
 80074ac:	4605      	mov	r5, r0
 80074ae:	6818      	ldr	r0, [r3, #0]
 80074b0:	460c      	mov	r4, r1
 80074b2:	b118      	cbz	r0, 80074bc <__swsetup_r+0x14>
 80074b4:	6a03      	ldr	r3, [r0, #32]
 80074b6:	b90b      	cbnz	r3, 80074bc <__swsetup_r+0x14>
 80074b8:	f7ff fa7a 	bl	80069b0 <__sinit>
 80074bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80074c0:	0719      	lsls	r1, r3, #28
 80074c2:	d422      	bmi.n	800750a <__swsetup_r+0x62>
 80074c4:	06da      	lsls	r2, r3, #27
 80074c6:	d407      	bmi.n	80074d8 <__swsetup_r+0x30>
 80074c8:	2209      	movs	r2, #9
 80074ca:	602a      	str	r2, [r5, #0]
 80074cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80074d0:	81a3      	strh	r3, [r4, #12]
 80074d2:	f04f 30ff 	mov.w	r0, #4294967295
 80074d6:	e033      	b.n	8007540 <__swsetup_r+0x98>
 80074d8:	0758      	lsls	r0, r3, #29
 80074da:	d512      	bpl.n	8007502 <__swsetup_r+0x5a>
 80074dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80074de:	b141      	cbz	r1, 80074f2 <__swsetup_r+0x4a>
 80074e0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80074e4:	4299      	cmp	r1, r3
 80074e6:	d002      	beq.n	80074ee <__swsetup_r+0x46>
 80074e8:	4628      	mov	r0, r5
 80074ea:	f7ff fb79 	bl	8006be0 <_free_r>
 80074ee:	2300      	movs	r3, #0
 80074f0:	6363      	str	r3, [r4, #52]	@ 0x34
 80074f2:	89a3      	ldrh	r3, [r4, #12]
 80074f4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80074f8:	81a3      	strh	r3, [r4, #12]
 80074fa:	2300      	movs	r3, #0
 80074fc:	6063      	str	r3, [r4, #4]
 80074fe:	6923      	ldr	r3, [r4, #16]
 8007500:	6023      	str	r3, [r4, #0]
 8007502:	89a3      	ldrh	r3, [r4, #12]
 8007504:	f043 0308 	orr.w	r3, r3, #8
 8007508:	81a3      	strh	r3, [r4, #12]
 800750a:	6923      	ldr	r3, [r4, #16]
 800750c:	b94b      	cbnz	r3, 8007522 <__swsetup_r+0x7a>
 800750e:	89a3      	ldrh	r3, [r4, #12]
 8007510:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007514:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007518:	d003      	beq.n	8007522 <__swsetup_r+0x7a>
 800751a:	4621      	mov	r1, r4
 800751c:	4628      	mov	r0, r5
 800751e:	f7ff ff49 	bl	80073b4 <__smakebuf_r>
 8007522:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007526:	f013 0201 	ands.w	r2, r3, #1
 800752a:	d00a      	beq.n	8007542 <__swsetup_r+0x9a>
 800752c:	2200      	movs	r2, #0
 800752e:	60a2      	str	r2, [r4, #8]
 8007530:	6962      	ldr	r2, [r4, #20]
 8007532:	4252      	negs	r2, r2
 8007534:	61a2      	str	r2, [r4, #24]
 8007536:	6922      	ldr	r2, [r4, #16]
 8007538:	b942      	cbnz	r2, 800754c <__swsetup_r+0xa4>
 800753a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800753e:	d1c5      	bne.n	80074cc <__swsetup_r+0x24>
 8007540:	bd38      	pop	{r3, r4, r5, pc}
 8007542:	0799      	lsls	r1, r3, #30
 8007544:	bf58      	it	pl
 8007546:	6962      	ldrpl	r2, [r4, #20]
 8007548:	60a2      	str	r2, [r4, #8]
 800754a:	e7f4      	b.n	8007536 <__swsetup_r+0x8e>
 800754c:	2000      	movs	r0, #0
 800754e:	e7f7      	b.n	8007540 <__swsetup_r+0x98>
 8007550:	20000020 	.word	0x20000020

08007554 <_fstat_r>:
 8007554:	b538      	push	{r3, r4, r5, lr}
 8007556:	4d07      	ldr	r5, [pc, #28]	@ (8007574 <_fstat_r+0x20>)
 8007558:	2300      	movs	r3, #0
 800755a:	4604      	mov	r4, r0
 800755c:	4608      	mov	r0, r1
 800755e:	4611      	mov	r1, r2
 8007560:	602b      	str	r3, [r5, #0]
 8007562:	f7f9 fb96 	bl	8000c92 <_fstat>
 8007566:	1c43      	adds	r3, r0, #1
 8007568:	d102      	bne.n	8007570 <_fstat_r+0x1c>
 800756a:	682b      	ldr	r3, [r5, #0]
 800756c:	b103      	cbz	r3, 8007570 <_fstat_r+0x1c>
 800756e:	6023      	str	r3, [r4, #0]
 8007570:	bd38      	pop	{r3, r4, r5, pc}
 8007572:	bf00      	nop
 8007574:	200004d0 	.word	0x200004d0

08007578 <_isatty_r>:
 8007578:	b538      	push	{r3, r4, r5, lr}
 800757a:	4d06      	ldr	r5, [pc, #24]	@ (8007594 <_isatty_r+0x1c>)
 800757c:	2300      	movs	r3, #0
 800757e:	4604      	mov	r4, r0
 8007580:	4608      	mov	r0, r1
 8007582:	602b      	str	r3, [r5, #0]
 8007584:	f7f9 fb95 	bl	8000cb2 <_isatty>
 8007588:	1c43      	adds	r3, r0, #1
 800758a:	d102      	bne.n	8007592 <_isatty_r+0x1a>
 800758c:	682b      	ldr	r3, [r5, #0]
 800758e:	b103      	cbz	r3, 8007592 <_isatty_r+0x1a>
 8007590:	6023      	str	r3, [r4, #0]
 8007592:	bd38      	pop	{r3, r4, r5, pc}
 8007594:	200004d0 	.word	0x200004d0

08007598 <_init>:
 8007598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800759a:	bf00      	nop
 800759c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800759e:	bc08      	pop	{r3}
 80075a0:	469e      	mov	lr, r3
 80075a2:	4770      	bx	lr

080075a4 <_fini>:
 80075a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075a6:	bf00      	nop
 80075a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075aa:	bc08      	pop	{r3}
 80075ac:	469e      	mov	lr, r3
 80075ae:	4770      	bx	lr
